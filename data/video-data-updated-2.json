[
  {
    "name_video": "How to succeed with a startup",
    "description_video": "Sam Altman, former YC partner and president, shares his thoughts on how you can succeed with a startup.",
    "related_categories": [
      "startup school",
      "Staying Alive",
      "Founder Psychology",
      "Becoming a Founder"
    ],
    "page_url": "/library/89-how-to-succeed-with-a-startup",
    "youtube_url": "https://youtube.com/watch?v=0lJKucu6HJc",
    "mp3_file": "downloaded/How_to_succeed_with_a_startup.mp3",
    "mp3_content": "Okay, today I'm going to talk about how to succeed with a startup obviously more than can be said here in 20 minutes But I will do the best I can The most important thing the number one lesson we try to teach startups is that the degree to which you're successful Approximates the degree to which you build a product that is so good people spontaneously tell their friends about it Startups always ask us for the secret to success They always want to believe it's something other than this because this is really hard to do But this is it if you can build a product that is so good people spontaneously tell their friends about it You have done 80% of the work that you need to be a really successful startup If you think about the most successful companies, you know Google Facebook, whatever you probably found out about them because a friend of yours said you got to try this. It's great So this is the bar Something that people love so much. They tell their friends about it one important Indicator for a product like that is a product that's simple to explain and easy to understand If you can't explain in a few words what you do, and if people don't if at least some people don't say Oh, that's pretty interesting. That's usually a mistake. It's usually a sign of unclear thinking or a need that is not big enough Another thing that startups need to look for is a market that is either started to undergo or is soon going to undergrow exponential growth I think this is actually related to one of the biggest mistakes investors make when evaluating startups Investors always say well, what's your growth rate? We care about the growth rate investors will forgive Smallish revenue today if it's growing quickly for some reason people don't think about markets this way But if you think about the most important startups, they are the ones that I start in small markets that are growing very very quickly 11 years ago the market for iPhone apps is zero dollars. It's not huge And I think if you only think about the TAM today, you'll make a big mistake What you really want to do is identify a market that's going to grow every year and be able to ride that up elevator a Really important thing to figure figuring this out is learning how to differentiate between real trends and fake trends a real trend is something that's actually going to happen in the fake trend is not or at least not yet and Before you make a big bet on a new platform. You want to make sure it's real now There's an easy trick for this which I'll share now real trends are ones where a new technology platform comes along and the early adopters use it obsessively and tell their friends how much they Love it a fake trend is one where people may buy the product But don't use it or at least not enough. So an example of a real trend. I already mentioned the iPhone. I'll mention that again When the iPhone first came out many people were dismissive because they only sold a million or two million that year And they said well this just doesn't matter but for the people that had an iPhone they used it for hours every day it became Central to their lives. They loved it. They told their friends. You've got to get one and I think it was obvious then to people paying attention that something had fundamentally shifted and we had a new a new computing platform that was gonna spawn huge businesses and it was a good time to bet on mobile apps a Fake trend or at least a fake trend as of August 2018. I would say is VR I do believe VR will be big someday. But today most people that I know That own a VR headset use it never or very rarely And so although a lot of people talk about it and maybe even a lot of people buy them There's not the intense usage per user among the early adopters that I think you want to see before you make a big bet Another thing that startups need at least one evangelical founder usually the CEO Someone at the startup has got to be the person that is going to recruit sell the product talk to the press Raise money and this requires someone who can infect with enthusiasm the whole world about what the company is trying to do And someone who becomes the chief evangelist for the company It's very hard to succeed wildly without that It's very hard to build a team at all without being able to do that One thing that helps for this is having an ambitious vision You never want to be grandiose that turns people off But you want to let yourself grow more ambitious over time and as long as you do that organically people will respond Ambitious visions are exciting. They're fun to work on In fact, I think in 2018 at least in Silicon Valley It's easier to start a hard startup than it is to start an easy startup. Now. This sounds paradoxical But ambitious projects are interesting You know in the current environment, it may be relatively easy to raise capital, but it's really hard to do everything else There's so many startups. It's so easy to start one. They all sound so promising that that bringing together enough talent in one organization is really hard to do and If you're working on a problem that you know, maybe modestly successful It's it's kind of easy to get the first few people to join you can give them a lot of equity But then it gets really hard. Why is employee 20 gonna join? Why is this? Why does this matter to the world? Why should someone work on your startup versus any of the other things they could do? and picking something that matters if you're successful is a great way to do that and So I think it's really important to think about when you're starting the company How is this going to evolve into a vision that a lot of people want to help with that a lot of people? want to be associated with because I think getting talent and getting mindshare is really hard in the current environment and People are interested in startups that matter Another thing that we've noticed among our best founders again and again and again is That they are have a confident and definite view of the future. They may be wrong And so we say it's good to be confident and flexible But this idea that you are confident and definite this is what I think is going to happen or this is what is going to happen and being relatively Sure of that having courage of your convictions Being a clear leader saying we're going to do this and that's why even in the face of a lot of doubt That seems to really correlate with success and this comes back to having an ambitious vision But the entire startup ecosystem is best set up to support companies that have a low chance of success But are huge if they work and I think going for something that is huge if it works Will attract the best people? I'm not going to talk too much about the team. There are a lot of obvious things I could say that have been said many times By many people about you know, you need smart people who want to work really hard and who communicate well These are all really true But I'd like to mention a few non obvious things that we've noticed that we don't hear people say as much About the team you need to assemble The node coastal says that the team you build is the company you build and I really think that's true. I've still Met only a handful of founders. I think that spend enough time on recruiting like Mark Zuckerberg is famously one of them But building a great team I think other than picking the right market and building a great product is the most important thing you do all founders go through a transition all successful founders where you switch from building a product to building a company and Building a company really is about the team So you need optimists The whole world will be telling you why you're gonna fail as a startup if you don't have that internal fire of belief if you Don't have people who say you know what we are gonna do this and it doesn't matter what the haters say We're gonna figure this out and there is you know this problem It must be solvable if you don't have the spirit of optimism on the team It's very hard to succeed when the world continues to punch you in the face You need at least some idea generators There are a handful of people in any company that has gone on to be really successful that I that I've been able to Work with who are just really good at coming up with lots of ideas You don't too many of these people because that's more ideas than a company can follow through on But having some people within a company that are just constantly throwing out new ideas Most of which will be bad It turns out to be super important to have on the team This spirit of we'll figure it out is my favorite thing to hear among early startup team members a lot of things go wrong the situations that startups win in tend to be incredibly dynamic and So this idea that even if I'm not qualified on paper Even if I haven't solved this problem before even if this problem feels like it's gonna kill the company which many problems will feel that way The spirit among the team of you know what we've got the people we need That's super important Another thing that I love to hear from early team members is I've got it So, you know you hear in big companies a lot of people say that's not my department someone else is gonna do that Yeah, or you know, this is really bad. This is gonna hurt us and you want people who just step up and say I'll do it I've got it. Don't worry about it You want people to have a bias towards action Startups especially in their early days Often win by moving very quickly You never get as much data as you'd like you never have as much time to deliberate as you'd like and you want people who Will are willing to act with? Much less data than they like to have with much less certainty And then if they act and it doesn't work, they adapt really quickly and try something else If you're a startup, you're gonna have a bias towards action Adapt really quickly and try something else We talk also about the blessing of inexperience We have seen many of our startups do incredible things because no one told them it was hard or no one told them They can't do it There's a great quote from Steve Wozniak about how all the best things he ever did came from having no experience whatsoever and having no money And you know that obviously is not always true But there is a magic thing that happens with startups Especially in their early days before they've learned they're not supposed to be able to do certain things And so I think as a startup again doesn't work to have everybody being experienced But you can take more bets than you normally would on inexperienced but super high potential people That's the end of the topic on on team one of the most important jobs you have as a founder is To never lose momentum and this is a little bit depressing because it means for the first few years You never get to take your foot off of it the gas you never get to really rest We try to be honest about this that startups are not the best choice for work-life balance at all But especially in the early days startups survive on their own momentum If you have momentum people keep delivering results beyond what they think they're capable of if you lose momentum It's very difficult to get it back and so Continuing to make sure that the startup has a cadence that the startup keeps winning on a relatively predict Relatively short and predictable intervals. This is really important and it's up to the founders to make sure that that you don't lose a hold of this Another thing that we think startups need is is a competitive advantage over time now This is something that sounds so obvious. I hesitated to even put it in This is well discussed, but we're seeing more and more startups Apply to YC and when we ask them, so so what is the long-term monopoly effect here? What is the long-term competitive advantage? What is you know, where is the network effect in this business? They look at us like it's the first time we've ever they've ever heard this question All of the really great businesses. I know Have an answer to this question. And in fact the better they are the more they pretend not to But this is something that you you want to have a plan for Another thing you want to have a plan for is at least a sensible business model You don't have to have it all figured out at the beginning But when we ask founders, so how are you ever gonna make money and they look at us like it's the first time They've ever been asked that question which happens more often than you would think recently. That's a bad sign, too Again this one is so common that I hesitate to put it in here But when we ask a startup how they're gonna grow how they're gonna get users and they look at us like it's the first time They've ever heard that question bad sign. So some sensible idea to try here first Paul Buhite once spent a bunch of time looking one of the YC partners spent a bunch of time looking at the traits of our best founders and Tried to distill down what they were and he came up with frugality focus obsession and love. I Actually, I think that is really good. I don't have much to add But I think these are things that you should be able to say about what you're doing and you as a founder and Finally I want to talk about why startups get to beat big companies We've there are lots of reasons. I'm going to talk about a few common ones here. I think these trends are Valuable enough that as you evaluate startup ideas you might do it's worth thinking about if you fit into these because it's really hard for startups to beat big companies most of the time and Here are some areas where we see it happening repeatedly So I think one difference is if you are a product manager at a big company and you want to do something that sounds Sounds like a bad idea, but is a good idea You have to get everybody from your boss sometimes all the way up to the CEO to say yes So one no can kill you if you're a startup You can go to YC demo day any number of the thousands of investors can say yes And you get to have a crack at it So it's a very different mindset and for those ideas that sound bad, but are good Because of this phenomenon this one no versus one. Yes Startups can win in fact startups usually do beat big companies in that category of ideas So look look for ideas that sound bad, but are good and where you are much more likely to get one. Yes Then someone at a big company is to get all yeses Another area where startups usually beat big companies are in very fast-changing markets startups great speed great Advantage is an agility and speed the more a market is changing the higher the number of decisions you get to make And and the higher number of tweaks to your product And your strategy you get to make and you want to optimize the number of those decisions that Someone has to make to compete with you because a big company will make them on average worse and certainly much slower than you do So the speed of market evolution Gives you a lot more chances to compound your advantage over a big company And then finally startups usually win on big platform shifts Many people have observed that startups come in these clusters Those clusters usually come after a big platform shift. We'll stick with the iPhone example here after mobile apps became a thing After mobile apps became a thing many new companies got started that are now quite valuable and one of the reasons here is You know most large companies work on sort of an annual cadence at least and when there's a huge platform shift They are not good at making a big enough strategic pivot the battleship just turns too slowly Whereas a startup can say wow woke up this morning. The world is fundamentally different than it was six months ago We're gonna go all in on this new direction And so that's a way that startups usually win or that that's an area where startups usually win there. There are many others but Thinking about these three. I think is is directionally a good thing to do All right. That's all I've got for today Jeff. Thank you very much for having me and for the class You"
  },
  {
    "name_video": "Elon Musk on how to build the future",
    "description_video": "Elon Musk discusses what high value ideas people should work on today and what's important for future of the humanity, including artificial intelligence and genetics.",
    "related_categories": [
      "Technical",
      "Artificial Intelligence",
      "Startup Ideas"
    ],
    "page_url": "/library/6W-elon-musk-on-how-to-build-the-future",
    "youtube_url": "https://youtube.com/watch?v=tnBQmEqBCY0",
    "mp3_file": "downloaded/Elon_Musk_on_how_to_build_the_future.mp3",
    "mp3_content": "Today we have Elon Musk. Elon, thank you for joining us. Yeah, thanks for having me. So, we want to spend the time today talking about your view of the future and what people should work on. So, to start off, could you tell us, you famously said when you were younger there were five problems that you thought were most important for you to work on. If you were 22 today, what would the five problems that you would think about working on be? Well, first of all, I think if somebody is doing something that is useful to the rest of society, I think that's a good thing. Like, it doesn't have to change the world. Like, you know, if you're doing something that has high value to people, and frankly, even if it's something, if it's like just a little game or, you know, some improvement in photo sharing or something, if it has a small amount of good for a large number of people, that's, I mean, I think that's fine. Like, stuff doesn't need to change the world just to be good. But, you know, in terms of things that I think are most likely to affect the future of humanity, I think AI is probably the single biggest item in the near term that's likely to affect humanity. So it's very important that we have the advent of AI in a good way. That is something that if you could look at the crystal ball and see the future, you would like that outcome. Because it is something that could go wrong, as we've talked about many times. And so we really need to make sure it goes right. That's, I think, AI, working on AI and making sure it's a great future. That's the most important thing, I think, right now. The most pressing item. Then, obviously, anything to do with genetics. If you can actually solve genetic diseases, if you can prevent dementia or Alzheimer's or something like that with genetic reprogramming, that would be wonderful. So I think genetics might be the second most important item. I think having a high bandwidth interface to the brain. We're currently bandwidth limited. We have a digital tertiary self in the form of our email capabilities, our computers, phones, applications. We're effectively superhuman. But we're extremely bandwidth constrained in that interface between the cortex and that tertiary digital form of yourself. And helping solve that bandwidth constraint would be, I think, very important for the future as well. So one of the, I think, most common questions I hear ambitious young people ask is, I want to be the next Elon Musk. How do I do that? Obviously, the next Elon Musk will work on very different things than you did. But what have you done or what did you do when you were younger that you think sort of set you up to have a big impact? Well, I think, first of all, I should say that I did not expect to be involved in all these things. So the five things that I thought about at the time in college quite a long time ago, 25 years ago, making life multi-planetary, accelerating the transition to sustainable energy, the Internet, broadly speaking, and then genetics and AI. I think I didn't expect to be involved in all of those things. Actually, at the time in college, I sort of thought helping with electrification of cars was how I would start out. And that's actually what I worked on as an intern was advanced ultracapacitors to see if they would be a breakthrough relative to batteries for energy storage in cars. And then when I came out to go to Stanford, that's what I was going to be doing my grad studies on, was working on advanced energy storage technologies for electric cars. And then I put that on hold to start an Internet company in 95 because there does seem to be a time for particular technologies when they're at a steep point in the inflection curve. And I didn't want to do a PhD at Stanford and watch it all happen. And I wasn't entirely certain that the technology I'd be working on would actually succeed. You can get a doctorate on many things that ultimately do not have a practical bearing on the world. And I really was just trying to be useful. That's the optimization. It's like, what can I do that would actually be useful? Do you think people that want to be useful today should get PhDs? Mostly not. So what is the best way to be useful? Some, yes, but mostly not. How should someone figure out how they can be most useful? Whatever this thing is that you're trying to create, what would be the utility delta compared to the current state of the art times how many people it would affect? So that's why I think having something that makes a big difference but affects a sort of small to moderate number of people is great, as is something that makes even a small difference but affects a vast number of people. Like the area under the curve. Yeah, exactly. The area under the curve would actually be roughly similar for those two things. So it's actually really about just trying to be useful. And then when you're trying to estimate probability of success, so you say this thing will be really useful, good area under the curve, I guess to use the example of SpaceX, when you made the go decision that you were actually going to do that, this was kind of a very crazy thing at the time. Very crazy, for sure. Yeah, well I'm not sure I have a saying that. But I kind of agreed with them that it was quite crazy. Crazy if the objective was to achieve the best risk adjusted return, starting a rocket company is insane. But that was not my objective. I'd simply come to the conclusion that if something didn't happen to improve rocket technology, we'd be stuck on Earth forever. And the big aerospace companies had just had no interest in radical innovation. All they wanted to do was try to make their old technology slightly better every year. And in fact, sometimes it would actually get worse. And particularly in rockets, it's pretty bad. In 69, we were able to go to the moon with a Saturn V. And then the space shuttle could only take people to low Earth orbit. And then the space shuttle retired. That trend is basically trends to zero. People sometimes think technology just automatically gets better every year. But it actually doesn't. It only gets better if smart people work like crazy to make it better. That's how any technology actually gets better. And by itself, technology, if people don't work on it, actually will decline. I mean, you can look at the history of civilizations, many civilizations. And look at, say, ancient Egypt, where they were able to build these incredible pyramids. And then they basically forgot how to build pyramids. And then even hieroglyphics. They forgot how to read hieroglyphics. So we look at Rome and how they were able to build these incredible roadways and aqueducts and indoor plumbing. And they forgot how to do all of those things. And there are many such examples in history. So I think you should always bear in mind that entropy is not on your side. One thing I really like about you is you are unusually fearless and willing to go in the face of other people telling you something that's crazy. And I know a lot of pretty crazy people. You still stand out. Where does that come from, or how do you think about making a decision when everyone tells you this is a crazy idea? Or where do you get the internal strength to do that? Well, first of all, I'd say I actually think I feel fear quite strongly. So it's not as though I just have the absence of fear. I feel it quite strongly. But there are times when something is important enough, you believe in it enough, that you do it in spite of the fear. So speaking of important things. People shouldn't think, well, I feel fear about this, and therefore I shouldn't do it. It's normal to feel fear. You'd have to do something mentally wrong if you didn't feel fear. So you just feel it and let the importance of it drive you to do it anyway? Yeah. Actually, something that can be helpful is fatalism to some degree. If you just accept the probabilities, then that diminishes fear. So when starting SpaceX, I thought the odds of success were less than 10%. And I just accepted that actually probably I would just lose everything. But that maybe would make some progress. If we could just move the ball forward, even if we died, maybe some other company could pick up the baton and keep moving it forward. So that would still do some good. Yeah, same with Tesla. I thought the odds of a car company succeeding were extremely low. What do you think the odds of the Mars colony are at this point today? Well, oddly enough, I actually think they're pretty good. So like, when can I go? Okay. At this point, I am certain there is a way. I'm certain that success is one of the possible outcomes for establishing a self-sustaining Mars colony, in fact, a growing Mars colony. I'm certain that that is possible. Whereas until maybe a few years ago, I was not sure that success was even one of the possible outcomes. It's a meaningful number of people going to Mars. I think this is potentially something that can be accomplished in about ten years. Maybe sooner. Maybe nine years. I need to make sure that SpaceX doesn't die between now and then, and that I don't die, or if I do die, that someone takes over who will continue that. You shouldn't go on the first launch. Yeah, exactly. The first launch will be robotic anyway. I want to go except for that internet latency. Yeah, the internet latency will be pretty significant. Mars is roughly 12 light minutes from the sun, and Earth is 8 light minutes. So the closest approach to Mars is 4 light minutes away. The furthest approach is 20. A little more because you can't talk directly through the sun. Speaking of really important problems, AI. So you have been outspoken about AI. Could you talk about what you think the positive future for AI looks like and how we get there? Okay, I do want to emphasize that this is not really something that I advocate, or this is not prescriptive. This is simply hopefully predictive. Because people sometimes say, well, this is something that I want to occur, so this is something I think that probably is the best of the available alternatives. The best of the available alternatives that I can come up with, and maybe somebody else can come up with a better approach or better outcome, is that we achieve democratization of AI technology, meaning that no one company or small set of individuals has control over advanced AI technology. I think that's very dangerous. It could also get stolen by somebody bad, like some evil dictator or country could send their intelligence agency to go steal it and gain control. It just becomes a very unstable situation, I think, if you've got any incredibly powerful AI. You just don't know who's going to control that. So it's not as I think that the risk is that the AI would develop all of its own right off the bat. I think the concern is that someone may use it in a way that is bad. And even if they weren't going to use it in a way that's bad, that somebody could take it from them and use it in a way that's bad. That I think is quite a big danger. So I think we must have democratization of AI technology and make it widely available. And that's the reason that obviously Yumi and the rest of the team created OpenAI, was to help spread out AI technology so it doesn't get concentrated in the hands of a few. But then of course that needs to be combined with solving the high bandwidth interface to the cortex. Humans are so slow. Humans are so slow. Yes, exactly. But we already have a situation in our brain where we've got the cortex and the limbic system. And the limbic system is kind of the primitive brain. It's kind of like your instincts and whatnot. And then the cortex is the thinking upper part of the brain. Those two seem to work together quite well. Occasionally your cortex and limbic system may disagree. It generally works pretty well. It generally works pretty well and it's rare to find someone who... I've not found someone who wishes to either get rid of their cortex or get rid of their limbic system. Very true. Yeah, that's unusual. So I think if we can effectively merge with AI by improving the neural link between your cortex and your digital extension yourself, which already exists, just has a bandwidth issue. And then effectively you become an AI human symbiote. And if that then is widespread with anyone who wants it, can have it, then we solve the control problem as well. We don't have to worry about some sort of evil dictator AI because we are the AI collectively. That seems like the best outcome I can think of. So you've seen other companies in their early days that start small and get really successful. Hope I don't forget asking this on camera, but how do you think OpenAI is going as a six-month-old company? It seems to go pretty well. I think we've got a really talented group at OpenAI. It seems like it. Yeah, a really talented team and they're working hard. OpenAI is structured as a 501c3 nonprofit. But many nonprofits do not have a sense of urgency. It's fine. They don't have to have a sense of urgency. But OpenAI does. I think people really believe in the mission. I think it's important and it's about minimizing the risk of existential harm in the future. And so I think it's going well. I'm pretty impressed with what people are doing and the talent level. And obviously we're always looking for great people to join the mission. Close to 40 people now. Yeah. All right, just a few more questions before we wrap up. How do you spend your days now? What do you allocate most of your time to? My time is mostly split between SpaceX and Tesla. And of course I try to spend part of every week at OpenAI. So I spend basically half a day at OpenAI most weeks. And then I have some OpenAI stuff that happens during the week. But other than that, it's really SpaceX and Tesla. And what do you do when you're at SpaceX or Tesla? What does your time look like there? Yeah, that's a good question. I think a lot of people think I must spend a lot of time with media or on business-y things. But actually almost all my time, like 80% of it is spent on engineering and design. Engineering and design. So it's developing next generation product. That's 80% of it. You probably don't remember this. A very long time ago, many, many years, you took me on a tour of SpaceX. And the most impressive thing was that you knew every detail of the rocket and every piece of engineering that went into it. And I don't think many people get that about you. Yeah, I think a lot of people think I'm kind of a business person or something. Which is fine, like business is fine. But really, it's like at SpaceX, Gwynne Shotwell is chief operating officer. She kind of manages legal, finance, sales, and kind of general business activity. entirely with the engineering team working on improving the Falcon 9 and the Dragon spacecraft and developing the Mars Colonial Architecture. And then at Tesla, it's working on the Model 3 and some in the design studio, which I think they have half a day a week, dealing with aesthetics and look and feel things. And then most of the rest of the week is just going through engineering of the car itself as well as engineering of the factory. Because the biggest epiphany I've had this year is that what really matters is the machine that builds the machine, the factory, and that is at least towards a magnitude harder than the vehicle itself. It's amazing to watch the robots go here and these cars just happen. Yeah, now this actually has a relatively low level of automation compared to what the Gigafactory will have and what Model 3 will have. What's the speed on the line of these cars? Actually the average speed on the line is incredibly slow. It's probably about, including both X and S, it's maybe five centimeters per second. And what can you get to? This is very slow. Or what would you like to get to? I'm confident we can get to at least one meter per second, so a 20-fold increase. That would be very fast. Yeah. At least. I mean, I think quite a bit. One meter per second, just to put that in perspective, is a slow walk, or like a medium-speed walk. A fast walk would be one and a half meters per second, and then the fastest humans can run over 10 meters per second. So if we're only doing 0.05 meters per second, that's very slow current speed, and at one meter per second, you can still walk faster than the production line."
  },
  {
    "name_video": "Mark Zuckerberg on building a startup",
    "description_video": "Mark Zuckerberg, co-founder & CEO of Facebook, discusses his journey as a founder, some of the hardest decisions he's had to make, and more.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/5s-mark-zuckerberg-on-building-a-startup",
    "youtube_url": "https://youtube.com/watch?v=Lb4IcGF5iTQ",
    "mp3_file": "downloaded/Mark_Zuckerberg_on_building_a_startup.mp3",
    "mp3_content": "Welcome to How to Build the Future. Today, our guest is Mark Zuckerberg. Mark, you've built one of the most influential companies in the history of the world, so we are especially excited that you are here. I'm not sure where to go from there. Why don't we start with just the early days of Facebook? Tell us what it was like when you started it. Sure. So, for me, the thing that I was really fascinated by, and always have been, is people, right? And how people work. You know, when I was in college, I studied psychology and computer science. And one of the things that you learn when you study psychology is that there are all these parts of the brain which are geared just towards understanding people, right? Understanding language, how to communicate with each other, understanding facial expressions, emotions, processing. Yet, when I looked out at the internet in 2004, which is when I was getting started, you can find almost anything else that you wanted, right? You could find news, movies, music, reference materials. But the thing that mattered the most to people, which was other people, and understanding what's going on with them, just wasn't there, right? And I think what was going on was that all that other content was just out there, able to be indexed by search engines and other services. But in order to understand what's going on with people, you needed to build tools that made it so that they could express what was going on with themselves. I wanted to figure out what courses to take, so I built this little website course match that just made it so that you could enter what courses you were taking, and you could click on them and see who else was in them. And it did all these correlations, so it told you people who took this course were likely to enjoy this course too. And the thing that just struck me from the beginning is people would just spend hours clicking through. Here are the courses that people are taking, and wow, isn't it interesting that this person is interested in these things? And it was just text, right? There was nothing that was super interesting there. But that just struck me as people have this deep thirst to understand what's going on with those around them. And there were probably 10 other things like that that I built when I was at Harvard before I actually got around to building the first version of Facebook that added a lot of these things together. Did you think Facebook was gonna be a company when you started? I built the first version of Facebook because it's something that my friends and I wanted to use at Harvard, a directory and a way to connect with the other people around us. And I didn't think at all that it was gonna be a company. I remember very specifically the night that we launched the first version. I went out to get pizza with a couple of my friends who now work here. And I remember really clearly, we were talking about how one day we thought that someone was gonna build a community like this for the world. And that that would be some company, but it clearly wasn't gonna be us. I mean, it just, it wasn't even- It didn't even occur. Yeah, no, I mean, it wasn't even an option that we considered that it might be us. I mean, we just weren't focused on building a company. Back then we were just building something that we thought would be useful at our school. So as you look back, is there something that made Facebook different from the other projects that you had built that allowed it to turn into this, the company it is today? Well, for one, I think we kept going, right? So I mean, the others, I mean, CourseMatch and just the other different crowdsource tools, they kind of serve their purpose and then we were done. Whereas with Facebook, there was just such, people loved it, right? And had such an intensity of using it. I think within a couple of weeks, two thirds of students at Harvard were using it. And all these other students at MIT and other local universities were writing in, asking us if we could open up Facebook at their school. So we kind of just followed that, right? And again, I didn't set out and my roommates didn't set out to build a service that we're gonna turn into a company, but we just kind of followed what people wanted and that led us to expand it to all these other schools and eventually beyond schools. And at some point, once we'd hired a bunch of people, we decided to turn it into a company and go for this mission of connecting the world, but that's not where we started. As you think about where you did start, is there other advice that comes to mind that you give to other people that wanna build products that you can take away from the early days of Facebook? Yeah, I always think that you should start with the problem that you're trying to solve in the world and not start with deciding that you wanna build a company, right? And the best companies that get built are things that are trying to drive some kind of social change, even if it's just local in one place, more than starting out because you wanna make a bunch of money or have a lot of people working for you or build some company in some way. So, I always think that this is kind of a perverse thing about Silicon Valley in a way, which is that people decide often that they wanna start a company before they even decide what they wanna do. And that just feels really backwards to me. And for anyone who's had the experience of actually building a company, you go through some really hard things along the way. And I think part of what gets you through that is believing in what you're doing and knowing that what you're doing is really delivering a lot of value for people. And that's, I think, how the best companies end up getting made. I wanna talk for a second about low points because I think people never appreciate how bad they really are. And I think it's always reassuring to hear that even Mark Zuckerberg went through some serious low points and came out okay. So, can you tell us about some of the hardest parts in the early history of Facebook? Yeah, I think one of the hardest parts for me was actually when Yahoo offered to buy the company for a lot of money. Because up until that point, that was the turning point in the company where before that, every day we'd just come in and kind of do what we thought was the right next thing to do. We'd open to more schools, we'd open to high school, we'd open beyond schools and launch more photos because that's what seemed like the next thing that we needed to do to help people express themselves and understand more of what was going on around them. But then, Yahoo came in with this really meaningful offer, right? I mean, a billion dollars for- And this was how far into the company? It was a couple of years in. Right, and we had 10 million people using the product at the time. So it wasn't like, it wasn't as if it were obvious that we were gonna succeed far beyond that. And that was the first point where we really had to look at the future and say, wow, is what we're gonna build going to actually be so much more meaningful for this? And that caused a lot of interesting conversations in the company and with our investors. And at the end of that, Dustin and I just decided, no, we think that we can actually go connect more than just the 10 million people who are in schools. We can go beyond that and have this really be a successful thing. And we decided to go for it, but that was really stressful because a lot of people really thought that we should sell the company. And for a lot of folks who joined a startup, I feel like at that point, I hadn't been very good about communicating that we were trying to go for this mission. You know, we just showed up every day and just kind of did what we thought was the right next thing to do. So for a lot of the folks who joined early on, they weren't really aligned with me, right? For them, you know, they joined and being able to sell a company for a billion dollars after a couple of years, that was like a home run, right? And it is a home run, right? And that's, you know, I think that that's, I get that. But, you know, I think that the fact that I didn't communicate very well about what we were trying to do caused this huge tension. And the part that was painful wasn't turning down the offer. It was the fact that after that, huge amounts of the company quit because they didn't believe in what we were doing. Right, I mean, if you look at the management team that we had- Did that whole management team leave? The whole management team was gone within about a year after that. Did you ever regret that decision in that period? Like were there times where you were like, well, we should have sold? You know, we were, I got really lucky because, you know, not only did what I believed in end up working out, but it ended up working out pretty quickly, right? So it literally, you know, I think this was in the summer of 2006 and by, you know, I think the next month after that, we launched News Feed, right? Which now 10 years later, looking back at it as, you know, one of the most used products in the world. And then we launched the ability for anyone to sign up, which immediately started growing the community. So within a few months after turning down the offer, I think it was actually pretty clear that that was the right decision. But, you know, I think, you know, since then there have been much harder decisions that we've had to make where, you know, sometimes you have to bet on something and, you know, either, you know, bet the direction of the company or, you know, bet billions of dollars on something. And it's not going to be clear whether you're right for five or 10 years. And, you know, that I think actually can end up being much harder than this one. That's what I want to talk about next. But before we go there, have you ever thought about selling the company again since? No, after that point. So that was just, got that out of the way. We're going to hire people that want to be here for a long time. Yeah. Cool. Yeah, so I want to talk about one of the most common questions we get from people building products is how to decide what to build, how to figure out when to bet the company, how to do something totally new. Yeah. And I think one thing that Facebook has done incredibly well is figure out what to build and build this repeated innovation culture, which I think is like the hardest thing to do in business. So how have you done that and how do you advise other people to do the same? I think the key is building a company which is focused on learning as quickly as possible, right? Companies are learning organisms and you can make decisions that either make it so that you learn faster or you learn slower. And, you know, in a lot of ways, building a company is like following the scientific method, right? You try a bunch of different hypotheses and if you've set up the experiments well, then you kind of learn what to do. And I think that's an important philosophy. So there are all these different decisions that we make inside the company, you know, everything down to really empowering individual engineers. We invest in this huge testing framework, right? At any given point in time, there's not just one version of Facebook running in the world, right? There's probably tens of thousands of versions running because engineers here have the power to try out an idea and ship it to, you know, maybe 10,000 people or a hundred thousand people. And then they get a readout on how that version of what they did, whether it was a change to, you know, show better content to newsfeed or UI change or some new feature. They get a readout on how that version performed compared to the baseline version of Facebook that we have on everything that we care about, how connected people are, you know, how much people are sharing and how much they say that they're finding meaningful content. Business metrics, like how much revenue we make and engagement of the overall community. And, you know, by running tens of thousands of different experiments and putting the power in people's hands to try all these different things, you can imagine we just make so much more progress than we could if every change had to be approved by me, right, or every idea had to come from management. So I do think that there's something very deep about building this, you know, learning culture and moving quickly towards that that just helps you get ahead over time. What about the bigger bets, like making a large acquisition or the rollout of newsfeed or something like that? How do those decisions work? So I actually think when you do stuff well, you shouldn't have to do big, crazy things, right? So you want to actually evolve in a way where you're working with your community and making steps and learning. So take newsfeed, for example. That was a relatively big shift, but it actually had been a couple of years in the making by watching how people were using the service, right? So, you know, when we started off, we didn't have anything like newsfeed that showed you updates from what people were sharing. We just had profiles. And what we found were, originally one of the big behaviors was people would just click around, right? They'd click on different profiles, you know, hundreds of them just to, and they'd go through all their friends to see what people had changed, right? To see what the update was in their friend's day. And we learned from that that people were not just interested in looking up and learning about a person, but also understanding the day-to-day changes. So, you know, first we made this product that just showed in order which of your friends had updated their profile, right? So that at least told you whose profile to click on. And then, you know, the first version of newsfeed was really simple. All it did was it basically took the content that people were posting and put it in order on your homepage. So I think when things are working well, you use data and you use the qualitative feedback that you're getting from listening to how your community is using your product to tell you what problems to go solve. And then you basically use intuition to figure out what the solutions to those problems might be. And then you test those hypotheses by rolling them out and getting more data and feedback on that. And then that gives you a sense of where to go. You know, when I look at things like, you know, we bought, you know, the Oculus team for a lot of money, right, I actually view that as, you know, if we'd done a better job of building up some of the expertise to do some of that stuff internally, then, you know, maybe we wouldn't have had to do that. But, you know, instead we hadn't done that. And, you know, the Oculus team is by far the most talented team working on that problem. So it just made sense to go make this big move. But I actually kind of think as CEO, it's your job to not get into a position where you need to be doing these crazy things, right? And, you know, of course it's inevitable, you know, over the period of doing stuff, you'll, you know, you can't be ahead of everything. So it's better to make big moves and be willing to do that than, you know, have pride and not do that and never admit that you could have done something better in the past. But I think when stuff is working well, you're learning incrementally and growing that way. Speaking of growing, one thing I heard you say years ago is that one of the best things Facebook had done was invent the idea of a growth group. And so this is something now that I've heard a lot of founders ask about. Could you tell us, is that still something you recommend people running companies put in place and how Facebook's worked in the early days? So making it so we could grow faster was, I think, the most important product feature that we ended up building for Facebook. And, you know, the traditional approach to growing and marketing is, you know, you have a communications group or you have a marketing team and you buy ads. And, you know, I think that there's some, sometimes there's a place for that, especially when you're trying to communicate something and get a message out. But if you're actually trying to grow a product, I think often the best levers for doing that are within the product themselves and getting people in your community who enjoy what you're doing to evangelize that to their friends and getting that to happen as efficiently as possible. So, you know, there's no magic in the growth group that we built that other people can't replicate. You know, it's just being very rigorous with data, investing in data infrastructure. So that way you can process all these different experiments and learn what people are trying to tell you and then go invest engineering and actually trying to grow the community because I think that's the most important feature for a lot of networks. And can you tell how much of an impact that group had on the growth rate of Facebook? Yeah, I think it's, you know, overall I think it's been very big. I don't have a number off the top of my head, but I mean, even just looking at, you know, some of these specific features that we've built, like people you may know, right? Which is, you know, one of the important things, right? Again, if you're, you know, a social product isn't that useful if you're not connected to other people when you're using it. So, you know, helping you go from signing up for Facebook to connecting to the people that you care about most is probably one of the most important things that we can do. Another thing that I think Facebook has done exceptionally well is hiring. And I always tell founders that this is the thing you have to get good at. So how have you hired your team and what do you look for when you bring people on? If you think about it, you know, I started the company when I was 19, right? So I can't institutionally believe that experience is that important, right? Or else I would have a hard time reconciling, you know, myself, right? And the company. So, you know, we invest in people who we think are just really talented, even if they haven't done that thing before. And, you know, that applies to people who are fresh out of university, as well as, you know, people like, you know, the CFO who took the company public had not taken a company public before, right? A lot of his background was in, you know, production development at Genentech before. So, you know, just focus on really talented people. And so if you don't have the experience to look for, how do you assess someone's raw talent? Well, often you can tell from different things that they've done, right? So it's not that, you know, obviously everyone's done something, right? I mean, even if you're 19, right, you've done side projects and interesting stuff. And you know, I think what's important is not to believe that someone has to have specifically done the job that they're going to do in order to be able to do it well. One of the things that I think we've done well is just given the people at the company a lot of opportunity, right? So, you know, it's not just me who started when I was 19 and now, you know, I'm running this big company. There were a number of people who joined who were, you know, people I did problem sets with at Harvard or they dropped out of Stanford or, you know, different programs who have grown with the company over this long period of time. And, you know, one of the things that I'm the most proud of is we have about 12 different product groups at the company and all of the people who are running them, with the exception of one, did not join the company running a product group or reporting to me. That's amazing. And the one exception was David Marcus, who was the CEO of a, you know, $50 billion public company. So, you know, so I'm pretty happy that he's on board and having him run a product group I think is a pretty big coup too. But literally, none of them started off reporting to me. You know, they all started off in different roles. Some were engineers, some were data analysts, some were product managers, and they've all grown. And so what happens is, you know, people see that you create opportunities for people. And that also, I think, keeps the best people engaged and makes the best people want to come work at your company because they feel like, oh, I'm going to get those kind of opportunities too. Cool. Yeah. What are you most excited about over the next 20 years? What do you think will be the major transformations? How will Facebook transform? How do you think the rest of the world will transform? So we have this 10-year roadmap of, you know, three of the big changes that we want to see in the world. And we're focused on three things. Connectivity, so getting everyone in the world on the internet. Right now, more than half the world is not on the internet, which is, you know, I think a lot of people in Silicon Valley probably take this for granted, right, the internet, because it just is not uniformly available. And if we want to solve a lot of the big challenges of the world today, they're not problems that any one group of people or even one country can solve, right? They really involve coming together and giving everyone an opportunity to participate in solving them. So I think connecting everyone is really a key thing, which is going to be great for people around the world. The next one is AI. I think that that's just going to unlock so much potential in so many different domains. And, you know, we use it at Facebook for a lot of different things, for showing people content that they're going to find more meaningful, for making sure that you connect with the people you actually care about on the service. But in a lot of ways, the work that we're doing on AI to push the fundamental, you know, state of the art forward is exactly the same stuff that's going into systems that diagnose diseases better, right, or find better drugs to treat people or that, you know, other companies are using when they build self-driving cars. And you know, these are things that are going to save lives, right? I mean, if you can, you know, I heard this story recently that at this conference where someone has built a machine learning application where you can take a picture of a lesion on someone's skin and it can detect instantly whether it's skin cancer with the accuracy of the best dermatologists and doctors in the world. So you know, I mean, who doesn't want that, right? And now like you're going to be able to put the power in your doctor's hand to become the best doctor in the world at that thing. Everyone will be the best doctor in the world. That's a really fundamental thing, right, that, you know, I get a little bit frustrated, I think, when people, you know, fear monger about about AI and how it could end up hurting people, because I think in many real ways around diseases or driving more safely, I mean, this is going to save people's lives and push people forward. So that's a really big deal, I think, for the next 10 years. And then, you know, the next thing that I always think is going to make a big difference is, you know, every 10 or 15 years, there's a new major computing platform that comes around that allows people to do completely different things than they could do before, right? So, you know, 20 years ago, you know, most of us were using desktop computers, they were kind of clunky, you know, we use them in work because it made our work more productive, but most people didn't use them for fun. Now we have phones, which, you know, help us connect with each other and they're much more human devices, but there's going to be another platform after that. And I think that's going to be virtual reality and augmented reality. And that, I think, is just going to help people, you know, be more creative, experience what other people are feeling much more immersively than we even can through video and things like that today. So I'm really excited about that trend as well. So you were 19 when you started Facebook. One question we hear a lot at Y Combinator is, I'm 19 today, I really want to, you know, do whatever I can to make the world better. What should I do? So how do you advise people who are 19 today and want to impact the world like you have? You know, I always think that the most important thing that entrepreneurs should do is pick something they care about, work on it, but don't actually commit to turning it into a company until it's working. And I think that if you look at the data of like the very best companies that have gotten built, I actually think a tremendous percent of them have been built that way and not from people who decided up front that they wanted to start a company because you just get locked into some local minimum a lot of the time, a local maximum. I totally agree. And just to make this point, how far into Facebook did it actually become a company? I don't know. I think probably, I think it became a formal Delaware company when Peter Thiel invested about six months in. When we were first talking to Peter about raising money, Dustin and I were very clear with him that we were planning on going back to school. Right, I mean our, you know, I started Facebook when I was a sophomore. We took the summer off, we had no classes over the summer, we were working on it. And then, you know, our stated game plan was to go back to school in the fall and continue working on it then, but not like sit in an office and work on it full time. And Peter was just kind of like, all right, sure you are. I guess he knew better than we did. Do you think he just believed that you weren't actually going to go back to school? He must have. I mean, you'd have to ask him. I will. We're interviewing him in this series. I will answer that question. I think he would probably say that he knew that we were not going to go back to school or believed that he could talk us out of it. But he didn't have to. It was pretty clear that the amount of work was just growing so quickly. But we actually didn't drop out immediately. We told Harvard that we were taking one semester off. And then we told Harvard that we were taking another semester off, and then a year off, and then after that we kind of decided we weren't going back. Speaking of Peter, and this is sort of a closing question, what's the best piece of advice he ever gave you? I think Peter was the person who told me this really pithy quote that in a world that's changing so quickly, the biggest risk you can take is not taking any risk. And I really think that that's true. A lot of people, I think, think that whenever you get yourself into a position where you have to make some big shift in direction or do something, people are going to point to the downside risks of that decision. And locally, they're maybe right. For any given decision that you're going to make, there's upside and downside. But in aggregate, if you are stagnant and you don't make those changes, then I think you're guaranteed to fail and not catch up. So to some degree, I think it's really right that over time the biggest risk that you can take is to not take any risks. That is a great place to leave it. Thank you very much. All right."
  },
  {
    "name_video": "Biggest mistakes first-time founders make",
    "description_video": "YC's Michael Seibel on the biggest mistakes he sees first-time founders make, including not working on the right problems, communication with co-founders, not launching and more.",
    "related_categories": [
      "Becoming a Founder",
      "Co-Founders",
      "Startup Ideas",
      "Problems to Solve"
    ],
    "page_url": "/library/66-biggest-mistakes-first-time-founders-make",
    "youtube_url": "https://youtube.com/watch?v=D56QeyyQMLI",
    "mp3_file": "downloaded/Biggest_mistakes_first-time_founders_make.mp3",
    "mp3_content": "Here are some of the biggest mistakes first-time founders make when starting their company and in the first year afterwards. First, I often see founders choosing to solve a problem that they actually don't care about. While this mistake isn't fatal, and while there are many, many examples of founders who've learned to love their product or their problem at a later date, one of the things that I do see is that a lot of startups that fail basically fail because they lose motivation to continue working on their company. And a lot of that has to do with the fact that they actually didn't really like the problem they were working on in the beginning. They were trying to pick a problem that they thought people might want or they thought could grow quickly or they thought might be cool, but it wasn't actually something they were willing to devote a significant amount of time, like five years plus of their life to solving. There was no deep connection to the problem. The second one is helping users you don't care about. We had this experience at Justin.TV and Twitch. In the beginning of Justin.TV, we were kind of excited by the general idea of democratizing live video and making it easy for anyone online to share live video with their friends. But we weren't actually terribly in love with the people who chose to use the platform as it continued to grow. And only when Emmett kind of really refocused the company around video game streaming did we regain the love for our users. Emmett was a gamer and he loved gamers and he loved building things for gamers. And that was really one of the core drivers of Twitch becoming a successful company. The next is choosing co-founders that you don't know well. Once again, all of these will have counterexamples, there are exceptions to every rule. But in general, startups are so hard that it is nice to have a pre-existing relationship with your co-founder just so you have a sense of whether you're going to be able to get through the hard times together, whether you can work well together. Now that pre-existing relationship can be a friendship, it could be a co-worker, they could be someone in your school, you did a school project with, but it's just helpful that you've had some context with them that you didn't just find them on the street yesterday. The next one is not having transparent conversations with your co-founders. There are very typical topics that create drama amongst co-founding teams. Performance is my co-founder working as hard as I am. Goals, are we trying to accomplish the same goal? Roles, whose job is it to do engineering? Whose job is it to do product? Whose job is it to talk to customers? And oftentimes founders just don't have these completely transparent, honest conversations about these topics. And as a result, resentment builds up and the relationship degrades. And then when you do have the conversation, it turns into a fight and that can really critically harm the startup. So that's really important to me, just having open, transparent conversations, well-organized conversations that are not designed to argue or to create fights, but to really just share how you feel about the current situation of the company, how it's organized, who's doing what. The next one is not launching. Launching has become this interesting phrase. I think when people think about launching their company, they think, oh, I'm going to get in the press. I'm going to be on the news. I'm going to be on these popular blogs. And so they're afraid of launching because they don't think they're ready for all that exposure. One of the things that we tell people is first, let's think about the products that you might use and like a lot today. Do you remember the day Snapchat launched? Do you remember the day Instagram launched? Do you remember the day that WhatsApp launched? Do you remember the day that Uber or Lyft launched? Most likely you don't. So it turns out that launching is nowhere near a significant event to your users as it is to you. So you should move up the launch as soon as possible. Until you can get your product in front of customers, you can't validate whether it solves their problem. And so it's much better to build a crappier product, release it sooner, and get it out there in front of customers to see if they want to use it. Now, there's some exceptions. For example, in some extremely regulated markets like banking, for example, or lending, it's just really hard to launch. You actually have to get a bunch of shit done before you're even allowed to get customers. But in most consumer and B2B startups that we encounter, it's actually possible to get some form of MVP built and launched in less than a month. And so that's what you should be thinking about. The next one is not using analytics, not measuring what your users do when they come to the site. We just see this time and time again. Part and parcel to building product is measuring so that you know what's being used and what's not. The next biggest mistake is having no idea where your first users will come from. I get this email a lot. A lot of founders email me saying, where do I find my first users? And I kind of think to myself, you chose this problem that you're working on, and you chose to build a solution. It's interesting to me that you chose a problem where you don't know anyone who has the problem, including yourself. I think it's a completely different question, where do I get my first hundred users or my first thousand users? That might require some kind of deep digging. But where I get my first two users or one user or three users or five users, that should come from people you know or you already have identified through some other way. And then last is prioritization. Oftentimes people will prioritize sizzle over stake. They'll prioritize press and hiring, conferences, investors, all these other things above getting product out there and talking to users. At the end of the day, we look at these startups and we say, you're cargo culting a startup. You are pretending to be a startup, but the actual work of startups is pushing product, getting it into users' hands and seeing if they like it, and then iterating it and improving. So those are the common mistakes that startups make. Caveat, I bet you can name a startup that has made every one of these mistakes and has still been successful. In fact, I bet there's a startup that's made all of these mistakes and has still been successful. But those tend to be exceptions. And if you're trying to kind of generally improve the odds of your startups being successful, try to minimize these mistakes as much as possible. Thank you."
  },
  {
    "name_video": "How to split equity among co-founders",
    "description_video": "Founders often make mistakes when figuring out equity for each co-founder. Equity should be split equally because all the work is ahead of you.",
    "related_categories": [
      "startup school",
      "Co-Founders",
      "People",
      "Stock Equity",
      "Management"
    ],
    "page_url": "/library/5x-how-to-split-equity-among-co-founders",
    "youtube_url": "https://youtube.com/watch?v=9NhEBVPlJs4",
    "mp3_file": "downloaded/How_to_split_equity_among_co-founders.mp3",
    "mp3_content": "how much equity to give your co-founders. This is a problem and a question that a lot of people have written about, and you can see a lot of varied advice online. My perspective is that most founders are missing a couple key points when divvying up their equity. The first one is your equity splits with your co-founders are what's going to motivate your co-founders to stick with your company through the years and years and years it takes in order for you to build a large company that has massive impact. Oftentimes the co-founders that you're speaking to don't quite understand how much of a time commitment they have to give to the startup if it works. And so as a CEO who's responsible for figuring out what the equity split is, oftentimes you have to think about what your co-founders would want even if they're not thinking about their own long-term interests at the moment. One of the biggest fallacies I hear from a founder is, well, we came up with this equity split because that's what we negotiated. Well, as a great CEO, your first thought has to be not, how do I come up with an equity split based on negotiation? Your first thought has to be, how do I come up with an equity split that's going to maximize the motivation of my teammates? And if you're concerned about giving equity to teammates, that's not without reason. There are lots of startup teams that break up. There are lots of founders that leave. But your primary mechanism of safety when it comes to giving equity is vesting and a cliff. So typically when you give equity to anyone in your company, but including the founders, you have what's called four-year vesting. That means that you have to work at the company for four years to actually get that equity stake. Typically also you have what's called a one-year cliff. That means if you leave or are fired from the company within the first year, you get nothing. So as a CEO that's trying to make sure you have a maximally motivated team, this is your hedge. Vesting with a cliff, four-year vesting with a one-year cliff is your hedge. This is your get out of jail free card. If you made a decision that was incorrect about choosing your co-founders, as long as you correct it within one year, there's no long-term harm to the company. On the flip side, because you have that hedge, it probably benefits you more often than not to be more generous with the equity that you give your co-founders, not less. Understanding that that equity is going to create long-term motivation to stick with your startup, especially during the times when your startup's not working well. And almost every startup has times where things are not going well. And so really what you have to think for as a CEO is I don't want to create a situation where I have to motivate my co-founders every day. I want their equity stake in this company to be the thing that gets them to wake up in the middle of the night, that gets them to work on the weekends, that gets them to work late, that gets them to recruit their friends, that gets them to feel like they are true owners of the company and not just employees. I think that I don't want to prescribe exactly what equity split creates, that phenomenon, but if you hit it, it's far more valuable. Your company becomes far more valuable because your co-founders are all motivated. In the past, I've said that most companies should have equal equity splits. I think all things being considered equal is a nice and easy rule of thumb, but it can't be applied always. So I would just always tell the CEO, be considerate about your future motivation of your co-founders. And if you're not really interested in the future motivation of your co-founders, if you don't think you're gonna need them in the long-term, why are you making them co-founders at all? You should really reconsider who's on your team if you don't think they're worth a generous equity grant. Thank you very much for your time."
  },
  {
    "name_video": "How to find product-market fit ",
    "description_video": "David Rusenko, co-founder of Weebly (YC W07), details the story of how Weebly developed one of the most popular website creation and hosting sites on the web today.",
    "related_categories": [
      "Founder Stories",
      "Customers",
      "Product Market Fit"
    ],
    "page_url": "/library/7V-how-to-find-product-market-fit",
    "youtube_url": "https://youtube.com/watch?v=0LNQxT9LvM0",
    "mp3_file": "downloaded/How_to_find_product-market_fit_.mp3",
    "mp3_content": "So, our next speaker and I have something in common. We both started businesses to allow people to create websites. The difference is that David's business was massively successful. David Rusenko is the founder of Weebly, which early this year sold to Square, and he's going to give us a talk about how Weebly found product market fit. Thanks. Thanks, Jeff. I'm really happy to be here. I'm actually very impressed with how full the room is given it's right after Burning Man. Did anyone go this year? Oh, not too many attendees. All right, we got one over there. Okay, so just by a quick way introduction, a little bit by myself. If you haven't heard of Weebly, Weebly is an easy way for entrepreneurs to build a website or an online store. Before Weebly got started, the only way to do that was to learn to code yourself. And now there are plenty of tools and services to allow you to drag and drop and build a site. I wrote the first line of code in February 2016, so a little over 12 years ago now. Grew the company to 50 million users and around 350 employees. Sold to Square in May of this year for $365 million. And probably one of my favorite stats is that half of the U.S. population visits a Weebly site every single month. The reason it's my favorite is because it's reflective of the success of the entrepreneurs. People building the websites themselves and actually having success and seeing those results. So I'm here to talk to you today about how to find product market fit. It's the top problem that anyone deals with. I'm going to try to keep it fairly practical, not theoretical, because I think finding product market fit is really about the practical nitty gritty, the hustle. So I want to just preview real quick, talk to you a little bit about our journey. Like I said, I wrote the first line of code a little over 12 years ago, which sounds really weird that it's been that long. This is what it looked like. This is a photo I took from February 2006. This is where I was at Beaver Stadium at Penn State when I wrote the first line of code. Just kind of gives you the setting. But in college, in August of 2006, so this has been six months, I should introduce this graph. So this is a graph of the new users per day signing up for Weebly. So non-cumulative, just whenever someone signs up, you know, you get a one. And this is six months in. So we still hadn't launched six months in. Dan, Chris, and I were all doing internships that summer. You can see here our massive record signup day was 12 users. I think we just created accounts for friends and family. So six months in, we still hadn't launched, right? Just to give you an idea of how long it takes. We worked for six months and hadn't launched. In October of 2006, this is eight months later, still hadn't launched, we were hustling for buzz on forums. We had created a signup link. You can see here now we had 30-some users that signed up on our record day, but eight months in and still hadn't launched. In October of 2006, I read about Y Combinator on Slashdot. The deadline was about three hours to go. So I think it was about 1 a.m. eastern when I read it. The deadline for application was midnight Pacific, so I had about two hours to go to create a YC application. I didn't have time to call up Dan and Chris, my cofounders, and ask them if they wanted to drop out of school with me and move to San Francisco. So I took a guess. My guess was that Chris was going to drop out of school and Dan wasn't going to. I called Chris up first the next morning and said, hey, Chris, you want to drop out of school with me and move to San Francisco? And just on the spot, he's like, hell yeah, let's do it. I called up Dan, I said, Dan, you want to drop out of school with me and move to San Francisco? And he said, you know what? This sounds like a really promising idea. Let me call my parents. I'll call you back in two hours. It was a much more responsible approach. But I applied with less than an hour to go. We drove up, interviewed, and got accepted. Actually, funny story, we finally were able to get on TechCrunch the day of our YC interview, so I'm sure that that didn't hurt at all. This is what that looked like. This isn't actually what a normal press spike looks like. You'll see a normal press spike later. But in this particular case, we only had two servers and we were really worried about our servers burning down and AWS didn't exist back then. So we basically decided to allow you to sign up and then say, hey, you're on the wait list. We'll contact you once you're able to access your account, which is why it spread over a few days. But the first TechCrunching, now, this is much more normal of what it looks like after a press spike. You see it kind of goes down pretty low. It's kind of hovering around the same level. If you're observant, you'll notice here one day we had zero users. That presumably means that the whole site was down, which is great. In January 2007, 11 months in, we dropped out of school, packed up all of our servers in my car, I drove cross-country to San Francisco. Would not recommend driving 80 in January. Got stuck in Wyoming for three days. But finally made it out here, and this is 11 months in. So 11 months after writing the first line of code, working out full time in San Francisco as part of the YC program. Here's what that looked like. It's still shocking to me that at one point this TV was current technology. Because it just looks so old now. But here we are. We rented a one-bedroom apartment sorry, two-bedroom apartment in the Yscraper. We pushed three desks together, and we pretty much just worked all the time. We worked 24-7. Our only rule is we'd take Saturdays off. But other than that, we'd work until we were tired. We'd sleep until we weren't. We'd work until we were tired. We'd sleep until we weren't. And just kind of repeated that process. Here is a second TechCrunch press spike that we got in January. This one's much more normal. This is exactly what you should expect if you get on TechCrunch or any press. It goes straight up, and it's really exciting that day, and then it goes straight back down the next day. But at least settles a little bit higher. In April 2007, this was 14 months in. Now you notice we had a couple other press mentions. What you'll notice here, these are going in the wrong direction. The number of new users per day is actually declining, declining, declining. Both of these are heading in the wrong direction. It means we didn't have product market fit yet. We're 14 months in. It's over a year, and we still don't have product market fit. This was kind of an interesting moment in our history, because we found ourselves with less than $100 in our bank account. And YC Demo Day was coming up soon, and we kind of had some excitement and thought, talking to investors, maybe we'll be able to raise money. But we certainly weren't sure of that. We had just gone to Costco, so we had lots of food for a couple weeks. But rent was coming up, and as everyone knows, rent in San Francisco isn't cheap. So about a week after this, I came to this very room, pitched a whole bunch of investors at Demo Day, and we were successful in raising $650K at the time. That was called a Series A. Today, it would probably be called a Pre-C. Round of funding, 14 months in, this is what a price around Series A paperwork looks like. Just to give you a perspective, too, on a little bit how crazy things have gotten out here, we raised $650K on a $2 million pre-money valuation, so 2.65 post. That was considered above average, slightly above average. We were all very jealous of Dropbox, who had raised it a $5 million post-money valuation. And today, I think that number would probably be 15, maybe 20. So it just gives you a little bit of perspective on how you can still be very successful, even if those valuation numbers today might seem low, or you might be angling for a higher one, but it really puts it all in perspective. This is May of 2007. So we got featured in Newsweek magazine, which I don't even think is in print anymore. But you can see here, the spike goes up, it comes back down, it settles at a higher level, which is great. But look, it's going in the wrong direction again. So this is now 15 months in, still no product market fit. In August of 2007, here's 18 months in, we got featured in Time magazine this time. And again, it goes up, but now it's coming back down. Now it's settling at a higher level, which is good. But again, this is 18 months in, we're 18 months into the journey, and we still have no product market fit. So just to give you an idea of how long it can take before having something even as basic as just having users that enjoy using your product and are coming back, 18 months later, we still didn't have it. Now to skip through a little bit of the rest of the story here, here is October 2007. So now 20 months in, you kind of see we had this moment, and then boom, it turns around. It turns around and starts picking up. And now all of a sudden, you can see every single day, we're getting almost 1000 people coming to our front door, which is more than we were getting featured in Newsweek magazine or on TechCrunch. First real traction that we got, fast forward again, February 2010, four years in, and now you can see we're off to the races. So I wanted to give you a little bit of snapshot of what it looked like for us to get product market fit in the early days before diving into some of the basics. So let's start with a definition on what is product market fit. So you've probably all heard Y Combinator's mantra, which is, there we go, make something people want. Actually, if I was to modify this, I would say, make something a lot of people want, because that incorporates a little bit about the market, but we'll talk about that. So first, we'll go over the stages of a company. So obviously, you start off with, I have an idea. And everything is really exciting, and you're telling all your friends about the idea. This is the very birth of a company. Let's go through some of the phases. So this is roughly all of the phases of a company. It starts with idea, you get to prototype phase, you then get to launch, traction, monetization, and growth. I put monetization after traction, because oftentimes, that's the way it goes. And actually, going from launch and getting to traction is product market fit. Monetization is actually a much easier problem than product market fit. These are the, this is sort of the initial product market fit search. Initial product market fit search is between idea and traction. So getting from idea to traction is probably the hardest thing, and the thing that kills the most companies. All right, here we go. One thing not to forget is that when you're in this phase, too, you're still refining product market fit. A lot of companies forget that. They get so focused on scaling, and so focused on, you know, continue to grow the business, and they completely forget that you're still refining and still building product market fit at this stage. So really important not to forget this. All right, so what are the hardest things at a startup? And I'm convinced that there's basically only two hard things. Number one is finding product market fit. It's really, really, really hard. Most companies will not be able to find product market fit. It's incredibly challenging. Number two is hiring and building a world-class team. That is also incredibly challenging. It's very unintuitive, and it's very, very difficult to sort of grow through that rapid growth phase and to emerge on the other side with sort of an enduring, long-lasting company and culture. Making money, I put as a very distant third. It is usually a lot harder to build a product that a lot of people really, really want than it is to figure out how to make money from that product. So I would say that's usually a distant third. You could have lots of ideas on how to make money. I would say definitely try to make money, experiment, learn, but it's a lot easier to figure out how to make money if you've already got people hooked. And then the fourth one, and we won't cover this too much, but to scale to a really big, long-enduring company, you need to build an organization that scalably and repeatedly launches great products. And that's really, really hard because it's not just going to be about the founders anymore. It's about the organization doing so scalably and repeatedly. One other sidebar is that the best companies will create a market. So if you look at sort of what Weebly's done, if you look at what Airbnb's done, if you look at what Dropbox has done, all companies have created their own market. I say this because by definition here, market research is not going to help. Market research is research on existing markets, right? And you're going to create a new market. So how do you do that? What does that look like? So first of all, you need to find a hidden need. So there is a need out in the market that a lot of companies or a lot of people don't realize exists. And if people realized it existed, if it was obvious, then everyone would be doing it. And so the hardest part is finding this hidden need. And everyone is going to tell you that the idea is dumb. Everyone's going to tell you it's stupid. I remember in the summer of 2006, after writing that first line of code, I went and pitched Weebly at the New York Tech Meetup, and it was 1,000 people. We were kind of alpha stage at that point. And it was in front of 1,000 people, and I gave a demo, a five-minute demo. And then Scott, the founder of meetup.com, came on stage and just said he thought it was the stupidest idea that he'd ever heard, and that no one needed to make websites, and that people who need to make websites already could, or people just had to learn to code. And in front of 1,000 people told us that we had the stupidest fucking idea he'd ever heard. So the point I'm making is, if it's obvious, then everyone will be doing it. So you're kind of finding a new reason. Now, the hidden need in this particular case was that there was a lot of people who needed to make a website themselves, and that was really hard, because a lot of the tools at the time were geared towards people who were hand-coding the websites, basically, like FrontPage and Dreamweaver. We were able to realize that people wanted to do that, and build a service that enabled people to do that. But figure out, what are you a substitute for? What need are you serving better? What job are people hiring you to do? If you know the jobs-to-be-done book and framework, that's really helpful to think about. What are people trying to do? People aren't trying to make a website. People are trying to launch and grow their business, right? So understanding what's the job people are trying to do, and then what substitutes are there for that job? When you think from that mindset, you might think, well, there's a website. You could also create a Facebook page. So there's lots of different substitutes for that job. I think a really important one is understanding, where are you getting pulled? Where are your customers pulling you? You shouldn't be pushing your customers towards a solution. When things are working, your customers are beating a path to your front door, and they're pulling you, and you're saying, no, you need to do this. And you're saying, yeah, but that's not what our product does. They say, well, I'm going to kind of hack it to do that anyway. When you find people hacking your product to do something it wasn't intended to do, pay attention to that and double down on that. And then often what you initially create will seem to fit into an existing market, but with less functionality, right? So it's the same thing with the iPhone. It was the same thing with Weebly. Oftentimes it doesn't have 3G. It doesn't have apps. It doesn't have any of these things initially. But what it does do is it enables a whole new market, a whole set of new entrants to come and use your product. And so the success of the iPhone wasn't that it successfully competed against smartphones. It sure looked like a smartphone. But it wasn't competing against any smartphones that were out there, because what happened is there was maybe at that point in time, I was a heavy Palm Trio user, there was maybe a couple million smartphone users in the United States. What the iPhone did is it made everyone a smartphone user. And so there was all of a sudden a whole bunch of new entrants, and then over time it also cannibalized the existing smartphone market. So a lot of times people may sort of mistake you for incumbents when you're creating an entirely new market. So the next is on building a remarkable product. So what does this process look like? And I'll try to break it down into very literal steps about exactly what you should be doing. So everyone knows this, right? Step one, have a great idea. Step two, talk to customers. Step three, something happens there. And step four, profit, right? Everyone knows this, but what is step three, right? Because that's where everyone's plodding around in the desert, like trying to figure out what the hell to do, and nothing's working. So let's talk about step three. So step three is literally this list of things. So you talk to customers and develop a market thesis. Try to understand exactly what their pain point is. What's that job they're trying to get done, and how can you help them get it done faster or better? This is really important. Listen to their problems, not their solutions. So customers will tell you the pain that they're facing. Listen to that. When they talk about the solutions, their proposed solutions, you could just completely ignore that, because they generally aren't that great. Number three, go through a rapid prototyping and user testing phase. Number four, you build a solution to their problems. Number five, test a solution with them. Number six, did it work? Go to one, repeat. And then number seven, by the time you've sort of looped on points one to six, you probably looped about 12. 27 times, and that has some interesting implications, but no one ever gets it right on the first shot. No one gets it right on the first shot. So there's some implications there. So let's dig in on a few of them. Listen to their problems, not their solutions. I like what, that Michael touched on this earlier too, about the real Steve Jobs and fake Steve Jobs. There's this meme out there that Steve Jobs just didn't talk to customers and would just like, produce the magical product that the world needed, like in one shot, just straight from his imagination. That's not how it worked. Here's a quote. Some people say, give customers what they want. That's not my approach. I think Henry Ford once said, if I'd asked customers what they wanted, they would have told me a faster horse. People don't know what they want until you show it to them. That's why I never rely on market research. That is all 100% true. Don't listen to people's proposed solutions. Market research is probably not gonna show you the way. But what he didn't say is that he never talks to customers. He didn't say that he never listens to their problems. He didn't say that he never iterates, because those are all things that Apple does a whole lot. So it's absolutely critical. Talk to customers. Understand their pain. No solution was ever delivered perfectly in a vacuum. Number three, rapid prototyping and user testing. So I think this is a really important point. Building a fully, we made this mistake a whole lot early on. Building a fully functional product just to figure out if it's gonna work or not is a really, really expensive way to test the hypothesis. So you could get caught up in this loop of like, build the product, launch it, doesn't work. Scrap, repeat, build the product, launch, doesn't work. And especially like Michael was saying, if you're always searching for that home run and it takes you three months to build that product, that is a really long time to keep iterating. The best thing you can do, however you end up doing it, is focus on getting to a functional prototype as quickly as possible. So that might be, there's a whole bunch of tools now that allow you to take mockups and make them clickable and make them feel a lot like an app. You can do it by just writing throwaway code and just getting something really, really quickly out there. There's a whole lot of ways to write functional prototypes, but get in front of users. Don't worry yet about scaling. I know we were really obsessed about writing code that was gonna scale because the underlying assumption there is that as soon as we launch it, millions of people are gonna beat a path to our front door. Doesn't happen, not gonna happen. So don't worry about scaling until you need to. I would say initially, don't worry about monetization either. You wanna focus on making sure that the product experience is right. Don't shy away from monetizing your products. Don't shy away from charging for them. But initially, you need to make sure that your product is working for people. And then expect that however many iterations you think it will take, expect it'll take about 10 times that many iterations. So what are the implications of that? And these are really important. Number one, keep your burn low, because if you only have enough cash in the bank for two to three iterations and it's gonna take you 20 to 30, then that's not gonna work. And number two, build a team that can do this really quickly. So this is, I think, one of the primary reasons why outsourcing the coding in the early days generally doesn't work. It's because when you outsource a project, that's one shot. Well, if it's gonna take you 20 to 30 shots, not gonna work. You need to build a team that can very, very quickly iterate, rinse, and repeat. Okay, this is another important point. Test a solution with customers. So here are your, there's some helpful tools here, but the most important rules are, number one, make sure you're talking to a target customer. So it's not helpful to just talk to anyone. Make sure it's the one you're targeting, but make sure that you are super flexible on changing your view on who those target customers are. So when you talk to someone and it seems like, hey, this isn't my target customer, but then all of a sudden there's a whole bunch of them showing up and they're hacking and doing really interesting things with your product, you should pay attention to that and potentially change who your target customer is. Number two, don't overthink it. I think this is a problem a lot of smart people can have. You obviously, you wanna rely on data. You wanna rely on market research. You get really, really into the weeds and the strategy and you super overthink everything. Don't overthink it. Anecdotal is okay. Just getting in there and building and launching something and trying it out and iterating is the most important thing you can do. Doing all of your homework, all of your research, you know, looking at the market, looking at the strategy. It's gonna be the perfect strategy, but no one's gonna use your product. So don't overthink it. Here are basically three tools. I think these are probably the only three that you need. Number one, customer interviews. You probably need about five to 10 of these. So basically what this is, is it's talking to a customer probably for about an hour, maybe a little bit longer, whether it's on the phone or going into their place of business or going to where they are and just understanding everything about what motivates them, what their problems are, what their pain is, and just getting that qualitative view of what they're experiencing. Number two, UX testing sessions. You only need about three to five of these. And we'll go over how to run a good UX testing session I think on the next slide. Number three, metrics. So metrics are obviously really important. Tracking the right metrics is really important. The one thing I'll say is you'll never have as large of a sample size as you want. Even at Weebly scale today, we still sometimes have difficulty with getting statistical significance for some of our tests. Be very careful about telling too many stories with your metrics that maybe aren't supported by the statistical significance. So you'll oftentimes find this, there'll be blogs writing about an A-B test and how you change the color from red to blue and it increased conversions by 27%. And it's like, oh yeah, how many people ran? Oh yeah, there were 17 people that ran through your test. Like, I'm not sure that I would pay attention to that. Okay, UX testing sessions. I think these are the most important thing that you can do. It's really, really simple, but it can be really painful. Number one, get someone to use your product or service in front of you in person. Whether that's on your phone, whether that's sitting in front of a laptop or desktop, get them to use it. Number two, encourage them to give open and honest feedback. They will not want to give you open and honest feedback because it feels awkward telling someone that their baby is ugly. But you have to try your best to encourage open and honest feedback. Number three, ask them to perform a task. You are not allowed to touch the phone or keyboard. You are not allowed to do anything once you tell them to perform the task. Number four, and this is most difficult, do not say anything. It's really, really, really hard. You will go through extreme agony as they struggle to figure out how the hell to do something really basic like sign up for your app and you'll go through all this pain and it'll probably take them two to three minutes and you'll get this visceral gut feeling you are not allowed to touch or tell them to do anything until they successfully complete the task even when they ask for your help. It's really, really hard. You only need three to five testing sessions. I think you really only need three to be able to tell the most critical and important UX bugs, if you will, that you have. I'll tell you one story on this. We were about to launch a homepage once and we wanted to get those sign up form fields down to as few as possible to reduce the friction of signing up to Weebly. And so we figured, well, you don't really need confirm password, so we got rid of that one. And in fact, you don't really need to confirm your email, which used to be a thing. And so we figured, well, we could just ask for email and password. That'll be enough. And in the off case, someone mistypes their password that just resets their email. And the chance that someone mistypes both their email and their password, then I guess they're gonna have to create a new account. But that's not that big of a deal. So we put the sign up form and it said sign up here in probably like 100 point font. And then it had two fields. It said email address, password. And we're about to launch it, but we had the practice of doing this before we launched anything. And so I got a couple people down. They were just friends. And I sat in front of the laptop and said sign up. And these were tech people. And about 45 seconds later, it turns out I don't know how to sign up. How do you not know how to sign up? It says sign up here in 100 point font. Like what the hell's going on? Another side point, people don't read. So I said, well, why don't you know how to sign up? It's right here. And they said, oh, that makes so much sense. Well, I just didn't look at that because I assumed email password as a login form, obviously. So it wasn't a sign up form, it was a login form. So we added a gratuitous field that just says your name so that we could have three fields. And all of a sudden, people saw it as a sign up form, which is incredible. This is the kind of thing we would have never discovered if we hadn't done UX testing. So I would recommend doing it all the time for everything you launch. You don't need that many sessions. Okay, here's another question that comes up. When should we launch? There's this whole minimum viable product, which I think is a lot of the thinking is good. It's new since we launched. But I don't really like the word viable because it's kind of insinuating that you're gonna put just the least crappy thing you can out there. I much prefer the word remarkable. So minimum remarkable product. The product that is the least you can build to be remarkable. All right, so this is a quote from Paul Behaidt. It says, launch when your product is better than what's out there. I think this is really important because it basically incorporates this idea that you should build something that's better than anything else out there and don't launch until you have that. But as soon as you have it, then go ahead and launch. So I think that's the right time to launch. Prioritizing. Okay, I think this is another important point to make is how do you prioritize? Because in the early days, it seems like there's an infinite amount of things to build and you don't have enough time to build any of them. And so how do you figure out what the hell to build next? I think there's two important points on prioritizing. Number one, there's only one thing that matters. Think about that startup journey from idea to growth stage. Focus only on the thing that gets you to that next stage. Don't focus on anything else. Don't go to conferences. Don't write blog posts. Don't read the news. Now I'm telling you this because I did all those things. It's impossible not to, if you can, don't do any of them. Don't do any of the things that aren't getting you to your next milestone. In this particular case, next milestone being product market fit. Number two, I think, is a really interesting point. I heard this from Astro Teller who ran Google X. And most people prioritize, almost everyone prioritizes their list exactly the same way, which is effectively some kind of spreadsheet of all the tasks you can do, and then the difficulty of each, and then the expected payoff of each, how impactful. And then you basically sort by cost times benefit. But instead, I think when you're trying to make continuous improvement, that's actually a pretty good approach when you're trying to make discontinuous improvement, optimize for learning. So basically ask yourself, what is my biggest unknown right now? What's the number one thing that I do not know about my business that I need to learn? Optimize to learn that thing. Because when you do that, it might not seem like the biggest thing. It might be a low effort task. It might seem like a low priority task. But when you optimize to learn the most, what do you do? You rewrite your whole priority list. Because when you learn that thing, that actually completely, you throw out all your old priorities and have a new list of new ones. Okay, how do I know when I've achieved product market fit? This is another common question. So I think there's basically three key metrics you should be tracking. Number one, returning usage. Number two, NPS. And number three, paying customer renewal rates. So returning usage is basically just look at people who sign up or come to your site or your app and look at the number of people who come back within a day, within three days, within seven days, within 30 days, right? If you track that metric more than anything else, that is the indicator that things are working. In the early stages, I remember handing out Weebly logins to all my friends and family, and none of them came back. And those are the people who like you the most. And those are the people who would really want you to be successful. And if they're not coming back, then no one's gonna come back. And so I think number one, tracking return usage is really important. Number two, track NPS. There's all kinds of tools to do this now. Here, NPS, some people say 40, I think about 50. If it's above 50, then you've probably achieved product market fit. NPS, if you've ever answered that question, would you recommend this product or service to a friend? That's NPS. It's one question. You rank from zero to 10. Basically, the percentage of people who answer nine or 10, those are promoters. The percentage of people who answer zero to six, those are detractors. And people who answer seven or eight are thrown out. So in the early days, Weebly had an NPS of 80%. That was basically 88% of people answered nine or 10. 8% of people answered zero to six. And if my math is right, 12% of people answered seven or eight. So you basically take that 88% minus 8% equals 80. If it's above 50, you're doing pretty well. It can get negative, and that's probably where it will start. And then number three, paying customer renewal rates. So when you have paying customers, look at their renewal rates. A quick sidebar, I don't like the churn metric for looking at this. A lot of people use that because it's easier to calculate. But basically, churn is not cohort-based. Renewal is cohort-based. So churn is just looking at number of subscribers lost divided by total active subscribers in any given period. I don't like that because if your denominator is changing, let's say you're growing really, really quickly, your denominator is changing faster than your numerator. The numerator is based on last year's denominator. And so basically, it could be deceptive as to what your actual churn is, but your renewal rates are great because that's looking for the percentage of people who are eligible to renew and what percentage of those people actually renewed, and that's cohort-based. So I like renewal rates a lot better. All right, next metrics that aren't included. So number one metric that is not included is signups. This is something that was not very well understood when we got started. I would not pay that much attention to signups. I would pay a lot of attention to active users. If you have good returning usage, then signups translates to active users pretty well. If you have bad returning usage, then signups basically completely drops off and you have very little active users. In fact, that number may even be shrinking even when your signups are growing if people aren't returning. Number two, conversion rate. If you're thinking of building a SaaS business, conversion rates, they all start low. They build over time. I wouldn't pay a lot of attention to conversion rate in the beginning. I'd pay attention to some of the other metrics. I think this is the last point, just how does it feel when you get product-market fit? You'll know when you achieved it when your customers are beating a path to your door. When you don't have it, everything feels hard. It feels like you're pushing this huge rock up a mountain. You're pushing your customers towards a solution. They're too nice to tell you no, but they're not really coming back. They're not really using it. When you have it, the whole world is beating a path to your door. Everyone wants to use it. Your press is writing about it. Everything feels easy and every decision you make feels like you're a genius because they all go well. Spoiler alert, it's somewhere in between. It turns out that as you're scaling your business over time, you'll discover you're maybe a little less smart than you thought you were, but that comes later. But I think this is what it feels like. If you're not feeling that customers pulling you in a direction, world beating a path to your door, then you probably don't have it yet. All right, now a couple more points beyond product-market fit. This is a little bit more theoretical. I think the most important is just the very tactical, like how do you go and build a product? Just talk to customers, listen to their problems, not their solutions, iterate a ton, and then keep launching until you get something out there. Focus on a couple key metrics. But a couple points I want to make. Number one, there's fundamentally three things that a startup needs to do in order to be successful, and this is a little bit past just product-market fit. Number one, product needs to be meaningfully better than the alternatives. I think this is sort of described in the Paul Buheit quote of launch when what you have is better than anything else out there. Number two, you'll need to learn how to acquire customers in a differentiated way that scales. And number three, you'll need to invent your business model without killing your traction. This gets into a little bit more than product-market fit, an expanded version here, but basically product-market channel model fit. And what this goes to show is you can build a product that works really well for a market, but the model's busted. The model, the way that you charge people doesn't work. Maybe you're not charging enough. Maybe you're charging too much. That has a lot of interplay with your channel, and this is how you acquire customers. So if your model, for example, if you're building a solution and you're trying to charge $75 a month for it, that's probably gonna be a pretty tough spot to businesses because you're gonna be in the middle. You're not gonna be able to afford. Salesforce, right? You're not gonna be able to afford actual people selling your product to the customers directly, but it's too much money that people are gonna want to just whip out their credit card and start paying that, right? And so that's why oftentimes, you know, between the model and the channel, there needs to be a fit there as well. Because if you're gonna have a Salesforce, you're probably gonna need to charge people at least two to three hundred dollars a month to be able to afford the Salesforce. And if you aren't gonna have a Salesforce, then you should probably charge $25 a month or less. This all, of course, plays with the product and market fit, which is how this all works together. So there's a essay here, which is the HubSpot Growth Framework, which I'd highly recommend reading for a little bit more on this. Another sidebar is on scaling the team. So I think this is a really important point to make. Don't scale the team until you have product-market fit. So I would not scale past about 20 people. So around 20 people, it's usually between about 23 and 25, is when everything breaks in a startup. Because you can no longer be just, you know, completely flat. If you look at any of the essays, you know, if you look at, you know, back in the day, 37 Signals had this essay of like, how being a perfectly flat company is amazing and no one ever needs to hire managers. And it's like, I could predict to within one or two employees exactly the size you are, and it's about 23 to 25, and it turns out that was true. Because about 23 to 25, it feels amazing. It's completely flat. Just another couple people and everything breaks. What you need to do is you need to start implementing your first layers of management. And it turns out that that structure is not very good for finding product-market fit. It's not very optimal for that. So keep your team small. I would say it's okay to micromanage a little bit at this stage. You should know everything that's going on. You should know everything important there is to know about your customers, your product, your market, your channels. You should know all of that. What does that mean? That helps you make really great decisions, right? Because you have all this information. It's actually a huge advantage. Once a company scales up, then all this knowledge is distributed across people, and it's really difficult to get all that knowledge to make a really good decision in one spot when it's scattered across a bunch of different people and takes a lot of different opinions to get something done. So don't delegate anything important yet. However, once you've achieved product- market fit, and I think this is a mistake that we made, scale aggressively once you've achieved product-market fit. So at this point, presumably, you've either found or created a new market, but it's likely you're not the only one. You may not have heard of your competitors yet, but there's probably other people out there doing the same thing. You are in a race to capture this new market, and advantages accrue to the number one player. They always do. Even if there's not network effects in your business, just having more people can build products faster that generates more revenue, that attracts more financing, that allows you to hire more people, that generates more revenue. So there's all these kind of flywheels and cycles and advantages that accrue to the number one company. Be that company. Build a team aggressively but thoughtfully. I think that you should probably never more than double the size of your company in any given year. So I don't think I know of an example of hyper growth that works out, of companies that go from 20, you know, 20 employees to 300 in a year, and that works out. Because what you end up doing is you build a foundation on sand based on really shaky soil, and it all- eventually it's all great while you're scaling, and eventually the skyscraper comes crashing down, and that always seems to happen. You will need to completely change the way that you work, including a lot more delegating at this point, and no more micromanagement after you do that. So there's kind of this inflection point in scaling a company I think it's really important to think about, because I would not scale a company past about 20 people before you have product market fit. As soon as you found it, go and scale aggressively as you can. And then lastly I'll talk a little bit about building a brand, because I don't think it's worth spending too much time thinking about, but I think it's worth spending some time thinking about when you're in the early stages. So great brands are built around a fundamental insight, a consumer insight, that some truth that's just not really acknowledged out there. And ideally this is the same one that your product is built on. So it's really really powerful if you can identify that insight early on, know what you stand for, and build that into all of your messaging, build that through into your product, and that becomes the foundation of your brand. So let me give you one example. I talked to the person who built Virgin America's brand. And so here was their story. So when they got started they were doing a startup airline. There are lots of economies of scale in airlines. And so they went out and started talking to customers, and they realized that there's only four reasons why people select one airline over another. The reasons were schedule, price, so again if it was $3 cheaper I'll select that airline. It was destination, so if you want to fly to SFO or Oakland. And it was frequent flyer programs. And they looked at each one of those and said we're not going to win. We can't win. It's impossible to win on any of these. So they said okay well what's our market thesis? Like what are we going to do differently? And then they went out there and talked to lots of people and they said you know what the experience of flying sucks. The experience of flying really really sucks. So why don't we create an airline where it's not going to be a super premium airline, but it might cost $15 more for that ticket, but it's going to be an amazing flying experience. That was their brand. That was their product and their brand. They built it in right from the very beginning and everything that they did revolved around that flying experience. So that's why you make a decision to invest in the super cool lighting. It doesn't make any sense financially, right? But that is exactly about the flying experience. That's why you're going to go and pay your staff more, and they're going to have a really great attitude as they're serving the flyers. That's why for every single PR event that they ever did, they did it on an airplane because they wanted to highlight that flying experience. And they create a new reason for people to buy their tickets and they were very successful at doing that. So I think it's one thing to understand is I wouldn't spend too much time overthinking this, but to the extent that you can understand what is that insight, it should be infused in both your product and that becomes the basis for your brand over time. So that is it. I think I'll take a pause there. And that's it. So any questions? Yeah, so the question is, it took 18 months to find product market fit and what motivated us? And I like to say that it was just that we were young and stupid, which is super helpful. But I think, my theory of entrepreneurs is that a lot of people think that entrepreneurs are risk takers. I don't actually think most entrepreneurs I know are heavy risk takers. I think they're calculated risk takers. I think that entrepreneurs are really two primary qualities. Number one is they're optimists, so they don't see risks where other people see risks. And number two is they're determined, so they just don't give up. So I think, you know, generally speaking, those are the two things. Your company only fails when you give up, right? And while you're still working on it, by definition it's still going. And so I think having that determination, I wouldn't blindly plot on when all of the evidence shows that this is not going to work out. But I think just continuing to be determined and knowing, just having the confidence and knowing like this is something people need and just continuing to work on it is key. So common advice we get is, are we a niche audience versus other audiences, or are we people you have in these cases, like, hey, let's go for this idea. How did you approach that in your early days of, this is what everyone wants to do? Yeah, so the question is, like, common advice is target a niche audience or verticalize, right? Which is another way to say that. I think, you know, you're right, Weebly's been an anti-pattern, you know, kind of runs counter to that pattern. I think, I'm not a hundred percent sure why, but I think it's because in our particular case, the verticals were not deep enough to be able to support the pretty heavy investment that you need to make in the product. And so basically every single person required actually a ton of functionality. It was, we need blogging, we need e-commerce, we need, you know, forums, we need, you know, like a full CMS, we need all these things, and we need it to be best class, you know, world-class. And every single vertical wanted that, and no vertical was deep enough to fully support that on their own. So the pattern of what happened to Weebly and just, you know, website builders or e-commerce platforms in general, is that we all started off very horizontal and built a platform, and then over time, once all that functionality was built out, then we started to customize the verticals. So I think that that's what worked in our case, but building to a specific vertical is generally good advice. Thank you for all you're sharing with us. Looking back on the notes, you mentioned that at some point you have to create a market. When you figured out that hidden need, what changed and what were you telling people to either ask them questions or sell them on you having this new secret hidden need in the market that none of them knew they needed? Yeah, so the question is, when you're creating a market, what changed to telling people, like, you have this new thing that they didn't know they needed? I think the experience is likely to be similar for everyone, which is basically the first chunk. So I'd say the first three to four years of Weebly's history, we were mostly just trying, like, I remember telling reporters, like, you just, they're like, why do we need to write a story? And I was like, you need to write a story because no one realizes this is possible, right? So the first three to four years were us just trying to convince people, like, no, you really can build a website, like, this is possible, because everyone, I mean, everyone assumed, unless they knew how to code, everyone assumed that is beyond my capabilities, that is beyond my abilities. So we spent four years probably just trying to tell people, and then eventually, little by little, people try it, people try it, and then that's that market's created, it's that kind of boom moment when all of a sudden people realize that this is possible. You know, I think another probably great example would be either Uber or Airbnb, right? Like, Airbnb was something that I remember, even early on, I was like, I don't really want to stay with other people, that sounds weird, like, I don't want to get in someone else's car, like, that's shady. But then all of a sudden, like, you know, the word just kind of gets around, you try it once, enough people try it once, they really enjoy the experience, word gets around, once it does, that's that sort of that big bang moment, right? Where the market's kind of created, and then at that point, your problems are completely different. At that point, you don't need to convince anyone anymore, because people just think it's going to be inevitable. But then your problems are more about scaling, and, you know, continuing to refine the product at that point. Can you talk about your key KPIs during that 18 months of period? What did you measure to make sure that you are moving in the right direction? Yeah, so the question is on the key KPIs during that 18 month period. The sad answer is we were not monitoring them, we were not measuring them. That's probably why it took us 18 months, it probably could have been a lot shorter. I think we were looking at signups, which was kind of the thing that most people were looking at at that point in time. And it's a very poor metric. I think if you look at how our signups convert to active users, that was very low. If you would look at how our signups were trending, sort of on a daily and weekly basis, that was trending down. So by all accounts, we didn't have product market fit, and we knew we didn't have product market fit. It wasn't like a big surprise. So it was really just a matter of continue to iterate, continue to iterate, until you finally get something that clicks. Can you talk to us a little bit about your pricing and the journey that you went through with pricing in the beginning? Sure. So the question is on pricing and what's the journey we went through. I think people are a lot more rational about pricing today than when we got started. Because in 2007 and 2008, the prevailing thinking in Silicon Valley was that you should actively not charge money. You should actively be not making money. That was the prevailing thinking. It sounds really, really crazy now. But at the time, the logic went that Twitter was the example that if you charged money, then you would have revenues. And once you had revenues, they wouldn't be that big. And then you'd just be valued on a multiple of your revenues. So way better to sell the dream and not show any revenues than to make money and then have your valuation come down. So that's what people thought at the time. And we started off by not charging any money. So it's just completely free from basically when we launched in 2006 through the summer of 2008. I'm not even kidding. We had people who would just unsolicited just mail us a check for a hundred bucks because they were like, you're going to run out of money. I'm just going to give you money. And we're like, thanks. But it was a completely free product. There's no way to give us money unless you mail us a check. And then we knew we were going to run out of money from the round that we raised in around September of 2009. Sorry, September 2008. In January of 2008, we decided to try to make money because we figured making money was much cooler than raising another round. So we worked for six months from January to June on launching Weebly Pro, which was the first version. It was $4 a month. It was the first version that you could pay us any money for. We had all of our friends over in our apartment the night before we launched it, and we all took bets on clearly how many millions of dollars we were going to be making the next day. Like it was like as soon as you press that button, it was just going to come flowing in. And then we launched it the next day. And then after a week, we looked at the sales and it turns out that we made 10 times less than the lowest bet. So it was like, OK, I guess it's not going to work out quite that well that fast. But then we kept iterating. We kept growing from June 2008 to December. We almost ran out of money again, but had the option of cutting the founder's salaries. And so we were going to be cash flow positive. We basically became cash flow positive in January 2009 and more or less were through the rest of the history of the company. First of all, thanks a lot for doing this. I'm a user of Weebly ever since, I don't know, I don't remember now. So I know the old interface and the new interface. So thanks for building it. In my personal experience and my experience of working with website development technology, I've seen that users actually use it for one or two weeks, three week stops. They kind of take off or break off. So in that case, how did you actually calculate active usage? Because even if it's a real user, your customer, they just break off in three weeks. Yeah, so the question is, it's awesome that you're a Weebly user. Sort of how do you calculate active usage when people flake off? I think you can still calculate the same way. And I think it's still a valuable metric. So there is a question with talking to Inside Baseball with website builders of are they successfully using your product even if they're not coming back every single day? And maybe they come back once every six months. I still think it's useful to look at the metric because otherwise you're just flying blind. Yeah, so the question is around just the word discontinuous improvement and like what does that mean? And a lot of the writings about continuous improvement. I think discontinuous improvement is effectively when you're making a big leap. And sometimes small incremental improvements don't get you to that big leap. And so I think imagine yourself starting with the Palm Trio and you're trying to make continuous improvement. Like what would you do? Like you'd improve the OS a little bit. Maybe you'd improve the way the apps can exist a little bit. Maybe you would take that keyboard and just make the clicking a little bit better or the typing a little bit better, whatever it is. But I think by definition if you're going to create a new market, oftentimes it's discontinuous improvement. And what that means is taking a really big leap. And taking a really big leap doesn't often happen the same way as taking small steps. And so I think, you know, again, it's really about fighting that hidden need, figuring out what people want, and building that solution, iterating really quickly on that front, but optimizing for learning. And I think optimizing for learning is sort of the key here where you say what's the biggest unknown that I have? And how do I go about answering that question? Okay, two more questions. So how do you deal with a demographic split between purchasers and users? We're a hardware company, and our primary purchasers are probably going to be Gen X. They want an analog version because they believe it's more reliable, and the primary users of the product will be millennials, and they all want touchscreens, which actually works better for us. How do you deal with convincing people later on, hey, in the tech roadmap, we'd actually like to even have maybe your old equipment back, and we'll just give you a new one? Yeah, so the question is, hardware startup, your purchasers and your users are different demographics, and they want different things. How do you make the transition smooth? I mean, I think, I don't have that much information. I'm guessing education? No. Coffee. Okay, then I have no idea. But if you want to come talk to me afterwards, we can dig into it a little bit more. Yeah. On your way to product-market fit, can you talk about how do you think about when to start, you know, the whole fundraising process? Oh, yeah. Yeah, that's a great question. So on your way to product-market fit, when do you start the whole fundraising process? I think, so I think the most helpful thing to me that I end up explaining to a lot of people is look at that slide on the stages of a company, and most companies will not be able to raise money until they're at the early traction phase, just entering traction. Now, things may be different for you. You may have some friends and family who may be able to kind of stake you early on. You may get into a program like Y Combinator. You may be different. That's certainly possible, but most companies, like when you look at those large early rounds that are raised, and this company raised $40 million without launching a product, and you're like, I can do that too. You can't. That's what I thought. It turns out that in all those cases, there's some kind of history. It's, you know, the founder or founders of that company have created massively successful products before, or maybe they're huge, you know, coming in some part of the industry or whatever it is. I think if your expectation is that you can't raise it around until you get to early traction, that's probably a realistic expectation. And then at that point, sort of what are the implications of that, right? So how the hell do you get to early traction without raising money, right? It's sort of this chicken and egg problem. Everyone solves it differently, right? Like everyone wound up solving it differently. It's really, really hard though, and I think the key, the way that a lot of people solve it is just, you know, effectively sweat equity. It's just getting a few really smart people together who can build what they need to build without anyone else, without outsourcing, without hiring anyone else, and keeping their burn really, really low and basically locking themselves in a room and continue to just build as quickly as they can until they get to that point. And it looks like you have a follow-up. Yeah. So, I mean, you know, on one side you say that you have, you know, launch after you have something that is better than what's out there, which basically means like a full blown product. No, no. So the question is launch when you have something that's better than what's out there, which means a full blown product. No, I think, you know, maybe this is something I could add in here. Don't look at your product in terms of like a feature grid, like a feature checklist. If you think about it like that, you can never win because you're behind and you can never catch up. And especially if you're comparing to, like I like this phrase of like customers over competitors because if you're looking at what your competitors are doing, right, then you're inherently following because whatever they've just launched, they started building three months ago, right? And so by the time you build that and you launch that, then they're going to be launching the new thing. And it could be, you know, I remember one of our competitors, I won't name them, but they're from South Africa and they had raised $40 million and we had raised $650K and things were not going that great for them and so they completely ripped off our interface and they just completely cloned it and launched it. And I was like, we were laughing our asses off because we were about to launch an update where at the time that sidebar with the elements was on top and we were about to put it on the left, right? And we'd spent a lot of time building that and they launched like two weeks before we built it, right? And so I think you have to be focused on your customers, not your competitors. And it's not about the feature grid because there's going to be one particular feature or one aspect of your product. Maybe it's the easy use and the usability that opens it up to a new market. Maybe it's one feature that people are just killing for that's going to make up for the lack of the rest. And so people are going to look at that and say, well, it doesn't have X, Y, Z, which I do kind of want and those other products do, but this is the one thing that I need and they're going to come and use your product for that. So it's not that your product has more features than anyone else, it's that your product does that one thing, that one job they're trying to do, it does that better than anyone else. Thanks, guys. Thanks, guys. Okay. That concludes today. Sorry that we ran a little late. It's hard to constrain fantastic speakers from getting through the material and all the great questions you guys are asking. Next week, Suheil Doshi and Gustav Ahlstromer from Mixpanel and Y Combinator, respectively, will continue on our dive into product, talking about measurement and growth, two very important things. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you very much, everybody, for all your comments. Thank you, häns, for all the great questions and treaties and all the things. And we'll also be posting another video of a conversation this week that Odoora is going to have with Ousmaira Garg, the founder of Gobble. And they like the Bee Gees are going to be talking about staying alive, if anyone gets that reference. All right, thanks, everyone. Thank you. Thank you.  Bye-bye. "
  },
  {
    "name_video": "What's different about unicorns?",
    "description_video": "Jessica Livingston gives a talk on how to be not just successful, but massively successful, and points to women-founded billion dollar companies as the next focus. Originally from Female Founders Conference 2017.",
    "related_categories": [
      "Founder Stories",
      "Women Founders",
      "Founder Psychology",
      "Motivation"
    ],
    "page_url": "/library/8L-what-s-different-about-unicorns",
    "youtube_url": "https://youtube.com/watch?v=Ygr3rx4hSsc",
    "mp3_file": "downloaded/What's_different_about_unicorns?.mp3",
    "mp3_content": "Hi, everyone. I can't see you, but I'm so excited to see you. This is actually my first time back in the Bay Area in more than a year. I've been living in England for the past year with my family, and I just could not miss this day. So here I am back for 24 hours, jet lag and all. So hopefully I can deliver this okay in one piece. Before I get started, I just would love to just take a moment to thank the women who've recently come forward so bravely on the record to speak out about the sexual harassment they've faced working in Silicon Valley. I just cannot thank them enough. They're my heroes. Hopefully their actions will cause more women to speak up and help put an end to the discrimination and the harassment that we as women can face working in the startup community. So one more round of applause. That was so awesome. Where am I here? All right. Here we go. So last year, if you were here, you'll remember that I spoke about all the problems that can arise in a startup and how to avoid them. And to be honest, I think last year's talk was the best general startup advice I could give you. So if you haven't read it, please go to this link and read it. And even if you have read it, it's worth a reread because these are the type of problems that can get you even when you think you're already watching out for them. So there's the link. Last year, I ended by saying that I want there to be more women founders of the big companies, of the so-called unicorns. And these are the founders who make the most influential role models. And role models are what we need most if we want to encourage more women to start their own companies. In recent years, there's been an increase in the number of women who are starting startups and in the number of women who've raised significant seed in Series A rounds. And this is good. But now we've got to focus on the next target. We need to have more women who are founding billion-dollar startups. So that's what I'm going to talk about today. What it takes to start a startup that's not merely successful but is massively successful. And I'm not saying everyone has to do this. You don't have to start a startup. And if you do, you don't have to start a Google. But if you do want to start a Google, what does it take? What's the difference between a successful startup and a massively successful startup? And fortunately, I've seen enough of both types at close hand that I can see patterns of differences. So I've made a list of things that I think are different about the unicorns. And there are nine of them. I want to get this one out of the way from the very start. In addition to having everything else that they need, the unicorns are lucky. And one of the most important kinds of luck is timing. The most successful founders have the right idea at the right time. And you have less control over that than you might think, actually, because the best ideas are not deliberate. They tend to grow organically out of the founders' lives. However, while the most successful founders are all lucky, they're not merely lucky. It's never like they have this great idea, and then, boom, a few years later, they're a billionaire. Far, far from that. One of the most noticeable difference between founders of the super successful startups and the moderately successful startups is their motives. And in particular, the founders of the super successful startups never are in it mainly to get rich or to seem cool. They're always fanatically interested in what the company is doing. Incidentally, it's perfectly fine to start a startup mainly for the money, but unless your motives change throughout the course of it, it probably won't wind up being one of the big ones. There are multiple reasons why startups do better when the founders are truly interested in the idea. They work harder because they love the work, and their enthusiasm is infectious. They think longer term, and they're much harder for another company to capture with an acquisition offer because they don't actually want to quit. So this one is going to sound really obvious. To be a huge startup, you have to have a huge market. You have to make something that a lot of people will pay for or that people will pay a lot for. And this is one place luck actually has a very big effect because market sizes are impossible to predict. For example, the Airbnbs didn't know how many people would want to stay in other people's homes. All they knew was that enough would to make it an idea that was worth working on. The founders of most successful startups never realize early on how big they're going to get. So our advice at Y Combinator is not even to try to hit a big market early on. Since you can't predict these things, it's better just to work on something you yourself want and then hope that there are lots more people like you. When you describe the biggest startups, most all of them are doing something very basic. Google is how you find information. Facebook is where your friends are. Uber gives you rides. Airbnb gives you somewhere to sleep. These are all things you could explain in a few words to a five-year-old. However, don't use this as a test for what to work on because ideas often start out less general. At first, Facebook wasn't where everyone's friends were. They were where a couple thousand Harvard students were. A site for a couple thousand students at one college doesn't sound like a very promising idea, does it? It may seem promising now because we all know how the story turned out, but at the time, it did not. Almost all the really big startup ideas seemed dubious at first. I know exactly how Airbnb's idea seemed at first because I was one of the people whose job it was to judge it. I didn't think much of it at the time, to be perfectly honest. It's not just that these ideas don't seem as big at first as they eventually turn out to be. They seem to most people like bad ideas. You need to be a certain type of person who can work on one of these bad ideas that eventually turns into a good one. You need to be independent-minded. You cannot care what other people think. It's now part of the conventional picture of a successful founder to be a maverick. That part of the conventional picture is accurate. I can't think of one that I would describe as a conformist. You also have to be ambitious because what happens with these initially unpromising ideas is that they blossom into terrifyingly big ones. You start a site for college students and pretty soon you realize you could sign up the whole world if you wanted to. At this point, most people's reaction is fear. Signing up the whole world seems like a lot of work and it also seems like a valuable prize and you have to fight to win those. The fear of big ideas prevents most people from even realizing they could start a site for college students and turn that into a site for the whole world. But a few people are more excited than afraid when this happens. Another thing I notice about the founders of the really huge startups is that I would not want to stand between something they wanted and them. All 100% of them have exceptional, exceptional drive. But it's not always straightforward to tell how driven someone is. Drive can be suppressed when someone else has authority over you, like in most schools or in a job. In these situations, people who are really driven may even read as less promising than people who are merely obedient. Not only is it hard for me to tell how driven someone is, people often can't even tell themselves. You can tell after they start a startup, though. No one has authority over you in a startup. Most people find the authority vacuum uncomfortable, but a few people expand into it. And those few people think, ah, this is what life is supposed to be like. Drive by itself is not enough, though. You have to be driven to work on this particular company. In all the really huge startups, the company is at least one of the founders' life's work. So they'd never willingly be acquired, for example. If you sell your life's work, then what are you going to do? Early on, starting a startup is all about the product. But that changes as a startup gets really big. A founder who wants to keep running the company has to become a manager. You don't have to have management ability initially. There's plenty of empirical evidence to show that you can learn this on the job. But you have to be able to learn it, and you probably even have to like it. Designing cool products and managing people are really different things. Most people who like building things dislike the idea of being a manager. You probably know some people like that. It's a rare person who can be great at both. But you have to be if you want to create one of the really big startups. Those are the nine things, as far as I can tell, that are the differences between startups that are merely successful and the ones that become really big. But they're not just a list. When you put them all together, they make a story of how a unicorn happens. The founders work on something their experience shows them that the world needs. It wouldn't seem like a promising idea to most people, but the founders work on it anyway. Partly because they understand the promise of the idea a little bit better, and partly just because they think it's cool. They work on the idea, and they realize they've become even bigger than they had realized. Instead of shrinking from this realization, they embrace it eagerly. They realize this is what they want to do with their lives. They're so committed to the company that they're willing to morph themselves into whatever the company needs. There's a lot of variety in startups, but this is the most common path for the really big ones. So remember, you don't have to start a startup. And if you do, it doesn't have to be a unicorn. But if you do, this is probably what it's going to look like. An unpromising idea that blossoms into a frighteningly big one, and the driven founders who see the opportunity and run with it. And I'm hoping that there are some of you in this audience who hear this description and think to themselves, oh my gosh, it's like she's describing me. The people on the path to becoming huge don't usually realize it themselves early on. But I'm hoping if I can encourage even a few of you to keep going, then when you're successful, your example will encourage more new women to start their own companies. And yes, this is a very long-term plan. But after all, it's my life's work. So thank you. Thank you."
  },
  {
    "name_video": "How to plan an MVP",
    "description_video": "YC's Michael Seibel shares his approach to building an MVP and getting your first users as a pre-launch startup.",
    "related_categories": [
      "startup school",
      "Getting Started",
      "Product",
      "Building Product"
    ],
    "page_url": "/library/6f-how-to-plan-an-mvp",
    "youtube_url": "https://youtube.com/watch?v=1hHMwLxN6EM",
    "mp3_file": "downloaded/How_to_plan_an_MVP.mp3",
    "mp3_content": "My name is Michael. I work here at Y Combinator. I help run the Accelerator. Before that, I did two YC startups, one in 2007 and one in 2012. And today, I'm gonna talk to you about minimum viable product, so MVP. We always yell at founders to not use jargon, yet we have this whole set of stupid startup jargon, and MVP is one of them. When you think about an MVP, you should think about something ridiculously simple. This is the first thing you can give to the very first set of users you wanna target in order to see if you can deliver any value at all to them. That's all it is. It's extremely simple. I know you guys had a talk last week about how to come up with ideas, how to come up with problems you wanna solve. What I will tell you is that it is helpful to talk to some users before you decide to build your MVP. This doesn't mean you have to go into a three-year research situation or you have to work in industry for 10 years, but some conversations are helpful. It's even more helpful if you're your own user, so you can tell whether your product's working for you. I always get this strange question of how do I get my first users, which always kind of confuses me because theoretically, you decide to solve a problem that you know someone has, so the way you get your first user is you talk to that person that you know has the problem, and if it's you, it's even easier. So if you are building a product for a mysterious set of users that you have no idea who they are, question that slightly, very slightly. Okay, so the goal of a pre-launch startup is extremely simple. Step one, launch quickly. This is something that's been part of the YC ethos from the very beginning, and it's been great advice for 10 years, and it continues to be great advice. If you can walk away from one thing from this presentation, it's launch something bad quickly. That's it. Literally, the rest of what I'm going to say is basically gonna be re-summarized versions of that same thing. The second thing that an early-stage startup needs to do is get some initial customers. Get anyone using your product. You don't have to have a vision of how you get everyone using it, but just anyone interacting and seeing if they can get value out of the product. You'd be surprised at how many founders' journeys end before a single user has actually interacted with a product they've created. It's very, very common. So please get past this step. It's extremely important. The next one is talk to your users, any of them, after you've launched this MVP, and get feedback. This is one that's also an extremely common mistake because most founders in their heads have a idea of what they want to build, and so they kind of have this weird feeling that if I haven't built the full thing yet, getting feedback on the shitty initial thing is kind of useless. Of course, it's not gonna work. It's not the full thing. The full thing's gonna take three years, $10 million, a whole team, so feedback on the little thing is useless. The reality is that in some ways, the full thing is this really awesome idea in your head that you should keep in your head, but it should be very, very flexible because it might turn out the full thing that you want to build isn't what your customers want at all. So I have this saying, hold the problem you're solving tightly, hold the customer tightly, hold the solution you're building loosely. And last, most important, iterate, and I like to kind of distinguish between iterating and pivoting. A lot of founders, once they've figured out how to build something, fall in love with it, and so if it doesn't work for a certain set of users, they start thinking, well, I wonder what other problems this thing can solve. Well, the screwdriver is not actually good at screwing in anything, but I wonder what other problems it could solve, and they're like, oh, maybe you can use it to cook, maybe you can use it to clean, and it's like, no, the problem was I need to screw something in. The user was like a mechanic, and if your screwdriver doesn't help the mechanic solve the problem, keep the mechanic, keep the problem, I need to screw something in, fix the fucking screwdriver. That's the thing that's broken, right? The broken thing is not the mechanic, and it's not the fact that they need to screw something in. So iterate, continue improving on your solution until it actually solves the problem. In most cases, most people should be building a very lean MVP, so by that we mean you should be able to build it fast in weeks, not months. This can either involve software, or honestly, we see startups just start with a landing page and a spreadsheet, but most startups can start very, very fast. The second, extremely limited functionality. You need to condense down what your user needs, what your initial user needs, to a very simple set of things. A lot of times, founders want to address all of their users' problems, and all of their potential users, when in reality, they should just focus on a small set of initial users, and their highest order problems, and then ignore the rest until later. You should have a vision of everyone. You should have an MVP very small. All this is is a base to iterate from. That's it, it's just a starting point. It doesn't, it's not special in any way. You just have to start, and so please make sure you don't feel like your MVP is too special. Okay, here is a classic example. This is one of Airbnb's first landing pages, in 2008, I believe. One of the things that you might be interested in about, in Airbnb's first product, is that there were no payments. When you found a place to stay on Airbnb, you had to exchange money with the host in person. Needless to say, that was a pretty fucking big problem, but they started without payments. No map view. You know how when you search Airbnb, you can see where the house is in the city? You don't have that, sorry. And the person writing all the code, Nate, was working part-time, okay? So everyone tells these kind of magical stories about how everything was perfect from the beginning. Airbnb, not perfect from the beginning. Next one, Twitch. This was what Twitch looked like day one. Not very familiar, well, maybe a little familiar. There's some video there, and there's some chat there. Other than that, nothing else. Twitch launched as Justin TV, which was a online reality TV show. There was only one channel, Justin. You had to follow his life. If you didn't like his life, you had to leave the website. That's all there was. The video was extremely low resolution. It was funny. A founder asked me back in the day, oh, wasn't it weird you guys had video in your apartment? Weren't there all these secret documents and things that people would be able to see? And it was like, you could barely recognize our faces, let alone documents that we had. And most importantly, there were no video games. No video games, except if we decided to play video games in our apartment. Like, that was the only time video games ever appeared. And so, needless to say, you can do that quickly. When you think about Twitch, it's much more complex now. Last, Stripe, which wasn't Stripe. It was called slash dev slash payments, because why not? Like, let's make a name that's really easy to remember. This was Stripe day one. No bank deals. I won't tell you exactly how they process payments, but it was in a very startup-y way. Almost no features. And even cooler, if you wanted to use Stripe, the Stripe founders would come to your office and integrate it for you. How nice is that? Half because they were just desperate to get anyone to use it, and half because it was a great way to find bugs before the users found bugs. Integrate yourself. So, these are just three examples of extremely simple, extremely fast-to-build MVPs. All of these are billion-dollar companies, and they all started with something that most people would say is pretty shooty. In very few cases, you have to build a heavy MVP. I just invented that term, heavy MVP, when I made this presentation two days ago, so maybe it becomes a thing. If you're in an industry with significant regulation, like insurance or banking, sometimes drones, although sometimes not, it's hard to launch. It's harder to launch. You have to pass through a bunch of regulatory bodies first. If you're doing hard tech, if you are building rockets, it is hard to build a rocket in a couple weeks. Biotech, it is hard to invent a cancer drug in a couple weeks. Moonshots, well, fill in all the other blanks. It's hard to bore tunnels in the Earth and have extremely fast vehicles that replace cars in a couple weeks. So if you're in that situation, please remember that your MVP can start with a simple, simple website that explains what you do. It's helpful when you talk to people and you interact with people that they can refer back to something. So that can be your start, and you can build that simple website in days, not weeks. So in many ways, maybe your heavy MVPs are faster than your lean MVPs in some weird, strange way. Now, I wanna talk about launching for a second because a lot of founders have this misconception about launching. They see big companies launch stuff and they assume that's what startups do. In fact, they see companies they kind of think about like startups. Facebook's not really a startup anymore, but they see them getting a lot of press and getting a lot of buzz and yada, yada, yada, and they have in their head that that's what a successful company looks like when they launch. Well, let me ask you this question. How many here remember the day that Google launched? No. How about Facebook? Okay. How about Twitter? No. Great. So it turns out that launches aren't that special at all. Okay? So if you have this magical idea of your magical launch you wanna do, throw it away. It's not that special. The number one thing that's really important is to get some customers. So to make people feel better, let's use different terms. How about launch is when you get any customers? And how about like press launch? Press launch, really impressive, is when like people write about things and it's all exciting and you get all this buzz. Let's push the press launch off and let's push the get any customers launch really, really soon. That's our goal here. It's a lot harder to learn from your customers when they don't have a product they can play with. You can talk to your customer all day but you have no idea whether the thing you wanna build can solve their problem. If you put the thing in front of them and it doesn't solve their problem, you know right away. And so all the research in the world is good but until you can put something in front of people, you have no friggin' idea whether it's gonna work. So spending all that time on a pitch deck is not as valuable as spending your time building anything that you can give to a customer. Finally, some hacks for building an MVP extremely quickly. First, timebox your spec. So your spec is a list of stuff you need to build before you launch. Timebox it. Say, okay, what happens if I want to launch in three weeks? Okay, well, the only things that could be on my spec are things I can build in three weeks. That makes your life a lot simpler. It allows you to remove all the features you can't build in three weeks. Second, write your spec. This seems really straightforward but most people fuck this one up. It's really easy to change what you're working on before you ever launch it because you never write it down. You start working on something, you talk to a user, they say, oh, I would never use that or God forbid, you talk to an investor and they say, oh, that could never be a company because investors know everything. And so you decide to change what you're working on and because you never wrote it down, you don't even really realize you're changing it. And so your three-week plan turns into a three-month plan. If you write shit down, at least you can be honest with yourself that you're changing your spec all the time. The next one is cut your spec. A week into your kind of three-week sprint, you probably realize that you added too many things to your spec and you're not gonna make your deadline. That's okay. Just cut the stuff that clearly isn't important. And if there's no non-important things, start cutting important things. Most of the goal here is just to get anything out in the world. Once you get anything out in the world, the momentum to keep anything going is extremely strong. If you don't have anything out in the world, it's very easy to just delay, delay, delay, delay. And then last, don't fall in love with your MVP. So many people fall in love with the vision in their head and none of the products I showed you before was the initial vision, what it ended up being. So please don't fall in love with your MVP. It's just step one in a journey. You wouldn't fall in love with a paper you wrote in the first grade. And that's the level of impact often your MVP has. All right, it was great talking to all of you. Thank you very much. Thank you. Thank you. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "Building product",
    "description_video": "YC's Michael Seibel outlines how successful startups think about building something people want.",
    "related_categories": [
      "Becoming a Founder",
      "Startup Ideas",
      "Product",
      "Building Product",
      "MVP",
      "Growth",
      "KPI",
      "Customers",
      "Talking to Users"
    ],
    "page_url": "/library/7s-building-product",
    "youtube_url": "https://youtube.com/watch?v=C27RVio2rOs",
    "mp3_file": "downloaded/Building_product.mp3",
    "mp3_content": "Without any further delay, I will introduce to you Michael Seibel, the CEO of Y Combinator, the founder of companies like Justin.tv and Twitch and Social Cam, to begin what is going to be a deep dive into product over the next several lectures. Michael. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. So, before I begin, I kinda had a conversation with Jeff and I wanted to say a couple things about my experience at Justin.tv and Twitch. So, what I will say is that we broke many, if not all, of the rules that I'm about to tell you at various points during our company. The things that allowed us to survive were one, our founding team was extremely technical. Justin, Emmett, and Kyle all were amazing to work with and basically, what I found amazing about them is they were not intimidated by any technical challenge. I think that I would not be standing here if I wasn't privileged to work with them. And so, I think this is something that a lot of companies or a lot of startups, a lot of startup founders don't truly understand. That fact allowed us to break a lot of rules. The second is we didn't spend a lot of money. We moved out when we were 21, 22, 22, and 23. We lived in a two-bedroom apartment. That apartment cost $2,500 a month. We were each given $500 a month walking around money, which technically is against the law because it was below minimum wage, but who cares about laws? And that was it, that was the game. Emmett got his own bedroom. Kyle and Justin slept in bunk beds. I slept in the living room and sometimes on the balcony. We just didn't spend much money. That gave us a lot of ability to screw up and make mistakes. And then I'd say the last thing that was kind of interesting I only realized later is that our ego was highly tied to our startup. We were not doing a startup to have a cool resume item. It was really the only thing we had done on our own. And so I think at various points during the company when it looked like we would fail, basically our startup failing was our life failing. It was like, well, this is the only thing you've done so far and so if it fails, you get F on life. And I think that we all had that feeling very internally and therefore we just couldn't really conceive of giving up. So I think more than anything I'm gonna say in the rest of this presentation, those were the three things that saved our company, made our company work. And strangely, I don't even think if you take one of those things away, any one of them, we would have died. So this isn't one of those things where it's like, oh, you can grab for one or two and that's pretty good. We needed all three or else game over. So as I get into product, I'm gonna tell stories from Justin.tv, from really early days at Twitch when I was still there. And then also from a YC company from a couple batches ago named Poppy. It's a company that I've advised since, I've invested in, did YC, great founder named Avni. And weirdly, I just feel like I needed to do a case study outside of my own story. Somehow it's gonna help share these lessons a little better. So, I always like to start with what problem are you solving? Because when I'm pitched by founders, most often they just wanna tell me what their idea is, what they're gonna do, what their product does. I think what's interesting is that like, oftentimes they don't even know why. They don't know what's the problem that they expect to be solved at the end of what they're doing. Now I think that for some businesses, it's totally fine. I think that especially if you're early on, especially if things are still in project phase, whatever. But I think at some point pretty early on, you have to figure out what are we doing and what do we expect the result to be? So at Justin.tv, the first thing, the problem we were solving was entertainment. We were making TV shows. Justin was the first one to broadcast his life 24 seven. It's supposed to be a TV show. So actually pretty easy for us to understand whether that was working or not. Is anyone watching, right? That's the problem we were solving. People watch TV shows. No one was watching, so we didn't solve the problem. Then when we pivoted to an open platform, the problem became, can we let anyone broadcast live? That was the problem we were trying to solve. Anyone can broadcast live on the internet. And once again, once we understood that, it was very easy for us to judge whether or not someone could do it. We had this open platform, was anyone using it? But I think that like, that was key to what we were doing. And then sometimes when I talk to founders, there's something they wanna do in the world, there's a problem that they're kind of vaguely interested in or there's an idea they're vaguely interested in, but they really haven't nailed down what's the actual problem we're solving. If you don't know the problem, you can't know whether you solved it. The first thing I ask founders, can you state the problem clearly in two sentences? If you can't, you don't know the problem, right? In fact, it should really only take you one sentence. So if someone asks you a problem you're solving and you find yourself delivering an essay, you're doing it wrong. Two, have you experienced the problem yourself? This is not always required, but it's certainly helpful. I've met a lot of founders who are trying to solve a problem for someone else who they've never met, never talked to, and don't truly know whether that person exists in the world. And so all things being equal, this is a great hint that you're onto something. Well, at least one person has had this problem before. The next one's, can you define this problem narrowly? What's interesting is when you get started, you can't really solve this problem for everyone who has it. So when Justin.tv first started, we couldn't let anyone broadcast live video. You had to have a laptop, you had to have good internet connection, you had to have a webcam. There are all these kind of things you needed. And so could we actually now talk about, all right, we want to make live video for everyone, but let's talk about the people that we can address first. Who can we help first? And I think oftentimes founders kind of want to skip that step. They want to solve the mega problem. Like, I want to cure cancer. I'm only talking about when everyone's cured, as opposed to like, what can we address immediately? How do we get the first indication this thing is working? And then the last one is the problem solvable. So here's what I'll bring up with Poppy. So Poppy is a company that's essentially Uber for babysitting. They make it really easy for babysitters, I'm sorry, for parents who need babysitters to get babysitters. Poppy's a very interesting company because you need babysitters for a lot of different types of things. Some people need a babysitter five days a week when a parent's at work, right? That looks a little more like a nanny. Some people need a babysitter when it's an emergency. Oh, I have a medical emergency and I need a babysitter right now because I need to go to the hospital. Some people need it because there was misplanning. Oh, I thought my husband's gonna be here this time and it wasn't. I thought I was gonna be here this time, it wasn't. I need a babysitter. Some people need a babysitter because they have an infant, right? And so this babysitter needs to have a bunch of skills. Some people need a babysitter to watch their 15-year-old to make sure they don't get out of the house, different skills. And so what's interesting is that if you just start with, oh, we're gonna help people get babysitters, it's not really good enough to understand what you can address right away, right? Which one of those use cases do you wanna address? If you were to state the problem more narrowly though, let's say we wanted to start out with infants, right? We wanna make it easy for parents to get babysitters for infants. Then we can really ask the question, is the problem solvable? I think one of the things that Poppy discovered when operating their business is that the level of skill that you need for a parent to trust you with their infant when they haven't met you is very, very high. And so the idea that you're gonna have a rotating set of people you haven't met watch your little baby, hard. Very, very hard. They have to be very skilled. And then on the flip side, the Uber model only works because there's a whole bunch of basically replaceable people with a common skill. Well, it turns out that people who've got the skills to watch infants and make parents comfortable with that tend to have nanny jobs where they work lots of hours and tend to be paid fairly well, especially in up and coming cities. And so now we have this disconnect where it's like, well, we wanna solve the problem of infant watching for moms, but that talent pool who can solve the problem, the supply of babysitters, they might not exist. Problem might not be solvable. And so going through this exercise in real time, like with your product out in the world, you should be thinking about these things. You should be thinking, how have I narrowly defined the problem I wanna solve first? And you should be always asking yourself, is it actually solvable? I think a lot of founders just don't wanna think about this, because it's hard. It's hard to think about who you wanna talk to first. It's hard to understand, oh, maybe I can't solve their problem, I have to move on. Avni was a mother of two kids. She was really pissed she couldn't solve this problem because it was her problem. But it's turned out to be very, very hard problem to solve, young infants, on-demand babysitters. All right, the next question I always ask is who is your customer? And really, you don't understand the problem you're solving until you understand who you're solving it for. A lot of times, people just wanna say everyone. Everyone's the customer, right? And that seems like it makes sense in some cases, right? If you're building a social network or a search engine, right? Everyone uses those things now. What I will say is that in almost all of the products that everyone uses now, there was a time when almost no one used them. And the creators of those products had to figure out who was the ideal first customer. And so if you don't have a good answer to this question, you're gonna be lost. You have no idea who you should talk to to ask them whether this problem has been solved. And you have no idea who to talk to to figure out who this product is for. And you'd be surprised at the number of founders who are just building something as if they were writing a creative novel, where it's just a product of their own brain and no interaction with anyone on the outside. And it's not even a problem that they've experienced themselves. Don't do that. Don't be one of those founders. You can talk to your users. You just have to figure out who they are. The next question I often ask is how often does your user have the problem? What's so surprising is when you talk through startups with people, sometimes they choose problems without quite understanding who the user is or the frequency of the problem. So I'll give you an example. A lot of people will come to YC and a popular idea back in the day was to build a car shopping website. Now, if you guys have been on car shopping websites, especially about five years ago, they all basically suck. They're hard to use. They're not very transparent. You kind of want to have this almost Tesla experience of just buying a car, but they never actually work out that way. And what's interesting is that like a lot of founders come back to this problem over and over and over again. And they always think that their customer is the person buying a car. Now, the reality is is that when you go buy a car, assuming it's not a complete lemon, you typically keep that car for seven years. So what happens if I told you I'm going to create a startup and if I home run with my customer, if my fucking customer loves me, they're going to come back seven years from now. That's hard. It's very hard. It turns out a lot of the car buying websites are not built for the person who's shopping for a car because that person doesn't have a problem very often. They're actually built for the person who's selling a car. That person has a problem every day. Every day the dealership has to hit their numbers. And so you don't see as a customer how that product helps the real customer, the person who's trying to sell cars. And so by doing this analysis, I really try to push founders in understanding who is getting the most value out of this product. And it's really helpful if you're trying to help someone with a problem they have frequently. If you think about the products that you use on a daily basis, they tend to be on the front screen of your phone. You tend to use them without even thinking. They become almost extensions of you. If you think about apps that you've installed and then they're kind of on the third page in the back or they're buried on the second page of some folder, those tend to be the ones you don't use very often. Hopefully they don't need you to use them very often or else they're probably not very good businesses. The next question I always ask is how intense is the problem? I find a lot of founders think they have a good idea but they don't do this frequency and intensity analysis. And so if you have both an infrequent and low intensity problem that you're trying to solve, you're gonna have a problem getting a lot of customers even interested in talking to you. All things being equal, if you graph problems, it's nicer for them to be higher intensity, higher frequency. Let's think about a company like Uber, for example. Usually when you are somewhere and you need to go somewhere else, it's a pretty intense problem. I have to go to work, I have to go to the doctor, I have to go pick up my kids. They're so intense you might have bought like a $20,000 car to help you do those things, right? So it's an intense problem. And then when you think about frequency, how often do you move more than a mile, more than walking distance every day? Happens a lot. And so if you think about that, even though you look at the taxi market and you say, oh, taxis, before Uber, taxis, that's not that big of a market. If you just look at the customer, you say high intensity problem that happens very often, there's probably a good business here. The last one is are they willing to pay? So many founders who come into YC, their first thought is completely wrong on this front. Their first thought is I need to give it away for free because that's the only way I'm gonna get users. One of the things that I always push them to do is think about it this way. If you want to know whether you have a good product, it's a lot easier to make it a little bit harder for your users to use it and then see if they use it anyways. Because if I am extremely intense problem and you say, well, it's gonna cost 100 bucks, for the person with the extremely intense problem, they're probably think that's a deal. If you have extremely, if you don't have extremely intense problem, you charge $0, you're gonna get a bunch of users who come in who don't really have the problem but they're just trying something out. If you try to learn from them on how to improve your product, oftentimes they'll lead you astray. So strangely, starting with a higher price or a price is almost always better than starting free. Almost always better. And if you have to start free, you need to do this analysis of how do you talk to the users where the problem is actually intense? How do you talk to the users who are using your product frequently, in production, for real-world purposes, as opposed to the hobbyists? Talking to your customers is good but talking to the wrong customers, very, very, very bad. I've seen a lot of companies that are basically hijacked by bad customers, especially companies where there's real-world costs. So, for example, if you have a company like Poppy, there's real-world costs in recruiting, managing, and working with all of these babysitters. And if you have customers trying to basically take advantage of that system, being late, being non-responsive, being rude to the babysitters, that's not gonna help you run your business. And you'd be surprised at how many hijacked customers there are out there. The last question I always ask people is how easy is it for your customers to find? Because inevitably, you're gonna need to reach them. And what's interesting, I look at the last batch, there were two B2B companies. One B2B company was here in America and it was very easy for them to find customers. They could basically go to LinkedIn, find their customers on LinkedIn, find their email addresses, email them. They could email 1,000 customers a week. Another company doing B2B was in China. And interestingly enough, reaching out over email in a B2B context in China just isn't a well done practice. Getting access to people's email addresses is actually not very hard, not very easy. And so strangely they had this challenge of a relatively simple business to explain, a real intense problem that happened often, yet they had no way to reach their customers. And they had to basically invent new ways to do it. And so I often want to ask this question because If your customers are ridiculously hard to find, you better have a solution for that upfront. You can't build the whole thing and expect for them to find you. And so oftentimes you're in a situation where someone's trying to build a product for either an imaginary customer or a customer who can't really hope to use the product. I'm trying to get water to people in the middle of the desert in the Sahara. All they need to do is download my app and go online and then they can put their GPS location and then we'll deliver water to them. That's not gonna work. But you'd be surprised at how many people just don't think through those logical steps. Alright, next up. Does your MVP actually solve the problem that you want to solve? This one is so hilarious how often it comes up. Because in the process of building an MVP, things just go weird and squirrely. So you have this problem and then you started building it and then you talk to other users and then before long you're launching something and then you realize it doesn't actually do the thing that you promised or even the thing that you want to do. So part of your process of building the MVP, it's really helpful to do these pre-steps first. It's really, really, really helpful. Because then you can always gut check yourself on am I actually solving the problem? The other thing is that it's really helpful to build your MVP quickly. Typically the longer it takes, the more you're gonna have MVP and problem drift or customer drift. If you decide to only build your MVP in two weeks, it's a lot easier to stay on task and make sure actually solving that problem for that customer. The way you test this, by the way, is you give your product to customers. You have to do that. That is a required step. What I find interesting is that a lot of people think of their product as a painting, as something that could be appreciated as a piece of art, as something that even if it's appreciated by one person is special. That's not what you're making. Products are not paintings. They're not art. If users don't find products useful, then the products are by definition not useful and they're a waste of your time to build. I think a lot of people want to be artists. The startup world is very unforgiving to artists. I think that interestingly, after the fact, a lot of people are painted as artists. Like Steve Jobs is painted as this magical artist. The other day he had to figure out how to make a phone that millions of people would buy. If only one person bought the iPhone, he would be seen as a failure. So, the definition of art is it only has to be appreciated by one or maybe even none. That's not the appreciation, maybe just the creator. That's not the definition of a successful product. So, this is what you should always be gut-checking. Does your MVP solve the problem? The number one problem with this question is that it hurts. The answer hurts. You're going to find that a lot in startups. The answer hurts. You know it doesn't solve the problem, but as long as we don't talk about it, maybe nobody knows it doesn't solve the problem. A lot of the answers inside of startups feel that way. Which customers should you go after first? A lot of founders are very confused by this question. What I find interesting is just like the instinct is to go after customers by making the product free, for some reason I find a lot of people think that their instinct should be to go after the hardest customers first. Almost as if it's like a proof. If I can get this impossible person to use something, then it'll be easier. I know that I've made something good. I like to start from a different point. It's an MVP. You know you've made something bad. That's the definition of MP. It's bad. So, the real question is how do you find people who are willing to use a bad product? They have to be the most desperate. The most desperate. And so a lot of times I talk to founders, I really push them towards who are the most desperate customers and how do you talk to them first. That's what I define as easy. Desperate. If you're trying to sell a simple piece of software to someone, $1,000 a month, and you're engaged in a six-month conversation with a company, that's not a desperate company. Move on. In fact, when you're doing enterprise sales early as a startup, you're looking for even more desperate customers just because it literally takes so long to sell them. So, if you don't feel like you're dealing with desperate people, if you feel like you are trying to get impressive customers who aren't desperate, you're probably doing it wrong. Literally, the number one thing I often tell founders is just like, whose business is going to go out of business without using you? Which people out there are not going to be able to get to work or to watch their kids? How do you find the people who are just literally are screaming for something like this? And then how do you talk to them and not talk to your friends? I had a whole bunch of friends who were using Social Cam, right? My company was doing video for sharing with friends and they weren't really using it. They were using it because it was like my app and they were friends with me. I literally had one friend who was like super honest about this, Steve, the CEO of Reddit. When we sold Social Cam, he literally said, thank God, now I can delete this app from my phone. So, the perfect definition of someone you should not be trying to get product feedback from, right? And so, he didn't have the problem we were solving. Many of your friends won't have the problem that you're solving. Make sure you find the, and by the way, the kind of community of startup people and or investors usually don't have the problem that you're solving. So, if you're using investors as a trigger for, am I solving the right problem? Or like, do they find this useful? It's almost never the case. I'm almost never the user of a product that comes into YC. And so, ignore your investors, ignore your friends. Like they will lead you 100% astray. Out of good intentions, they'll try to be helpful. Well, you know, I've never lived in the Sahara. I've never been thirsty, but maybe it should work like this, right? Like horrible, run away, run away. Once you start having customers, I think it's a very helpful exercise to try early to identify bad customers. These are people who are blasting your support. These are people who are constantly complaining. My co-founder, Justin, he had a company that was basically on-demand personal assistant. And he was the first one who I met who actively fired a customer. It was basically like Uber for personal assistants, it was called Exec. And literally, a customer would have the Exec do something like crazy, like something you couldn't do, right? Like, reorganize my house the way I want things organized. And I'm not going to tell you how I want them organized. Or go shopping for me, but I'm going to critique every single like piece of fruit and vegetable that you picked out. So, it's like completely unrealistic expectations. And so, after refunding the person four times for four different tasks, the person did a fifth task on the product, right? Because he's getting a bunch of value for free. And Justin calls him and says, you're fired. You can't ever use the product again. Like, look for those people because if you are delivering anything of value, there will be people trying to exploit that value. And some might be doing it not out of the goodness of their heart. So, don't let these people lead you astray. We already talked about this. Don't discount. Now, here's a caveat on discounting. Parker from Zenefits came to YC a couple years ago. And he gave this great talk about enterprise sales. And Zenefits is a product that's given away for free. So, it's actually kind of an interesting enterprise sale. And one of the things he said that really got to me was that there are ways to convince organizations. Basically, you can structure discounts and incentives into your sales pitch if you basically understand what value you're getting back. So, his example was he would try to sell to a company to switch on to Zenefits for their healthcare. And he would say, look, because of this third party, let's just say AWS, has given us a discount, who knows why, right? We just bought dedicated instances. So, now we have 40% lower AWS bills. So, we can actually pass on some benefit to you, but only for the next 30 days. Now, I feel horrible even telling you this because I want you to take as much time as you need to buy my product. I would just hate if you bought it on the 31st day and I couldn't give you this discount. Now, this isn't a, let me give this away for free, like, because I'm afraid people won't use it. This is a very structured process that he did. He basically incorporated a deadline based on some third party providing a benefit to the customer. And he knew that when he said this to the customer, every time that this was talked about internally, the deadline would be brought up and the discount would be brought up. And suddenly, this has now become not a way to be afraid, right, to, oh, I'm not sure if I'm going to get customers, let me just make it free. It became a way to speed up the process. And his discount was just baked in. Like, he just priced the product 15% higher. So, it's like literally, like, that is the way to do it. The way not to do it is I'm afraid no one's going to use it. So, I have to not charge any money. Okay. The next is how to set up metrics. How many of you are using Google Analytics as your primary metrics product? Raise your hands. Okay. You are doing it wrong. Yes. So, setting a metrics is something that's like super important very early in your company because it's how you know whether your product is being used or not. And it's one of the number one sources of new product ideas and inspiration. So, Google Analytics, I would say, is a great product for knowing how many people came to your website today and how many pages they viewed, which used to be relevant and is not really relevant anymore, and where they came from. What it's not a great product for is identifying what people's actions were when they were using your product. Did they click this button? Did they see this screen? How long were they on the page for before they did something else? Did they leave something in their cart? For all of those things, you want an events-based metrics product. Mixed panel, amplitude, heap. I think we've funded like 50 of them. There are like 100 of them out there. You should be using one of them. If you're not, you can't be sophisticated at building your product. This is just kind of a prerequisite. So, get on it. And this goes back to the early thing that I mentioned, which is technical teams. For a technical team, implementing mixed panel is ridiculously easy. For a non-typical team, it's basically impossible. This is just one of the many advantages of having a highly technical team. You actually know what your users are doing. Without this, you're just missing a huge part of what you need to know. The next thing, and Suhail from mixed panel gave a great talk about how do you set up mixed panel. One of the challenges of setting up mixed panel is the second that you're sitting there saying, I want to track what my users are doing. You can come up with like 150 things your users can do with your product and you want to track all of them. That's often a mistake. If your analytics product has got too many analytics in it in the beginning, it will be hard to use. And part of what you're doing if you've never used product like mixed panel before is learning how to use it. And most importantly, teaching your employees and your co-founders how to use it. Because this product should be a product that everyone in your company understands how to use. Because everyone in your company should understand how the product is functioning. This is not something that like the CTO uses and creates reports from. This is interactive product that everyone can use. So to start, pick five to ten simple stats. Let's take Instagram as an example, right? I want to pick five to ten simple stats for Instagram. Let's say, open the app, create an account, took a photo, applied any effects, share the photo. That's probably all I need in the beginning, right? I mean, the number one mechanism for Instagram is taking a photo and sharing it. I can track that. I'm pretty happy. The other thing that I will warn you about is that if your product is good, the naming conventions for these stats are going to become very important. One day, there will be a hundred or even a thousand stats you track. So think a little bit ahead of time and don't name something that only you'll understand. Make sure that if your company is good, many, many people will have to look at these stats. Make measurement a part of your product spec. Oftentimes, when I talk to founders, they say, we built it on this release and we'll add the measurement some point in the future. I don't understand how that works. You build something you want people to use, but you're not incorporating the measurement that tells you whether people are using it. That doesn't work. Building measurement is part of a product spec. So when you spec out a product, you better spec the stats you expect to be tracking. And you should also spec the stats that you think are going to improve when you're building that product. That should be part of the spec. It should be part of the first release. Otherwise, you're flying blind. And this is just countless times at Justin.TV this has screwed us. Okay, product development cycle. So Justin.TV and Twitch was three Yale kids and one MIT kid. At Yale, probably the most productive skill you're taught is how to argue with other Yale kids. And so the number one way to get products developed at Justin.TV was to win an argument with the three Yale kids. Kyle disliked this so much that he actually switched his sleeping schedule so that he wouldn't have to be involved in these arguments. So we were awake from about 8 a.m. to about 12 midnight. He would wake up around 11 midnight and write code all night and then go to sleep in the morning so he wouldn't have to argue with us on what stupid thing to build. One of the classic arguments at Justin.TV that lasted approximately three months was the background color for the original site. The original site is just one page. Justin wanted a black background. I wanted a wood-grained background. Three months of bait. We settled on changeable backgrounds. So there were five background options. Clearly idiotic. Like I said, we made many of these mistakes. We didn't actually really learn how to do a product development cycle until we failed at it for about five or so years. And during that time, this is what bad product development cycle looks like. One, we would release every three months. For a web-only product, that is horrible. Second, we would have a product meeting and we wouldn't write anything down. Right? It was just four of us. You're an idiot if you can't remember a conversation four people had, right? And if you forget something, just ask one of the other four people in the room, right? No. So as a result, during the first month of the dev cycle, we'd all go off working on slightly different versions of the thing we wanted to build. Because we didn't write down the spec. Then at the end of that month, we'd come together and we'd be like, oh, wait. We're not really building all the same thing. And then we'd have another product meeting where we didn't write anything down. And go off and build again for another month. At this point, right, two months in, we probably have about three weeks of productivity and about five weeks of just stuff that's gonna have to be thrown away. At this point in, we kind of come back together and realize that we're not two-thirds of the way done through this sprint. We're less than one-third of the way done. And we're starting to get sick and tired of this feature that we're building. So then we basically say, all right, slash and burn. Let's just make a shitty version of it. And we take another month to do that. Now we've worked on this product for three months. If you had any good or new or interesting ideas during that three-month period of time, you were told, We're already working on something else, so your ideas are worthless. Just write them down somewhere, whatever. We're working on this thing right now. At the end of the three months, instead of wanting to iterate, we were sick of the goddamn feature. We just spent three months building poorly. So we would launch it, and if it wasn't used right away, we would come up with some new brainstorm on some brand new feature that would rescue the company. This is the wrong way to run a company. It was absolutely horrible. I was talking to Jeff earlier. The major product decisions that Justin.TV made that carried through to Twitch to today was chat on the right, video on the left. We decided that in 2006. It is the same way in 2018. The vast majority of the product decisions we made were horrible and never saw the light of day because they went through a process like this. So if your process revolves around arguing, revolves around not writing spec, revolves around long dev cycles, you are doing it wrong. You are 100% doing it wrong. What I'm gonna give you is a model of how we figured out how to solve the problem. Steal as much or as little of this as you want, but understand that if you have any of the symptoms I'm talking about, you need to solve them, or else your company is just going to be much less productive than it could be. First, you need to actually have a number that you track that reflects how good your company is doing. Almost always, if you ever are going to charge money to your customers, this number should be revenue. Almost always. If you are never going to charge your customers money, like Facebook, then maybe it should be a usage-based metric. Like how often do your customers come back every day? Like DAUs. It is almost always one of those two. Usage if you will never charge the customers, money if you will charge the customers. Many people will invent reasons why these two metrics don't apply to their business. 1% of them might be right, 99% of them are probably wrong. Whatever this KPI goal is, make sure that you're measuring it. Make sure that everyone in your company knows what this goal is every day. Helpful to put it on some screen somewhere. If an investor asks you what your KPI is, you not only should be able to say what it is, you should be able to say what the metric is. You should say where the metric is now, where it was three months ago, where it was when you started. This is kind of table stakes. The next thing that we would do is, as kind of product person, I would come into the meeting and I would say, this is the KPI we're looking to improve this cycle. At SocialCam, the top level KPI was DAUs. And the three ways that we thought we contributed to DAUs was either new users, retention of users, and new content created. Those three things. So every cycle we ran, one of those three numbers, moving that number to the right direction was the goal. And we'd run an open brainstorm. Brainstorm for us would take a couple hours. And it was a real brainstorm. It wasn't a brainstorm where you say, what about this? And your co-founder says, that's a dumb idea. That's not a brainstorm. The real brainstorm is that any idea that's stated is written on the board. The cool thing about these brainstorms is that everyone's computers were always open to Mixpanel. So if you had an idea or you had a thought, you could always just go in and check the metrics and see, oh, is that right or is that wrong? You'd be surprised at how much value there is in seeing your idea on the board. Not everyone's gonna get to have built what they wanna have built. But the fact that your idea was considered and added to the board actually makes people feel a lot better than otherwise. People feel horrible when their ideas are shot down. CEOs, their job is to make their employees not feel horrible all the time. Sometimes I think CEOs think their job is to shoot down ideas. It's not, it's not gonna help you at all. And everyone, by the way, in our company participated in this brainstorm. At that point, that was four people, so easy to do. The next thing was we did what's called easy, medium, hard. So our brainstorm was actually typically split up into three categories. New features or iterations on existing ones, bug fixes and or other maintenance, and tests, A-B tests we wanted to run. We have a whole board filled out with ideas on these three categories. And then we go through and do what's called easy, medium, hard. For us, hard meant it would take one engineer most of the dev cycle to build. Medium typically meant it'd take a day, two days. Easy means we could do multiple in a day. This is extremely important. How many of you in this room do not know how to write code? Raise your hands. There we go. I am one of you. It's extremely hard if you don't know how to write code to figure out whether your idea is easy to build or hard to build. That's something that you actually learn as a skill over time. And this process basically is the process that can help educate you. It turns out that easy ideas get built way faster, way more quickly than hard ideas. And it turns out that most hard ideas can be restated as an easy idea if you just understand what bits of your hard idea are both useless and hard. And most of the time there are useless and hard bits in hard ideas that can just be removed. And so for us, this was educating everyone on the team. And for us, we had a cross-functional team so someone might not realize that this is really hard on the video system. It might be an easy web feature, but hard on the video system or vice versa. So this was basically educating everyone on the team on what's easy, medium, hard. It also created an objective standard by which to start thinking about these ideas. Instead of just based on the argumentability of the person delivering them, it was like, well, your idea is like really fricking hard and seems like it wouldn't move the numbers that much based on mixed panel. Whereas this other person's idea is super easy and probably can move the numbers a lot. The next thing we would do is we'd decide hard first. So we'd look at all the hards and we'd say which hard is gonna impact the KPI the most? And then we'd move to mediums and then we'd move to easies. What was interesting is that just with the ideas on the board and with easy, medium, hard, a lot of the ego was removed from the debate. Because one, you knew your idea had been considered and two, you'd set some objective measure about how hard it was. And three, because the board has a bunch of ideas on it now, it's probably pretty easy for you to find an easy idea that you really like. And so you're just gonna be excited that that's probably gonna get in and your really hard idea, that's fine if it doesn't. The next step is you have to write the spec. This is where everyone fucks up. The meeting might be going on for four hours now. And this is the step no one likes. You actually go through and you actually write down what do we mean by we're adding video filters to Social Cam? What do we mean by we're allowing people and Justin.tv and Twitch to chat with one another? What does that actually mean? How is it gonna work? This is really important. And once this is done, you can then distribute tasks to the team. Now we would run these cycles every two weeks at Social Cam because back then, submitting to the App Store took longer. If you're doing a pure web product, you can run these cycles once a week. The rule that we had to make the team not hate these really long meetings, this was the only meeting we had. This is the only meeting. And so it might take two hours, it might take six, but for that two week period of time, there were no other meetings. In fact, for me, being a non-coder, my number one job was to shut the fuck up because I could create a problem. We're busy working, we have this written spec, everyone knows what they're doing. If I have some brilliant idea during that two weeks, that'll throw the whole thing into chaos. Suddenly, the written spec's not important, we're back to the drawing boards, we're changing things, yada, yada, yada. What I had to realize is that every two weeks we do this over again. So for that burning idea, just fucking wait two weeks and we're gonna have the meeting again and then we can get it in. And it turns out your burning idea is probably wrong. So it's totally fine to wait two weeks to try to convince people to do something wrong. It's totally fine. As opposed to having this cadence meant every two weeks we had success. Every two weeks, if we built what we said we were gonna build, we felt good. And then that cadence meant that we'd go into the next cycle and do even more. This cadence is extremely important because it's going to take you guys a long time to find product market fit. You're gonna be trying a lot of things, you're gonna be iterating a lot. And if that process doesn't feel fun, you're gonna get very frustrated. This made the process feel fun because we had goals and we accomplished them. Pivot versus iterate. A lot of YC companies, a lot of founders in general will tell me, our thing isn't working, it's been two months, it's time to pivot. When I think about that statement, it blows my mind, right? You're building a new product for a customer who might not have ever used the product before. You're oftentimes exploring a problem that you only know to some degree or you've only experienced it personally. What makes you think two months is enough time to know whether you've figured something out? What impressive thing only took two months to build? So if you're not thinking that the process of coming up with a solution for this problem is probably more like a two-year process, you're doing it wrong. If you are unsatisfied with significant progress in under two years, you're probably doing it wrong. It's going to take time, you're doing something hard. If it was really easy, someone else would have done it. So I define pivot as changing the customer or changing the problem. This should be rare, this should happen infrequently. Many times this means you should start a new company. I define iterate as changing the solution. It turns out you had the right customer, you had the right problem, your MVP was shitty and it didn't work. We need a new solution. It turns out maybe your MVP was great, but it didn't solve the problem. We need a new solution. It turns out you showed the product to your customers and they didn't want to use it, even though they have burning problems. We need a new solution. Oftentimes I see this in reverse. People think solution first and when the customers they thought didn't like their product, they try to find some other random customer who does, who might even have a completely different problem. And they try shopping around their solution because they think their solution is the genius part. I think the problem is the genius part. I think identifying a problem that other people haven't figured out is worth working on is the genius part. Facebook wasn't first to social networking and Google wasn't first to search engines. Their genius was understanding that the people who came before them hadn't solved the problem. And if they could solve the problem better, they'd build huge companies. Their genius wasn't, oh, we built this cool thing, let's just figure out who might want to use it. Wrapping up a little bit here, I like to tell the story about fake Steve Jobs versus real Steve Jobs. A lot of people think that Steve Jobs is this person they should emulate, but they have a false picture in their heads of what Steve Jobs was. They think that he dreamed perfect ideas out of his head and into the world. And what's funny is that I think oftentimes people look at the iPhone as a perfect example of this, but they look at their iPhone today. Your iPhone today is fucking magical. The first iPhone sucked in almost every way. And they don't realize that Steve Jobs wasn't somebody who was just not iterating, who just imagined near perfection minute one. Steve Jobs was iterating at every step. So I like to remind people what the first iPhone did. First iPhone, no 3G. Back when 3G was a standard feature. So, oh, you have this great internet browser, but you can only use it on edge, which means it fucking sucks, right? One carrier. Oh, you don't have this carrier? Sorry, switch carriers, figure that out. Horrible battery life, screen cracked all the time, no app store. You can't even download other apps. That was the first iPhone. Everyone forgets that iPhone. So if you are the person in your company who is being fake Steve Jobs, is saying the product has to be this way because what I said, fuck the customers, fuck everyone else, fuck you, make the product the way I want it to be, you're being fake Steve Jobs. Real Steve Jobs released a shitty MVP that was revolutionary, but still fairly shitty, and every year iterated it. Until you have the thing in your pocket right now, which is pretty damn good. Real Steve Jobs iterates and talks to customers, fake Steve Jobs just dreams and creates art. Don't be fake Steve Jobs. Okay, so with all of this, I wanna go back to the beginning. What I said in the beginning still holds. Justin.tv, the only reason why I actually even know any of these rules is because we broke all of them. The one thing that Justin.tv and Twitch had was a really strong technical team with high ego in the product and low burn. When we started figuring things out with Twitch, it was very interesting. Gamers had been on our product the whole time. Gamers had been streaming on Justin.tv since almost the beginning. At any given time, they were 20% of our traffic for years. We ignored them. We ignored them, we ignored them, we ignored them, we ignored them. They still use the product. We didn't build features for them. They still use the product. They must have been pretty fucking desperate because they still use the product year after year. The number one thing that changed when we started working on Twitch was we started talking to them. And what's weird was it's not like we were talking to other users. In the early days of Justin.tv, we didn't talk to any users. We had this like crazy product development cycles. We couldn't do that with talking to users too. So what we did in the beginning was we literally just sat down with these gamers and we said, what did you want? And what's funny is we didn't build them anything very special. They were like, oh, like lag sucks. They wanted like little things. What was great about it was they realized we were now gonna build something for them. And no one on the internet was building things for these gamers. And they realized that when we said we were gonna build something, it came out. When was the last time that you talked to someone building a product that you like and you said, can you do this? And they did it. When was the last time you suggested a feature to mark at Facebook and then the feature came out? Never. Like it's one of the magical things you can deliver as a startup is you can talk to a passionate user and then you can build what they want and then you can say, here it is. And they will fall in love with you even if those features are relatively mundane because let's clear, Twitch today. Chat on the right, video on the left. Same product. What was great about this process was by talking to them, they realized that we were on their side. They realized they were building something for them so they told their friends. That was the major change. If we didn't have a technical team, if we weren't cheap, if our ego wasn't involved, never would have gotten to that point. And if you look at the history of Justin.tv, in the first five years, it went from being worth nothing to being worth about $24 million. In the next three years, it went being worth $24 million to being worth a billion. That's what software can do when you hit the right customer. Let's do a couple questions. In the back. So you mentioned that you should try to charge early and not discount early. But if you make your final product, you're planning to make it a free app and monetize with some premium content, what should you do? So the question is, put it more generally, should you be going free if your final idea for a product is to be free? What I would say is this. If your users are users who you never plan to charge, then it's totally fine for you to be free. But if you do plan to charge them in some way, it's really helpful to charge them as soon as possible because you want to know whether or not they're willing to pay. And certainly if their business depends on it, it's especially helpful to charge them. So that's the measure that I would use. And there are all kinds of little tweaks and so on and so forth. But at a high level, do you ever plan to charge them? I'd charge them. If you never plan to charge them, you even plan to monetize based on ads, which is really usually the way that you never plan to charge them, is you're gonna monetize with ads. If you're not gonna monetize with ads, you probably should start charging them. All right, next question. Thank you for sharing all this. You mentioned that the, almost always the best revenue, or the best KDAB you track is revenue. Let's say I'm launched, I'm early days, I'm trying to get that first sale. I know for a few weeks it's gonna be hard to get that to go from zero to anything. Should I still be writing revenue down or should I track something? Revenue. If your metric, if your KPI is metric... Yeah, yeah, yeah. If your KPI is revenue and the number is zero, should you still be tracking that as your top line KPI? The short answer is yes. You should be depressed looking at that number every week. And to, like, that's the answer. Now let's be clear, like I said with SocialCam, right? They are contributing numbers to that, right? And so, whereas like DAUs was our top line metric, right? We also, the things we thought contributed to that, new content, new users, retained users, those numbers we can move. So if you're in a sales type business, your KPI number one, revenue, if it's zero, that should fuck you in the face. Zero, zero, zero, horrible. But then you should ask yourself, maybe your three other metrics are how many conversations did we have this week, how many people are in contracting, how many people are in onboarding, right? And those can be your three numbers that will, if those numbers move, you expect the revenue number to move. And they can keep you motivated. But your top line KPI is no bullshit. Absolutely no bullshit. Good? Thank you. We're a hardware company, pre-launch. And so our users, our target market experience our problem five to 900 times a day. And the intensity is, can we pay our rent or not? But we'd like to offer pre-sales as a way of getting the product to market. Do you guys have any tips on doing that? Do we have any tips on pre-sales? What I would say is that there are many, many tips on pre-sales. I would email some founders who've done it before. That's one of my best tip, is to email them and ask them what they did. The number one mistake I see with pre-sales is discounting. The number one mistake is that basically, especially hardware founders will misunderstand how much they need to charge so they don't lose money. And so their pre-sale becomes their death. So I'd avoid that. All right, two more quickly. On the way back. You mentioned having a slow burn. What was the hardest part of that? And how did you deal with it? What was the hardest part of having a slow burn? Well, we were young, so it wasn't hard at all. We were living like we lived in dorms. I think it's a lot harder now, right? I've got a kid, I've got a wife, got an apartment, got a car. It'd be really hard now. And so I think really the hard part about slow burn is can you adjust your lifestyle if you've already leveled it up? And if you haven't leveled up your lifestyle yet, and you're still working, you know, if you're young and you're still working at a company that's paying you well, not leveling up your lifestyle is a big way to stay ready to do a startup. Adding on the mortgages and the cars and the vacations makes it a lot harder. I just know a lot of people who never could come back from that, absolutely never. In the back. Yeah, can you talk a little bit about going from beta to early MVP? When you know you're sort of there. Going from beta, how do you go from beta to early MVP? I don't really know what those distinctions are. Like, all I know is are people using your product? Yes, no. Like, if people are not using your product, get to the point where people are using your product extremely quickly. Once people are using your product, there's all different labels for it. Beta, pre-launch, alpha, blah, blah, blah. Who cares, right? It's just, that's the dividing line. Are people using your product? The next question is, are you actually solving their problem? That's the next question. Not like, are we following this line of launching things? Most YC companies will launch many, many, many, many times. So, that progression isn't really that important. Are people using your product? Great, bam, you're launched. Congratulations. Call whatever you want. All right, one more. Here you go. I have a question regarding how to select what next feature to work on. You already mentioned it, and I'm sure that we should follow the metrics, but imagine that we have a pool of two or three passionate users, but each one wants something different. So, we will be in a spot in which we are unsure which one will impact the metrics. So, this is a great question. And I'll have an unsatisfying answer. So, the question is, basically, how do we figure out what to build next? Here's my answer. The reason why you have a product development cycle is that you can work on multiple things. Usually, there isn't a right answer. Usually, all of the things that you wanna build won't work. So, what you need to do is you need to create a process in your company to build things quickly so that you can actually see whether they work or not, and then you can iterate them from there. So, it's far more important to have a technically talented team that can build MVPs quickly in a non-frustrating way and then measure the results than it is to be a super genius who can imagine what's going to happen in the future without actually knowing. Now, in the big picture, you have to have that imagination. For your vision, for where it's gonna be 10 years from now, you have to have that imagination. For the little technical tactical move in the next three months, it's really hard to nail those. If you have a process that can rip out things quickly and then only iterate the things that are working, that'll serve you far better. Our mistake was that at Justin.tv. It was thinking every time, we've got the home run. Let's only swing for home runs. And, of course, it would take three months to do it because we gotta make it perfect, right? And then the whole spiral of death. All right, the last thing I'll say is my email address is michael.ycominator.com. Strangely, I tell people that I answer every email and people mostly don't believe me and the ones who do email me and I reply. And so everyone I talk to and everyone online, there's really only two categories of people. The people who don't believe me, in which case, great, continue your lives. And the people who will believe me and if you need help, they'll email and I will try to help you the best I can. It's really that simple. You don't need to have networked with me. Y Combinator is fairly easy to spell and so is Michael, so you should be able to figure that out. Thank you. Thank you. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "How to apply and succeed at Y Combinator",
    "description_video": "YC's Dalton Caldwell gives insight into how YC admissions works and what makes for a successful YC experience.",
    "related_categories": [
      "startup school",
      "YC",
      "Applying to YC"
    ],
    "page_url": "/library/6t-how-to-apply-and-succeed-at-y-combinator",
    "youtube_url": "https://youtube.com/watch?v=8yiOcCPvyNE",
    "mp3_file": "downloaded/How_to_apply_and_succeed_at_Y_Combinator.mp3",
    "mp3_content": "Okay, what we're going to talk about today is how to apply and succeed at YC. In my capacity as the head of admissions, I go around the world and I give talks and I meet folks that are applying and I answer lots of questions. And so I think I have a decent internal model of the kinds of questions that people have and the kinds of things that people get hung up on. And so I'm going to do my best to anticipate what you're probably thinking about and try to answer those to the best of my ability. All right. So why is it even worth applying to YC? People ask this question a fair amount of time. And I would argue that the very act of completing the application forces you to think about stuff that you should definitely think about. For instance, you know, what are we building? What is different about what we're doing than other options on the market? Who are your competitors? That's a good one to ask. Here's one that sometimes people don't talk about before filling out the application. What is your equity split? You'd be surprised. People often have never had that conversation. And so the very act of going through and doing an application and working with your co-founder to answer all these things, I would argue is an extremely good idea. And regardless of whether you do YC again, you should ask yourselves all of these questions. And if you find a bunch of murkiness where you can't answer them, that's usually a sign that you should be discussing this more. And so right off the bat, I recommend going and answering the questions. I think it's a good idea. Another thing is if you are watching this very presentation, there is a good chance that YC is a great fit for you, right? There's lots of people that apply and they don't really know what YC is and they Googled like how to get free money on the internet or something. Trust me. I read these applications. And it's clear that they don't exactly understand what YC is and what it's all about. They just want money, right? That is not you. You are here. You have been participating in this. There's lots of context that you have about YC. And so that out of the gate means you're going to be much better prepared to fill out this application and that you're a great fit for the sort of company that we would want to fund. Okay? Another thing is I think a lot about what you should be doing as a founder in terms of cost-benefit analysis on time. There's a lot of things that seem like a good use of time that are not a good use of time. And there's a lot of things that may not seem like a good use of time that are an excellent use of time. And so I'd argue filling out an application should really only take you, I don't know, two or three hours. And the potential upside is quite huge versus other ways you can spend two or three hours where the upside is not much at all. So let's talk a little bit about how you create luck. And this is sort of like a meta point outside of the application thing. But great founders create luck. And there's ways that you can create luck in your life that increase the chances that you will get lucky. And the way you get lucky is you set yourself up to be lucky as often as possible. And so if you can set yourself up so that every single day of your life you have a shot, it's something really fortunate happening to you, the odds that something really fortunate will happen to you is like super high. And I would argue applying to YC is definitely one of those things, right? I answer questions and invariably people will probably ask me questions at the end of this that are some kind of complicated way of being like, of you talking yourself out of why you should do it for some reason. That is not a great way to create luck. And the fact is you're going to set yourself up to be rejected all the time as a founder, right? You get customers, your customers unsubscribe from your service, your customers are not happy. You're going to try to recruit people that may not work. You know, you're going to be told no all the time. And so if you set yourself up so that you never hear no and that you never get negative feedback, it's just like not, you're not going to set yourself up to actually be successful. So this is an example, like when I talk to people and I'm on the road, a lot of the questions or concerns that people have are all stem from this, which is they're afraid of what happens if they don't get in. And so they don't even bother to take the chance. And again, regardless of YC in this particular topic, I really think this is a good trait for you to develop as a founder. We work on this in the program with people of really encouraging people to not be so afraid of getting told no and systematically trying to set yourself up for good things to happen to you as much as possible. And so this is just another of those situations. So let's talk about some of the reasons that people don't apply. This one is very common. I am too early. There is no such thing as too early. We fund people. Sometimes in the extreme case, people have changed their idea between when they get invited to interviews and when they get to the interview. That's an extreme case. That's pretty early. We also fund people that end up pivoting mid-batch. That means they've been working on their startup a negative number of days. That is clearly not too early also. And so again, there's a lot of ideas around there that the right way to apply to YC is to wait until you have a certain amount of stuff. Someone asked me a question, what's the right amount of MRR to get into YC? And like, holy cow, the answer is zero. That doesn't mean you will definitely get in every time, clearly, but any kind of roadblock you put for yourself that you're too early, I would argue is your own self-constrained roadblock, not something that's coming from us. Conversely, people think they are too far along. And this one is great because it's like, there's like this ideal point between too early and too late that is like last, you know, a week or something. And otherwise, you're too far on either extreme. Most likely, you're not too far along. We have folks every batch that come in. We have folks that, man, had over a million dollars in annual recurring revenue. Folks that have had 20 or 30 employees, folks that have raised a fair amount of money. Like whatever metric by which you think you're too far, and again, maybe you are genuinely too far because you're like got a thousand employees or something. The odds are though, most of the people that ask this question, it's because they are launched or they have a little bit of revenue and they're like, oh, we don't need YC, we got it all figured out. And again, our data and the folks that we worked with suggest that you are most likely not too far along depending on your circumstance. So if that is the idea, don't put the barrier into yourself on why you're not going to apply just because you think you're too far along. I'm too experienced. This is where either you just, oh yeah, I went to business school or I've done a startup before. Okay, that's fine. But all you're doing is limiting possibilities there. And I don't, there's lots of folks that are super experienced. Justin Kahn did YC three times and is now the founder of Atrium. And he gets something out of it every time. And clearly, he's very experienced and I would argue much more experienced than many people that think this about themselves. So again, this is just creating barriers for yourself. This is a common one. There's something specific about my company that YC just doesn't get. And usually the way that I answer this is by listing all the types of companies that we fund. It is too long and too boring to list here. So I will not attempt to be, to list them all, but look, whatever industry you're in, whatever you're doing, most likely we fund something kind of like it or equally crazy to that. And we really like crazy and weird things. And again, why don't you make crazy and weird? I don't know. We funded nuclear fission and nuclear fusion startups and supersonic jet startups and like, I don't know, all sorts of crazy biotech stuff. So there's, it's unlikely that we're just going to be like, wow, that's, that's too weird for us. Maybe, maybe you are that one, but most likely this is a barrier you're putting in for yourself. This one's also really common. People think if you do YC, you have to live in the Bay Area forever. That is not true. A huge percentage of the people that we fund, you know, you do the program here, but that's three months and you go and do whatever you want, right? So if you're, if you're super worried about like, wow, I just love New York city. That's my home. I want to be in New York city. Okay. That doesn't preclude you from wanting to apply to YC. Okay. There's more. I'll go through these quicker. I'm a solo founder. Okay. That's not a reason not to apply. It's just, again, maybe you're afraid of rejection or, you know, that we encourage you to have co-founders. That doesn't mean, that's not a reason to not apply to YC. I've already applied to YC once before, I'll address this later, but just because you didn't get in once in no way means that you won't do it again. So that's like not a good reason. I've already raised some money. I don't know the stats off the top of my head, but a huge percentage of last batch had already raised a few, you know, on the order of six figures. And there's definitely some seven figures as well. And so in no way does it preclude you from applying to YC. It's in fact extremely common. Finally, there's competitors. If you're doing like a self-driving car startup or a scooter startup or something, and there's other folks that we funded in the space, we fund folks in the same space all the time. This does not preclude us from funding you, nor is a good reason to not apply. Okay. Here, there's not many, but I do think there is a couple of good reasons to not apply. One is you have the kind of business that is either not anticipated to be fast growing enough, nor in your ambition is something that ever makes sense to raise venture capital for. And if that does not make sense for you, then yeah, you probably shouldn't apply to YC. Like you should not raise any venture capital. You should make the growth rate work for you and make the business model that works for you. And that's A-okay. Right. So no sweat. That's a good reason. And the other thing is you're just not sure you want to work on this very long. All right. That's also a valid reason. We're used to working with people that are working on something for a very long time. And so if you just want to do something for a few months or put this on your resume, then yeah, that's a fair reason to not apply. How to apply. Okay. This is really straightforward. There's a website. You go to the website and you follow the instructions. It's okay to apply early or late, depending on your circumstances. As Jeff said, there are, it's slightly harder to get in early or late. And that's just because we're not, that's not our primary time to be cycling through things. If those are the circumstances you're in, you should definitely apply. This is a very common email question we get is, hey, it's two weeks after the deadline. Can I still apply? Guess what the answer to that question is? It's a very quick yes. But people want to ask. They want permission. And again, this is a recurring theme about founders. You need to learn. You don't have to ask permission for everything. You don't need our approval to do anything. You know, there's a website. If there's a button where you can apply, you should totally apply. Right. You don't need to email us, have us say yes, and then do it. That is an unnecessary step. Right. So just keep that in mind. And you can just email us. And again, most of these questions are just people asking, should I apply? And our answer is almost invariably yes. But if you want to ask us, you can. There's the email address. So let's talk about what makes a good application. The first one, I promise this is not redundant. This matters. And it's because I read so many applications. I have a very good idea of what they actually look like. And I realized that this talk will go on the Internet. And many of the things that I say will be reflected back. Like I'm creating a feedback loop for the things that I read. And so things I'm putting in here are actually meant, like, I want these ideas to get dispersed of people knowing what makes a good application. Because I think that will make my job easier. Right. So this is very intentional. The first thing is that you'd be shocked how many people don't actually fill out the dang thing properly. Like, sloppy, sloppy, sloppy. Right. There's like whole areas where they don't answer the question whatsoever. They don't put in URLs. They don't fill out their bio. I don't know. It's not a very long application. You'll see yourself. But it is shocking to me how what a high percentage of the time people just like don't fill the dang thing out. Or like put in lots of like errors. And it's just like not great. Think about it about, you know, applying for a job or any other kind of professional thing. Lack of professionalism here. Not equated with success. So just fill it out. It's that simple. And that's why I'm leaving with this is you would be shocked how few people follow this direction. Maybe they think it's like a lottery ticket where they put it in an application. Even if it's a bad one, they might get in. No, humans read these things. I read these things and I appreciate it. If you felt the application, the second thing is the founder video. You would be shocked how many people don't follow the dang directions. There's directions on how to do the founder video, i.e. it should be a minute long. All the founders should be in the video and people don't do that. We get the twenty minute like spirit journey very video where I don't even know what they're taught. It just goes. It's. Yeah. Or like sometimes I've seen like an hour. Twenty. I've seen some weird stuff, but like the twenty minute spirit journey video, not super helpful and I'm not. It's really hard to sit there and watch me for twenty minutes. One minute is a perfect amount of time. We give you examples. Those examples are great videos. Be like that video. It's also really good to have the entire founding team in the video. People are always like, hey, I'm here and I'm in the airport and my co-founder is in here. So here's my video. I think that's fine. If that's what you have to do, but maybe just waiting a couple of days till you can be with your co-founder to do the video would be a good idea because my theory is a lot of times when people don't follow the directions and maybe because their co-founder doesn't know they're applying to Y.C. Like there's all these things under the hood where the lack of the co-founder in the video speaks volumes. And so maybe maybe you are have a great reason why your co-founders in the video, but I would suggest it right. And it's in the directions. So I'm not telling you anything that's not in the directions. I'm just letting you know, yes, we watch these things and yes, it's valuable. And if you just follow the directions, then we're going to be super happy. And when it's like, either there's no video or the video is weird. Another thing that people do a lot is they put in like an unrelated video of a product demo that they made with one of those free tools where there's no humans in it. And it's like, I can't even describe it. But anyway, there's a whole genre of things that people put in there that are not remotely following directions. So please follow the directions. I swear it matters. Clarity of thought. This is a good application is easy to understand what they're talking about. And it doesn't mean you write tons and tons and tons of words. Tons of words can definitely has a diminishing return where we don't know what you're talking about. And it's I just can't understand what the application is saying. Also clarity on who's building the product. It's remarkably obfuscated to even figure out what's going on and who's even building the thing. Like you'll see who the founders are, and you'll kind of see what they're working on. But it's really hard to tell who's building it. And so just having it be very crisp of who's building it, again, this would put you way better than average if you just do these things. It's so simple, right? So good applications do these. Let's talk about clarity because this is definitely something that is worth talking about. Great applications that I read the application when I read an application, and I know when I read it, they're going to get in. They're super easy for me to read. It does not require a lot of work. It doesn't feel boring or painful. It just reads like with no effort whatsoever. And it's because I understand there's no jargon and everything just adds up and it's a great narrative and it's like, wow, what a great application and you move on. It's very quick. Quick applications obfuscate. They obfuscate everything. What is your idea? Obfuscated. Who's on the team? Who's writing the code? Obfuscated. How does it work? I have no idea. What is the state of the company? Are you launched? Do you have users? What is it? You have revenue, but you're not launched? What is that? Basically, it's like a puzzle. When I'm reading one of these applications, it's like a brain teaser where I'm trying to figure out what's going on. I promise this doesn't help. I think a lot of the times that people obfuscate is they either think that that's what we want to read or we like buzzwords or we like this stuff or they're trying to hide something where it's not, where the revenue is actually their personal salary, but it's not revenue for the company, but they're putting in there because they think they should have revenue. Stuff like that. We'll ask questions sometimes to figure this out, but there's such a clear delineation for me as an application reader about someone that is clearly communicating in a very crisp way versus where it's this brain teaser and I'm trying to pull out, where it's just tons of work for me to pull out the key facts from the application. I think this is broadly applicable if you're trying to convince someone to buy your product or you're trying to convince someone to work with you or you're trying to convince an investor to invest in your startup and they don't even understand what you're talking about, you have already lost. Simply going for coherent understanding should always be the first thing you do before you're trying to sell someone. So if I don't understand what the heck is going on in your application, it doesn't even get to the point where it's like, hey, should we fund this company or not? We just don't know what's going on and you will notice that other people will check out, like if you're trying to pitch your thing to someone and they can't follow you, there's no way you're getting them to yes. And so I just think this is such a broadly applicable skill and something that we work on a lot in the batch. is simply being clear and making sure the other party knows what you're doing first, and then selling them comes second, once they actually understand what you're doing. So I put in a few examples here. So here's some examples of really great descriptions from real YC applications, from real YC companies that got in. And so here's a company called Remix. And this is the entirety of their answer to this question. There's not more. This is it. I don't know, I'm not gonna read it out loud, but like, it's what, three sentences? And I read that and I know exactly what they do, and I know who wants it, and that's it. Great, seems valuable, right? This requires so little mental effort to pull out what Remix is and what they're doing and who it's for, that I'm like, great, like takes two seconds to read. Okay? Here's another one for a company called Tetrascience, also excellent. We're a software platform that connects scientific tools to the cloud. It allows scientists to access their lab device from anywhere, blah, blah, blah. And we make a small hardware module which connects those labs to the web. That's it. That's great. That's what we wanna read. See? Super crisp, understandable, no jargon, answers all the key questions. Notice that they're not trying to sell us on any of this, they're just explaining what it is. And that's why this is so great, is it's super coherent, super clear. Here's another example from GitLab when they applied to YC. And they explain exactly what it is, the history of the company. And they also add in really impressive facts right at the top. Over 100,000 organizations use it, including thousands of programmers at Apple. All right, that's good. Glad they put that in there, right? And it's right at the top, super crisp, right? So this is, when we read these applications, it's very clear what they do, and we're like, wow, tell me more. I understand what you're doing. Here's an example of a bad one, and I didn't pull this from a real application. I wrote this myself, and I wrote this based on many of the applications I read. You know what I'm saying? I didn't have to think too hard to write what a bad description is. And it keeps going, I couldn't fit it on the slide. It keeps going for pages. And this isn't even an exaggeration. This is what a lot of applications are like. And I understand, I have empathy for the people that apply with stuff like this, because I think that they think that this is what we want. Or they think that if they use enough jargon or buzzwords that we will get confused and fund them or something. It's like stunning us, like, oh, I don't know. Blockchain, okay, yes. Instead, this is arduous work that makes me want to go take a break. I'm like, okay, well, I'm done. Like, I read one of these, and I need to go get a breath of fresh air. This is really hard to read. It's really hard to understand what's going on. And I still don't know. I read this, and I've learned nothing. I still don't know what this company does even after reading the application. And so please don't apply with stuff like this. It's not helping. Make sense? Yeah, and do you see the crisp difference between this and the good examples? Yeah, okay. Great applications tell a story. So here's the things that I would want to pull out of an application that I was reading. Who is on the team? So this is who we are. This is what we're working on. This is why we're working on it, i.e., how we got the idea, something like that. This is what we've accomplished thus far. Even if that's, hey, we haven't done much, that's okay. I still want to figure that out. And this is why we're gonna make this work. And that's pretty much it. These are the things, when I read an application, that I'm trying to pull out of it. And there's nothing fancy here. And if you make me work really, really, really hard to figure this out, that's a sign of not a great application. But if this just flows out without taking any effort whatsoever, then that's a good application. Nothing fancy here, right? And if you've ever hired people and read resumes before, it's kind of the same deal, right? You just look at a resume and you're like, okay, cool. There's some key things you're looking for, and then you're like, sounds good, and you move on, right? A resume that takes tons and tons and tons of work to make sense of is probably not a great resume. Okay, here's my number one tip to applicants on what would help. Make it clear that there's at least one person on the team who can make the thing that you are working on. And notice I'm being a little vague in that language because this is not just software. This means any kind of technology that you bring to bear, right? So if you are building a cure for cancer, you clearly are not going to have any programmers on that team, nor would you be expected to do so. But it would certainly be good if you're working on a cure to cancer to have some sort of scientist on the team. Does that make sense? Same thing, hardware, our nuclear companies, there were no programmers that were the founders of the nuclear companies, but you would hope to see a couple of folks with PhDs in something related to the nuclear field, right? So some sort of domain expertise. And the reason is we fund lots of startups, and if you have all these great ideas and no one on the team can actually do it, you're gonna have a hard time. And so just having a really good sense, both in the application and in general, I would recommend having someone on the team that can do it is highly recommended and changeable. Sometimes there's folks where the team is not, say you are working on something in software, and there aren't folks that have the credentials or background where there are known software experts, that's A-okay. We still fund folks like this, but the burden of proof is on them to prove they can do it. I can think of an example of a company where it was like a self-taught programmer that was so excited and wanted to do their idea so badly that they went and built the prototype themselves. And it was in the application, like, here, I built this myself. Great, they got in, right? And it's because the burden of proof, not just like, let me take your word for it, but you were able to show, even though you don't have a background of an established software engineer, you built a prototype and you brought it to market and you proved it. And so that's a good way to think about if you're in this status of having a currently non-technical team, of just simply backing up the fact that you can bring the product to bear, whether that's from a team, whether that's you learning it from yourself, whether it's a friend helping with a prototype, just some evidence that you can bring the product to market is highly recommended. And like, last note here is obfuscating this doesn't help. Right, so sometimes people make it very vague who built the product or where the prototype came from or who's gonna build it. And like, I don't recommend obfuscating this. I think having to be super crisp on who is making the thing that you're working on is highly recommended. Okay. If you have an application that actually follows the directions really well and is well-written and does the video stuff correctly, and you have one or more folks that can build the thing that you want to build, and there's some evidence that you're serious about it, and what I mean by that is just, like, a lot of times people apply and it's clear they did it kind of on a whim and they're not actually serious about it whatsoever. It comes across. If there's just some evidence that you really wanna do this, that's recommended. So if you meet those things, you get about a four times higher odds to get an interview, right? Like, if you're doing this stuff, getting an interview is not that crazy hard. And if you fail all these criteria, then yeah, the odds are pretty slim. And so it's as simple as this, that this is, you know, this is what it looks like to get an interview, is that you meet these criteria. And again, it's pretty straightforward and transparent. Okay? Let's talk about applying more than once. Okay, about a third of last batch were companies that applied already in the past and didn't get in. And so the reason I say this is it's not bad to apply and not get in. That doesn't ruin your odds. If anything, it helps you. The way it helps you is that your next application shows progress. If you apply and don't get in and you apply again and you show progress, I look at that when I'm reading the applications and I know we all do, and we're like, wow, way to go. They really went and did it. Like, I'm so psyched. Like, they went from an unlaunched idea and then the next application, they launched it. Wow, great job. You know, like, we're impressed. And this is another thing to think about is as application readers, we're like on your side. We're not looking at reasons to pick something apart. We're looking for evidence that like you're serious and that like things are going well and you're trying really hard. And so when you see someone expend real effort and make real progress, application to application, that's such a strong signal, right? And this is why you see such a huge percentage of the folks that do I see are folks that have applied in the past, right? Is because it is such a strong positive signal. One thing I wanted to mention is that you, it's basically impossible to network your way into YC. The whole reason YC was created was to make it easy for people that had no network to start a startup and get help and raise money. And so the idea of having this website where you can apply and then you do a 10 minute interview and you get funded was like really out there and weird. I remember when YC launched, I was not working here. So we don't expect anyone to have a network. We don't expect anyone to network with us. One note on this is a lot, I get the sense it's not a lot of people, but some people attempt to cold email us a lot or do other things that are sort of stalkerish a lot. And that does not help. We don't expect you to have done that. And the vast, vast, vast, vast, vast majority of people that get in are complete strangers we have never met before. That's the entire system here is funding complete strangers. And my guess is your time is better spent actually making your startup better than trying to like do some weird stuff to like get attention. Like we always have these really crazy attention seeking things that happen. And I can assure you, we don't enjoy those things. Again, what do I mean? Like people email, they physically mail us weird stuff sometimes. I'm like, that's not great, right? So sometimes, some people put a lot of effort into this, not a lot of people, but some people do. And I'm just letting you know that this is not a good use of time nor expected in any way. And that's not how I see it set up. Another thing to think about is sometimes there are people that you know that are network, say alumni or other people, and they will give you well-intentioned bad advice. For instance, oh, don't apply until you have 5K MRR. Or, oh, you know, let me, I'm really tight with the YC partners. So let me put in a good word for you. Or like, you should be very skeptical of this stuff. Self-appointed people that are giving you well-intentioned advice that's essentially putting up barriers between you and the process. I would just be like really wary of that. I'm sure it's coming from a good place, but again, a lot of times when I answer questions for people that are applying, some of the weirder ideas come from people that are vaguely in the network. And so if someone's telling you you're too early or too far along or something, something, something, I would be fairly skeptical, right? And again, you don't need a network to get in. So expecting the network to give you all the perfect advice is not always great. Real quick point, this is not about YC, but this last topic made me think of it. Watch out for predatory advisors. So in the entertainment industry, there's lots of people that want to be famous. There's lots of people that want to be good recording artists or they want to be actors or directors, there's a huge supply of them. And one of the things of starting out in the entertainment industry is you meet all of these people that claim to have great connections and they're somehow going to extract value from these poor naive people and it's really sad. This exists for sure in the tech industry where there are people that will just ask for equity or cash compensation and claim all the stuff and promise you the world. It's kind of a drag to see this exist. And so I just want to encourage everyone to be very wary of people like this and to do research. And that means Googling them. If they claim fantastic things, look into that. Do diligence on other people they worked with in the past. There's just like a whole variety of people that claim to help you break into Silicon Valley that I think is pretty dubious. And there are some legit things in there but just like in the entertainment industry, for every, I don't know, 10 people that claim they can get you a meeting with the head of all the labels to get you a record deal, you know, nine of those are probably lying. So keep in mind, the best way to have great things happen is to build a great startup and then great folks will find you and to be a little wary of some of the folks that are looking for people just like you that are trying to break in. All right. So let's talk about interviews. If you get invited to interviews, they last 10 minutes. The interviews are in person. We expect the full founding team to be there. There's usually three to four people from YC in the interview. And the questions are usually very basic. And what we're trying to do is just understand the nuts and bolts of the business. It's nothing fancy. Just like I was saying about the application process, people are surprised to learn that there's nothing too fancy here. There's no trick questions. There's no really expert stuff. We're just trying to understand really basic things like, oh, are you launched? Well, how are you getting users? Okay, what is the next step for the company? How do you see this getting big? These are all very, very basic questions. And we're simply trying to understand the stuff, right? Versus, yeah, actually, let me go to the next one. So there's a lot on the internet about how to prepare for interviews. And I think a lot of it is a little wrong. And the reason it's wrong is I think it sets up the mentality that a YC interview is this adversarial thing that it's your job to beat, right? It's like the interviewers are your opponents. And your job is to go in there and like stun them and confuse them. And then if you fool us good enough, then we will fund you. And I think that that is wrong. And again, I read this whole genre of blog posts because they're entertaining to me. And I think it's usually people that didn't get in that write that. And so I understand how it can feel adversarial if you didn't get in. And it's also more exciting to write a blog post about this really exciting interview. And it was like, they were grilling me so hard. And I like had to think on the fly. Like that's more exciting than yeah, we had a kind of a boring conversation about my business, right? And so I want you, this is a good thing for any kind of working with investors. I want you to put yourself in the shoes of the person on the other side of the table. Which is what are we trying to get out of the interview? Imagine you were interviewing a company. What would you be looking for? You'd be looking for basic answers to your question. And you'd be looking for having a pleasant conversation that this is someone that you want to work with and that you're excited to embark on their journey with them, right? And so a lot of what I'm looking for in an interview is like, can I have a productive conversation with this person? And if someone goes in there and like spits out this like memorized paragraph of text about AI something, that's like weird. That's not like an organic conversation of someone you might want to work with. That's someone going in there that clearly read way too many blog posts and spent way too much time preparing and is like kind of not understanding the context of the conversation, which is, hey, like let's have a conversation about your company. Instead, they're just like spouting nonsense at us, okay? And I feel like that's a consequence of people reading too many blog posts about this adversarial process. Because the fact is, when we fund a company, we are now working really closely with that company forever. The founders in your group, they get your cell phone number, they call you all the time, they text you all the time. Like these become people that are really important member of your life. And the people that I fund, like this lasts a long. long time. And so I just want you to know from our perspective, we're just trying to get a feel of like okay, are we ready to really work with this company and get super involved? And so have that compassion for the people on the other side of the table versus making it really like a strange situation where it feels unnecessarily, I don't know, memorized and painful for us on the other side of the table. And again, I think sometimes people try to manipulate the process and I don't, if we get any hint that you're trying to do something weird, again, that doesn't engender trust. I think that's the word. We're looking for trustworthiness in a sense that we're getting to know the real you in those things. So let's talk about a successful interview. Interviews do go really fast and they're intense. And the reason they're fast and intense is we're trying to pull all the information out of you quickly and there's not a ton of time. And so it's not an attempt to trip you up. It's simply that that's how much time we have and we're trying to learn as much as we can. Successful interviews, the founders demonstrate a mastery of their own business. They can talk about what they're working on. They know their own numbers. They know how many users they have. They know what their plans are. They know what their equity split is. Like all the things that are in the application, they are like, yeah, I can talk about that. Like, oh, I have a question. When you said this about that in your application, what did you mean? Oh, yeah, I have an answer to that. We're just looking for you to clarify things that we may not have understood from the application. And so there's no such thing as a correct answer. This is not a quiz show. This is not a beat the interviewers at their own game. This is a legit, we're just trying to understand what you're doing. Another thing is we know how risky this is and we know how slim the odds are in an interview are to succeed. And so if you come in there being like, everything's great, everything's perfect, I have it all figured out, I'm confident, like we're definitely going to be successful, I promise, like, okay, that's not actually good. Like it denotes a lack of self-awareness. And so again, if you overpractice for these things and you think your job is to come in there and tell us how you have everything figured out and you're a genius and your whole team is geniuses and like, it's like you cannot lose, not a great sign in an interview, right? So a good idea of what is hard about the business and what the challenges are is expected and recommended versus the things where you do have, you know, where you do know what you're doing. Does that make sense? So yeah, like overconfidence, not necessarily a great, you don't see this in successful interviews. You see self-aware founders. If you are interviewed and not selected, we send an email with some feedback. Usually the feedback is focused on a single thing, which is what we are most concerned about or not convinced about in the interview. And it's pretty transparent and straightforward. And if you take that feedback and you go work on it and you apply next batch and you show how you either disprove the feedback or addressed it, that is highly recommended and that's totally a great way to get into YC. You see what I'm saying? Like sometimes people get these emails and then you never hear from them again or they like get really angry or something and like argue with you. But you can either prove it and show that the feedback is invalid. Like, hey, we're worried about your growth strategy, blah, blah, blah. We'll go prove it. Yeah, we did grow. Here's what we did. We love that. We'd love to be disproven or, hey, you were right about the growth strategy and so here's the changes we made. That's great things to hear too. And so that's a great way to take this feedback into account is demonstrate either why it was not valid or that you've addressed it. Applying to YC is actually really straightforward and well documented and intentionally so. So there are not a lot of secrets and we're not looking for people to do too much tricky stuff. But if you can just like stay, make it super clear, tell a super clear story like I talked about earlier, then you're going to do great. And I would also argue the skills that you need to successfully apply are broadly applicable to what it takes to be a great founder, right? If you're going to talk to reporters, if you're going to be talking to other investors, if you're going to be talking to employees, if you're going to talk to customers, having all the skills that we mentioned earlier that you would want to see in an interview or an application I think are extremely useful, okay? And then final point, if you have questions and the question is in the form, should I apply dot, dot, dot, most likely the answer is yes. And just always think about and reflect on if you're being the barrier to setting yourself up to being lucky or having fortunate things happen to you and optimize towards saying yes to things like this. I think it'll help you in general as a founder. Great. Thanks so much. Thank you. Thank you. "
  },
  {
    "name_video": "How to launch (again and again)",
    "description_video": "YC's Kat Manalac on how startups should think about launching, and why you should do it repeatedly.",
    "related_categories": [
      "startup school",
      "Product",
      "Building Product"
    ],
    "page_url": "/library/6i-how-to-launch-again-and-again",
    "youtube_url": "https://youtube.com/watch?v=3xU050kMbHM",
    "mp3_file": "downloaded/How_to_launch_(again_and_again).mp3",
    "mp3_content": "I'm Katmin Jalik. I'm a partner at Y Combinator. And one of the things I help founders do a lot is prepare to launch. That is what I'm going to talk to you about today. So I want to change the way you think about launching. So most people think about launching as something that you get one shot at. But I so for example, I just talked to a team that's been preparing to launch for six months. They were lovingly trying to get every pixel perfect on their product before they shared it with everyone. Now, they are stressing over every line on their landing page. And you know, they're trying to line up everything right with timing. But if you're like most startups, you will launch something, no one will care. And if it took you six months to get there, your startup is probably going to be dead before you get another chance to launch. So in the same sort of spirit, always be shipping, I want you to think about launching as something you can continually do. I want to destroy the idea that launching is just this one moment in time. Because assuming you do well, and assuming you ship new products and new features, you are never going to be not launching. So let's talk about all the ways that you can launch. Here are different opportunities to launch that we're going to go through today. I'll go through each of these except press launches. We have done a previous startups lecture on press launches, and I'll share a link to that and some resources. You know, after this, but we'll go over most of these and most of these things are things that you should be doing while you're in startup school. So let's talk about first why you want to continuously launch. So before you even have a fully functioning product, you get a chance to practice your pitch and you can refine it, you can A B test it and see how people actually respond to the idea. And then once you have an MVP or you know, a very early version of your product, launching through different channels will give you an opportunity to see how people will respond to that early version of the product. You know, and then launching to different channels will help you determine whether you're even talking to the right users, because you know, you might launch on one channel and get no response, you'll launch on another channel and you'll get a huge response. And so that will help you identify whether you know, you're identifying the right user for what you're building. So let's talk about some of the types of launches that you can do while you're in startup school. And I'm excited to hear that, you know, 1000 of you have launched so far since the startup of startup startup school. That's incredible. So I clicked on 10 random startup school companies from founders who posted on the forum, and only about half had landing pages. So this is what I call the silent launch. And you do not need anything fancy for this. You know, all you need is a domain name, your company name, a short description, a contact and a call to action. So for example, this is a random startup school company that I found from a founder who posted on the forum, their company is zinc, they have, you know, a domain name, they have their company name, they have their, you know, short one line pitch, a short description, and their call to action, which is get in touch, the call to action can be something like, you know, subscribe to our newsletter, or subscribe to hear more when we launch. Product Hunt, for example, has an actual product for pre launch companies called ship. And it's a way to collect potential, like interest from potential users. So for example, this is something called designer school. And it has a quick intro from the founders, a short description of what the company does, and the call to action, which is subscribe. So you know, you can go on product hunt and set up one of these pages. But of course, you can also build your own landing page incredibly quickly and easily. And this should be something if you don't have one yet, that you do this weekend. So the next thing is the friends and family launch. So if you're at idea stage, you can test out your short pitch on family and friends and see how they respond. And once you have an MVP, do a friends and family launch as quickly as possible. So in its earliest days, Reddit was shared just among the founders of their batch at YC, you know, there were only eight companies, it was a really small community, I use the way back machine to actually see what Reddit looked like in its earliest days, it hasn't changed that much. But if you look closely, this is actually before they called upvotes upvotes, they were calling it boosts. This is like 2005 in July. So that's how they got their very first users just sharing it among their community of founders. And so, you know, what I recommend you do is share the product with your friends and family, watch them use it, you know, sit down next to them and ask for feedback. But don't stay in this phase for too long. Because your friends and family might not be the exact right ideal user for your product or what you're building. And so sometimes their feedback isn't quite as helpful as a real users. So for example, you know, if Alexis and Steve had shared this with their parents, their parents might have been like, what the hell is this? So you get you know, get out of that, you know, family and friend circuit as fast as you can. And so the next move would be to launch to strangers. So one of my favorite examples of a YC company launching, launching to strangers is the company lug. So lug is an app that lets you call movers and delivery people on demand. So even before lug had built a fully functioning app or product, they would rent a truck, and they would go drive to Ikea, and they would sit outside of Ikea. So they would watch shoppers, and they'd look for people who were having a particularly difficult time tying stuff to the top of their cars. And they'd run up to those customers, and they'd say, like, hey, instead of trying to tie this, you know, mattress on top of your car, wouldn't it be cool if you could just push a button and someone with a truck would come and help do this for you? And, you know, the customers would be like sweating, and they'd be like, yes, that's exactly what I need at this moment. And you know, they'd hit they download the app, they click the lug button, and then the founder would run back to the parking lot, drive up in his truck, and then the customer would be like, oh, my God, it's you. And they were like, yeah, you know, so it was a real hustle at the beginning, like, none of this was working on the back end. But it really confirmed for them that this was a hair on fire problem for their users and customers. And so they decided it makes sense for us to really build this out and spend time, you know, on this product. So launching to strangers will help do that for you, it will help show you whether people are actually willing to download and pay for what it is you're building. Let's talk about online communities. This is actually one of my favorite ways to launch. I think you should plan a launch for every single community that you are part of. So when a company goes through Y Combinator, they have the option of launching on bookface before they launch publicly. So bookface is our internal platform at YC, it's like Facebook meets LinkedIn meets Quora. And there are currently over 4000, you know, other founders on bookface. So it's a fairly low risk way to launch because it's not totally public, but there are, you know, is enough of an audience there to get some feedback. And you're launching in front of, you know, fairly friendly people who, you know, want to see you succeed. And so they launch there. And what I think you guys are particularly lucky because you have startup school, and you have the startup school forum, which about 40,000 founders are on. So if you have an early version of your product, there is literally no reason that you shouldn't be launching to the startup school community in the next few weeks. And so you know, I also think that founders and other people making and building stuff, they give the best early product feedback. So you have 1000s of other founders at your disposal. So I think that, you know, that this, you know, kind of gives you a leg up here. Here's a sort of extreme example of a company that successfully launched in online communities. So Magic is an on demand personal assistant. When they started in Y Combinator in 2015, they were actually building a blood pressure monitoring app. So they were trying to get this blood pressure monitoring app to grow and it wasn't growing as quickly as they were hoping. So they decided, you know, let's test out another idea that we had. So they sent a link around to their friends and family. And it just looked like this. It basically said, like, Texas phone number, and we'll make anything happen like magic, like it was very, very basic. And their friend, one of their friends thought it was so cool that they shared it on Reddit and Hacker News. And basically overnight, like over the course of a weekend, 40,000 people signed up to use magic. And so of course, they were like, Oh my god, this is crazy. And let's, you know, let's be honest, this is an extreme case. And almost no one who launches on Reddit and Hacker News is going to get 40,000 users overnight. But my point is, it's definitely worth putting yourself out there. Because you know, you might be one of those like extreme cases, but at the very least, you'll get some early users, and you'll get some great feedback. And so many of the startups that go through YC launch on Hacker News and Product Hunt. And you know, we over time have looked at the stats of how well these launches convert. So you know, a TechCrunch launch versus a Product Hunt launch versus a Hacker News launch. And in terms of converting to users, you know, they're starting to even out in terms of their impact and conversion for, you know, whether it's, you know, your signups or, you know, converting to customers. So if you're launching in these communities and aren't active members of these communities yet, I my suggestion is that you spend a little bit of time looking at the communities, you understand the rules, especially if you're if you're posting to subreddits, right, they all sort of have their own moderators have their own rules, understand the best way to talk to these communities. And if it's a community that's known for being helpful, ask for advice, ask for feedback. If you're not part of these communities, I'd reach out to someone who is and ask them for advice, ask them for the best way to launch because there are going to be tips for every community. And you know, for example, one company in this batch, you know, was building something that he wanted to get more, you know, women's perspectives on and they're, you know, two male founders and one of the users of Alpha, which is a community for women in tech said, hey, I'll post that to you know, for to help for you. And I'll tell you what kind of feedback they got. So I recommend like connecting with someone in the community and asking them for help if you're not part of the community yourself. The biggest piece of advice I have for launching on online communities is write like you talk. Do not talk like a marketing robot. People hate that. So don't use marketing language or deep jargon. Talk like a human when you're when you're addressing the community. So all you need in these, you know, when you introduce yourself in these posts, introduce yourself, talk about what you're building, talk briefly about why you're doing it or how you came across the problem. People on Hacker News, for example, are super intellectually curious. So are there any interesting insights that you've learned from talking to potential users or your users? Is there anything surprising or delightful that you could share with the community because people love that. And they also want to ask you questions, but sometimes don't know exactly how or which questions they should ask you. So tee it up for them. Say, hey, I'm an expert in X, Y and Z and I'm happy to answer questions on these topics. Otherwise, you risk people going down all sorts of weird rabbit holes. But so and just make sure like that you sort of are sharing this community asking and asking them for advice. Try to cut down as much of the jargon and marketing as possible out of these pitches. The request for access launch. The magic story that that I shared with you actually reminded me of this other type of launch you can do. So when magic launched, you know, overnight, they got 40,000 people signing up. And of course, they couldn't serve 40,000 users immediately. So they launched a waitlist. And they also gave people ways to skip the line. So for example, if you tweeted about magic, you'd get you know, to skip a few spots in line. So you can build these viral elements into your launches that will help get people to spread the word for you. One of my current favorite examples of this request for access launch is superhuman. So superhuman is building a better email experience. So you can go to their site here and request access. And you can also ask a current user to refer you and then that'll help you skip the line. So in the signature of all emails that are sent by superhuman users is a little tag that says sent by superhuman. And so I'm a superhuman user and I get a ton of emails like I'll send a ton out of my emails out to people. And I get a ton of emails asking me for referrals. You know, people I email say, Hey, how did you like superhuman? Would you mind referring to the product? So if you have a product that you can build this sort of viral element into, I highly recommend it. So we don't have a huge amount of time because obviously social media and launching to bloggers is huge, long and well covered topic. But I wanted to skim them briefly and give you an example of a company that we worked with that did it very well. As most of you know, launching to popular blogs that cover your industry or trade can be incredibly powerful. So joy is a free wedding website builder, and they were one of the fastest growing companies in their batch. And a lot of their early growth, like an alarming amount of their really early growth was due to being placed on a number of lists like this. They essentially Googled, they looked at, you know, SEO, and they Googled, you know, best wedding website builders and figured out who was coming up on you know, the first couple pages of results on Google. And they reached out to all those bloggers. And you know, they said, Hey, we have this new product. You know, we think your community would love it. Would you be willing to add us to this list? And they, you know, they said that they reached out and basically did a drip campaign to over 50 of, you know, 50 bloggers and only got responses from four, but those four responses made a huge impact for their early growth. And so one note that I want you to keep in mind is that some blogger and influencer opportunities are pay to play. And joy did not pay early on. And I do not want you paying early on either. If folks are asking you to pay, please find other or creative routes to get around this because as startups as early stage startups, you just don't have you don't have the money to do it. And so I'm saying it is definitely possible to go this route without paying a ton of money. So figure out, you know, wait routes around the expensive sort of sponsorship dollars. If you're a hardware or physical product, of course, you can do a preorder campaign. So, you know, at pairing for the order launch could honestly be a whole presentation of its own. But take a look at some successful campaigns and get a sense for how they built out their launch strategy. So for example, sheer text was a company in YC that was making unbreakable sheer pantyhose, the founder, Catherine made a great, really compelling video, she pitched press, she launched on Hacker News, where, you know, Hacker News is probably, you know, it's a very male audience. So we were curious how they would respond to something like sheer, you know, unbreakable pantyhose, but they loved it. They thought it was very clever. They thought, you know, that the technical piece behind it was really interesting. And, you know, so, so I would recommend like any company, you know, try to launch and see how different communities respond. She launched on Product Hunt, she asked her friends and family and batchmates and investors to help spread the word and she had an incredibly successful campaign. And so of course, there's the new feature or new product line launches. So two very different companies that do this incredibly well are Stripe and Glossier. So both companies are incredibly smart about how they launch new products. So Stripe has always been great from the very beginning, they've been really great at engaging the community. So every time they launch a product, so for example, when they launched Stripe Atlas, they launched it on Hacker News, and the founders were in the thread talking to all, you know, potential users and talking about the product and why they were launching it, the problems that they felt it was solving, they blogged about it, they spread the word on social media, they pitched press, and this is something that they do over and over again. If you look at Stripe's blog, if you look at Hacker News, you can kind of see the history. Since the beginning, they've been very great at sort of activating the community. Glossier, which is a beauty brand, is incredible at launching new product. And the way they think about it is actually very scientific. They release products at a on a very specific cadence at specific intervals. And for every product, they essentially hit every single launch button again and again. So community, social media, press, advertising. So each time this they, you know, this new product launches, which is basically like every six to eight weeks, they have this cycle going. So there's a constant drumbeat about Glossier out in, you know, out in the world. One last note before we jump into questions is while you're in startup school, you should start to build your own communities. And you this you can do this even really pre-product. So there was one YC founder, Gadi Evron, who is founder of Symmetria. And he had a really particularly successful TechCrunch launch. A TechCrunch launch is, you know, a story about what they were doing launched in TechCrunch. And I noticed that they had a ton of shares, a ton of engagement. So I asked him to share, how did you set this up? What did you do to share and spread the word about your launch? And he said that over the years, even before launching the product, he started to build his own email list. So every person he met that he discussed his startup with, even very loosely, he would add them to an email list. And they would get email updates about what he was working on at semi-regular intervals. So when the TechCrunch article came out, he said he sent that email to the list full of all the people that he'd ever talked to, other startup founders, investors, friends, family, and asked for their help in spreading the news. And he said the response was significant. And he even saw VCs who hadn't invested in them sharing the story from their own personal Twitter accounts. And he said, you would be really surprised by who comes out of the woodwork to help when you ask for it. So I would recommend, while you're in startup school, you have the opportunity to talk to so many people about what you're building and start and ask them, hey, can I add you to my update list? And over time, you'll get that into the hundreds, maybe even thousands. So I would definitely recommend that you start doing that now. And so to sum up, I want you to stop thinking about launching as this one moment in time. I don't want you to spend all of startup school getting ready for this one big day, this one big launch day that you're trying to line up all these things for. This is something that is a continuous process that you can do over the course of the next couple months and into the life cycle of your company. If you didn't catch them the first time, these are all the opportunities that we went over. And I'm cat, so if you ever have any questions, it's demo day is coming up, so I might be slightly slower than usual to respond. But you can always reach out to cat at Y Combinator, and I'm also on Twitter. OK. Thank you."
  },
  {
    "name_video": "All about pivoting",
    "description_video": "YC's Dalton Caldwell gives us the rundown on pivoting and shares his advice on how founders should think about it for their startups.",
    "related_categories": [
      "startup school",
      "Startup Ideas",
      "Product",
      "Building Product"
    ],
    "page_url": "/library/6p-all-about-pivoting",
    "youtube_url": "https://youtube.com/watch?v=8pNxKX1SUGE",
    "mp3_file": "downloaded/All_about_pivoting.mp3",
    "mp3_content": "How's everybody doing? I'm Dalton. I'm a partner at Y Combinator. In addition, I'm the head of admissions, which is our selection process for the companies that get into YC. I'm here to talk about pivoting. Yeah, let's talk all about pivoting. Cool. All right. Here's some stuff we're going to cover. What the heck is a pivot? Why you should pivot, when you should pivot, and evaluating ideas to pivot to. So we're going to try to cover all the bases here. All right. Let's talk about the term pivot. This is one of those terms that if I'm in a cafe and I hear someone talking about pivoting, I roll my eyes because it's one of those words that I associate with annoying startup people. And so let's just explain what we mean here. It just means changing your idea. That's all it means. And technically, if we want to be really technical, I would call a true pivot, where it's like a real company, and you have lots of users, and you've raised money, and you're like, we're going to shut this thing down and do something different. So the most famous example is Slack. They raised money and had like 100 employees for this video game called Glitch. I was a beta user. And then they one day just shut it down and did something crazy. I would call that a pivot. I think that's a valid use of it. Probably what most of the folks here are doing, I interchangeably call it pivoting, but you should just call it changing your idea. It should feel really lightweight. When you're at the earliest stages of your company, especially pre-launch or very near after launch, changing your ideas constantly is kind of the norm. And I wouldn't think that this is some huge thing. It should feel lightweight. And frankly, if you're not in a state where you're rapidly changing ideas or assumptions over and over and over again in quick succession, you are likely doing it wrong. You are likely moving too slow. And so this is just like part of it, change your idea constantly, trying to find exactly the right version of your idea is something you should be doing in the beginning. Let's talk about why you should pivot. So the main reason I would argue is opportunity cost. And the definition of opportunity cost is that the loss of potential gain from other alternatives where one alternative is chosen. So in other words, you can only really work on one thing at a time. Sometimes people try to violate that rule, but that's a whole different topic. And so by working on something that's not working and you have evidence that it's not working, you are taking opportunity costs to not be doing something else. It's as simple as that, right? I don't know. I tried to write some pseudocode here for you about, you know, it's a kind of a joke, but like how well things are working divided by the number of months of concerted full-time effort. If that number is less than excitement to work on something else plus confidence, you can find something better. You should pivot. And so the key thing to, if you like look at this equation, like, what am I really trying to say? It's that if you've worked on something for months and months and months and months and it's not happening, like that's a pretty good signal, right? Like that's what drives this equation that I put here the most is the number of months you worked on something and it's not working. And so if you're throwing good money after bad, good time after bad, and it's not happening for you, that is a pretty darn good signal. But if it's really, really, really early and you've only been working on something a couple of weeks, it's less obvious. Let's give you some good reasons to pivot. I hate working on it. It's not growing. It's just not working. I keep doing the thing and nothing is happening. I'm not a good fit to be working on this idea. Like the more you learn about this, the more you realize that you are just not the right person for the idea. Another one is I'm relying on an external factor outside of my control to make my startup take off. So a couple of examples of that are like relying on mainstream virtual reality headset adoption. That's a good one. You know, like any day now the new Facebook thing is going to take off and, you know, that's when my VR app is going to take off. Or like relying on like mainstream crypto adoption, things like that. Those are like totally out of your control. And if you're just sitting here hoping someone else does something good and then your startup will work, man, you should definitely pivot. Another one is just where you're out of ideas on how to make the thing work. You're just, you've thrown everything against the wall to make your current idea work and you're actually kind of out of ideas. That's usually a sign you should pivot. Good reasons to not pivot. You're trying to run away from doing hard work. Sometimes you see people where they build a product and right when it gets to sales time, they pivot and they do that over and over again. That's probably not a good reason to pivot. It's just someone trying to dodge the sales part. So watch out for that. Also, another reason not to pivot is if you're the type of person that changes their idea over and over and over and over again, like chronically, and you're detecting yourself doing that, it's good to actually follow something through all the way. So you just want to watch out for that happening. Also a good reason not to pivot is that like, you know, you just hear there's some hot new thing and you want to pivot because you read a TechCrunch article because someone raised money for a hot new thing. That's not a great reason to pivot. Let me give you some reasons on why people take too long to pivot. And the reason I mentioned this is I would argue on average, most people take too long to pivot, right? I think that's usually like if I had to put people in buckets, more people take too long than the reverse. And so why do they take too long? Loss aversion. When you feel like you've invested in something, you have a really hard time letting go to it. And that's loss aversion. You can research this. Have a little bit of traction. Like you have a few users or like one customer and you're like, maybe it'll work. That will make you not pivot. And that's rough. Another thing is like people are very polite in the world and they have a hard time telling you the truth that they don't like the thing that you're working on. And so a lot of founders get confused about politeness and getting that confused with traction. And so you're never going to really, I mean, maybe I shouldn't say never. Most likely you're not going to have people being like, your idea is horrible. Give up now. I will never be a customer. They're not going to tell you that to your face. They're going to be like, oh, this is great. Maybe if you add a few more features and come back, you know, we'll take a look at it, right? Oh, that's dangerous. Cause you can end up doing that iteratively over and over and over again for like years and never actually get customers. So watch out for politeness and getting the politeness confused with traction. Another one is a fear of admitting weakness or defeat. If you pivot, you're giving up in some way. Another one is putting blame on why things aren't working on customers or investors. So this is where you're like, I'm not wrong. The world is wrong. You know, like no one gets this. This is like way ahead of its time. Um, things like that are not a, not a great sign. Um, and usually people realize that maybe it is kind of on them versus on the external world, but it takes a long time to get there. And then finally, there's a lot of inspirational stuff out there that's just like, if you just believe hard enough and keep going, you know, the, you'll eventually be recognized and everything will be great. Um, and so there's a lot of those inspirational messages out there and that can kind of be counterproductive. I don't know. This is super legible, but basically this is where I talk about the little bit of traction thing. I call it the uncanny Valley of product market fit. Um, and you know, what's weird, I noticed as a YC, uh, as a YC partner, someone that gets into YC with a idea that's just a total fail, like immediately is actually the huge advantage than someone that has like a little bit of traction. Isn't that weird? Like a total fail. The founders can declare bankruptcy on the idea immediately and just work on other stuff with no regrets and no like second guessing. Oh, should I pivot? You know, they're like, wow, that was really bad. And having that freedom to immediately throw off the old idea and work on a new one is actually a weird advantage. Isn't that counterintuitive? And so you just want to really watch out for a little bit of traction because I've seen that be a trap that have capture a lot of really talented people for long periods of time. Um, and then let's just talk about the anecdotes. Um, so anecdotes about, you know, stories of people that just kept doing what they were doing and it didn't work. And then five years later, you know, it was great. I think those are cool and they're inspirational and I like them and I, they're all true. You know, they're anecdotes, but it's kind of like anecdotes about people that, you know, played the lottery every day for like five years and then they won the lottery and now they're like really happy and you know, that's super cool, but that is not actionable for you, right? There's nothing you can do with this anecdote about someone that like just kept believing strong enough. Um, like I would much rather give people advice to play the statistics of this and to take accountability for like their own actions in the world than just like hope and dream that you might be one of the anecdotes too. Um, and so if you decide to pivot or don't decide to pivot, just remember you decide it's your life and if it works out good or bad, that's on you. And so often I get founders that want to push this decision on me as a YC partner or other authority figures about is this idea working or not? When should I know when to give up? And ultimately all we can do is give you guidance, but this is exactly in the class of problems that is on the founder and never something you should look to an authority figure to tell you how to decide product market fit. I'm sure, you know, we're talking about this a lot. It's been discussed a lot in startup school and it's because it is so important. Most people will never get it. Probably most people watching this don't have it, even if they think they do. Um, and you know, you have it when growth is not your biggest problem. It's other stuff. And one good reason to pivot is you just get more shots on goal to try to get this elusive thing, right? Like if you made something and you launched it and it's like, man, not really working. Um, a dang good reason to pivot is you get another roll of the dice, you get another shot. And so I've just seen people that use these opportunities really well. It's much easier to be lucky when you get like half a dozen shots on goal than one, right? And so just if we're just playing the statistics of how do I get product market fit, taking several high quality shots, and as I say, high quality, you can't just constantly pivot through stuff and other launch it. But if you do a full awesome product iteration of making something, completing it, shipping it, giving it to people following all the device you're looking here and you can give yourself multiple of those shots. Um, I would argue you are creating luck for yourself and the odds that you actually hit something that works are much higher than someone that only ever takes one shot. Okay, let's talk about how to find a better idea. Um, here's the advice that I give people during the batch when they are looking for an idea to pivot to, um, find something that you're more excited about and that makes you more optimistic about the world and more just generally more excited to wake up in the morning and work on the thing. Um, and not less excited. And there's a corollary here. And this I think is counterintuitive. Often choosing what is perceived as a harder idea is more, uh, is, is good. And so I see a lot of people where they're like working on some like ad network ad tech thing to like affiliate something ad targeting. I don't know those like never work and it's because they're not inspirational and no one cares. And so when you see people go from that into something that's really, really exciting, right? Like, Oh, I want to help small business owners do X or I had a company in this last batch. Um, and they did, uh, they started with, um, this ad tech thing that they were all very bored with and they pivoted to Robin Hood for India. And the moment they pivoted to that, they, the founders, they were like, they lit up and every conversation I had with them, they were like so excited about their idea and it was contagious talking to them. Um, and it was almost like a different, like the amount of change, it was the same founders, but what changed is they found an idea that was real, that they were excited about and not just some like boring ad tech crap. No one cares about that stuff. Okay. So if you're doing something that seems like a good startup idea cause you read in tech crunch, people raise money for it, but it's not inspiring to you and you're like, man, this is pretty lame. Um, you probably want to find something that's more exciting to you. Another thing to do on a finding a better idea is make an honest assessment of what you're good and bad at. This is hard, but you want to be really self-aware of what you're good and bad at and play to those strengths. And another thing here for finding a good idea is especially if it's a pivot, find something that you can very quickly build and validate and not something that takes like a year or two of R and D right often. Like if you pivot from one thing that's impossible to ship into another thing that's impossible to ship, not good. Ideally you find something that's way easier to ship like really fast. Highly recommended. Quick note here, caveat, it's totally okay to work an idea where you're not going to raise venture capital. All good. Most businesses in the world don't require venture capital. And so all of your, if what you're doing is consuming lots of content on how to start a company like this and it's all kind of like venture capital focused stuff, um, and you're not going to do something that raises venture capital, you can kind of get blown off course for idea wise. And so, um, just be self-aware about this and realize that if you do want to raise venture capital, the idea does matter a lot. And there's a constant like recurring theme I see is people that are trying to raise money for something that is definitely not venture capital fundable and they get really frustrated. Everyone gets frustrated with that. It just, it doesn't make sense for all businesses. And so just be self-aware of this when you're choosing an idea of like, is this something that at least hypothetically is VC fundable? Just to give you some rule of thumb, well, what does that mean? Um, I don't think there's a guidebook for what venture scale means, but here's some rules of thumb. Can I imagine this business generating hundreds of millions or billions in net revenue per year? All right. That sounds venture capital fundable. Um, can I imagine the revenue growth to get to those numbers to happen in like less than 10 years or five years? Like can this happen really fast? Um, can I imagine this thing that I'm doing is a publicly traded company someday? Can I picture it? Can I visualize it? Um, Kevin's first lecture talks about this, but these are all things like if you just can't see any of these, that's not a great sign. And other key properties is usually technology is a key component. And usually the founders build the technology, at least in the early days for something to be VC fundable. Um, you want to see really high margins, not for everything, but again, just a rule of thumb, software margins, you know, 80% gross margins, 70% gross margins, really high margins as some of you would want to see. And then, um, just, it's funny, like I think a lot of people learn about fundraising from shark tank and I don't think a lot of that stuff is venture fundable. Just in case you were wondering. Um, it's, it's fundable for people that want to put product stuff together, but I don't know if, you know, I think you'd have a hard time raising money from venture capitalists for the majority of that stuff. But Hey, like I said earlier, it's your call, it's your, it's your dream. So figure it out. When's the best time to pivot? As soon as these things happen, you've launched and trying to get users for weeks or months and you feel hopeless. It feels hopeless. You should probably pivot when the idea is impossible to get started with. Like, cool. Once we raise a hundred million dollars, then we will build a prototype. You should definitely pivot if you're one of those people, because unless you have a hundred million dollars, you are in a chicken and egg unsolvable issue. Um, and here's another one, you know, when you're hurt, it's not going to work. A lot of founders know secretly that their thing isn't working, but they want to keep up this front to everyone in the world that it is working. And they think they can fool people into funding them or working with them. If you can't convince yourself and you know, this isn't really working, man, is that a good time to pivot? Right? Like, you know, more than anyone else about your business. You got to listen to yourself. And it's sometimes not stuff you want to hear from yourself. Um, okay. Let's talk about other epiphany stuff. If you pivot over and over again, it causes whiplash. Whiplash is very bad because it causes founders to give up and not want to work on this anymore. And that actually kills the company. Weirdly, it's more deadly to your company to get whiplash and get sad than to work on a bad idea. Because if you're having fun working on a bad idea, you won't give up. And then conceivably you can maybe make it work. If you get really sad and hate your life while you're working on your startup, you will definitely not succeed. And it's because you will give up. And so this is weird. Like, it's kind of better to work on an idea that's not the best one if you're really having fun. Um, and then you just want to be in a happy medium. Some founders pivot way too much and they'll probably watch this lecture and then like pivot once a day for six weeks. Don't do that. And some people just work on the same idea for five years and it's not working and they just are really obstinate about it. Just find the happy medium like everything else in life. Um, another thing is it's really hard to have employees and be pivoting. So don't do it. It just makes it slower and it makes them really sad. And so trying to scale up like a team and taking all the advice here about how to scale a team while you don't even know what your idea is or you think you're going to change your idea. Definitely not best practices. Um, it only slows you down. I would only add people to the team after you know your idea is working and you have confidence. Otherwise it's just all downside. Um, okay, let's go to a different thing here. I made this up for this lecture and I came up with a subjective notion of a quality score just to give you a few criteria to evaluate an idea. Okay? And so what I did is there's, you know, four key things that I think you could use to evaluate the quality of an idea and you could give them a one to 10 and you average those together to give an overall quality store. Okay? So let me just go into detail on these. How big of an idea it seems to be. And again, this is the stuff I talked about earlier. Is this an obvious publicly traded company? Like, um, I don't know, Tesla. Hey, it's a new car company. There's lots of publicly traded car companies that seems pretty big. A new bank. There's lots of banks that are publicly traded. That seems pretty big. Uh, the opposite of the spectrum is like, I don't know a French subway. I'm gonna buy a subway franchise. You know, you know, that's it. That's the other end of the spectrum or like, oh, I'm gonna import some stuff and sell it on eBay, you know, probably a little, little less obvious how it's big. The cycle and founder market fit is really, really key. So again, a 10 out of 10 would be, hey, I was on the self driving car team when I was an undergrad and then I worked on self driving cars my whole career. And so now I'm gonna do a self driving car startup. Yeah, that's a 10 out of 10. A zero out of 10 is like, I'm gonna do some kind of advanced AI startup and I don't know how to program. That's a zero out of 10 right there. Don't recommend that. How easy is it to get started on the idea is actually, I think, undersold. I don't know if people realize this is actually really key, is ideas that are easy to start are highly recommended. And there's so many really good ideas out there that never work because the founders can't figure out how to get started. And then someone in the future does the same idea and has a much better way to get started. And then they win. And then people get bitter because they're like, I had that idea. So I would argue finding an idea that's easy to get started with is just as important as the idea itself. And finally, early market feedback from customers. This just means do people just want it immediately in a sales straightforward or is it just impossible? So let me give you some examples of companies that I worked with and advised at YC that you may or may not have heard of. Brex is one. They're in YC1 or 17. And I funded them to do a different idea and talk to them a lot during their pivot. And they pivoted during the batch and they got product market fit pretty quickly. And they have now raised hundreds of millions and worth billions in two years. So it's like one of those rare outlier stories. I'm not saying this is common, but holy cow, I got a front row seat to watching kind of the most epic pivot of all time, I think. Maybe there's other ones, but I was like, wow, that really worked. So let's talk about the before and after. Before was what they started with. They had this idea for a new VR hardware headset that you would use to do work or something. And so here's the scores I just put in and I put these in now. I didn't do these at the time, but how big does it seem? Yeah, it seems like medium big, like VR headsets. There's no publicly traded ones, but that seems like the future. Founder market fit, I gave a one out of 10. These guys knew nothing about hardware or optics or any of the things associated. They were just fintech software folks. So they had literally no idea what they were doing and they were very upfront about that. How easy it was to get started. That's only a two. And the reason is they had to hire hardware people to build a prototype, not a good sign. They needed millions of dollars to build a prototype, not a good sign. And it would take like years and years and years of manufacturing. So this was pretty bad. And then finally, early market feedback. They went and talked to people and they're like, do you want to use this? And no one wanted to use it. So this was bad. Okay. So overall score, two and a half out of 10. Okay. Postpivot credit card for startups. That seemed pretty big. There's tons of publicly traded comps of like fintech companies. You know, again, even in startup land, there's their square, their stripe. I mean, there's lots of examples of that. So I give that a 10 out of 10. I did at the time founder market fan 10 out of 10. Uh, I, the reason is they had started a fintech company earlier in Brazil and it was successful and they sold it for like 20 or $30 million. So they knew exactly what they were doing and they could write all the code themselves and they could ship it themselves. And they had all these existing relationships, man, is that such a better fit? Um, how easy it was to get started. I'm only giving this a three out of 10 cause they actually, it's hard to launch a new credit card product. This is one where if you don't have founder market fit, I would not necessarily try this at home. Um, there was something about the founder market fit that made it easy. And then finally the early market feedback, I'm giving eight out of 10 and it's because in the batch they were like, Hey, do you have a credit card? Do you want to be a customer? And people were like, yes. And that was a wholesale process. Like I witnessed it multiple times. So if, if that's your sales process, good, it's like a three Senate sales process. And people say, yes, that is good. Let's talk about retool. They're a winner 17 and they're a really good SAS company. And honestly, everyone should check it out and maybe use it. It's a tool to build internal tools. It's awesome. Um, I'm encouraging all the YC startups uses to build internal management pages. It's, it's actually like a really great product. So, um, that's what retool is. You should look at it. Pre pivot was Venmo for the UK. Um, how big it seems, seems pretty big. Like Venmo is big. Um, find a market fit three out of 10. They didn't really know anything about FinTech, but they managed to get a launch. There was something there. How easy it was to get started. I'm giving that a seven out of 10. It's because they already launched. They'd already had a bunch of users then. So that was pretty impressive. And you know, early market feedback though was only three out of 10. And the reason is no one wanted to pay and they were losing money on every transaction. So there's all these reasons this wasn't really working. And so they decided to pivot, even though this is an example of the insidious sort of traction, right? They had enough traction that it was like hard to decide to give up on this. Um, because they had users and it was like kind of working. Um, so that was a tricky one. Um, anyway, retool post pivot is the no code internal tools built builder. I think it seems like a 10 out of 10 because 80% of all software built is for internal consumption, not external consumption like a big companies. And so that seems like a big market to me. Found a market fit 10 out of 10. Uh, one of the founders had made something like this. It is college internship. And so he had a very good idea of what the product should be. Um, it had relevant to it. Um, it was easy to get started. They built it in two weeks and got their first customers. Great. And early market feedback, only give me a five out of 10 people were interested in it, but they weren't sure they wanted to trust some new startup to this thing. So if this one did not fly off the proverbial shelves, they managed to get some users, but it was not immediate, obvious product market fit. They had to build it out a bit. So that was a great pivot. Next we got magic. They were in winter of 15. Um, they pivoted during the batch and what's great about them is they built a profitable and sustainable company. Yay. I wish we all could do that. Right? Um, how did they do it? They started off with this idea for a blood pressure coach where there was an app and you enter your blood pressure and it would tell you how to lower your blood pressure. Um, uh, didn't seem like a huge idea. Uh, two out of 10 find a market fit. They didn't know anything about health whatsoever or much along those lines. So that's probably just a two out of 10. How easy was he to start at eight out of 10? Cause they built the app really quickly and they got users really quickly and they followed all the advice. Good for them. And then the early market feedback was like, not good. Everyone was really polite and no one used the dang thing. Like their usage was just horrible. So this one was, again, it was kind of obvious they should pivot. They realized it on their own pretty quickly. And then they built a bunch of prototypes. They actually built the magic prototype in a weekend. No joke. This is actually true. Uh, not an exaggeration. And they put it on hacker news and it went to number one and got like 2000 upvotes and it blew up overnight. I don't know if anyone remembers this thing, but it went like crazy viral. Um, and they got all this press. Like it was the most, it was an example of a shots on goal thing I was talking about earlier where they didn't know it. Like they, they had like five ideas and there's no way I would have known or they would have known that this would be the thing that would capture the world's imagination, but it did. Um, and so not obvious founder market fit on this one either, but it was very easy to get started. It got really good early market feedback and it seems pretty big. Um, so that was great. It also inadvertently caught, uh, inspired tons and tons of clones. So I would argue that anyone that's doing chat bot stuff, it's sort of like a direct descendant about when this thing blew up and everyone was like, Oh, chat bots with the future, uh, was sort of like second order effects from this going so crazy viral and inspiring so many people segment there in YC summer 11. Um, they pivoted a bunch of times, including years after the batch. It took them a really long time to get it going. They didn't even pivot during the batch and now they're worth billions and it's a really good company. Um, it's a top data infrastructure company. So pre pivot, they had this thing that was a classroom feedback tool where like you would give it to students in a classroom and they could say if it was, if they were lost or not, I think was what the feature was. Um, so if you were confused, you would like push a button and it would tell the professor, okay, didn't seem huge. Um, in my opinion, find a market fit. Well, they were students and they were young. So I would give that like a five out of ten. They weren't experts on education, but they understood the audience. Um, it was easy to get started. They built a really fast and the early market feedback was actually decent where professors liked it and they got a bunch of schools to adopt this thing. So their sales were successful, but ultimately this was not, you know, it took them on the order of years to discard this one. Um, and yeah, this was, it's good that they pivoted because now they're doing segment again, which everyone should use. Uh, it's a data collection tool. That one did not seem obviously big. Have you, anyone here use segment? It's this javascript thing you put on your page and it connects to other tools. It was less obvious how that would be a publicly traded company at the time. Um, but the final market fit was great because they built so much analytic stuff. They were world experts on analytics already when they built it. Um, it was easy to get started because they literally built this thing and open sourced it and gave it away for free and people begged for them to support it. Like the market begged for this product to exist. They didn't think this was the company. They just had this like thing on get hub and so many people were obsessed with this thing that they built. They were like, well, I guess the market's telling us we should make this the company and they did it. So that I would say is a easy to get started and really good market feedback. You know, with the markets begging for something and that you don't even think it's good enough to convince you it's good. That's a pretty good sign. Um, and so that was a good pivot. Okay. In summary, I tried to give you those examples just to give you real, real, real life examples of stuff that I personally worked on just to show like the before and after and how these decisions are really made. And so change your idea is part of a startup. The sooner the better. Um, because of the opportunity costs and the shots on goal type of stuff. And when you're considering change your idea, especially the early stages, it shouldn't feel like a big deal. You should probably do it all the time and following best practices is recommended. Hopefully I gave you some good pointers on what those best practices are, but if you're really scientific about this, you can dramatically increase the odds that your startup will work. Great. That's it for me. Thanks. Transcribed by https://otter.ai"
  },
  {
    "name_video": "Growth for startups",
    "description_video": "YC's Gustaf Alstromer talks about how to measure product market fit, how to decide on a growth channel, metrics that lie about PMF and other mechanics of growth for startups.",
    "related_categories": [
      "startup school",
      "Growth",
      "Product",
      "Building Product"
    ],
    "page_url": "/library/6k-growth-for-startups",
    "youtube_url": "https://youtube.com/watch?v=6lY9CYIY4pQ",
    "mp3_file": "downloaded/Growth_for_startups.mp3",
    "mp3_content": "My name is Gustav, I'm going to give a talk on growth for startups. This is going to be for some of you guys, not super relevant right now, because you might not have launched, and thinking too much about growth when you haven't launched isn't that relevant. But for those of you that have launched, this is hopefully going to be a good talk. So I'm going to cover three different things today. First I'm going to talk about product market fit and retention. The reason that that relates to growth so much is because working on growth before you have product market fit and good retention is not a good idea. The second thing I'm going to talk about is growth channels and tactics. These things definitely apply after you have launched, and often after you have a good product market fit. You've found something that people really want, and then you want to scale it up to the larger world. And lastly, I want to talk about how you make decisions. When you have several people on your team, you want to start redoing things, and you're not really sure exactly if you're making the right decisions or not. And these are also things that apply when you're a little bit bigger. So my background, I learned most of these things I'm going to talk about at Airbnb. I worked on the growth team for almost five years, from where we're two people until we're over 100 people on that team. This is the team back in 2015. Most of the lessons I'll talk to today are things I learned there. Most of you are going to be somewhere on this line. Most startups don't have product market fit. Developers tell themselves that they do, and they try to convince themselves that this is working. But the truth is, for most companies, it's not working. So that means you're going to be somewhere on this line. People also have this idea that if I launch my product, it will work. Somehow it's going to work if I just tell the world that I built my product and it's not now there. Now, unfortunately, that's not the case. The world is a really busy place, and there isn't really lots of people waiting for you to launch your product. They're not standing there, and they're not going to try it the moment you launch it. That is unfortunately not the truth. And for many people who have never thought of these questions before of how do I reach the world, this actually comes as a surprise. People have been used to working in big companies where this is not a problem. People have been used to going to school or other areas where this is just not a problem. In this case, when you launch a startup, it's all down to you, and it is going to be a problem in the very, very early days. There's a great article that I recommend for you guys to read on this. This is called Doing Things That Don't Scale by Paul Graham. He wrote that six years ago. It is about the early days of the Airbnb story. And the thing that's really important about this is as a founder, you need to keep two different skill sets in mind as your company grows. In the beginning of your company, you're going to do a lot of things that don't feel right. They don't feel natural to you because it's not the kind of thing that you learned in your previous jobs or in school. It's just the most kind of physical or real things that you have to do that aren't going to be relevant later on. But later on, as your company grows bigger, you're going to be doing a lot of things that are things that relate directly to software and are things that scale your company. So these are two skill sets that you have to keep in mind at the same time. In YC, we have this thing where we tell companies that, you just launched, you got to do things that don't scale. And we got lots of these MBAs that went to school and said, well, this idea does not scale. Standing outside of this store or standing in this elevator to sell people something, that certainly doesn't scale. Correct. That does not scale. But that is where everyone needs to start. And if you went to school and you learned they should only work on things that really scale, you're going to have to unlearn that skill. Because when you start your company, the most important thing is going to do things that don't scale. So get comfortable with that idea. This is the early days of Airbnb. So this is sometimes in 2009. They were just a few people. The article I mentioned earlier, doing things that don't scale, tells the story of the first year or two of Airbnb. When the founders came to YC, they had spent almost a year trying to get Airbnb off the ground. It didn't really work. This was the first version of the Airbnb website, airbedandbreakfast.com. In fact, the website itself didn't really speak to what the company does. It was started as a website to offer air mattresses to people that visited design conferences. And they had to navigate the way to find the place where Airbnb is today. When Airbnb joined YC, the first question they got from Paul Graham was, who are your users? At the time, the site looks something like this. You click on a listing, and you have three different pieces of information. You had a photo of the host. You have one photo, in this case, of the building from the outside. And then you have one map of where that place was. Now at the time, the only comparison to what a site like this would look like would be Craigslist. So Craigslist wasn't a lot better than this. So at least it met that criteria. But it wasn't something that would make Airbnb take off. They didn't really have in the product what would make Airbnb take off. The things that were missing is, is this a good listing? How does this listing actually look like? Can I trust the host? Lots of things that were missing in that early product. And how do you learn that? The way they learned that is they went and talked to their host. On their first week in YC, Paul Graham told the founders of Airbnb, you guys go and meet your host. Where are your hosts? Most of our hosts are in New York. We don't have that many, but most of them are in New York. So they flew to New York, undercover, not undercover. They claimed to be hired photographers for Airbnb, Airbnb Breakfast. So when they met with all the hosts, they said, we're going to come by your home and take photos. Didn't say that they were the founders because that made the company sound much smaller. They came and met with a host. And while one of the founders were taking the photos of the listings to make this look a lot better, the other founders sat down with the host and asked them questions about how, what are the challenges you're having with the product? Like what are the things that are not working? Can you show me how you use the product? And by doing that, they got for the first time to meet the people that were the customers, which they really haven't done before. And they got to see how they use the products. That's doing things that don't scale, and that is nothing that scales. You can't go and fly to meet every single one of your customers, but when you start doing that, you will learn things that you can't learn sitting in front of a computer. So they learned that this payouts thing didn't work, or there was a big UI bug on this page, or it didn't work on an Internet Explorer well. All these things that you can't learn sitting in front of a computer. They went back to San Francisco, back to Y Combinator, and they sent an email the morning after and said, here are all the photos we took of your house. They're now up on airbnb.com. And by the way, we fixed half of the bugs that you emailed us about, or we fixed the bug that you told us about yesterday. That made the hosts love them, and those hosts became the reason Airbnb eventually took off. Like doing things that don't scale, fixing the product, making the product work for the early hosts, which became the backbones of the early days of Airbnb. So the lesson here is that founders are the ones who make startups take off. The founders, you guys, are the ones who make the startups take off. You're going to have to do unconventional things, you're going to have to do things that don't feel right, certainly going to do things that you didn't learn in business school, and you're just going to do the things that are needed. And this is basically what the YC batch is about. When someone joins YC, we're going to be like, you're going to launch, because that's the most important thing you can do right now. Once you've launched, it's like, how do I get users? You got to figure out how to do it. And it's different for every company. For many other companies, that means sales. For other companies, that means doing things that don't scale. Usually people start with their friends, and then friends of friends, and then hopefully you get one step further, the people that are now not your friends of friends, and they're going to give you a true opinion by a company. Those are the people you're going to have to reach early on. It doesn't really start with like, I launched my website and I put up Google Ads, or I launched my website, and somehow it's being discovered. That's not how companies get started. That's how they end up much later, but that's not how they get started. There's only one way to grow when you're really small, and that is doing things that don't scale. Alright, next topic. I'm going to talk about product-market fit. This is a terminology that probably most of you have heard of. This is a thing that's been hard to measure, or hard for people to say, do I have product-market fit or not? A lot of people like to tell themselves that they do have product-market fit. It's this thing that we throw around as a way to say, my product is great, so now I have product-market fit. I would argue that there are some ways that you can measure product-market fit, and there are many ways that you can't, so let's talk about the one thing that I think is the best way to do that. I think that the best way to figure out if product-market fit is to use data, unbiased data, to understand if you basically have made something that people want. The two ways that I do that, or I start that, the first way is I try to figure out what is the metric, the data point, that represents the value of your company. That's the first thing I do. The second thing I do is try to figure out how often should I really be doing that? A great example might be startup school. The metric here is like, are people showing up to the video talks at startup school? How often is that? It's every week. All right, that's pretty easy, but most companies can be defined this way. Let's give some example. So Airbnb, what is the metric that represents the value? Well, it's the bookings and the stays. It's not the searches. Search is not that. It's going to be the bookings and the stay. When I travel Airbnb, I've experienced the value. So now I know what Airbnb is about. How often do people do this? Well, travel is actually mostly an annual thing. You don't really travel every month. Most people don't do that. So when we were measuring retention at Airbnb, we're looking at annual. Let's look at Instagram. What's the expected use case of Instagram? It's basically just coming back to Instagram. Most people are not expected to post photos every day. It's just going to be coming back to Instagram and viewing photos. That's what most people do. And that's fine. That's actually what they want. They want some people to post photos sometimes, but most of the time just coming back is good enough. How often? Probably every day. Let's think of a B2B company, Gusto. So for Gusto, the most valuable thing that they do for their customers is they run payroll. And they pay out money to employees that are the employees of Gusto's customers. So how often do you run payroll? Well, it depends. Probably bi-weekly or monthly. And by measuring these two things, how many people are running payroll and are they continually running payroll with me, that's probably the best way to figure out if people enjoy using Gusto if they're going to switch to some other payroll provider. And finally, Lyft. You might want to think it's rides here, that rides is the best metric here. It's actually riders. The people that are taking the rides are the ones that matter because it's the individuals that we want to measure here and we not necessarily want to measure the action that they take. And that's probably weekly or monthly. So now we have these two metrics, we have a bunch of examples of those companies. Let's put them on a graph. One piece on the graph is going to be the metric and the other one is going to be the time window. So every single time window, we can put some percentage of those people on the graph. So let's give an example. On week zero, in the case of Lyft, you had 100% drivers. So what do I mean by that? I basically mean that if I had 10 riders this week that rode with Lyft, they will be calculated on the week zero. Now how many of the riders that I had last week are now traveling with Lyft this week? That is your week one number and the week two number and the week three number. Now why is this important? Because we're trying to measure repeat usage. Repeat usage is the best, most unbiased way to figure out if someone is liking your product. It's more true than what they tell you. They might tell you things, but what they do is going to be the most important thing. So most companies are going to be defined this way. Even if you have a B2B company that do annual contracts, measuring, say, what do people do with my product could be a really good way on this regular basis. Even if I would pay for Gusto on an annual basis, which they don't do, measuring the activity I use on Gusto on a regular basis, let's say bi-weekly or monthly, is the way to figure out if people are actually using the product. So most of the ideas, even your B2B or consumers, could be plotted on this line. Now why is this important? Well, if you're ever going to raise money, this is a graph that investors are going to ask for. How much retention do you have? Are people actually repetitively using your product? Those are the things they're really curious about because they know there are other metrics that you might have that don't matter. This is a sign of a bad product. Basically every single week after I started using this product, fewer and fewer and fewer people continue to come back and use the product. So this graph can be plotted and basically show that this wasn't a good product. This, however, is a good product. Every week, it eventually flattens out and the people that stop using the product stop using the product. And eventually here, week eight, nine, ten, we have a flat line of people that continue to use the product every single week. That means that they are retained. You have product market fit for those users for this product. So I'm not going to ask you these questions, but here are two examples of two companies that I would argue have product market fit. The first one here has 30% after two months and 21% after 20 months. This is pretty good. So you kept 50 users 21 months later or 20 months later. DoorDash. DoorDash have a monthly retention of 20% two years later, a year and a half later. Here's another company, more like a B2B company. So 80% retention after one month and then 30% after 60 months. This is really good. This is a really good product. Very sticky. People like this product and they don't stop using it. It's GitHub. So retention is the best way to measure product market fit. Let's talk about specific things you might want to, that some people think is a better way. I'll argue that they're not. So here's some worse ways to measure product market fits. Net promoter score. Why is it not good? Well, you can just Google the best products and best companies in the world. They all have bad net promoter score. Like the iPhone, Apple, all of them have bad net promoter scores. It doesn't necessarily correlate with good products, it correlates with perceptions of companies. Surveys. The problem with surveys is they are going to be biased. So if you ask your users, you're going to have some level of bias. There are good ways to use surveys to improve your products, but it's not going to be the best way to figure out this metric. There is one cool question you can ask a user, which is, how would you feel if you can no longer use this product? Sometimes this works. We can give you an idea, but I wouldn't do it instead of retention. I would always try to find a way to measure retention. Alright, so what are some bad metrics for product-market fit? These are not the kind of things you want to throw around as evidence for your product is working. Registered users, really bad. Does not say anything about repeat usage or if they liked you or not. Visitors, also bad. Does not say anything about whether your product is going to be valuable. Conversion rate. We have this conversion rate of visitors to something else. Well, that doesn't really say much because you don't know what people you're converting. You don't know who they are. So this does not say much about product-market fit either. And finally, something that should be a paid product you're giving away for free is not a good sign of product-market fit. You want to figure out if people are willing to pay for it because price. If someone says, I love this if it's free, but if it costs money, I'm not going to use it. That's pretty bad. It's not going to work out for you. So you want to make sure that the people that are doing something like this on this graph, if it's expected that you pay for a product, they should be paying for the product. All right, next section, let's talk about growth channels and tactics. This section really applies if you have product-market fit. If most of the people that come to your product go down the drain right away and they never come back, this section doesn't matter. Why would you work on trying to get more people to a product that no one is using your product anyway? If most people are just churning and they try it once and then they don't come back, don't work at this stuff. Don't compete with this stuff until you have some people that care about your product. You can try to use some of these channels to reach those people specifically. There's really two ways that you can grow at scale. So when I looked at that team, the photo of the Airbnb team, they worked on two things. They either worked on what I call product growth or conversion rate optimization. What this means is you have typically engineers, designers, data scientists, product managers, working on improving specific parts of your product to get more people through that funnel. It's a good example, I'm going to give you some example in a second, but that's basically why I defined it as the first section. Most of those people in that photo were in this category. They were engineers, designers, product managers, and data scientists. The second group is what I call growth channels. Growth channels is basically platforms in the world that people tend to discover products on. Let me give you some specific examples. Google. It's a huge platform for new products to be discovered. Anything that you want to use that is a rare behavior in your life, Google. That's what you do. Insurance. I'm going to figure out the insurance. Google. I'm going to find a doctor, Google. Everything you do rarely is going to be Google, which means lots of products are being discovered on Google. Growth channels like Google is an extremely important one for many companies. Another one might be Facebook and Instagram. Advertising on Facebook and Instagram is critical to companies' growth these days. What I mean by growth channels is basically other platforms but your website or your app. Let's talk about conversion rate optimization. What does it mean? Every single step of your product experience is a funnel that, like the retention curve, can be measured. You can have a metric. I think Ilya talked about this in his earlier Startup School talk when he built funnels. If you put a metric on every single page in your product, you will know what percent of people that make it from the first page, let's say the homepage, to the booking page. In the case of Airbnb, we call the homepage P1, the search results page P2, and then the booking page, and the listing page P3, and then the booking page was P4. Four pages. That was the entire website. Now, what's the funnel? What percent of people make it from P1 to P4? What percent? Not that many. One percent. Two percent. Most people don't make it that far. Your job is to figure out how many people make it that far. Why are they dropping off? What can I do to increase that number? That's basically multiple teams or multiple people at startups that work on those things. Every single step in that funnel is going to have some kind of drop-off for some reason. They might be that the content on the page is not suited for them. I land on Airbnb, all the content speaks to millennials. I have a family. It's not good content. I land on some other website, and the content doesn't speak to me because I'm not the right customer. That's one example of a drop-off that you can fix with changing the content. Another one might be I land on the website. It doesn't work because Internet Explorer is not optimized for that. It's not optimized for that. You're going to drop off, so you've got to fix that too. There are lots of different reasons people want to drop off. Here are some specific things that people tend to work on when they work on conversion rate optimization. Internationalization. If your website or your product is international, translating it, the product, is really a good idea. We saw that at Airbnb. I've seen that at Facebook. I've seen that at many other companies where translation is really, really important. Authentication. Most products have some flow where you're signing up. Now, that flow, probably your products too, have some kind of authentication flow. That flow is very critical, and the users are kind of vulnerable in that case because they don't really have time for too much friction. If it's not working perfect, they might just go to the next website. Make sure the authentication flow works really well. Look at the best websites in the world. Look at Pinterest. Look at Airbnb. Look at some of those sites. They have teams optimizing these flows, the authentication flow. Copy what they do. They'll probably figure it out. They spend a lot of time optimizing. Onboarding. This is a huge effort, specifically for products that need a lot of involvement from the users to be able to become active users. So, the lot of questions you might want to ask early on in a new product, the more you can onboard users by asking them questions that make the experience better, the more active and the more retained they will be. So onboarding, there are lots of things you can do. And finally, purchase conversion. When you're about to purchase, there are a lot of things around urgency and scarcity and just user flow and UI. All of these things matter, and that's another great example of conversion optimization. So let's talk about growth channels. So again, don't get here until you have some good sense that this is something people want. First one. Like I said earlier, if this is a rare behavior, most new ideas are rare behaviors, either because they don't exist yet or because they're not something you do every day. We tend to go to Google to learn about rare things that we don't do very often. So that's why, if that is the kind of product that you have, being on Google is going to be really important. It can be either on Google through paid marketing, through SEM, or through SEO. I'll talk about that in a second. Second, does your product already, do people already share your product through word of mouth? So some products are viral in its nature because they sound really exciting to talk about. Lyft and Uber and Airbnb are examples of those. If that's the case, you want to make sure you focus on virality and referrals. What does that mean? It means building into your product a flow that friends can tell other friends about the product. Referrals is a way that you can do that by giving some kind of financial incentive. Does the product get better if you have more users? Well, this is true for marketplaces, but it's specifically true for anything that's social. So if you think of a LinkedIn or a Facebook, then having more people on the product is going to make it better. So it's going to be really important for you to get more people, and those people on your site is going to be the ones doing it. So you want to figure out a good viral loop. So when you sign up to LinkedIn, the first thing they ask you is to invite more people. That's because your experience gets better when there are more people on LinkedIn. Now, many products do work this way, and this can be perfected, and the ones that really succeed in the world of a social product are the ones that really nail this down, that figure out how to do this really well. Many people that make social apps underestimate how important it's going to be to get your friends on that product. If you can make a list of all your customers, even if that list is 100,000 or 500,000, as long as it's not mainstream enough that it'll be in the tens of millions, you're probably going to do sales. You'll make that list, and you start counting on those people. Why make it any more complicated? Why go out and reach the world for people if there are only a few people that you really want to reach? So most companies in YC these days, I ask them this question, can you make a list of your customers? Yeah. All right. Make that list. Start listing them out. Who are the people? Decision makers in those companies you're trying to sell to. These people. Make the list. Email addresses. Phone numbers. Try to figure out how to reach them. But start by making the list. Don't make it complicated by going out in a world where most people aren't going to be relevant for your product. And finally, this is a channel that nowadays is bigger than it ever has been, and more important than it ever has been, which is if you look at how the entire world of startups has changed in the last 10 years, more and more of them are churning more money, and therefore getting what's called a high LTV, high lifetime value. By getting high lifetime value, you're enabling the ability to buy paid advertising. If you don't have people paying for your product or you're making money from your product, you should not be spending time on online marketing. Now the truth is that most companies these days are churning for the products, they are making money from the product, and therefore they spend money on online marketing. If that's true for you, this can be an extremely powerful channel. The biggest mistakes founders make is to start working on online marketing when they don't have people paying for the product. Here's an insight you probably didn't think of. Most really big companies didn't use all of those channels. They used one or two channels. Think of a TripAdvisor. How is TripAdvisor big? SEO. You guys type in something on Google, you land on TripAdvisor, and that's how you found this website. Most companies have a setup where there's going to be one or two channels that really matters. If you think of Pinterest, SEO is the real way how Pinterest is growing. You type something on Google, there already exists a Pinterest board for that, and you land on that Pinterest board. That's how they acquire new users. I'm going to give some specific tactical advice on some of these channels. The first one I want to talk about is referrals and virality. Referrals is word of mouth. If word of mouth is a strong driver of your product, then referrals is going to be one way that you can amplify that word of mouth. How do I define referrals? Financial incentive to tell your friends about the product. That's my definition. This is the Airbnb referral product. You give someone $40 to sign up to Airbnb, and when they do, I get $20. Pretty simple concept. We have that on the website and on the mobile app. Now, that's actually more complicated than you might think. This entire product funnel, where there's multiple steps in that funnel, I'm not going to go into detail here, but if you think of a referrals product, it's not just as simple as throwing that offer out. That's probably what you want to do in the very beginning, but once you have a referral product, you want to start measuring each of these steps. What is that referral offer? How many people go to that page? How many people send invites? How many of those invites are being clicked on? How many of those people sign up from those invites? How many of those people that sign up end up booking? Each one of those steps is a step in this funnel. Let's talk about one specific step, the referrals email invite. We would spend a lot of time optimizing this step because there were lots of people getting the referrals email invite at Airbnb. What are the things you can optimize on a referral invite email? First, who's the sender of the email? If it's just Airbnb, I've probably never heard of Airbnb for the first time I get this email. If it's Gustav that sends the email, and I send it to my friends, they haven't heard of me. That's the reason to open the email. Some people open the email. Clear value. What is this email about? Many emails just start with text. Don't start with text. Just have the clear value prop at the top. Why should I care about this email? In this case, it's extremely simple. Gustav sent you $40 for your first trip. That sounds good. What is that about? I'm going to read about it. When do I have to care about this? By this date in the next month. So I can't just leave this email and never open it again. I have to do it right now. What do I have to do here? Well, I could sign up, which is an undefined thing that you can do sometime in the future, or I can do what we did here, which is accept my invitation. This sounds more exclusive. It sounds like something that is just for me. It doesn't sound like something I can do anytime in the future. And finally, here's some social proof from this email. This is me. I live in San Francisco. We can reveal that. I've actually been a member of Airbnb since 2009, and we can reveal that as well. Let's talk about paid growth. Each of these sections, referrals, paid growth, SEO, could be a presentation on its own. So it's impossible for me to go into deep details on this, but if you're determined that you have product-market fit, you want to grow on one of these channels, and this is the channel you want to go deep on, you're going to have to go really deep on it, because being really good at one of these channels requires a lot of work. So there's lots and lots of stuff online about how to get really good at one of these channels. It doesn't really make sense to get good at all of them, because most of you won't really need all of them. The number one lesson in paid growth, i.e. online marketing, is to not do it unless you have revenue. This is the most common mistake that founders make, is to somehow start buying ads for products, and they'll never be able to pay them back. Don't do that. The next thing you want to figure out is what's called CAC, customer acquisition cost. How much does it cost to acquire a new paying or new valuable customer? Someone's giving you value back. Many of the advertising tools like Google and Facebook have a very clear system for how they calculate this, and once you start running ads, they'll start telling you what the cost is going to be. Next, it's going to be that your revenue, or projected revenue from this user, is going to have to be higher than the CAC. Higher than the cost. Very simple. Otherwise, you can't do this. So how do you know? This is the common question you get early on in paid marketing. Well, it seems like in eight months, it will be higher, but not in the first month. Well, you can't take all your money and spend on something that you have no clear certainty of is going to happen in the future. So you're going to have to either wait eight months, or you're going to look for early indicators that your hypothesis about the value is going to be stronger. The best thing startups can do is don't wait eight months. Just have a much lower target on what your CAC is going to be. Maybe one month, two months, three months, first transaction, something like that. That's a much better way to do it. The main channels for online marketing these days is going to be Google, Facebook, Instagram. That's pretty much it. Let's talk about search engine optimization. This has changed a lot in the last couple of years. It's very competitive. And what changed is there used to be millions of websites that each would rank for tens of millions of keywords. Now what I've changed is that the really big companies started getting really good at ranking for all those keywords. So a Pinterest or a TripAdvisor might rank for every single travel keyword that you can imagine. That's hard for small companies. What that means is that if you are going to rely on search engine optimization to grow, you're going to have to be as good as a Pinterest or a TripAdvisor eventually. Not right away, but eventually. Because it's so competitive to win in this large world of SEO. When you get started, you can think of it this way. SEO is a zero-sum game. Basically, you're competing against others. So what you do in SEO is going to matter. What do you compare to others? The second thing is that the keywords that people search for are changing constantly. So if you're building something new, let's say ASMR I think was a thing that came up recently, lots of companies are able to rank for that because it's a new keyword. There weren't websites built 10 years ago that ranked for that because the thing didn't really exist. Alright, let's talk about SEO, how it works on the technology side. This is the Airbnb search results page. This is what you and me see when we go to the Airbnb. This is what Google sees. Google just sees text. To be good at SEO, you need to understand what text am I showing to Google so Google can understand what the website is about. If Google can't understand what your site is about, it's not going to rank it. What are the two main levers for SEO? The first one is going to be things I do on my page. For example, what's the title of the page? Can Google read the page? Does the page throw errors? What specific keyword am I trying to rank my page for? Well, start with the keywords, do some research and see what are people searching for. How many people are searching for ASMR in the United States per month? Maybe I want to try to rank for that keyword. Well, build a website that's trying to rank for that keyword. Start with Google, don't start with your own content. You don't know exactly what people are searching for. You're going to start doing some research. The second thing is the thing you can't do that much about, which is called off-page optimization or domain authority or something like that, which basically means how valuable does Google perceive your website to be in the grand scheme of all websites? And the more inbound links you get from press, the more links you get from all kinds of people that have high authority, the more valuable your website will be in the eyes of Google, which means it will rank you higher on some of the keywords you're trying to rank for because it will compare you to other websites and see if they seem more or less authoritative. I'm going into details here, but that's basically how Google works. If you're curious about this, you can Google PageRank and go to the Wikipedia article on PageRank. Basically, it will explain sort of like high-level how Google works. Final section. I'm going to go through this one a little faster. Most of you guys don't have to focus on A-B testing at all. It won't matter for a long time. It is a great decision-making tool later on. Here's the situation that startups tend to get into. I want to launch a new homepage. I want to launch a new design. I did, and the numbers went down. What happened? It's a really hard problem to launch something new and then sort of like just look at the metric over time. Don't do that. There's a better way. First, before you get into that stage, you want to figure out, is A-B testing something I want to do? The best way to do that is to go to Google and type in A-B testing calculator. Think of the metrics that you're trying to change here, so like visitors to some conversion metric. Put them into the first link you see on Google, and that will tell you whether it's going to be worth doing. Most of you, it won't be worth doing for quite a while. Here's the example I'm trying to give you on the website. I want to ship a new experiment or a new design on the homepage. Let's ship it. The metric went up or the metric went down. Either way, I don't know if the website actually cost it or not. The only way for me to know if this new design actually changed the metric is if I had an alternative side of history, like two different parallel universes at the same time, one with the new design and one with the old design. If I had that, I can tell exactly what happened. That's the definition of A-B testing. You basically have two different parallel universes of the thing you shipped at the same time, and you measure the metrics that matter to you. The reason this is so powerful, it helps you make decisions at scale. What ends up happening, if founders, when they get five or ten people in the company, and they launch a new design, and they're arguing about what costs them. cost the thing to go up or go down. The only way to really know is to run an A-B test to figure out what does the metric say about whether it went up or down. This is hard to internalize because most people think of themselves as good product thinkers. So I'm gonna talk about one thing called experiment review. This is Airbnb. How many here think that you guys have good product instincts? Raise your hand. Yeah, you guys are founders. You should have good product instincts. All right, let's see how good they are. All right, so I'm gonna give you two examples. So at Airbnb, we launched a new sharing sheet for the mobile app. And this was the old version, which was the native share sheet that you've seen on iOS. You click on share, and then you see a bunch of sharing options. And then we just tried this new share sheet that showed more options. We call this the experiment, but it didn't really look native. So the question was, which one is better? Well, we didn't really know, so we launched an A-B test. We launched both of them at the same time for different users. The goal here was to measure number of shares. So, all right, how many here think that the control was better? How many people think that this experiment was better? How many people thought there was no difference? This is quite common. This is about 40% better for us. So thank God we ran experiments, because if this was the decision-making group, then we wouldn't have made the right decision. Next one. Should we have a sign-up wall in the app? Now, these are not necessarily learnings that you can apply to your companies right away, but it was an important decision for us to determine. So should we have people just open Airbnb app and go straight into the app? Or should we have an experiment where you can click out and X out the sign-up wall? Or should we have a sign-up wall that is a wall that you can't climb over? You have to sign up, otherwise you can't use the Airbnb app. Which one is better? How many here think that the control, no sign-up wall is better? Raise your hand. How many people thought that the experiment where you can X out and then sign up was better? How many people thought that just like this wall, you can't climb over, it was better? That's the fewest amount of people. All right, so this is a lot better. We got 2.6% more bookings from iOS by making people sign up through a sign-up wall in the app. Why is that? Well, we knew something about them, so we can show them more personalized stuff. And when they were about to book, we already had them signed up, so they didn't have to, at the time of booking, go through the motions of signing up. You wanna learn why it costs this. Whole point is basically, when you get big enough, when you're starting to grow and you have these decisions about, should I launch this thing or not, this is a really good way to do it. Product decisions are really hard, so using data to make them is a good way. Most of you won't have to worry about this for a while, so don't worry about it. Here's a summary of my talk today. Most of you need to do things that don't scale. You are not at the place where you can think about real growth things that growth teams do. So you have to unlearn the things you've learned at your big companies or in MBA programs and just do things that don't scale. Secondly, you wanna measure your attention to understand if you have product-market fit. There are other ways too, but that's the best way, in my opinion. And third, you wanna build a culture of experimentation. You wanna use data and not have the loudest voice in your room decide what the best decision is, but you wanna use data and experimentation to decide what is the best decision. It probably doesn't matter right now, but it will matter at some point. Thank you. егда"
  },
  {
    "name_video": "Dalton & Michael: Save your startup during an economic downturn",
    "description_video": "Dalton Caldwell and Michael Seibel discuss Paul Graham's essay \"Default Alive or Default Dead.\" They share strategies to cut your company's burn rate and keep your startup alive to see another day.",
    "related_categories": [
      "Finance",
      "Founder Psychology",
      "Decision Making",
      "Management",
      "Staying Alive"
    ],
    "page_url": "/library/Ed-dalton-michael-save-your-startup-during-an-economic-downturn",
    "youtube_url": "https://youtube.com/watch?v=0OVSTWozvfY",
    "mp3_file": "downloaded/Dalton_&_Michael:_Save_your_startup_during_an_economic_downturn.mp3",
    "mp3_content": "I remember we had this meeting with a lot of our employees and we were like, look, we got three options. We can die in two months, we can try to get to breakeven, or we can try to get this thing profitable. Hello, this is Michael Seibel with Dalton Caldwell, and today we're gonna talk about whether your startup is default alive or default dead. So this was a concept that was actually invented by one of the co-founders of YC, Paul Graham. Dalton, do you just wanna start by explaining what this means? Yeah, I mean, so to start with, you should read his blog post. It is excellent, it is short, it is easy to read. And so you should read it. But let me try to give you my crash course in it. Here's what he means by default alive, default dead. As founders, we like to ignore the truth a lot of the time. And one of those truths are, is my startup going to go out of business? It's kind of an awkward thing to talk about. You don't wanna bring that up in polite company. And so the point of default alive, default dead is it forces you to be honest with yourself. If I don't raise any more money, am I gonna die? Am I out of business? Or am I gonna make it? And default alive is different than profitable. Profitable means today I make enough money that I am profitable. My bank account grows every month. You so with me? Default alive means I may be burning money today, but my growth rate is high enough on revenue that I will become profitable before my bank account goes to zero. Does that make sense? And so if not a single other dollar of investor money comes into the business, my growth rate is high enough such that I don't have to lose sleep that I'm gonna have to raise around before I die. And his point is, this is a binary. Either you are default alive or you are not default alive, thus default dead. There's no third option here, friends. It forces you to pin yourself down in your own mind, right? Does that sound right to you, Michael? Did I get that right? You nailed it. And what's interesting is that another YC co-founder, Trevor Blackwell, basically made a calculator that allows you to calculate this, because I would argue it's easy to calculate, but it's just nice to have a tool there where you could just input some numbers and we'll make sure that's linked to as well. So I think that with this concept of default dead or default alive, what's so weird is how obvious it is. Like it's weirdly the kind of concept that like the entrepreneur who runs a barbershop will understand before a startup founder will, right? It's like, it's so logical. What do you think are some of the reasons why founders have a hard time understanding this is important math to do? Like what's distracting them from this truth? I think the context is that if you've raised some money, say you're a YC company, you raise money at Demo Day, the belief that you'll be able to raise more money, it's hard to not take that for granted. And you're like, yeah, yeah, yeah. But really, once you started raising money, you get hooked on it, you know? Like you get hooked on the juice, okay? And so the idea that maybe you won't be able to raise the next round or that it'll go harder than you want, to say that out loud is almost a showing. Like, it's like, you're not confident enough. Like, I think it's awkward to speak of these things with your co-founders, with whoever, because it's almost like, well, of course you can raise the next round. Like, of course, like we're gonna make it. And so I think it's that, man. I think, again, we both have founders. I don't think you wanna say this stuff out loud too much. It makes it sound like you're worried or scared. And you certainly would not wanna admit this to your investors. Well, I think that here's the tricky bit in my mind. Not only is it that, this idea of like, well, if we question our ability to raise the next round, are we not confident? Or are we gonna psych some people out on our team and make them not wanna work here? It's that plus raising the next round's harder. So you kinda get screwed both ways. Like, I think oftentimes founders believe that raising the next round's gonna be like the last round, even though they kind of understand that the next round, there's a smaller pool of people who can do it. They're investing more money. So logically, it should be harder, right? Like mathematically, there are fewer series A's than seed rounds and fewer series B's than series A's, right? And so, but I don't think they internalize that. And one of the things you talk about a lot in the YC Batch is this idea that startups are a series of mini games and the mini games change and get harder. I think people weirdly think that this fundraising mini game doesn't change, when of course it does, like of course. And sometimes it's easier when you have a great product and great design. Sometimes your next round is far easier to be clear. We're not saying it's always harder, but, and here's the big but, it's a moving target. And there's this thing called the economy. There's this thing called like investors who are people that are not within your control. We don't know interest rates. And so what you'll see is whenever there's like choppy waters, the default dead people that were banking on the next round being easy, die. Simple as that. And the companies that are default alive, when there's choppy waters, they live. And I think it's funny because I like your phrasing. We can't tell you whether it's gonna be harder or easier to raise your next round. We can just tell you it's probably gonna be different than the last one. So you should be planning for a wider range of possibilities than same as last time. And I think about this in terms of margin of error. Like last thing on this point. The margin of error when you're default alive is huge. You can go out and try to raise a round and fail and be fine. There's huge margin for error. And what's funny, I always talk about this. Imagine if TechCrunch wrote an article about every failed fundraise. It'd be, we're only reading about the successful one. There's lots of failed fundraisers, friends. Lots and lots and lots and lots of failed fundraisers. The majority, the vast majority. And so I think folks that are just reading TechCrunch think that most fundraisers succeed. So you're getting a really warped view. Bear with me. So most of them fail. Well, guess what? If you're default alive, all right. That's not good news that your fundraise failed, but you can live to fight another day. But if you're running your business tight where you have like three months of runway and you're banking that it's gonna work and you're running this thing super tight, what happens if your fundraise doesn't work is you die. I think about default alive, default dead is if you actually control, if you're actually in control of your company and not outside parties, i.e. investors, actually hold the key to your company. You're kind of working for your investors. They're actually your boss. When you're default alive, you're in control of everything, right? It's kind of awesome. It's a question of agency over the outcome. Well, and Dalton, we talk so much in the batch about leverage when it comes to fundraising. And when I think about being default alive, there's multiple levels of leverage. One is confidence, right? If you don't need a deal, man, you're gonna pitch better. Like that's the way life works. Like when you don't need something, you're way more convincing than when you're begging for something. And then two, leverage being the investor knows you don't need them. So not only is your pitch better, right? The investor knows your business is stronger and knows there's gonna be more competition to invest in your business. And therefore is gonna be more likely to want to invest in your business. So you get like double leverage. Whereas on the flip side, if you run your business default dead, you take two leverage hits. Like when you really think deep down, especially like you said, when you're on low runway, you're like, shit, if I don't thread this needle on this fundraiser, we're dead. A good investor can always tell whether the company's pitching them is gonna die. I'm about to die right now. Even if you want to invest, you offer worse terms or you put in sneaky, there's all sorts of sneaky things that investors can do. Yeah, not good stuff. And by the way, like I would argue that that's an investor being a good business person. If they have more leverage, they should get more positive terms. If you have more leverage, you should get more positive terms. So Michael, why is this the thing that so many investors don't like us as white seat partners telling white seat founders? Why do they hate when we say this stuff out loud so much? They're allergic to this advice. You know, I think that in general investors are allergic when we tell founders that there might be situations where their incentives and a founder's incentives are not aligned perfectly. It's yeah, it's like a magic trick. We're like telling people how the magic trick is performed. It's like a faux pas. They don't like it. Why do they always tell us to shut up when we tell people this? They always tell, and there's like, and I think it's also funny because they also always tell us like, hey, like we're funding your companies. Like you shouldn't be like, you know, like. Telling the founders not to have high burn. Yeah, exactly. Like I pat your back, you pat my back, you know. We're all in this together. And it's like, yeah, but man, we gotta put those founders first. And I think that like the other thing that's really tricky and we were talking about this earlier is that unfortunately founders get caught up with this math around default dead, default live because the math they use to pitch their company to investors is only a subset of the math they need to run their business. And I think this point is really tricky. Like when you're going in and pitching for a series A or a series B, so often, especially in a good economy, you're talking about top line revenue. You're talking about new accounts that you've opened. You're talking about your month over month growth. And oftentimes you're talking about your headcount, your hiring plan slash the execs you've brought on, so on and so forth. That's the math that you're putting front and center. That's the math that investors, especially in good times, over-focus on. Whereas I'd argue when you're running your company, those numbers are important, but there's also your burn rate, your retention, how much your existing customer accounts are expanding, your revenue expansion over time. Those metrics are the ones that can better help you when you're trying to figure out how to make sure my company stays alive. And I think this is where things are tricky, is that in many ways, investors are setting the agenda on what metrics are important for a company, and the investors are a little biased. Like they have a point of view that might be not oriented around keeping the company alive. And you know, PG talked about this, right? What was PG's line on this stuff? Yeah, he calls this in a blog post killer cure, where he just points out that a founder and investor have completely opposite incentives, where as an investor with a portfolio of companies, if you push them all to grow fast, and some of them successfully grow really fast with a high burn and thread the needle, and become Uber or whatever, and some of them completely explode, like fly the plane into the side of the mountain fast, and there's lots more fasts out there. It actually makes sense from a portfolio theory to advise people to do this, because either way, either it works great, or it dies and goes away, and you get to spend your time on something else. But like either way, it's explosive, right? It's explosive good, explosive bad. Well, and for a good fund, that time is the limiting factor, right? Not money. Yeah, and board seats, you're limited as a VC on how many boards you can sit on. And so you don't wanna sit, so basically, if you're a VC, and you sit on a board of a company that takes forever to get big, with like low burn, that's kind of boring and kind of bad for your career, and you look bad to your colleagues. Like there's all these dynamics that founders are not aware of. That's not a good move to be on several boards of companies doing just okay. Versus if you're a founder, and you're choosing between, do you want a zero? Literally zero, or do you wanna keep going and give yourself more time to figure out product market fit and maybe you can figure out an exit and make life changing money, that to a VC doesn't matter at all. Like man, that sure sounds like misaligned incentives, right, Michael? Massively so. Sometimes the investor in this equation is kind of is perceived by founders who haven't raised money yet as like demanding that the company grows, or demanding that the company burns a lot of money, as if they were the boss. And I think this is a very bad misconception. Like, I think that's extremely rare for an investor to be demanding you to like burn like crazy. I think that the horrible truth is that founders don't need much of a push. Oh, it's like how Michael, I hear you're demanding people to raise at high valuations. That's the rumor I've heard. Yes, exactly. Aren't you demanding? Why see founders do it? I'm twisting their arms to dilute less. I'm so powerful. I think this is the tricky bit is that like, deep down inside, every founder wants permission to blitzscale. And that they're special, and that they're gonna build the next big one. And so if you talk to, you know, half a dozen people, and one of them is like, yeah, I don't know, maybe you should grow faster. I don't know, maybe burn's not our biggest concern. Like that's actually the fly on the wall recording. I wish you could have a reply on the wall. It's like, yeah, you know, these numbers, I think you want to get these up, but I don't know if burn's my biggest concern. And then the founder hears that, and they're like, we're going. It's time. I knew it. What did Fast do? They raised a hundred million, and they burned it in 10 months. They got into a 10 million a month burn. That's incredible. I'm actually super impressed. You have to really try. You'd have to be working pretty hard on it. We would certainly need a lot of recruiters. Like you gotta hire a lot of people. Yeah, because like, what else are they spending money on? There's no inventory. Like if it was a hardware company, I'd understand, but there's no inventory. I assume they weren't getting offices. It was during COVID, right? So it's like, geez. I have no idea. I just, it's, that takes effort is my point. You don't just wake up one day with a 10 million a month burn, and be like, oh, you know, we're cutting free stacks. This spending is out of control on these stacks. We need to tighten our belts, friends. Tricky. So there's another concept in this default alive, default dead article that was linked to. It was another PGSA called the fatal pinch. I think it's so interesting because we see this in office hours so frequently. Like it is so common that we will talk to a founder who's in the fatal pinch and doesn't realize it. And it's funny because at the end of the batch, you tell everybody a very simple concept. It's basically stay lean until you have something and then spend money on growing it. Yet founders inevitably get frustrated, get tired, get distracted, and somehow always come to the conclusion that spending more money allows product market fit to happen faster. And what's sad is that like, probably at least for me, more than 50% of the time, I don't get the office hour before the founders decide to ratchet up the spend. Right? It's always when it's too late. They're like, yes. I always get the office hour when they're down the low runway and they're like, we're dead. We're bleeding out, you know, please help. And it's like, if you would talk to me six months earlier, we could have tied a tourniquet around your gaping leg wound and you'd be alive. Hell, we could have saved the leg. What's tricky is that if you find yourself even suspecting you could be in this situation, like you need to do this math as soon as humanly possible, right? Like you're probably too late to do this math in all cases. And no one wants to do it because it's too late because it's a buzzkill, man. No one, like who wants to be that guy? Everyone's going to be mad at you. Your investors are going to be like, oh, why are you bringing this stuff up? We need to focus on growth. Like I didn't, you know, like people will give you a hard time to bring this stuff up until it's too late. And then everyone's like, why didn't you bring this up earlier? To play devil's advocate though. Well, we have a bunch of great engineers, Dalton. We can always get AccuHired, right? Yeah. So we have the data here at YC, and I will not tell you that no acquisitions ever happen. But similarly, what I was saying earlier, where if you only read TechCrunch about the successful fundraisers, it gives you a warped perspective on how common they are successful and that most Series A fundraisers fail. Well, guess what? No one gets acquired effectively. There's an asterisk next to no one. The companies, of the companies that attempt, when they're lower on runway, they flew the plane into the side of the mountain. There's no acquisition coming, man. Like I'm sorry. Like maybe you could get lucky. Maybe you built a great team. Everyone says that. But again, like to keep picking on the fast thing, I think a firm paid them $0, I believe, to get all of their engineering talent. What would the incentive have been for a firm to pay any money for a company that's rapidly dying? There's no market for a company that's out of money, right? Anyone that's smart on the buy side knows that a company that is hemorrhaging cash will soon be bankrupt. Why would you want to buy that problem? You're almost worth less than nothing because you often have legal liability. And so no one wants to buy problems. And I think that that's so unfortunate because once again, if you're sitting at 12 or 18 months of runway, there is even flexibility on the acquisition front that doesn't exist when you're sitting at three to six months of runway. You can do all, all of the moves that you can do to rescue your company require time. So let's talk about that. Let's talk about the moves. What are some of the tough decisions that you might have to make if you find yourself default dead and you want to change that? Let's go through the list of pain. What's number one, Dalton? Well, for most folks, it's literally headcount. It's not office snacks. I'm sorry. That's probably not the thing that's, you know, perks are not bankrupting the company. It's that you hire too many folks. People are expensive. And this is 80%. Like I've just seen so many people's like burn spreadsheets. You know, you have to, that's always the thing. They want to be like, well, but we're very cheap or whatever. You know, they want to tell a story, but it's, it's people overhiring is the thing. And I think it's sad because no one likes letting people go. No one likes like, like, let's go letting good people go. Right. It's, it's horrible. So most founders, if they have to do this, we'll make sure that they get other jobs. We'll make sure that they, that they're well paid for. And the best thing is to never overhire to begin with. Like, like honestly, the hack, the actual hack is to not overhire. Because once we start having the, we overhire, now what do we do conversation? Let's not have that conversation. Like that's like too far. So the actual advice is don't make it a problem. And then you don't have to worry about how to fix it. The number two is ad spend. And man, we see this all the time. It's well, we have this top line goal we need to hit. ADK MRR. Right, Michael? We need to, we need to hit ADK MRR. We got to hit it. And so we got to spend this much money on ads. In fact, we have to spend more money on ads every month because we're growing because to hit our growth goals every month. Yeah. Unfortunately, the result of that is also that like our payback period for every customer that we're acquiring is either super long or long and growing. So our ad dollars are getting more ineffective as we are scaling them up. And we have to show growth because if we, if we stop increasing our ad spend, basically if we stop steering the plane into the mountain and putting the gas, we're like putting throttle in. If we don't do that, we won't raise. And so you'll talk to founders where they know the problem. They're like, yeah, yeah. We're in trouble. We need to raise. And we're like, well, maybe don't like, don't crash the plane into the mountain. And they're like, yeah, yeah, but you don't get it. If we don't put the throttle into this side of the mountain, we won't be able to raise. And it's like, these are the most frightening conversations. And I think what they, and what they don't want to do is take the L. Like they don't want to, they don't want to take the growth hit because they, the idea that maybe someone would fund them or maybe they could sell their company in some long shot scenario prevents them from not steering the company into the mountain, right? And I think this isn't talked about enough. Like many successful companies have had to take L's along the way. Like learning how to take a punch is not a bad thing. Losing face. No one cares. No one cares. Oh, you reduced your ad spend. Your growth evaporated, but you're around to live, to fight for another day. That's fine. And then the last one, and you brought this up in a previous conversation, it's raising prices. It's like, wow, well, the thing that we're selling now, money, this thing we're selling a lot of right now, we lose money every time we sell it. Maybe we could increase prices so that we are break even or we make a dollar every time you sell it. Oh no. That means we're going to sell it to fewer people. It's like, yes. So our plan is to sell a dollar for 99 cents and it's going well. And we're like, well, have you considered not losing money on every transaction? And they're like, absolutely not. How dare you even suggest that? You talk about this a lot. I think it exercises a different muscle in your customer's brain when they know they're getting a deal, right? It's like in some weird way, they're willing to use a product that's like they would never use in any other circumstance if they know they're getting a dollar worth of value for 75 cents. Well, and you see this in New York recently with the 10-minute delivery stuff. There was like eight of them and you could go get free. They all had coupons. So as a consumer, you could like get a lot of free stuff. And that was all VC subsidized. Every time that company is losing money, like every single time. It's a wealth transfer from investors to consumers. I actually appreciate that, you know. And to be clear, some of these companies may make it, there may be one or two. But my guess is the ones that make it are very, very, very smart about this stuff. I mean, as per DoorDash, who I guess we always talk about, but you know, they were good at numbers and they understood default alive, default dead, and they understood burn, like very sophisticated. And so even though they were flying the plane very close to the mountain, but they were also very aware of the mountain. They knew what they were doing. They were test pilots versus, hey, I don't know, like I read in TechCrunch that the more I burn, the more I raise. So I guess, do you see the difference, folks? Like doing high risk things when you're sophisticated and you know the risks is going to work out better for you than wishful thinking high risk takers. That never works. Not wishful. Yes. And so what's interesting here is this idea that, you know, I was thinking about this, taking one of these hits, right? Making a big hit to your growth rate in order to get to default alive. It sounds a lot like bankruptcy. It kind of sounds a little bit like personal bankruptcy where it's like you take a hit on your credit score to kind of clear your debts. And the benefit though is you clear your debt, like you are now living sustainably as opposed to unsustainably. Now here's why it's better than bankruptcy. I think in a traditional bankruptcy, it takes seven years for your credit to kind of get repaired. The startup world works a lot faster than that. So at any given time in your startup, you're being judged on the last six to 18 months. And so if you take this hit, you cut your revenue in half, but you get to default alive. And the result of that is you get to spend the next six to 18 months building a better product, getting closer to product market fit or getting product market fit. You're going to be judged on just that last six to 18 months. You're not going to be judged on when you had a horrible business that was burning more money than it was making structurally. And you're going to have a huge advantage. And what's tricky was like this was kind of our story at JustinTV and Twitch, like almost exactly like... Yeah, you had the choice. You looked into the precipice. You guys could have jumped in. You could have just let it go, right? You could have let it go. So, I mean, we had raised about $7 or $8 million. We had grown to about, I don't know, let's say like 30 million monthly people were watching content. We were making about $750,000 a month in revenue, but we were, we had a million dollars a month in expenses. We were burning $250,000 a month. And I swear to God, like the come to Jesus moment was with half a million bucks in the bank. And I always love this because like, you know, as YC founders, we don't talk about these mistakes and want to give you the impression that we didn't make them. Like we made this exact, like we were right there. That's what I love about investors is they're like, oh, I know everything. They taught me this at McKinsey and Harvard Business School. Like, no, that's what's nice about being former founders is yeah, man, we got all this shit wrong. Definitely. Plain, right towards the mountain, like straight on, like deep, deep mountain, not top mountain. And we, I remember we had this meeting with a lot of our employees and we were like, look, we got three options. We can die in two months. We can try to get to break even, or we can try to get this thing profitable. And I remember like I had to call this meeting and it was one of the most embarrassing things I've ever had to do up front because I'm just like, talk about admitting defeat. I'm like, here's the thing, we're going to die. We messed up. We blew it. Hey everybody. I'm bad at my job. Exactly. I'm raising my hand. I suck at this. Hey guys, I led us astray. And I remember thinking, and I think this is the silver lining, I remember thinking I have no idea whether everyone's just going to quit or whether they're going to rally. And everyone rallied and it shocked me. But then like I thought about it more and I was like, what kind of person joins a fucking startup, right? It's not the kind of person who's like, well, I don't see any risk here. Like this seems like smooth sailing all the way, right? These are very mature veterans. Absolutely not, right? So we selected for the right people on the pirate ship, right? Like the pirate ship, they knew they're on a pirate ship. And I remember everyone was like, we are going to get this thing profitable. We had to do some bad stuff. We definitely had to let go of some people. Our version of raising prices, we had to put ads on everything. Like we put pre-roll video ads on anything that moved. I remember it was, we had this, we literally had this easel with a big piece of paper on it. And I was like, on this side, we're going to write down everything we can do to cut costs. On this side, we're going to write down everything we can do to rake more money. And we're not going to leave this shitty little conference room until there's a hundred thousand dollars of revenue somehow, of profit here. And what's crazy is that we had that meeting in August, by October, we were breakeven. By the end of December, we had generated $1.2 million in profit and we saved the company. And I remember the feeling of not needing VCs anymore. And let's be clear, that's not the last time we pitched VCs, but just, it was the last time that I feel, well, it wasn't the last time. There was a nice little window where for a second, we didn't need VCs to like us in order for our business to be alive. And like- And what's funny, man, is that was the moment you were actually tested. And you guys, like you and your co-founder, like that was it. In hindsight, you guys had a choice and you did, you took the L, you took the hard, but now here you are. And that was like really smart. And we just see so many folks that don't do it. They have that, it's like sitting there in front of them, the hard move and they don't do it for whatever reason. Well, and what's crazy is the idea for Twitch happened after that. And like, it makes sense in hindsight, why? Like we were, if you're not just freaked out about dying all the time, maybe you can apply your brain to like how to make this thing work. I think sometimes it's okay to do a startup bankruptcy. Like sometimes it's okay to take that L, get to sustainable and figure shit out. And- Especially if you've raised, like you see people that raise and again, like, let's keep picking on fast. Like they could have just not spent the money. No one forced them to. 10 months in, they could have stopped spending the money and they'd still have a ton of money. Yeah. And so there's some amount of like playing along, like there's some amount of like founder choosing making a proactive choice to not course correct because they believe the fundraising to come in. And again, this is the point of PG's blog post, which is don't do that. And sometimes, this is what happened to my startup. And this is what happens to the delivery ones is you have contractual, like lease obligations kill people. I had deals with the music industry and there was nothing, literally nothing I could do about that. And that sucked, you know? And so to the extent you have a startup that doesn't have contractual requirements to burn lots of money, like WeWork or something, you know, I'd recommend not starting one of those. But if you're in one, you should be really careful of this stuff. Yes. Well, by the way, venture debt is similar, right? We're like, damn, like right when you're hurting, you got to start paying more money out. And they can repossess the company. Very, very similar. Yeah. So what's the big takeaway here? I think the takeaway is one, before you thrive, you have to survive. And sometimes you're within, you know, sometimes you're going to hit product market fit in the first 18 months of your company. Sometimes you're not. And if you're running your company default to live, you're giving yourself enough time to figure out product market fit. And man, sometimes product market fit's complicated. And you're not losing sleep about the macro environment. Think about how many founders right now are sweating bullets watching the stock market and watching interest rates. I don't blame them, right? Like I'm not saying that's wrong, but the default to live founders are kind of like, eh. And those who know they need to raise soon, they ask a lot of questions. And I get where it's coming from, but they seem nervous. I think the second big takeaway here is that investors are not going to twist your arm to burn, but you should also be careful to not react to the slightest suggestion that burning more might be okay. Like unfortunately or fortunately, you're in control here. And if someone whispers to you, oh, maybe you should slam that airplane into the mountain. That doesn't mean that you're not the pilot holding onto the stick and you can control where the airplane's going. And they're going to be fine. And they're going to be fine. Yeah. This is the thing. This is what's so weird about this business is like, who has to live with the rest of their lives that that was their startup or that they could have done something different they weren't able to versus the investors like, yeah, whatever, cool. And they don't think about it at all ever again. And then maybe the last takeaway here is that if you are in an operationally intensive business, you know, a la DoorDash, you better be 10x better than the people around you at knowing your numbers, at steering that plane well. Yeah. The CEO, the founders have to be pushing for this, not the board, not the VPs, not your CFO. Founders have to care about this. And I'd argue this is one of the dirty little secrets behind Amazon. They've always known that they were in a low margin business and they've always run their company that way. And I'm sure they were so tempted to look at a Google or a Facebook and say, why don't we do those things? And like, they had to be strong enough to say, because we're not in ridiculous high margin businesses like they are, like we're going to play our game. Anything I missed Dalton? Any other final takeaways? I think you got it. I mean, I think anyone out there who's stressed about raising the next round, this is just a helpful reminder. You should read the blog post, you do the math, but you don't have to be as stressed out. If your default's alive, it actually completely changes. It's like a weight is lifted off your shoulders. It's crazy because you're not hoping that some stranger somewhere is going to bail you out. It's a bad feeling. But when you're in control, you feel much better. So I would recommend it. All right. Great chatting, Dalton. Thanks."
  },
  {
    "name_video": "Dalton & Michael: Co-founder mistakes that kill companies and how to avoid them",
    "description_video": "\nWe asked YC founders: Is there a simple fact you wish you knew when you started your company or a rookie mistake you wish you could take back?",
    "related_categories": [
      "Becoming a Founder",
      "Co-Founders",
      "Founder Stories"
    ],
    "page_url": "/library/DZ-dalton-michael-co-founder-mistakes-that-kill-companies-and-how-to-avoid-them",
    "youtube_url": "https://youtube.com/watch?v=dlfjs_eEEzs",
    "mp3_file": "downloaded/Dalton_&_Michael:_Co-founder_mistakes_that_kill_companies_and_how_to_avoid_them.mp3",
    "mp3_content": "You definitely want a co-founder. Hey, this is Michael Seibel and Dalton Caldwell and welcome to Rookie Mistakes. We've asked YC founders for their rookie mistakes so we can share them with you and help you avoid these common errors. Let's start with our first anonymous story from YC founders on mistakes to avoid. At the beginning, when everything's going well, you don't know how you're going to handle disagreements or bad actions by the other person. It's extremely hard to deal with the bad situation after the fact if you don't have anything written down. It's awkward to talk about things like who gets what percentage of the company or do you have founder vesting? And you know how human beings are. We don't always remember things quite the way they went down, right? And so write it down. I think the biggest error that I see is founders looking for someone with a skill match versus someone that they actually maybe have had a fight with before, like a friend. But a lot of founders assume that whatever skills their co-founder has at the moment they join the company are the only skills they'll ever have. And in my experience, almost everything you learn, you learn on the job. So you rather work with someone you really like and learn together than work with someone you don't know at all and get into fights and then break up. I mean, to put some facts on that, how many founder breakups have we seen where the founder says, my co-founder is excellent A plus, they just don't have the skills that we need versus my co-founder is a living nightmare and I can't take it anymore, right? Like how many people are like, what a great person that I like a lot, they just didn't end up, I shouldn't have made them my co-founder because they just didn't have the right skills, Michael. Do you ever hear that? Never hear it. And by the way, it's not that it's not true, it's that that doesn't cause a co-founder breakup. That doesn't kill a company. It's an error, but not a fatal one. All right, let's move on to the next one. So the YC founder wrote in, take arguments with your co-founders seriously. It's more likely to kill you than anything else. What I see with a lot of co-founder disputes is that the relationship has never been pressure tested. They've just been friends. They've been like, oh yeah, we chat all the time. And then the first time there's a disagreement, it's just a blow up and the relationship is broken and you'll never be able to put the pieces back together again. Versus if it's someone you've known a while, maybe it doesn't seem as shiny, but you've already had some disagreements. You've already had the relationship ebb and flow over years, right? My best takeaway is that first, you don't always have to come into a resolution. Like if you don't have two people engaging productively, you can pause, you don't have to keep the fight going. And then the second one is like understanding how your co-founder deals with stress. Like some people deal with stress by attacking, some people deal with stress by retreating. And like if you understand how your co-founder deals with stress, you can kind of better interpret what they're doing. All right, here's the last comment that a YC founder wrote in. I chose a co-founder with whom I could not share my honest disagreement. We didn't know how to fight well or come out of those fights better and wiser. Some part of that was conflict avoidance on my part. And some part of that was him fighting dirty. It's crazy when you speak to founders where they'll spend eight hours a day with someone and more 12 hours a day with someone. And they'll be like, I haven't spoken to them in a week. Like, you know, and I'm like, what are you guys doing all day? Like you haven't talked to him in a week or haven't talked to him in a month or I haven't had a real conversation with them in a year. And I think when things get that bad, I would argue there's a point where breaking up becomes inevitable. And the CEO's job is now not how to repair the relationship. It's basically how to separate in like the most effective and least destructive way. When you talk to folks about this, they know in their hearts that that's what needs to happen, but they just can't bring themselves to actually do it because it feels bad. And so that's what's, again, when you talk to these folks, they know, they know that it makes, the right thing for the company is to go their separate ways, but they, for whatever reason, they're willing to go through years of pain or actually reduce the chance the startup's gonna work than to face that head on. It's really rough. The longer this relationship persists in this way before there's a breakup, the worse the breakup is gonna be. Like the more likely there's litigation, the more likely there's, one person is vested stock, so now your cap table's affected. Like there are all these things that get worse by leaving it alone. How should the CEO set up a company so that if this battle, if there is a co-founder fight, it's not fatal to the company? The closest to equal you can get the better is it avoids this, oh, this person has 10% more, so it's their company. You see all this drama that happens over equity splits. So equal is good. However, here's a pro tip for you. A straight 50-50 deadlock is rough, and we see that kill companies a lot. And so it might be reasonable for the CEO to have one extra share. So you effectively have the same ownership, you're equal co-founders, but that one extra share is you agreeing in writing early that in the event of a 50-50 deadlock, there's a tiebreaker vote. Dalton, before we close, what are some tactical tips you'd give folks who are looking for co-founders now who are extremely early in their journey or thinking about starting a company? I hear from a lot of folks starting companies where they wanna come up with the idea first, maybe they wanna raise money first, and then they wanna add a co-founder. And I actually think that's going about it in a less than ideal way and actually might cause more problems, okay? I would recommend figuring out who the co-founder is first, and then if you come up with the idea together and perhaps you fundraise together, then you'll have collective ownership that it's your idea and it's your company, versus a lot of times when you add co-founders later, in their mind, it's your company, it's not their company. And even though you worked on the company an extra month than the other person did, which is so silly, right? You'll always have this like, well, this wasn't my idea, this wasn't my company, which isn't great from our attention perspective. If you can both really feel like you shepherded the idea through the earliest stages, you're gonna see a lot more ownership and people stepping up when you go through hard times. To reiterate what we talked about at the beginning, I don't wanna say co-founders are essential, but man, they're so helpful. It's such a powerful tool, especially in the hardest part of the startup, the pre-product market fit startup. We still encourage everyone to have a co-founder, but like the startup game, right? It's not about doing it well, it's about doing it great. Like having a great co-founder can be a superpower for your company. Having a okay co-founder, not taking this seriously can be the seed of big problems. Absolutely, and sometimes people, they end up with co-founder issues. I'm like, well, I guess I'm just gonna quit and start a new company and we'll, it's so easy to start a new company and then it's like, well, good luck. And then you speak to them a year or two later and it's really hard to get back to where they were in the moment. And one of the regrets is they wish they would have spent the time to set up the co-founder relationship well and choose the right person first, then think they can just blow everything up and get a do-over. That's just not how life works. And so the more you can front load this the first time around versus having hard earned lessons, would recommend. So we recommend you get a co-founder. We recommend you do it well. We recommend that you invest in that relationship early so that you can survive the fights that will inevitably happen. And man, grab this superpower. Like you should certainly get a co-founder, but don't slack. Don't slack off. This isn't the place where you wanna slack off, where you wanna put 50% effort. Like this is one of the most important things you're doing in the beginning of the company."
  },
  {
    "name_video": "Dalton & Michael: YC founders made these fundraising mistakes",
    "description_video": "Dalton and Michael talk about fundraising mistakes. Learn how you can best build leverage as you set out to raise money, with examples from Airbnb, Google and Facebook.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Stories",
      "Fundraising",
      "Investors"
    ],
    "page_url": "/library/DY-dalton-michael-yc-founders-made-these-fundraising-mistakes",
    "youtube_url": "https://youtube.com/watch?v=6606a2ka-jQ",
    "mp3_file": "downloaded/Dalton_&_Michael:_YC_founders_made_these_fundraising_mistakes.mp3",
    "mp3_content": "If you look at why the Google founders are the Google founders and still have all this control over the company, you can look all the way back in time to the moment of the earliest fundraisers, they were not desperate for cash and low leverage. Hey, this is Michael Seibel with Dalton Caldwell and welcome to Rookie Mistakes. We've asked YC founders for their rookie mistakes so we can share them with you and help you avoid them. Okay, so here's the next note that a YC founder wrote in. The easiest way to fundraise is to indeed have a good metric that's growing. When I ran a startup that wasn't growing, I spoke to 140 investors and only got two angel checks. Now I'm working on a startup that is growing and almost every well-known VC is trying to figure out how to talk to us. It took us one week to raise our seed round. I don't know, Michael, I've heard rumors from around the world that the best time to fundraise is before you have any metrics at all, right? Because once you have any revenue, you will be judged on the revenue. In all, like 97% of the time, the demo, the product, the MVP, the MVP with customers gives you so much more leverage when fundraising, 97% of the time. Well, we talk about fear-based decision-making a lot, you and I do, and we talk about this with a batch. And I think a lot of times this is a case of fear-based decision-making. If in your heart you believe that your product is bad and that you will fail, it makes a ton of rational sense to fundraise before the world figures it out. And before the world realizes, investors see that you launch it and no one actually wants the thing that you're making. You know that no one wants the thing you're making in your heart, right? And so rather than go and try to sell it and get what you're expecting to be really hard to sell, you know it's gonna be a hard sell, so hey, let's just raise before we go try to do it. Not the best play. You know, the other common failure path that we see is people putting the investor as the kind of center of this game, as opposed to the customer. People thinking the investor is almost the teacher and their job through a pitch or to a deck is to get an A from the teacher. And the A is money. I think that looking for validation from authority figures is a lot of how we are constructed to look at the world. And if you've been an employee or you've gone to school your whole lives, a lot of the way you get ahead in life is to figure out who the authority figure is that you need to please. And if you please that authority figure, it's the path to greatness. And so again, like if you're like a level whatever, level three engineer at some big company and you're like the way you get ahead is to impress the bosses, why not kind of pattern match that onto startups? If I could redirect that energy towards pleasing people's customers. Yeah, people call this customer obsession. Like it's a buzzword, we are customer obsessed, but let's take that literally. What does it literally mean to be customer obsessed? What it literally means is most of your waking hours, who are you thinking about pleasing? It's your customers and you're trying to solve problems from them. I think this is a neat trick for an early stage founder. Audit the amount of time you spent last week talking to your customers and building product, right? If that amount of time in your waking day is like 80 to 90%, you're probably doing it right. If that amount of time in your waking hours or in the last week is more like 20%, you're probably doing something very, very wrong. All right, so here's the next note that a YC founder wrote in. Raise what you need and nothing more. You will find a way to spend all of the money in your bank. Stay lean and get your fundamentals right. You know, a lot of founders think money is like oxygen and you need it to survive. You know, one of the things that Brian Chesky at Airbnb told The Batch recently is maybe money is more like food. You definitely need food to survive, but in a lot of places in the world, including America, people are dying from too much food as opposed to too little food. If you're afraid that bad things are going to happen, the idea of stockpiling as much of whatever resources you can as much as possible is totally sane and reasonable. The issue is really successful companies, the oxygen they have is revenue from their customers and they're being pulled ahead by customer demand for their product, and that is providing the oxygen of growth is like the pull of customers. It's funny because like those companies tend to own more of their company when they IPO or exit. Those founders tend to be happier. They tend to have more innovation because if you don't have as much money, you got to innovate. You've got to do things better or different than your competitors. The biggest difference between what founders own more of their companies than others is how desperate they ever were in the history of the company to need to raise money and whether they were smart and had leverage when they fundraised. And so one crazy story that I don't think most people know is that Facebook was apparently always profitable. That even when it was a tiny college social network, they had these ads on the site way back in the day that made them profitable. And so there was never around that Facebook was in trouble and raised on poor terms or raised more money than they needed. And so I believe at exit, this is kind of why Zuckerberg owns so much of the company. Same with Google. Google had incredible traction. This was a long time ago, but I used Google when it was google.stanford.edu. It was a really popular search engine before they raised a single dollar because they built it when they were grad students and had tons of traction. And so the first money they raised was a very good terms and every additional round they raised after that, they had incredible leverage. And so again, if you look at why the Google founders are the Google founders and still have all this control of their company, you can look all the way back in time to the moment of their earliest fundraisers, they were not desperate for cash and low leveraged. I think that you've just hit on this like secret hint to founders, who you're comparing yourself to matters. Like if you're trying to hit a grand slam home run with your startup, compare yourself to the people who have hit grand slam home runs. Instead of comparing yourself with like a local peer group or the company that just raised at a unicorn valuation. Like other people in your pitch competition. Yeah, God, like at a minimum, if you're looking for like heroes to emulate, can you copy companies that have at least 100 million in revenue and like preferably a billion, there's like so much more you can learn from their stories, even if they might be old, I guess, you know, Facebook's an old company now, but even if they might be older, man, like you can learn a lot more. And like, that's what you're trying to emulate. You're not trying to emulate the unicorn valuation. You're trying to emulate the successful multi-billion revenue company. Yeah, that's really well said, Michael. Choosing your peers and choosing who you wanna be like is one of the most powerful things you can do if you're an ambitious person that wants to do things in the world. Is you get to choose who you wanna be like."
  },
  {
    "name_video": "Dalton & Michael: Understanding investor terms and incentives",
    "description_video": "Dalton Caldwell and Michael Seibel talk about investor terms and incentives, and how a clear understanding of them can help you get the most out of your fundraising conversations and meetings.",
    "related_categories": [
      "Becoming a Founder",
      "Fundraising",
      "Investors",
      "Negotiation",
      "Founder Stories",
      "Valuations"
    ],
    "page_url": "/library/DX-dalton-michael-understanding-investor-terms-and-incentives",
    "youtube_url": "https://youtube.com/watch?v=wnyI7ZM_Mrk",
    "mp3_file": "downloaded/Dalton_&_Michael:_Understanding_investor_terms_and_incentives.mp3",
    "mp3_content": "It's almost as if they get to run this game every day with multiple companies and all you're trying to do is raise money and get back to work. Hey, this is Michael Seibel with Dalton Caldwell and welcome to Rookie Mistakes. We've asked YC founders for their rookie mistakes so we can share them with you and help you avoid them. Here's a last note written in by a YC founder. You should care just as much about the terms of your fundraise as you should care about the economics, the valuation and the amount of money you raise. There are lots of rights, there are lots of terms inside of a funding deal that can screw you no matter how high the valuation is. I think that investors are aware that founders want high valuations and they want the press release about, you know, they raised a lot of dollars or they raised at a high valuation or whatever and so they're very aware of this. And so one of the ways that you sometimes see investors take advantage of this need on the part of founders is to say, great, we'll give you your ask around valuation or amount but you need to give us all this other stuff. And often the things they ask for are sort of jargon filled inside baseball. When I was a founder I wasn't familiar with what participating preferred meant or super prorata and we sometimes see founders give up those terms without totally understanding what they mean and wow is this bad. Another example is board control. You can, I've seen founders give up control of their board such that they could be fired and are fired to raise a million dollars. As a founder like here's the trick, you're not going to be as good at this as the person you're negotiating against if they're an investor who invests in a bunch of companies and you're a first-time founder. So by using standard paperwork, by using a lawyer who actually has done a lot of startup work, you prevent yourself from getting screwed. And so this is one advantage of trying to raise money from people that have a track record of public companies because you know they're optimizing for you to build a really big company versus some investors optimize for your company is going to sell for 10 or 20 million dollars and so they structure their entire documents around that kind of outcome. This happens a lot internationally and once again I don't think the investors are being evil. I think that they're basically saying well I've never seen a deal that's become a billion dollar company and so I've got to optimize for these base hits. I got to figure out if this thing only sells for 20 million how does my fund not die and I think that's like so unfortunate because I think investors oftentimes want to pitch oh we've got our local experience so we have this we have that but like when you're a founder it's way easier to get better terms from someone who's passed on a billion dollar company. Here's the last kind of interesting way I've seen these terms versus valuation. I give you a term sheet at a great valuation but the term is oh I'm going to only put in one million dollars and the term sheet's for three million so you got to go out and find two more million somewhere else where it's like oh this isn't this great like I've got a term sheet and it's like kind of I've got a deal like kind of you have a deal but what is the investor really doing when they give you an offer like that what's really going on? This surprises a lot of people in YC but this whole hey this is great we love to invest when you find a lead just come back when you find a lead if I translate that out of VC speak actually means no and founders are like what that means no. Here's why to the extent that you were in a position where you did have a lead investor it is very common that the lead investor would want to put in the entire amount of money to hit their ownership target and so they would not want you to give more of the round to someone else right not to mention if you had the lead investor already lined up there'd be a lot of other people that would love to invest alongside the lead investor and so when someone says oh this is great come back to us when you find a lead you know give us an allocation in there what they're actually getting is a free option to invest in the future if you find an investor that they are impressed by it costs them nothing to say that right and if you don't find a lead they just manage to pass on your company while being very nice to you to your face yep right like it's like no we don't want to invest but if you somehow find a great lead investor and you come back to us let's talk about it then and and the founder walks away from that conversation like wow they're really interested they want to invest we have offers when in fact they just did this ninja move where they said no but that's not how you interpreted it isn't that wild it's almost as if they have to do this because this is their job it's almost as if they get to run this game every day with multiple companies and all you're trying to do is raise money and get back to work of course they're going to be better at it of course they're going to have the cool lines of course they're going to tie you into knots it's like you apply to a job um at facebook and they're like this is great come back to us what with your job offer from google and apple and and we'll we'll we'll go from there so just let us know how it goes right that's not a job offer consider this a provisional job offer assuming that you can get an offer from google and apple like and like and and like even better like sign something like like yeah like we'll sign something or we'll give you something that looks official but and again to be clear maybe maybe someone will see this and be like oh but that's you know what about this what about that like sometimes there are cases of investors that can't write big checks and they want to invest alongside other people this happens sometimes that is possible so we're not we're not suggesting this is all things in all universes we're just saying a lot of yc companies hear this line and what it usually means you know what it means in our experience is no let's talk about investor incentives do you believe investors are incentivized to tell companies to raise more money or less money and and why i think it depends on the stage that the company is at i think for tiny startups investors aren't going to fund them anyway and so saying what they want to hear like saying smart thing that captures mindshare so that when you do get successful they'll want to come talk to you not a bad idea and so i don't i don't know what to pursue that i think for companies that they actually want to fund or perhaps they've already funded i think it is reasonable as an investor to want the company to get huge investors are going for huge outcomes so still with me right and so that often looks like you should be growing faster oh your revenue looks flat you should be spending more on sales you should be spending more on marketing and so coming from a good place from their perspective you might have a misalignment of incentives sometimes where the investor the worst thing you do for an investor is like be profitable but not grow fast enough for them versus if you're a founder that ain't so bad well i think what i've seen is the investment community has changed a lot and i think that you know 10 years ago we were seeing a lot more very small funds and a lot more angels investing in companies and i would argue that they were less professional and i don't mean professional in a in a in a good way i actually mean professional in a bad way like their interests were a lot more aligned with the founder i think that as there have been more and more kind of professional seed funds being built up now those seed funds have obligations to their lps to their investors they have kind of internal goals about how much of your company they want to own to make sure their business works and as the seed funding world professionalizes it opens up doors for there to be a misalignment of incentives i've seen a lot of situations where a fund wants the founder wants the founder to take more money not because they think more monies can help the company but because they have an ownership target because they want to own 10 and so i think that nowadays that there's so much money out there investors have a lot more incentive to convince founders they need more money right money is what the investors are selling when there's a lot of money out there and a lot of investors out there the easiest way to compete is like hey i'll give you more money you need more money let me try to make you afraid that you don't have enough money so you'll take my money and i think that's the best founders understand that investors have incentives on their own not bad or good they're not evil or like angels it's just more like yeah we're investors too michael yeah it's our agenda here like i just think that like a smart founder understands that people they're negotiating with have their own goals and incentives and they take a second to think about those incentives when they're hearing the sales pitch as opposed to just kind of believe things blindly"
  },
  {
    "name_video": "Dalton & Michael: Should you follow your passion?",
    "description_video": "Dalton Caldwell and Michael Seibel talk about solutions in search of a problem, whether or not to follow your passion, how to figure out what to work on, and how to motivate yourself as you set out to start your company.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology",
      "Motivation",
      "Founder Stories",
      "Startup Ideas",
      "Problems to Solve"
    ],
    "page_url": "/library/DW-dalton-michael-should-you-follow-your-passion",
    "youtube_url": "https://youtube.com/watch?v=KWNNmPCF-Xs",
    "mp3_file": "downloaded/Dalton_&_Michael:_Should_you_follow_your_passion?.mp3",
    "mp3_content": " are searching for intrinsic motivators. Those people are trying to figure out what can I do every day to make myself feel better at the end of the day, at the beginning of the day. And like counterintuitively, because this thing is so hard, startups, the intrinsic motivator folks win in the long run, even though the extrinsic motivator folks tend to look like they're winning earlier. And so that's like the mental trick you've gotta do, right? It's like 95% of your friends doing startups are extrinsically motivated and their startup's gonna die in the next two or three years. But some of them, and a lot of those are gonna raise money and hire people and get offices and so on and so forth, but almost all of them are gonna die. And the person who everyone thinks is like a little too weird, like not working on the normal thing, like not growing as fast as they might think is normal, not caring about what the press and yada, yada, yada, those disproportionately end up surviving that two to three years and building something people want. And so, man, avoid the trap, right? Avoid the extrinsic motivation trap. It's great for getting into a good high school or a good college, not so good for the whole startup game."
  },
  {
    "name_video": "Dalton & Michael: Successful founders are OK with rejection",
    "description_video": "Dalton Caldwell and Michael Seibel on the importance of talking to your users, why successful founders are ok with rejection from potential customers, and how protecting your ego by not talking to your users can kill your startup.",
    "related_categories": [
      "Customers",
      "Talking to Users",
      "Founder Stories"
    ],
    "page_url": "/library/DV-dalton-michael-successful-founders-are-ok-with-rejection",
    "youtube_url": "https://youtube.com/watch?v=zB_SkaERWZY",
    "mp3_file": "downloaded/Dalton_&_Michael:_Successful_founders_are_OK_with_rejection.mp3",
    "mp3_content": "And so I just noticed a lot of these teams, the really core thing going on is ego protection and nothing else. And like you can come up with all these intellectual arguments on why actually, you know, but when you really talk to someone and you get down to the core, it's being okay with getting rejection. Hey, this is Michael Seibel with Dalton Caldwell. Welcome to Rookie Mistakes. We asked YC founders for their rookie mistakes so we could share them with you and help you avoid them. Here's the first mistake that was written in. In the beginning, when you're still figuring out your idea or product, get in as many user or potential user calls as possible, at least one per day and ideally multiple. It seems obvious, but it's something that we personally failed at in the beginning. Don't brainstorm ideas in a silo. You don't know what people want. We have all these ideas in our heads as founders about what people want that the moment they are subjected to reality are embarrassingly wrong. Like there's nothing more humbling. There's nothing that makes you feel shittier than seeing real people using this thing that you built that you spent a bunch of time on and just like ripping it to shreds and not understanding it or like using none of the features or clicking on the wrong thing. It's horrible. So talking to users is like the inoculation against this spending inordinate amounts of time doing something that is completely irrelevant to your end users. So you're suggesting then that I take surveys, right? I mean, what's the most efficient way to learn what my customers want? I should survey them, right? So this may be offensive to some folks listening to this video, but I don't think that user surveys are that valuable when choosing a startup idea. Surveys are a useful way to get certain kinds of feedback. I would think of it as sort of micro-optimizations or trying to choose directions or say you have four names for a company. You want to choose which name was the best of the four choices? Yeah, great. Run a survey. But when you're looking for fundamental truths or you're trying to find your first customer and market validation, you want to be harsher or harder. Well, what does that mean? That means get someone to give you money for it. Do you see how it's a much higher bar to get someone to pay you money than to fill out a survey or to get someone to actually use your thing every day or to get them to install it on site? Think about how many products that we would all in a survey say, oh, that sounds useful. Like, oh, it's a very useful idea that you have that you would never in a million years actually pay a dollar for. I think the second thing about a survey that I've seen really be horrible is there's a tiny subset of your potential users who actually have expertise. They've actually tried 27 different products. This is actually a really important problem for them. But if you treat everyone you talk to the same and they fill out the same questions, so and so, you never get exposed to the expertise. And the best example I saw of this was early days Airbnb. Airbnb did this fun thing to get users in the very early days where they offered people who were putting their homes online for rental on other platforms free digital photos, high res digital photos, back when like digital cameras weren't a thing yet, in order to list on Airbnb. And then instead of hiring a photographer, they went out, they got digital cameras, they went out and they took the photos. And to this day, I still remember that there was one guy who they met and took photos of this house. He loved the photos. He asked them, hey, do you want to sit down for coffee or tea or whatever? They started talking. And then he said, you know, I've been renting out my house on all of the platforms on the internet for a decade. And I have a notebook of all of my notes on all the things they do bad and all the things they do well for the last decade. Do you want to see it? So in the Dalton scenario A, he would have received an email survey, like how he would have signed up for Airbnb, not at a listing, not using an email survey, like how do you like Airbnb? Suggest things to improve, right? In the real world example, they got a book of all the things they needed to do. And again, like, think about this. Imagine, you know, these guys, the founders of Airbnb back in the day, the way they validated the idea was to ask people on a survey, or they did some user research, they did interview, they did a user interview, would you like to rent your home? Do you see how what they could have learned from that is like this versus actually trying to get strangers to rent their home out to other strangers and all the like things that popped up trying to actually make the damn business work? Do you see how like, they learned this much from that versus this much from writing a survey? Well, Dalton, it's not even this much. We're not, we're not, we're not. It could be negative, right? Like it could be negative. You're right. Well, I would never want to use that because it's dangerous. So you need to, you know, like. Done, right? You don't make Airbnb. You have another good anecdote about talking to users about the feature set for Twitch streamers back in the day. Can you share that story about what, how you created a priority list based on, tell us about that. So when we were pivoting from Justin.tv and Twitch, Emmett Shear and Kevin Lin were kind of leading the Twitch team and they took this to heart. We had not done talking users for years. They took this to heart and they basically just started interviewing video game streamers and asking what they wanted. And the funniest thing is that at this point we had built every feature a live video social media site could have. We had chat, we had messaging, we had feed, we had social media stuff, we had embedding, we had every kind of sharing, we are multiple platforms. And so they were really surprised when the first thing people said was, can I stream in higher quality? And we're like, really? That's like, you don't want like some big, we will build you anything. Like, yeah, can I, you know what they said? They're like, well, you know, my computer costs like four grand and I paid for like the best internet connection in my neighborhood and I'm streaming this HD game and it looks like crap. And we were like, huh? Well, because we built our own media server and we were controlling our old streaming, that was like an integer. That was like the easiest change you could ever make. And like, it would cost us incrementally more, but it was like, from a building product perspective, it was very anticlimactic. And so I think like three days later, like, you know, we introduced to like, you know, higher HD or something. And these people went crazy. They were like, I've never, first of all, they were like, I never imagined you could do this. Like, I thought it was some massive technical issue that was like, where you were screwing us for like a year just because it was too hard and like suddenly you fix it. And then two, I've never used the website where I talked to someone about it and then it got better. And so this kind of started a series of, in hindsight, what looked like extremely obvious things to build, right? One was I want my stream to look better. Very quickly, two was I'd like to make money, please. Like, can you help me make money? Don't you want a social network? Dude, don't you want to customize your page more with different colors and themes? It's like, no, but like, I'll run ads on my own stuff. He's like, what do you mean? It's like, oh, if you give me a button where I'll just run a video ad on my own users and I can make money, I'll click it. And I'm like, but wouldn't that, what? And then once again, we already had video ads. Like once again, it's like, fuck, like that's not even hard to build. Like the hardest thing was like, what should the button look like? And again, dude, you were experts. You were running just, how many years in were you? This was five years in. We were experts. You knew everything about everything, but then you were like, oh yeah, I guess we should talk to some of our users. And they said a bunch of stuff that blew your minds, that none of you would have thought. And not only did it blow our minds, like the engineers listening should appreciate it. It wasn't hard to build. Like we could make them happy so easily compared to all the other shit on our brainstorm list that was like, you know, months long projects. And it was like, oh damn. So anyways, clearly going a little deep helps. Putting yourself in a situation where you can have a deep conversation is way better than anything else. We touched on this and I want to bring up a quote because we can dig a little bit deeper. A YC founder wrote in, a potential customer's opinion is not valuable unless they're willing to pay you, or use the product regularly, or share the product with their friends. They call this financial capital, pay you, time capital, usage, or social capital, give it to their friends. I think people really struggle with this because I think it's getting at the core of like a human condition thing, which is we want to be loved and we don't want to be rejected. And so, you know, getting through all these layers of defense that you've created for yourself to protect yourself from rejection is really hard. And it's like, yeah, man, it's personal work. Like it's work you're doing in your head. It's not work you're doing in the external world. And so I just noticed a lot of these teams, the really core thing going on is ego protection and nothing else. And like, you can come up with all these intellectual arguments on why actually, you know, but when you really talk to someone and you get down to the core, it's being okay with getting rejection. I always like to think about this a little bit like science. Like imagine that you're a founder. Oh, sorry. If you're a founder, imagine you're a scientist, right? And you could design one of two experiments. One experiment that actually tests your hypothesis and will give you actual information about whether your hypothesis is right or wrong. And another experiment that doesn't test the important variable at all. How many founders do we know who are never testing the important key hypothesis of their company for the exact reason you talked about? Because if I know that I'm wrong, my ego shatters or my investors will hate me or my co-founders will leave or some other reason I've told myself for not just figuring out is the thing I think true or not. And what I find so surprising is that some founders just, it doesn't occur to them to think this way. You know, we had the Stripe founders come in and talk last batch. And we always get founders asking us about pricing. I got to discount my product, got to make it free early and da, da, da, da, da. And the Stripe founders said, we thought that startups had a problem accepting credit cards. We thought that all of the existing products out there back in the day were too hard to use and too much of a pain in the ass. So now we tested our hypothesis. We built something for developers that was a lot easier for startups to use. And then we charged more than the competition for it. Now, any scientist would say, okay, well, if we're trying to like test this variable, charging more to figure out whether startups would use this thing, it seems like a great just logical test. But for a startup founder, that seems like a crippling decision. And what I loved about the Stripe founders here is that they just went with the logical test. Like they kind of put their ego to the side and they said, hey, what's the fastest, most logical test that we can run to see if this thing is something that people want? Anyways, so we've talked about this like problem, this mistake of like, are my users willing to spend some capital, any kind of capital on using my product? Here's the last one that I love. The last one is kind of sometimes what I call the terrorist user or like the user that you love more than they love you. So here's the quote from the YC founder. When the customer you're pitching says, we really love your tech, but we can't pick it up today because X, we want to use it in our next project and we'll be in touch soon. This is a rejection. They don't want your tech. They just want you out of their office. This is a don't call me, I'll call you. So how does a founder interpret whether they're talking to a real customer or someone who's just trying to be polite or just trying to move on or doesn't have the need? How do you figure out? We told them to talk to their users. How do I figure out whether I'm talking to a live one? I think if we talk about being scientists again like we did a moment ago, a scientist would be dispassionate and would say, okay, no, and they wouldn't think about it anymore and they would go on to the next thing. You know, Dalton, I think a lot of the reason why founders get caught in this trap is because they were never taught what sales really is. They were taught sales in the context of, I would almost argue, argument. I think what a lot of founders think sales is is more like what lawyers have to do to convince a jury. Like a jury has to be there and like they're going to make a decision and as a lawyer, your job is to convince them one way or the other. I would argue that the best salespeople, convincing is really low on the list of what they're doing. Like I might say convincing isn't on the list of what they're doing. I would argue that the best salespeople are spending a lot of their time doing two things, learning and filtering. Learning and filtering. It's a successful conversation with the customer if they say no quickly and they teach you about other kinds of customers who also are going to say no quickly. That's a success and like filtering out the customers who will never get to a yes as soon as possible is a success and I think that a lot of founders who've never done sales are like, oh no, if they say no that just means that they don't understand how good my thing is and I have to explain it better. As opposed to like, no, that no is a gift. Figure out what you could have asked them so they would have said no in the first three minutes of the conversation. You know, so at YC, we kind of talk about this as customer validation. Like every sales call should start with three questions that allow the customer to disqualify themselves from your product, right? A lot of your calls should be ending in the first five to ten minutes like, you know, I don't think we're right for you now. We're happy to call you back when we can do this thing or that thing but I don't think we're right for you now and if enough founders and it's funny because the themes are all the same. Being willing to say no. Being willing to test the core hypothesis or sorry, being willing to accept a no. Being willing to test the core hypothesis. Not feeling bad when someone doesn't want your thing. Like having a spiral of self-recrimination and self-doubt and, you know, like you can get really dark and it's like someone just doesn't want to buy your thing. Like who cares? You just have to get used to it. There's lots of people out there. So if we were to wrap this up, this has become commonplace advice now to talk to your users and I think that the reason why people don't do it and, you know, clearly what you've kind of played out is they don't do it because it makes them feel bad and they don't want to feel bad and, you know, here's what I tell YC startups. I hope you're passionate about what you're working on because you're going to feel bad all the time. Like that's what you signed up for. So like don't run, like it's kind of like a marathon runner being like, man, I hate that feeling when my legs are super cramped and I don't want to run anymore. It's like, well, you're going to feel that way all the time. Like you're good because you can deal with that feeling and stay productive and stay logical and stay scientific about what you're doing. I think about a lot of what you just said in terms of the trade-off of being an employee versus being a founder. When you're an employee, if you're working at Apple or Google, you don't have to worry about any of this stuff. You got 15 layers protecting you from external world feedback that you don't want. You have several layers of managers telling you it's all going to be okay and giving you constructive positive feedback. You have- And getting fired when it doesn't work out, right? Exactly. Because it's their fault. It wasn't your fault. You have all these layers where this is all the stuff that's filtered out from you, man. This is not your problem when you have a job. When you're a founder, there is no filter. I think people freak out because they treat being a founder is on the same sort of thing as being an employee. They're like, oh, either I'm going to work at Google or I'm going to start a startup. It's like, well, no. This is different, right? In one of those things, you're like a worker bee and you can just work on your thing and it's really low stress. You have to worry about your manager liking you and stuff like that. There's no managers. There's no filter. You're just out there dangling in the wind. Every breeze that comes your way, you're going to feel. The inputs that you experience as a founder are completely unfiltered. You have to be the person that tells the people working with you that it's all going to be okay. You're now on the role of the filter. You are the filter, not the person being filtered to. Yikes. I think a lot of folks aren't mentally prepared for this. Reality is tricky when it's not filtered. But I'd argue it's more fun. It's more fun to look at the sky with your own eyes than to look at a drawing of a picture of a movie of the sky. It's more fun. You got to live your life, right? We only get a short time on this earth, so you might as well use your own two eyes. That's at least my thought on this. All right. Well, this was a great wrap up on talking users, why and why it feels like crap."
  },
  {
    "name_video": "Dalton & Michael: Where do great startup ideas come from?",
    "description_video": "Dalton Caldwell and Michael Seibel talk about where the ideas for Airbnb, Coinbase, and Stripe came from, and lessons you can learn from these founders.",
    "related_categories": [
      "Founder Stories",
      "Startup Ideas",
      "Problems to Solve"
    ],
    "page_url": "/library/DU-dalton-michael-where-do-great-startup-ideas-come-from",
    "youtube_url": "https://youtube.com/watch?v=Jcuqq48CNj8",
    "mp3_file": "downloaded/Dalton_&_Michael:_Where_do_great_startup_ideas_come_from?.mp3",
    "mp3_content": "In all three of these cases, these folks had the problem, they had experience, and in hindsight, there was an obvious opportunity to make something 10x better, but most people thought they were idiots. And that's probably the overarching theme. They had to be contrarian. Hey, this is Michael Seibel with Dalton Caldwell. Today we're going to talk about where do great startup ideas come from? We've picked three successful YC companies to unpack this question, Airbnb, Coinbase, and Stripe. And there are three common themes that we've seen through all three of these companies. The first, timing was important. For each of these companies, there was a pre-existing product, pre-existing competitor, dominant, you might say, but there was an opportunity to make something that was 10x better than what existed. Number two, most people, founders and investors, thought these ideas were horrible, either because they were too hard to execute or because they just were bad ideas. And then number three, and I think the coolest one of them, is that each of these opportunities turned out to be bigger than the founders even knew when they started. They turned out to be way bigger. All right, so let's talk about Airbnb. One of the things that I think is really interesting to set this up is that existing products did exist, right? Airbnb did not come up with this idea. So what were you using before Airbnb, Dalton? Yeah, for context, I think if you've only seen Airbnb, you think they came up with the idea. That's probably if I talked to my mom, she'd say, oh, Airbnb is a great idea that those founders dreamed up. But back in the day, I was already using VRBO before Airbnb was even funded by YC or existed. There was also a very popular startup called Couchsurfing, which was quite similar to Airbnb and it had a lot of mindshare, had a lot of, it was a big network. And so it kind of felt like the third rate entrant to a crowded space at the time. I remember when they were in YC, that was my perspective. Do you remember that, Michael? Had you used any of those? Because I'd used VRBO personally. I had used VRBO. I had also used Couchsurfing. One of the reasons why I was actually excited about working with the Airbnb folks was because using Couchsurfing was so painful. And so I think the first thing when it comes to timing, I think they nailed this hardcore. They weren't first, but the existing products weren't great. And I think it's interesting to talk about why the existing products weren't great, because honestly, that's important. I would argue that there were two fundamental facts that made the existing products not good. The first is that VRBO and Craigslist did not facilitate payments. So when you arranged in a house share with someone or staying in someone's apartment, you still had to pay them either in cash or check or wire. And there was a lot of friction because there's two people who don't know each other having to trust each other to transmit payments. I think the second problem that VRBO had was they charge hosts to list. And if you think about the core insight of this market, it's that hosts are the game. If you can get the most hosts, you win. You have the best inventory. But if you charge them upfront to be on your site, like you're probably doing it wrong. So to me, timing was huge. Existing product did not. There were 10x improvements that can be made. And the second thing that was really interesting was that they were solving their own problem. Most people don't realize that Airbnb started because Joe and Nate needed to make rent money. And there was a big conference going on in San Francisco, and they basically rented out room on their floor to host people so that they could make some money. And it's funny, because we always talk about personal problems, but not being able to pay rent, that's a real problem. And that doesn't sound like a vacation rental, which was what I was used to seeing on VRBO, which was vacation rentals. Exactly. Exactly. I think it was interesting at the time that a lot of people realized that they could use their property and make extra money. And it's not a coincidence that this happened around the same time as the OA crash, where a lot of people needed to make an extra buck. And suddenly they realized, oh, I have an asset right now I can make some money on. Then I think the last thing is they used their own product. Airbnb didn't realize the insight around facilitating payments, around accepting payment when they launched. They didn't have that insight when they launched. Brian came and spoke to YC recently, and he shared the story that when he used his own product and he forgot to bring money for payment, and the host thought he was a fraud, he realized, oh, crap, our site needs to allow people to pay. We have to solve this problem. So it's funny, because these insights seems obvious now. But Dalton, back in the day, put your investor hat on. What were the shit takes? Why did everyone think, oh, this is dumb? Well, look, there's two extremes. One was renting a house when someone is already home. Renting a room in a house with a host there was the ultimate, unappealing, scary, bad thing that no one wanted to do, especially older folks, like investor folks. Like investor types. Who have a lot of money and can afford nice hotels. You want to go stay in a stranger's apartment in Manhattan? No thank you. So it was extremely unappealing idea of people worried about those sorts of things. And then like the other insight I have for you on this one is it was seen as uncool and impure when you're building the community at this time in history to charge money for it. Like the couchsurfing ethos was it was a very like communal, community-based, pay it forward, social collective action, decentralized goodness thing. And to be commercial was extremely in poor taste. And remember, Michael, you and I both were the founders in this era. All of the messaging that was bombarded from us, from everyone, all of our peers, is that making money isn't cool and being commercial isn't cool. And what they should have done is get as big as they could and get 100 million people on Airbnb and then charge once they built the network. And so to charge? That's a horrible idea, guys. Build the network first and then charge, right? Like again, you went through this as a founder, man. Isn't this what you would have been told? Of course. It's what we were told. I mean, Twitch became big when we started diversifying our business model and it started accepting direct payments from users in addition to ads. But that was seen as dumb back then. So clearly, and of course, this is going to be a common theme, if they had listened to most of the investors or most of the founders at the time, Airbnb wouldn't exist. Yeah, it'd be like, well, couchsurfing is free. So your plan is to build something like couchsurfing, but with no users and you're just starting and you're going to charge money for it. Good luck. That sounds like a suicide mission, right? All right. So the next one is Coinbase. So set the scene for Coinbase. What do you think Brian saw when he was getting rolling? Yeah, so I was around back then and I was trying to buy Bitcoin back then too. And I remember the Coinbase YC application really well in the whole historical context. So to set this up for people, circa 2011, 2012, it was really hard to buy Bitcoin. Really hard. I remember looking into it around 2011 and there was a step of sending money orders, like going to Western Union and sending a money order to some foreign country. And that's when I opted out of it. I wish I would have done it. It would have made a lot of money, but I didn't because it just seemed too much like a total scam. Like if you're ever sending money orders to foreign countries, something is going wrong in your life, right? But anyway, I also was familiar with Mt. Gox. And Mt. Gox was the biggest and largest Bitcoin exchange back in the day. And it went down a lot and got hacked and everyone lost all their money. I actually lost some money in Mt. Gox personally. I think I had about one Bitcoin in Mt. Gox. I'm not too worried about it. I feel like the reputation for Mt. Gox was like you can get money in, but you can't ever get any money back out. That was the environment. And what it grew out of is that Mt. Gox was an acronym that was Magic the Gathering Online Exchange. It was originally a website to trade magic cards that they pivoted into Bitcoin. And so anyway, the historical insight was buying Bitcoin was something people wanted to do, but all of the options were pretty bad. That's the historical context. And Brian wanted to fix that. I think what's really interesting about this is we come back towards he wasn't the first mover, was not the first mover, but the product that existed was so bad that a 10x better product was actually within reach. Like it was actually possible. I think the other fun insight here is that like portable online gold is valuable. Like it is 10x better than gold. And so as something you might want to have, if you think gold is something that you might want to own, and it seems like the market does like owning gold, portable online gold is strictly better. So I think out of maybe all three of these founders, Brian was exposed to the most shit takes. The most people saying this was not going to work. So break that down for us. Like explain all the reasons why Coinbase is not supposed to work and Brian should not be a successful founder today. Well, at the time people saw Bitcoin as a tiny market, that it was going to crash, that it was a bubble. Investors didn't like it. It was synonymous with a lot of actual fraud, right? It didn't have a great reputation. Also getting a bank deal was impossible. It's not like other founders didn't want to start something like Coinbase. US-based exchanges were incredibly hard to start. And this is the reason why all the exchanges at the time were offshore, was the regulatory environments were different in different places, right? Another thing I want to note is even Brian in his YC application didn't really believe in his own idea, because what he basically applied to YC with was the P2P transfer parts. It wasn't buying Bitcoin and holding it. It was the idea that he could build something like PayPal to do P2P transfers. And that the buying Bitcoin part, that was just part of it. And so isn't it funny that even he kind of undercounted the simple promise of buying Bitcoin in a non-sketchy way with a debit card in the US and not getting hacked and losing all your money? That was enough of an insight to be the basis for like a $100 billion company. He didn't need to do all this other stuff. He didn't know that. No one knew that. And following the pattern, a valuable insight that he learns after starting the company, right? Like you don't have to have all the valuable insights before you start. Well, you remember what the Coinbase product was back in the day, right? It was a website. You logged in. You put in how much Bitcoin you wanted to buy. And you push the button and you buy it. And that was, you could sell it too. There was no, there was no social network. There was no comment feed. You know, it was probably the simplest. There were no graphs. There were no graphs. It was one of the simplest products I've ever seen. But it doesn't solve the right single problem at the time. And I think that the way that this is kind of embodied was that, fully embodied how bad of an idea people thought this was, is that he had an impossible time raising money on Demo Day. And so if he had taken the Demo Day signal, the investor's signal of, oh, we don't want to give you money and quit, we don't have Coinbase. Correct. All right. Last one, Stripe. So you had dabbled with payments pre-Stripe. How easy was it to accept credit cards online pre-Stripe? Share the story with everyone. I have set up, before Stripe existed, I set up accepting credit cards for my companies twice. Once in 2002 or so, believe it or not, when I was very young. And then once again in 2007. And to get a merchant credit card account was like applying for a mortgage. You had to fill out lots of paper. You had to fax in stuff. You had to personally guarantee things. They had to do fraud checks on you. It was rough. It was expensive. There was minimums. So it was a possible thing to do, but I would call it gnarly and the opposite of easy in every way. And I also remember when Stripe came out. I was actually in the Stripe beta. I was one of the first 100 customers of Stripe way back in the day for my third company, the third time I wanted to accept credit cards. And I really wanted it. In terms of make so many people buy, when it came out and I read about it on Hacker News, I immediately wanted Stripe. And I hadn't even seen it yet. I just knew I wanted it. So that's the historical context. You know, it's funny. We were authorized .NET users too at Justin.TV and Twitch. And perfect example again of like a taste of the good stuff, but so hard to use. It took us three months to start accepting credit cards. I think there was a 30 page contract that we had to read and figure out a sign. And it was like, wow. So once again, not first mover. I think another really interesting thing about Stripe was that it was a problem that they saw their peers in YC have. So literally they were seeing all of their friends in YC, not going through all of the pain of authorized .NET. And they were hearing this story over and over again. And then, you know, that's a good hint for people out there looking for ideas. Like if all of your smart technical friends are complaining about the same thing, maybe it's a real problem. Now, last insight that I think that they had. Talk to me about their go to market and specifically about understanding that their customers were developers and not business guys. Because I think that was revolutionary at the time. Yeah. The really clever brand promise or marketing stance or whatever you want to call it they had was to try to make the most beautiful website they could with the most beautiful documentation that was every programmer's dream. Like they constantly asked themselves and pushed themselves to say, what would I want or what would a programmer want? And this is so different than every other processing company because it was built for basically business people. Like the customer was not the programmer who had to implement authorized .NET was not the customer. It was like someone getting paid, you know, 20 bucks an hour or something to implement the code. Whereas this was like, they went nuts at making something that developers would just freak out about. And everyone copied it, by the way. Every developer would copy the Stripe documentation, copy the Stripe website. It was like the Apple. It was like if Steve Jobs had to design a payments company, it would be Stripe. And they totally did this on purpose. But what this created is a lot of buzz on hacker news and around nerds basically that, hey, have you seen this Stripe thing? Oh, are you in the beta? Also, they did a beta invite program. And so it was a hot commodity to be able to get into Stripe and be able to use it. You were seen as well connected if you got the pleasure of getting to use Stripe. It was like a favor they were doing you to let you use their product. That's what a great job they did in making the website and documentation excellent. What I love is that when the Stripe founders came to speak at YC, the other detail they added was it was the most expensive product in the market. Like to make sure people really wanted it, they didn't give it away for free. They didn't price it comparably. They made it more expensive and people were still desperate to use it. Like that's how you know you have an insight. Like when you're the most expensive thing, speaking of Apple, and people still are desperate for it. Now, the shit takes, right? The shit takes are pretty clear. One, what are two teenagers doing in the banking space? The government regulation, it's the most regulated space in the fucking world, right? It's like a suicide mission. You're like, hi, we're 19. We want to start basically a bank. Give us all your money. Like we're going to handle hundreds of millions of dollars of everyone's money. So yeah, that's our plan. And there will be no fraud. Like we're good. I think the second one is that even subtracting the regulation, they needed a bank deal. they needed Wells Fargo to let them start using their rails. As an early-stage startup, they need to get that, which at the time seemed impossible. Then of course, I think the last one is that PayPal existed. There was a really popular company where it felt like PayPal was a quarter step away from this. It was like, even if you start doing well, PayPal can go here instantly. They have all these users. They're the hot company. Yeah, it was seen as a crowded market with huge companies, with hundreds of employees, thousands of employees. And it's the classic thing, again, the knock against YC companies at the time, is YC would just fund crappy versions of existing company. Like the third-rate knockoff version of something actually good was what YC companies were. Isn't that hilarious? I don't know if people remember that, but that was the reputation of YC companies. It's like, oh yeah, they'll take an existing idea that's good and they'll make a less popular version of it. Which kills me because in all three of these cases, these folks had the problem, they had experience, and in hindsight, there was an obvious opportunity to make something 10x better, but most people thought they were idiots. And that's probably the overarching theme. They had to be contrarian to walk down this path because if they had asked 10 startup experts, 10 investors, 10 fellow founders, eight of them would have told them that they were stupid. And like, how much of that- And they had to build good products. Like, you can't take for granted, we can't talk on a whiteboard and plan our strategy and win. All of these founders had to actually do it. And the doing it part was the hard part. Yes. Right? Yes. Like, all these people had to execute and build a product that people loved and actually worked, and all these people built products that handled hundreds of millions of dollars and they couldn't lose the money, right? So the actual execution bits, talk is cheap, execution is hard. Execution is expensive. And they had all these folks had to execute. So I think what the takeaway here is, if we can sum this up, one, you shouldn't give a shit if there's an existing product in the market. If you're a user of that product or your friends are users of that product, then they all hate it. And you should not give a shit. Two, you should not give a shit if most of the people around you who you believe are experts don't think this is a good idea, especially you shouldn't care if they're not gonna be users, if they have no experience with the pain of using the existing product. And then three, be very careful about your initial market math. Be very careful about pretending that you know how big the market could be. It turns out with so many of these transformational technologies, there are use cases you can't dream of that once you build a 10x better product, other people will do. And so each and every time these founders were presenting, oh, we have a market size of blank, the next time they raised money, they could say, actually, we made a mistake. The market size is actually bigger. We didn't think of this. We didn't think of that. And so don't be discouraged if someone's like, that's a tiny market. That's kind of a bullshit thing that would have killed all these companies. All right, talk to you later, man."
  },
  {
    "name_video": "Dalton & Michael: Simple products that became big companies",
    "description_video": "Dalton Caldwell and Michael Seibel talk about OpenSea, Gusto, and the importance of building simple products that solve a real problem.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Stories",
      "Product"
    ],
    "page_url": "/library/DT-dalton-michael-simple-products-that-became-big-companies",
    "youtube_url": "https://youtube.com/watch?v=G7TMqY7gkGY",
    "mp3_file": "downloaded/Dalton_&_Michael:_Simple_products_that_became_big_companies.mp3",
    "mp3_content": "A product that doesn't work with lots of features is infinitely worse than a product with one feature that works. And again, like people- Let's play that out. Let's play that out, right? Imagine if it's like, they were like, you get healthcare and you get benefits and you get 401k and payroll, and none of those features work. And sometimes we lose the money. Yes. Like you would hate them. You would hate them. That sounds like Verizon or something, you know? Exactly. Hey, this is Michael Seibel with Dalton Caldwell and welcome to Rookie Mistakes. We asked YC founders for their rookie mistakes so we could share them with you and help you avoid them. Here's the first mistake that was written in. In my company, we tried to accommodate more than one use case in our product before nailing a single use case and proving out that they even exist a business serving that customer. Yeah, this is super common. It's definitely a problem. We call this boiling the ocean, right? It's you're trying to do something that's basically impossible or intractable. And all of your instincts are to build a complete fully formed product without getting a single user. In your mind, you have this elaborate plan. And so your plan to start the elaborate plan is to build it all at once before getting a single user. I think that every founder starts their company with the lie in their head that they know about what their customer wants and they know how to solve the problem. And the more you build before putting your product in front of a user, the more you just let that lie go wild. Whereas as soon as you get something in front of a user, you can actually learn how many of my hypotheses were correct and how much of this stuff was just the lie that got me started doing my company. A useful lie, but maybe not the best lie if you wanna solve your user's problem. I also think there's a little bit of, I'll invent a term, Google-itis. Like people looking at companies that they use today and not understanding what they looked like at the beginning. Yeah, they're copying a current product. You're like, oh, we're the next Amazon. So we're gonna build everything Amazon has. And not, hey, when Amazon started, it was like a really simple website that just sold books. It didn't do anything else. It didn't even do that that well. It wasn't that good. Fair. Let's talk about some other examples though. You were mentioning that OpenSea is a good example of something that started super simple. Yeah, I mean, look, OpenSea is a company in the zeitgeist. It's really famous. It feels like it came out of nowhere if you're like a normal person, you're like, wow, OpenSea, what a huge deal. Well, OpenSea was in YC in 2018. And it was a rough start. They changed their idea. They were working on something else to begin with and they pivoted into OpenSea. And they actually spent something like a year to two years grinding it out with this really simple website that just let you buy and sell NFTs and like barely worked. And they shipped tons of features. They shipped like once a day or once a week constantly. They didn't build their own wallet. Like if you use OpenSea today, you'll notice this. You have to use a third-party wallet. There's all these other things they didn't build. And by grinding away and being super focused on the simple use case, they got something that people wanted. They got network effects and then boom, we all woke up one day and this is one of the hottest companies in the world and everyone wants to invest and they're worth billions of dollars. Well, don't forget the two or three years they were grinding away in obscurity, just trying to make the dang thing work, doing the simplest thing that had basically no features. The feature was a website to buy an NFT and transfer it to someone else. You know what I'm saying? And it still has a lot of work to do on the basics before they add really complex features. There's a lot more basic work to do on that thing. And so again, like the story here is the reason that thing worked is they started simple and they made the simple thing work and now they're adding more complexity to it. And so if someone wanted to like compete with them or make an NFT startup, they should be doing the simple fundamentals first and not try to get feature parity with all these other companies first. I totally agree. I remember when Gusto went through YC because they were actually in my second batch in winter 12. And another example of, if you look at Gusto today, you would say, oh, you can do payroll, you could do benefits, you can see your org chart, you can do 401k. Like it's like this tool chest full of amazing HR tools. When Gusto started, it was a company named ZenPayroll. It did exactly one thing, your payroll. Back then, if you didn't use ZenPayroll, you'd have to call up ADP. And ADP would bring someone to your office for you to sign stuff so that you could run payroll. And then every month you had to call someone on the phone and say, yes, I do want to run payroll this month. Like that was state of the art. And then Gusto said, we can just do that online. And that's all it's going to do. And you're going to love it. And you're going to sign up and you're going to forget about it because that's what good payroll is, right? You forget about it. And so- It just needs to work. Like imagine a version of Gusto or ZenPayroll that had a lot of features but constantly didn't pay your employees. Like a broken version, a product that doesn't work with lots of features is infinitely worse than a product with one feature that works. And again, like people- Let's play that out. Let's play that out, right? Imagine if it's like, they were like, you get healthcare and you get benefits and you get 401k and payroll. And none of those features work. And sometimes we lose the money. Yes. Like you would hate them. You would hate them. That sounds like Verizon or something, you know? Like- Exactly. That's a great way to work. A hated company is to have a lot of features that don't reliably work. All right. Here's the next one that was written by a YC founder. They wrote, we copied another successful business model from an overseas market and wrongly assumed that product market fit was a given. I mean, if the product works in country X, it's going to work in country Y. We scaled up hiring quickly and burnt a lot of money before we realized that the users we were selling to did not want our product. Oof. This is something that happens so commonly. And what's tricky is that investors often like funding these ideas because they're so simple, right? This is a very simple thesis. If blank works here, it should work there. So oftentimes these companies like get money but then fail after getting money. How have you seen this? I think what we want to believe as founders, and this applied to me too, is that by getting validation from investors or the press or my friends or employees or winning a startup competition, whatever, that meant it was good and that that was the validation. You know, hey, I've got validation. And it's pretty frightening to realize you can get validation from all those things and it could still not work. You know? And that getting the stamp of approval, like ultimately you're responsible for if the thing works or not. And it's like no one else's problem to make it work other than the founder. You're kind of on your own on this one. And so it's almost like, it's like thinking that if you can pass the driver's license test to get a driver's license, it means you're a good driver. No. Like I think all of us that have a driver's license know, you can still be a pretty bad, you know, there's a lot of variation in the quality of driving. And lots of people can get into trouble with their driving habits, even though you have a driving license. There's no, and there's no mechanism, you know, unless you get pulled over. Like things have to go bad or you get unlucky for an authority figure to get involved. But for the most part, you can get into all sorts of trouble, even though you have a driver's license. That's how I view this is that, you know, you could have your startup license. Hey, I have a website. I got, you know, I got an article, I raised some money, but man, you can really do poorly and no one's going to stop you. I think this also comes from historical context. Like by that, I mean, I still think that most founders are kind of looking back to what's worked in their past. And almost everything that's happened in their past, almost everything they've learned, they didn't have to learn from first principles. They didn't have to observe personally, right? You learn physics from a physics teacher. And so I think what's so tricky is what we're basically saying is that like all of the ways that you learned in the past don't work here. You actually have to go observe the problem, talk to the people who have the problem, try to figure out what's going on and iterate. Whereas like no one learns things that way in school. Like no one's like, hey, like we're going to drop a rock off the building, see it fall and then figure out what happened, right? You never learn physics that way. And so I think that what happens is that when these founders go into startups, they're looking for the teacher. Is the teacher, is the cheat, right? Like how much harder would it be to learn physics without the teacher, right? Without the help. Like, you know, people email you and me sometimes after these videos, they watch these videos and our whole point is go talk to customers, go figure it out. And they email us and they're like, can you give me advice? Like they kind of aren't getting the video, the point of these videos at all, which is what we're saying, which is a little bit frightening is that authority figures don't have the answers for a lot of these questions. And if you're looking for authority figures to tell you your idea is good, you still aren't really getting the point of these videos. We're kind of telling you, you have to go get ground truth answers from customers and that you really can't substitute anything for ground truth answers. No. And isn't that scary? That sucks. Yeah, that sucks. Yeah. Sorry. I wish I could tell you that I had all the facts. I feel like we can't make it not suck, but isn't it nice that we're just being honest with you and be like, this is exactly how much it's gonna suck. You know, it's not, it's not easy. What I find distressing though is how investors often get this wrong. Investors often believe that founders don't need this ground truth or you can just take solution from A and put it in place B and work. Give companies money. Those companies start doing company building, hiring the execs, hiring the team. And this happens to YC companies all the time. You know, you talk to them two years later and you're like, they come to you and they're like, it's not working. And this happens to YC companies a lot. They'll go raise a lot of money, ignore us for two years, come back when it's not working, but they have a team of 50 and be like, Michael Dalton, like what happens? Like, well, did anyone like your product? Like, did you solve any problem for anyone? Like, or like, let's look at a core stat, right? Like you charge people. What's your revenue look like? You're not, you know, and then- Well, we're not really focused on revenue right now. We want to grow. We want to grow. We have to increase the, we know this company personally. I won't say it is. We have to increase the number of customers who could buy us before we increase the customers who do buy us. It's like, well, oof. It's great logic. I do, what is comforting to me though, is that when the runway gets down to about 12 months, the magical thinking starts fading, you know? Suddenly- It's funny, don't you wish you could bottle up? Like, if you see someone's performance, say there's, you know, you have 18 months of cash. The first like, you know, 15 months, eh. When someone's back is against the wall, the quality of their decisions get much better. If there was a way to like gamify, like if you bottle up the quality of execution and thinking and like, I don't know. We see people do great work. It's just, you wish they would do this great work when their back is not against the wall. Again, it reminds me of being in college or something. Yes. Where the papers do. Yeah. And you know, you didn't go to the class. You didn't show up to anything. And then like in the final 24 hours, you like, you do great work. But you could have done that the whole time and not had a whole fire drill, right? Isn't that a shame? It is a shame. You know, the only solution that's worked for me is just like, do companies that have such a hard time raising money that it's always a fire drill. But yeah, you know, it comes back to you that like the best founders are disciplined. What you talked about is that's discipline, right? That's doing the right thing when no one's forcing to you or when no situation's forcing you to. And I think that too often, genius is mistaken for discipline. It's just like, you know, a lot of people think, oh, this person out executed all their peers because they were smarter. And it's like, that assumes the peers were actually working on the thing they said they were working on as opposed to like hiring and going to conferences and talking to reporters. Discipline to avoid the distractions. I mean, that should be comforting to a lot of people. It's like, for every ounce of discipline you have, you can probably lose five, 10 ounces of intelligence and still outperform, you know? Yeah, that's a great point. It's funny how many people that we see, again, let me think how to phrase it, with like, you'd think they'd be really good at a lot of things, but I'm not sure what they do with their time. They have a great resume, but it appears they just don't really do work. And the people that sit down and do the focused work, and again, we all know what this is like, and think back to college, you know, lots of reasons to not work on something. If you could bottle up those moments where you're actually doing focused work, the people that succeed just seem better at that. That's actually the criteria that they seem better at. If you looked at their calendar, if you shadowed them or something, the folks that are really good at this are just better at doing focused work. And it's kind of nothing else. Yeah. And by the way, you can't really change your raw intelligence, but you can get better at this. Like, this is a little bit like working out. Like, you can, you know, if doing focused work for someone who likes to procrastinate is a little bit painful, the more they do it, the less painful it gets, you know? And so, hey, you know, smart people certainly have an advantage, but man, hard workers, oof. Hard workers are dangerous. Hard workers are dangerous. Lazy people are, you know, as a startup founder, lazy people, lazy competitors are your friends. Yeah. It's good when your competitors are focused on the wrong things. Along these same lines, like, I wanted to talk about what we learned from hardware crowdfunding a little bit. Yes. So here's the issue. If you need to manufacture a lot of a product, it's much cheaper to do a big order in quantity, right? You follow me? Like, say we want to, let's talk about t-shirts. Let's say we want to create Dalton and Michael t-shirts. It's much cheaper to do an order for 10,000 than it is to do one at a time, right? Of the same t-shirt, 10,000 of the same t-shirt, yeah. Makes sense, right? And so crowdfunding and Kickstarter made sense because you could raise, you could sell the t-shirts at once. We actually had a YC company that did this called Teespring. Didn't work out, but it was like a way to order a bunch of t-shirts in a quantity. And then you get a big pile of money and then everything goes perfectly and you engineer it and you manufacture the product and all the backers of your Kickstarter get the product and everyone's happy. And you write off into the sunset, right? That's how it works, right, Michael? Like- That's exactly, and then you have, then you're Apple. Again, I don't think people are going to get the irony. We're being, I'm being facetious for my foreign friends that don't get the irony. So in practice, Michael, what actually happens? What do we see with all these companies that crowdfunding? No idea how to build it. No idea how much building it would cost. No idea how much the thing should cost. So they're charging users for a product that they don't even know what the right price is. The people who buy it have no idea how long does it take to build, which is only matched by the people who are building it having no idea how much it takes to build. And we haven't even gotten to the best part. No idea whether the thing actually solves the problem for the person. But a lot of money up front and God, like a lot of expectations, a lot of untested plans, you know? Well, that's, that's what's funny is like, when you think about it. it seems like the greatest thing in the world to be able to raise money from a crowdfund for your hardware company. But in fact, there's no sure way to make strangers on the internet hate you. It's a really great way to become infamous on the internet is to be like, here's a cooler with a blender on it and it's like $200 and back my Kickstarter. And then you don't ship it and you send out updates that the dog ate your homework and oh, it's Chinese New Year. I don't know, shit happens. And man, people really hate you. You're like a villain and thousands of people spend a lot of time trying to track you down and get the refunds and calling you a scammer. We've seen this ruin people we know's lives doing this kind of thing. I think that more and more, there are other areas of the startup world that are starting to resemble this kind of model. And I think that it's hard, man. It's so hard because I remember the run up to hardware. If you're a hardware company, everyone else was doing this. You look like an idiot if you weren't crowdfunding. And so it kind of goes back to the like, hey, man, sometimes when everyone's doing something, it doesn't mean that's going to work. Crowdfunding was what, like a six, seven year cycle? And I think it's still going to be cool. Like there's situations where it's a tool. I just think our startups seven, eight years ago thought it was a panacea. They thought it was the solution. Like if you were a hardware company, the only way to do it was to do a crowdfunding always. And now it's just, it's a tool that you could bring to market. But honestly, you know what the real story here is, is usually do it after you've shipped and manufactured a couple of versions already. Like I think best practices, if anyone here is doing a hardware startup, I think best practices is you don't do it at the earliest stages and you do it later when you have like V2, V3 and you're ready to manufacture at scale because then you won't create thousands of enemies on the internet that think you're trying to scam them. And again, like all these people had good intentions. I don't think anyone, like no one was actually trying to scam anyone. But intent doesn't matter to strangers on the internet, does it, Michael? No. You know, there is one better strategy. Do a software company. A lot easier. A lot easier. Yeah. And then along these lines, you know, clearly there's a lot of stuff happening in crypto and it's relevant to this, but just be aware if you take money from people at scale on the internet, they rightfully will hold you accountable. And I just don't know if people, it looks like people are handing out free money on the internet and I get why people want that. Just understand that there's a cost. And if people think that you, you know, rugged them, if you're, if you rugged the people with your thing, you know, it's going to be bad for your life. Right. Like there's a cost, like there's no, there is no free lunch, I think in this sense. And so, you know, just be aware of that. I don't, and again, I know people that have been on the other side of this. It's not great if they start trying to track you down. And it can change your life forever. I mean, like literally forever, like, like there are a few things in the startup world that kind of are like one shot kill. And, you know, this is one of them. You screw up with enough people's money, it never leaves you. Like you get that permanent Wikipedia page. That's not what, it's not what you want. All right. Well, that was a good wrap up. Great chatting Dalton."
  },
  {
    "name_video": "Dalton & Michael: How to change the world? Get the small things right",
    "description_video": "There are a lot of small things you have to get right to build a world-changing startup. Dalton Caldwell and Michael Seibel talk about the importance of understanding incentives and doing research when it comes to building a successful company.",
    "related_categories": [
      "Becoming a Founder",
      "Startup Ideas"
    ],
    "page_url": "/library/DS-dalton-michael-how-to-change-the-world-get-the-small-things-right",
    "youtube_url": "https://youtube.com/watch?v=qnav9vgHDHs",
    "mp3_file": "downloaded/Dalton_&_Michael:_How_to_change_the_world?_Get_the_small_things_right.mp3",
    "mp3_content": "Let's say that changing the world is like uprooting a tree, like a big, old, tall tree. Imagine there were two founders. One founder knew that trees have roots and the other founder had no idea, right? Like the trees with roots person, they have an advantage. They have a very large advantage. The tree without roots person, they're gonna have a lot of very horrible, how do I phrase this, on-the-job learnings. Yeah, it's not moving. Like, we don't get it. Like, we're pushing it and it won't fall over. Yeah, we've done all the math. Like if the tree ends right where the ground begins, like pushing like this, it should work. Hey, this is Michael Seibel with Dalton Caldwell and welcome to Rookie Mistakes. We asked YC founders for their rookie mistakes so we could share them with you and help you avoid them. Here's the next comment that was written in by a YC founder. We built a product because we thought the world should be a certain way, not because we had a customer who actually wanted to buy the thing we were building. This is coming from a pure place and we look at our heroes, right? We look at Elon Musk. We look at Steve Jobs and we have this model of people that forced the universe to their will. And Elon, electric cars are the future. I am going to impart electric cars. I'm gonna make it happen. And again, he kind of did, good for him, right? But for most of us mere mortals, it's pretty hard to force people to want the thing that you're selling or the thing that you think is good for them. It's really hard if someone doesn't want something to like debate them and convince them they do actually want it when they don't actually want it. Most people don't have organic experience with sales. And so they kind of, their vision is like, oh, I walked onto a used car lot to look around and this genius sales person convinced me to buy this car. And it's like, that's not even how it works in real life. You didn't just randomly walk on the used car lot. Nobody who doesn't want a car walks on the lot. You made a great point. Do you know what kind of idea we always come up, like I would come up with? Is guess what? Buying a car sucks and dealing with car salesman sucks. Buying a house sucks. Let's just like build a website and then we'll get rid of car dealers. So this is an example of that. It's like, you kind of run into something that's annoying and you're like, yeah, let's just get rid of that. And again, I'm with you. Let's get rid of that. You know, I don't like buying a car either, but I think what happens when you, again, haven't done the research is you were like, oh, actually there's a reason car dealers exist. And oh, and actually there's incentives for these, you know, this is like, the more you dig into that, you realize that you can't just wave a magic wand and make car dealers go away. You can't just sprinkle software on the problem. Yeah, or like realtors, like buying a house. Why is it so hard to buy a house? Well, you know, I don't even know how to summarize that, but like a lot of founders want to believe they can just like start a company and revolutionize the home sales process, right? So I feel where it's coming from, but in practice, the simplistic engineering efficiency arguments don't always work when applied to the real world. Yeah. I mean, you know about this hiring, right? Like haven't you seen this with hiring? I see this hiring all the time. I see the hiring startup applies to YC and the thesis is always the same. I'm an engineer, I'm a genius engineer, and I am being assessed by a non-technical recruiter. This is a crime, like this is a crime against humanity. Like it's dehumanizing that I have to go through this experience. And if only the hiring manager was empowered with software, the entire recruiting team and all recruiters would just go away, disappear off the face of the earth through the hiring manager and software. And what's weird is that like, I kind of believe the premise like I believe an engineer is better at determining whether another engineer is good or bad. However, I also look at the way the world is organized and I ask myself, well, if it seems consistently organized that these massive teams of recruiters exist at all these companies, there must be some efficiency going on that I don't understand, right? And the one core thing that I've learned is that even though engineers are better at grading other engineers, there are two other facts. One, they don't tend to enjoy doing it. And two, it doesn't tend to be the greatest way to extract value out of a great engineer. Yeah, it's not the best use of their time. Like if you're employing engineers, you don't really want them to spend all their time doing this. You want them to keep doing their jobs. And so what's funny is that like hiring companies inevitably run against this. Like you aren't going to defeat HR. You aren't going to get rid of all the recruiters. Even though you don't believe they should exist in the world, they are going to exist in the world. Either you're going to accommodate them or they will kill you. Like they tend to actually have way more power than you might think. And at the end of the day, the hiring manager is like, you know, this comes up a lot. Like the hiring manager is your like talk friend, but not your action friend. Like it's the person you talk to is like, oh yeah, I wish I never had to use these recruiters. Like I wish I didn't have to do this. I always get all these bad candidates, but they never do the thing you want them to do. Like use your product all the time. To push back on ourselves, hey, what are Dalton and Michael saying? They're not saying you should try to change things. Like shouldn't, aren't we, you know, shouldn't you be trying harder to make the system better? Let me answer that first. I don't know what you say, Michael. All we're saying is you can make huge changes in human behavior. If you really understand the subtle pressure points. You've got to really understand the motivations of all of the key parties and cater to those motivations, cater to human institutions. Like the people that do really change the way the world works, got a lot of small things right in the earliest stages. Like ride sharing, like the idea of getting to a stranger's car and then driving to the airport was like bizarre when it came out. Our younger viewers may not remember what it was like, but at the time it was like, yeah, here's my idea. A stranger comes to your house and you get in their back seat of the Toyota, right? That's normal. We would have, that was insane. And so to actually architect something like ride sharing, you had to really understand all of the people involved. They actually started off with those hired cars, those like limo cars, which was normal. So there's all these like little things that had to happen for that idea to actually work and to normalize ride sharing that if you didn't understand all the core constituents and you're just like, hey, cars are inefficient. We should have more, we should let people share rides. How many times has YC funded that idea before Uber and it didn't work? This was actually a really common bad startup idea was ride sharing. Isn't that hilarious? And so it's, I guess the point we're making here, and again, I want to hear what you think of this, Michael. You just need to understand the little things, folks. You need to understand the small motivations of all people involved in an ecosystem and design the thing well, rather than just think you can burst into the scene with something and like everyone will magically use your solution and boom, you know, hey, there's no more realtors. We can just buy and sell a house on a website. Like it's more complicated than that, man. You have to have a really, someone will solve this eventually. Maybe someone watching this video, but you have to really look at the intricate motivations of every person involved and have an answer for why they're incentivized to use your thing. You know, I'm going to try to come up with the bad analogy on the spot. Let's say that changing the world is like uprooting a tree, big, old, tall tree. Imagine there were two founders. One founder knew that trees have roots and the other founder had no idea, right? Like the trees with roots person, they have an advantage. They have a very large advantage. The tree without roots person, they're going to have a lot of very horrible, how do I phrase this? On the job learnings. It's not moving. We don't get it. We're pushing it and it won't fall over. Yeah, we've done all the math. Like if the tree ends right where the ground begins, like pushing like this, it should work. That's a great way to say it. There's so much under the surface. There's so much under the surface to understand with a lot of these ideas. And if you don't understand it, yeah, you're going to learn. You'll get some on the job training. That's a great way to say it. Here was the next comment that was written. YC founder wrote, we did not do enough research before deciding what to work on. We now realize the more research you do in your space before you write a line of code, the better. It seems like people go to the effort of starting a company, of trying to raise money for a company, of applying to YC with a company, of making it to YC interviews with a company. And we can tell you haven't Googled it. You haven't typed in like the idea that you're working on into Google or read any articles about folks that have tried it before. And this is such a self-owned. It's free to do research on those that came before you and failed. Cost you nothing. Doesn't take very much time. And to spend years of your life or months of your life or any amount of your life on an idea that you've not done just basic cursory research on is really dumb. Do you understand? Maybe you'll do it better or different, but to not even understand what came before you is kind of a willful ignorance. And I don't get that, right? It's almost like, Michael, do you think it's that they don't wanna know or that they just don't think it applies to them or, oh, this time it's different? Why would you obstinately refuse to research related companies in the past? I would say, one, this is very commonly a young founder issue. And one thing I see about young founders is their internet knowledge doesn't go way back. So I think the first mistake is, well, if I haven't heard of a company trying to do this, that means the company has never tried to do it. I think a second thing that people do is they ask their friends here. This is a situation where Googling is probably a hundred times better than asking your friends because if you're a young person whose internet history is four years old, your friends are probably in the similar position. And then I think the last thing is a bit of a psychological thing. I think that's what you were getting to, which is, if I'm so excited to do this, why would I wanna learn something that would defeat it before it started? Can I live in the illusion and the dream for a little longer? And again, let me be direct on this one. During the dot-com bubble in the 90s, a lot of people started companies and a lot of them tried pretty much every idea you can imagine. Every idea that you see today has some analog from the 90s. So dig in, look into it. See if people have tried this before. Same deal, in the 2000s, people pretty much tried every idea. And again, maybe in the example of something like Instacart, people had tried Instacart before, it didn't work. But the founder of Instacart knew that and they intentionally designed it to be better. You understand what I'm saying? Like they stood on the shoulders of those that came before them, smart. Versus if you're the founder of Instacart and you didn't realize that Webvan existed, how has that helped? Like, you're not helping yourself to not know about it. Same in the 2010s. Think about how many startups we funded that have tried stuff before. And so from our perspective, we see patterns in the ideas people start constantly. And we get it, you're better, smarter, faster, you have a better programming language, or whatever it is. You're better. We get the better. Better UI, Dalton. I got better UI. You know, oh, mobile. I remember in our era when we were young founders, it was like, oh, we're an app. We're an iPhone app. iPhone changes everything. Which is both true, but doesn't mean we should have discounted history. You know, Dalton, as you were saying, the platforms change faster than the human problems. So like you and I have lived through Web 1.0, Web 2.0, mobile, and whatever the hell you call it. The Facebook platform. We've seen many of these. But turns out that like, I want to go grocery shopping, but I don't want to go to the grocery store. That's been a problem the whole time. Or I want to get good food delivered to me in where I am, so I don't have to go to the grocery store. I don't have to go to the grocery store. I don't have to go to the grocery store. I want to get good food delivered to me in where I am, so I don't have to go get it. Same human problem the whole time. I want to get a job. Same problem. And I think that's maybe the logical reason why you should do the research, because it's almost guaranteed you're not solving a new problem. You're just using a slightly new technique or a new technology or something new to try to attack an old problem. Let's study how everyone else tried to attack the old problem. Sometimes you're doing something on the internet that hasn't been put on the internet, that hasn't been done on the internet before. With Justin.tv, live video hadn't really been done on the internet before. What was interesting was almost inadvertently we got to learn about the old way, because we started getting a lot of press coverage, and we started getting a lot of these old-fashioned video guys doing live video news coverage of us. And we would see them with their van would pull up, and it's like, we beam this from the camera to the van, to the microwave thing on that hill over there. It's got to all line up. And we're like, oh shit. And that was like state of the art. And so to me, it's like, wow, watching that, we were like, well, you know, our thing isn't as good as theirs, but it's way easier than having a van and a microwave dish up on a hill. Now let me play devil's advocate a little bit. Dalton, I have an expert advisor. I have an angel investor. I have a seed investor. I've got a series A investor. They're the experienced ones, and they believe they're working with me. Like, isn't that validation enough? Don't they, didn't they do this research? Kind of, I mean, let's go to this two ways. One, it's best to do your own work on this, because ultimately you're responsible for your company and it working or not. And this is what I tell people in the batch, I'm like, well, just make sure, you have to live your life. So if your startup doesn't work, it's not really my problem. Like I'll be okay. And so feel like you've done all of the diligence and research and you know the risks of what you're doing. But to the extent I have relevant advice, it could be helpful. I think the other thing is sometimes experts can be too biased positively or negatively based on a small dataset. So if you're working on a startup idea that someone had either personally worked on before or lost lots of money investing in before, they're gonna have opinions. In my case, media and entertainment startups are really hard. So I know a lot about them. I can advise people on them, but I'm not usually the most optimistic on that startup idea. And then, and so when you're talking to experts, just make sure you get a wide variety of them. I think would be my reaction to your pushback. And synthesize them. Just in the same way I said earlier, it's good to listen to lots of different kinds of music to synthesize together. I would just be synthesizing a lot of different opinions or a lot of different pieces of history as you're forming an opinion. You know, in the Brex example, they went and spoke to every person that ever tried to start a challenger bank before. And guess what they all told them? They told them two things. One, useful information that they wrote down in their notes the founders of Brex did. And two, they told them, don't do this. Are you crazy? So the Brex founders ignored that part, but this is similar. When you speak to experts, you just need to know what bits and pieces to draw from what they have to say, then to blindly accept what they say as facts. And that includes us, totally. Yep. Right? You know, I think you brought up something so counterintuitive about investors. Like I get so many emails from people saying like, I'm doing social this or live video that, can you help me? And like, I'm one of those people who's like, wow, I took a lot of hits during my social media live video days. Like, I think sometimes counterintuitively, investors who know slightly less about your space can be a little bit more grasses greener, like optimistic than folks who. know more about your space. And I think that's not something that I realize. I don't think that's something that's obvious to founders. I think that like, people assume expertise equals optimism. Yeah, right? Haven't we observed the opposite of that? Yeah, I mean, yeah, there's something nice about not knowing much about something. It's much easier to see it as a simple question or a simple problem. Like imagine asking the founders of DoorDash about food delivery and what they would have to say about it versus me. Versus a customer at food delivery. Yeah, exactly. Yes. Yes."
  },
  {
    "name_video": "Embark Trucks' (W16) road to IPO",
    "description_video": "Embark Trucks (W16), self-driving semi trucks, went public.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/Co-embark-trucks-w16-road-to-ipo",
    "youtube_url": "https://youtube.com/watch?v=LzIA3pH7lIg",
    "mp3_file": "downloaded/Embark_Trucks'_(W16)_road_to_IPO.mp3",
    "mp3_content": "Hey, everyone. I'm Jeff Ralston, YC's president, and I'm thrilled to be here with my friends Alex and Brandon from Embark Trucks. Now, Embark went through YC five years ago in the winter of 2016, and they've been through an incredible journey directly from their undergraduate days at the University of Waterloo—they have a few days there—to being founders of Embark. So, Alex, Brandon, welcome, and maybe we can just start off with you guys introducing yourselves and your company. Sure. So, I'm Brandon. I'm the CTO and co-founder of Embark, and we're working on commercializing the first self-driving trucks. And I'm Alex. I'm the CEO. Maybe I'll give a little bit of background on us, since Brandon decided to be somewhat vague. Yeah, and maybe like, like, that's like, we're commercializing self-driving trucks. My gosh, like, maybe dig in, like, give us a little color on that, because that sounds pretty huge. Sure. Yeah. So we're, Brandon and I met, as you mentioned, we both went to Waterloo. We met studying mechatronics engineering together. We did a little over, a little over two years of Waterloo before we dropped out and came down to San Francisco, well, to Los Altos at the time to do YC and to take the self-driving golf cart that we'd built. That was the first self-driving vehicle in Canada. That was kind of what got us in. We had, we had a video of this golf cart that we submitted to you guys as part of the, as part of the initial package. And people, I've shown it to a few people and they ask, like, why is the video quality so terrible? Because it's like, it's bouncing around and you can't, you can't really see anything. And I'm like, well, see, imagine that we were three college students and there wasn't a company, there was just a golf cart and a bunch of software. And then we had to fake a video. Well, that's exactly what happened. That's why it looks so terrible. But, but it was good. We came down, we did YC, Embark is now 200 people, a little bit over. We operate trucks across the U.S. Sunbelt. And yeah, that, that's like the, the past piece. Maybe I'll let Brandon kind of tell a little bit about, you know, what the vision is and the product that we're going to bring out. Yeah. And so looking forward from here, Embark is 200 engineers and we're looking to our very first commercial freight operation without a driver in 2023. Obviously we still have a ton of work to do to get to that point. Everything from safety engineering, electrical engineering, mechanical engineering, and robotics engineering. But I think in 2023, the way I'm thinking about it is this will be the inflection point for the business. This will be honest to God, the very first time that we'll have our trucks moving freight in a real commercial application. And it'll just be the first step in a long journey for what the company will become. So 2023 is the very first freight run we'll do. 2024, we start looking to commercialize and that's expansion across the Sunbelt and eventually up North from where we're from in Canada to tackle interesting scenarios like, like snow and in more of the complex areas. So I have, I have so many questions to ask about self-driving and, and the current status of the company and where you're going to, to elaborate on some of those things. It's, it's super exciting. I remember taking a drive in your truck a few years ago, when, you know, sitting back with all like, there were like, it seemed like there were 4 million blinking lights and 27 computers back there. And it was in the, in the back of the cab of the truck. But maybe we can roll back just a little bit. Alex kind of threw in that you guys were studying mechatronics engineering, which I guess is a fancy couple of Canadian words for like robotics. Is that right? More or less means kind of robotics. So you guys were like, okay, so you're like 19 and 20 years old or something like that. And, and you're studying robotics and like, tell us how did the, what's the founding story of Varden Labs, which is what you were called back then. Right. What, how did that come about? And maybe we can roll forward from there. I was going to say, maybe before we even dive into some of the story there, I think a lot of this for us was driven out of a passion of just robotics in general. Alex and I had met at the University of Waterloo in our robotics program. And I think we came together through a love of just building technology, robotics, spinning LED displays. Our friendship, I think, was built upon that. And I think the journey that we were about to embark on, pun intended, you know, it was just a natural evolution of, of how we acted and interacted in the earliest days. Did you guys know you were going to start a, I mean, I love the fact that I always tell kids at school, like, like what do I do? I say, build stuff. And I love the fact that you guys resonated around building stuff. It was always, you know, that's why we liked your video. We don't care if it's jumpy. You built a freaking self-driving golf cart. Amazing. So, but how did like this passion for building stuff evolve into, let's start a company, which is an interesting leap. Well, I'll let you in on a bit of a secret here, Jeff, which is that we didn't really intend to try to start a company at first. We, we started building stuff. We built like, you hear some of the early stuff, you'd be like, yeah, there's no commercial application for these products. We had a, we had a N64 controller that we were really irritated about because the little joystick was too much, too much backlash to replace the joystick with a Xbox 360 joystick, but still inside the N64 controller. Great. No business for that, but it was nice. And it did help me win a lot of games of Super Smash Bros. So that was good. Brandon and I, and, and worked on that together with our friend Mike. And then we built a, Brandon mentioned like a spinning LED screen. So it's like a single line of LEDs. You put it on a motor, you spin it really fast and you change the LEDs fast enough. And it's kind of like a 2D screen. So you can show like stuff on this, as long as you spun it really fast, it was kind of cool. And then kind of the next thing that happened was this golf cart. And it was a golf cart that drove itself. That was the premise. And we, we kind of had some idea of how it might be a business, but really, I think we were working on the technology because we thought it was incredibly interesting. And so I almost think the first two years or so of our relationship and of, you know, what would eventually become Barden Labs was really us and our friends in Velocity, Velocity being Waterloo's entrepreneurship residents. Basically it was like us and our friends building fun engineering stuff and having some vague idea that we wanted it to be useful to people. But, you know, we didn't, it wasn't like, it wasn't like we were trying to build a business. We were trying to build stuff that we thought was cool, that we thought was interesting. We thought might someday be useful. And then, you know, once we get into YC, you really start to, to hear more of the transition to actually, you know, be turning it into a business. Yeah. I even remember joking back then in the earliest days that we were sort of fooling the world in that we were telling them that we were going to build a business out of this so we could win pitch competitions and get the like pre-seed funding we needed to build our cool projects. And it wasn't until we honestly got into YC where we were like, okay, well, we've got to make something real here because Jeff has some expectations. Right. I do have to say, so, but you, so you guys were like in the entrepreneurial residence anyway. So you guys like, you know we're thinking entrepreneurship, startup companies, you made the leap to apply to YC with an idea for a company. So you must have kind of been thinking, yeah, maybe there's, maybe there's potential for something here. And you, you guys, let's actually go back to that. How is it that you apply to YC and why don't you, you know, recall for everyone what exactly the idea was with which you applied? Cause it wasn't really embarked trucks or it wasn't trucks at all, really. Right. Yeah. The so the, the original YC pitch was we were going to take the self-driving golf cart and we were going to build an electric sort of bigger electric version of it that could shuttle people around campuses. And so it was going to be this campus shuttle for universities and for for military bases and for other sort of closed areas. And you can kind of see this, this is like the first attempt of us really struggling with the, I think the inherent tension that defines Embark, which is that on the one hand, we're doing this really, really, really hard technical problem and building self-driving. And on the, and we would like as much as possible to narrow the focus of that problem to something that that can be done in an attractable way. Right. We're, we're really against boiling the ocean. At the same time, we need to build a business that can actually be useful to somebody. And so you can see this sort of tension or like, well, in a private campus, it could be really simple to drive and maybe people would use it. And that was kind of the original thesis that we, we sort of applied to YC with. And actually what we did all through YC was go through, we built a second vehicle. We built it in a ridiculous amount of time. It was like six weeks or something that we, from like getting the vehicle to, it was eight weeks to get it actually running. The trucks are taking a little longer, aren't they? It's just not, it's not quite as fast to spin it up, you know, these days. But the trucks work a heck of a lot better. So, you know, Yeah. Well, we also, I mean, you sort of, you sort of implied this. I mean, there was your original idea instead of boiling the ocean was let's find a tractable, tractable problem on, you know, where there's sort of limited traffic, where it's really constrained. So there's this constrained solution that will help the student. I remember even, you know, from the very beginning, you guys had the idea in mind, let's actually build something that people really want and can use early on, as opposed to in, you know, forever. And I think that, I think that sort of that idea infused Embark and all of its predecessors as you guys went along. And then I think even through YC, there was a lot of really important learnings, at least on my side on the technical front. I think YC's mentality of just get it in the hands of users and see what sticks. I think we tried to follow that as best as we could as a hardware company, right, building hardware, putting in the hands of university campuses. And I think that kind of the two key takeaways ended up being two of the most important values that ended up refining our business strategy moving forward. The first was, you know, as we went to different university campuses throughout California, we really got slapped in the face with just what what these places look like from a technology solutions perspective. So we'd go to Sacramento State. And if you've ever been there, they pride themselves in having like one of every species of tree in the world, roughly. And our localization system was heavily based on GPS at the time. And so there's these massive overhangs over the walkways. And all of a sudden, our localization system didn't work. But we'd go to Fresno State, and they'd have clear skies, but their paths would have hundreds of students on it. And then our planning system wouldn't be able to figure out a path forward. And very quickly, you know, going to six or seven of these places, you realize like, the more complex your domain is, the harder it is to solve this problem, which translates to the harder it is to build the technology. And so to the degree that you can, you want to simplify and focus building your technology solutions. And the other thing we learned going to have, we had all of these university campuses, essentially do paid pilots. So we shuttle students from engineering buildings to the center of campus. And the idea was there to in our seed round and to make YC happy show that, you know, we're, we're building a real product. And I think, to some degree, we proved the opposite, which was actually a good thing for us in the long run. But, you know, students were perfectly capable at walking themselves to class, there wasn't like a desperate infrastructure problem that the universities had that we need to increase students in classrooms. And the only way to do it is through efficient, automated, self driving technology, like, that just wasn't the case is what we found, surprisingly. But I think when we took the next step forward, we knew that we had to find a problem that was well scoped, and a problem that needed to be solved, and had a great business case behind it. Was more problems like what you really found was, you know, it kind of be nice to have self driving shuttles in campuses, but, you know, it's not, it's it's not like life or death. I have to say though, shout out to Mike Reed, who managed to convince a large number of universities to pay us money to shuttle students around their campus over the course of like the same eight weeks we were building the shuttle, when as Brandon said, they really didn't have a problem. So it was quite an impressive sales exercise to manage to get all those pilots. You guys were making real progress when, when I remember, sort of mid batch, we started to talk about like, construction sites in Australia or something weird, where there's gonna be self driving trucks. And I'm like, what, self driving trucks in Australia. And why don't you talk a little bit about your transition from the Varden labs and, and, and self driving college shuttles to embark in self driving trucks. It's kind of an interesting story in of itself. So this story actually starts early on with the golf cart. And like, it was probably, I think it was probably like a week or two after we initially ran the golf cart at Waterloo, and there was a bunch of press coverage. And this is like the first time that a driverless truck had run in Canada, or sorry, a driverless vehicle had run in Canada. And, and there was tons of tons of press people thought it was cool. And I got a cold email from this mine in Australia. And they sent me photos of these road trains, which are basically like one truck with three or four trailers, all filled with all filled with rock that they're moving around. Hey, you know, we saw us making this self driving shuttle work, you think that that technology would work on these vehicles? I looked at it, and I thought that it would, that was one of the first observations, because it was also very limited. It was like closed access. The GPS solution we were using probably would have been been good enough with some sort of slam augmentation. So probably would have worked. But we like we had a thing, we were working on it. So we kind of ignored them. And then as we went through YC, I'd been, I think I've been talking with them a little bit over the course of the fall. And then as as we started to struggle a little bit with Yeah, we're able to get these pilots, but we're not really sure that that need is going to be such a strong and compelling need that people are really going to move mountains for it. We started to talk to a few more of the sort of similar mining truck places. And I think the conversation we had with you, Jeff, was one of them offered us some amount of money to do a vehicle for them. Like we're gonna give you, I don't know, at this point, I can go look it up. But it was, you know, some some modest, but you know, as a YC company, you know, hundreds of thousands of dollars, something that was exciting to do one vehicle, right? And we're like, Oh, this, that's what it looks like when someone really wants your product, right? They like contact you from across the world, about the press release, and they're like offering you hundreds of thousands of dollars with no demo, no nothing, right? And so our question was, you know, we don't have that right now. How do we think about this in the context of YC? And then how do we think about in the context of finding a great use case for the technology? I think the decision we made on the I think the decision we made makes a ton of sense. The two decisions were one from from a YC perspective, people want to see that we're able to accomplish things. And so we aren't just going to like give up on this thing we've been working on for the first two thirds of the batch and go do something different. Because  "
  },
  {
    "name_video": "One order of operations for starting a startup",
    "description_video": "Michael Seibel shares his framework for coming up with startup ideas and getting started as a founder. This guide can help you walk the path from nothing to a launched minimal viable product (MVP).",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/CP-one-order-of-operations-for-starting-a-startup",
    "youtube_url": "https://youtube.com/watch?v=5fmDKGV0TnQ",
    "mp3_file": "downloaded/One_order_of_operations_for_starting_a_startup.mp3",
    "mp3_content": "One order of operations for starting a startup. More often than not, when I talk to a talented technical person who's thinking about becoming a founder, they're number one blockers that they don't have an idea. At some point during their formative years, they learn that every great startup started with a great idea, and if the idea isn't amazing, usually as judged by peers, parents, or other people with little startup experience, the startup will fail. I think I've read that before. I wrote this because this is the number one excuse I hear from people who want to start a startup. And it's so interesting to me. I think that there are all of these old entrepreneurial rules and business best practices that I think that people just want to apply hand in glove to a new industry. I think tech startups might be a little different. And so interestingly enough, I don't even think people are really taught how to find ideas. I feel as though people are sitting there saying, I don't have an idea, and they don't even really understand a process by which to get one. They think they think that it's supposed to happen organically. It's almost like out of the cartoons what I wanted to do with this essay was give people a framework that they could try to use to come up with an idea. So instead of this being a passive process, it can be an active process. I think one of the things that might be hard for people to see is now being in this world for so long, I have a lot of friends who wanted to do a startup and didn't know what they wanted to do, so you break it out into one, two, three, four, several steps. I'm going to outline it and then we can explain. So the order of operations. Here's where I'd start. Is there any particular problem that you're passionate about? The next step. Once you decide on a problem, find some friends and brainstorm potential solutions and the way to turn it into a fire is to work together and build and launch an MVP. That's basically it. It's not that complex. It's hard, but it's not that complex. No, it's not. So let's start at the beginning. Particular passion. I'll give you the conversation that I had with a founder. I was at a conference over the weekend called Afrotech and there were a bunch of young people who wanted to start companies there. This woman walked up to me and she said, I have an idea. I'm doing a startup that helps other startups. I call this a meta startup. This is a startup that I don't like because in some ways I think it's like a cop-out. But I haven't really done a startup myself. It's not great. So I dug in. What's a problem that you have? It was interesting. The woman was a mother and she said, one of the problems I have is that there are a lot of places where I don't know if I can use my stroller with my baby or if it's hard to get around or if I'm walking on the street. Does it have the proper sidewalks and so on and so forth. So I'd love some type of product that would tell me what path I should take that's stroller friendly. And I said to her, we're getting somewhere. Now we're not in this meta idea. Now we're actually solving a problem directly. But I asked her, how frequent is this problem? And she said, well actually, when I'm in an area that I know, then I know where to walk, I know how to do it. It's not that frequent. And how intense is this problem? It's like, well, you know, if I have to go over a curb or something, it's pain, but it's not intense. And I was like, you know what? A lot of people have that problem. That's a big problem. And I felt my douchebag investor go up. It's like, yes, you should do that. That is a problem. Even if you have solved that problem, you're going to be wildly successful. There are gajillions of people who have that problem. I somehow condensed all of the startup advice that she'd been given and everything she read to go to this wrong place when I just asked her, what's the problem in your life? And she almost immediately got to a place that could create real value. Now how should she solve that problem? Okay, yes, that's another question. But damn, it's a personal problem she has And at least if it's helping her, she knows it's halfway decent. So that I got to a really exciting place by just digging into what sucks for you. I think everyone can do that exercise. And I think that exercise can be informed by your work life or your personal life. So many startups I see were created because they were doing something at work So it can apply either way. And this is a very easy way to get people to pay you. Whereas doing things like strapping a webcam to your head, not as obvious of a problem. Pretty non-obvious. So once you find a problem, find some friends and brainstorm potential solutions to the problem. You don't need to skip to a solution too early. Whatever solution I come up with is probably going to be wrong. So what my solution really is, is a first hypothesis. And basically it's like, imagine I'm trying to I don't know, like redo some famous science experiment. Like I'm trying to figure out the speed of gravity or something. I first have to start with a hypothesis, then test, and then repeat, repeat, repeat and plug to my answer. I don't need to know the answer up front. Like that's not the goal. If you have a big enough problem, trust that if you come up with anything resembling an answer in a reasonable period of time, years, you have a big business. So instead of thinking, okay let me come up with an idea how to solve it, I think the more important thing is to start talking to other people about it. One of the top three is to have some co-founders. And it's really helpful to figure out who are the types of people who you can talk to about something and you riff well. There's some type of people you brainstorm with and I say, Craig, wouldn't it be cool if the sky is red? And Craig says, no. And that's the end of the brainstorm. As opposed to like, wouldn't it be cool if the sky was red? And Craig says, you know, we can't make the sky red but what happens if we tint all the windows in the house red so you can make it look like the sky's red? So you want to start having those conversations with people that you like. People, if you're not technical, people who are technical. People who you just respect their intelligence. And together you start coming up with an idea. And what's cool about that is that if you come up with that idea together everyone you've been talking to feels some ownership of the idea. And that helps kind of light that flame. Yeah, it's dangerous to be married to a solution. That is a real problem. Alright, so at this point, the most important thing is to turn that spark into a fire Boom, so biggest mistake that people make at this point is to think that the things they need to do is like, now I feel like some weird phantom MBA starts whispering in their ear. And it's like, you need to incorporate, you need to raise money, you need to da-da-da-da. It's like, kick that person out. That's not what you need to do. Can you just build a simple V1 of the product? Give it a try. The way to get that team even more excited is to try something. And oftentimes I see people kind of get lost in that legal or that fundraising world and never even got to give their thing a try. You don't need bank accounts to give something a try. You don't need an incorporation to give something a try for the most part. The way that you can really get that team solidified is just to get some kind of MVP and get one customer, two customers. This is one, the final test on like, hey, can we work together well? And two, man, it amps up the excitement a lot. And so that when you have to go through some of the bullshit of incorporation and stuff or fundraising, the excitement level's high. It's good to like to talk to you and if you just have an idea. Especially people who are on the fence about working with you. All of these things that you're saying, these are all excuses you create because it's easier than working on the actual problem. Well, yes, for some people. But I also think for some people some people are being, I don't know, some people are kind of being disingenuous in this process. But I think other people actually think, oh no, the right thing to do is actually to come up with an idea, fundraise, outsource an MVP, and then hire a team. Some people think that's the right thing to do. And it's like, the harder, that's a harder path. You don't have to do that. All right, so then you wrap this essay up with a couple things. The two failed orders of operations. Well, these are two of many, I suppose. So one, come up with an idea and then pitch to investors. Two, I have an idea but can't write code and none of my co-founders can either. Yeah, so we're in a time where there are a lot of startups. Unfortunately, people that you're pitching, if they're good, they're getting pitched by a lot of people. So you need to bring some real fire to that meeting. And a good deck is no longer good enough. I would argue that back in the day, like in the 90s, it was so expensive to get software made and host it online and get users that a good deck, or actually back then it was like a 100-page business plan, that's all you could get. That's all you could do without money. We're not there now. And so you're not bringing the fire if you just bring in an idea. Now some people can raise on just an idea, right? And if you're one of those lucky people, it's great. But I don't know, I'd rather be good than lucky. In terms of no technical co-founders, I'm surprised by this. I talked to a friend the other day who is thinking about starting something and doesn't have a technical co-founder yet. And even she was a little concerned about getting one, even though she's kind of been in the tech startup world. And I had to encourage her, I had to tell her, no, you can, you can do this. Not only is this not going to be that hard, it's easier than outsourcing it. The one thing that I see a lot is that I see people who can raise a little bit of money, go down the outsourcing route, and believe that they are progressing. They believe that the thing is moving forward. And what they don't realize is that, for the most part, they're going to need to iterate anything that's created by those outsourcers over and over and over and over again. And it gets pretty expensive pretty fast. And so the thing that I see so constantly is outsourcing, iterating with that outsourcer until you run out of money. You haven't figured things out yet. And so you have to go to an investor and say, well, I don't have anything, I need more money. And that's death. And what's so sad about that death is that often you don't realize it until the very end, and after you spent money. And sometimes it's people's own money. They do their savings, they hand their savings to these people. And I don't think the outsourcing folks are bad or morally wrong. I just think that people should take the hustle that they have and apply it to the number one problem. It just turns out that getting a technical co-founder to push back, if you had someone outsource something and then that got you a couple customers and then you found a co-founder, that's a great outcome. Well, it's interesting because I think that a lot of people go into the outsourcing route with that intention. But the thing that they don't realize is that they didn't feel comfortable going and finding a technical co-founder now. And they don't have any traction, and they don't have a product. Most likely the outcome is the outsourcer will give them a shitty product, a shitty V1. They won't have any users then. And now they'll go after a technical co-founder with a shitty product and no users and less money. And they want to give the co-founder 10%. They're not actually in a better position. There are people who do go from a contractor to a big company, but I would argue it's a harder path. And it's a path that's much more likely to lose you a lot of money. Thank you."
  },
  {
    "name_video": "How to pick which startup to work at",
    "description_video": "YC alum Justin Kan and former YC President Sam Altman talk about why you should or should not work at a startup, and what being an employee at one entails.",
    "related_categories": [
      "Working at a Startup"
    ],
    "page_url": "/library/AQ-how-to-pick-which-startup-to-work-at",
    "youtube_url": "https://youtube.com/watch?v=cN62reafxLg",
    "mp3_file": "downloaded/How_to_pick_which_startup_to_work_at.mp3",
    "mp3_content": "Okay. Hello, everyone, and welcome to Work at a Startup. This is the first time we've done this conference since 2012. So it's a pretty special day for us, and I'm really excited to see that we had such an amazing turnout. In a moment, I'm going to introduce our first keynote speaker, Justin Kahn. Justin is the founder of three YC companies. He is now running a company called Atrium, which you're going to hear about later this afternoon. But before that, he was the founder of Justin.TV, and he actually presented up here on this stage eight years ago, back when he was running Justin.TV, and he's going to tell you some really awesome stories from what happened back then and talk about why you should or should not work for a startup. So please welcome Justin Kahn. Thank you, Jared, for giving away my talk. It's me, Justin Kahn. I am YC's remedial student. I had lost track, actually, of the number of times I'd been through YC until Jared reminded me. It's been three times. Actually, four, at least. And some of those companies worked. Some of them didn't. And my newest company, which went through YC in the last batch in winter 2018, is called Atrium. And one of my team members will be up to tell you about that later. But what I want to talk about today, and it was supposed to be a surprise twist but no longer is, why you should but also why you shouldn't join a startup. And I'm going to start with why you shouldn't join. Okay. There's a couple reasons. My goal here is just to give you the most unfiltered, raw feelings that I have to help you make an informed decision. But there's lots of good reasons why you shouldn't join a startup. Number one, the management at startups generally really sucks. I wish I was joking. But no, it's true. I used to joke that there were YC companies, there were two kinds of YC companies, there were the rocket ships with bad management, and then there were the other companies with bad management. And as kind of a corollary to that, it is likely that if you join a startup, especially in early stage one, you won't necessarily get enough mentorship or direction on what you're doing unless you really actively force people to give it to you. Second reason. You are likely to not actually get rich joining a startup. It's statistically improbable that if you think you're going to join a startup and then be set for life, that is unlikely to happen. So that would not be a good reason to join. I'm sorry I ever told you different. And then the third reason, which I think is a new reason in Silicon Valley actually, is as Silicon Valley has matured in the last ten years since Jared and I have gotten here, one of the things that I think has changed is people, originally when I got here, I think people just wanted to work on interesting shit. And it was a much smaller number of people. Now I think that there's a lot of people who come to Silicon Valley because it's a great career and there's a great trajectory and there's stability. And if you want those things, you should not join a startup. I've noticed more and more people, even people I've recruited more recently, coming in and saying, you know, what's the career pathing here? What's the five-year plan? And I'm like, we don't have five years of money. So if you want stability, I think you should go join Facebook. Maybe not today, but next week. Next week. All right. All right. So now on to what you really came for, which is why you should join a startup. And when I was writing this in the parking lot five minutes ago, I identified three reasons. All right. Number one, you will get access to jobs that you're completely unqualified for. And you might not be able to do. So my example actually comes from that very first work for a startup. Eight years ago, you know, I was on stage talking about Justin TV, and we actually recruited someone from that. And his name was Guillaume. He was from France, programmer. And actually, he came to work for a startup and got two offers from two different companies. One was Justin TV, and one was actually Scribd, Jared's company. And I sat down with Guillaume, I remember, in a coffee shop after work for a startup, and he said, oh, I have this offer from Scribd. And I said, what was it? He told me. I was like, I'll pay you $10,000 more right now to sign this instant. And so he accepted. Sorry, Jared. He accepted, and he joined Justin TV, and within a year, he was running our entire Rails back end for a site that was like a top 100 site, and I think a top 10 to 20 Rails site at the time. It was like in 2010, so the bar was a lot lower. And that was a job he was like completely unqualified for, and he would never have gotten the opportunity to do if he didn't join a startup where we didn't really have anyone else to do it. And he went on, actually, this is a pretty cool story. We spun out a company called Social Cam a couple years later. He went on to be the cofounder of that company as we spun it out at Justin TV. And got an even greater scale challenge when they scaled from zero to 128 million users in two months. And so just the rate of learning for him was pretty incredible, and now he's a cofounder at a company called Triple Byte that does recruiting for YC companies and others. Okay. So that's number one. You are going to get access to jobs you are not qualified for. Number two is joining a startup is a really good gateway to starting your own startup, if that's a goal of yours. In the second work for a startup, we in 2012, I came back with another company called Exec, and I recruited someone else, actually. Someone really talented. His name was Finn Barr, and he was an engineer at Groupon at the time. And I think he really wanted to break into startups with the idea of eventually starting his own. I think one of the things that's really important is to just put yourself in positions where you're around people who want to do the things that you want to do, or people who are like the person that you want to become. One of my cofounders of Twitch, his name is Emmett, always told me that, you know, you are the average of your five closest friends. He wasn't talking about just me. He was talking about everybody in general. And I really think that's the case. So Finn Barr went on. He was, like, you know, working at Exec. That company didn't work out super good. But he ended up meeting a cofounder there and starting a startup, which was a horrible idea. It was a terrible idea. I told him not to do it at the time. But he ended up getting a start, right? He was, like, he became a founder. That didn't work out. He ended up joining YC for, I think, just over a year, and then started a new startup that just went through YC and is off to the races and doing super good. I won't give away that. It's called Shogun. You should check it out and probably work there. Okay. So starting your own startup. That's the second reason. The third thing is to maximize your I should slow down. I still have a lot of time. Sorry. The third thing is to maximize your own speed of learning. I think this is actually the most important reason why you should join a startup. And I have kind of two examples of people who did that working with me. And they are both the two cofounders of Cruise. And I think that they're cool examples because one is kind of maximizing learning on the way up and the other on the way down. And I'll explain what that means. So the first cofounder of Cruise, his name's Kyle Vogt. We recruited him at Justin.TV in the early days to he was an MIT student. And we had found him, and he was, like, kind of this person that we thought we needed because he was a hardware hacker and we thought we were going to build a hardware company. And so we convinced him to come out from MIT for his, like, month-long break during January. And we bought him a one-way ticket and we were, like, just work for a month. And then we never bought him a ticket back. And Kyle basically became our VP engineering. And he became a cofounder, actually, in the VP engineering. And Kyle's an amazing hacker. He always has been. Very amazing tinkerer. And one of those people with a can-do attitude is just going to if you're, like, hey, let's build this thing, he's going to go figure out how to build it. But he didn't know jack shit about scaling systems or building, you know, scalable system architectures. And so that was, like, the job that was available, though, as soon as we stopped, we figured out that we should not build hardware. And so that's the job we kind of assigned him. And he had to figure it out really, like, on the fly. And so he ended up, you know, packing this live video system. There was nothing kind of there was, like, no precedent, right? We basically built this scalable dynamic live video system that he engineered and architected mostly badly at first, actually. And it would go down all the time. He ended up there was this one kind of funny story where, you know, we had no idea about like we had no idea how to build reliable systems. And so every time it would go down, we would, like, call him, which was, like, every, like, 36 to 48 hours. And so he could, like, never go on vacation. Which is, like, not really acceptable to him. So it was just, like, one time he was just, like, I'm going. Goodbye, basically. And we're, like, no, what's going to happen if you're, like, not around? He went to Tahoe or something like that. We ended up, of course, like clockwork, after, you know, 36 hours, the site went down. We had no idea. We were calling him on the phone, like, ten times. It's a live video site. So if it doesn't work, it doesn't have any value, right? Like, just right then. So we started calling him, and he didn't pick up. Luckily, he had left the address. We ended up having to order a pizza to go to his house to read a message to him, like, a pizza delivery driver. Read the message, like, answer your phone. The website is down. So that was, like, our concept of, like, a pager system at the time, right? So really figuring everything out, you know, one step at a time, kind of inventing everything from scratch. The end of the story is he eventually architected this live video system that by the time Twitch sold to Amazon in 2014 was the fourth largest bandwidth consumer in North America, 15 points of presence around the world, did 90 petabytes of data transfer a month. And so, you know, I mean, his rate of learning was incredible as a software architect and obviously kind of went on and took a lot of that to Cruise, which is also an incredible story. The other cofounder of Cruise was my brother, Daniel, who met Kyle actually as an intern at Justin TV when he was a college student. We recruited him. Not really recruited. It was more like nepotism. I'm sorry. I hope he's not watching right now. That's fucked up. That's fucked up to say. So, no, he also had a, like, crash course in startups over the next couple years. Didn't work for me for very long, but when he did work for me, he recruited these guys to the site. I remember Justin TV when we were doing, like, the kind of live streaming site. He recruited this unknown band. It was called the Jonas Brothers, and they ended up, like, crashing our site. I mean, they were part of the reason that Kyle hated his life. Ended up crashing the site over and over again. But the cool thing was he joined as this intern. He got to, like, you know, interact and kind of, like, make a deal with, like, what was basically, like, became the number one kind of teen band at the time in 2007. And then later on, you know, he joined me as a cofounder when I started this other company, Exec, in 2012. And the cool thing, you know, I mentioned, you know, Kyle's kind of the example of, like, how you might learn at a startup as the startup's growing and on the way up. I think Daniel's a perfect example of how you will also learn and maximize your learning if the startup is completely and horribly failing. Because in 2013, by the time we had worked on Exec for a couple years, we realized that the home cleaning business is not a great business. I recommend you don't join a home cleaning startup. And we ended up trying to sell it. And this is a great story. This is my last story. This is a great story. So we were trying to sell it. We ended up negotiating a deal with a company called Handy that's in the East Coast and against all odds has survived in this industry. And we negotiated the deal. And, like, it was taking forever. There was, like, tons of lawyers. It was dragging and dragging and dragging. And I was so burned out, I was just like, I'm going on vacation. Daniel, you have to deal with it. It's not a very responsible thing to do. And so he ended up having to be the one who closed this deal over the next, like, month while I was in Thailand. I mean, I was, like, kind of doing stuff on the phone. But he was mostly, like, running this deal for not a lot of money, you know, just a bit of stock from Handy. He ended up, like, it was, like, a horrible experience. He learned all about, like, negotiating, you know, from and when you want to have leverage in a deal, when you, you know, when you should, like, all the things, all the different minutia of negotiating a deal. And he learned it on this very small, horrible deal, which we were mostly just trying to offload because we were so burned out, we wanted to get out of the business. Two years later, fast forward two years, he had become a cofounder of Cruise. Cruise had built an amazing technology team that was executing super well. And, you know, you guys know the end of the story. They ended up selling to GM for a billion dollars. And he applied. The cool thing, I think, is that Daniel applied all of those horrible lessons he learned from, like, trying to negotiate this shitty, piddling deal for our company to his next company and ended up, you know, they sold it for over a billion dollars. So you're going to learn something. Whether the company succeeds or fails, you'll probably walk away with something valuable. The last thing I'll say is that the way I think about it is, the way I think about growing and, like, your speed of learning, maximizing your speed of learning is from a quote that our YC partner, Paul Buhite, had generally said, I think he says it to every batch, which is that, you know, it's not your Y intercept, but it's your slope that's important. And so I think you want to, you know, the way I've always thought about it is, how do I figure out ways that I can put myself in the position to maximize my own personal rate of growth and rate of learning? And I suggest that you do the same, regardless of whether that's at a startup or not. All right. Best of luck. Next up, I'm supposed to introduce you. I'm sorry, I forgot. Next, we have YC president, Sam Altman. All right. Justin covered a lot of what I was going to talk about, so I'm going to have time for questions. That was awesome, though. So I want to talk about how to pick which startup to work at. The most important considerations, you all already know. Picking a company you're excited about, people you're excited about, a role you're excited about, that's more important than the rest of the stuff I have to say, but that's also intuitive. And so I'm going to talk about the things that are not intuitive, or at least haven't been for me. And I want to just echo one thing that Justin said, because I think it's so important. Every job I've ever had, and probably every job Justin's ever had as well, I'll speak for myself at least, I've been wildly unqualified for. And doing that, I think, is, like, the number one secret to having a really great career. Like, that's the way you have a super fast rate of personal growth. And I think the way careers go is you should put in the most of the effort at the beginning. Because it's this compound interest-like thing, where the work you do now, the learning you do now, the improvement you make early in your career gets to pay off for all the rest. So you may as well work hard and take a chance on a role that you feel unqualified for early. And if you flame out, you flame out, and you go try something different. But my experience is when someone does a role they're unqualified for, it either goes way worse or way better than expectations. And a lot of the times, it goes way better. And if you hold yourself back from doing this because you're afraid of not working out, which is totally understandable. Sometimes it doesn't. I think you miss this opportunity to have the sort of most impactful career you can. And that is what's so cool about startups, is you can get jobs you are wildly unqualified for. So I want to talk about how to... to pick a startup. And I want to talk about this from the perspective of being an investor, because I think what you're doing when you go to work at a startup is making one big investment. If you're really good, you are going to take way less cash comp you can than you could get at Google or Facebook. And you are going to be compensated for that by investing your time in the startup in return for equity. So people have different risk-reward trade-offs. You might want a later stage startup with its lower risk or return. You might want higher risk, high return or early stage startup. But I think the right framework of this is to think about it like you're investing in a startup. And for me, at least, learning to invest in startups was deeply counterintuitive. And I'm going to talk about eight things that I learned about how to evaluate startups for investment. This mostly applies to the stage of startups you'll see here today. Number one, this is another Paul Buhite-ism. It's more important that a startup have a small number of users that really love the product rather than a lot of users that really like the product. Most startups either have no one who cares at all or a lot of people who are kind of like, yeah, that's OK. Very rare to find a startup where people love the product so much they spontaneously tell their friends. But if you think about the really big companies today, Google, Facebook, you probably heard about it because someone was like, this is awesome. You've got to sign up. And people talk about product market fit, all this other stuff. I think it's sort of hard to evaluate. But one thing you can do is either talk to some users of the company, or ideally you are one yourself or know some, and is this product so good that people are telling other people they've got to use it? And that, I think, matters much more than the vanity metrics, number of users, current growth rate, whatever that most startups throw around. So if you only do one piece of diligence, this is the one I would do. Number two, trusting exponential growth. And as a byproduct of that, trusting momentum. Momentum is sort of this really important concept to startups. If things are feeling good, if it's growing, if people are loving the product, if good people are joining, that tends to keep going. And if that falters, it's very hard to get it back. So does the startup have a good sense of momentum? And is there some sort of exponential growth model? By the way, I've been investing in startups for like, I don't know, 8 or 10 years now. I still have not managed to get good at intuiting exponential growth in my head. So I have to do it in a spreadsheet every time. But I've learned to trust it. And if a startup is growing exponentially, and it's not fake, it's not like, you know, they're buying all the users or something, it tends to keep going. And making that leap of faith, because almost no one understands just how powerful exponential growth is, even if they say out loud they do, making the leap of faith and trusting that is super valuable. Related concept. This is the third one. The size of the market today matters almost not at all. It is the growth rate of the market and how big the market will be in 10 years. So I think the number one mistake investors make when they miss out on a really great opportunity is they look at the size of the market today. Now, they only care about how fast a startup is growing. They don't care about the size of the revenue today. And why they can't make this same leap of faith for the market, I've never understood. But if you make a really great decision on what startup to join, it will probably be a smallish market today that's growing really quickly. I saw this morning on the way down here, this is like the 10 year anniversary of the iPhone app store. So 10 years ago, not very long, the size of the market for iPhone applications was $0. And a lot of investors, somewhat rationally, but obviously wrongly said, all right, well, we're not investing in these iPhone apps because this is a small market. I also saw this morning the Uber deck when they first raised money and they said, their TAM is like $2 billion or something. And if you think about the world from a certain set of constraints, that was true. But it turns out that the market of people that wanna move around cities easily grows quickly when you have a better product. So thinking about the growth rate of the market, not just the growth rate of the startup, super important if you're going to identify something really big. And a related concept to that is the biggest companies that we have been able to be a part of and I think the biggest companies in the technology industry as a whole happen when there's a technological platform shift. So for example, stick with the iPhone example, the iPhone app store launches in 2008. In a period of say 2009 to 2012, there were a lot of companies that you could never have started before and that all of a sudden you could. Uber is a good example, but there's other ones like Snapchat, which really just didn't quite make sense before mobile phones and apps. And so trying to identify these platform shifts, that's another place where I think you can find almost all of the big startups. Most people are wrong about this. So you have to learn to trust your own intuitions here. It's very hard to differentiate between real trends and fake trends. The technology journalists in particular seem easy to trick about this, but honestly, so is everybody. And so if you read the news, you're not gonna find the answer here. If you talk to most people, you're not gonna find the answer here. But if you think hard and you really pay attention, sometimes you can. The metric that I use to differentiate between a real trend and a fake trend is similar to loving a product. It's when is there a new platform that people are using many hours every day? So the iPhone is a good example. People are using their iPhone every day. So the iPhone comes out, not that many people buy it, but they use it all day. VR headsets come out, a lot of people buy it, but they never come off the shelf. So VR, by that metric, is not yet a real trend. And at the point where people start having their headset on hours a day, that might be a good time to start a VR company. The fifth consideration. Is the company exciting? And here's why that's important. The hardest thing to get, especially right now in Silicon Valley, is a critical mass of talented people at one company. It's easy to get the first few employees, you can give them a ton of equity, give them big job titles, but that stops to work. And then you get to employee 30, employee 300. Why are they still gonna join? Rather than start their own startup, join a small startup, go to Google. And this ability to have an exciting enough mission to be able to concentrate talent, this is why I think it's easier to start a hard startup than an easy startup, because people care. And if you don't have this, it's really hard. I have basically in my life tried, had to recruit a lot for two different startups. One was a company I started long time ago that did social networking on iPhones. And another was OpenAI. And in the first one, we could tell people like, hey, you know, like you should come do this. It's really cool. And it was kind of cool. And OpenAI, we can say like, you know, if we don't do a good job, or if someone does not do a good job building AGI, like the world will very likely get destroyed. And we need you specifically to do this piece of it. And if you don't do that, it's really bad for the world. And that is a really hard pitch to say no to. And so a startup that has a reason why people need to join it, is super powerful. The sixth one is thinking about how impressed you are by the founders and the early employees at the startup. So as a general observation, it is extremely powerful whenever you can identify something in the world that is true and important and that most people don't believe. And in fact, I think this is one of the two major market inefficiencies that startups get to exploit. There exists a small number of founders in the world that are so good that they end up bending the world to their will. And they can do this without a lot of business experience. And they are like hundreds of times more effective than people that aren't like this. And, you know, there are programmers that are, I know people hate the 10X engineer meme because it's so often used to justify being a jerk, but there are plenty of people who are 10 times as good as average programmers and also nice people. And in companies where you find a lot of these people concentrated in the early hires, this is a huge deal. And these startups consistently outperform. And the quality of the early people at a company, the quality of the founders, is so determinant of success. And it has such a bigger impact than people like to believe or wanna believe about the world, that when you find this, it is one of these secrets about the world that is critically important and that people try not to believe. So I think that's a really great thing to look for. The other big market inefficiency to look for is ideas that sound bad, but are good. So most ideas that sound bad are unfortunately bad and you should try not to join those companies. But there exists a class, and this is where YC has made most of its money, of ideas that sound bad, but are good. If an idea is good and sounds good, then the big companies will try to do it and usually out-compete you. But there's a really important difference between startups and big companies. If you have the same idea at a big company and you wanna do it, you have to get your boss to say yes, your boss's boss to say yes, your boss's boss to say yes, and then Sundar to say yes, and then Larry Page to say yes. And in that chain of 20, one no kills the entire idea. And if the idea sounds bad, someone will, rationally so, say no. If you're a startup, you may also have 20 conversations, you may go up and down Sand Hill Road trying to convince someone to fund it, but you only need one yes. And the one yes, you get to go do it, even if it's 19 no's. It's very different than what has to happen at a big company. So one idea I often ask startups is, can you tell me why this idea sounds bad to the big companies but actually is good? And then a final thing that I look at are, this has been a longstanding YC metric, what are the smartest recent college graduates excited about? In our experience now over more than 13 years that YC has been in business, that group of people consistently is three, four years ahead of what investors focus on. And that has been a model for us of identifying real trends before they happen. That group is not always right. There have been some big failures. But directionally speaking, young people I think have more time, they're more on the forefront of technology, they're less set in their ways, whatever it's for, that, what those people are going into is an area that we have always looked at. So another question that's related to all of this is how to get good advice about what startup to join. And you have to choose the peers whose opinion you care about in your life very, very carefully. Most people will have, bring whatever biases they have about what a career should look like or what a safe choice is or what a good thing to work on is. They'll bring all that to the table. And most people have let bad processes in behind their firewall and they will give you bad advice. And so trying to find a group of people that you can go to in your lives whenever you have a big career decision that are kind of open-minded and intellectually rigorous thinkers and who care about the similar kinds of things that you care about, whatever that is, is a really valuable thing to do. I was lucky to find a handful of those people very early in my life. I still ping them on every big decision. And the advice that they give me, I think is generally quite good and very different than what I'd get from most of my friends. So finding people who can give you good advice about what startup to join is really important. I was gonna talk about how to think about equity at a startup, but I only have one minute left. So I will say this, you probably aren't getting enough. I think most startups are not nearly generous enough with employee equity. The difference, the amount of value that you create as an early employee versus a founder is not the 100x difference that you usually see reflected on a cap table. We try to get YC startups to be more generous with equity, and I think over time, it's trending in that direction. But remember, startups need really talented people. Startups need people that could otherwise go work at Google and make a gigantic salary. And I think you should demand to be treated fairly for that. That's my, that was supposed to be five minutes, but there's the 25 second version. All right, thank you very much. We are going to start with company presentations now. And thanks for coming today. Hi, I'm Jose. We're gonna go alphabetically. The first company up is Armory. Hello, YC. Hello, YC. Armory is here. And we believe that software is the highest leveraged way to improve humanity. But how do you feel when you hear deployed a production? How has that gone for you? Maybe. So, roll back. Or, fire drill time. But don't worry. Armory is building a next generation deployment platform to help software teams ship better software faster. And we're looking for skilled individuals that want to grow together and learn from one another. And growing, we have done tremendously. Last year, we were at $60,000 annual revenue. Today, we're at 1.3 million. There's a lot more to talk about. Find our booth. Thank you. Hi, everyone. I'm John, and at Astronis, we are building small, low-cost telecommunication satellites. Why are we doing this? Because 4 billion people in the world are not online right now. This is a huge problem. And we need to do something about it. We need to do something about it. We need to do something about it. We need to do something about it. We need to do something about it. We need to do something about it. Why are we not online right now? It is a huge problem. There are so many people out in the world who do not have the access to knowledge and education and all the things that they need to improve their lives. The other side of this is this is an enormous business opportunity for the right company to tackle this problem. There's actually very few things in the world that grow exponentially 30-plus percent year on year, and the world's hunger for bandwidth is one of those things. There really is just few things out there you can imagine. Sam talked about growing markets, and there are very, very few things, few places where the market grows this fast and this consistently. So why is this still a problem after all of these years and all of the many billions of dollars that have been spent in space? And the answer, I think, is captured pretty well in this picture. So this is a picture of what telecommunication satellites look like today. They are massive, double-decker, bus-sized satellites that cost several hundred million dollars or half a billion dollars each. With small satellites, we can do the same job at a fraction of the cost. At Astronis, we've already put our first test satellite in space, and it's orbiting right now, working great. We launched it a few months ago. We have raised a very large funding round, Series A, from a firm called Andreessen Horowitz, so very well-funded, gonna be around for a little while, see this thing through. And we have a spectacular team of engineers. We're just over 30 people now, from Google, SpaceX, Skybox, some of the larger airspace companies, a huge array of specialties across software, mechanical, controls, you name it, every possible type of engineering you can imagine. And really, I mean, I just can't say enough. enough about how fortunate we are to have this team. You may have heard that SpaceX is doing a constellation of low-Earth orbit satellites to try and solve this problem. And the lead antenna engineer for that constellation just left SpaceX to join Astronis. Yes. Oh, sorry, one other really important point. You do not actually have to have space experience or even embedded experience to join the team. We have a whole group of veteran engineers. They have put the operating system in place. This is more application-level code. So please do not let that dissuade you. Wanted to talk a little bit about the company culture. So we're very hands-on. We build lots of hardware. We build it fast. We iterate quickly. You have an opportunity to learn from all these different disciplines and engineers of all stripes, like I mentioned, if you want. We have something we're very proud of, which we call a blameless culture. These things are hard, and we know things are going to go wrong. And the other thing is we take work-life balance seriously at Astronis. And we have baby goats. It's the most random thing ever, but we'd love to do trips out to the farms outside of the Bay Area, do these retreats, and do fun things with the team. And that's Astronis. So thank you very much. Hi, everyone. My name's Chris Szymanski, and I'm the head of engineering at Atrium, a tech-enabled law firm for startups. And at Atrium, we're making legal services fast and transparent, and we're building a platform that turns documents into data. So legal is broken, and we hear this from our clients all the time with quotes like this. Atrium works to fix legal. And we do that with a fully digitized legal services platform that's powered by both real lawyers and AI. So our team of lawyers makes better decisions thanks to our AI technology. This is a massive market, over $400 billion per year, and it's highly fragmented, with the top 25 law firms only holding a 13% market share. There's also very few, in fact, only one law firm startup who's tackling this market, and that's Atrium. We employ cutting-edge ML technologies, and every day, we work hand-in-hand with both lawyers, and you'll see here, engineers and lawyers working together. We're working to transform an extremely outdated industry and lowering barriers for entrepreneurs to get access to legal services. We'd love to have you join our team. We're hiring software engineers, and you'll get to work with Justin Kahn, our CEO, myself, head of engineering, Max Cantor, our head of data, and our 20 other engineers. We'd love to have you apply at atrium.co slash engineering. Thank you so much. Thank you. Yes, she's up. Is she? I'm sorry. Oh, am I next? Sorry. OK. How does this go? Big button. OK, big button. I don't have a slide system. OK. Cool. Hi. Hello? Hi. My name is Tammy Sun. I am the co-founder and CEO of Carrot Fertility. We make customized fertility benefits for modern, high-tech, and high-tech businesses, and we're very proud to be a part of that. So what does that mean? That means that we make it easier and more affordable for employees to access everything from personalized fertility education through text, video, voice chat with fertility experts, data-driven learning modules, and making egg freezing, IVF, and everything in between, all the way to surrogacy, easier and more affordable. And so our mission is fertility care for all. The first goal of our mission is to make fertility benefits, and Carrot in particular, as standard in the modern workplace as medical, dental, and vision coverage. This is a mission that has met its moment. Today even, more than 50% of millennials believe that fertility should be equal with dental and vision as coverage at work. And so these trends have helped Carrot become the leading provider of fertility benefits in the U.S. for mid-market companies, and we're moving very quickly into the enterprise. We have thousands of members, who we call employees, across the country, and we're operational in nearly 30 countries around the world. So why join us? Well, there's three reasons. First, it's the product. What sets our engineers apart is that each of them is a key player in every aspect of developing the product. You're not just simply releasing release after release. You're going to help decide what to build next, and you're going to be responsible for making sure how we measure success after the release. The second is product market fit. So we know that companies want Carrot, and we're really lucky and proud that companies who are working with us love it. So we're really proud to be working with some of the most important public and private technology companies in the world, but we're also breaking into finance, media, real estate, and even retail. So the market opportunity is enormous, and this is a really exciting time to be at the company, where you're going to be pushed and challenged to be doing way more than probably what you're qualified for. And the last is that this is a mission that matters. And if it matters to you, then this is my promise to you. You're going to have the opportunity to do some of the best work of your life on a solution whose time has come. And in exchange, Carrot and me personally promise you a 50X opportunity for growth in ways that you won't be able to achieve anywhere else. So I'm here today with my product engineering team, Pat, Dan, and Arun. I don't know where you guys are. If you could raise your hands. Please come find us afterwards to talk about fertility, what we're doing, why we're doing it, how we're doing it, what's egg freezing, and why you might be our next teammate. Thank you. Hey, guys. I'm Dave from Chartio, and our mission, we call it Join People on Data. And basically what that means for us is Excel's been around for about 30 years. Anyone can work with data. It's really easy to use. But as soon as the data gets bigger than a spreadsheet, as soon as you're working with databases of data, all of a sudden you have to know SQL. You have to be a data scientist. You have to be an engineer to work with it. We think that's really stupid, and we're out to solve that. One of the ways we've solved it is we've created what we call Visual SQL. We've made SQL visual. So it's just drag and drop. Anyone can do it. It's a way better way to explore data, just like Windows made DOS visual so way more people could use computers. We've done that with SQL. And it's one visual drag and drop language that works with all the databases, Redshift, MySQL, Hadoop, Hive, like all the databases. Also Salesforce, Marketo, HubSpot, all the different sources of data you could be coming from. One language for all, and then we make it really easy for you to make charts and dashboards and share that with your whole team. So we're in the BI space. We compete with Tableau. We consistently get rated just really, really well. There's four main categories that we're rated on in our space, and we have a lot of competitors. And we're number one in three of those categories and number two in the fourth. So we do really awesome. Because of that, we have 800-some customers and some really great brands. These guys are using primarily Chartio as their main data tool, and we're profitable. We've done all this with 10 or less engineers. Our competitors have hundreds of engineers. We've done this because, one, our engineers are really awesome. Two, we just keep really good coding practices. We keep minimal technical debt. We have really strong coding review processes. We keep really pragmatic about our code base, and it's never been a better time to build more features onto Chartio. We keep it that way because this will be a product that will always have continually more and more interesting, awesome projects to build on top of it. It's like a data language. There's all kinds of things to continually build on it, so we know that. So we're looking for more senior and mid-level engineers to join our awesome team, and we're also looking for some junior engineers who are really smart and interesting learning from a really top-notch team. So thanks a lot. applause Hi, everyone. My name is Jonathan, and I'm co-founder and CTO at Checkr. At Checkr, we do background checks. We started four years ago and built an API and then discovered a lot more issues around the industry There's a lot of unfairness, a lot of inaccuracies, and a lack of transparency, and we are working to change that. Every month, we work with great customers such as Uber and Lyft and run 1 million background checks every month. Our team is more than 200 people, and we are profitable and making money. On the engineering side, I wanted to highlight a few challenges we have. Identity matching is really hard, and it's core to the accuracy of the background checks. We use ML to improve automation and efficiency, and it's in production. Platform reliability is also really key as we process millions of transactions every month, and it's really hard because we work with 10,000-plus data sources that are really unreliable and unstable. And then every feature that you would work on would touch millions of users. Come chat with us and learn more. Thank you. Hey, everyone. I'm Chandan, co-founder of CoinTracker, a portfolio and tax manager for cryptocurrency. Raise your hand if you own cryptocurrency. All right, pretty tech-savvy crowd here. Basically, what CoinTracker does is it integrates all the top crypto exchanges and wallets into one unified dashboard, and with the click of a button, you can file your crypto taxes, too. Underneath the hood, in order to file your taxes, we are building some foundational tech that relies upon billions of rows of pricing data across over 2,500 coins, over 100 exchanges, and it complies with the local regulations in different places, all under a simple, easy-to-use interface. Since we started building this in September, we've grown to over $350 million of crypto assets tracked, over 55,000 exchange accounts, generating over $300,000 of revenue. And this puts us in a unique position, to now we can build even bigger products, such as a unified front-end for cryptocurrency, non-custodial wallets, and enterprise crypto accounting software. And we're backed by some of the best in the industry, including the co-founder of Reddit, the founder of Protocol Labs, the first seed investors in Coinbase, and a bunch of others. Previously, I was a product manager at Alphabet. My co-founder, John, was a Google software engineer and successful founder, and now you have the opportunity to be a founding engineer at a hyper-growth startup. Come find us afterwards in the blue shirts to learn more. Thank you. Thank you. Hi, we're Crowd.ai, and we're building an API for change detection for aerial, satellite, and SAR data. Why are we doing this? We're trying to replace large-scale operations that are primarily manual. Why is this interesting for you guys to join? Well, we're solving a two-pronged technical problem. The first is the lack of training data for segmentation, and we currently have one of the largest segmentation training data sets in the world in over 126 countries. And secondly, we have built our own convolutional neural net architecture for segmentation of geospatial data. In fact, we recently placed at CVPR. So what are our customers using our data for? We currently can find roads better than what's on Google Maps and on OpenStreetMaps, and we work with ride-sharing companies and mapping companies. The same product that we have built is also used by the U.S. government for various finding different types of objects. The same type of tool that we use for ride-sharing companies and mapping companies, we also use for insurance and utilities companies. In this case, we find destruction post-wildfires in Santa Rosa as well as flooding in regions after hurricanes. We currently have rolled out a new product for E&P companies. We're one of the only companies, if not the only company, that can find fracking on a weekly basis, if not daily basis. Why are we so good at what we do? We've got a fantastic team of 10 from Google, OpenAI, IBM Watson, and University of Oxford. Please come join us as a machine learning engineer, and please talk to me and my colleague, Jagar, over there in the back. Thank you. Hi. My name is Yen. Hi. I'm Varsha. And I'm Max. And we're from DoorDash. Now, I was mingling a little bit earlier, and people asked, DoorDash, are you guys still a startup? And we are a startup. We're still a startup. It's been, you know, four or five years. I think one of the advantages of being an older startup is that the founders can now send people to events like this. So, I'm not a founder, but I represent DoorDash. And so, what is DoorDash? I think most of you know what we are. We're a technology company that specializes in food delivery and last-mile logistics. I know we're known for food delivery, but we are actually expanding into other verticals like groceries. So, you may have heard this spring, we actually started a grocery pilot with Walmart. So, we're growing very, very quickly. Now, some fun facts. This spring, we raised $535 million from top investors like Sequoia and SoftBank. We deliver food from over 100,000 merchants across the nation every day. And we're expanding into cities, new cities, every week, and expect to be in 1,600 cities by the end of the year. Now, there is something with a more mundane service or ordinary service like food delivery, but I think one thing you should think about is why do we take it for granted? And we take it for granted because that's where society is trending. So, in a world where same-day delivery becomes ubiquitous and is actually the norm, that's kind of what we're thinking about, and that's where we are sort of taking our platform. So, come join us. Our booth is pretty obvious. So, we're very good people. Work with us and get 80% of the startup experience without all the risk. Thank you. Thank you. Hi, I am Peter, the CEO of Emberse. We issue corporate cards that enforce expense policies, so, as an employee, when you spend on behalf of your business, the expense is pre-approved, a report is generated, and a budget is tracked in real time. We started the year with just two full-time founders, and we're now at nine employees with three engineers. We have 200 paying clients who collectively spend more than $7 million a month using our product. We've been able to scale our business to its current size with just three engineers by being disciplined about code maintainability and by preserving a simplicity of infrastructure. I was one of the technical co-founders of a company called Crocodoc that was acquired by Box, and I've had years of experience working with the other two engineers on the team. Together, we've launched credit cards using both MasterCard and, most recently, on the Visa Payments Network as one of the first expense solutions to launch a product using Stripe's new issuance API. our business we're looking for an engineer to take ownership of a sizable piece of our infrastructure by augmenting our fraud detection algorithms using machine learning or by designing new bot interactions for our slack integration. Again my name is Peter and I'm joined by Cameron and Winston, the other two engineers on the team. We have the only purple table in the other room and I hope to talk to you afterwards. Hi, I'm Jared Seehofer. I'm the CEO and co-founder of Enzyme. I'd like you all to remember three numbers four, seven, and ten. Average time to market for a new software medical device is four years. For a hardware device like a pacemaker at seven years and for a new drug ten years. Why is that? Well it's kind of a complex question but this is one reason. That's an FDA submission and yeah that picture was taken in the 60s we've evolved a little since then. You could send PDFs now but you still have to send a paper copy. Bottom line is that if you're in life science tech you're dealing with enormous quantities of data. The problem is is that regulated companies have terrible information systems and this leads to things like rote work doing paper pushing, delays, and arbitrary decision-making. The good news is as software engineers we have an idea on how to fix the terrible information system part. How do we do it? Well we combine a Rails web app with an NLP ML backend that extracts data that users upload and programmatically writes FDA submissions. And even though we're working in a regulated environment we still follow software development best practices with hourly CI and weekly deploys to production. Most importantly though by automating the FDA approval process we're helping life science innovators get their products to market one to three years faster than they otherwise would. And our customers are making some really really cool stuff. If this excites you we'd love to talk. We're hiring for both full-stack and NLP ML roles. Thank you. Hey everyone I'm Michael from Vocal Systems. For the past several decades there's been little to no innovation inside the four walls of brick-and-mortar retail. Whether it be inventory management like out-of-stocks or what's going on here? No? Bear with us. Cool. Yeah. So where I was leaving off is inventory management is a big problem with inside brick-and-mortar retail. There hasn't been much innovation. How we find things on sale or items in the store and the checkout process in general is extremely inefficient. There's a lot of friction there and all the friction inside of brick-and-mortar retail right now is driving a lot of us to go a shop online. What we're doing at Vocal Systems is we deploy hardware and software inside retail environments and we use images to provide solutions like out-of-stock detection, automated checkout, or indoor location to let you know where you are while you're traveling throughout the store. Currently we're working with six of the world's biggest retailers to solve these challenges and we're looking for deep learning engineers, mechanical engineers, web engineers, and data scientists to scale our business. Come talk to me at the Vocal Systems booth. Looking forward to automating brick-and-mortar retail with you. Hello everybody. I'm Rock and I head engineering for Her. Her is the largest, world's largest LGBTQ female space and queer consumer app. We run our mobile app that is used by over 3 million users in 55 countries. We reach 38 million people per year and we organize over 100 events that attract over 80 gay people. Our goal is to make home for world's identities and we want to make every lesbian, queer, and bisexual person feel at home with us. Our core values that we feel reflect the entire team is that we're great together, that we foster ownership and responsibility, that we try to learn, master, and contribute back to the team. And we are kind of low on ego and we always struggle to do more with less. Some of the things that engineers have done on our team recently is a deep and wide deep learning recommender for meeting new people. It's a scammer detection tool using NLP and we've recently internationalized both mobile apps. First language French for many more to come. Currently we're mostly looking for mobile engineers. We're kind of looking for thoughtful product-oriented engineers who care enough about UX and are going to help us create a space that has been like traditionally super underserved into something that community will feel and take for its own. And we all work tirelessly on this goal by believing that this is something bigger than us, that we're creating a better new future for a lot of the demographics that have traditionally been overlooked. Thank you very much. Hi everyone, I'm Betsy Larkin. I'm the founder of Honeylove. We are a direct-to- consumer fashion brand that makes clothing with built-in targeted compression that accentuates body shape. We are part of the current YC batch and we're hiring a founding CTO. Some of you might not be familiar with this space but we've been able to prove that there's a strong demand for our products. We raised over $300,000 on Kickstarter in the spring and this past week we started shipping and also launched sales from our website and in just the first week we brought in over $30,000 in revenue and are also profitable right out of the gate. In terms of the founding CTO position, we're looking for people who are passionate about creating amazing ecommerce experiences. So on the front end, custom checkout flows. On the back end, you know, fulfillment, warehouse, inventory management software. And then as the third team member, you guys would also be instrumental in helping us to build out the team. So if that sounds interesting to you, please find me. Thanks. Hello, hello. My name is Alex Harmsen. I'm one of the co-founders of Iris Automation. We build collision avoidance systems for industrial drones. Drones that are being used for a railway inspection, farming surveys, mining exploration, even things like package delivery and air taxis. About a year ago, pretty much every single aviation authority around the world mandated this type of collision avoidance system to be on board millions of drones everywhere. Essentially these drones can't be used for any sort of beyond line-of-sight operations, anything autonomous, anything scaled, any one of the industries that I just mentioned without this critical technology. The way we build it is we use computer vision and AI software to be able to allow these drones to see the world the way a pilot does. This is not easy. I mean, essentially we're taking these current drones and we're adding these systems to them to be able to actually allow them to see objects at thousands of feet away, in real time, with size, weight and power constraints. This needs to be aviation quality, a problem similar to self-driving cars, but way harder. We do this by modeling human perception and really understanding how pilots see the world. Ultimately it's software, we're able to do remote software updates, continuously improve the product using the latest embedded GPUs and cameras. We do this by layering traditional geometric computer vision algorithms with more semantic understanding through artificial intelligence. So far we've collected more than 50 terabytes of data of real collisions. We have a chief pilot on staff, we have drone operators, we're going out into different landscapes, environments, different conditions and collecting all of this data, as well as all of our customers internationally. Not just that, we're able to do hundreds of thousands of collisions in simulation, in hardware in the loop environments. We've built up an entire architecture behind the scenes to make sure that every new algorithm is tested and is worthy for the world. Currently we have a 25 person team, we've raised over 10 million dollars. These systems are actively going out and for us it's a combination of people from the self-driving car worlds, avionics, me and my co-founder, we came from Boeing and NASA originally with lots of experience in the drone space. So if you're interested in any of what you just heard, specifically for computer vision experts and anyone who has worked on C++, come and find us. We have a booth in the other room and a huge sign that you won't miss. Hi everybody, my name is Andrew Corey, I'm the CEO of Level 5. So autonomous cars, they're like a really hot thing in 2018 and there's so much hype. But autonomous cars still suck and that's really sad. So we make maps. Maps you say? Haven't maps already been created? No, we make HD maps. And HD maps are really different than regular maps because there are these 3D representations of the environment. It includes everything from lane lines, traffic lights, signs, pedestrian crosswalks, pretty much everything, you name it. And so we're mapping this using cameras and computer vision. And how do we do this? Well we have a program called Paver and if you have an iPhone you can download Paver and make money just by driving. So we have a lot of uber drivers on the platform doing this for us. And Paver is a really special application because it has on edge machine learning. And we really get your phone cooking. Like we use metal, we use Cormel, we use everything. And we're running powerful computer vision algorithms to do segmentation, to detect cars, pedestrians, lane lines, buildings. We like literally get your phone cooking. It uses 5% of battery every two minutes or something. So basically what I'm saying is we need people to help optimize this. We have over 10,000 drivers. And yeah so we're getting a ton of data and we have like 500 terabytes or 500 we have almost a petabyte of data. And so we take all this, the reconstruction happens on the phone, but then we send all these point clouds up to the server and we aggregate all this stuff together server-side to create these really really high detailed centimeter level maps of the world. And this is like really important for self-driving cars. It's like a git diff for maps. And self-driving car companies like really need this. But we really need you, especially if you're an iOS engineer or just someone interested in mapping or autonomous cars or vision or anything like that. Come talk to me. So yeah come map the world with us. Thank you. So every company you're hearing from today has the potential to shape the world, but they all have one big problem in common. They can't hire enough talent. We're fixing that. MakeSchool is a new model of college focused on training students for high growth tech companies like all the companies you're hearing from today. We're starting with computer science. Eventually we might look to robotics, biotech, and more. We have placed our alumni at Google X. We've placed alums at OpenAI. One of our alums leads mobile at Linebike. And about 40% of our students get offers from YC companies. That gives you a sense of the talent that's coming out of here. But we also care a lot about diversity. 40% of our students are underrepresented students of color and 50% are low-income students. We are the first bachelor's granting institution where students can graduate in only two years and they can pay tuition as a percentage of earnings once they graduate. Instead of building software we want you to build developers. But this is not just like any teaching job. This is like being a senior engineer mentoring and coaching junior developers. Our school feels much more like a workplace than a classroom. Building developers will accelerate the future and maximize your impact. It's really high leverage because instead of working for one company you're training an army of students to go work at all of them. You should work with us if you're passionate about teaching and coaching and mentoring. If you want to build a scalable system for upward mobility for all the people who don't have the opportunities that we do. And you want to help accelerate economic growth everywhere in the world. Thank you. Got some giggles. No, we're serious. Okay, hi. My name is Hua. I'm the CEO and co-founder of Meadow. We build cannabis sass. So our products include retail point-of-sale systems, inventory management, automatic compliance reports and delivery. We process over 10 million dollars of weed per month and it's growing. Our mission is to build the best software in the cannabis industry and it's growing from 9.7 billion dollars last year to 47 billion dollars in the next 10 years. This is our team. We're a team of 10 people working together in San Francisco. Our engineer team is four. Three of which are my co-founders. So you, one of you lucky or two, will be our next second or third engineering hire. Which we're really excited about. Our front end consists of three React apps that power the point-of-sale, that power the dispensary management system and then we have one iPad point-of-sale app that's deployed across all these dispensaries in California. We utilize Node.js and really run the latest version, utilize the latest JavaScript technology such as Async 08. Come say hi. My co-founders Scott and Rick are here wearing our Meadow shirts. We're looking forward to hanging out with you guys. Thank you. Welcome. My name is Keith with mystery.org. We create video explanations for kids questions like, why is the sky blue? Most questions that children ask, grown-ups don't know how to answer. Eventually kids stop asking. and their curiosity fades away. So we're creating explanations for every question kids have. Think of us like a visual Wikipedia for kids. We're already used by teachers in 50% of elementary schools in the US. We'll do nearly $8 million in sales this year. And now we're scaling our platform to answer every question and reach kids everywhere. And we need a couple engineers to help us. There's 30 people on our team. Eight of them are engineers. Our team's former Facebook, Palantir, Google. And we move fast. We deploy code a dozen times a day to production. But that's just table stakes. We're looking for engineers that are passionate about creating great product experiences. You'll work closely with our designers, our customers. You'll make product decisions. And you'll be surrounded by a group of people that you'll learn from every day. People who've contributed to Rails, people from the Bundler core team, people who find Ruby a little slow and will drop into C and write a custom gem. But what is it that you're building? This is a new kind of wiki software. Wikis are great for a group of people to collaborate on creating a text document. We're building a platform so a group of people can collaborate on creating video explanations for kids. So come join us if you want to help the next generation of children grow up and stay curious. We'll be across the way. Thanks. Who here rents? Cool. 93% of landlords use credit as the primary indicator of who they're going to rent to. 67% of people under the age of 35 have subprime credit scores in America. And less than 5% of people will ever be evicted in their life. When it comes to renting, credit is broken. But we figured out how to fix it. So Neighborly is a credit bureau that has built an AI-based credit score for the rental industry that helps landlords know who they're renting to while helping tenants access fair credit and build their credit by just paying their rent. We give our product away completely for free, which includes a credit report, criminal background check, everything. We make money selling renter's insurance. And that's allowed us to grow from 1,000 to 350,000 rentals in 18 months, which is like one half of a percent of America now using us. That means that every day, 20 people at Neighborly decide where thousands of people live, which is a responsibility we take super seriously. And that's what we need your help with. So if you want to solve hard problems with real world applications of AI, building inclusive user experiences that really need to matter for an incredibly diverse group of people, and you want to have an impact on something that really matters, like housing and credit in America, then you should come talk to us. Thank you. Thank you. Hello. I'm Scott Patterson. I head up the engineering team at Notable Labs, where we're doing personalized drug discovery for blood cancer. So the basic idea is that we take a patient's actual cells, we test different combinations of approved drugs, and we see what kills the cancer and keeps the healthy cells alive. We focus on combinations, because many of the driver mutations are very difficult to drug with a single drug. And in blood cancer, particularly, if you start with a single drug, it may lead to a resistant clone and relapse of the cancer. Broadly, our goal is identifying personalized combinations of approved drugs that a patient can use today. We're using the same platform to do drug discovery, so both internally and in partnership with a number of pharma companies. The platform we're building consists of our proprietary biology, where we're miniaturizing the microenvironment around the cells so that we can scale up and do the number of combinations that we need to test. We have our custom-built software machine learning to handle automating the analysis and handling these complex scientific workflows. And we've automated the whole thing with robotics and lab automation so that we can scale up and have a reproducible assay. We're actively hiring software engineers, data scientists, and cancer scientists. So if you want to work on an awesome mission where you can have an impact on patients' lives today with a team of super talented and diverse engineers and scientists on a modern tech stack, come and talk to us. Thank you. Thank you. Hi, everyone. I'm Lucas from Nova Credit. I'm the CTO and co-founder. And Nova is the world's first international credit history platform. And we have successfully raised a Series A recently and are backed by General Catalyst and Index Ventures. And of course, are actively hiring. And I'm going to tell you a little bit about our problem first and then our solution. So what is it that we're solving for? The problem is that immigrants today, they just cannot get credit in foreign markets. So all of your credit histories that you have and your borrowing behavior and your payments details, they are stuck in their market. And this is a really big problem. This is a really big problem because if you get into a new market, you want to get started. You want to get like rental. You want to, sorry, rent an apartment. You want to get a credit card. You want to lease a car. So how do we solve this problem? We solve this problem by having one API for global data. So this is creating one standardized format across the world for credit history data. We aggregate from database across all over the world and expose that with one unique API data point. So why do you want to, why should you work at Nova? So we have technical challenges that are really interesting. So we have massive ETL pipelines. We have infrastructure systems that need to be cross-region. They need to talk to each other at all times. And we face a lot of graph machine learning problems because of all these database across the world. So come talk at us, or sorry, come talk to us at our booth. We have talented 30 people at our San Francisco office, beautiful office. And yeah, just come talk to us. We are looking for infrastructure system engineers, back-end engineers, front-end engineers, full-stack engineering, basically across the board. Thank you. Thank you. Hi, everyone. I'm Kevin, the co-founder and CEO of Pathrise. We are YC for careers instead of companies. So what does that mean? That means we help and mentor students and young professionals to get the best possible job and find fulfilling work. Everything from outreach tactics, to resume review, to interview preparation, and to negotiation advice. One of the things to keep in mind is that we're not a coding boot camp. We're not an interview prep course. We're not a replacement for college. Instead, what we do is we guide you through your job search afterwards and help you figure out the stuff in your early career that nobody else is going to teach you. The catch is it's completely free until you get hired and start work. The whole point is that our fellows pay $0 out of pocket. And instead, we recoup our investment back from an income share of their salary only after they've already started their employment. It's affordable to anyone, accessible to anyone online, and we actually have aligned incentives with our fellows. You might want to join our team if you want to do more than just code and would love to spend a significant amount of your time working with students that are aspiring to be engineers. You might want to join our team if you want to fix a broken model of career services that it's ridiculous how far and how bad it's gotten. And you might want to join our team if you're not looking for a company that's building the next big social media app or gadget. You're not looking for a company that's going to maybe provide marginal utilities to hundreds of millions of individuals. Instead, you're looking for a company that invests in every single fellow that we go through and one where I can say that even if we collapse today, there's a hundred students where we've literally changed their lives. And for those of you that are less experienced and aspiring engineers, for those of you that are still students or recent graduates, come talk to us. We'd love to give you free advice and any help you might need, no strings attached. Thanks. Thank you. Can you click for me? Hi, my name is Tracy Young. I'm one of the co-founders and CEO of PlanGrid. Hello, my name is Ralph Goody. I'm the CTO and co-founder of PlanGrid. PlanGrid builds beautiful, simple, powerful software for the $14 trillion per year construction industry. We are part of Y Combinator's Winter 2012 batch. In the last six years, we've helped build over 1 million construction projects. Today, we have paying customers in over 80 countries. You probably don't know this, but one out of every 10 people in the world eat, sleep, and breathe construction every single day. And for us, it's a privilege to be able to write software for some of the hardest working people in the world. As an engineer, what excites me about PlanGrid is not only do you get to work on deep, technically challenging problems, you also get to work with customers that you get to know, that love you, that love your software, and that rely on it to get their job done. So we're hiring across the board. We're hiring mobile developers. That's iOS, Android, even Windows. We've got web, back end, Python, data science, machine learning. We're hiring everything. We've got a modern stack, just like everybody else here. We're a diverse team of 350 people and growing. We deeply care about fairness in the world. In 2016, PlanGrid took the United States Equal Pay Pledge. And I am proud to share that we pay our men and women equally. We also have, thank you. We also have great benefits for individuals and families. And we pay well. And we would love to meet you. PlanGrid.com, Ralph, move your head, slash careers. We're also by this big ass fan over in the other building. So come talk to us. Thank you. Hi, everyone. I'm a senior at PlanGrid. I'm a senior at PlanGrid. No? OK, perfect. Hi, everyone. My name is Avni. And I am the founder and CEO of Poppy. Our mission is to build the modern village for every family. Right now, we're doing that by building the platform that connects parents with amazing fetish caregivers when they need child care. Why is that important? Well, there's a shiny, happy version of parenthood out there. And then there's the super messy kind of reality. The reality that needs lots of help and support, but for lots of reasons doesn't exist. But we believe that you can do that with the amazing people that live in our communities and with a little bit of thoughtful technology. Our general thesis is that if you can connect parents with the people that they trust, are available when they need them to be, and are a really good fit for their families, you can really approximate that idea of village. And the amazing news is that over the last two years, we've been doing that. For thousands of families in Seattle, we've been creating that experience that Sam is talking about that you're looking for, that really fanatical product that is really solving real problems for people, both on the parent and family side, but then also importantly, creating really amazing jobs on the other side. But we're only just getting started. If you think about how to scale this kind of marketplace, there's so many interesting and hard problems to work on. What is the right matching model when you're talking about people and families and kids? How do you think about supply and demand optimization? How do you think about automation when you're thinking about people? And overall, just how do you create really simple and seamless technology that almost disappears and becomes invisible within people's lives? So we're looking for people, smart people, that want to solve a really hard, really important problem and join our team in Seattle, who is made up of really fun, amazing, dedicated people that really want to solve this really important problem. So if you want to solve a real world problem, build features that get into the hands of our users the next day. If you're driven by talking to users and really iterating and understanding how a product can help them, and if you want to use your superpowers for good and live in a city that you can actually afford to live in, come talk to me. You can either catch me on Twitter or find me at the booth in the other room. Thank you. Awesome. So great. Hello, everyone. I'm Chris. I'm the CEO of Precious. Precious uses AI to organize the photos of your kids. Here's the problem. My daughter's three years old, and I have 20,000 photos of her. In 2018, that's normal. Our technology will scan that mess, find the meaningful moments, and build the perfect album for your kids. We believe that this is important. We believe that this is important because we believe it's very important to make families happier and stronger. We're an early C-stage company, and we're only three people, but we already have a lot of traction. Users love our early products so much that they've given us 4 and 1⁄2 star reviews over thousands of reviews, and we have 62,000 subscribers who pay $5 per month to use our app. And these are subscribers over 100 countries around the world. That translates to almost $3 million in annual revenue with a three-person team. Joining Precious won't be for everyone, but here's why it might be awesome for you. You'll get the impact, responsibility, and equity of joining an early-stage company that also has revenue and profit. On a small team, we really do want you to take tons of responsibility and ownership, come up with ideas on your own, and ship them to users quickly. And finally, we're not a sweatshop. We truly value work-life balance. I have two toddlers, and I get home to have dinner with them every single day, except for tonight, because I can't get home to San Francisco in time. So in summary, we're Precious. What we offer to you is a chance to use AI to organize the photos of people's kids. We want you to take big responsibilities on our small team, and you'll get a chance to come to work to make families happier and stronger every day. If that sounds interesting to you, please come find me and my co-founder wearing the icon of the smiling baby later. I would love to chat with you. Thanks. Hi, my name is Phaedra. And I used to run revenue and operations at an Andreessen-funded startup. And I realized that technology actually had the potential to do incredible good. And so a friend and I co-founded Promise, and we're helping people get out and stay out of jail. Right now, 75% of people in jail have not been convicted of the crime they were arrested for. They're there because they cannot afford bail. 2 3rds of those folks are bail-eligible, are nonviolent offenders who are stuck in jail. What we know is the longer you stay in jail, the more likely you are to go back to jail. The more likely you are to lose your job, the more likely you are to lose your housing, the more likely you are to have serious consequences. So what do we do about it? Well, the good thing is that there is a solution with software. First, most people are likely to go to jail for technical violations. That's like they missed an appointment with their probation officer. And so software can actually help figure out how do you make your appointments, where should you be, how do you speak and connect. We can do all of that through software. More importantly, we can give people tools about how to analyze data so that we can start to figure out who should not be in jail. We have an incredible team. Mike, to my left, we got from Uber. Who wants to work at that little startup when you could work here? We stole our engineering lead from Stripe. Again, I mean, come on, big choice, promise. And so we have an incredible team of people who have not just raised money from incredible investors like First Round Capital and Jay-Z, but that we are committed to social change with the best people leaving the best places to create a company that actually can create equity and use technology to scale justice. Thank you. Thank you. Wow, what a motivating startup. Let's give it up for Promise. That was awesome. Yeah. I'm one of the founders of a company called Quazi. I'm Jay, and this is Sylvie. And we are here to talk about how we accelerate the pace of scientific discovery. So what is Quazi? We've built the operating system for scientific labs all over the world. And labs use us to run their operations, and the way we make money is not through the software. We give the software away for free, so labs in India, in China, all over the world can benefit from the software productivity. We make money when labs buy their supplies from us. So what we are doing is pretty hard. We build world-class software for companies all over the world, and we give it away for free, and we make money when we ship supplies to them. So it's Salesforce and Amazon put together. We have a million cubic foot warehouse in the East Bay, and we are opening up a new warehouse on the West Coast in the coming year. So who are our customers? This is Elizabeth Blackburn. She got the Nobel Prize in 2009, and she's one of the nine Nobel Prize winners on Quazi today. We have more scientists who won the Nobel Prize using our application than any academic institution in the world. But it's only not small labs. Biology is gonna reshape the way we live, the same way that physics and computer science changed the 20th century, biology will reshape the 21st century, and we are building a platform to make that happen. One of our customers is using molecular biology to make plant-based protein, and they buy from us. But that's not just startups. We have publicly traded pharma and biotech companies who use us and buy from us. We have 4,000 customers nationally. We have made $30 million in sales this year. We are a 60% company, so it's the right time to join us, where we sort of like proven out the business model, and now we are gonna scale this up globally. And why do you work with us? So what's it like to work at Quartzy? I think at Quartzy, you'd be joining a team of the most genuine, ambitious, and driven people that I've ever met. And we focus not only on helping the scientists, but also helping each other succeed. So come join us. We're located HQ in Palo Alto, if you like the sunny California weather. But if you like breweries and cheaper rent, we also offer remote positions, so you could be working in Portland, or if you want to be like the stock photo, and code in a suit, or take a month off in, or not off, but spend the month in Maui, you know, we have those remote opportunities as well. So all coming together, we have science, people, and remote opportunities. Okay. Thank you. Woo-hoo! Great. That's great. And it's just that, I've moved that. Cool, and in the middle. All right, hey everybody. So we're Reach Labs. And Reach Labs is long-range wireless electricity, but that's actually useful. So we're able to provide a reliable source of power to any enabled device without a physical tether. And the reason that we're building this is not only to augment current devices, charge cell phones, charge robots, et cetera, but more to enable applications that couldn't exist without this technology. And we'd be willing to talk more about that if you come say hi to us. So the fun part is sort of how we do it. And we use high-dimensional adaptive antenna arrays wrapped with a lot of non-linear optimization, algorithmic control, to pinpoint devices in a power network with radio transmission. So we're able to send energy through the air just in the same way that Wi-Fi sends data. We're founded out of MIT, so we're kind of nerds for research. One of the big things that we really like to do is scrape the world of electromagnetics research, optimization research, and incorporate that into our core products. So our initial applications are actually, unfortunately, not to charge your cell phones, but are rather focused on need-to-have applications, which arise most often in the industrial sector. So that's IoT sensors, autonomous robotics, and then charging a lot of machinery concurrently. Company developments. We did just close our Series A with Data Collective VC, so they're a very sort of top-tier, high-tech firm. So we're fresh with funding, and we're scaling up to be able to make our initial deployments and take on our first clients. We've got a pipeline of clients that are waiting, so all we need is the engineers to help us integrate. Like I said, we're looking for talented, inspired people, people that like researching, fast-paced development, et cetera. We're a very small team. There's only five of us. All of us are here, so a lot of people have talked about company culture. I think that our culture is best demonstrated by our people. We work out of an old cookie factory from 1903 in Oakland, and we're nothing if not eclectic. So you can come see us. We're all wearing these shirts, and we're nice people. This is what we're hiring for, embedded systems, RF hardware, electrical engineering, and software development. We got a demo running, so we'd love to chat with y'all. Thanks. All right. So I'm going to hand it over to Sagar. All right. Hello, everyone. My name is Amjad Mossad, and I'm the co-founder and CEO of Repl.it. So it's 2018, and it still sucks getting started into programming. It's really hard. I mean, we're all engineers. Anyone here just loves setting up the development environment? Like, that's something they're looking forward to. So one person in the back, don't come work for us, but it's still really hard. So like, imagine if there's a way to get started with programming in just two seconds. An online IDE with zero setup, a full-featured IDE. You'll have things like code intelligence. As you're coding, you'll see suggestions, and it's full-blown code intelligence for most of the languages that we support, and we support 40 programming languages. Also, live deployment. The moment you open a port on Repl.it, you just deploy your app. That's how easy it is to deploy apps. There's a lot more. I know people are talking a lot, but I thought the presentation was only 90 seconds, so I didn't put all the features, which will take me an hour to get through. But if you like this kind of stuff, if you like building tools, if you're a hacker, our mission is to get the next billion programmers online, and we're only 0.1% of the way there. You do the math. So fun and challenging problems. We're working on a container orchestration system on the backend. We're working on a distributed file system, and we're building the world's fastest IDE. So come talk to me afterwards. Thanks. Thank you. Thanks. Thanks. Thanks. Thanks. Hey, I'm David, and we're Retool. Retool is a dramatically faster way of building custom internal tools. So let's say you're YouTube, and somebody's uploaded a really dodgy video. You want to be able to approve or reject that video. That's an example of a custom internal tool. Our insight is that all custom internal tools all have the exact same building blocks, like tables, buttons, and et cetera. And so Retool gives you all these building blocks so you can drag and drop and mix and match them together and build any custom internal tool you might want. That's much faster than building it from scratch every single time. And the market is huge. 50% of all code written goes towards internal tools. That might sound really surprising here in Silicon Valley, but that's because our job is to write code for other people. If you think about all the companies outside of the Valley, like Coca-Cola, all of the code they write is all purely internal stuff. And so if so much code goes towards internal tools, and we can make internal tools so much faster, that's a tremendously valuable problem. We started around a year ago, and we're currently just two founders. So we're looking for our first engineer. We're profitable, and we raise a seed round from the founders of Stripe, OpenAI, et cetera. So if you enjoy working on really hard problems and want to have a high impact on the product and engineering, come talk to us after. Thanks. All right. One minute. One minute. Oh, sweet. Hey, everyone. I'm Alex, CEO and founder of Scale. Our vision is to accelerate the development of AI applications. It's no secret that deep supervised learning is changing the world. And the problem is really that you require a ton of data to build supervised deep learning. Google's internal street view data set was more than two billion images for a sense of scale. What's really interesting is with supervised deep learning in particular, you have a new way to improve your software. And that's labeling ground truth data. So it turns out that for most of these production use cases, labeling ground truth data is the biggest ball neck for ultimately building incredible applications. So what we've built is an end-to-end API driven platform for getting ground truth data. We've only been around for two years, but we've already become the standard for ground truth data in the self-driving car and computer vision industries. We work with almost every US-based self-driving company, including companies like Cruise, Zoox, Lyft, as well as tech giants like Pinterest and Airbnb. The real challenge that we have is using AI and great user experience to make humans very efficient at this task of labeling. There is no better place than scale to work on problems like active learning and semi-supervised learning to make the process of getting tons of high quality ground truth data very efficiently. Our team is really, really incredible. We just wrote a blog post that shows everyone's backgrounds that you can read about. They hail from companies like OpenAI, Google, Dropbox, Facebook, Cruise, et cetera. We have two IOI gold medalists on our team, so I'm very proud of the team that we've built. It's about 30 people right now, and then we're a series B company. We've been invested in by Excel, Index Ventures, as well as Drew Houston and Greg Brockman. So we're building the AWS for AI. Data labeling is just our first product, and we're really sort of building the shovels in the gold rush of AI. Thank you. That's awesome. Hello, everyone. I'm Dan Knox. I'm one of the founders of Science Exchange. Science Exchange is a marketplace for scientific collaboration, or as The Economist put it, we're Uber for experiments. So our core product is a online platform, enterprise platform that is used by scientists at thousands of the world's top R&D organizations, like the one shown here, Life Sciences, Aerospace, Consumer Products, and others. We have true product market fit. Since raising our series C last year, we've tripled our revenue, and it's a really exciting time for the company. Things are really taking off. So a lot of great companies presenting here today. Why should you think about joining Science Exchange? So let's run through a couple of reasons. So first, we're a truly mission-driven company. Our mission is an important one, to improve the quality and efficiency of scientific research, and it's the heart of everything we do. Second, we're still a smallish team for a series C company. There's about 80 of us so far, eight zero, with 20 across product and engineering. So scale-wise, it's a great time to join the company, because it's still a time where you can make a big impact on the company's success, and there's still a lot of upside. Third, we have a collaborative engineering culture. It's a supportive environment that really supports rapid skills development, career growth, and has a true ownership mentality. Fourth, we have a diverse team. We truly value diversity and inclusion. For instance, our team currently has a 50-50 gender split. We have a female CEO, my co-founder, Elizabeth, and a female VP of engineering. And fourth, fifth, downtown Palo Alto. We have an office just off University Avenue, short walk from the Caltrain, and about to move into a ball and you space to accommodate our growth. So there you go. Five reasons to think about joining Science Exchange. You can learn more at our careers page. Come see me, Debbie or Sean afterwards. Thanks so much. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Hello, everybody. Don't fall asleep on me, okay? I'm Luciano, I'm the CTO and co-founder of Scope AI. We're an NLP-powered analytics platform for customer conversations. So today, companies receive thousands of unstructured customer feedback every day and they spend hours manually tagging it to be able to create reports and presentations for their companies. We automate the entire process, which is why they love us. Anybody can log in right now and find out what a customer's saying about any topic and how they feel about it. How do we do this? We plug in directly to all the sources, we extract valuable data from the text, and then we build one of the world's only text-based analytics suites to be able to explore that data. What's extraction look like? So it's easy to find out in the text that somebody said cancel, but what's hard is figuring out why they said cancel. And we use things like semantic role labeling and dependency parsing to decipher what customers are saying and how they feel about certain things. On the analytics suite, we're building one of the only text-based analytics platforms. So you'll be building trending methods and anomaly detection methods for text, as well as predictive models, so what's gonna happen in December. You'll be building visualizations for text that go way beyond, say, word clouds. But it's even bigger than that. So we have the customer feedback, we ingest the business actions, and we ingest the financial metrics, and that allows us to automate decision-making for companies. Why? You know what customers are saying, you know what happened when they said that, and you know what you did to remedy a situation. So you know next time what you have to do. Like a DoorDash team said, we're good people. Okay, so come talk to us. I met my co-founder at Harvard. We have an amazing set of ex-LinkedIn, ex-Google employees. If you're excited about NLP, if you're excited about ML and production, if you're excited about data, especially textual data, come chat with us. I'm easy to make laugh, so if you wanna come tell me jokes, I'm also great at that. But yeah, if you're excited about really being able to listen to customers and being able to map that to decision-making, please come chat with us. Thank you. Thank you. Hi everybody, I'm Clem from Schoen, and at Schoen we're bringing autonomous cargo ships to market. As I'm sure you all know, autonomy is happening everywhere. in cars, trucks, drones. Yet, today, cargo ships are still operated very inefficiently by a crew of 25 people. So our solution, as shown, is to retrofit existing ships with autonomous technology to bring that number down from 25 to 15. So we started about a year ago. And at that time, we didn't have access to a cargo ship, mainly because they cost $100 million plus. So we bought a small boat like this one and retrofitted it to prove autonomy. Since then, we've done a lot of work. We've been through Wayside at the beginning of the year. We've raised the $4 million seed round. And we have a pilot going on with the third biggest shipping line in the world. And that allows us to have our technology installed on three of their cargo ships operating between the US West Coast and China. At the same time, we've grown from three founders coming from self-driving and drones to a diverse team of nine people, including seven engineers. And we are looking for many more talented people like you to help us by creating intelligent algorithms to understand what's happening around the ships, but also communicate that information to the crew in a sensible way, and also make automatic decisions based on that in order for the ships to be autonomous. We also have a ton of data. Every week, we collect over a terabyte of data for every ship we have. And finally, we need people who can understand how all of the systems on a ship work and help us to integrate on new ships as we are growing. So thank you very much. Come talk to us. Awesome. Awesome. See that one in the middle? Yeah. Hey, guys. My name's Stefan. And I'm the CEO and co-founder of Starsky Robotics. And we're making driverless trucks. So some of you might know this. Some of you probably don't. But the biggest problem in North American logistics is that it's really, really hard to get a person to spend a month at a time in a truck. The reason it's such a big problem that even though it pays $60,000 to $90,000 a year without a high school diploma, there's still a shortage of 50,000 drivers. So the problem here is not make something autonomous. The problem is make trucks drive without people in them. And that's what we're doing. We're making trucks autonomous on the highway, where autonomy is easiest, but teleoperated for the first and last mile. This is going to start. Here we go. So what you're going to see here is one of our trucks driving down the road in Florida with no person sitting behind the wheel. The teleoperator, comfortably sitting in air conditioning 100 miles away, issues high-level controls, like changing lanes, changing speed, the types of context-based decisions that humans are great at and robots are really hard to teach. We're going to take people out of the truck and haul freight with them on a regular basis this year. But we need help. Our core product's built on top of ROS with C++ and Python. We're looking for machine learning people with experience in things like TensorFlow and CAFE. We need a lot of help with controls, people with experience with linear and nonlinear controllers. But then we're also looking for full stack engineers, data engineers, and all sorts of other roles. It's really easy to apply for us. You can just go to Starsky.io and apply right now on your phone or on your laptop. We're Starsky Robotics. We're doing driverless trucks. Thanks, guys. Thank you. Hello. Welcome to YC. So my name is Joe, I'm the founder of a company called Universe. Universe is an app that lets you make an awesome website from your phone. There are plenty of website builders out there. This is the only one designed from the ground up for phones. Here's how it works. Your canvas is a grid. On the grid sit blocks. A block could be anything you want to put on your website, whether it's an image or a song, and you move these around like Lego. Put them and do whatever you want with them. The things people are creating are incredible. Diversity is absolutely staggering. It's inspiring. And it's working. We were part of YC's winter batch this past year. We hit 175,000 sites created. And we just closed our series A $4 million round by some of the best investors in the valley, including General Catalyst and Javelin Partners. So now we're growing. We are looking for an iOS engineer. Someone who loves building incredible experiences and who wants to help us make our app even better. This is a role open to anybody, anywhere. We are a distributed company. We don't have a stock kitchen with free snacks, but we give you freedom and we give you purpose. Check. We believe that everybody should build the internet, not just people like us. And we build tools to empower everybody to do that. We're looking for our sixth member. We're looking for people who are self-driven, whip smart, and want to be part of something amazing. So find us in the black t-shirts. Thank you. Hi. My name is Hanan. I'm a co-founder at Valanci. We build and operate long-range, high-payload drones. We started back in 2015. We are based in San Francisco, and we're backed by some of the most prominent Silicon Valley VCs. I know what you're thinking. I had the exact same thought when I started the company. Drone deliveries. Isn't Amazon doing that? Well, first of all, the answer is no. Second, we're not planning to deliver your toothbrush to your backyard using drones. We help deliver critical supplies to our enterprise customers in need of a spare part. And we help deliver medical supplies to hard-to-reach areas affected by a natural disaster. We also do some super complicated cool stuff, like landing a 15-foot drone on a moving vessel in the middle of the ocean to enable ship-to-shore deliveries and vice versa. We are a super-experienced, smart team of 20 people spread across multiple groups. And we are looking to hire more people for our production and R&D teams. If you're looking for your next challenge, come speak to us after this presentation. Thank you. How's it going? I am Max. I am one of the co-founders of Volley. And we make voice-controlled games for Alexa and Google Home. So what is a voice-controlled game? I got a couple examples for you here. The left one, Yes, Sire, is basically choose your own adventure interactive fiction set in medieval times, kind of like those old books probably some of you used to read. The other one, Song Quiz, is sort of a name that tune music trivia game, where we play short clips of pop music. And you try to name the title or the artist. And that one actually is the number one game on Alexa, which is pretty cool. So why join Volley? Three big reasons, I think. One is reach. The second is cool, up-and-coming technology. And the third, look, we literally make fun. So first thing, huge reach. As I said, we have a number one game on Alexa. We have over half a million monthly active players and growing, and just a small team of eight full-time employees supporting that. Alexa and Google Home are exploding. There were over 50 million devices sold last year. And that's going to double or triple again this year. Technology is the future. Look, we make voice-controlled software. It's pretty cool. We work on speech recognition, natural language processing. And we do it all on top of a serverless AWS Lambda stack. We also get cool early access to Amazon and Google technology. So if you want beta programs and you want to know what those companies are up to, we're the first ones to do it on voice. Finally, as I said, we literally make fun. I mean, my job is to bring joy into people's lives every day. And yours could be, too. I think it's a pretty cool opportunity, and it gets me up every day to go to work. So we are Volley. We make games for Alexa and Google Home. We have the number one game on the Alexa store. We're working on up and coming technologies. And look, I mean, if you want to get up every day and entertain people, come find us afterwards. Thank you. Thank you. Thank you. Thank you. You can let them know you're the last one. OK. All right. Hey, everyone. I'm Brandon Leonardo. I'm one of the founders of Instacart. We do same-day grocery delivery. It's actually kind of weird. Six years ago, it was three of us in a building over there. And now here we are. And we sell billions of dollars a year in groceries. And we do millions of deliveries a month. And we've got a team of about 150 engineers, about 500 all-in, that are helping us do that. And our objective over the next few years is really to be the world leader in online groceries. And our primary goal in that is to build a team to win, and that's something that's inclusive of our shoppers. So we've got tens of thousands of shoppers out in the field shopping every day. And we're going to need hundreds of thousands over the next year to achieve our goals. And that also means we're about a team of 150 right now. We're hiring another 200 over the next 12 to 15 months. So that's where you come in. I think when you think about where you want to work next, there's a couple of questions that people seem to care about. One of them is culture. So I thought I'd touch really briefly on that. And I'm wearing this shirt that you can't see, but it says, Solve for the Customer, which is our primary cultural value. And at the end of the day, the customer who's placing their order on Instacart, getting the groceries delivered, is our North Star. And we're a very customer-focused company. That's something that matters a lot to us. And then as far as challenges and engineering problems and things that we need to work on, you throw a dart and you can hit one. The things that keep me up at night are numerous. And we have scaling problems. We're growing faster now than we were a year ago. We've actually doubled our growth rate in the last year, which is insane if you know that's a completely magical experience. Our team is still pretty small. I think that individually, you can have a huge impact on the trajectory of the company. I think that you can have a huge impact on your own growth and your own learning, your own success. So I would say, come join us. Come ask us questions about the rest of our cultural values and the things that we care about. Come ask us questions about the rest of our engineering challenges. We've got James over there, who's on the catalog team, and Michael, who leads recruiting. And I'm also last. So thank you so much for your time, and thank you for hearing us out. Thank you."
  },
  {
    "name_video": "Why do startups fail?",
    "description_video": "Harj Taggar talks about the reasons many startups fail, and how talking to users can help you avoid the same fate. Harj Taggar is a partner at YC and was the CEO and co-founder of Triplebyte.",
    "related_categories": [
      "Becoming a Founder",
      "Business Models",
      "Customers",
      "Finance",
      "Founder Psychology",
      "Product",
      "Startup Ideas",
      "Problems to Solve"
    ],
    "page_url": "/library/9u-why-do-startups-fail",
    "youtube_url": "https://youtube.com/watch?v=gQ_rZc0YUNw",
    "mp3_file": "downloaded/Why_do_startups_fail?.mp3",
    "mp3_content": "Hey, everyone. I am Haj, partner at Y Combinator. I'm going to answer the question of why do startups fail? So I'll work backwards to answer this one. Startups fail because the founders give up and stop working on them. And founders give up because they run out of money or energy or both. And they run out of these things because either they had no users or they didn't have enough users to convince investors or themselves that the startup deserves more money or effort to keep it alive. So the reason they have no users is because, as YC's motto goes, they did not build something people want. And there are multiple ways to not build something people want. But the most common I've seen is to not talk to your users and build something you think they want but that they don't actually want. And there are two common flavors of this. The first is more common with technical founders, where instead of talking to users, they just keep rewriting their code to make it prettier and more elegant and faster. And this is a trap because users don't care how amazing your code is. All they care is if your product solves a real problem for them or not. Creative and ideas-y founders can tend to use the Steve Jobs argument to avoid talking to their users, which is that Steve Jobs was a visionary and he didn't believe in talking to his users. So why should I talk to my users? I'll just intuit everything I need to build. And the reason that's a bad idea is, one, you're probably not Steve Jobs. But even if you were, I think that advice is not actually what he did. Steve Jobs spent his entire life thinking deeply about the ways that consumers interact with technology and products, and he was building products for consumers. So the actual lesson to take from there is you should spend a lot of time talking to your users, watching them, observing them and learning what kinds of products they want you to build. As a startup founder, you're a doctor and the users are your patients. So you should always go and talk to your patients and listen to what they say their symptoms are and what they're complaining about. But you won't let them prescribe their own medicines. That's your job. So make sure you talk to your users, build things that people actually want, and you'll avoid the most common way that startups fail."
  },
  {
    "name_video": "How to choose a startup to join",
    "description_video": "YC's Harj Taggar, former CEO of Triplebyte, advises on choosing a startup to join.",
    "related_categories": [
      "Working at a Startup"
    ],
    "page_url": "/library/9t-how-to-choose-a-startup-to-join",
    "youtube_url": "https://youtube.com/watch?v=evIZRpNQUx4",
    "mp3_file": "downloaded/How_to_choose_a_startup_to_join.mp3",
    "mp3_content": "Hey everyone, I'm Haj. I'm a partner at Y Combinator and I'm going to answer how do you choose a startup to work at? So the first thing is to be sure you actually want to work at a startup. Working at a startup is not for everyone It's a very unique experience and it's totally fine If it's not your thing. Paul Buchheit, who is an early engineer at Google and also a Y Combinator partner I asked him like how do you know if you should work at a startup or if you should go work at a Big stable company and he said that if you're happy working where you are and you don't have a strong desire to do anything else You're probably going to get paid less and have to work more if you leave for a startup So if getting paid less and working more is unappealing to you I would recommend staying where you are And I think that applies equally to college graduates, right? Like if you want a more stable career path where you're paid more today and for less work then Join a big company but once you know that what you're looking for is a startup and Then when you're choosing the one to join I would advise you to think a lot like an investor does when they're picking a startup to invest in Because that's essentially what you are Investors are investing money in companies and you're investing your time and your energy kind of your life. So There's a few things that investors look for The first is look for signs that the startup is already succeeding like joining a Startup that succeeds is the best kind of startup experience like as a startup grows There'll be more opportunities for you to learn There'll be more interesting people that get hired your network will grow your career will accelerate These are all really great reasons to join a startup and they are Stronger the more successful the startup is so the way you do this is When you're interviewing with the company Ask them like how many users they have and ask them What metric do you track to see if you're being successful or not? And how has that been growing over time and the most important thing to focus on here is not the absolute numbers It's the growth trajectory So if a startup has a million dollars in monthly revenue But it's had a million dollars in monthly revenue for the last 12 months in a row That's less exciting than a startup that has 10,000 in monthly revenue But the previous month it only had five so look for the trajectory not where a startup is right now today The second thing to look for is the team and that always starts with the founders so you only want to work at a startup where you're really impressed by the Founders and whoever they've hired so far and in particular when you're evaluating founders don't look for traditional credentials It doesn't matter if they went to a great college or if they worked at well-known companies Many of the best founders took a slightly different path and don't have the traditional credentials. You might Associate with success and aptitude. So I would advise you instead to look at how Well, those founders have done relative to their peer group and where they began. So as an example 19 year old founder who grew up in Milwaukee and has managed to raise a seed round and move to Silicon Valley and build a company and it might be more impressive than an Engineer who worked at Google for 15 years and has left to start a company and is in sort of the same place So look for these are like outlying traits in founders that indicate that they're just a bit unusual and likely to build an outlying kind of company Third don't try and evaluate the size of the market that the startups in like this is the most common mistake Investors make when they're trying to pick a startup and it's how they miss out on the really big ones A really famous example here is Airbnb many many many of the best investors in Silicon Valley all rejected Airbnb Because they thought it was kind of crazy this idea of people sleeping in each other's houses and felt that was a pretty limited market So don't try and play that game. But what I would say is while not every great startup seems like it's in an obviously big market at the start Every great startup always has this core group of early users who are fanatical about the product So even though there weren't a lot of people using Airbnb in the early days, the people who did use Airbnb really loved it And every great startup has that trait. So if you're thinking about joining a startup I'd ask to talk to some of the users and see how much they love the product And even if it's a small group, if the depth of their passion for the product and the startup is deep That's a really, really good sign. So summing up, if you're thinking about joining a startup I base your decision on the founders, how much the current users love the product and look for signs of growth"
  },
  {
    "name_video": "How to choose a metric and set your KPI",
    "description_video": "Michael Seibel, Managing Director at Y Combinator and co-founder of Justin.tv/Twitch and Socialcam, explains how to set your Key Performance Indicator.",
    "related_categories": [
      "Business Models",
      "Early Stage",
      "Growth Stage",
      "Founder Psychology",
      "Growth",
      "KPI"
    ],
    "page_url": "/library/9i-how-to-choose-a-metric-and-set-your-kpi",
    "youtube_url": "https://youtube.com/watch?v=kJIBAp48Pv8",
    "mp3_file": "downloaded/How_to_choose_a_metric_and_set_your_KPI.mp3",
    "mp3_content": "One of the first things that YC companies do when they join the batch is they set their KPI, their key performance indicator, the one metric or stat that they judge the success of their business by. For most companies, it's going to be one of four things, either revenue, whether that's monthly revenue, monthly recurring revenue, annual revenue, et cetera. Usage typically for advertising-based companies or social companies, so DAUs, WAUs, MAUs. That's daily, weekly, or monthly active users. The next one's going to be for enterprise companies that do YC. Typically they're going to be looking at LOIs or letters of intent, free pilots, paid pilots, or signed contracts. That's going to be their KPI. And then finally for moonshot companies, science companies, biology companies, typically there's going to be some technical milestone. They ran an experiment and got positive data. They manufactured some part, some technical accomplishment. So if you're thinking about your KPI, you should probably think about one of those four primary metrics. Now the problem is that it's really hard to brainstorm how to move your primary network. Oftentimes we talk to founders, if you just ask them, how do you increase revenue? That's pretty hard. So all good companies have a set of secondary metrics. I almost like to think of metrics as a pyramid. So you've got that one metric at the top that lets you know how you're doing. And then you have three to four metrics below it that you believe greatly impact that top metric. And usually it's those metrics that you brainstorm features on. And it's those metrics that you try to optimize every week. So let's give an example of Airbnb. Airbnb's metric is going to be revenue, of course. And as a startup, their primary goal was actually reaching breakeven. The contributing metrics to that first would have been the amount of inventory on Airbnb. That's an extremely important metric. If there's low inventory, hard to make the revenue go up. The second metric is going to be the average price of the inventory on Airbnb. If the price is incorrect, people aren't willing to buy, the revenue can't go up. The third might be the responsiveness of hosts. So when someone tries to book a home, how fast does it take for the host to get back? If that number is too high, revenue won't go up. The next might be some metric around search or how the website works. How fast does search results come back? And then you can imagine many more metrics that would contribute to does revenue go up. So when you're thinking about planning metrics in your business, don't get creative about that top KPI. Stick to one of the four that I mentioned before, whether that's revenue, usage, contract signed for enterprise companies, or milestones for science or moonshine companies. It's really important you choose one of them because honestly, KPI is how a lot of investors will basically measure you versus other similar companies. So if you choose some creative KPI that no one else is using, it's really hard to do a comparative. But for those secondary metrics, for the kind of base of the pyramid, those really should be the three to five metrics that might be custom to your product or custom to your business. The three to five most important things that contribute to the top metric moving. And those you can be a little bit more creative about. Those are a little bit more unique per company. So that is how you set your KPI and how you think about your other metrics. Good luck."
  },
  {
    "name_video": "How to find the right co-founder",
    "description_video": "YC's Harj Taggar shares advice on how to find the right co-founder for your startup.",
    "related_categories": [
      "startup school",
      "Co-Founders",
      "Becoming a Founder"
    ],
    "page_url": "/library/8h-how-to-find-the-right-co-founder",
    "youtube_url": "https://youtube.com/watch?v=prKi3-rUPHc",
    "mp3_file": "downloaded/How_to_find_the_right_co-founder.mp3",
    "mp3_content": "Hi, I'm Hans Stager and I'm a partner at Y Combinator. And today I'm going to be talking about what I think are going to be the most important part of starting a company, which is finding the right co-founder. So let's start by talking about why should you have a co-founder at all? Well, I think there's three main reasons you really want a co-founder when you're starting a company. The first is productivity. You can get a lot more work done if you have someone to divide the work up with. And you can get much better work done if you have a co-founder who maybe has complementary skills, so they can do things that you can't. And there's someone you enjoy discussing ideas with, so you can brainstorm and come up with better ideas than you could alone, or have someone to talk you out of potentially bad ideas. So you get a lot of uplift in just the amount and quality of work you can do with a co-founder. The second reason is moral support. Startups are an incredibly intense and taxing journey, and it's great to have someone you can lean on for support during the tough times. And what I've noticed about the best co-founder relationships is they have this dynamic where both co-founders kind of balance each other out. So if one founder is having a bad day, they're feeling a little down, despondent, they've become a little pessimistic and feel like the startup is about to die, the other co-founder can just help bring them up a little bit and keep them going, keep them motivated. And vice versa. Sometimes you get too carried away, you sign a customer and you think you're guaranteed to IPO, and you could use someone to just ground you and bring you back to reality a little bit. And so that's where I kind of find the best co-founding relationships can help even out some of the highs and lows of the emotional roller coaster that is a startup. And while you can get productivity increased by hiring people or bringing on contractors, you don't get that same emotional support that you do from a co-founder. Because ultimately, anyone who's working for you, you're the boss, and they're not as invested in the success of the startup as you are. And you can't really be as open or honest with them about the company as you can be with a pick. And that's what you get from a co-founder. The final reason I'd say to have a co-founder is pattern matching to success. If you look at a list of the most successful startups in history, think of Apple, Facebook, Google, Microsoft, they all had co-founders when they started. And now, I think sometimes people forget this point, because when you think of these great iconic companies, you associate them with a single person, usually the CEO, who's over time risen to become prominent and famous and a bit of celebrity. So when you think of Apple, you think of Steve Jobs, when you think of Microsoft, Bill Gates, and when you think of Facebook, Mark Zuckerberg. And I think it's completely true that over time, and we're talking at this point decades, because that's how long successful startups are around for. Over that time period, it's pretty common for one person to really drive the company, become the figurehead for it and stick at that company for a long, long period of time. And that's why I remember those people. But we're talking about the earlier stages of starting a company. And in those days, all of these founders had co-founders that they lent on for all the reasons I just mentioned. So I think it's always important to remember that when you're starting a company and wondering whether you should have a co-founder or not. Okay, so hopefully I've convinced you that you really do want a co-founder when you're starting a company. But what if you're really keen to get started on a company right now, and you don't have a co-founder that's immediately available, someone that you can bring on board? Should you wait to get a great co-founder before you start the company? Or should you just go ahead and get started? Well, I think the default answer is that you should wait. Because of all the reasons I just mentioned, all the benefits that you get from having a co-founder. But Y Combinator has funded single founders, and we have done so successfully. So I've noticed that there are some exceptions to this rule, and they tend to follow a particular pattern. And that pattern is that the single founder, so it's like a company by themselves, has two things that are true. So one is they have an idea that they have incredibly high conviction about, either because they're solving a personal problem for themselves, so they really know solution is necessary. Or they're a domain expert, they're working in a field where they know for sure sort of technology that's missing, who the customers might be. So the result of that is they have such conviction in the idea that they don't need a co-founder to convince them that this is a good idea to get started on. They're ready to go. The second condition is that those single founders, they're able to make progress on that idea without a co-founder, in the short term at least. And that almost always means that they're technical, or at least technical enough to be able to build the first version of the product so they can show it to potential investors, or maybe even to potential co-founders who may want to join the company. And that second point is something I've noticed that the best single founders are also able to do, is not only are they tremendously productive in building product and talking to users themselves, they're also able to run a great background search and keep their four co-founders, and keep their eyes open, and if the opportunity arises, bring on a great co-founder. And I think the best example I can think of here would be Drew Habson with Dropbox. So Drew applied to Y Combinator way, way back now in 2007. He had a really solid idea for building Dropbox because he'd already felt the pain of losing his own files, so he knew for sure there was a better solution to build, but he didn't have a co-founder. And so Paul Graham, the Y Combinator founder, messaged him back saying, we love your application, you're great, the idea is great, but we really won't fund you without a co-founder. So come back to us when you have one. And Drew kind of went away, continued building the Dropbox prototype while also looking for co-founders and found Arash, who would be later the Dropbox CTO and his co-founder, and he applied again, and Y Combinator funded him, and now Dropbox is obviously a tremendously successful company. So that's kind of what I'd ask you to bear in mind, is if you're really keen to get a start right now, but you don't have a co-founder, ask yourself, do you have absolute high conviction in this idea, you know for sure that this is the idea that you want to work on, there's no other ideas that you'd be open to, and can you really make progress without having a co-founder? And if those things are true, sure, go ahead and give it a shot, but if not, I'd really suggest you wait until you do have a co-founder to start a company. So when you're thinking about bringing on a co-founder, what should you be looking for in them? Well, I actually think the single most important thing to know about someone before you start a company with them is how do they handle stress. The second most important is how well are they going to help you handle stress. And the reason I say that is startups are incredibly stressful, intense experience, as I mentioned before. And a great co-founder should be able to support you through those and help you through those, because if you're determined and motivated and enjoy working together, you'll keep working on this startup for a long period of time, and that's usually what it takes to build a really successful company. So you really don't want to start a company with someone that you don't know particularly well, because even if you've spent time with them in social events or you hung out together a little bit, you don't really have insight into how they're going to respond to pressure and stress. And are they someone that's going to stick around when things are tough? And are they someone that's going to help you stick around when things are tough? So the best people to start companies with are always people that you've got some set of personal experiences where you kind of know their character and how they're going to respond to those tough situations. And that usually means there's someone that's a close friend or someone that you've worked with under stressful conditions. So I'd certainly recommend that you be on the lookout and think about that when you're considering co-founders. The second thing I think you really want to look for is understanding the goals and values someone has for starting a company or wanting to do a startup. Honestly, I think when I was younger, I used to think of some goals and values as being sort of fuzzy terms that didn't mean too much. But over time, I've realized really what they mean is understanding the motivations someone has for doing what they do. And in this context, I think it's really important to talk with someone, even if you know them very well, about why do they want to do a startup? What are they hoping for? And the kinds of things that can come out are avoiding conflicting goals. So for example, let's say that you really want to build a high-growth, high-intensity, high-risk startup. And you want to push forward, you want to raise venture capital, you want to hire a bunch of people, you want to just really go for it. And your goal is to take the company public and you're okay taking lots of risks along the way to get there. That's a totally fine set of motivations. It's a very common set of motivations of startup founders. But let's say your co-founder prefers to take kind of a slow and steady approach. Maybe they're more motivated by building great software for a small group of people, and they would be totally fine if you just made enough revenue to pay yourself good salaries and just screw a little bit every year. That's also a completely fine set of motivations when you start a company. But the two motivations there aren't compatible with each other, and they'll lead to inevitable conflict. So what I'd suggest is make sure that you have this conversation. And it's not a perfect predictor, because people's goals and ambitions for a startup change over time. I've seen people start companies because, honestly, they just wanted to get rich, and their hope was that they would be able to sell the company in two to three years for a good amount to a bigger company. But they got two to three years into the company, and they loved it so much. They got so excited by the challenge that they kept working on it, and they're still working on it a decade later. So that's totally fine. I'm not saying that having this conversation means you're going to know for sure whether your goals and values are aligned over the next decade, which is, again, how long it usually takes if a startup is successful. But at least having the conversation gives you a better chance of finding a co-founder who you're aligned with around high-level important stuff. Now, I think you're probably wondering, I'm talking about what you should look for in co-founders, and I haven't mentioned the obvious thing, which is what skills do they have? So it's obviously really important to have a co-founder who has the right set of skills to help you grow the company. And usually, that means someone who's got a complementary set of skills to you. So if you're really great at sales, talking to users, getting customers, ideally, you'd have a co-founder who's really great at building product and writing code and building software, because the two of you can divide and conquer and get a lot done. While I do think that's really important, I don't think it's one you should overly fixate on. So more important than anything is just working with someone that you like working with and you trust. And so if the person who best fits that description doesn't necessarily have the perfect set of complementary skills to yours, I think that's fine. You should still bring them on as a co-founder, and then you can start hiring people. Assuming you can make enough progress in the company to get investment, you can hire people to kind of fill in the skills gaps, and that's okay. Another point I just make on this is when you are trying to decide if someone's got complementary skills to you, don't go too much into the details of how well do their skills map onto the specific idea you're working on right now. So the common example of this we see sometimes is someone's considering bringing on a technical co-founder, and they want to build an iPhone app. But the co-founder, even though they know them, they trust them, they've worked with them before, that co-founder isn't necessarily an iPhone app developer if they haven't built iPhone apps in the past. That's not a reason to want someone out as a co-founder, right? What does matter is that they're willing to learn what they need to learn. So if they're not an iPhone developer, they're willing to learn how to do that. And particularly, they're willing to learn things that maybe aren't glamorous. I mean, startups are often just a grind of doing a lot of sort of boring, grunt work to get the thing going. And so long as you have a co-founder who's okay with that, it's totally fine if they don't have the perfect set of skillsets. So don't rule someone out who's potentially a great co-founder because they don't have this checklist of specific skills you're looking for. But do make sure you count them in if it's someone that you trust, you like working with, and you've got a good sense of how they're going to handle the stress and pressure of a startup journey. So where should you look for to find co-founders? Well, the answer here is a little obvious. It's to start with the people you already know. So ideally, your friends and colleagues. And kind of ironically, the best time to find a co-founder are when you're not actually necessarily looking for a co-founder to start a company with right now. And what I mean by that is if I were kind of giving myself advice 10, 15 years ago, what I would say is rather than sort of trying to pick a startup idea and go and find co-founders to work on with it, I would suggest that I just look for people to do projects with. So if you're in school, look around, see who's in your class, who's in school, and identify people that you think would be cool to work on a project with. And this project doesn't have to be a takeover of the world idea or company. It just has to be something you find interesting. Maybe you're into games and you want to build a cool game together. The thing that's awesome about projects is that it's much less scarier and asking for a far lower commitment if you ask someone to work on a project with you than it is to go straight into, hey, let's start a company together. So you have sort of a higher chance of people saying yes if you ask them for this. And the other thing that's great about projects is you can work on different projects with different people and you can start developing a taste for who do you work well with, what kinds of personalities, like what kinds of skills are you actually good at as opposed to what you might think you're good at. And so what kind of complementary skills might you look for in a co-founder? And again, being in school for college is a really ideal time for this because you're surrounded by lots of people who usually have a decent chunk of spare time. And so you can start getting together to work on things that you think are fun. And again, kind of ironically, although this is, I'm suggesting you don't try and start a startup, projects that you work on in your spare time often tend to be some of the greatest sources for actually finding great startup ideas and building huge companies. Facebook's an obvious example, something that started out as a project while Mark Zuckerberg was an undergrad at Harvard and now it's turned into one of the biggest companies in the world. But that's not why I'm suggesting you do this. I'm suggesting you kind of look for people to work on projects with because that's a great way for you to get a sense of what kind of person do you enjoy working with and what specific type of personality do you work well with. And this advice also applies if you're not in college or school. Maybe you're, if you're working at a company, like look at your co-workers, like keep a list of people that you think are particularly smart, particularly capable, who impresses you and start getting to know them better and ask them if they're up for working on things in the evening or the weekend. So that's the kind of personality that, or the kind of person who's interested in working on evening and weekend projects is the kind of person that's likely to make a great co-founder. I actually remember years ago at Y Combinator Startup School, when it was an in-person physical event, we had Phil Libin, the founder of Evernote there. And he kind of gave a somewhat extreme version of this advice, which was that he, sort of years and years before he started a company, knew that he wanted to start a company someday. And so he would only make friends with people that he thought could someday be a co-founder. And now, while I think that advice is maybe a little bit extreme, if you don't just want to be around people who might be co-founders, there is truth to it, right? So I think this is kind of the thing where if you make this sort of a conscious effort well before you start a company, it will probably be the best bet for finding a great co-founder. But let's say you do know for sure that you want to start a company and you're ready to go again right now. How do you start finding co-founders? Well, again, you start in the same place. You start with people that you know. And what I've noticed is an issue people run into here is that they can be really reluctant to just ask people they know to start a company with them. And that can, it's all kinds of reasons there. Like maybe you're worried about how your relationship will change. Like maybe you don't sort of value the personal relationship more than the risks of working with someone. And those are fair concerns, but it's not the right optimization for starting a company. Like you have to make the ask. And so what I'd suggest is a pretty simple algorithm here for finding co-founders. It's make a list of the people that you know, you're closest to, that you think would be great co-founders and start from top to bottom and ask every single person on there to go grab coffee and talk to them and ask them if they'll start a company with you and be your co-founder. And if they say no, that's totally fine. So you understand. But like, who would they start a company with? And make it very specific. Ask them if you were starting a company, who would be sort of your top three or four co-founders that you want to try and convince to work with you and ask them for an introduction to each of those people. So your list keeps growing now. You ask the people you know, if they say no, you at least get some more ideas for names. And then you meet with those people and you ask them and you simulate, repeat the same algorithm. Ask them if they'd be interested in being a co-founder with you or not. If they say no, ask them who they'd try and recruit. And so this way you start growing the tree of potential co-founders beyond those people you immediately know, but at least they're still connected by people that you do know. So they're not just sort of completely random strangers. The final sort of bit of advice, let's say, for where to look is go out and try and meet people that just have similar interests to you. Right? And so this kind of sounds a little bit just like how to have a social life, but this is essentially what finding co-founders and co-producers do. So if you're an engineer, attend like developer meetups or work on open source projects or go to hackathons, like do things where others, engineers and builders are hanging out and you'll likely find some leads. And even if you're not technical, if you're interested in those things, you should totally attend those kinds of events too. But maybe also just attend or find people who are interested in the kinds of things you're interested in. Maybe you're interested in economics and finance, and that's kind of the pool of things or that's a pool of interest where you think you'll find a startup idea. Well, make a real effort to go out and meet people who have similar interests. And maybe in these COVID times, there's lots of online groups and communities that you can join. But even in regular times, there's always ways to find people that have similar interests to you. And if you're sort of consciously on the lookout for people who might make co-founders, you have a higher chance of finding someone who could be a good fit. So once you found a potential co-founder, how do you test out and know for sure that you both want to start a company together before making a final commitment? Well, it's not a perfect process. And at some point, you just kind of have to make the leap and hope that it will work out. But one way to de-risk it is to allocate a chunk of time where you agree to kind of work together and set yourself a deadline, by which time you want to have ideally sort of like a MVP or a prototype of something built, or you at least want to have gone out and tried out pitching some customers and convincing them to pay you if you did build a particular product. These are all the things you'd usually do when you're signing up with a new company or testing out a new idea anyhow. And do that together and agree that at the sort of end of the time that you've set aside, that you'll both have an honest conversation and decide, do we both enjoy working together on this? And if so, great, let's go ahead and make the leap. And if not, be honest and say, hey, let's go our own separate ways. So making that a little bit more tangible. If you both have no other commitments, which is pretty uncommon, but sometimes happens if, say you both graduated college and you didn't go and get a job because you want to start a company, then I'd say treat this like your full-time job, right? Say that, hey, we're going to set aside a month or three months and let's just sort of pick an idea we're excited about and get as much progress made as we can on building the first version of it and going out and signing customers. Even if you can't do that full-time because you have other commitments, then do it on evenings and weekends, right? But you'll have to sacrifice some amount of time doing other things in order to actually spend time working together. But the more time, so the more hours you can accumulate of working together on the idea, the better a sense you'll have for sure if you want to start a company or not, right? So once you've kind of done that, let's say you decided that, hey, we do want to start the company and we want to be co-founders, then I think there's two important points you want to make sure that you're in agreement on. First is the equity split, right? Who owns how much of the company? Now, I think the way to think about this is your default equity allocation should really be 50-50. That's where you want to start from, right? Because assuming that nothing's been built yet, you're at the earlier stages of the company, you're both going to make equal contributions. You both want to be equally motivated to work super hard in the company and all the work is years and years ahead of you. So there's not really too much reason to deviate from a 50-50 equity split early on. However, we have seen different equity arrangements and they have been successful. And so I kind of think the underlying thing that you're solving for here is making sure that both of you are happy with what the equity arrangement is and will be motivated to keep working on the company for a long period of time, right? And so, again, usually that means 50-50, but let's just say that you have been working on the company for a little bit longer or you de-risked it somehow by yourself and you're bringing on what we commonly call a later stage co-founder, then sometimes deviating from 50-50 might make sense. But again, the thing I would really encourage you to do is not optimize for the short term, right? So just because you made a little bit of progress in the idea by yourself and you have a great co-founder and you're sort of thinking, hey, maybe I should take 70%, excuse me, 30% because you've made progress in the last six months. I would encourage you not to do that. Startups are a really long-term game and you win by making the best decision in the long term, right? So if you have a great potential co-founder and even though you made a little bit of progress on the company yourself, if you know that they won't be all in and fully committed to the success of the company unless they're a 50-50 partner, you should do that. You should make them a 50-50 equity partner so you can keep them as motivated and get as much out of them as possible. The second thing I think you really wanna decide is who's the CEO? Now, this can sometimes be an uncomfortable conversation. And to be honest, it's actually, I think, a bit of a red flag if it is an uncomfortable conversation. And so as far as the actual title itself goes, early on in a startup, when it's just two or three co-founders, in terms of how it impacts your day-to-day and how you divide up responsibilities, the title doesn't actually matter. Early on, you're all gonna be doing a little bit of everything. There's plenty of unglamorous grunt work to go around. And just because you have a CEO title doesn't mean you get to abscond from that, right? So practically, it doesn't matter in terms of who does what. One exception to that might be if you need to be doing sales. It usually might be good if the CEO is a person, or whoever has a CEO title is a person talking to customers and users and convincing them, because they might feel a little bit more flattered if the CEO is pitching them. And this kind of gets to the point of where, really, the only impact the CEO title has, and that is externally. And I would say specifically for investors. So investors care about seeing that there is sort of a clear leader and a clear final decision maker or a tiebreaker. So when you're pitching investors, it's usually better for whoever does most of the talking, whoever is gonna be leading those conversations, that that person's the CEO. And now, where you run into problems, and a very, very common source of co-founder friction we see at Y Combinator, is where two people really wanna be the CEO, right? And we can see this in Y Combinator interviews where you end up with two people who kind of talk over each other, they interrupt each other, they can look at each other with a little bit of contempt when the other person's answering. These are all really, really bad signs, right? So be honest with yourselves. If you think it's really important to you to be the CEO, and you both feel that way, you're not good co-founders for each other. So just avoid all that pain and heartache, and don't start a company together. You ideally wanna start a company with someone who doesn't care about that stuff if you do, or you're both indifferent to it, and you're fine picking whoever you feel is best suited to the role for now, even if that changes sometime in the future. So let's kind of wrap up everything we've talked about. Once you're sure you want a co-founder, which I hope I've convinced you you do, once you run the process to find some good candidates to be a co-founder, and you've identified someone that you really do wanna start a company with, because you spend a little bit of time working on projects together and testing each other out, so to speak, then you have the conversations around what's the equity split and who's gonna be the CEO. Now you're ready to formalize things. And formalizing really means the legal act of incorporating a company, setting up a vesting agreement. This is really important. Vesting means that the shares in the company, you don't all get them at once. They vest over a period of time, and there's very standard templates and documents that you should really ensure that you have in place. And then you're pretty much good to go. The when exactly should you leap from, hey, we're hanging out, working together, to hey, okay, let's do some paperwork. Not a perfect answer to that, but it's just kind of a gut feel. Once you've made the commitment to yourself and each other that we are gonna make a real go of trying to build a company together, that's kind of the trigger for when you start making things real by getting to the legal incorporation and paperwork done. So that's all the advice I have for how to think about finding the right co-founder and how to make it happen. I hope that helps, and good luck."
  },
  {
    "name_video": "How to get startup ideas",
    "description_video": "YC's Jared Friedman shares advice on how to get startup ideas.",
    "related_categories": [
      "startup school",
      "Startup Ideas",
      "Problems to Solve",
      "Becoming a Founder"
    ],
    "page_url": "/library/8g-how-to-get-startup-ideas",
    "youtube_url": "https://youtube.com/watch?v=Th8JoIan4dg",
    "mp3_file": "downloaded/How_to_get_startup_ideas.mp3",
    "mp3_content": " be mostly writing code, fixing bugs, talking to users, like pretty much the same stuff. And so I would argue that once the initial excitement of your idea has worn off, and you are six or 12 months in, and you are grinding out the execution that makes your idea actually work, how fun the initial idea sounded actually has little to no correlation with how much fun you will actually be having working on your company. And the last one is that founders incorrectly shy away from spaces where there are existing competitors. Counterintuitively, most startup ideas, most good startup ideas, have existing competitors. When founders go into spaces with no existing competitors, they often find out that the reason that there are no competitors is because no one wants the product. A great situation is actually a market where there are existing competitors, but you've noticed something that they all seem to have missed, or they all just kind of suck. A classic example of this is Dropbox. So when Dropbox launched, there were already about 20 cloud-based file storage companies. Dropbox was like the 20th company in its space to launch. Naively, you might have thought that that made this a bad market. I mean, you would have gone and looked and said, oh, there are already 20 competitors. This seems like a bad market to go into. But if you were savvy about startup ideas, you would have realized that it actually made it a great market. And the reason is that even though there were like 20 companies doing this, most people didn't use any of them. And that strongly suggests that there actually was a problem here, but the existing products hadn't solved it. And Drew, the founder of Dropbox, had a very specific insight about what all of them were missing. His insight was that basically their UI sucked. And the reason their UI sucked was that at the time, the way that they all worked is you had to go to their website and manually upload your files one at a time into their website, which sucked, of course. And Drew had really a technical insight, which was that if he integrated directly into the host operating system, he could just sync your files automatically without you having to do anything. And that was a real step function change in how convenient these services were to use. And that was the right insight. Okay, let's talk about how to come up with startup ideas. So it is possible to sit down and explicitly think of startup ideas and in a moment, I'm gonna talk about how to do this. But it is actually not the best way. The best way to have startup ideas is to just notice them organically. If you look at the YCTalk 100 companies, at least 70% of them had their startup ideas organically rather than by like sitting down and explicitly trying to think of a startup idea. And the problem is that when people sit down and try to think of startup ideas, they tend to think of bad ones. They're especially likely to think of the same set of tar pit ideas that I talked about earlier. Whereas startup ideas that occur to you organically are more likely to be good ones. So if you're not planning on starting a company imminently and you just wanna put yourself in a position to have organic startup ideas in the future, here are three ways to do that. This is like playing the long game to set yourself up for future success. First is just like become an expert on something valuable. If you're working at the forefront of some field, you'll see good startup ideas in that field. And a great way to do that is to go work at a startup. Harge talked about this in his talk last week. If you're working at a startup, you will become an expert in the thing that that startup does. And that is really putting yourself in a position to have great startup ideas. And finally, if you're a programmer, one thing that can work is to just build things that you find interesting. Even if they're not businesses, they're not clearly startup ideas, sometimes they like turn into them over time. And a really striking example of this is the story of Replit. This is exactly how Replit got started. It was just something that Amjad found interesting. It wasn't supposed to be a startup originally. Okay, but if you want to generate ideas for startups right now, I'm going to walk through seven recipes for doing that. I've tried to list these in order of how likely they are to lead to actually good ideas. So start with the first ones. Okay, here's the first one and the best one. Start with what your team is especially good at, and think of ideas that take advantage of your expertise. The reason that this is so effective is that any idea you come up with this way has automatic founder market fit. Do you see how this is almost like a hack to generate the set of ideas that has founder market fit? Here's a great example of like how this worked in practice. So a good example is this company Resy, which is like open door for rental apartments. And before starting Resy, the founders had worked in real estate and debt financing, and they were experts in those areas. And when they got into YC, they spent the first month looking for ideas. But the smart thing that they did is they only looked at ideas in that idea space, in like the rough idea space at like the intersection of like real estate and FinTech. And that was a smart move because that is a very fertile idea space for startups, like many billion dollar companies have come out of that idea space. And the Resy founders were experts in that idea space. And so because of that, their search for a startup idea was pretty quick and painless. And pretty quickly, they came up with the idea for Resy, which is like an excellent idea and has perfect founder market fit. So if you have specific expertise like the Resy founders did, you should definitely start by looking at ideas in the things that you're experts in. It is weird how many startups apply to YC, and we look at their applications, and the founders are actually legitimate experts in something, but the idea that they're applying with is like something completely different. Now, if you're a young founder, if you're in college or something, you may not have had a chance to develop like the level of domain expertise that the Resy founders had. So this may not be the right recipe for you. So let's talk about some other ones. The next recipe is to start with a problem you've personally encountered. Ideally one that you're in an unusual position to see. So Vetcove is a website for veterinarians to order supplies. So you can think about it like amazon.com for vets. And the short story of Vetcove is that the founders are brothers, and their dad is a veterinarian. And growing up, they would notice that the way he ordered supplies was like super old-fashioned like you'd have to like call up a supplier on the phone and like order stuff through like a 1-800 number or something. It was like very obvious that you could build an amazon.com kind of thing that would replace that. And I love the story of Vetcove because it's such a great example of what a great startup opportunity looks like. Because thousands of veterinarians must have known that this was a real problem, that it was really annoying if there wasn't like a basic website where you could just go to order supplies. But the thing is, veterinarians don't start tech startups very often. And then on the other hand, you had like thousands of programmers in Silicon Valley who were banging their heads against CISPs and TARPIT ideas, totally unaware that over here, there was like a really great, genuine problem to work on. And because of this, when the Vetcove founders got started, they had no competition. So this amazing idea just got left on the table for years. So if you wanna try to actually use recipes one and two, here's a specific set of instructions for how to do it. This is advice I often give to founders NYC who are pivoting and who are looking for a new idea. Here's how it works. For each founder on your team, go through every job you've ever had, plus all your internships, plus like other life experiences, and think really carefully about each of them. What problems did you come across? What did you learn that other people don't know? What are problems or opportunities that you've been in kind of a special position to see? Those are the best places to start looking for startup ideas. Okay, the next one is to just think of things you personally wish existed. This is like a really classic recipe. This is very common advice. Great example of this is DoorDash. The short story of DoorDash is that the founders of DoorDash were undergrads at Stanford. And the thing they really wanted was to be able to just order food from local restaurants and have it delivered to their dorm. And before DoorDash, you couldn't do that, so they started DoorDash. And this is a great recipe, but this is the recipe that is most dangerous and potentially leading to tar pit ideas. So if you're using this recipe, you just got to stop and think for a second, is there a reason why this thing doesn't exist yet? Okay, the next one is to look for things in the world that have changed recently that might've created a new opportunity. A great example of this is COVID. So when the pandemic started, it changed daily life for all of us. And many founders realized that this created the opportunity for new companies and some very successful startups came out of it. And one of them is this company called GatherTown, which builds like this fun way to hang out with other people online. And the founders of GatherTown were actually working on a different idea that wasn't going so well. And when the pandemic started, they pivoted to this because it was obvious that like the change in behavior of the pandemic had created a bunch of new opportunities. You can also look for companies that have been successful recently and look for new variants on them. A good example of this is a company called NuvoCargo. NuvoCargo is a good example of explicitly sitting down to try to think about startup ideas and actually finding a good one, which is the thing that I told you is hard to do. NuvoCargo is basically Flexport for Latin America. They help US companies to import stuff from Mexico. And the story of NuvoCargo is that Deepak, the founder, was working on a different idea in YC. And he realized that his idea wasn't gonna work. And he went on like a systematic search for better ideas. And he picked NuvoCargo for very analytical reasons. He picked it because it was a large market, because there were good proxies from other companies, Flexport. And he picked it even though he didn't have deep domain expertise in the import-export space, because he had some connections that would enable him to get started. And he felt like he would just be very good at running this kind of operationally intensive business. And that worked really well. NuvoCargo is doing super well. You can also go and talk to people and just ask them what problems they have. This can work. The downside with this recipe is it actually requires a lot of skill. If you wanna do this, I would recommend first picking a fertile idea space and then going and talking to people within that idea space. And I would also recommend talking not just to potential customers, but also to founders of companies in that idea space to get advice about what ideas are actually worth pursuing. And a good example of doing this successfully is A2B. And A2B was in the position that a lot of founders that struggle to find good startup ideas are in, which is that the founders were pretty young and they hadn't acquired a lot of specific domain expertise like the Resi founders had yet. But they really wanted to do a startup and they wanted to do a startup that had like a genuinely good idea. The way that they came up with the idea for A2B was very systematic. And so I'm going to walk you through how they did it and really break it down for you. So A2B makes fuel cards. And if you haven't heard of a fuel card, it's like a special kind of credit card for truck drivers. When the A2B founders got into YC, they pivoted and they spent the whole YC batch looking for a new idea. And here's how they did it. First, they picked an idea space. And the idea space that they picked was essentially software for the trucking industry. And they picked this idea space despite not being experts at the trucking industry because they felt that it just should be a fertile idea space to go hunting for startup ideas. So the trucking industry is this like big industry, hasn't been that disrupted by startups and software yet. So they just felt like there were probably some good problems to work on in the trucking industry. But the problem is they didn't know that much about the trucking industry. So they didn't know what those problems were. And so they decided that they would turn themselves into experts in the trucking industry. And what they did is they actually physically drove to truck stops, which are places where truck drivers are just kind of milling about. And they would just walk up to truck drivers and like start talking to them and ask them questions about what their problems were. They also talked to a lot of founders who had started companies in the trucking space to get ideas for what problems were actually worth working on. They would basically talk to like anyone who knew anything about trucking that was willing to talk to them. And as they did that, they began to put together like a mental map of the space and where the good ideas were, where the bad ideas were. And they actually went through a whole bunch of different potential ideas before eventually deciding to work on fuel cars. And I love the example of A to B because A to B is one of the best new ideas to come out of YC in several years. A to B is a phenomenal company. And the approach that they used to find this idea is something that really anyone could do. And most founders don't do this because it just sounds like too much work. So if you're willing to put in the work, this is an amazing way to find a startup idea. And my last recipe is to just like look for big industries that seem broken. Any big industry that seems broken is probably ripe for disruption. And finally, I've got kind of a bonus recipe, which is to just find a co-founder that already has an idea. There are actually like a lot of people just on Startup School Co-founder Matching right now that already have an idea and are looking for a co-founder. So if you don't have a co-founder and you don't have an idea, that could be a great hack to getting both at the same time. The last point that I wanna leave you with is just to remember that it's often hard to tell if a startup idea is good or not. And so while I hope the concepts that I talked about here will help, typically the only way to know for sure if your startup idea is good is to just launch it and find out. So if after all this, you've got a startup idea and you're still kind of on the fence about whether it's actually a good idea or not, that is my advice for you. Just launch it and find out."
  },
  {
    "name_video": "The 5 things that kill startups post seed rounds",
    "description_video": "Michael Seibel goes over how problems finding product market fit, listening to investors, co-founder conflict, copying startups around you, and slow product development can kill startups.",
    "related_categories": [
      "Co-Founders",
      "Early Stage",
      "Board Management",
      "Founder Psychology",
      "Management",
      "Leadership",
      "Product",
      "Product Market Fit"
    ],
    "page_url": "/library/8a-the-5-things-that-kill-startups-post-seed-rounds",
    "youtube_url": "https://youtube.com/watch?v=Dgmmje5WHWA",
    "mp3_file": "downloaded/The_5_things_that_kill_startups_post_seed_rounds.mp3",
    "mp3_content": "My goal with this talk is pretty simple. At YC, we see a lot of companies who raise money on demo day, as you can imagine, but still the vast majority of them die. And about 70% of them do not go on to find any form of product market fit. We've thought a lot about why this is and how we can help change it. And so one of the things we try to do at YC is hint at some of the reasons why, even after raising that first million or 2 million, why companies die. And I wanted to go over in the next 50 minutes, some of the trends that we see are most common. So with that, let's move to the first one. I like to call this fake product market fit. It's extremely common for companies to say they have product market fit when they don't, and they have nothing close to it. And I would argue this is one of the most common forms of death, or I'll say one of the most common symptoms of impending death for post-seed companies. So let's talk about the causes. Why do founders believe they have product market fit when they don't? Number one, they raise money from impressive people. They believe that impressive people, famous seed funds, famous angels, maybe a series A fund, they believe that these people are great at choosing companies. And if these people chose their company, that means that they must have product market fit. They must be onto something. They must be building the right solution for the problem they're trying to solve. Extremely common, extremely common. Number two, raising a series A pre-product market fit. Nowadays, there are a significant number of companies that can raise five to $10 million when they don't actually have something yet that people love. And what's interesting is when that happens, more often than not, instead of continuing to focus on users and product, the founder will shift into focus on company building, which is typically a no-no. Number three, something we call magical thinking. So ignoring obvious facts in front of you that would give you the evidence you don't have product market fit, or not even measuring them. So for example, not understanding your churn, not understanding your payback period when you acquire a customer. If you don't know these numbers or you don't look at them, it's very easy to convince yourself you have product market fit when you don't. And then the last one is lack of strong technical talent. A lot of times people can convince themselves they have product market fit simply because they don't want to embrace the idea that they might need better engineering, they might need to improve their product. Improving their product is too hard, so it's easier to just believe your product's good. And before I go too much further, when we talk about product market fit, I think that unfortunately what you might think it means is different from what it actually means. I think what the common misconception is product market fit means conceptually we've built the product that our users want. In reality, it far more reflects numbers. And so what product market fit typically feels like is your product is breaking with profitable usage. So let's break this down. Your product is breaking. People are starting to come and use your product and word of mouth is spreading or your advertising channels are working and users are loving it, so they're retaining. And as a result, parts of your product that you didn't really build to scale are starting to not work anymore. Sometimes those are software components, sometimes those are operational or human components, but something is like starting to break because you didn't build it for scale. That's the first part. The second part is profitable usage. Those users are actually the type of users you want and they are the type of economics that you want. So you're not paying $1,000 for a user who's only gonna ever give you $100 or you don't have a three-year payback period or anything crazy like that. And so we gotta make sure that we have both of those components to have real product market fit. So what are some of the signs that you have convinced yourself that you have fake product market fit? Lots of hiring, lots and lots of hiring. Typically we see founders who think they have product market fit, magically their team goes from four to 12 before you know it. Number two, more business people than engineers. A big sign is, oh, it's time to scale a sales team. The numbers aren't moving, so let's scale a sales team. Number three, no metrics dashboards. No one's looking at numbers. Everyone's doing things by feel and by guess. Number four, too many nice things. This is harder in the time of COVID, but it was nice offices, nice trips, nice dinners. Suddenly you start spending money on nice things. Number five is flat graphs. That's pretty simple. Number six is missing your estimates, but coming up for reasons why that's okay. So, hey, we thought we'd do this in Q1. We thought we'd do this in July. We didn't hit it, but it's still okay. And then the last one, which is a really popular one, is changing your KPIs. Hey, we used to measure monthly revenue, but that number's flatlining, so now we measure monthly usage. If you find yourself changing your KPIs, usually you have to ask yourself, what's going on here? Did we get our KPI wrong in the beginning, or does that mean that we're actually not progressing our business? Preventative measures. So, once you've diagnosed the problem of fake product market fit, how do you fix it? One, pick an honest KPI and stick with it. Almost always, especially for SaaS businesses, almost always that KPI is revenue. And revenue, of course, has two components, revenue from new users and revenue from retained users. The next preventative measure is track your retention carefully. If your product is very good, it's unacceptable that your users are churning. Number three is to do what we call cap your burn. If you are pre-product market fit, you should determine the amount of money you're willing to spend, burn, excuse me, every month and stick with it. And you should basically say, until we have product market fit, we're not gonna burn more than this amount of money per month. So, if we wanna spend more than this amount of money per month, we have to spend on revenue, as opposed to spending the money that we raised. That's a great way to prevent yourself from going to fake product market fit or fake company building. The next one is somewhat subtle. Consider raising less money in your seed round. Also helps you because you get less dilution. If you have less money, it's a lot harder to do magical thinking and aggressive spending. You have to be a lot more careful about your metrics and your numbers, and it can prevent magical, the fake product market fit problem. Next is start with strong technical co-founders. The stronger your technical co-founders are in the beginning, the fewer engineers you'll have to hire. The next is have a three month essential rule when hiring. So, if the person you hire, three months from now, you just put a calendar event on your calendar for three months from now. If you don't find them essential, by essential, I mean, if they told you they were quitting on that day, you wouldn't even want to open your email or go to work. You'd be so distraught. If your early employees don't give you that feeling, you probably should let them go. The next is force revenue generating employees to pay for themselves. If you're bringing on an early salesperson, it's unacceptable that they're not paying for themselves. And then finally, to kind of break this idea that these impressive people you raise money from mean that your company is good, learn about all the bad investments that your investors have made. Learn how many of their investments didn't end up working out, so you understand that maybe your fate would be similar. All right, next one. The next big issue I see is turning your investor into your boss and doing what they tell you to do. This is a very, very easy way to die. The causes, I feel like I'm a doctor, causes. First, fear and self-doubt. Every founder has fear and self-doubt. It's just part of the game. If you can process that fear and self-doubt and continue to execute, you're in a good position. If you use that fear and self-doubt to seek out someone to tell you what to do, you are typically in a position of hurting your company. The next one is the false assumption that there are 100% repeatable paths to victory. My investors done it before. If I just follow what they do, I can do it too. This is honestly a very fair feeling because in most careers, it's true. If you have a mentor who's a great lawyer, you do what they tell you to do, probably you can get into a good law school and you can get into a good firm. Ditto for doctors, ditto for bankers. Unfortunately, in our game here, it's very, very hard to repeat success that someone else has done. The business environment just changes. Some of the rules are applicable, some are not. So, rote repeating is very hard. Then last one is the lack of talking to customers. What I see happen a lot is when you stop talking to customers, you stop getting insights on what's wrong and what's right about your product. And then in the process of seeking out those insights, you might go to your investors who certainly won't be talking to your customers more than you should be. Okay, so those are the causes. The signs this are happening. You're feeling pressure to spend more money than you want to. You are hiring faster than you thought you should or that you created a plan for. One big trick here is like you've decided to hire a recruiter pre-product market fit. That's a big sign here. You're burning more money every month, but your primary KPI is not increasing. You've locked in with one investor and closed off communication with others. And the belief that if you follow the plan the investor has given you, they will backstop you even if you don't hit your numbers. Those are the signs you've made the investor your boss. Preventative measures. Continue to talk to your customers. The more you interact with your customers, the more you onboard them, the more you talk to them, the more you'll have insights. The more you'll have the insights that allow you to figure out what needs to be built. So you won't have to look for external experts to tell you what to build. Number two, have a real KPI, have real metrics. You need to have numbers that can give you confidence in what you're doing so that you don't seek out experts. Number three, track retention. Number four, keep a low burn. You don't wanna depend on your investors to give you more money pre-product market fit. So keep a low burn. The next one is do a startup in a space you have some organic insights in, that you have strong opinions in so that you can trust those opinions. And then the last one, and the most important one is, know that you're the one who gives investors power over your business. If you're doing what your investors told you to do, you're literally giving them power over you. All they can do is use words. And so if you do not want your investors to have power over you, don't give it to them. They're not gonna come beat you up. They're not going to kidnap your family, none of that. All right, next topic. Number three biggest thing that caused C companies to die is co-founder conflicts. There's this phrase that I think is really valuable called relationship debt. So it's this concept of how much kind of bullshit exists between you and your co-founders that you haven't cleared away. And the more and more relationship debt you get, just like technical debt, the harder and harder it is to execute. And then at some point, just like your product is gonna fall over if you have too much technical debt, your relationship with the co-founder falls over if you have too much relationship debt. What are causes? First, a week previous relationship. If you barely knew your co-founder before starting your business, it's a lot easier for this to kill you. Number two, no clear roles and responsibilities. It's not clearly someone's job to do this and someone's job to do that. Number three is a lack of trust. Not feeling like you trust your co-founder to go do the thing that they're supposed to do. And then number four is unrealistic expectations. Almost always this comes with fundraising. It almost always takes the tune of, this company that sucks raised $10 million on TechCrunch. We just read it on TechCrunch today. They raised $10 million from this fund. Why can't we raise $10 million? And unfortunately, because the press covers fundraising so often, it's very easy to start getting unrealistic expectations about where you are versus how much you should be raising. Also, you never know the backstory about why that fundraise happened. So, signs of co-founder conflict and too much relationship debt. Lots of fighting or no conversation at all. Those are the two very typical signs. Some preventative measures. One is what we call a level three conversation. This is having a tough conversation with your co-founder about how you feel in a safe space, not while something is breaking or while there's some other drama going on, but in a safe, set aside time where you can actually talk about how you feel, talk about how expectations are or not being met, divide up responsibilities and roles, and basically pay down that relationship debt. Say the things nicely that are kind of bubbling inside and making sure that communication's happening. And then number two is an explicit roles and responsibilities conversation. I'm gonna do product. I'm gonna do fundraising. I'm gonna handle customer service. I'm gonna handle the mobile app. You're gonna handle the database. Explicit roles and responsibilities so people know what they're supposed to do and so that you can trust people to execute in their area. All right, number four, the fourth biggest thing that's killing folks out there. This is an interesting one. This is one that we call, are you being ordinary or are you being extraordinary? Are you copying the people around you but expecting a massive success? It turns out that in your normal life, if you are a smart person and you put yourself in a group of smart people, smart, motivated people, and you are middle of the pack, in normal life, you're probably in the 95th percentile. You'll probably do fine. You'll probably be a good lawyer, a good doctor, a good banker, a good employee at a tech company, probably do fine. The problem is that the failure rate at startups is so high that being average amongst smart people isn't enough. You've got to be extraordinary. You have to be many standard deviations better than the other people who are doing startups around you. So how do you reach for it? First, you understand that the people around you are the floor and not the ceiling. So as a cause, you need to understand that that's the case. And then the second cause of people doing this is not believing they can be better than the people around them, not having the confidence that they can be better than the people around them. The signs that you're reaching for ordinary versus extraordinary. And you'll start noticing a lot of these signs and preventative measures are starting to come up. So the first thing is, somewhat similar. One, no numerical goals. Measuring success by some other way, you know, being invited to conferences, press, that kind of stuff, but not numerical goals. Number two, ignoring obvious signs of lack of progress. You're not growing month over month, your churn's too high. Number three, a good sign. You're just happy to be alive. You're happy to be a company that's got some money in the bank. Number four, you've stopped learning. You're no longer learning new insights about what your customers need or about how your product should work. And then number five is blaming outside factors or a lack of luck for a lack of success. Oh, our timing was wrong. Oh, they got lucky they raised from this investor and we didn't. Blaming outside factors for your lack of success versus internalizing that you have to create success by being extraordinary. How do you prevent this? First, I think you just have to embrace the idea that you can get better over time. That like you will get better over time, if you try. That if you try to be extraordinary, you can become extraordinary. This isn't something that is decided by birth. Number two, I would encourage you to think about habit formation, to read the book Atomic Habits, and to start thinking about how you can become more productive every day. Extraordinary people get more things done. Number three is what I call a Jedi Council. Have a set of people that you get advice from who are more extraordinary than you. And then number four, set measurable goals. Challenge yourself to accomplish a goal in your business that you don't know how you're going to achieve. If you think you can hit this number, try to hit a number 15% higher. You're not going to become extraordinary by not trying. All right. The last one before we go into Q&A and I want to leave a chunk of time for Q&A. The last one is slow product development. Basically, the ability to get features, iterations, bugs, bug fixes out the door starts slowing and slowing and slowing. And so you're taking fewer shots on goal. This is the final way that I see startups post seed rounds die constantly. What are the causes of slow product development? First, you have no process for deciding what to build. No process. You don't run sprints. You don't have deadlines. Number three, you don't write specs. You just have conversations and then build what you talked about. You don't write anything down. Next, your engineers are not involved in product decisions. The people who are doing the work are not involved in the discussion of what should be built. The next one is no metrics. You can't tell whether a product's working or not because you're not measuring anything. The next one is you stopped interacting with customers. You got too busy. I'm too busy doing these other things. I can't talk to my customers anymore. The next one's bad co-founder relationship. If the team is not motivated, product development slows down. The next one is low quality product founders. I call these people fake Steve Jobs. They're the people who believe they know what the customer wants without ever talking to them. Or low quality technical founders. Your technical founders are not strong enough to produce product at high enough quality quickly. Very typically this happens with outsourced engineering teams. The signs that you're in a slow product development hole. One, deadlines are always missed, or there are no deadlines. Number two, your release schedule is quarterly or longer. You can't get anything out in less than three months. Number three is a discouraged or disengaged engineering team. An engineering team doesn't care whether you're winning or losing. And number four is half done features piling up. This is commonly the cause of a bad product founder. They'll have the team running down one road to build this thing. Then some customer will say something or they'll have some new idea. They'll cut that project short, not release it, and then run down a different road. Very bad. Here are the preventative measures. The first is have a product development cycle. If you Google search Michael Saiba product development cycle, you'll see an example of one that I've used. You can have any one you want. Just have a cycle and a process for deciding what you build that's repeatable. Understand that like one optimization you need to do is having a process where you take as many shots on goal as possible, as opposed to having a process where you try to imagine what's the perfect shot. Next, always be collecting qualitative and quantitative feedback. You should always be in whatever your analytics product is, and you should always be doing user interviews. The next, write specs. A product meeting is not done until there's a written spec that everyone can look at. Next one, simple, use product management software. By the way, none of these things are that crazy. It's just that people always make excuses for not doing the basic things. The next one is that especially when your team is small, you know, under eight people, under six people, have the product brainstorm with everyone, even if everyone's not contributing equally. Have everyone in the room when you're deciding what to make. The next one is give all team members access to the customer and access to the customer data. It shouldn't be just the product person that's doing user interviews, it shouldn't be just the product person is in mixed panel or amplitude looking at the stats. The next one is understand that motivation is a multiplier effect on talent. More often I see the product lead or the CEO, not managing the motivation of their team. And the result is that they think they know what needs to be built, they think they have the right people, but because they're not managing those people's motivation, all progress slows. And then finally, understanding that whoever's leading product is responsible for making sure that product is released, not deciding what to build. Everyone can contribute to the conversation about what to build. Your responsibility is to make sure that when we say we're going to build something, we build it. When we say we're going to build it, we have a deadline that we hit. Your responsibility is making sure the product development process is working. You're going to have some ideas that will get built, but other people should have ideas that should be built too. All right. With that, I'd love to take some questions. Please feel free to pile the questions into the Q&A feature here. Let's see what we've got. Well, I think I already defined product market fit. And honestly, I don't think the definition has changed since I read it. I read it in a Marc Andreessen blog post more than 10 years ago, and I don't think the definition has changed. Okay. Do you believe raising more money as seed translates into success? More success? Here's something counterintuitive. I actually think all things being equal, raising more money than you need translates into less success, not more. I see too many founders first not understanding that the more money they raise in the seed, the higher the expectation is of the Series A investor. I've had some conversations that go like this. Well, we raised a $4 million seed round, and we've just hit $1 million ARR. It's time to raise our Series A. Well, I think, and I tell the founder, okay, understand, there's another company pitching for their Series A that have reached a $1 million ARR, and they only raised a million or a million and a half in their seed round. As an investor, am I going to measure you similarly? Or am I going to say, huh, how much more is this company that raised $3 to $4 million accomplished than the one that raised one and a half? And so that's the first issue with raising more than you need. The second issue is that we have funded some of the most talented and smartest people at YC that I've ever had a chance to work with. And I've yet to consistently meet founders who can prevent themselves from spending more money when they have more money in the bank. I've yet to consistently meet founders who will double down on the metrics that matter when they have a lot of money in the bank. It's a very, very hard thing to do. The top one or two things that make startups really great from my experience. First and foremost, excellent technical talent. And I don't necessarily mean amazing resumes, you know, having managed 1000 people or built amazing things. When I think about amazing technical talent, I actually think two things. One is the ability to build software. And the second is a lack of intimidation. I think that one of the things that I've been amazing recipient of as kind of a business founder is that in both of my companies, my technical co-founders were not intimidated by building things they'd never built before. I've never heard anyone say, I don't know how to build this, or I don't think we can build this. Never heard it. And like folks who never built anything before built massively scalable websites, massively scalable video systems, built video filters, like almost everything they were building they'd never built before, but they weren't intimidated. So, the combination of ability and a lack of intimidation, I think is very big. It's probably the number one thing that makes a startup, increases the chance of startup success. And then I would say the number two thing is setting goals. It is really scary to set goals, it sets you up for failing. Founders who are able to get over that fear and set aggressive goals, oftentimes weekly and monthly goals, oftentimes numeric goals. The folks who are able to get over that fear and just embrace the challenge, they always do better. Okay, let's see. Yeah, this is a question about, you know, if you're in an emerging market, do you have a chance of getting into YC? I would say, if you go to ycominator.com slash companies, you can see we invest in companies everywhere. So, that's not an issue. As a SaaS company starting out, how do you deal with customers with credentials and big logos who want customizations? You know, this is an interesting question. This is why I think operating in an area where you have insight is extremely important. If you have insight, you'll be able to understand, are these customizations features that new customers will want? Or are these customizations that only this customer will want? Then you have to basically ask yourself the question, how much is the logo or the contract worth? And every company has to make that decision for themselves. What I will say though, is that you should be deathly afraid of becoming a consulting company. Most big companies will try to force startups to become consulting companies by customizing to a degree that is useless. If you're actually attacking a problem that people have, they are usually, and people have aggressively, like a strong problem that is a top three problem for a company, they're usually willing to work with you and use a product that isn't fully built and isn't fully customized. Before we hit product market fit, how far advanced should we be getting the pieces in place for growth? You know, it's funny. I think that these two ideas kind of live at the same time that are in direct conflict with each other. The first idea is that you can disrupt a big company by being more nimble, by planning less, by moving faster. And then the second part is, I'm running a startup and I want to hire more people, and I want to do more things at the same time. It seems to me like that second bit is exactly what big companies do, and exactly what opens up the opportunity for you to disrupt them. The company's not focused and hiring much people. So I would argue that in the early days, what we tell YC companies is, get 100 customers who love your product, and do it in a non scalable way. Sorry, we don't get 10 customers. Get 10 customers who love your product, and then get 100 customers that love your product. The word of mouth is a very powerful, very powerful thing. And I would argue that like, oftentimes getting sales channels and marketing channels working is a secondary project. It's something that's far more important to do after you have paying, retaining customers who love you. It's very hard for a startup to do multiple things at the same time. So I always choose paying, retaining customers who love you over marketing stuff. Always choose that, in my opinion anyways. What else do we have here? I mentioned the three month rule with new hires. When you think about your first five hires, what are your key pillars to recruiting in the early days to ensure you're only hiring essential workers? There are kind of a couple off the top of my head. Hire mostly software engineers. Know that you're going to be bad at hiring. Plan for you to hire people who aren't good, who aren't productive. Not that the people aren't good, but they're not productive inside of your company. Plan for what you're going to do when you discover that. I think those are probably the two biggest things. I think that most people build their hiring process with the assumption that they're going to have 100% success, which is crazy. No one has 100% success with hiring. Let's see. Is it okay to play underdog until you actually develop product market fit? Yes. Being an underdog is great. Being underestimated is a superpower of a startup. Being an underdog is great. I think that all too often, founders are looking at the press too much. And they're saying companies raise a bunch of money and make a bunch of, I don't know, noise. What you should think about though, is that a lot of companies get funded, and most companies die. Where are all the stories about companies dying? They're not written. So, when you are developing your kind of mental model for what to do, and you're reading the press, are you really getting a full picture? Or are you getting a distorted picture? Keep that in mind. The press is not giving you a complete picture. They're not to blame. To be honest, you probably want to read a distorted picture. But if you're going to win in this game, you have to go and do things you don't like doing, which is understand that things are not rosy and that raising money doesn't equal success. Let's scoot down, try to get some newer questions here. What's the optimal role of a lead investor upon raking investments? Yeah, that's a really good question. I want to split this off and really talk about seed investors as opposed to Series A investors. In my mind, seed investors should be far more aggressively following the kind of Hippocratic oath, do no harm. One of the things that I've realized when giving companies advice, and someone tweeted about this the other day, and it was really on point, was that it's hard to... understand as an investor how seriously your company might take your advice, even if your advice is low conviction or you have little experience in that space. And so I would always be really careful about doing harm, about leading someone down a road that they shouldn't be led. I always try to separate out information that I think a company should get from their users versus me. When they're talking to me, I'm trying to give them a sense of how not to fail. Really common failure modes they should try to avoid. I'm not trying to tell them what to build or what their customers want. I recognize that almost always I'm not the customer. And so any time they're asking me, what should I build, I always push them to talk to the customer. I think that's really important. Okay. Let's see. Can you be really extraordinary as an early stage startup? Yes. Yes. I see it constantly inside of YC. Maybe a better question to ask is what does extraordinary look like when you're an early stage startup? Most of the things that I talked about in my presentation are things that early stage startups that are extraordinary do. So they release product faster, they set goals and they exceed them. They maintain great relationship amongst the co-founding team. And they don't lie to themselves and they're metrics driven. If you do those things, you will be operating your company better than 95 to 99% of other startups. Most founders don't do the things that they know they should do because they're hard. And in the Atomic Habits book that I mentioned before, there was a really interesting passage in it that has stuck with me since. I've always been overweight. It's something that I'm recently made some success on, but it's most of my adult life had been overweight. And I've always kind of held this thought that people who are more fit than I, being fit came easier to them. And then I kind of applied this theory in other parts of my life. People who are better managers than I, being managers came easy to them. People who are better at math, doing math well came easy to them. And I kind of use this as an excuse. And there's this passage in the Atomic Habits that I'll butcher that basically said that people who are more effective than you learn how to do hard things. Being healthy isn't easier for them. Being good at math isn't easier for them. All these things that you think you're bad at, people who are better than you, it's not that it's easier to them, it's that they've trained themselves to be better at doing things that are hard. And the second I realized that, I realized, oh, wow, like in our lives, we have this process of doing self-improvement and it's really our responsibility to level ourselves up. And we can all do really hard things. We can all be extraordinary if we try to. But if we think it's some, you know, outcome of a genetic lottery, we're going to lose to someone who's just working harder and more effectively. Scrolling around here. I think I answered that one. How tough is it to not give up 30% of your company prior to the A? Oh, wow. That's a great question. Unfortunately, with the rise of professional investing pre-A, this trend has basically happened where investors have understood that in order for them to make really good returns, they really need significant ownership in your company. And so if you raise money from a pre-seed investor, an accelerator, a seed investor, and each of them for their model to work needs like 7 to 12% of your company, it's really easy to give up 30% of your company before the A. To be honest, my best answer to that question is fund your company with revenue. I think that sometimes founders forget that like they can generate revenue and that that revenue can be a significant portion of their funding. So if you can fund your company with revenue, each of those pre-A rounds can be smaller. You don't have to raise as much money. You don't have to give us as much dilution. Also here's a fun trick. If you're generating revenue, each of those pre-A rounds will be at higher valuations. So it will also be less dilutive. So more often than not, I think founders like laser in on a bad plan and then kind of want everything else to work well. They want to not be diluted. You know, they laser in a plan that doesn't involve charging their users, involves them needing a lot of money up front and a lot of employees up front, but they're worried about dilution. And it's like, the world is what it is. Investors have the needs that they have. The thing that can change is your plan. And if you can figure out how to have a plan that requires less money, that gets you revenue faster, you get leverage. If not, it'll be more and more the case that you'll have to sell larger and larger company chunks of your company. That's just the way it is. All right, there's been some new ones. How do early stage startups set really good, clear goals from your experience? This is actually very simple. They actually write the number they want to achieve every week down on a spreadsheet. They create a graph and they look at it every day. You know, the Airbnb founders did this amazingly well when they came into YC. It was January 2009, the economic kind of crash was fully realized. And Paul Graham told the whole batch, we don't know if any investors are going to come to Demo Day. So you all need to try to become profitable. And the Airbnb folks internalized this and they basically said, we need to be generating, I believe the number was $4,000 a month to be profitable. They called it Ramen Profitable, basically would cover rent and eating ramen. And they basically said, if we want to hit that number by Demo Day, here's every number we have to hit every week between now and Demo Day. Then they printed that graph out and they put it all over their apartment. They put it in their kitchen, they put it in the fridge, they put it on the bathroom mirror, they put it everywhere. And every week they track to see whether they're going to the numbers or not. And before Demo Day, they were Ramen Profitable. It turns out that like, you won't know how you'll accomplish a hard goal before you set it. So once you set it, that's when you start getting creative. That's when you start figuring your shit out. So step one is aggressive goal. Step one is not plan. Step one is set the aggressive goal. Step two, come up with idea on how to hit it. That's the best flow. All right. I think we are at 1150. So I'm going to cut it off right here. Hopefully this was helpful. For many of you who've raised seed rounds, the fate of your company is in your hands. Most of your competitors will not do most of the things I said in this presentation. If you do, you have an unfair advantage in beating them. If you don't, just imagine the team that you're competing with who does do these things. Who's going to win? They probably will. So don't let anyone beat you on the basics. That's my last piece of advice. Great chatting with all of you. Have a good day. Thank you, Michael. Thank you all for attending. We hope you visit our last sessions and enjoy SaskTel Annual. "
  },
  {
    "name_video": "Managing startup finances",
    "description_video": "YC's Kirsty Nathoo shares the most common mistakes startups make with their finances and how they can prevent them.",
    "related_categories": [
      "Finance",
      "Legal"
    ],
    "page_url": "/library/8I-managing-startup-finances",
    "youtube_url": "https://youtube.com/watch?v=LBC16jhiwak",
    "mp3_file": "downloaded/Managing_startup_finances.mp3",
    "mp3_content": "Morning everybody, thank you for coming in at nine o'clock. It's an early start. So as Kevin mentioned, my name is Kirsty Nathoo and I'm the CFO here at Y Combinator. So I've actually helped now 2,000 companies almost as they've come through Y Combinator. So seen a lot, seen a lot of successes and seen a lot of failures. So I'm going to help you just understand some of the big mistakes that we see some of these companies doing based on their cash and based on their money. And so for every business, whether it's a startup or a mom and pop shop, cash is its lifeblood. And if you run out of cash, then the business dies. There's really no going back at that point. And it's actually surprisingly easy to run out of cash. We see many startups not realize that they have done that until it's too late to actually be able to turn it round and do something about it. So we're gonna talk about these three early stage pitfalls. So this is probably most relevant to you right now. And then we'll talk through another three that as you start to raise money and are starting to think about hiring are some other mistakes that companies make. So we're going to look at what the numbers you should be looking at, how often you should be looking at them, whether your expenses are realistic and then thinking a little bit more about hiring and looking at responsibilities. All right, so let's move on to the first one. So the first mistake is really not knowing what numbers to look at to make sure that the health of your company is good. And really there are three things that you should know. Your bank balance, the money coming in and the money going out. And these are not difficult. You don't need anything fancy to be able to do this. This is all information you can get from your online banking or your bank statements. You don't need bookkeepers. You don't need financial software. This is super straightforward, but you would be amazed at how many companies don't look at this. And then using these three numbers, you can then calculate some other things. You can look at burn. You can look at your runway. You can look at growth rates and you can figure out whether the company is default alive. Okay, let's go through these in order. Your burn is purely money in minus money out. Again, you can get this from your bank statements. It's effectively just the change in bank balance between two dates. Here's an example. Super easy. You have 25K expenses. You have 10K of revenue. So your burn is 15K. If your expenses are a little bit lumpy, some companies, you might have a one-off month where you, I don't know, paid a legal bill or something that's super high. You can do this. You can look at average expenses as well to figure out your burn. And that's often referred to as average burn. So you might look at this over three months to kind of get more of an idea. So then once you know your burn, then you can start to look at what your runway is. And what this means is how long do you have until you run out of money? And the way that you calculate that is you look at your existing bank balance divided by your average burn. And that gives you a number of months. So here we have 150K in the bank. We've just calculated our burn rate to be 15K. And so we have 10 months of runway. Again, super straightforward, but you'd be amazed at how many companies or how many founders don't know these numbers for their company. And just a point here that, again, the burn might change over time, but this is a number for you. This is not a number to try to make things look good. This is for you to not lie to yourself. So looking at the burn and going, well, this month it was 15K, but let's just pretend it was 10K. So then that makes it look like that we have 15 months of runway left. All you're doing is lying to yourself. You're still gonna run out of money on the same day. It's just making you feel better right now. So it's super important to really be honest with yourself on these. You can also look at your growth rate. And so this is just looking at two periods of time. So your money in in month two minus your money in in month one divided by your money in in month one. So this is looking at the rate that your revenue is increasing. So in our example here, we have 10K of revenue in July, 12K in August. And so our growth rate is 20%. And just a note for the people that weren't the math wiz at school, a constant growth rate is what's going to give you the J curve in growth of revenue. Because if you have 20% growing each month, as your numbers increase each month, that 20% is a larger number. Okay, and then the final one is whether the company is default alive. Or the other side of it is, is it default dead? So the way you calculate this is if your expenses are constant, and your revenue growth that you've just calculated continues, have you got enough cash to reach profitability? And there's a handy little calculator that Trevor Blackwell, who's one of the founders of Y Combinator, created for you to do this. And basically, there are three things that you can play with. So you can look at your monthly expenses, which is the red line. You can look at your monthly revenue starting point, which is the green point over at the start. And then you can change the gradient of that line to be your growth rate. And it will calculate where you become profitable, and how much capital is needed. Now, this example isn't the same numbers as the ones that we've just been working through. So in this example, this is assuming that you will need 150K of money to get to profitability, and it will take you two years. And so those are really key things to know, because if you only have 100K of money in your bank account, you know that you've got a problem, and you know that you either need to find a way to increase your revenue growth, or you need to find a way to cut expenses. Because the whole goal here is to be at the point where you can find a path to profitability, because it gives you freedom. Being profitable gives you freedom, because you aren't in a position to need to raise money. And kind of like dating, if you don't need to raise money, you appear less desperate. So the investors want to give you money more, so it's easier to raise money. So it's actually really important to have that option. It can sometimes, you know, it can be a switch as well. You don't have to necessarily be profitable right now, but if you know that you could turn off one specific expense, or do one specific thing, and be profitable, then that's also a great safety net. There's also a really great essay that talks about this in more detail. This was written by Paul Graham, and you can see the link here to where that, that gives you more information on this. And again, it's the kind of thing that when we're doing office hours with founders, it's one of the first questions we ask, and you'd be amazed how many people don't know the answer. These numbers, super easy to calculate, super straightforward. The next problem is that people go along, and they say, okay, I've looked at my runway, I've looked at my revenue, I know all my numbers, and then kind of forget about it. But actually, this needs to happen pretty often. You shouldn't be looking at it every quarter, or every month, you should be looking at it at least every week. And if your runway is getting low, or things are looking not very constant, consistent, you should be looking at it very often, like sometimes daily. And whenever anyone asks, you should know your numbers. Have a think now, how many of you know how much money is in the company bank account if you already have one? Great, how much of you know your runway? Slightly less number, slightly less hands, but that's pretty good, I like it, I'm impressed. Okay, the next one is under-representing your expenses. So if you think back to that default to live calculator, that assumes that your expenses are going to remain constant. And actually, in reality, that's probably unlikely. Most startups, their expenses will ramp up over time. And you should understand how that's going to happen. What kind of expenses are going to increase, and what are they going to increase to? So some examples of expenses that may change over time is the first one is undervaluing your own time. Particularly in the early days, where you're doing everything, and you're either paying yourself minimum wage or some very small amount, which by the way, in California, everybody should be paying themselves minimum wage. And you're also doing things that don't scale in order to acquire users. And that's totally fine, and that's what we recommend that people do. But it can make your customer acquisition costs look lower than really they are. And so you should be aware that over time, as you start to hire people to look into these, that those expenses are going to go up. Hiring people is not just their salary. For every person that you hire, you need to provide them with equipment. You need probably desk space. You need health insurance, probably, depending on where you're based. And so all of these things cost extra money on top of the salary. And so depending on location, a good rule of thumb is that an employee will cost about 25 to 50% more than just their salary. So if they're being paid 100K a year, then your fully loaded cost to the company is going to be somewhere between 125K to 150K. And again, that's super easy to forget about. You think, oh, I'm going to hire an engineer. I'm gonna pay them 100K. That means that's all it's gonna cost. But it's amazing how those numbers do add up. So just be aware of those. Finally, assuming paid acquisition costs remain constant is another mistake that we see people make a lot. Whilst it may not seem like this, oftentimes in the early days, it's actually easiest to find your early users because they're the ones that are totally motivated to use the product. And actually over time, it gets harder to find and convert users. And so the cost of doing that goes up. And so again, you should be thinking about that. You should be looking at what your costs are right now and seeing, thinking, are they reasonable? What do we think they might go up to? Because if you can look at things in the worst case scenario and you have, you know, in the worst case scenario, you calculate that you have eight months of revenue, eight months of runway left, but actually then things are better than that. And you end up with 10 months of revenue, then that's bonus, right? You've got a bit longer to figure things out. Runway is not a vanity metric. It's not one of these things that's supposed to make you feel good. It's not one of the things that's supposed to be used to compare yourself against other companies. It's for you to know the health of your company. And so don't ignore this stuff. Don't lie to yourself. Don't, you know, try to massage these numbers to feel like it's making yourselves better because all that's gonna happen is you run out of money and it'll become a shock. All right, so these ones now are starting to get a little bit more as you raise money, as you're starting to hire people. So it's good to bear in mind right now, but these are probably less relevant to a lot of you for now. Okay, the first one is outsourcing responsibility. And often the CEO will hire a bookkeeper to prepare the finances for a company as they start to get a little bit more complex. And that's a total normal thing to do. We recommend that people do that. It's usually once people raise some money, it's not a good time. It's not a good use of the CEO's time to be doing the books and the CEO can be doing much more high leverage things. But the thing to bear in mind is that even though the bookkeeper is doing the books and preparing those numbers, the responsibility is still everybody's in the company, particularly the CEO, but all the founders, everybody should know what these numbers are. An external bookkeeper isn't going to know the business like you know the business. You know, oftentimes they will, the way that they work is that they will get hold of bank statements and they'll see money coming in and they'll see money coming out and they'll do their best guess about what these things are and they won't always be right. And you can't really expect them to always be 100% right because they're looking at it from a very removed position. And so it's up to the founders and it's up to the team to look at those reports that the bookkeepers send every month and to make sure that you understand them and to make sure that if anything that comes through that looks strange, you question. It's not necessarily, I think a lot of it is that people are concerned that asking questions will make it look like they don't understand their numbers. But usually what happens is if you don't understand what these numbers are looking like, it's usually because there's been some misunderstanding in the reporting of the numbers. And so if you're like, well, I thought my revenue was going to be a bit higher this month, what's going on? Why is this, you know, why is this this number? Then you can actually go in and look and query what's going into that and you know, you might find that there has been a mistake made. And this is probably one of the number one things that I get founders coming to me complaining about. They'll come up to me in this total panic and I'll be like, the bookkeeper messed up and they told us all this wrong stuff and now I have no runway and I don't know what's going on. And actually what happened is the bookkeeper sent them the monthly reports. They were like, tick, done my work. Founders didn't look at the reports, didn't figure out what was going on. And now there isn't enough time left for them to turn the business around either to get profitable or to raise money to figure things out. And the company dies because it runs out of cash. So super, super important to be on this all the time. Hiring too quickly and scaling the company too quickly is, it's really easy to do, to hire too quickly because you're under a lot of pressure to hire people. It feels like it's a really easy, really measurable piece of information. You talk to founders and one of the first questions that they will often ask is, oh, so how many employees are you at right now? And you say, oh, I'm at 25. And you're thinking, oh no, I've only got 10 employees. That means they're way more successful than I am. And actually that's totally not true. So we already mentioned that hiring employees costs more than just their salary. But you should also be conscious that every hire is actually an investment into the business. And you should be making sure that you're getting a return on that investment. And now for some types of employees, that's super easy to measure. So think about a salesperson. If they're not bringing in more sales than it's costing the business to hire them, then clearly you're not getting a good return on investment. But then think about a community manager or a support manager. It's much harder to measure that. And that's kind of one of the things that as a CEO, you need to be looking at and you need to be figuring out to make sure that all the people in your company are actually working to make the company more valuable. And sadly, this is the point where, if people aren't working out, you should be prepared to fire fast. If people aren't pulling their weight, then they need to leave the company. And like I say, it's easy to fall into this trap that the more people you have, the better you're doing, but actually the best companies do more with less. And so actually the real way that you should measure yourselves is, what's my ratio of revenue to employees? Because the higher that is, the better you're doing. You're doing more with less. And that's the path to being profitable from an early stage, which then takes the pressure off to the worry about whether the company is going to continue. And it's also easy to feel like you have to kind of compete with all the flashy startups that have raised bunches of money and they're all hiring data scientists right now. And, oh, that means I must need a data scientist. So I'd better hire a data scientist. Actually don't. Again, the best companies do more with less. And if you can build a really great company with less employees, then that's amazing for everybody involved. And bear in mind, you should be treating this money carefully. It's not a case of just, oh, I need to hire this person. I need to hire that person. Because what the investors who are giving you this money for, they're asking you to do something, basically a miracle. They're asking you to take their money. and turn it into 10 or a hundred times that amount of money to give back to them. And the way you're going to do that is by being careful with your expenses and making sure that your revenue grows. As a follow on to that, scaling before you get product market fit is also another dangerous thing that people fall into quite easily at the point where you're still figuring out what your product is and you're trying to find product market fit, you should be spending as little as possible. And then that will give you the runway to have time to figure out what it is that you should be building and then people will be beating down the door to buy your product. More employees will not help you get to product market fit. It will not help you get there faster. It will not help you get there more efficiently. And one of the conversations that I have with founders is something along the lines of, oh, my sales are low because I don't really have enough sales people. So if I hire another couple of sales people, then my sales will obviously increase. That doesn't sound like product market fit to me. If you have that, then customers are beating a path to your door and it feels like the wheels are falling off as you're trying to look after all those customers. So just hiring more sales people isn't necessarily going to be the thing that sets that going. Also, convincing yourself that you need more developers or you need more people to get the thing that gives you the product market fit. Another conversation along this is something like, I need four more developers because then I can build feature X, Y, and Z and then obviously everybody will buy it. But again, if you have product market fit, then even your janky V0 that doesn't have all of these fancy things is solving a big enough problem for everybody that they're willing to pay for it and they love you for it anyway and then you can start building up on the more features and then you can start hiring to do that. This is the one that there's no coming back from. The other ones, if you make these mistakes, you can probably solve this and if you hire too quickly, you can figure that out. If you don't know your numbers, you can learn your numbers. This is the one that is no going back. So if you let your runway get too low before raising, you're going to have problems raising your money. So the first thing is you should always assume that you will never raise any more money. Always assume that the previous money that you raised will be your last and that you should be aiming to get to profitability on that money. So again, the conversations that I have with founders where they say, oh, it's fine, my investors are going to put in another million dollars, it'll be totally fine. That's kind of scary if you're relying on your investors to do that because they don't always. Sometimes they might, but they don't always. So stage money is the money that you'll raise off and on just an idea. You'll be able to talk to investors about an idea for a product. You've got a hypothesis that you want to be able to check and they will give you some money. Once you get to series A and beyond, that becomes much, much harder. You need sustained growth, you need to have more of an idea, you need to have product market fit. This is why it's a lot harder to raise money as you go through the life of the company. And in particular, don't leave it too late because if you're running out of runway, your leverage goes down as you're trying to raise money. So if you have six months of runway, let's say, and you think you're about to go and start raising money, that's pretty scary, it could take three months more to actually get an investor to agree to put money in. And as your cash balances are decreasing over those three months, you're losing leverage. You can see from here that probably at six months, maybe you can just about pull it off, but really you want to be thinking at 12 months runway, that's the point where you're thinking, okay, maybe I need to think about whether I raise money or whether I'm thinking about getting to profitability. And also if you get to six months and you're unsuccessful in raising money, you really don't have a lot of time to turn this around to get to profitability for the company to succeed. Again, there's a really great essay on our blog that goes into this in more detail, link down here. So you can read that at your leisure and hopefully take that on board. Okay. So in conclusion, most companies die because they run out of money. It's super easy not to run out of money just by looking at a certain number of things, knowing your cash balance and your runway, understanding how your expenses are going to increase, understanding that the ratio of revenue to employees is a better metric than just the number of employees and having a plan to get to profitability because you should assume you're not going to raise any more money. All right. Thank you very much.  So a few minutes for questions. I've always thought the way that you're saying it, that you should try to get profitability on a shoestring if possible, but I've read an article which claimed that being profitable is actually bad somehow in Silicon Valley and you should try to raise massive amounts of money and not be profitable and get market share and go along those lines. And what do you think of those claims? And is that something you can be bound for or how would you say that? Yeah. So the question is, how do you balance the two sides of you should do things on a shoestring and be profitable as early as possible versus you should just throw money and get market share as fast as possible? I think it depends on the stage of the company as well. You know, in the early days, then probably being careful with your money and making sure that you have a plan to get to profitability is a good thing. Just having a plan doesn't mean that you necessarily have to actually be doing it. You know, so an example might be, maybe you're plowing all of your revenues back into marketing in some description or rather, and knowing that you could actually slow, you know, the way to reduce your expenses is to reduce your marketing, which might slow your revenue a little bit, but it would conserve that cash to preserve the runway. It's just, it's a balancing act. And, you know, I mean, the other thing you have to bear in mind is that obviously the investors want you to spend money super fast. They want you to come back to them cap in hand with, you know, please, please give us more money. So there is, there are some tensions there, but it's all about just being responsible with it and giving yourself enough time and enough runway to be able to figure it out. You mentioned the CFO earlier, and I'm just curious at what stage do you bring a CFO on for a non-fintech company? Do you start with a part-time CFO first and graduate to a proper CFO full-time? Okay, so the question is, when do you bring in a CFO? It's surprisingly late actually, even probably post-series A, you probably don't need a full-time CFO at that point. And there's a lot of services that do, you know, consulting CFOs and will do sort of strategy or, you know, help you to figure out your numbers to raise, to create a deck or whatever for raising money. A full-time CFO is actually pretty late on. Just to bear in mind though, that the difference between a CFO and a bookkeeper, at least for the US, is that generally the way that this works is the bookkeeper you would have earlier. And they're the people who are just going to get your numbers that are coming through your bank statements into a balance sheet, into an income statement, into the accounting system. So they're providing the reports for that. And then separately to that, you would hire a CPA, an accountant who would prepare the tax returns and file those for you each year. So there's actually two different sets of people. So a bookkeeper you would need earlier, a CPA you need annually to do your tax returns and then a CFO who's going to sort of oversee that and do more of the building out forecasts, building out budgets and things like that are probably a little bit later on as well. Before that, it's really the founders that should be doing it. Yeah, my question is regarding the reach and profitability for all these things. So do you suggest any financial projections, tools or any financial commoditization tools? So how can you calculate it? I mean, there are tools online. Personally, I think it's actually better to build it yourself because I think it makes you think about it in your mind. And so usually just doing good old spreadsheets for me works well. But certainly there are other ways that you can you can do it. And there's a lot of services and a lot of startups. We see a lot of startups applying to us trying to help to make it easier to see forecasts and things. OK, maybe one more question and then we'll move on. Let's go this side. So we haven't found product market fit yet, so we need to do a management projection slide on our deck. You haven't found product market fit? We have not found product market fit yet, so we need to do a management projection slide on our deck. Oh, for investors. So are you raising seed stage money? Yeah. OK, so the seed stage. So the question is, should you provide forecasts in your deck if you haven't reached product market fit? And the answer is probably no. Certainly at the seed stage, if you're talking to professional investors or experienced investors, they probably aren't really going to look or ask you for that number. They'll they'll ask you for things like, so how could how big could this get? And what's the total market size? And, you know, questions like that. But they're not going to be looking for here's our monthly growth predictions. Probably if you're being asked those kind of questions from investors and you're raising money at the seed stage, it probably means that those investors are not actually that experienced at investing in early stage companies. So that's a data point for you to decide whether it's it's a good person to to work with. Certainly by the time you get to series A, however, you should have you should have some plans. But, you know, the point of a series A is that you've got product market fit and that, you know, you know, you have more of an idea. I mean, forecasts are always forecasts. You don't know for sure, but yeah. OK, I think we are up, so thank you very much. I'm doing an AMA on Friday, so if there's questions that I didn't get to, then feel free to drop them in there and I will answer as many as possible of those. Thank you."
  },
  {
    "name_video": "Analytics for startups ",
    "description_video": "Ilya Volodarsky, co-founder of Segment, presents his tactics for setting up analytics to build your MVP and measure your metrics.",
    "related_categories": [
      "Product",
      "MVP",
      "Growth",
      "KPI",
      "Customers"
    ],
    "page_url": "/library/8H-analytics-for-startups",
    "youtube_url": "https://youtube.com/watch?v=LLerCc7MOQo",
    "mp3_file": "downloaded/Analytics_for_startups_.mp3",
    "mp3_content": "Hi everyone, my name is Ilya. I'm one of the co-founders at Segment, and I'm here to talk to you about how to set up analytics and the analytics foundation to build your MVP and to measure these primary and secondary metrics. So this is gonna be a little bit more of a tactical guide around what tools are there in the analytics space and the marketing space, which ones should we actually be using, how do I set them up? Cool. Just before I get started, a lot of you may not know what Segment is. It's an analytics API where you can send analytics data and then toggle on different tools. So we sit in the cool market position where we can actually see what tools startups are using, and we can bring that information to you. Secondly, we've been around for about six years, and so we have information about a lot of different startups as they grew and what tools they used, so we're gonna be sharing a lot of those today. Cool. So why talk about, why even focus on analytics? So obviously primary and secondary metrics drive the MVP and product market fit process, and you're using that to actually test product market fit. You're also using it once you get out of product market fit strict search to actually focus the team. So maybe there's gonna be an acquisition issue in the company that's preventing your growth, or maybe the users that you're getting aren't as engaged, or maybe you're having some monetization issues. And so the funnel actually is a forcing function to understand your business and where founders should be actually spending their time. And then finally, all the way from two, three person team to a Google with one million employees, you're actually using metrics to operate and drive teams. So eventually you have an engineering team, you have a marketing team, and so what goal do you set in front of the marketing team? Use analytics for that. Okay, so today we're gonna cover a few different things. So first you always start with the funnel when you're thinking about analytics. So that's the sequential series of steps your users go through to actually get value and then pay you as well. Then we're gonna talk about collecting data for your analytics tools. Then we're gonna talk about the top three metrics. So this will include primary and secondary metrics that work for most products, and then a product market fit methodology that you can apply on top of that. And then finally, we'll make recommendations about what tools are the best in the market right now that help the product market fit journey. Okay, so to start, always start at the funnel. So we'll make an example funnel for Netflix, which is a company that we're all super familiar with. Any B2B product or B2C product actually has this type of funnel where you acquire a user, you engage a user over a period of time, that loop is called retention. And then finally, you monetize the user. And then metrics, both primary and secondary, are performance indicators on top of each stage in the funnel. So on top of acquisition, you can ask yourself, how many net new users did I get this week versus last week and what's my growth rate there? For engagement, you take a cohort of users. So from Sunday to the following Monday, you have 16 people sign up and then you can track that cohort of users week over week and see what percentage of them are still using the product four weeks later, which is a good example of how to track retention. And then we talk about monetization, which is how much net new revenue did I make this week versus last week? Okay, and then you apply your own custom business funnel to this. So if you're Netflix, we're all familiar that users sign up for Netflix, then they play videos in a loop. Netflix is obviously very sticky, watching it a lot. And then finally, when the trial runs out, you do subscription upgraded and you get access to more content. Okay, so how do you collect data once you have this funnel? So there's analytics APIs out there. I'm using segment as an example. You basically wanna say user, user one, two, three, in this case, has done user signup event and they happen to be an organic user, which means they're not invited by someone else. Then if you're Netflix, you might say the user's video played and then eventually subscription upgraded. And so this is how you instrument your tracking in your mobile app or your web app. Then you think about event properties. So imagine you're Netflix and you're holding one of these video played events in your hands and you're wondering questions about it. So, you know, what video is the user actually playing? How long is the video? How far did the person get inside of the video, right? Equivalently, if you're holding a subscription upgraded event, you're gonna wanna derive monetization as a North Star metric. So if you're a subscription business, you wanna send your monthly recurring revenue. If you're a transactional business, like e-commerce or retail, you wanna send the actual value of the transaction. Okay, so then you push this out into your web app, your mobile app, then you start seeing the data come in. You look at the debugger, you see, okay, user signup is here, everything looks good. You add your first analytics tool. We'll use Amplitude as a good example here. Amplitude and Mixpanel are pretty awesome analytics tools out in the market right now. And then you start seeing data flow inside of one of these analytics tools. So this is Amplitude. You can start seeing user signups growing as soon as you launch the real like mobile or web app. Okay, so now that you have analytics set up, it's time to focus on three different metrics. The first one is the acquisition metrics, signups per week. It's really nice if you're a B2B business to cut this by the invite type. So you have organic users which are just signing up from coming to your website, direct signup, and then some users are inviting other users, so those are invite type, right? So when you're thinking about growth, it's really important to think about the organic user in that case, right? Another example why event properties are important. The way you create this is you go to Amplitude, you say event segmentation report, user signup next, here's your graph, right? So it's as easy as that. Just website, send data, gets to Amplitude, and then you can see the amount of organic users every week. And then if you're working on the acquisition step as a secondary metric, you can basically say, today 218 users organically signed up in the last week, but by the end of the month, we want that to be at 300. And we're gonna execute projects A, B, and C this month, and then we're gonna watch this graph every single day on a TV dashboard in our office or our apartment, wherever we work, and then we're gonna see if our efforts are actually driving this, right? So that's an idea of data-driven operation of a team. You set a metric and a goal, and then you drive towards that every day. Okay, the second one is retention cohorts. So someone recently asked about retention. We'll talk about that right now. So with retention, you wanna think about cohorts of users. So you wanna say Monday to Sunday, let's say December 10th through December 17th, 16 users signed up. And then you look at those 16 users as they use your product on week zero, which is their sign-up week, week one, week two, week three, and week four. And the general idea here is you can convince your mom or your grandma to use your product once, but even your mom or your grandma won't continue to come back and use your product over time every single week, right? And so if you see users that are addicted that are coming back week over week, that's a really good sign of product market fit. So this business can see that the December 10th cohort, only 6.25% of those users are still around on week four, and that's a pretty low amount, right? So you probably want that to be somewhere between 20 or 30 at least. And so you can set a goal saying, I'm gonna talk to a bunch of these target users and try to figure out why they're not getting value out of the product and then make some changes as well. Okay, so what metric do you actually pick? This is taken from one of Gustav's slides, pretty awesome. You think about what value your company is giving to your users. So Airbnb gives you value by letting you stay at different rental properties around the world, right? And they want you to do that at least one time a year, otherwise they consider you a churned user. Equivalently, Facebook gives you value by letting you look at the newsfeed and connect with your friends, and they want you to do that at least daily or monthly once. And so when you think about product market fit, you basically have these two different curves that happen. So we have that cohort of 16 users that signed up in one week, and we track them over time. And so what ends up happening is for products that don't have product market fit, they end up tending to go to zero because people just don't care about the product, right? And that's the definition of product market fit. For the tools and the products that do have product market fit, you'll see some kind of natural plateau. Don't mind this axis, it should be somewhere between 20 and 30% at least. Okay, so how do you create this graph? It seems kind of complicated, right? Luckily, both Mixpanel Amplitude have really awesome reports for this. So in Amplitude, it's a retention analysis report. You say, users enter the cohort with user signup, and then they return with the video played or the subscription upgraded event. That's the value event. And then you press next, and out comes this graph. And then you could look at four-week retention for cohorts, improve the product, and watch as new cohorts that strike the four-week mark do better or worse, right? And that shows you whether your changes week over week are actually improving. Okay, finally, revenue. So this is the primary metric that you wanna be thinking about. For a subscription business, the subscription upgraded event, you'll do a property sum over new plan, monthly recurring revenue. You press next, and out comes your weekly net new revenue graph. And then you could set monthly goals on top of this to make sure you're growing at the rates that you wanna be. Okay, finally, if you have a founding team, it's really good to basically put all this stuff on a dashboard, and then put this dashboard on a TV in your office. It's incredibly, incredibly important. Basically, this is kind of the difference between being a data-driven team and not a data-driven team. A lot of founders actually set up their analytics, but then don't look at them ever again because it can be painful, right? While a data-driven team will put it on a TV and talk about projects, talk about whether those projects are actually changing the metrics that they're trying to drive, and then just completely understand the business every single day, right? And this kind of company and this kind of founder will actually scale to build better, high-performance companies because the next team of employees they hire will also be looking at that same TV dashboard and be driven off those same metrics. So, really important, get a TV. Next, what you wanna do is have some kind of social accountability around your metrics. So, if you have your friends, your parents, your advisors, your investors, package up how your business is doing into an email. This helps you synthesize what is actually happening, and then send it out to those advisors and tell them where the business is struggling and what your plan is to fix it. This allows the advisors to quickly understand the business and then respond back with much more appropriate advice. Cool, and now we'll go into the startup stack. So, these are tools that we recommend that help this kind of tactical process of setting up these metrics. So, I'm gonna talk a little bit about that MVP business, business workflow that Michael talked about earlier. So, initially, you're building an MVP. Segment built about seven different MVPs before we actually found Segment, and all of those failed, and eventually we found one that worked. And the process of actually building an MVP is incredibly important. So, once you have that little experiment built, you wanna enter private beta, which basically just means getting like 10, 20, 30 customers to actually try this product, and then having very direct lines of communication open with them. What Segment does nowadays, every new product we ship, we open Slack channels with each one of our customers, and we have the product managers sit in those Slack channels and talk with the customers. For the products that don't get product market fit, the customers just stop responding, and we're asking, asking, asking, they're not responding, right? And for the products that do have product market fit, the customers are immediately being like, oh, why don't you have this feature? This is broken. I tried inviting my team in, this is not working. So, instead of you kind of pulling at the customer, the customer starts pulling at you. That's a good feeling of product market fit. Okay, so at some point, the private beta is going, well, you feel like people really care about this. You understand your target customer. Then you wanna get a larger market segment to use it. That's the launch that we talked about earlier. Try to get there as quickly as possible. And then a launch is just more users that you get to test product market fit on. And so if you feel product market fit there, then you can start scaling the company, right? And you hire salespeople, and you start doing paid marketing and things like that. So, different tools will guide you throughout this process. So, as you're building an MVP, and you're about to give it to the first group of customers, install Google Analytics, install Amplitude. Google Analytics will tell you who's coming from the internet to your website, and then Amplitude will tell you which features are they using, how engaged are they with that feature set. Unless you're able to stand over the shoulders of all of your users 100% of the time, Analytics is the next best alternative for that. We also install live chat on the page. So, either Slack with your customers, or if you can't do that, then maybe have a live chat available. In the beginning of segment, customers would ping us day and night, and that's where we got the most valuable feedback from them. So, just as many open channels of communication as possible. Next, Data Warehouse. This is something that we recommend. It used to be expensive, it's no longer expensive today. Basically, if you have a non-technical co-founder on your team, they'll want to ask questions around the data, and they'll always ask the technical co-founder who will have to provide the answers. So, Data Warehouse kind of democratizes the data, not only for the non-technical co-founders, but for everyone else in the company that you hire after. Company dashboards, obviously, we should probably move that to the left. Email and push tools. So, as soon as users sign up, you want to send them an email. I'll talk about that in a second. And then a help desk. So, at some point, you'll have so much support tickets if you start feeling product market fit, and if they're all going to your Gmail, one founder will just get overwhelmed and not be able to answer them, so you want to have a shared inbox where multiple founders can respond. Okay, now I'm gonna go through a few different recipes of these different tools that we found really helpful in product market fit. So, the first one is improving product usability. Almost every product that's launched is unusable, or highly unusable for the first three months while you have the kinks. And we see this with every single product, no matter how much effort we put into it ahead of time. As soon as customers hit it, they start using it in ways that you just don't expect. And so, there's this tool called Full Story, which helps you look at sessions of customers as they use your website. So, I'll tell a quick story on this. This is a new feature in Personas, which is one of Segment's products, and we launched them, the metrics looked horrible. So, like, customers are coming in, but they weren't actually completing it, they weren't using the product, and we thought, oh God, you know, this likely doesn't have product market fit, we have to go back to the drawing board. Then, one of the designers on our team had this amazing idea, let's look at the full story. And so, we see this user going in about to start this creation workflow. They find this button, they clearly don't understand what the button does, they get so frustrated, they just exit the page. And so, we saw this with multiple different customers coming in, and so we're like, okay, we just have to fix that button. We fixed that button immediately, all the metrics got better, right? And so, that's why it's important to have this type of viewing, either stand over your customer's shoulders, which is great, what the Stripe co-founders did, or get full story, which is a more scalable way to do that. Okay, call this the 43-minute founder email. So, when we launched Segment, we would wait about 43 minutes, and we would email the customer and say, hey, I'm Ilya, thanks so much for signing up for Segment. Your next step here is to add a source to Segment, and if you have any questions at all, please email me or call me anytime I'm available for you. Since we launched that email in 2013, we've had hundreds of thousands of responses to it. So, it's the connection between you and the customer over email that, if they get confused, they'll respond to it. What you can use is a tool called Customer IO. It's a behavioral email tool, which will say, every time a user signs up, wait 30 minutes, 40 minutes, 50 minutes, whatever, and then automatically send them this content. And then you could template the first name, the company name, and so forth, based off of your analytics data. So, huge recipe, recommend. And then finally, for democratizing data access, I would say this is more advanced. So, this is after you're in your MVP stage, you're feeling good about product market fit. You might want to install Data Warehouse, like Google BigQuery, and then Mode Analytics is a BI tool that works on top of it. This lets you ask questions on top of the raw data that you might not be able to do in Amplitude and Mixpanel. Just any kind of question you can ask with SQL, and then even the non-technical co-founders will eventually pick up SQL and then start asking these questions themselves. Okay, one common failure mode that we see with customers is trying to pick the perfect tool, Mixpanel or Amplitude, BigQuery or Redshift, and spending way, way, way too long thinking about that. The truth of the matter is, you shouldn't optimize for picking the right tool right now. Both Amplitude and Mixpanel will give you exactly the same result at your stage. Instead, just get through that decision as quickly as possible, but set yourself up for change in the future. So this is an example diagram that shows a customer of Segments that used different tools over a period of about three years. And so, you can see that they used about eight different tools between 2015 and 2017. Then they either hired someone, or they decided that their tools were no longer doing the job, and they switched from one set of tools to another. So, best-in-class tools change every two years. Just be prepared for change and don't spend too much time trying to perfect your choice right now. Okay, this is my recommendation of what tools are the best for the MVP process. I'll walk you through them right now. So, Google Analytics is for understanding what users are coming to your website. Amplitude is for feature analytics. Google BigQuery is to democratize data access with a data warehouse, which is just a database of data. Mode is the tool you use on top of that to ask questions on top of BigQuery. Intercom is like a list of all of your customers. They're really good CRM for early-stage folks. Full Story is for improving product usability. And Customer IOs for emailing your customers. Once you get big enough, you can start using Google Ads, Facebook Ads. to actually do the paid acquisition. Okay, so I'll just jump straight to the slide. When we were really young, when we were in 2011, 2012, we didn't have a lot of money, and so we didn't want to use all of these different tools. And so we used Google Spreadsheet for our CRM, we didn't use Asana or Trello because they were too expensive, so we used emails, and then the only things we paid for were basically GitHub and AWS to host our product, right? So today, happy to say that Segment is now free for early stage startups, so for all you folks, there's a Bidly link down here that we'll send out afterwards and it's in the deals. And then also, Segment went out and we did a bunch of deals with these customers so that if you're early stage, you can now get all of these tools for free. So enjoy that and start using them to basically accelerate your product market fit process. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Yes, I'll take some questions. So what have you seen in terms of user base to make the numbers meaningful? I mean, 10% of 100 is 10, right? 10% of 10 users is one. I don't really need that. You're asking about growth rate? Yeah, on any kind of tracking. So you're asking, if you're starting with a very small base of users, what growth rate do you need to be on to make growth meaningful? Yeah, what have you seen that makes the numbers a bit more meaningful? I mean, should it be 10,000 users before you? Yeah, it completely depends on the product, right? So if you're an enterprise B2B company, then you're closing deals for 10, 15, $20,000, then only a few of those customers can make, can give you enough capital to hire more people, to do more marketing, to hire a larger sales team. If you are selling shirts and pants, then you probably need higher volume. So it totally depends on the kind of company you're building. I have a question about, you know, going through all the retention and such, and it shows, like, the charts have, like, by week, you're tracking your retention. But my product is more like an Airbnb product. It's more like an annual, maybe biannual, maybe even with our product, we will change trends. But in history, it's been, like, biannual, so. Yep, so the question is, what kind of retention period do you want to look at if you're renting properties like an Airbnb? So that's a really good question. It really, those kind of periods depend on the kind of company you're building. So I'm giving one presentation, but there's hundreds of different companies that need to apply the information slightly differently. So if you're Airbnb, you probably would expect people to at least come back to your app. You know, like, how often do people travel, right? They travel, you know, once a month, once a quarter, right? And so that's the period that you want to make sure that they come back at. Yeah, so it's not like a week is correct for everyone, but it's correct for the majority of companies. Exactly, keep a pulse, yep. Awesome, all right, well, thank you so much. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "Advice for Hard-Tech and Biotech founders",
    "description_video": "YC Partner Jared Friedman covers hard tech companies and why founders should consider starting one. He also covers a couple of the most common problems hard tech companies face and how to solve them, with examples from seven YC companies. From YC's Startup School in 2019.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/8G-advice-for-hard-tech-and-biotech-founders",
    "youtube_url": "https://youtube.com/watch?v=C1DlZWfI6rk",
    "mp3_file": "downloaded/Advice_for_Hard-Tech_and_Biotech_founders.mp3",
    "mp3_content": "I am Jared. I am one of the partners at YC and I'm going to talk about starting hard tech and biotech companies. Out of curiosity, in the audience here today, who is starting something like a hard tech or a bio company? Okay, a handful of folks. Nice. Excellent. Across all of startup school, there are actually over a thousand companies that are doing hard tech or biotech things, which I think is really cool. So this talk is going to be most relevant for them, but also for other folks who might think about doing a company like this in the future, even if you're not right now. Here's what I'm going to talk about. I'm going to define what a hard tech company is. I'm going to talk about the two most common problems hard tech companies face and how to solve them. And then I'm going to talk a bit about fundraising specifically for hard tech companies, building on what Carolyn just talked about. So what is a hard tech company? This is my definition because I couldn't find a good one on the internet. So the way I see it is a hard tech company is a company that fulfills two criteria. One, it will take a lot of time and money to build your first product. And two, even if you had lots of time and money, it's not clear if it would be possible to build it at all. Companies like this are a little bit different from other kinds of companies. And interestingly, it doesn't have to be a physical product. And this doesn't say anything specifically about science and technology. It actually applies to a pretty broad range of companies. Another way of thinking about this is the difference between market risk and technical risk. So if your company is building a normal website or a mobile app, you probably have mostly market risk, which is to say you have a new idea. It's not totally clear if people are going to want this thing that you're making, but you probably don't have much technical risk because building websites and apps is a solved problem at this point. Whereas with a hard tech company, you're probably doing something that clearly people would want if you could do it. The question is whether you actually can do it. Okay, so starting a hard tech company sounds hard. I mean, hard is even in the name. And I think this scares off a lot of founders who would otherwise start one. And I think this is a non-obvious misconception. So I'm going to try to address it. Here is a quote by Sam Altman that sounds like a complete paradox. So what Sam said is, in many ways, it's easier to start a hard company than an easy company. That sounds like it doesn't make any sense. But to explain what Sam... I think it's actually like a pretty deep truth. And so to explain what Sam meant by this, I'm going to tell you a story about a company called Boom. Who's heard of Boom? A few folks. Okay, so Boom is a YC company from three years ago, and they're doing something completely awesome. They're building this. It is a supersonic passenger jet to replace the Concorde. It will fly at Mach 2.2 and take you from San Francisco to Tokyo in five hours. No joke, they're really doing this. The founder of Boom is a guy named Blake. And Boom is not Blake's first company. Before he started Boom, he started a very ordinary company that made a mobile shopping app. And Blake came and he talked to YC Dinner and he reflected on the differences between his first company, the mobile shopping app, and his second company, Boom. And he said something really insightful. When he was building his mobile shopping app, getting the product live was easy. You can build a mobile shopping app in like a few weeks. But then everything after that is really hard. See, it's hard to get press to write about your mobile shopping app because it's not an interesting story. It's hard to get really talented employees to want to work on it. It's hard to get investors to want to meet with you to hear about your mobile shopping app. In short, it's just hard to get people to care about it. And so while launching the product is easy, turning the product into a really big company is actually really hard. Whereas with Boom, it's exactly the opposite. Building a supersonic jet is incredibly hard, but everything else around it is really easy. And from the very beginning, back when Boom was just an idea, Blake was able to get some of the most talented people in the world to want to help him. We are living at a unique time in the world where it has become easier than ever before to start a hard tech company. There is an incredible amount of investor demand to fund really crazy, ambitious ideas like Boom. So while you will have to raise a lot more money to do a company like this, it's also possible to raise a lot more money to do a company like this. And an interesting thing is that the market doesn't seem to have fully internalized this yet because most YC applications are not for companies like this. And I think one reason that founders don't start companies that are super ambitious like this is because it's really intimidating. I mean, as you guys know, starting any kind of company is really intimidating, but it seems like it's going to be easier if you start a company that's building something simple like a mobile shopping app. And the counterintuitive thing that Sam realized that I think is true is that it's only easier to get started. It isn't necessarily easier to turn into a really successful company. Not everyone knows how big a part of YC hard tech and biotech are, so I just wanted to give you a few quick stats. At YC, we funded over 250 biocompanies and probably a couple hundred hard tech companies as well. YC is actually the largest bioseed investor in the world and the largest hard tech seed investor in the world. This includes accelerators, seed funds, every kind of investor. And here's something that most people don't know. Hard tech companies that apply to YC actually have about a 10x higher acceptance rate than other kinds of applications. I don't completely know why that is. I suspect it's something to do with like certain kinds of founders being attracted to really ambitious ideas. So a really common question that I get from hard tech companies is like, I am starting a biotech company. How much of YC's advice applies to me? A lot of it seems geared towards other kinds of companies. And the answer is actually most of it still applies. I went through the startup school curriculum. This is the startup school 2019 curriculum. And I highlighted all the lectures that are typically relevant for hard tech companies in green and the ones that are typically not relevant, at least at the early stages in red. And as you can see, there is a lot more green than red. And this is my experience working with YC companies that are doing hard tech and biotech stuff, which is that while there are some differences, there are a lot more similarities than differences. Okay, let's talk about the two biggest problems specific to hard tech companies. So if you guys remember Michael Seidel's talk about MVPs, he talked about how some companies have a heavy MVP. That is, it's going to take them a really long time and typically lots of money to build the first product. This is the case for most hard tech and biotech companies. So if you're in the position where you need millions of dollars to build your first product and you don't have millions of dollars right now, what do you do? The simple answer to this question is you have to figure out some way to make some progress on your idea that doesn't require millions of dollars. That is easier said than done. So to help give you guys some inspiration for how you might do that, I'm going to walk through seven examples of YC companies that were doing hard tech and biotech things that did exactly that. So the first one is Boom. So Boom's hack was they started off by doing a bunch of things that don't really cost any money at all. Here are some of the things that they did. They assembled a team of top advisors in the space to give them credibility. They built computer simulations that showed that they had a design that could work. They built a plastic model a couple feet long that they could take around to people to show them what their vision of this plane would look like. And then they took that model and they went around to a bunch of airlines and they showed them the plastic plane model. And they used that to get interest from airlines to show that there would be customer demand if they were to build the plane. And they used basically all of these things in order to raise the money that they needed to actually build a plane. There's a YC company called Solugen which does something really awesome. They use synthetic biology to produce hydrogen peroxide. So on the left is a photo of their current hydrogen peroxide plant which is enormous and produces truckloads of hydrogen peroxide that they ship all around the country. Obviously this plant cost a lot of money to build. But on the right side is their MVP. This is what they had when they applied to YC. It is a beaker that can produce about one cup of hydrogen peroxide. But this beaker proved the concept of their new industrial process for creating hydrogen peroxide which is like the core idea of the company. And basically they just like started with the beaker and then they progressively scaled up to larger and larger installations until they had the giant hydrogen peroxide plant. So AirX is a YC company that originally planned to make their own medical device. Making a medical device is really hard. Their original plan was going to take like several years and millions of dollars in order to get FDA approval for this new device. Then they realized that they could launch a basic version of the same core service they hoped to launch by using an existing medical device that was already approved and writing some software around it. Now it's not as good as the like eventual long-term vision but it was like a good hack to build like something simple that worked well enough. And because of this plan they were able to get live during YC in less than three months with no FDA approval. Notable Labs is a YC company that is developing new drugs for cancer. Developing new drugs for cancer is super expensive. It takes a super long time. And so the way they got started was by providing services to screen tumors to pharma companies. The services that they ran enabled them to generate both revenue and data that they're now using to develop their own drugs. Astronis is a YC company that builds telecommunication satellites and launches them into space. That is obviously not a cheap thing to do. It turns out actually that the cheapest telecommunication satellite that is useful costs like at least 10 million dollars to build and launch. And so Astronis' hack was to start with a test satellite. The satellite in this photo was their first satellite. They built it in less than three months during YC and for less than $50,000. Now this satellite doesn't do anything really useful. Like you can't sell it. But by launching an actual fully functional satellite into space and showing that they could do that, they were able to like generate the credibility that they needed to go and raise the money to launch like a full-scale useful telecommunication satellite. Last example, Ginkgo Bioworks is a YC company that does genetic engineering of organisms. And in order to engineer their first organisms, they were going to need like millions of dollars. And so their hack was they went around to some large companies and they closed contracts to create those organisms before they had actually made the organisms. The contracts basically said if Ginkgo makes these organisms, we will pay you lots of money. And they used those contracts and they took those contracts around to investors as proof of customer demand. And they used that to raise the millions of dollars from investors that they needed to actually make the organisms that they had promised to customers. So basically they sold it before they made it. And this is a very generalizable technique that a lot of hard tech companies use in one form or another. Okay, so that brings me to the second most common hard tech problem, which is how do you prove people will want your product if you haven't built it yet? This is important for you to prove to yourself because the last thing you want to do is spend years working on some product only to find that people don't actually want it at the end. But it's also important to prove it to investors. And so here are a couple of ways that you can do that. The best way is through pre-sales. So ideally you just sell your product before you build it. This is what people do on Kickstarter. A good example of this is a company called Jetpack Aviation from two batches ago, which is building the flying motorcycle in the picture. And what Jetpack Aviation did was they ran a pre-sale campaign and they basically sold flying motorcycles to a bunch of people on the internet to prove that people would want them. Unfortunately, doing pre-sales is not always possible. If you're doing, for example, if you're doing something medical that requires FDA approval, it's actually illegal to do pre-sales. So don't do that. So because of that, we created something called a letter of intent or LOI. And a letter of intent is a non-binding contract to buy your product when it's ready. Now a non-binding contract seems like kind of a silly idea, like non-binding contract is kind of like a paradox. But it turns out that it's actually kind of very clever construct. Because it's not binding, it doesn't actually commit the customer to buying. But because it looks like a contract, customers take it really seriously. It's easy when you're talking to a customer for them to like be polite and casually say like, sure, I'd buy your thing if it ever worked someday because it's like no commitment for them. But if you ask them to sign an LOI, you'll find out if they're actually really serious about buying your product and investors know that. So here's just some quick advice about LOIs. If you decide to go down this route, the more specific the LOI is, the more valuable it is. A good LOI includes all the following information. The cool thing is if you can get a customer to sign an LOI like this, it literally gives you a roadmap for what you need to build in order to generate revenue from your product. Okay, the last thing I want to talk about is fundraising for hard tech and biotech companies. Most hard tech companies will not be able to bootstrap. They will typically have to raise money from investors. So part of building a hard tech company is coming up with a smart fundraising plan. And sometimes hard tech companies will come to me at the beginning of the batch with a fundraising plan that looks something like this. This fundraising plan is like, hey, I have a really good idea. I need $50 million to go and build it. So I'm just going to go pitch to a bunch of investors until somebody gives me $50 million and then I'll be all set. I don't recommend this plan. When I see a plan like this, it makes me think of this guy who's just standing in front of a wall, staring up at the wall. The wall is like the $50 million impossible fundraise because the fact is it's just impossible to get investors to give you $50 million for an idea. You have to make some progress first. And so what you want to do is a fundraising plan that looks like this. This still gets you to $50 million, but it splits it into five discrete races that start very small. And the key thing here is that for each of these fund raises, you want to have specific milestones that you hit. So you start off, you want to be able to make some progress with your company before you raised any money at all, like how Boom did. And then you want to use that in order to raise maybe a couple hundred thousand dollars. And then you want to use the couple hundred thousand dollars to make more progress, which enables you to raise like a million dollars. And then you want to use the million dollars to make more progress. You can raise $4 million and so on. And while the general principle is simple and easy to understand, a lot of the skill in building a hard tech company is in fine tuning this fundraising plan so that like all the steps are like as small as they possibly can be. Because the most important part of this fundraising plan is that no step should be too large. By the time you go out and start trying to raise a $15 million Series A, you have to actually have accomplished enough that investors will give you that larger fundraising round. Otherwise, you're just going to hit another one of those like fundraising walls. And so really good hard tech founders are maniacal about like pushing down the size of each of those steps so that each step is as small as possible, which makes it as easy as possible for them to achieve the milestones that they need to raise the next round of funding. And that is all that I have about hard tech and biotech companies. Okay, we'll do some questions. One over there. Yeah, sure. So the question was, of the examples, I didn't mention any AI companies, and that's a great point. I probably should have included one. There's a really famous YC company that's an AI company called Cruise. You guys heard of Cruise? Cruise built self-driving cars and they got acquired by GM for a billion dollars. And yeah, Cruise is a great example of a hard tech company. The original Cruise car was built in less than three months during YC. Kyle basically just like was in a garage building this car and writing code for like three months solid. And by the end of YC, he had an MVP that he could use to drive on the highway to show that like basically he could build a self-driving car. Yeah. One over there. Yeah. Have you ever worked with any non-profit hard tech startups and how did they raise money? So the question is, have I ever worked with any non-profit hard tech companies? No. Do you have one? Yes. Okay. We should maybe talk about that after. I'd be interested to hear how that could work. Any other? Oh, one question over here. Yeah. So I'm wondering if you've ever sort of like a chicken and the egg problem where like you're trying to get investors to like trust that people want this and you're also trying to get like companies to trust you to like, I understand some of the contracts are non-defining and that some of them might be like, if you deliver, then like we'll give you X or whatever. But it seems like a lot of companies would want to like plan specifically around like, okay, if I need these organisms or whatever, like do I have a plan that's definitely going to get me the organisms? Or am I like, maybe if I have them, that's great. That seems like a weird situation. So how do you get around that? Yeah. So I'll try to paraphrase the question. It was like, it seems like getting an LOI would be hard because the company doesn't know if you're actually going to be able to deliver it and they have to like plan around that. And the answer is yes, it is hard to get LOIs. Like even though LOIs are not binding, they're actually pretty hard to get. And the thing is that the very fact that they're hard is it makes them valuable. If they were easy, they wouldn't be worth anything. So the reason that they're kind of valuable is that it is hard to get a company to do that. They'll typically only do it if you're solving a really critical pain point for them. If it's just like a nice to have, it's going to be hard to get an LOI, which is actually really good signal for you to know that you're working on something that's a really big problem for them. Yeah. In the back. In the middle. You. Yes. Thank you so much. A quick question. So is there a differentiation between hard tech ideas and moonshot ideas? And how do you kind of judge that or go about those? Okay. So the question was, is there a difference between hard tech and moonshot ideas? That's a terminology question. The answer is no. I was using the terms interchangeably. Yeah. What if the hard tech idea you're working on is disruptive? It's very different from what has ever existed before. How do you prove it? So the question is, if your idea is disruptive, how do you prove that you're going to be able to make it? Or how do you prove that people will want it if you make it? Both. Okay. Both. Well, that's kind of like the examples were kind of about some ideas for how to do that. The key thing for hard tech companies is to figure out ways to prove as much as possible as early as possible in order to reduce the perceived risk that the idea is going to work. Because the more you can reduce the risk, the easier it's going to be to raise money in order to get to the next step. One in the back. So for hard tech ideas, how do you reach the decision maker? Because it might not be clear in a big company which person is actually going to make the decision about this specific scheme. And in that case, the person who's going to be using your product in the company might actually be very different from the decision maker. And that might be one of the very first lectures where you were supposed to take into account user design. So how do you reconcile the issue of determining who the decision maker is while also making sure you're taking care of the end user? Okay. So the question is, for a hard tech company where you're selling it to an enterprise and there's one person who's like the decision maker about buying it, but there's another person who would actually be the user, how do you manage that situation? Right? Okay. So this is actually like a really cool thing about the LOI is that the LOI basically forces you to do a dry run of the sales process that you will eventually do when you have the product before you have the product. So sometimes like sales are complicated because you have a bunch of different stakeholders in an organization who may have different incentives. And by trying to get an LOI out of the organization, you will basically uncover that fact and you will figure out what you need to do in order to appease all the different stakeholders in order to get the sale. So that can actually be really valuable feedback to get early on in your company. Last one over here. So when you're in the early stages of building out a team of hard tech engineers, aside from going to grad school, where are you finding these early engineers? So the question is like, how do you find founders and early employees for hard tech companies? The good news actually is I found that hard tech companies tend to have an easier time recruiting than other kinds of companies. Kind of like how I was talking about Boom, because talented people are drawn towards like crazy ambitious ideas. So I actually think it's like a real recruiting advantage to be working on something that's really like crazy and ambitious like that. But in terms of like where to find people, I mean, kind of like everywhere, just like, you know, hiring employees, it's going to be hard. Even if you're doing a hard tech company, it's going to be hard to find like super talented people. Yeah. Cool. That's all we have time for. Thank you, everyone."
  },
  {
    "name_video": "Modern startup funding",
    "description_video": "YC's Carolynn Levy details the basics of startup financing and how modern early stage rounds of financing are done using convertible securities, like the SAFE.",
    "related_categories": [
      "Finance",
      "Fundraising",
      "Legal",
      "Safes"
    ],
    "page_url": "/library/8F-modern-startup-funding",
    "youtube_url": "https://youtube.com/watch?v=9qWZALyGSmg",
    "mp3_file": "downloaded/Modern_startup_funding.mp3",
    "mp3_content": "I, like Kevin said, I'm going to talk about modern startup financing. I have only been practicing law for 21 years, so what's old and what's new only spans that time frame for me. But I've seen a lot of changes to the startup ecosystem, YC has been a big part of a lot of the changes to the startup ecosystem and the way that financing is done. So I picked this picture, these are called closing volumes, and every corporate lawyer who does private company or public company financing has a lot of these, if they have been doing it for long enough. The legal teams used to get these bound volumes with all of the financing documents in them. They have our names on them and the date, and this doesn't happen anymore, but I just thought this was, I saved some of mine, I thought this was a good picture for this. So a lot of you are going to already know what I'm about to talk about, but since this is startup school, I just want to give some basics. So you have a company idea, and the first thing you're going to do is form a corporation because it's a separate legal entity and it protects the founders from personal liability, right? We all know this. You can probably bootstrap it, you and your co-founders can bootstrap it for a little while but eventually you're going to want to hire or grow and you need money to do that. How do you do that? You can go ask your relatives for money, you can go to a bank and ask for a loan, or what most startups do is they sell a part of their company to raise money. So when you, as founders, you guys will buy common stock, that's how you become owners of your corporation, and typically you will buy common stock for a fraction of a penny. You may contribute some intellectual property as part of that purchase, but basically you're going to be buying your stock and own 100% of it for nothing. You cannot raise a meaningful amount of money by selling common stock, so your option is to sell to investors a completely different class of stock called preferred stock. Preferred stock is more expensive. Another kind of basic thing, I never know what kind of terminology people know, so I thought it'd be really helpful to take a look at this. These terms right here, so first of all, financing and round, they mean exactly the same thing. Preferred equity financing, preferred stock round, preferred stock financing, series A financing, series C financing, these things all basically mean the same thing. It's fundraising by selling preferred stock at a calculated specific price per share. These terms, convertible round, note round, safe financing, we're going to talk about what the safe is, early stage round, early stage financing, these are all ways to describe a fundraising event where you're not selling preferred stock or common stock, you're selling convertible securities. Convertible securities are the right to get stock in the future. It's a thing that, it's not itself stock, it converts into stock later. So I think that there are about three things that have changed a lot over the years, and the first one is structure, and by that I just mean that the actual document that we use for early stage fundraising has changed, and I'm going to talk about that more in a few slides. The other thing that is hugely different from the old days is access, because nowadays you can find fundraising documents online, and they come with annotations and e-signatures, and it's just incredibly easy to get documents. Back in the olden days, the only way you could fundraise was by hiring a lawyer because there was no way to get the documents you actually needed to sell your preferred stock. And the other thing that I think has changed a lot over the years is focus. I just remember, I don't ever remember anybody ever noticing how much time it took to do these financings in the past, and how much focus it took away from founders building their company. Like, I don't remember an investor or a founder ever saying, like, gosh, this is taking a month and a half, I'd so much rather be building my company. I think today people notice and have figured out that it's not in anyone's best interest for people to be spending a lot of time fundraising. So it's much faster. So what hasn't changed? Preferred stock financings are no longer the way that companies do their first fundraising, but that process and those documents themselves really haven't changed over the years. And I'll talk about that a little bit more in a second, but that's pretty much the same. It's just the when that's changed. The other thing that hasn't really changed is I think there are two things that are super important to investors and to founders when they're fundraising, and those two things are valuation and dilution. So valuation is just the value of your enterprise, and dilution is stock, like how much of your company have you sold? So if you are selling investors a percentage of your company, you previously owned 100% of it. After you sell some, you're not going to own 100% of it. That's dilution. And then the last thing, I just really wanted to add in here because I think it's really important to get this point across to people who are starting startups. Communication with investors has always been important because this is fundamentally about a relationship, right? Investors are giving you money, and you are being expected to take their money and turn it into a billion dollar business. Whether or not you are succeeding or failing at that endeavor is so critical to communicate with your investors about that. So I think that that's something that has not changed over the years. It's still super important to communicate. So as I mentioned before, the old way of raising early money was to do a Series A preferred stock financing. A is the first letter of the alphabet, so the first time that a startup would fundraise, it would be called a Series A preferred stock financing. Okay, how did it work? So you would take the valuation of your company, which is the overall value of your enterprise, you would divide it by the number of outstanding shares of capital stock. That's mostly for a Series A financing would just be the stock that the founders owned. And that gets you a price per share. You would take that price per share and you would sell your preferred stock to your investors. So now, well back then, angel investors, I'm sure you guys have heard about angel investors, they used to aggregate into consortiums. And so they would tend to all band together and write one big check. So for your Series A financing, you would have maybe a couple of angel groups, and you would raise about $1.5 to $2 million in your Series A preferred stock round. Angel groups now write individual checks, doesn't really happen like in consortiums anymore. Anyway, then you would negotiate the terms of the preferred stock. So the lead investor and you, the company, would have you each get your own legal counsel. The lawyers would go back and forth, they would negotiate the terms of the preferred stock, which means voting rights, liquidation rights, pro rata rights. And then you'd end up with a set of documents that go in those closing volumes. And there's about five of them. This took months, and it could cost anywhere in legal fees from $25,000 to $100,000. Okay, so what's broken about that? Well, that's pretty elaborate, right? Takes a long time, it costs, I just told you it could cost $25,000 to $100,000 in legal fees to do this, so it's kind of a big deal. But I think that the thing that was most broken about it was how inflexible it was. Jared's probably going to touch on this. The cost of starting a company has decreased a ton over the years. Not so much for software and e-commerce companies, I'm sorry, not so much for hard tech companies, but software and e-commerce companies, the price of actually starting these startups has way decreased. And as a result, companies actually don't need to raise $1.5 to $2 million just to get off the ground. And having to do these long, elaborate, expensive financings was not worth it. So it just wasn't at all flexible. So when a company would do a big Series A round for its first round, and then it was waiting to do its Series B financing, sometimes it would run out of money in between. And so oftentimes the company would then go to its lead investor in their Series A financing, and they would ask for a bridge loan. A bridge loan is a debt bridge between two financings. And these involve the note purchase agreement and a convertible promissory note, and sometimes there would be common stock warrants that would go with it. But basically it was a stopgap measure in between financings. Now again, keep in mind, these financings I just told you were long and expensive, so you aren't just doing them all the time. And this is where bridge loan financings came in. At the heart of the bridge loan was this convertible promissory note. And a convertible promissory note was a loan. It had an interest rate, it had a maturity date, it was a real note, but it also had a mechanic that would cause it to automatically convert into shares of stock when you did that next round. So if you got a bridge loan in between your Series A and your Series B, your convertible promissory notes would convert into shares of Series B when that financing happened. But along the way, and I honestly don't remember how this all came about, but people started to realize that just the convertible promissory note, not necessarily the note purchase agreement or the common stock warrants, but the convertible promissory note itself could actually be used as a standalone document, and you could use it to fund companies, and you could use it to fund, not as a bridge, but actually just the very first time that a company needed money. So this became a very appealing way to do your first fundraising event, because instead of having all those documents I described in the Series A financing, instead you just had a convertible promissory note, which was obviously going to be a lot faster, it's only one document. People still hired lawyers for these convertible notes, but only negotiating one document and you're only negotiating maybe maturity date and interest rate, lots cheaper, and lots more flexible, because now instead of having to do this elaborate financing process and probably wanting to raise a couple million dollars to justify all that effort, you could just raise 50k from an angel, you could raise 100k from an angel, or even less. But it's still a promissory note, and a promissory note is still a loan. So it's debt. We then, at YC, decided that we could modernize even the convertible promissory note, and what we did is we came up with something called the SAFE. The SAFE is an acronym, it stands for Simple Agreement for Future Equity. And like the promissory note, it is one simple document. It is a convertible security, so I showed you all those terms. It's a convertible security, it converts into stock when the company raises a priced round. You don't need to hire lawyers to do a SAFE, it's available online, and the most important part of it is that it isn't debt, which is why it needed to exist. What was broken about convertible promissory notes? They were only one document, they were cheap, they were fast. Well, because we didn't think it made any sense to use debt to sell equity. Angel investors are not lenders, and startups don't really want to be borrowers, right? The whole point of taking someone's 50K and turning it into a billion dollars is everybody, those investors want to be stockholders, and startups don't want to be thinking about accruing interest or, you know, when is their note going to be due. So we thought that it made a lot more sense to take all the debt piece, all the debt part out of convertible promissory notes, but retain all of the convenience of them. So I could do an entire lecture on how to use the SAFE and what it's all about, but I've actually already done that. So there are other Startup School video lectures that you guys can watch to hear a ton more about the SAFE. This is the YC page, this is the resources tab. So SAFE financing documents are at the top. We have a user guide that is kind of long, but it has a ton of really good information in it, tons of math examples to use to show you how it converts. So please visit that. And the SAFE is only five pages long. It has the word simple in it, right? It's actually really easy to read. So then the question is, when do priced rounds happen? They are still the primary way that startups raise money. They're no longer the way that most startups do their first fundraising, but built into the SAFE and other convertible securities like promissory notes is the whole concept that eventually the company is going to do a priced round and those convertible securities are going to convert into that priced round. So most often, companies will do their first fundraising on a SAFE, convertible promissory note, and then they will do a priced round afterward and all of those SAFEs and convertible promissory notes will convert into stock. SAFEs and convertible promissory notes cannot convert unless there is a priced round done eventually. So priced rounds are still modern. They're just not the modern way to raise your money the first time. And also, I should mention, priced rounds, even though I was kind of laughing at them because they involve a lot of documents and we used to put them in these leather-bound closing volumes for the lawyers to put on their bookshelves, they have actually seen some improvements as well. They are much more standard than they used to be, and they are also all five of the priced round documents you can get them online these days. Everyone tends to still hire a lawyer for them, but... Okay, so did we perfect modern early-stage financing by introducing the SAFE and by everybody using convertible securities to raise money the first time? And I would say we've come a long way, but I don't think it's quite perfected. And the reason is because I mentioned dilution a few minutes ago. So convertible securities, because investors that hold convertible securities are not stockholders, you actually don't... It's very hard to tell how much ownership of your company you have sold when you sell a convertible security. They're not on your cap table as stockholders, right? You're still a 100% owner if all you've ever done is sell convertible securities. But the day of reckoning is coming when you do your priced round and all those convertible securities convert into shares of stock. You have to keep track, and there are a ton of resources and tools on how you can keep track, but you've got to do the work. There's no excuse for being surprised by realizing you sell 30% of your company to all of your angel investors, so don't let that happen to you. The other thing that is to be aware of with early-stage fundraising using convertible securities is because it's so flexible and easy to raise custom amounts of money, you can raise 100K and decide that you can bootstrap on that for a while, and then maybe in a couple months you raise 50K because you just need a little bit more. It's very flexible, but you can end up with a ton of investors, and we call that a party round, right? It used to be that in the old days you'd maybe have six to 10 investors, and now you can have 25, 35 different angel investors who've given you money. That's great. You got the money. It's not a bad thing, but it can be administratively really challenging because they become stockholders when you do a price round, and then you need their consent because corporations have stockholder consents. It's kind of hard to chase down all those signatures. Again, not a bad thing, just something you've got to be aware of. And finally, one of the side effects of these convertible rounds is that investors write smaller checks. They tend to. And they don't care as much about the investor. They're not stockholders yet, so they're not quite as invested. This is a double-edged sword. Sometimes investors can drive you insane, but sometimes they can be really helpful. They will make introductions for you. They'll help you with strategic advice. So having investors who've just written a check and gotten a convertible security as opposed to writing a really big check and being a stockholder, it can mean the difference between how much attention they pay to you. Again, can be good, can be bad, but it's just a side effect. This is my summer slide. Okay, so modern, early-stage rounds of financing are usually done now using convertible securities, like the SAFE. Selling preferred stock in priced rounds is still modern. It still happens. It has to happen. It just tends to happen later. It tends to be your second fundraising, not your first. The whole point, as I said before, is focus. If you don't have to spend a lot of time negotiating documents, if you can get the money in the bank really fast, you can go back to building your company, which is what you want. It's what your investors want. Specifically for this crowd, this is not San Francisco. This is Boston. What SAFEs and convertible securities are completely common on the West Coast, I suspect that you guys will find angel investors and other people in your ecosystem out here that are less familiar with doing financings this way. So it may be a little bit of education involved. You may have investors who say, no, I've never heard of this SAFE. I want to do a convertible promissory note. Or you may have investors who are just like, what are you talking about? I don't do convertible securities. I'm buying preferred stock. That's what we're doing if you want my money. Kind of hard to say outside of the Silicon Valley, but for the most part, I would recommend that you approach fundraising with this idea of doing convertible securities just because it can be done so fast and so flexibly. And that is it. Thank you. Thank you. Nice to have you here. Do you want me to do questions? Two questions? Okay. How many? A few. A few. Okay. Yes. So when you're taking those checks early on that are small of current investors, what will the impact as you start to get down the road in the future in fundraising rounds with respect to APCs? You might be looking to that. So I do not think, I'll repeat the quote. It's long. Okay. So if you take small checks from angel investors to do your early fundraising, do VCs look at that in a negative light when you go to them to do your priced round? I would say no. That is, they don't. I mean, you've taken small amounts of money. You've gotten X far, right? Like you've hit all these milestones. You're now going to VCs and saying, please do my priced round. I think the fact that you raised money from angels and took some small checks just shows how focused you were on getting through that process fast and iterating and getting to the place where you can do a priced round. Yeah. Maybe building a little off the smaller check, but do you ever recommend something like equity crowdfunding so using regulation crowdfunding or YC funding? So, great question. You know, I thought that was super interesting because I've been doing this for 21 years. Like that's a huge change, right? And, oh, I'm sorry. Yeah. Okay. He was wondering about crowdfunding. So they changed, the SEC changed the rules. You can now actually generally solicit and have your company be crowdfunded where actual strangers can buy your equity. It has a lot of rules and regulations around it. I feel like it's still in the testing phase. Like no YC company to my knowledge has done that yet. So I don't have any personal experience with it. Mike died. But I know some companies have done it and it would be really interesting to go online and see if you can get like download from law firms that have helped with those crowdfunding initiatives to see kind of what the pros and cons were. Okay. Yeah. So according to the current state, what happens if the company doesn't raise the following round? I heard that there is a company didn't raise the fund. So the conversion didn't happen. Okay. So that's a great question. So he is wondering what happens if you never do a price round? You've sold a bunch of safes to investors. The safe only converts in the event that you raise a price round, your company gets sold or you go public. And there is absolutely this concept that, well, what if my company just putters along and never needs to raise any more money? That is what I call a corner case. And my whole point in drafting the safe was to keep it simple. So I specifically did not try to capture every corner case that's out there. It is exceedingly rare for a company to be able to take a tiny amount of money that it raises from its safe holders and then go on and never need to, I'm not saying it couldn't happen, but it's pretty rare. I mean, the founders want liquidity too, right? So how are the founders ever gonna get liquidity if they don't sell or go public or raise more money? So yes, of course. And you will surely meet some investors who raise that exact point. Well, with promissory notes, at least it was debt. It could be repaid. They knew they were gonna get their money back. That's not true with the safe. But again, it's a gamble. It's like, investor, do you want to buy a piece of my company? Here's how you can do it. And if you don't believe that I'm ever gonna raise money again or that I'm ever gonna do anything with this company, then maybe it's not the right investment. So there's a million different ways you can respond to that. But basically, in all my years of practice, I only ever had one client that had only raised one round. Like, it just, companies need more money to grow. It's kind of the way I look at it. Way in the back. What's so special, how do you know when to use a safe versus something else instead of a monetary thing, like $100,000 is too much for a safe or do you go with a safe or a monetary thing? Okay, what's the threshold for, how do you know which convertible security or should you do a price round? How do you know, basically, what to do? I'm glad you asked that question because I did, I wanted to make this point and forgot. If a VC wants to give you $5 million as your very first fundraise, do it. You know, like, I'm not sitting here saying, like, you should never do a price round for your first fundraising event, absolutely. So if someone wants you to do a price round and it makes sense for your company, valuation-wise, dilution-wise, money-raising-wise, do it. Otherwise, it does not matter how much you're raising on convertible securities. It's about what you're comfortable with and it's about tracking dilution, right? How much are you actually selling? We had a YC company that did a $50 million save and I almost choked because I was like, I didn't build it for that, you know, it's a very simple document, like, it made me nervous thinking about it, but it's fine. It worked, it's fine. So it kind of depends on what your investors want to do with you. Again, like, you need their money. So if they really, really wanna do convertible promissory notes and that's how you're gonna get to the next milestone and you need that money, take it, right? It's better than dying. But, you know, should you not do a save just because someone wants to do a $500,000, do a $500,000 save, it's fine. Just, again, track the dilution. Yeah? What are the key terms of a save that should be negotiated? Oh, I'm glad you asked that. Again, this is all in that other lecture, but because you asked, he wanted to know what the key terms of the save are. Valuation, that's it. That's the only thing you have to negotiate in a save. So, and that's probably, I mean, it's not an insignificant thing, right? You and your investor have to decide what valuation you're gonna plop into the save as your target valuation and that's gonna, plays into the math about how it converts and that plays into dilution too. So you do have to figure that out. And we do have a version of the save. If you go to the resources tab, you can see all these. We do have a version of the save that doesn't actually even have a valuation in there. So in theory, you could even get away with not even negotiating a valuation with your investors and you could try it that way. So that's an option, but really, that's the only thing you need to negotiate. And like I said, no lawyers, because what do you need them for? Yeah? Well, we have an investor and he's strictly suggesting to add a special case in the save. What will happen if we are not gonna have pricing on the future? Okay, so this person's investor is saying, let's add something to the save that will address the issue of what if you never do a priced round and my save never converts? So sure, if that's the way you can get the money from this person and you really want this person's money and you need to do it, that's fine. You know, what the convertible promissory notes used to do is they would have a term sheet attached to them as an exhibit. And at the maturity date, the company hadn't already gotten a priced round put together with a new lead investor. That money would automatically convert on the terms that were negotiated on that term sheet. That's a route I could have taken with the save, but honestly, that's just more stuff to negotiate and I didn't want that to be part of the save. So that's not, but if your investor said, let's just have this automatic conversion event, here are the terms, you can totally do that. Two more questions, okay. Anyone else? Yes? What would you recommend for, instead of taking on investment using a save, for like services renders such as like a patent agent for not charging us up front for the patent, but later? Okay, so his question was, what if you wanted to give, basically you're saying, what if I want to give someone equity for services rendered because I don't want to give them cash? Okay, so the save is a weird instrument to use for that because the save is fundamentally like, give me the money up front, I'll give you the stock later. If you're not getting any money, you're saying basically I'm getting my services and I'm just gonna give you stock. I mean, I probably, that's probably not the way I would handle it. It's better to try to get money and then use the money to do that. Yeah, probably. I mean, yeah, I don't really think of the save as being the thing you can use. To me, like what you're talking about is how do I get really cheap founder-like stock to someone who's done a favor for me? And I wouldn't use the save for that. I think there's other ways you can do that. And am I allowed to say, we're doing an AMA on Friday. Like these kinds of questions, we're gonna do an AMA. I'm actually gonna have my other YC legal team with me and we can answer questions like that and give you a few more ideas, but probably not the save for that just to answer your question. Okay, so anyone else? We all good? All right. Thank you. Good question. Thank you for having me."
  },
  {
    "name_video": "Live office hours with Sam Altman and Yuri Sagalov",
    "description_video": "Former YC Partner Sam Altman and YC alumYuri Sagalov, CEO of Amium, hold Live Office Hours with three startups. They'll discuss their ideas and their thought processes around building their companies, and get live advice. From YC's Startup School in 2017.",
    "related_categories": [
      "Office Hours",
      "Early Stage"
    ],
    "page_url": "/library/8D-live-office-hours-with-sam-altman-and-yuri-sagalov",
    "youtube_url": "https://youtube.com/watch?v=abtHadERzXU",
    "mp3_file": "downloaded/Live_office_hours_with_Sam_Altman_and_Yuri_Sagalov.mp3",
    "mp3_content": "Good afternoon. So today we're going to do something different. One of the things that we've learned at Y Combinator is that one of the best ways to learn about startups is to watch other startups get advice. And so we're going to do live office hours, which we've done a few times before in this class, three or four times. We'll try to do three companies each time. This is Yuri, also works at Y Combinator, and going to do this with me. And we're going to just give advice to three startups. You have to be very brave to do this. So I'm very thankful for the startups that have agreed to do this. These are some of the people that are taking the course online, and we'll just get going. So do you want to tell us, well, first do you want to introduce yourselves? Does this work? So I'm Sarah, and this is my co-founder, Andrew. We're building Canny. Canny helps teams collect and manage feedback from their users. Essentially what it is, is teams can integrate our product into their website or mobile app, and that allows their users to post and vote on feedback. Is it live? Yes. And how many websites have integrated? Yeah, we launched our MVP about a month ago on Product Hunt. And that was pretty good traffic. We have 25 paying customers, so those are people who have either integrated or using us in a certain way. But yeah, we got maybe around 500 companies from the Product Hunt launch. That's great. Yeah. How much are you charging? It's a range. So on the low end, we have like a $2 plan, which was our alternative to freemium. And it goes from $19.49, $1.29 from there. And it's really early and we're trying to iterate on this and figure out what our best price point is. Which is probably one of our main challenges right now, I think. Go ahead, no, no. How'd you even arrive at the first set of numbers to test? Yeah, I mean, I think, so the $2 one was kind of special. We were flip-flopping between freemium and cheapium. And I think that was a good decision because it narrowed down our potential customers by a lot. And we figured that people who are not going to pay us anything, were never going to pay us anything. How many of the 25 customers are on the $2 plan? Maybe- Seven? Yeah. That's a good seven. Really? Yeah. That's great. And what's the other most popular plan? It's the 19? 19. We limited our two-hour plan very heavily. So it's really people who are a solo founder, probably no revenue, yeah. How do you decide, what do you get with the pricing? I think I looked at your website. It's how many users you have? Right, so right now we're charging by how many end users you have. That was kind of our proxy to how much value the company was going to get from our product. This is kind of a challenge, especially because we can't particularly tell how many users they have. So we're iterating on this as well. What do people really love about this? Why do they use your product and not one of the many other services to accomplish the same goal? Yeah, I mean, there's a lot of different values that you get out of posting and voting on features. One of them is, there's a lot of transparencies, so you keep your users in the loop. A lot of current feedback solutions is like email or live chat, where the user sends an email and then the company says, we'll pass it on to the team, is what inevitably happens. And then the user doesn't really know, did my voice get heard? And so we've heard both from teams and users that this is a great experience, their users are happy, they know what feedback their users are giving. Versus email and live chat, which takes just a ton of time to process all these conversations. Of the people that are using it, what's the average number of questions that have been posted on it so far? Average number of questions, what do you mean by that? Yeah, so people put a request or something else that they're voting on. Do you know, of the 25 paying customers, how many, on average, have had questions posted? It really depends on how many end users they have, and also how well they've implemented our tools. If it's less discoverable, they're going to get less feedback, and so we've been trying to help that by giving them design advice. But our top team probably has 300 posts. And the thing about this versus email is that you might get, if a post has 100 votes, you might get 100 different emails. And so we help you save time by responding to all those 100 people at once instead of sending individual emails back and forth. Do you feel like you've gotten to the point where you have a product that some people really love, and at this point, if so, well, I guess, do you think you're at that point first? Yeah, I feel like we have a sliver of product market fit where some people are extremely happy with our product, and we kind of know the next steps we need to do to expand that by 10x to address a larger portion of the market. What are the steps? Integrations with other SaaS services, like Intercom, Slack, Zapier, and then a better answer on mobile. Is the biggest challenge you face now just figuring out how to grow and scale this, do you think, or is there still a lot of product work? Other than sort of like integrations that are meant to drive growth, is there still a lot of product work before you really want to scale? There's some product work, for sure. I think the core product is pretty good, but it takes a while for our leads to get stuck on our product because they have to integrate into their product, so it's a pretty big investment. How easy is it to integrate? It's pretty easy. It's really easy. It takes half an hour to an hour is what we see developers spending time on. But it's just, I think we need better onboarding to convince them that this is worth doing, and so I think right now our funnel's pretty leaky. So that's what we're working on is onboarding. What's the biggest value? So your biggest user has 300 questions, or a couple of hundred questions? Over 100. Right, and so what's the biggest value that they see out of it? What do they tell you? Yeah, it's hard because a lot of our value add is very diverse. One thing is customer satisfaction. Another thing is product management. You know what you want to work on. Another thing is having a transparent road map, so keeping your users in the loop. And there's just all these different kind of values. There isn't one core value, which is also why it's kind of hard to. That sounds like a mistake. A mistake. Almost everyone who says, we have all these different values, and there's all these different reasons people like it. It's really nice if you can figure out how that all abstracts into one message, and then build all the company's sales, and marketing, and PR around. One message, core value. This is what it's about, rather than saying, there's six different reasons to use the product. I think one of the things that, so when you say you have a problem with people integrating you, it's not that hard. It's just not high enough on their priority list. And there's a few ways to solve this. One thing that works is to send people around and say like, hey, we're going to send an engineer to come help integrate with you. And it's not that the company can't do it, it's just that like, otherwise you'll always be at the bottom of their backlog. And that's one way. The other is if it's like, their CEO tells them to go do it, or like they themselves decide, I gotta go do this, it's really important. And that almost never comes from a bunch of disparate messages that are a bunch of nice-to-haves. It's like one thing, which is maybe in this case, I mean, it's some version of user feedback and how if you don't have this, you will be iterating more slowly than your competitors. Or that your users will feel like you're more engaged with them, listening to the features that they want built. I have two big questions. One, I think back of the envelope math is always really important. And I think, I worry that this is the kind of business where if you're mostly selling to startups, and you're selling it, let's say on average 100 bucks. Is it a month or a year? A month. A month. Like, how big can this business actually get off of this model? Have you thought about that? We have thought about it. I mean, I think, like just doing napkin math, I think with a startup, you usually want to arrive somewhere around 100 million annual revenue. And so for us, like right now it's looking like we'd be going for 10,000 people paying us $100 a month. And does that feel doable? Maybe it's 100,000. Yeah. There's a difference there. I mean, I think the number- I think it is 100,000. Yeah, 100,000. Sorry. I think the number of companies that need feedback and the number of websites and mobile apps is increasing. And- But do you feel there's 100,000? Part of it is like, do you feel you're going to have to own 50% of the startup market to get there, or do you think there's enough demand out there that you can actually get to the market without dominating the entire thing? Right. Right, I think, as an aside to this, I think we've been getting a lot of feedback that we can actually charge a lot more, and so I think there's a few features that we can build out that will help a lot, including- Do you use your own products? Do you have a, yeah. Definitely, that's a good way to figure out if it's providing value. Again, maybe the answer is to charge a lot more. Maybe the answer is that there are 100,000 startups. Maybe the answer is you need to tweak the product in a way that you can appeal to a lot of people outside of startups. But I think startups almost never just do the swag on this early enough. And it really informs product strategy, which also gets to my next big question. This feels like the kind of service that is interchangeable, and that a lot of people can build a similar service. And if one company uses product A, and another company uses product B, there's no reason for a third company to prefer A or B. There's no network effect, there's no monopoly. Now, I can imagine ways that you could build one of those into the product, where there are sort of cross-company incentives to use yours. But what is your plan to be a monopoly, and not another SaaS business that just gets competed down to zero margins? That's a good question. I think- And if you don't have an answer yet, it's also fine to just say we don't know yet. Our strategy so far is to go after influencers. And these are including people who have users that would also use our product. So for example, we go after open source projects and tools like Optimizely, for example. Is it free to open source projects? Open source projects are free, yeah. As an alternative to GitHub and GitHub issues, I think, and they're bringing us in a lot of people, I think that's a good move for us. But so far, I think our strategy is really to put our product in front of the public. It's powered by Kanye, and that's, yeah, kind of where we're at with that. So, do you have any thoughts about this? One little thought. I mean, I think one thing that we've found so far is that there are other products in the market that do this. And during our product launch, we got people coming from those products wanting to use us. And the thing that they mentioned liking about us more is design and simplicity. And I honestly feel like our product out of all the products in the market right now is the best designed and the simplest for exactly what we do. I believe you that that's true, but here's the problem. Every startup, I'd say like one out of three startups I meet with says like, we're like this other thing except we're better designed, we're more beautiful, and we're simpler to use. And it may be true that you are, I believe that it is, but someone else can come do that same thing to you. More importantly, or not necessarily more importantly, but oftentimes you start off very simple, and then you start having to build features because you see that they're missing, and then somebody else comes in and says we're now the simplest. But in any case, it's really good. You've built a product that people love, you've got them to pay for it, and you have a growth channel you believe will work. That puts you in the top few percent of all startups, so that's great. But this is the time where your biggest problem now, part of that, the one thing you should be thinking about is what can I do early to build a product that A, can eventually address a very large market? And B, how can I build some sort of monopoly? How can I build something where, because this company uses my product, this other company is going to be more likely to use it as well? In design and simplicity, although everyone says it and it's kind of true, is usually not a long-term win at some point. And it may just be that once you're integrated into a company, you're impossible to rip out, and then you're going to win the mind share war. That could be it. I think that's what we're seeing, actually, yeah. A better answer, though, would be if there's some way that you can use aggregated data or learnings across all companies, or share users. The kind of users that leave feedback on products tend to do it across all the products they build, they use. So there's probably a very small percentage of users that give feedback, and they do it across all the products. So my sense is that somewhere in there, there is a strategy to build a monopoly. But you want to figure out what that core is, and make that, build that into the core of the product. So that you have a long-term defensible strategy. Yeah, this is actually very interesting because we probably started at more of an aggregate level, where everyone could post feedback about anything. And that was hard because companies weren't on board first. And so- That doesn't feel right either. Yeah, so right now, we've decided to go this other way for now. But there is a possibility that this is, one day we're connecting all the users. If they post on multiple products that use Canny, we can connect all those people. So maybe there's some potential there eventually, yeah. And why is it named Canny? Canny was really hard to find. We went through many different names. But a core part of our product is the sub-domain. And we didn't want to use something that was like, get this or try this, use this. Yeah, short and sweet. Yeah, so something short and sweet. We got Canny.io, so it's not the worst, but it's not the best. You can still change, it's not too late. Yes, we can still change. I thought it was a play on non-Canny. Yeah, actually they're kind of different, but I think, yeah, it means to make good judgment. And so I think that kind of plays in as well. Yeah, if it's working, if people remember it, if they spell it right, anything else you'd like to talk about? Yeah, I mean, in general, I think, to your point about broad use cases. After our product launch, it came out with a lot of people using Canny for different reasons. And so I think- Is there one reason that's surfacing? Yeah, so I mean, the top one is feature requests, which is what we expected. But also I think pricing is one of the big ones, like figuring out what our main value is. And that's what we're trying to do. We're trying to isolate that one thing, especially market it on our homepage. How do we pull people in with that one value? Yeah. Feature requests don't sound quite as good as user engaged. I don't know, I would be willing to, this is the place where I believe in A-B testing. I don't believe in it for everything, but in terms of messaging and communication, and what are those four words you put big on your website when people come there for the first time? This is a place I believe in A-B testing. And if feature requests are really what people want, then great. Yeah, just put it right up front. If that's the thing that's working, you should at least, that's at least a candidate for the right answer. All right, we should move on to the next group. Thank you so much. Thank you. Thank you, guys. Thank you. Thank you. Thank you. Thank you. Thank you. Hey, Sam. How's it going? Chris. Hey, Yuri. Chris. How's it going? By the way, I don't know what any of these companies do ahead of time. Live reaction for me. So you want to introduce yourself? Hi, everybody. My name is Chris Beltran. I'm the CEO and founder of Tumul. What we do is we connect homeowners, private property owners, and all sorts of parking lot owners to our app. And what your app does is it aggregates, essentially, their parking spaces, lets them lease it out. The owners are able to make some passive income. And the parkers are able to just go to that parking spot whenever they want to, easily and quickly. So this tool was meant for, specifically, San Francisco, highly industrialized cities in which people need to park easier and faster, rather than circling the block. It's like Airbnb for parking. Essentially, yes, it is. Yeah. I've wanted to see something like this happen for a long time, because it feels like in urban cities like San Francisco, there's just not enough street parking. That is. But right now, it is more of the issue, is this a perceptive problem, or is this an actual problem? Are you live in the city right now? We are not live in the city. We are currently building out the MVP right now. Got it. So unfortunately, my co-founder is not here. She's actually taking a vacation through Mexico. I think she's doing some traveling. Mind you, I'm not a solo founder. I do have a co-founder. That's all right. Yeah. So have you been talking to homeowners in the meantime? Are they willing to rent out their parking spots? You know what? The funny thing is, I am actually hitting the ground running, and I'm physically going out to these homes and our private parking lots, and pitching to them my idea, and say, hey, why don't you use our platform? This is what it's going to look like. And I'm representing our mock-ups to essentially say, this is the platform that you would essentially be using. And what do they tell you? More often than not, they say, this is awesome. Why haven't anybody else created this? Are they willing to say, hey, I'm ready to pay? Or would they pay you? No. You would pay them to, you would do a rough share with them, right? Correct. The percentage of sales that occur when the commuter parks in their parking space will collect 15%, they collect 85%. So can you sign them up? I mean, part of the thing for you is that when you launch in a city, you're going to want as much critical mass as you want for a parking spot. So are they willing to sign up and say, hey, my parking spot is yours the moment you're ready? Currently, what we're doing is we're creating the list and we're pitching the idea to them. So essentially what we're trying to do is we're trying to curate all these homeowners and private property owners throughout San Francisco that apply to pretty much that play with San Francisco standards because you cannot park or impede over onto the sidewalk. So obviously, there's some things that we have to do to double check to make sure that they are completely legal. But otherwise, what we're doing is we're collecting data from them. And yes, they are more than willing to sign up with us. When do you think you'll launch? I pretty much projected to launch within six months. And why so long? Why so long? About six days. I would love to pitch it in, I would love to build this out in six days, but currently I'm not a technical founder, so that was, or a technical person. Is your co-founder? My co-founder is technical. So she has the tools and resources and clout to build this, essentially. But she's on vacation, wish she was here. When is she back? She should be back within the week. Is she full? Six days after that. I know, I know, I would love to push this. One of the things that's really hard is no one ever wants, like you're putting this product of yourself out there when you launch a startup. And no one wants to do it until they feel like it's really good. But in six months, the world will look entirely different. And every good idea you have, someone else has. And now a lot of people are going to hear about this, because we're talking about it, you know? Don't steal my idea, all of you, don't steal it. I mean, stealing the idea is not. So, it's like- NDAs for all of you. Speed and execution really matter. And it actually, you know, you could tell 10 million people the idea. And probably all of them would be busy with their own things. But a few of them will, be interested at least. And there's this issue of speed and how quickly you can build and iterate. And especially in a marketplace, there is a big first mover advantage. So, even if it's not the version you want, my most important piece of advice to you would be to get this launched really quickly in an ugly first version. And then you'll learn so much about how to build a better version that you can go from there. It's great that you're talking to customers. That is clearly the number one thing to go do. And getting people signed up so that you have inventory. But I would think about how you bring the launch in, even if it's a soft launch that you're embarrassed about by a lot. If the, yeah, especially if the problem is acute enough. Like if it's something that people really struggle with, which finding parking spots. They won't care how pretty the app is or how ugly the app is, as long as they can find the parking spots. So having something live, even if it's just like a website wrapped in a little icon. Yeah. Yeah. That's literally what we're doing, is we're targeting certain neighborhoods. So, for instance, there's neighborhoods, I'm sure you've been to San Francisco multiple times. I live there, yeah. You live there, obviously. Haight District is one of them. Yeah, right. Which is severely impacted, nine times out of ten, even during the week. How do you know? Well, I've been there physically, and had a check board out, and checking the times, and stand there for eight hours a day. But there are times where it does free up a little bit, but for the most part. So I understand how you're going to get the parking places on board, which is, I think, the harder half of the marketplace. But you still need people that want to park. Correct. How are you going to get those people? So what we're going to do is, we're going to reach out to people during festivals. There's tons of festivals. There's outside lands. There's some that go on on Treasure Island, even though I know that's out of our reach. But there's many that happen around Golden Gate Park. There's beta breakers. There's tons of festivals that we're going to be pitching this around, or some type of theme, or some type of festival, or some type of ball game. I worry that those, A, don't happen frequently enough, and B, those are people who are not looking for parking super regularly in the city. It would be interesting if you could figure out a way to find people for whom this is truly a hair on fire problem, that drive to the city every day and have to park, or live in the city and don't have a parking place. That does not strike me as the most urgent need, or the best way to find people who are really feeling this problem every day. Which there are a lot of, this is a great problem to be solving. I would think about other strategies to find a lot of people. The festival thing, I worry there aren't enough festivals and there aren't enough people at those that have this as a regular, ongoing problem. You want the people who are going to be daily or at least weekly users of this, and I bet you can come up with better ways. Well, I think if you're feet on the ground and actually surveying the place, I would actually ask the people who are parking, why are you here? That's exactly what I'm doing. And see, so what's the feedback? Are they working there? Nine times out of ten, people are either commuting into the city, so there are people that are not living in the city, obviously, because a lot of people who live in the city don't necessarily own a car. Right. But they're commuting for what? Are they commuting for work? They're commuting for work, and sometimes they're just commuting to do some contract work, they've got to come into the city every so often. There's people that come in for meetings. A whole host of reasons that they come in. I mean, these people are driving today and parking today. Maybe they'll do it more if it's easier. But can you put signs in the parking lot, in the parking spaces that say to park here, download this? Yeah, essentially just- That'll work. So when that time comes in which we do have a product launch, I'm going to create maybe little signs at first. Something cheap just to get started, maybe laminated or whatnot, to put it on those places where it needs to be. Right, you need something because in a lot of cases it is an impulse buy, right? They're going to be looking for parking, they didn't find the street parking, and now they're ready to buy whatever it is that you're giving them. Yeah. I have a general thought for you about this kind of marketplace. Airbnb is a really good business because if you own a space and you can only put it on basically one platform, if you're going to use the instant book feature. And if you're a guest, you really care if you get this particular house or this particular house. They're not interchangeable. Ride sharing, if you're a driver, you can drive for any service. You turn the apps on and off. And if you're a passenger, you don't care much which car you get in. And it's really nice if you can somehow have the former kind of marketplace where there's not just perfect substitution and everyone is switching between each service depending on price. And so if you can do something with, I think this is actually a very big and important insight about marketplaces that most people miss. And if you can do something where people can only list their space on your marketplace because you're going to have around the clock instant booking or something, that would be really important to figure out early. And a very valuable tweak that doesn't sound that big, but is actually a huge difference to the long term viability of the business. I think that's a good take on it. So right now, as far as the 24 hour booking and whatnot, I want to give the property owners or homeowners the ability to set their own times. So sometimes, maybe some owners or property owners say, we'll just say Wells Fargo. They can obviously set theirs a little bit later after business hours have closed. So do you think that you'll be able to get businesses to give up their parking space as well? I would love to reach out to businesses to give up their parking space as well. Interesting. because I was thinking that this is more around homeowners or people who have extra spaces on their own. But businesses could be really interesting. It's a very different sale now, because now you really have to go and convince whoever the property manager is or somebody else to actually do it. Correct, correct. I would, go ahead. Sorry, just one thought here, which is I would pick one of them in the beginning. Because you won't be able to sell to both. Yeah, so I essentially wanted to focus on possibly residential and private lots first, and then start slowly building out. Do you have any sense yet for pricing? Yes, so I pretty much wanted to model this after the meters in San Francisco. And right now the meters are all timed. SF Park actually did a survey in which they increased meter pricing. So similar to variable based pricing, so that's what we're going to pretty much mimic. Essentially we want to be competing with the meters themselves for residential. For private lots, obviously we're going to be competing with private lot prices. So we're just going to base our model off of the model that San Francisco has already done. And people will be able to park, I assume, as long as they want. As long as they want and the property owner is- As long as the property owner has set their times to say 8 to 5, they can park 8 to 5 and it'll be on an hourly rate. What's the legal situation of this? I assume it's okay if it's private property. It is legal. It is completely legal. I've looked into it. I've talked to an SF law attorney, specifically for San Francisco themselves. And I've asked them, can I, it's kind of a funny question. The story goes is, I called them up. I said, hey, my dad is bedridden, but he's not able to work. He doesn't get enough from Social Security. And essentially, he needs to make some passive income. Is it okay if we could rent this space out to our neighbor? And they said, as long as it's his house, we don't see any issue with it. Great, that's great. This, again, this is a really good idea. If you don't move fast, it won't work. So I think it's always important as a startup to know what the number one biggest problem in front of you is. For you, it's not shipping quickly. And so just get this working in one neighborhood as quickly as you possibly can, even if it's hacked up and doesn't look that great. Okay. Any other questions you want to discuss? I think that's it. Great. Pretty good. I'm excited to try it out. Awesome. Thank you. Thank you. Email us when you're live. Awesome. How's it going? Yuri. Nice to meet you. Yuri, nice to meet you. Nice to meet you. What do you guys do? So, I'm Philip. I'm Emma, and we're Moonlight Work. So we're building a marketplace for software engineers and designers to match up with companies who need them ten hours at a time. So specifically ten hours at a time? Yeah, I think we'll start with ten hours at a time, but some companies want more than that, and some people want more work. So if they want more time, they can have more time. Is this launched up and running? We have a prototype up and running. We haven't had anybody else use it, but both of us have both. Built projects for other people. That's a great way to start. Yes. That's good. So we started it because we have this need ourselves. Where do companies find you? There's been a variety of them. Some of them have been friends of friends that heard that we were doing contract work and would come in and assign jobs through there. Another thing is when we shut down our last company, we open sourced all the code. And so we had people coming in and paying us to deploy that code for them on their own servers. They found us through GitHub, basically. What kind of projects are people having you build so far? So far, it's a lot of people who have a very specific need. So they're like, I need an expert in this language or an expert that knows how to build this thing really well. And so they're looking for someone who there's not going to be much onboarding. They're just going to be able to jump in and do a project. Why do they choose you instead of something like Upwork or Motel or one of the other kind of outsourcing houses? Yeah, I think the biggest reason is because we're promoting it as something that experts are working on. So these aren't just anyone in the world who wants to make $15 an hour. This is someone who maybe works at a Google or an Uber, and they want to make a bunch of extra money on the side. But they're really good at what they do. So you're going to have to actually curate these people then. Is that something you're already doing? Yeah, that's what we're starting to do. But I think that's going to be the biggest barrier for us is being able to make sure that these people are really quality workers. How much are you charging for a ten hour project? So the contractors set their own rates, and then we're handling the invoicing and charging 15% on top of that. So, but true marketplace. Correct. Yeah. Other than quality, given that so many people, like this is clearly a good business. So a lot of people want it, and a lot of people are already in it. How will you become the marketplace where everyone goes for contracted engineering help? I think we can speak from our own experience and say there have been times in the past when we had student loans and would have worked extra time every week to pay them off. And there's not really marketplaces out there where people who want over $50 or $70 per hour can find short term projects that they can do on this side. So that's true on the developer side, but how do you get the companies to come to you and say, when we need an expert, we go to you guys? We're working on a couple different ways of matching, but I think the short of it is that there are very specialized needs that some companies have, and it doesn't even have to be core to the product. Sometimes it's like, I need to set up a development environment, or I want a landing page, and our design team is focused on an app, or something like that. I wonder if you want to become known as the place to go to for a particular set of skills. Not for every expertise, but in the beginning, just like a particular set where they just go to you, and then you open up additional verticals as you go. And for that, we're looking at open source projects. So an open source project is something where it takes a lot of knowledge, a lot of experience, to kind of understand the ins and the outs. And so we tested that with our own open source projects, and got projects coming through there, and people signing up. And I think that matching people based on very specific open source projects. Not saying like a Ruby programming language, but something like the MongoDB bindings for Chef, for something very specific like that. I think the insight of going after high end work, and also for people who are just looking for smaller pieces, is really good. I wonder if you could pick projects that particularly need that. Like projects that are harder to build and take less time, sort of need specialized skills, and are not the normal, like I just need people to grind through this. That would strike me as a good initial focus. What's the biggest problem in front of the company right now? I think it's making sure that matching. I mean, obviously, every marketplace has that issue, but making sure that the people we have are worth what they're trying to get charged for, because we want to set a limit on how much people can charge per hour. So we want to have a higher, we want people that are, yeah, minimum, sorry. So we want people who are making more money per hour, because that's going to bump up the quality of the work as well. How much do you two charge per hour? We're both trying to charge about 150 an hour. And we're finding, so we've had about 300 people sign up so far, and we ask them what their hourly rate is, and it's usually from about 70 to 200 per hour. The interesting thing is that it's not so much how much the people are charging, it's more the perceived value on the other companies, right? So if the company's saying that these developers are worth $150 or $200 an hour, they don't actually, they're happy to pay that. But you need to convince them that they're worth that money, regardless of what the developers think they're worth. And how do you do that? How do you convince a company that your developers are worth $200 an hour, if they can go somewhere for $25 an hour? Yeah, and I think right now for the MVP, what we're trying to say is, we are personally experts in these fields, and we are making sure that the quality of talent we have is up to that par. I think that we need to figure out how we're going to scale that. I also think, in addition to figuring out how to scale it, you need to figure out how you're going to communicate it. The website really has to give across the impression, with testimonials from well-known customers or whatever, that these are the best people. In terms of setting the prices, one thing we have consistently seen is, when you ask a user to set their price in the marketplace, if you give them guidance, if you say, based off what you've said, here's what we recommend, or here's the range we recommend, 85, 90% of users will do that. And so, if you want to sort of move people towards a specific range, because you want people that are at that quality level, you can probably do that. So we did that. Our sign-up form says the average hourly rate is $70 per hour. And it also says, if you have your annual salary, that's about what your hourly rate is. It's like $100 per hour is about $50, sorry, $100,000 per year is about $50 per hour. When do you think you'll have the first external developer live, right? So that's not the two of you. So we're working on basically building out invoicing right now. And so that'll be the next week or two, probably. Do you need invoice? Like, can you do it more manually in the beginning? Just so that you can see someone who's not you. because you obviously don't have invoicing, right? So we've been doing this ourselves, and there's just a lot of moving parts. There's sending contracts back and forth. There's setting up bank accounts. There's getting companies to pay. And when we talk to the potential contractors who want to be on the platform, some of their biggest concerns are, if I'm only working ten hours per week, how much time does it take to ramp up? Like, do I need to talk with the customer, and how long does it take until I get paid? They're also not the best of both worlds. I would try and hack all of that away, and just do it behind the scenes manually right now, just to get the developers developing. Take all of the pressure away from them, so that they can just start interacting with the customer. And if you need to manually process it, do that. But it's so important that someone who's not you starts doing this on your platform. And then when they do, for the first ones especially, I would like be super involved, just to learn what the issues are. It may be that people aren't sure they're allowed to do this, and they need help looking at their current employment contracts. It may be that people need training to know how to engage with a customer, and how much they should communicate. There are all of these things, many of which will surprise you, and your guesses on many will be wrong. And the way you find this out. is to just, for the first, let's say, 20 users, go sit with them. Or at least go talk to them all the time. I would almost think about it like, become their agent, right? Like if they were a talent and you are an agent for them and you take care of everything for them and answer all their questions. And then you can just start building that into the product. But in our experience, almost every time when people think they know where the break points are going to be or what they need to teach their users, they're almost always wrong. But you find it out really quickly. You don't need a giant sample set to start hearing the common concerns people have at every stage in the process. And then you just knock those off one at a time. And that is a way I think you can differentiate from other coding talent marketplaces that don't do this. And if you can figure out, if you can be the person that makes it so that people who want a little extra income but don't know how to go be a freelancer learn. And if that becomes your reputation, that'll be a great way to get the top talent in the field. One of the other, just an idea, which you may or may not want to pursue. But if you want to be known as the experts in the field, see if you can get any experts to actually use your platform, right? Through your network or somewhere else. Where get someone who's well known on a particular niche area and have them sign up on your platform and do projects on your platform, if they're willing to. Yeah, so what's your biggest problem right now? Us personally. Or the companies. The companies, yeah. In this stage, it's often one and the same. Yeah. I think it's more just like getting the machinery up. It's where, if we were to manually take payments, my biggest concern would be that ten months down the line, I'm going to have to manually calculate 1099. But you're not going to be ten months down the line. You really, you need to get to the next two months. Yeah. Yeah. I would say to go along with that, the reason we feel like we have to have some sort of payment thing set up is because there's so many laws around how you can pay people. And kind of the logistics of all of that, and paperwork that needs to be gone through. So I think you're right. We need to do those first couple ones to know what those are. But I think we're both like advocates of doing that. Is there not just some other startup that you can use that handles invoicing really well? It is complicated, so you're right. We're using- Just like an accountant that can help you. Yeah, do it with Stripe. Yeah, so we're using Stripe Connect, which handles everything including the 1099s. But there's no turnkey invoicing system built on top of that right now. Yeah, I get that. I really do get that. But I still feel like it's so, so I get that feeling as a developer all the time. Where it's like, if only I have this built, I'd be ready to go. But it's so much more important to actually find out if you can, like even if you have a platform built, there's a chance that people won't start using it. And you'll only know that when you do the non-scalable things. That's one of the things that we drive home almost every single office hour session, which is just do the non-scalable things. Do it manually. Don't worry about ten months down the road. Ten months down the road, it's a new company, right? It will look very different than it is today. But today, it's so important to just do the non-scalable things. And we're just talking about a small handful of users. You don't have to bring on, everyone's like, well, my problem is that if I do this non-scalable thing, 2,000 users will sign up tomorrow- You should be so lucky. And I don't have to deal with them, and that is not what's going to happen. It's a slightly worrying instinct to say that my biggest problem is that I haven't built this one piece of the software yet, not that my biggest problem is how I'm going to get those 2,000 users. So what we're focusing on basically is the invoicing right now. It's not people logging in or anything like that. It's just being able to take a credit card or bank account details right now. Okay, well again, if that's the one thing you want to do, I would get that. If you think you'll have it live in a week. If I, what I was, my answer to that question about your biggest problem would, I'm not worried about the fact that you'll be able to get people that need developers to build something. There's a lot of people that have an idea for an app, you know? The thing that I worry about is everyone, so often we've seen the idea of, I'm going to get these great developers to sort of build stuff for other people. And it has been so hard to actually do that, because the reasons that people have thought they're going to get the developers, or the sort of assumptions in developers know how to do this well, have just been so wrong. And so you still don't have, you won't notice your own problems, because you've thought about this a lot. And I think, you may find out that invoicing doesn't even need to be built the way you think it needs to be built, because there's something fundamental about the model that's going to change. But getting people you don't know, or you don't know well, to sort of build projects on the platform, I think that should, that's a really important step. Mm-hm. I agree with that. I would just add in that the idea came from a prior company where we didn't have the time to go hire people, and we started hiring part time people. People who were like friends of friends, things like that. So we started to do a lot of first hand research like that. No, I think that's great. That's actually super important, because it means you have the pain, and you understand the pain. But it's still, Sam and I are just kind of driving to the same thing, which is just, it's so critical to get someone who has nothing to do with your previous business, or your current kind of core business, that wants to start using it. Any other issues you'd like to talk about? Any other questions? I don't think so. I think that's our main thing that we know we need to do right now. Great, that's super exciting. How did you decide about 15% as the amount to charge? I think that's another thing we need to test out, but we feel like that's a number that's not crazy for businesses to pay on top of something. Like my roommate's a recruiter, and she pays, she gets 30% off of the top of all of their salaries. But it's also enough for us to not have too many people to start with and be able to start testing things out. Is that a price that you're going to charge on top of the hourly rate, or is that just going to be blended into the hourly rate? Yeah, so if somebody's $70 an hour, we'll add $15 to that. Or sorry, $100 an hour, we'll add $15 to that. And this is a good problem to have in the future. What will prevent people from, once they work with someone they like, just hiring them off the platform and not paying you? I think that's another thing that a lot of developers and designers have pointed out to us. And I think we want to make sure that the tools inside of the platform are keeping people there, so it's so easy for them to get work and keep work. And they can do this on the side. So building internal tools that allow people to work remotely and as contract workers will be another thing. That's another thing that works well about the short term projects. Mm-hm, yeah. All right, very cool. Great, thank you very much. Thank you. Nice to meet you. Thank you. Yeah. So format wise, that was an experiment. Is that something you'd like us to do more of in the class? Is that useful? More regular lectures? Yes, yes, some middle? Okay, we'll do some more about them. Great, thank you very much. Thank you. Yeah."
  },
  {
    "name_video": "How to measure your product ",
    "description_video": "Suhail Doshi, founder of Mixpanel (YC S09) and an expert on measurement, details how startups should think about discovering the important facts about how their product is used.",
    "related_categories": [
      "Customers",
      "Product",
      "Product Market Fit",
      "Talking to Users",
      "Growth",
      "Retention"
    ],
    "page_url": "/library/8C-how-to-measure-your-product",
    "youtube_url": "https://youtube.com/watch?v=MABmQhOlmJA",
    "mp3_file": "downloaded/How_to_measure_your_product_.mp3",
    "mp3_content": "We are very grateful to have Sveld Doce from Mixpanel, who co-founded Mixpanel almost 10 years ago now, and is going to talk about how to measure your product, which, as you heard from Gustav, is really the other side of the coin of growth and everything that helps you build something that people truly want and will use. So with that, Suhail. All right. Hello, everyone. Happy to be here. Awesome. I thought I would start off by just kind of like, I sometimes try to change my presentation a little bit on the fly, depending on the audience. And so I thought I would just ask a really quick question, just a quick show of hands. I'm going to define a user as just someone that uses your product, whether it's a B2B company, paying free, doesn't really matter. They did something in your product. How many people have zero users right now? OK, cool. Awesome. And then how many people have 100 or less? Well, OK. You have greater than zero, between one and 100. OK, awesome. Great. And then how many people have more than 10,000? OK, awesome. All right, so we've got, I'd say, majority of people have zero users right now. Cool. Awesome. Great. So I'm going to start off with just a quick about me, for those that haven't heard of Mixpanel. I started this company called Mixpanel. I think the first line of code was written in like October 2008, technically. I was like 20 years old. I was in my parents' house in my bedroom. And 10 years later, the company has about 300 employees. We've raised a bunch of money. And we have about 7,000 paying customers. And we're starting to close in on around $100 million in annual recurring revenue, just to give you a sense of, yeah, 2008 to now. Cool. Awesome. If you don't know what Mixpanel is, we make pretty graphs like this. We help you measure what people are doing inside the product. So this is like someone inviting a colleague to their app. We might help you measure a funnel and see the conversion rate of people opening your app to viewing an article. We'll help you measure retention. I know Gustav went over that a little bit today. And I'm just showing you this just because everything that I talk about today is basically something that you could probably do in Mixpanel or even any other tool. There are a bunch of tools that are great to measure these things. But I want you to know that if you walked out the door and you wanted to apply any of it, you totally could. There's a freemium plan. And we cater very, very much to startups. Those are all of our early customers. So feel free to do that. Awesome. Great. So today, what I wanted to dive into was I thought I would take a top-down approach to thinking about analytics and metrics. Instead of coming at you with charts and visualizations and numbers and things like that, I thought it would be better to think about the problem that you're trying to actually solve and ignore for a moment that you have to do complex analysis and calculations. You will figure that out. It's not hard. Or you'll just use tools that will make that a lot easier for you. So that's one thing that I thought I would do. And so I picked these three things. I tried to think pretty hard about what the heck did I care about when I started a company? What mattered to me? What was on my mind? And I thought, well, I think the first thing is just like, do people even understand what I made? And Mixpanel had a really hard time with that in its first 18 months. We had to change a lot of things. And most people do. The second thing is, OK, great. They kind of understand what it is. But do they find it relatively easy to use the product on day one? And that's kind of this never-ending mission that you'll end up taking when you start your company and when you ship your product. And then the last thing is, I kind of tried to pare it down a little bit. But I thought the most important thing would be then next, are people coming back and using my product? And I think that you'll find that, like, I know Gustav talked about this. And I'm going to be extremely repetitive, because it's one of the most important things that early founders make a mistake with. Yeah. So from there, I thought that it would also be helpful for you to see it kind of broken down in a formula. And so this is the formula. And I like to think about things from first principles, right? Like, what are the things that would cause you to grow? And they're pretty simple, right? There's just people that visit some page or the app, right? Basic. You experience this every day. And then there's people that sign up. And then of those people, how many of those people did something valuable, like watching a video or making a recipe or taking a scooter ride? And then of the people, how many of those people end up coming back some period of time later? And then how many people will spread that product, like tell a friend, share it? Maybe you even have a sales team. Who knows, right? And these five things, like basically equal growth. And these are your levers. And the thing that I want to kind of point out and I want to stress is that today I'm going to cover the basics. But I want to kind of implore on you that the basics are really important. Even 1,000-person companies get the basics wrong. In fact, you'll find that if you don't get the, even these 1,000-person companies that get it wrong, they tend to overcomplicate the number of things that they should actually measure and track. And it's really easy to make 25 metrics, conceive of them, align them, divide them all by, give each team five, and then really overcomplicate something that is actually quite simple to do. When you overcomplicate it, what happens is that companies, even large companies, have immediate paralysis. Even mid-sized large companies have this decision-making problem. I used to have this funny phrase at Mixpanel where I used to say that all data is contestable. You could see this number go off and to the right. And you'd go, oh, well, I don't know. It was sunny outside. And that's why people did it. And people will have these arguments no matter what, because causation is really hard to discover. And so what I find is that just picking three to five things on North Star and really simplifying it will do more good for you. And I know, because not only have I watched thousands of companies make this mistake at all sizes, I have made this mistake. I had a piece of paper that had 25 submetrics. And it was nearly impossible to actually keep track of it. And what people end up doing is, in reality, what people care about is there are metrics that guide the team, and there are metrics that help you monitor and assess if anything is going wrong. And today, we're going to talk about things that guide the team. Cool. Great. So with this formula, you should be able to assess anything going wrong in the company. If you have a really confusing landing page, you should be able to figure that out. If your sign-up process is too difficult, you should be able to figure that out. If you have a product that people don't really value, you will figure that out with just that formula. It's just that simple. And you can get more complicated after that. You could say, OK, landing page views are down all of a sudden. Why? Ooh, let me look at that segmented by country. Maybe something happened. Maybe I changed something in a different country. So you should be able to assess any reason why you're not growing just starting out with that. And that's why I say starting simple will last a very long time. So this is what it looks like, linking those two ideas together. You have this funnel of people going from visits to eventually retaining and spreading the product. And on each one of these things, you're trying to basically solve one of these three problems. Is it easy to understand? Is it easy to get started? Are people coming back because they find it valuable? And then it loops. And the funny thing about this is, even if you're Airbnb and you're thousands and thousands of people, this process of optimizing each one of these steps is never ending, no matter what scale you're at. It will always be changing something. And you'll probably have competition. So you'll have no choice. So awesome. And then once you are able to measure those five things and assess what's wrong, you have your levers. And you should be able to take action and fix any of those things. Put a team on it. Maybe you're fixing it. It is really that simple. Awesome. So we're going to start with the first thing, which is, is my product easy to understand? In order to illustrate this idea, I decided that it would be somewhat sympathetic. Because I could show you really awesome landing pages of great companies. Or I could just show you what it's like to start out. And I also wanted to mention that having a really bad landing page, there's this really awesome quote that PG used to have in our batch that I thought I would impart on you, which is that people basically just have their mouse hovering on the Back button. And they're just waiting to say, I don't know what this is. It's confusing. Back. And that's immediately how most companies are just losing most of their users from moving on. And so just remember that your enemy is the Back button. So this is what Mixpanel's first front page looked like in 2009. That's not what our logo looks like anymore. This is a design by me, original design by me. And in all of its glory, if you actually go read the words, there's tons of grammatical mistakes because I was horrible at writing. And for some reason in my mind, I thought, I know what the tagline for the company should be. Metrics that'll make you drool. And I think the reason why was because I thought these graphs were so pretty looking compared to what was out there that I thought that would be the value proposition of the company. And of course, this is totally wrong. You're all laughing. I wish I could have made this landing page, presented it to you, and then you'd all laugh at me. OK, I should change that thing. But I didn't have that. I had zero users at the time. And I tried to target small startup, big company. I didn't know who I was targeting, application developer. I'm trying to target everybody. Every mistake that one could make on a landing page is right here, the Sign Up button. At least I kind of got that right. Thank you, Adora, for teaching me how to optimize buttons that slide, made it yellow. But that's about maybe all that I got right, just maybe roughly the Sign Up button. And then after a lot of work, a lot of hard work, a lot of iteration, a lot of talking to customers, a lot of measurement, eventually, a couple of years later, it kind of turned into this. I managed to get the logo right. The Sign Up button's ginormous and yellow. And what we figured out, though, after a lot of time and a lot of energy, was that we transformed from metrics that'll make you drool to actions speak louder than pages. And you'll notice it's extremely prominent. The reason why was because the number one question that we would get as a company was, that's cool, but how are you different than Google Analytics? I don't get it. And so it turned out this tagline for us at the front page lasted the next five years of the company. And because it very much differentiated us as something where we would measure engagement, we did something different. Google was about page views. We were about what people did in your app. And that resonated. And then from there, we tried to explain what various, we tried to urge people to go down the website and look at different features and see if those things were valuable. We tried to be benefits-oriented in the copy, tried to show customers and case studies who maybe found it valuable. And we've probably made four changes after this. But I thought I'd present this one just because it was the one that maybe lasted, like the copy and the general essence of what we did and said we did, what we said we did, kind of stayed the same, largely, but lots of design changes. So the real question is, great, so how do I measure, how did you measure whether people really understood, whether they understood what you were doing? And so I think there's one tried and true number. And it's very simple. It's just, did people even bother to sign up? Bothering to sign up doesn't mean that they're going to use your product. That's a whole different matter. Bothering to sign up is like, I don't know. I'm kind of interested. I'll kick the tires. This seems kind of interesting and cool to me. And that'll tell you a lot about whether what you're doing is even something valuable for people. The second thing that you can try, these are just ideas. Trying to find the ratio of people that are going from just hitting your page, and then doing any kind of thing after that. So instead of S-A-K-A, instead of hitting the Back button. Like, did they click on segmentation, or funnels, or retention in that case? Did they bother to do that? I know there are a lot of B2B companies these days. Actually, one quick question. How many people are making a B2B company? Yeah, great. So that's about half the room. So I thought I'd give a B2B slant. One thing that I discovered was that people, a lot of your users, will click on a pricing page link at the top. It's like second or third most clicked on link if you're a B2B company, I think, generally speaking. I think this is totally contestable. But I find that people clicking on your pricing page is actually a pretty decent indicator of like, OK, cool. You have something kind of valuable. OK, how much? And so even something like that, I think, can tell you a lot. And then if you're in consumer, the benefit of being in consumer is that you usually will have hundreds or thousands of users such that you could actually go do an A-B test. Whereas in B2B, it's a lot harder to achieve that. And so I think Gustav is absolutely right that you should try to conduct as many experiments as you can and really A-B test your copywriting and find out what resonates with people. But these are all things that you can do to basically figure out, hmm, is this easy? Cool. So the second one is, well, is it easy to get started with my product? And the thing about this is like a lot of people, the thing about these first two things is that if you don't make the first step easy, if it's easy to understand, a lot of people put so much energy. When we're trying to build a company, we try to think about all the cool features and things that we could make that would be really valuable for customers. The problem with that is if you don't even get step one right, you don't even have a chance at any of the subsequent steps. So when we think about is it easy to get started with my product, forgot-about-password is kind of a useless feature if you have a very small percentage of people that are basically not even bothering to get started. In fact, I remember there was a YC company called Zenter, which turned into Google Slides. And I remember Robbie Walker, during one of our Tuesday dinners, said that they didn't even implement the Save button for their online PowerPoint because they knew that none of their users would ever ask, like, hey, can I save this? They just didn't even bother to do it because they wanted to see would anyone even use the PowerPoint presentation product. And when they imparted that on me, I was kind of like, wow, that's crazy. And for, I don't know, maybe like 18 months of Mixpanel, we didn't even have forgot-about-password because we were just so ruthlessly trying to prioritize things that would really matter to customers. And it turned out we didn't get very many requests anyway. So this is really important. And here's an example of easy to use, something you use every single day. That is literally one step. You just go to Google, you type it in, and you immediately get to use the product. There's no sign-up. There's no CAPTCHA. because there's none of that, right? A more complex example is like Airbnb who might have like 10 steps or something like that. We worked with Airbnb for a while helping them optimize initial user experience. And even though Airbnb probably has like 11 pages of, like you have to go to Airbnb and then you have to fill out this form and then you get taken to the results and then you click on those results and then you click on many different results because you're trying to price compare and you're going through this very complex checkout process. So there are actually many steps to booking something online. But Airbnb had to kind of figure out like, how do we A, describe what we're doing, what we offer, what's useful for the world and B, how do we help people get started as quickly and as easily as possible? And like, this is airbnb.com right now. And it's, you know, they have this very simple, like book unique homes and experiences. You fill out these very basic things and you hit search and that's it, that's their getting started experience. It's not their entire flow, but it's the first way to get started. And they even try to like kind of impute something like what you might be able to find. Something imaginative on Airbnb. But the thing is, is that this seems simple, right? This seems like something that you could just like easily make, it doesn't take, how hard is that, right? You can do that with Twitter Bootstrap in no time. The problem, the thing that's really hard is like, figuring out that that's the right thing. That's really hard. That takes like, they probably changed that, you know, 50 times before they figured out like, this is the right current optimal thing at this stage for the company. And so it takes a lot of work and you have to grind very hard to get to this point. So question is like, okay, great. So how would you measure something like that? Well, I think the really simple answer is a funnel. How many people go from a landing page to signing up to doing that valuable thing, like watching a video, doing, in Airbnb's case, it would have been just doing a search, just one search at least. Once you get past that, measuring your funnel for the entire initial user experience. There's like weird things where like, there's actually situations in games, games can have like 20 steps. And I've noted, and I've seen hundreds of gaming companies' funnels. And even though they might have like 20 or 30 steps, sometimes you can, they actually convert very highly. Like they might get like 80, 90% conversion rate through all those 20 steps. Just the first two are like actually the ones that have the greatest drop-off. And then the last thing is just like actually speed. This is one that I think a lot of people don't actually do, which is like how fast can someone just get started? And that will tell you a lot about how complicated your experience is. Sometimes slow is okay, depends on the business. But speed is really important. Does it take them like five minutes to get something figured out, or does it take a minute? In Mixpanel's case, we cared a lot about like, we had a complicated flow. Because not only did you have to sign up, but you had to be able to write code. Just really complicated. And that was the one downside we weren't really sure, where people, with Google Analytics, you just copy and paste the JavaScript. With Mixpanel, you had to like actually go and track a line of code. And so we had this question in our mind, was that easy enough? And so speed became really important to us. How fast can someone do that? And I wanted to give you a couple tips and tricks. Things that I have seen that companies do that are generally like not great. Number one, you're a startup. You don't have lots of fraud problems. You probably don't have a lot of people spamming your service. You probably don't have a lot of like fake actors in the system trying to sign up. So if you don't have those problems, don't optimize for them until you do. And I just want you to know that generally, email and text confirmations have an enormous drop off. Like, I'm talking like, you get, of the 100% of the people that come, like only 30% will like basically go on and like click on those email confirmations, or 40%. You'll spend a lot of time trying to optimize that. And then to make matters even worse, like you have to hope to God that it doesn't go to spam. Like, it's this really horrendous experience. So just be really careful. You'll lose a lot of users that way. It's really important to iterate on your initial user experience. That will be a never-ending process. You will do this forever. Even as the, especially as the product changes. And it becomes really critical to like have someone on it, at least one responsible person just thinking about that all the time. And then the last thing is, is not every company, not every product is capable of doing this. But to the extent that you can just let users into the product, it's always better to do that. In Mixpanel's case, it wasn't possible because like we needed to get your data, so you had to sign up. But we experimented with like, what if someone just copied and pasted the JavaScript, but they didn't sign up? And we just collected their data. And then after that, we like asked them to sign up. We did experiments like that. So, to the extent that you can achieve this, that's awesome. And good examples of this are actually like Airbnb and Google where you just try it. But there are always exceptions to these rules. For example, like Pinterest makes you sign up. They didn't used to, but they do now. And there are good reasons for that. And then the last one. Definitely not least, are people coming back? To me, this is probably one of the metrics that is greatly ignored by most startups. And it's often the reason why I've seen companies, even with millions of users, actually die. I've seen probably 15 different companies that grew virally and then just died. The company died. And I wanna demonstrate this in a graph. I call this the shark fin effect. And the reason why I call it the shark fin effect is because, well, one was because in Mixpanel, the default line color for your first data point is like blue. And so, to me, it always looked like a fin in the water. And it looked a lot like this. And what happens is you're slaving away and you find a way to go viral. Maybe you're going super viral on Facebook or Instagram or something. And you're like, wow, I have struck gold. I'm acquiring tons of users. My life is awesome. I'm gonna be a billionaire. It's great, right? And the problem with this is that if it happens too early, but you didn't quite think about retention, it becomes really problematic. And this hurts companies. So basically, what happens is the app goes viral and then eventually, the rate at which you're losing users becomes high enough that you can't acquire the new ones. And it turns out that even though we like to try to be extremely rational people, it's really hard because when the app's going viral, you're just like, oh my God, I need to just take advantage of this moment because what if I don't get it? And what if my competitor finds it? So I'm just gonna optimize, optimize, optimize. But it turns out that it ends up not being very valuable because if you're just losing all the users, it's really, really hard to reactivate. If you talk to people that have ever done a reactivation campaign, reactivation campaigns generally don't go very well. You usually just lose those users until they decide that maybe they wanna give the product a second chance. So it's not like, your response is like, when this happens, a lot of people's response is like, oh, we lost the users because our app was invaluable. Let's just email them again and see if they'll come back. And that's usually not a great idea. So it can be really, it's really important to really think through retention. And you really don't wanna be like this guy. The shark fin effect is really, really bad. In fact, LivingSocial is a great example. A lot of people don't know that LivingSocial was basically this app that was on Facebook that had nothing to do with the Groupon deal cutting thing. And they went super viral on, I can't remember exactly what the product was. And LivingSocial literally had to pivot the entire company to basically competing with Groupon because the app wasn't very retentive in those days. So there's some pretty basic ways to measure that people are coming back. The most obvious one that I hope most people know is that it's just new users. So making sure that you're tracking whether a brand new user, someone who just signed up, what percentage of those users will come back like a week later or 30 days later. It's really important to track a longer period of time because a week later is just not a harsh enough metric. And it's important to see how fast you'll end up losing users because you'll have to figure out a way to re-engage, to find new ones. And that becomes really, really hard at some point if the number of users you have it starts to become quite high. And then the second one is just daily active users. There might be people that disagree with this. I don't think there are too many. But I now think that monthly active users has become like the new BS metric that's like very similar to like just like number of registered users. Like number of registered users is like a very silly metric. I remember seven or eight years ago, I think like, I wanna say it was like LinkedIn came out and said, we have 200 million registered users. It was like, who cares? How many people are using LinkedIn? And I now starting to think that like MAU is like becoming quite close to that now. Daily active users is really hard to maintain. I mean, how many products do you use every single day? You have like, if you just look at your phone and you go through all of the possible apps, like how many of those do you actually use every single day? So I think it's a really harsh metric. And we actually found at Mixpanel, so even if you're a B2B company and you might think, well, I don't know, I'm selling to businesses. So like, can I really maintain like daily active users, especially on Saturday and Sunday? And we actually found that there was like a really, really strong correlation with daily use and rate of churn, like rate of like people no longer paying for the product. And it didn't take very many users. I think it was like 1.4 daily actives would like reduce churn to like a dollar churn, but like to like, I don't know, like sub 10%. It was incredible. And so I really stress measuring a DAU. And then the last thing is a B2B slant again is something that I think a lot of B2B companies make an early mistake with. It's actually not just a B2B company. It's actually companies that do subscription. So I don't know if there are any companies that would ever think that they may offer a subscription of any sort, you know, like if you're a meditation app or something like that. And it's just dollar, it's monthly dollar churn. So if you're charging your customers monthly, many businesses charge annually, but usually most startups start with monthly because an annual commitment sometimes can be hard for early adopters. It's just measuring revenue churn. I wanna give you a slight story. If you have revenue churn and your revenue churn is say 7% per month, right? You might think, awesome, I'm keeping 93% of these dollars every single month. This is awesome. I'm doing really, really, really well. The problem is, is it's 7% monthly churn. And if you extrapolate that out over 12 months, you're actually losing 58% of your revenue in a year. It's really harsh. And a lot of people, for some reason, this thing is not mathematically intuitive to most people. I don't know why. It wasn't even mathematically intuitive to me early on. And if you think about it, you're spending all of this energy with marketing and improving the landing page and improving the getting starting flow, and you're doing all of that. And if you don't have retention, if you're losing that 7% every single month, you have to somehow make up for that 58% that you lost going into the new year. And if you start thinking about it, you're like, wow, we're making a million dollars and we're losing $580,000 and we're starting the year like that. Now you have to do that and grow on top of that. And once your base of revenue gets really high, it becomes really hard to keep up. And you kind of have this really long arc of like a shark fin effect basically. So it's really important to look at your monthly churn and this will be the single cause of like death, but the problem is it's like the worst kind of death. It's like death that occurs. It's really like, it's really flat growth, but it occurs like eventually in like four or five years if you're able to acquire users. And I mentioned this, not only because I talked to some founders about this, but this is also something that like really hurt us in the early stages of Mixpanel and we really had to figure out a way to fix this. And there's all kinds of ways. You can use product, you can use pricing. There's all kinds of ways to experiment with this, but this thing probably gave me the greatest number of nightmares and lack of sleep I think ever. So I really wanna stress that on all B2B companies here. Really think through this number and think about like almost graph like, okay, what would our rate of growth be if churn stayed constant? It's really important. Cool. I wanted to go over two things. One, I recognize that there are a lot of people here that have zero users. So they're like, what the hell do I measure? So what if I have less than 50 users? Well, the truth is, is I couldn't really think of a better idea than just basically you just have to talk to your users. And I thought I'd give you a mini story about at least at Mixpanel what we did. When we had like no users and I had that page that just said metrics you'll drool over, one trick that I used is that I had like maybe 10 or 11 or 12 customers. And honestly, I just put all of them on IM, like on G-chat or something. I don't know what the kids use these days. Maybe like WhatsApp. But I honestly just like would just badger them on like WhatsApp or G-chat or whatever and then just ask them. And I remember one time we were trying to redesign our funnel UI. And we used to have a vertical funnel, but we had a competitor that had a horizontal funnel. And it seemed like that was a better idea. It seemed like that was more intuitive for customers. And so I didn't really know how to like get the data because like how was I really going to find out whether they liked one of those two UIs? And I didn't have the, it was just me and a co-founder. So like how the heck were we going to like do an A-B test on that feature? There was no realistic way to do that. And so all I did was I just made like a really crappy version of the UI that I thought would be better, the horizontal version of a funnel. I was like kind of grayscale. And I made like a really beautiful, colorful version of like the vertical one, which was kind of our control. And then I just asked like 11 people which one's better. And then I want to impress this thing because Gustav mentioned that it's the delta, it's the difference that matters in A-B test, not that this is like a true perfect A-B test. But like I asked 11 people on IM, got feedback in a day, and 10 out of the 11 said horizontal funnels. And then we just made it and we built it and we never looked back. And it was totally the right decision in retrospect. I don't think there's any way that you can kind of skirt by talking to customers. But here's the benefit of talking to customers, even though it feels maybe it's more tedious than looking at a graph. You are going to get way more information and depth from talking to customers than you ever will looking at a data point in a graph. No matter how much you slice and dice and segment the data, no matter how mathematical you are about it, you will never get as much information in building your own intuition than just talking to customers. And it's really critical that you do it. And the one thing that I wish I had done back then was I wish I just wrote it down. I wish I wrote down tons of the feedback because I think that it would have helped, my co-founder, it would have helped employees in the company down the road really go on the journey, make them feel like they went on the journey with me rather than having our roles kind of feeling like they were so split up. And then the last thing that I thought I would bring up is to impart what I kind of said at the beginning, which is that I think that one of the biggest mistakes that people make with analytics is being really overcomplicated, thinking that they need to be super sophisticated, thinking that they need to track all kinds of crazy cohorts and they need to have like a dashboard with like 30 panes on it that all like loads, you have like mission control. I don't think that is necessary. I had that, it didn't work. It was really hard to run the company that way. And what also happens is that when you build your team, it will be really hard, it will be confusing for your team. Of those 30 panes, like which one do I need to care about? And I think that we need things that are, humans just need to simplify things. So I'd pick one North Star metric. And I think in a North Star metric, I would choose in this case is like, what is a number that you're willing to bet the company on? Right, like if that number goes. south, you deserve to die. And if that number goes up, you will like, you will have like made a huge dent in the universe. Like what is that, what is that metric? And I'm not saying you need to choose that metric forever, but choose it for six months. Choose it, commit some time to it. If you find out that it's actually like the wrong metric, which it will be, probably the first time you choose this, usually your metrics are wrong. And then you can change it, but commit again to for another six months, but choose that one number. And then like, if what you have to do at the beginning is basically just like print it out and like put it all around the office, do it. Because people will start to be maniacally focused on it. They'll show up to meetings and go, yeah, but that number is like down. What are we gonna do? And where you can get really complex is discovering why that number is down or why it's going up. That's when you can get really sophisticated. That's when you can slice and dice it and figure out what the retention is and things like that, and measure it over a funnel, but keep things really simple. And then the second thing is like, don't boil the ocean. Like pick three to five other things. I think less is more and just stay there. Telling even large companies, most large companies don't do this. And it usually is very discombobulating for the workforce. It's totally fine to have numbers that you wish to monitor, but don't focus on them. Awesome, I think that's it. And then for the people that were like slightly bored because I went over the basics, I thought I would help you out by just kind of having some advanced topics for later that you could read about. Really, these are things that I found really useful. My favorite one is this one, The Next Feature Fallacy by Andrew Chen. And it's just this idea that we always think that the next thing that we make will be the thing that will change the trajectory of the company. A.k.a. the next feature's right around the corner and we're gonna be huge. And I would really recommend that you read that article. It's really awesome, one of my favorite ones. So for advanced stuff, these are just people worth following, reading about, and can give you more ideas than what I've given you today. Awesome, thank you. (*audience claps*) Geoff, Q&A? Okay, cool, all right. Yeah, yeah. I want to be fair. I don't want to be like if every speaker chose someone in the front. Who would you suggest the conversion, accessible conversion, targeted conversion from visitors to registered users, registered users to subscribers, paying subscribers? Yeah. Yeah, so that's, the problem with that is that it's so, it's so, yeah. Oh yes, I think someone asked, what are like good benchmarks for like those, given those five steps, visiting, signing up, using the product, what would be good conversion rates for any one of those steps? And the hard part with benchmarks like that is that it's so dependent on the business. In B2B, like going from like a visit to a sign up, like I think like a four to 5% conversion rate is pretty good. I think I like swapped notes with Stuart at Slack because we kind of had similar landing pages. I think I asked him, what was your conversion rate at Slack? And I think we both ended up being somewhere around like four to 5% from visit to sign up. But that said, like, I don't know what that would be for, you know, something like Airbnb, where it's like getting to a landing page and then, you know, searching for your first place that you would wanna book. So I think it's really dependent. I know that Mixpanel publishes, on its blog, publishes lots of benchmarks. So I know the marketing team there that does that and they like publish all kinds of benchmarks for like, what should your retention be if you're a gaming company, if you're an e-commerce company, if you're a B2B company, things like that. Social company, a video company, things like that. So I think that you could probably go there and find various benchmarks reports. But it's really dependent on the business, yeah. So when you're going through the sign up process, how do you see numbers vary if you're like, create an account name and password and doing all that, kind of sign up versus a single like button login with like Google or LinkedIn API? How does that like transfer, do more people sign up if they have that like smooth click option? Do you see more people drop off because they have to use one of those? So I think the question is, what converts better? Like those like social buttons where you can just like quickly authenticate like Facebook Connect versus just like standard sign up? Is that right? Yeah, like all of these questions, they require like a lot of specificity because it's actually like really unclear. And in that case, I actually don't know. I truly don't know. And so I think the way to answer this question is to find friends in tangential industries that like don't compete with you, but basically do that. And then just be like, hey, what is your conversion rate? Have you tried something? I don't actually think a lot of those numbers are like secrets in reality, right? Unless you, I mean, you can't go to your competitor and ask that, but like most of these things are not like super duper secret type stuff. And like, you know, they could either give you the information and save you, you know, the six months or they'll just like say, or you try it out, but it's just, it's sort of strange to keep it a secret. So I'd rather give you ways that you can discover that. I would just ask friends that have like have a startup or even if they work at a big company, sometimes they're willing to share it. Yep. Cool. Yeah, so you talked about making it easy for a user to start using your product. And then there was a slide of the Airbnb landing page. Yeah. So how do you balance simplicity with informing your visitor, like what it is that you do and why they should use your product, right? So if you don't have that brand recognition already where the visitor already kind of has a sense of what they're gonna do. Right. So how do you balance those two? Right, yeah. So the question is Airbnb's landing page was super simple. And how do you balance like, I mean, what if a lot of people just know about Airbnb and then just know what to use Airbnb for? And then that's why they can keep it kind of simple versus like having something more complex. A good example of this is like Craigslist is crazy. If you go to like the front page of Craigslist, it's like absolutely nuts. And like even Amazon, if you go to amazon.com, right? Like even though Amazon has like huge brand recognition, you go to amazon.com and it's like, whoa, there's like million things going on at once, right? So how have these companies found the balance? How have they found how to deal with this complexity? And the truth is, is that I find that it's important to have like a guiding principle. Like what is it that you're trying to actually optimize for, right? If in the case of YouTube, let's take YouTube as a good example, right? YouTube could just like be like Google. They just be like, what do you wanna look? What do you wanna watch, right? They could do that, but they don't. And so I think that the question really is, is like, what is YouTube? What is the team at YouTube trying to optimize for? Are they just trying to get you to like watch a video? Is Airbnb just trying to get you to search for any kind of hotel? Or not hotel, but Airbnb. And so I think that like the team has to develop first a hypothesis of like, what matter, what do we think matters? And then from there, it's important to experiment and try to figure that out. It turns out like, it's not too, again, it's about the Delta of like what people will actually gravitate more towards. Like if you make a really simple experience, but like people are like really confused because they don't even bother to do it, or you ask them, then you kind of have like new information. And I think the key is to find the minimum number of things you need to add to get someone started. And I think, I don't think there's anything, I'm sure Amazon has tested that front page like crazy. And they found that it's like quite optimal, yeah. Yeah. In your personal experience, do you think that short tutorial videos, like one to two minutes, I think even will be a big part of the experience? They can, it depends on the product. I'll give you an example in Mixpanel's case. Oh, sorry, the case, yeah, the question was, are video, are like one to two minute video tutorials effective? Fair? Yeah, so I think that it's complex. We did a video tutorial video in our flow, for example. And, you know, like I would say that, I would say that like a lot of people didn't watch it, truthfully. And this is what I mean by experimentation. Like a lot of people didn't watch that video tutorial. And we actually, I think, eliminated it in the first three steps. But what we did find was this interesting thing that occurred as a result of looking and measuring things, which was that, well, we have a feature in Mixpanel where you can like see every action that a user takes. And so I would literally just like go to every user and then just like watch, like a creepy person, just like sort of watching like everything that like someone would do in the product. And eventually when you do that, like when you do like hundreds of those, and you've just watched hundreds of those, you start to develop some sense of like, okay, what you develop is an idea, a hypothesis. And all of these things like, all of these things require art and science. And I think that companies that take it too far, they like take it too far to science, end up getting it wrong. They end up optimizing for like weird things. Like you can always make a button more yellow and bigger. And like, but that doesn't make users happy eventually. And so anyway, to answer your question, what I found was that lots of people were just clicking randomly on like all the side menu options. And my hypothesis was, well, they hadn't integrated Mixpanel yet, so there's nothing to look at. So what the heck were you doing? Just like clicking on like funnels and retention, like why would you do that? And my hypothesis was, they were just curious like what the product did. What is it that they did? And so we did this A-B test where we like had a control with like nothing, you know, just the regular, you know, clicking around, seeing like some image. And then we had another one that had like videos. And then we tried to see like what caused people to like do their integration, their first integration, what was the conversion rate? And it turned out like the video like super won. Actually, we didn't even have more simple tests than that. I think we just emailed people a video and said, watch this video, super basic, didn't even bother to implement it on the website and had an amazing conversion rate. And then we decided to add videos to all those tabs where there wouldn't have been anything anyway. And so that's why I wanna say like, I wanna stress this, it really depends. And what matters is that you run the experiment to develop a hypothesis, i.e. the art, not the science, and then measure it, which is the science to find out whether the thing that you thought of was in fact right. Yeah. All the way in the back. I have a question related to the return, the revenue return. Yeah. So how does that relate to the retention? Because you said 7%, let's say people are 58%. 58% loss in revenue over a year, yep. But if you curve how you look at, when you look at the retention, the thing that's on the Mixed Metal website that if you have 35%, if you curve the retention, does that have the effect as a reboot for the art? Yeah, so these are slightly two different things. One is like user retention, and then one is like dollar churn. And so in the case of dollar churn, the reason why I bring up dollar churn is that even, like you could totally have a company where nobody uses the product and the company continues to keep paying for it, right? But I find that like most companies are like pretty incentivized to cut their spending and employees are incentivized because they lose it in their budget. And so with respect to dollar churn, you could have a lot in a B2B company, for example, you can have a lot of user, you can have even one user using the product, but the company could continue to spend money on it. And like you might, so like a 40% retention rate like might be okay, right? As long as the company is like continuing to spend, but losing 40% of your dollars in a year is really hard and not good retention. Does that make sense? So those things are not exactly linked. They're not directly linked. Yeah, yeah. Yeah, like to give you kind of a benchmark, like a chat app that's like often used a lot will have like 60, 70% retention. Like those are some of the most retentive things. Like something like Slack would probably have like 80% retention. It's kind of like unbelievable. Whereas, you know, like a product like Mixpanel when we first started out, like the first year, I think we had like 30, 40% retention and that's not that great. But it was our first few years, yeah. Are these all metrics are applicable for hardware startups? I mean, it's the same like, do you know that we need to go for it? Yeah, so the question is, are these metrics, can they be used for a hardware startup? Yeah, I don't see any reason why. We worked with Jawbone for a long time and we worked with Fitbit. And most hardware, does your hardware company have a software component to it? Actually, we do like a subscription model. Like we go with our product and it's a service. Okay, so it's a hardware company with subscription model. Yeah, yeah, absolutely. It may be more challenging as a hardware company to track, but it's like sometimes, but it's totally doable. Most hardware is like connected to the internet somehow. So I don't see any reason why. Like a lot of the scooter companies, for example, they're like all connected to hardware and they have a software component. So there's really no difference, yeah. Yeah. Oh, I wanted to, at a security point, I saw the first version of the website. Yes. For startups, for graphics, for developers. And then with the later version, it wasn't so imperative to have a tie-in for savings. So that was one point. It was just a benefit. I was curious about when you were going to say that you wanted to send a person that you weren't told to want to do. Yeah, so the question is, the first page was like trying to target like various kinds of sizes of companies. And then like the second landing page of Mixpanel, like in 2012, basically didn't kind of disposed of that. And it had something very different. It was marketing like features and stuff. And how do you figure out like what to do basically from that point to the next point? Yeah, so I think that the basic gist is that, so you can clearly see like I had no idea who our customers were. And then after like a few years, you just, you talk to users, you ask them like what size of company they are, if they sign up, if you want to. We didn't do that. But we just spent a lot of time. It was so obvious that like everyone that was signing up for Mixpanel at that time was a startup. So for a small, in our case would be, we'd call that a small business. How long did it take you to figure out? Because it was a cat, I think, in general, in a way to figure out. I think like it took like maybe no longer than six months to figure out that we were not gonna sign up a large company. Yeah, and we just didn't have the product. It just wasn't there. We hadn't worked on it long enough. So the only people that were willing to basically try it were companies that could take the risk to try it. And most of those companies didn't have anything anyway. So it was even easier. It was easier to target companies that had nothing and were willing to bear risk. And then most of the time, I would always employ this trick where I would just, I would charge them money for it. And then if they said no, I would just give it to them for free because the feedback was more important. But I always wanted to see if they would pay for it. And so the only people that are willing to do that are also small businesses, turns out. So for us, it was just like, it kind of like hit us. It slapped us in the face. It wasn't like this hard thing to figure out. Yeah. Yeah. Yeah. So you mentioned that you've been doing that for a very long time, right? Yeah. So how do you know what the quality of life is here? Like, what are your passwords? Like, make current users happy versus like only building three on you? Yeah. So we, to be clear, we weren't necessarily building things to bring new users on. Oh, sorry. The question is, you guys built, forgot about, you didn't, you decided to not build, forgot about password. How do you know when to build quality of life features versus features that just acquire new users? Yeah. So I think that we didn't, we didn't, it wasn't so much that we only built features to acquire new users. We built features to acquire new users and to keep existing users. So we were very focused on like parts of the product that would actually make a difference, right? That would be clearly differentiating compared to all of the other possible options out there. And like one of the things that's like not different is whether you have forgot about password, right? That was like in the bucket of things that like maybe don't matter. And so I think the question is like really like, when does it become a problem enough for you that it's worth building, right? Like if you, if you're finding that like, it turns out that, that the number of requests that you're getting for forgot about password is like increasing and then manually doing this process is like annoying, then just start, then you should just build that feature. Because you know that if you don't build a feature, they can't log in, then you can't retain them. them and then you lose them so it becomes this like flywheel effect where like the only way to retain them is to do that and in fact even though mix panel didn't build forgot about password for like maybe you know 12 to 18 months we went eventually we found that people like people would try like multiple times I when I was looking at that stream of every action that a user would take I found that like people were like going to the login screen like five times and I was just so confused it's like why are they going to the login screen five times I was like oh I think it's because they can't log in like some people don't even hit forgot about password there's like try try try and I'm sure you've all done this like with a bank or something you're like I'll just do it tomorrow you know you don't even bother right and so it turns out that even that happens and so we went so far even though we didn't do that I like to think that like we really made up for this later on we went to so far as to like we found this like clever trick that Facebook used which was that when you fail to log into mix panel like three times on your third time we just send you an email that says you know we just sent you an email just go to your email and click the button you'll log in right now don't worry about forgetting it don't worry about changing your password just like login and it turned out that like that had this like great retentive effect because we were really focused on retention at that time yeah okay a couple more questions before you yeah how do you gauge product market fit how do you measure product market fit so I think there's a lot of people that probably have already will talk about or have already talked about like you know people will say very and I think they're they're all right so I'll give you a kind of I'll give you a quantitative slant versus like a qualitative science some qualitative science or things like when people are willing to spread you to their friends that kind of thing the quantitative version of this is really just measuring your retention like how many people it's really measuring like DAU it's really measuring the percentage of people that come back a week later 30 days later it's a number of people that like become almost like they'd like need your product or they like feel like life would be a lot worse and I think that you can you can totally measure that by how they use it and so I think the quantitative measurement is basically finding like some benchmark some sense that for your industry maybe that's like 30% and just remember like that benchmark is probably like average and your desires to basically be above average and so if you can like significantly beat that benchmark then I think that you've like really you've you've done better than probably product market fit I think that's one thing I think another thing is like you can try to measure like overall like repetitive use like frequent use in a day so like you can make pretty harsh metrics you can be like for example with DAU you could say I don't want it to just be daily active user like they did one thing I want it to be that user has to have watched five videos and then and then then and only then or do they count as a daily active user so you can be particularly harsh about that metric right someone coming and like to see that's why I say ma use kind of a BS metric now because you come and watch one video and then never come back again and you like count and that's not like a very healthy business so I think that find ways to be harsh about your North Star and I think that you'll find that that you'll find that you reach the product market fit yeah yeah I think with mixed panel it was like 30 40 percent retention was like really really horrendous and we totally didn't have product market fit yet yeah okay it's like a Peter Thiel question what's one piece of conventional wisdom that you think is generally wrong about startups in general gosh that's a hard last question it's like everything else is like fine gosh I think I don't know I'm not I need to think about it but I think that one thing that has like become pretty clear to me is that I think I think after having done mix panel for about a decade I kind of figured out that I tried to impart it on you in in the in the talk today which is just that it's it's much better to just like I think that we tend to complicate things as humans and we don't we tend and that comes that comes through in like everything for example like we we tend to have we tend to like make a version one of a product and then we get to like version two and we're like okay we're done we like we did it we solve the problem and then like often a founder will like kind of get distracted and then go and like work on the next product the next thing and they haven't yet figured out like their retention is probably not great or they're operating at negative margins or like all these things that same thing even happens with numbers like we pick our three metrics then we continue to get more complex as a business and then we add the next 20 things and we all we do all of these things to like in hopes of like feeling like we control the situation better and I just think that those are all like distractions and mistakes and that I think it's really hard for the average founder to actually just be focused on something boring we tend to have like 80 or something and like we just just I decide to get very easily distracted I think it's hard to do something do the same thing for four or five years because we don't like feel challenged anymore and I think that that's a huge mistake that founders often make and I don't know that anyone say oh that's that's that's like totally wrong Suhail but for whatever reason like every founder repeats it so there must be something I don't know something there must be some kind of wisdom that we all think this is like the right thing and I made those mistakes I made new products that I shouldn't have I measure too many things over optimized things that didn't need to be optimized so yeah it's really cool thanks you"
  },
  {
    "name_video": "How to Start a Startup: How to get ideas and find what's working",
    "description_video": "Stewart Butterfield, Co-founder and CEO of Slack, and Adam D'Angelo, Co-founder and CEO of Quora, explore the process of getting an idea, followed by measuring and tracking metrics for your company. From YC's Startup School in 2017.",
    "related_categories": [
      "Startup Ideas",
      "Growth",
      "KPI"
    ],
    "page_url": "/library/8B-how-to-start-a-startup-how-to-get-ideas-and-find-what-s-working",
    "youtube_url": "https://youtube.com/watch?v=zsBjAuexPq4",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_How_to_get_ideas_and_find_what's_working.mp3",
    "mp3_content": "All right, good afternoon. Today we have two different speakers. We have Stuart, the founder and CEO of Slack, and then we have Adam, the founder and CEO of Quora. I'm going to interview Stuart. We're going to talk about ideas and how to find good ones. And then Adam is going to talk about metrics, why they're important and what to measure. Stuart, thank you for coming and spending some time with us. Stuart is the founder of Flickr and Slack. And what I didn't know until very recently is that he tried to be the founder twice of Massively Multiplayer Online Games. And he turned it into these two iconic companies. So I wanted to talk about just the process of coming up with the idea for the game and then the ideas for Flickr and Slack. All right, so yes, twice we set out trying to build a web-based, massively multiplayer game. And the origin of that was all the way back in 1992. I arrived at college and I got my account on the school's Unix machine and was exposed to the Internet for the first time. And it was kind of a mind-blowing experience. So this is about a year before the web became popular. So it was like IRC, Usenet, Talk, email. And I was really fascinated with the idea that people could find their community irrespective of what that community was. So if you were a breast cancer survivor or a model train enthusiast or whatever, if you're interested in some, as I was, obscure 19th century biologists, then you could find all that stuff. And the idea of a game that lived online like that and had the game-like aspects or play as a pretext for social interaction seemed really interesting. And I'm not going to go into too long of an explanation because it turns out it's actually a terrible, terrible idea, at least as a commercial business. It might have been fun as a hobby. I think it could have been the kind of business that sustained the number of employees required to operate it, so like a restaurant or something like that. But when in 2009 we started the company that ended up making Slack, we raised $17.5 million in venture capital. And it's just never going to become the kind of business that would justify that investment. But the first time was a little bit different. So 2002 was after the dot-com crash. It was after World Climate Enron accounting scandals. It was after 9-11, and the NASDAQ was down 80%. S&P 500 was down 65% from its peak. No one wanted to invest in Internet-facing stuff. So it was very hard to tell whether this was a good idea or not. Because there was no signal from the market that said, this is an investable idea, because nothing was investable at that time. We raised a little bit of friends and family money. We spent about a year or so building a prototype. The prototype was well-received, but it was going to take us another year and half to finish it. And we literally couldn't raise any money at all. We got to the point where the one person on the team who had kids was the only person who was getting paid. And then we decided to try to find something else we could do that would make use of the technology that we'd already developed, but that would be quicker to get to market. And that thing was Flickr, but it was also a bad idea at first. So because we had developed this game client and we had a messaging server on the back end, we just repurposed the game client as a photo sharing client. So in the game, you had a bunch of slots along the bottom of the screen for inventory. Those became slots into which you could fit photos. And because the game was all real-time interaction, the photo sharing was all real-time interaction. Which meant that you had to be online at the same time as someone you cared about in order to use it. And while it demoed really well, it was amazing technology, especially for at the time we started on that, maybe like late 2003. It was a terrible product because you didn't care about any of the people who were actually online. That morphed really quickly, and the experience making Slack was a little bit different. We had all of the resources we could ever ask for. I mean, we had more than enough money because we had money left over and we decided to abandon the idea. And we had AWS, which we didn't have before. Hardware was effectively free. Internet connections were much better. There were many more people online. Hardware was better. So none of those external conditions was the reason this wasn't, this massively multiplayer game on the web, wasn't a good idea. It was just not a good idea because there wasn't a big enough market for it. And why was Slack a good idea? How did you decide that Slack was a thing to build? Well, we started developing the system for internal communication that was based on IRC. And those of you who have used IRC and also use Slack can recognize that Slack is IRC with all of the things that were missing when it was originally designed in 1989 I think this is, I don't know, it's post facto analysis so it's hard to know if this is really true or not. But I think that the reason that Slack has been so successful is because we had a three and a half year long design process where we were conscious that we were designing it. So we started using IRC. IRC has many deficiencies. Among them, you can't store and forward messages. So if I wanted to send you a message and you're not connected to the server at the moment I want to send it, I just can't send you a message. So the first thing we built was a bot to log all the messages and put them in an archive. And once we had that, we had messages in a database and we thought search would be useful, so we built search for it. And this was 2009, there were no good IRC clients for iPhones. And so we built a HTML5 front end for the archives in Safari. And once we had that, we wanted to be able to post, and just on and on and on. But in the normal process of software development, there's a huge amount of ego and speculation. So when you're arguing with someone about whether this feature is a good idea or not, if you can get to the point of enlightenment in a Buddhist sense, then maybe you can do that without any ego. But the practical reality is people are very ego-laden in those discussions. And there's a lot of speculation, like I think this could be really valuable for someone. Whereas when we were building the system that was kind of the proto-Slack, that was the inspiration for Slack, it was whatever problem is the most irritating. Like something that we just absolutely can't stand, we would address that and then with a minimum amount of effort, and then go back to what we were supposed to be doing. And then kind of let it cook for several months. And we had 45 people working on it, working on the game. So we had a lot of real world feedback. Or when there was a problem, I mean an opportunity that was so obvious that we couldn't help but take advantage of it, we would spend the minimum number of minutes on that and go back to it. So at the end of that process, we had this fully designed product that we were using that was a terrible implementation, not what you would do if you started from scratch. It was obvious that this was something that had enormous value. Everyone who worked at the company agreed they would never work without something like this again. And so just on that basis, it seemed like it was a great idea. Like we had years of evidence. Were there other things you considered pivoting to, or was it just like, there's this thing, we're going to do it. I wish that I had better access to the proposals that I personally had written, because I had a whole bunch of fucking terrible, terrible ideas. And this was the one that had the broadest consensus among the team as being something that would be valuable. What's interesting at the time though, so we had $5 million left in the bank. None of our investors wanted their money back. They wanted us to just go try something else. Jason Horowitz is one of our investors, so we went down and did the partner meeting and kind of presented what our big idea was. And at that time, this is before we actually started development of Slack, but when we had this proto version, we said that one day this could be like a $100 million a year revenue business. So it could be valued at $1 billion on that basis. And we thought that that was like a decade out, and that would be the culmination. Like that would be, we have 100% of the TAM. And we went past that in year two, kind of blew past it. We'll do 200 million in gap revenue this year, and still be growing at a very fast rate. And now we think that number is more like 10 billion in revenue, like a $100 billion company. So we didn't realize how good of an idea it was. But it's also, there's an interesting story about deciding to shut it down. Because we still had money, because we had a relatively big user base who were very engaged, but we had a really, like a leaky bucket. It was very difficult to add new users to the game that we were working on, which was called Glitch. I felt very stuck in this position, because on the one hand, you have a narrative of good entrepreneurs are resilient. When everyone else thinks it's a bad idea, it's probably a really good idea. You have to dig in, prove people wrong, keep going, even when times are dark. And the other hand, there's a morning when I woke up, and I was just like, I can't do this anymore. I am the CEO, I'm the chairman of the board, I'm sure that this is not going to work. And it's actually hard to convince everyone else. I think that's one of the hardest things about evaluating ideas, is saying, well, this one's not going to work. So do you remember what it was about that morning when you woke up and said, you know what, it's time to move on? I don't, I mean, I think people have very little introspective access to their own cognitive processes to begin with, so anything I say would be kind of making it up, but I think it was, I had exhausted all of the ideas we had to fix the problems. So we focused on new user experience, and we really wanted to teach people what this was, and kind of what the possibilities were, and get them excited about it, because we were okay at attracting people onto the top of the funnel, but had a hard time retaining them. And- That's always when I tell people to give up an idea, when you're out of ideas about how to make it work. Yeah, exactly, so we would have an idea, we'd try it, didn't work, have another idea, and then at first you can fill up Post-it notes, like those giant boards, you can fill up whiteboards with ideas, and you argue about which ones are the highest value. And then one by one, you kind of eliminate them, months go by, a year goes by, another six months goes by, and it's like, shit, these are all of the ideas that we thought were the worst ones to begin with, and we only have three left, so this is probably not going to work. You mentioned at one point that you had a bunch of proposals. Mm-hm. How do you come up with ideas, or how did you even think that Slack is maybe this thing that is a really good idea? How do you come up with new ideas, and how do you evaluate them? Coming up with new ideas is easy. I just feel like it's hard almost to not come up with ideas. I mean, they're not necessarily good ideas, so the recognition of which ones are good is actually much harder. I recently finally got around to reading Thinking Fast and Slow, and there's this story there of a psychologist named Herbert Simon who was studying chess grandmasters, because chess grandmasters are one of a category of really experienced doctors who people regard as being kind of miraculous in their ability to intuit a situation, like glance at a board and say, white checkmate in three moves. And people thought that this was some super well-developed intuition, and Professor Simon argues that it's just recognition, in the same way that an 18-month-old can look at a dog and say, doggie, or within the first 500 milliseconds of someone speaking, you can tell if they're angry at you. You just develop the ability to recognize situations and cues which are hard to disambiguate, or they're hard to articulate and enumerate in your mind and say exactly why you think this way. But over time, you get better and better at doing it. And I've been making software professionally for about 20 years. So the specific micro-ideas or sub-ideas about feature implementation, or the order of actions in the user experience, or why there are certain features more important than another feature, those ones I feel like I have an intuitive sense, which is actually just the ability to recognize over time. So it's really a process of filtering, like you just have constant ideas, everyone has ideas. We at Slack have developed a lot of organizational design and practices to try to absorb as many as we can. So we get about somewhere between 10 and 20,000 tweets at us a month. And all of those are responded to by an actual human being. We get a similar number of customer support tickets. And we have processes for trying to filter up and abstract all of the feedback that we're getting. But even down to the level of all of the tweets at Slack, the company, are pumped into our Slack instance. And people check them, and they can add an emoji reaction, and that filters it to another channel for the ones that seem above some threshold of. This seems like a good idea, and it also seems practical. I could imagine that we could do it, and then there's some debate at that level. But, I mean, every, well, because almost every person I know in the technology industry also uses Slack. Every time I talk to any of them, they have ideas for me. I mean, they have complaints or proposals. So the big ideas, or the little ideas, I get the intuition on. What about the big idea? Did you spend a lot of time thinking, before you decided to go ahead with Slack, did you spend a lot of time thinking about this would be really strategically valuable, and there'd be a deep network effect? No, not at all. I mean, so we thought that this would be valuable for individual teams, and we could see that value demonstrated in our own experience. We definitely didn't see how applicable it would be, like how many, because right now we have 38,000 paid customers around the world. So that's a lot. And we have a sales team, but we've never talked to 90 plus percent of our customers, because we just couldn't talk to that many people. So again, this is already farther than I thought we would get at the very end. So we under-recognize it. But those big ideas are, I don't know, we talked briefly about this topic before. And one of my favorite lines is, I have a great idea for a novel. All I need is for someone to write it for me. Which is obviously preposterous, right? No one would really think, I mean, only a very deluded person would think that that's true. But people definitely have ideas for apps all the time. And those can be harder to assess. And it's so rare that I hear one where someone proposes an idea, where it's just like prima facie, that is a good idea. As opposed to, I don't know, I mean, it really depends on the execution. Like actually, just last night, I was watching something on YouTube, and the ad that came up before was for an app called MileIQ. And it's, you turn it on, ask for location permissions. And then every time you go on a car ride, it just looks, you know, see by the speed that you're traveling. And then at the point you stop, it stops it. So kind of like an automatic Strava, like it just records all your trips. And then you can swipe right to say that this is a trip that my company is supposed to reimburse me for, and swipe left, not. Anyway, it's a very simple idea. It's actually a really great idea, because people have trouble recording those. They have trouble in audits with the IRS to prove that they used the car for this purpose and stuff like that. And that's one that actually seems like, hm, the execution doesn't seem very difficult. I think that would be a good idea. If you could market it effectively, it would probably be a successful business. But like 95% of the ideas I hear, I have no idea why they would be successful. Where are you generally on the spectrum of ideas matter, and it's worth the effort to think of a good one. And it's just all about execution, and ideas don't matter at all. You just have to keep trying things until someday one of your internal tools turns into Slack. I don't know. So there's, I'm, there's a lot of people in this class, and then there's a lot of people at Stanford. And there's a lot of people in the South Bay, and there's a lot of people in the Bay Area. And many, many people want to start tech companies and all hope to be successful. So to a certain extent, there is like 100 million monkeys banging on typewriters, and someone's going to start a Shakespeare sonnet. So there is a little bit of that, like a little bit of survivorship bias and other cognitive biases that come into play. On the other hand, I don't think either end of the spectrum is right. I would definitely lean more towards execution. There's a good Steve Jobs elaboration of John Scully got hired and started hiring all these people at Apple who thought that only the ideas matter. The idea absolutely matters, but the idea when you start hitting execution has to accommodate so many things. So in Steve Jobs' case, it's about what it's possible to get glass to do, and how small you can make batteries, and what kind of tensile strength plastics have, and stuff like that, because your idea has to stand up to all these things, and it'll transmogrify and alter, and may even be unrecognizable at the end. But if you're really good at execution, then the core of the idea can make it through all those steps. So I absolutely favor absecution, but you can execute a lot on a terrible idea and then not get anywhere, so you kind of need both. If you were starting a new company today, you know, April of 2017, where would you look for ideas? What sorts of things would you be thinking about? I don't know if this works for other people, but I would definitely look at my own experiences as a consumer, generally. Because it's really easy to see things that are frustrating, very easy for me to see things that are frustrating. I complain about stuff a lot, like, especially given how good my life is, like, my life is really good. And yet, every time I have to fly somewhere, I have, you know, like, at least ten significant complaints and, like, 50 minor complaints. And every one of those is an opportunity, right? Like, every one of those things that don't go as well as you would like are opportunities for improvement. And some of those seem like someone else should see them. It should be really obvious. But they're often not. There's this story I tell in our internal onboarding process of me and our head of product design going for a walk in Vancouver. And our office in Vancouver is in a neighborhood that has really narrow sidewalks. The sidewalks have sandwich boards and vendors out, so it's very crowded. So you kind of wind around, and it starts raining while we're on this walk. And people are, maybe two-thirds of the people had umbrellas with them, and we didn't. And people are walking towards us on the sidewalk. And almost no one would move their umbrella out of the way so that the pokey things wouldn't get us in the eye. And like I said, the sidewalks are very narrow, so we had to keep on ducking. And I can come up with many explanations for why this would be, but don't explain with malice that which can be explained by ignorance. So it probably wasn't just that these people have few avenues for exercising power in their lives, and they were choosing this moment to exercise some power. But then there's only really two explanations. One is that they just walk through the world, and they don't see that we're going like this to get away from their umbrella, even though, inevitably, they've had that experience themselves. Or they see that this is happening, and they're like, I just can't think of anything I can do to ameliorate the situation. Despite the fact that it's this, it's tiny, like a hundredth of a calorie worth of effort, and a tiny amount of consideration. And the point of telling that story is that that's the way, and this is a sad way of looking at the world, but that's the way that most people go through the world. They're oblivious to the problems that other people have. And if they notice the problems, they're unable to come up with any kind of solution. So two-thirds of the people just didn't tilt their umbrellas, which means that if you're the kind of person who's willing to tilt your umbrella, there's a whole world of opportunity out there. Do you have any tips on how to notice that you should tilt your umbrella? Pay attention. I mean, that is the biggest thing. But pay attention especially to other people. So you can pay attention to your own signals, and maybe if you get practiced. This has actually worked in the Y Combinator history, when people have needed to come up with a new idea on the fly. It doesn't usually work, but when they really just commit to paying attention to other people and sort of what seems broken, that has worked. And then, so if you do this while you come up with thousands of ideas, anything you've noticed is a good way to filter those besides just building up the experience of seeing a lot and the recognition. Yeah, there is a kind of dialectic between execution and idea, because there's definitely something to be said when things are above some threshold of good, to sticking with the same idea. Not so much because that idea is the best one, but because the wild and erratic chasing of the next idea, when you have something that has a little bit of traction, can be really dangerous. Slack is a good example of that. We conceived of Slack as a tool for business. We developed it that way, we priced it that way, it was successful. But there's also this huge amount of social usage. Now, maybe a third of the Slack teams that get created are for some kind of social usage. And a lot of people had the idea that we should pursue that, like we should make Slack for groups, or even just pivot to being a consumer company, like kind of a private version of Twitter, or something like that. And we've been pretty steadfast in not doing that, because you can only do so many things well. And there's a lot of shiny objects like that that are very distracted. Are you the one that says no to most of those new ideas, or have you had to build that into the company? Like when something's going as well as Slack, there's so many new ideas. I'm chief no-sayer, but there's definitely a whole bunch of people who are equally committed to no. Great. We can probably take one question for Stuart if someone has a really good one before we let go. Only a really good one. Maybe that was so much pressure and I don't know what's going to happen. So you already had a successful company before Slack. I was wondering what's the differences between as a first-time founder and the second-time founder? What are the differences as a second-time founder? So every one of the external factors was much easier. So the first time, I mentioned that we ended up making Flickr because we couldn't raise any money, and we were desperate to try to finish something. Fast forward seven years, and we could raise as much money as we wanted. So that was easy, we didn't even make a deck. We just said we'd like some money, and then people gave us money. So a lot of those things were easier. So it's easier to get press, it's easier to get attention, easier to recruit, easier to raise money. It's not any easier to be successful, certainly, because we started the company that made Slack in 2009 and failed pretty hard for three and a half years, kind of pushing into the wind of something that wasn't ultimately going to work, and we could have just stopped there. It was great for our investors that we didn't recap and we just kept it the same company, and so that company has now been successful. But we could have also just walked away from that company and incorporated a new company, and then it would have been, my second company was a failure instead of my second company was a great pivot. I'm not sure which things get harder. I'm not sure that any do other than the degree of self-criticism and like awareness of your own limitations. Great, thank you very much. No problem. I appreciate you coming in. And now we'll have Adam talk about metrics. Great, so thanks for having me. I'm happy to be here. I'm going to talk about metrics and measurement and this whole group of issues that come up as you're trying to start a company. And one of the things I think is really interesting about this topic is that it's so much of what you have to do in a startup is specific to the startup. You're going to have to get to be an expert at some domain. You're going to have to get to be better than anyone else at that domain. And a lot of what it takes to do that is hard to teach in a class, because it's just different for every startup. But metrics is this domain that's kind of general, general enough to be useful to almost all startups. So I'm going to start off with this example. So this is the first version of Amazon.com from the early 90s. And I really like looking at these. You can look at the first versions of lots of different products. It's a good reminder that it's much easier to get these things started than you'd think, even these companies that are massive today. If you just go and look at how they started, this is just a good way to keep yourself in touch with the reality of how companies get started. So, does anyone know why Amazon decided to start with books? Yeah. Choice. It's a choice. Yeah, yeah, yeah. So that's actually, I think what you mean is that you have a lot of, you get to choose from a lot of different books. Yeah, yeah, so it wasn't just that they chose books. It was that, it was books give you, so Jeff Bezos wanted to start a store. And one of the most important things when you're getting started is differentiation. So you don't have to make a product that's going to appeal to everyone immediately, but you need to make a product that is going to appeal to some people more than anything else. So you want to find some way to differentiate. And usually you want to do that by doing something that's going to be easy for you, but that's really hard for all the existing companies. And the Internet enabled this in Amazon's case, because brick and mortar stores have limited space to hold their inventory. And so, you realize that on the Internet, you can have a big warehouse somewhere. You can have items shipped from all over. And this is something that enables you to offer a much wider selection than a normal store. So then you go and run through the thought experiment, and you say, well, if what we can do is provide better selection, then which category, what kind of store is going to benefit the most from a greater selection? And it turns out that books is a category where you have the most, there are more books than there are other products, right? So if you look at movies, it's very expensive to make a movie. That's not an industry that would benefit immediately from the Internet in the way that books would. So I think there's this general point here that measurement can turn a vague idea into a good idea. And if you do a lot of these kind of back of the envelope calculations, that can really help sharpen your ideas. And it can help you iterate and move through the space of ideas a lot faster than if you have to go and build a prototype. You can imagine, what if Amazon started, and they started focused on movies, and after a few years, they realized that it wasn't working that well. Then they're set back by a few years, now there's competition. These kind of metrics, even in the realm of ideas, can really help you get started. And the one other thing I'd say about this is that I think using measurement here is very good for helping you figure out what products are going to be possible, or where you're going to be able to provide a lot of value to a user. I actually don't think metrics work that well for stuff like market size. So you just saw this example that Stewart, they thought that the market size for chat was 100 million a year. In revenue, it turns out to be 100 times bigger. It's just very hard to figure those things out. And I wouldn't spend a lot of time on that. I think you want to know that whatever you're doing, someday there's some path for it to eventually get really big. But you want to really apply your metrics to how can you differentiate your product, and what's going to be possible that wasn't previously possible. So, okay, so next, so now you're building your product. And what should you measure? Just any guesses, if you guys have products, what are you measuring? What would you recommend? Yeah. The amount of users. The amount of users, yeah. Yeah, so what exactly would you mean when you say that? I guess you're talking about how many people use a total, and how often people use it. Yeah, yeah, so how many people use a total, and how often they use it. And, go ahead. I think whether or not people share it, whether it's viral, people share it with the company. Yeah, like whether it's growing, or whether they decide that it would grow. Yeah. Yeah. Total addressable market, like when you're getting started. Total addressable market, yep. User retention. Yeah, user retention. So these are all great ideas, and there's lots of things that you can measure. As a startup, you really need to focus. So the core concept I would try to focus on is users that are getting value today. So there's different ways to, different indicators of this. You might say you want to focus on active users. You might, people are going to be active if they're getting value. You might want to focus on revenue. That's a sign that people are getting value. In the case of a marketplace, where you have things like buyers and sellers, that's usually a case where it makes sense to measure transactions. Any time you have these different groups, if you set up, if you say, okay, we're going to measure buyers, and then we're going to measure sellers. And there's actually a lot of stuff you can do that will make things better for the buyers and worse for the sellers. And some of those things are good. And so measuring transactions is a way to unify them and align your work on things that are going to benefit both sides. So if you have a two-sided market or anything like that, then you want to measure transactions or transaction value. So things like eBay, they'll measure total value of all the goods that are sold on eBay. So to start, this is kind of a quick thing. And you go a long way just by measuring this. If you're not measuring anything, you're susceptible to all these cognitive biases that Stuart talked about. There's all kinds of problems. You're just not going to know what's going on. So next most important thing to think about is retention. So first, I want to make sure everyone understands what a cohort is. So a cohort is all the users who first used your product in a certain time window. So for a startup, you might make the time window a week. So you can say there's a cohort of all the users who first used your product in the first week that it launched. And you can track those users over time. There's a cohort of all the users that first used the product a week later. And you measure all these cohorts and you can track them. And this tells you what's happening to users over time. And this is an important, it's a really important way to balance. You're just measuring the total value that all the users are getting. So this is a graph of total of cohort usage for a sort of relatively old Internet product. So the blue line is users who joined this product in 2004. And that's, and so you can see, and so the y-axis here is what percent of them are still using it. And the x-axis is time. So over time, if you just follow the blue line, you can see basically every month, there's fewer and fewer people that joined the product in 2004 that are still using it. And this is basically the same story for all these different cohort lines. So what do you think is going to happen to this product in ten, this is about, let's say this is about six years, the scale of this graph. What do you think is going to happen in six years later? Any guesses? Yeah. It's going to turn around. Yeah. Yeah, I think something different would have to happen to change that. No one will be using it, yeah. So this is, it's hard to know what would happen. I think probably everyone's going to stop using the product. Some companies will manage to turn these around, but it's very hard to, because you get fewer and fewer. You get less and less usage from your old users. It's also usually the old users are what cause you to get new users. And so if you have this problem, it's pretty bad. So this is a pretty scary place to be. Even if you can have a ton of users, you can have total usage growing. But if usage from every cohort is declining, then you're going to run into big problems. So there's this idea called the ring of fire, which is a way to kind of visualize this. So unless there's some kind of lower bound, you're going to burn out all your users. And so here's the analogy. Imagine there's a big field of, let's say, of dead grass. And someone lights a match in the middle. You're going to get a fire, and the fire's going to grow and grow. But then in the middle of the fire, you're going to start to run out of fuel, and it's going to burn out. And so you get this ring, and the ring is going to get bigger and bigger. And in the center, you're going to burn out more and more of the fuel. And so the fire will get bigger and bigger, but eventually you're going to run out of the whole field, and the fire's going to stop. And so you don't want this to happen. Here's an animation I made to try to illustrate this. So here's what you notice. So it looks great at first. There's more every frame than the previous frame, but in the end, there's nothing, right? So, you don't want this to happen. And it's really important to internalize this concept, because if you don't, you can fool yourself. You can do a lot of things that are going to cause you to get more and more usage over time, but at the expense of the existing users. And if you don't do this, eventually your company is going to die. I think some recent examples are, I think Groupon was a good example of this. They got huge tons of usage, all these merchants, but it wasn't a good experience for the merchants in the long term, and so they all stopped using it. And then, I think more recently, Pokemon Go is another example, got really big, lots of users, but it just kind of faded away. And so, you don't want to build a fad, you want to build something that's going to last. And so, you need to make sure that you're measuring the usage from the existing users, it's not just that you're getting more users. So, you need to make sure the existing users keep using the product. Actually, if this can go in reverse, you're in an extremely powerful position. So, there's a small number of products where the cohort usage actually will increase over time. One example is WhatsApp. This is, I think, most messaging apps. As you get more of your friends on the app, there's more people to send messages to. And so, they're able to get this increase in cohort usage over time. Uber on the rider side, this is another good example. As people start to get used to Uber, they use it more. As the pickup times come down, they use it more. As prices come down, they use it more. And so, Uber's in a really strong position there. It's not true, actually, on the driver side. So, Uber has problems on the driver side because they don't have this property there. And then, Facebook, you can see in the numbers they report publicly. Their total usage is growing faster than their number of users. So, you know that they must have this increasing usage per user over time. So, if you can get to this, this is very hard to get to this. But if you can get to this point, then you're in a really strong position. And one way to actually think about an idea is whether, as the product gets bigger, as you get more users, as you develop the market, is it the kind of product where people would use it more over time? I think that's another kind of lens you can apply as you're considering ideas. Just one more data point. This venture capitalist named Tom Tungas did a study on what predicts valuations that startups raise money at. And it's just a simple correlation study. And these are some different factors in how much they correlate to the valuation that a startup's going to get. First is growth of revenue, and that's 0.18 correlation. Second is just how much revenue they have in total. That actually correlates a little bit more strongly than growth. But by far the strongest correlation is account expansion, which means people spending more over time. It's the same thing as retention increasing over time. So, and this correlation is extremely strong. So for a complex number like what the valuation of a company is going to be, the fact that you can explain 0.54 out of one of the variation in that number by the single variable about whether the company is increasing revenue per user over time, that's a sign that it's almost like this is like there's just two classes of companies, one class where there's increasing revenue over time and another class that gets totally different valuations where this is not happening. So the main thing I just want you to remember from today is you should measure your retention. That's going to lead you to do a lot of things that will help you in all kinds of ways, it's going to help you grow, it's going to help you retain your users, it's going to help you build a product that users really love. So next I just want to talk about exponential growth. So retention is the most important thing, but it's not sufficient. You need to have a product that's going to retain your users, but that's not necessarily enough to make sure that you're going to be able to build a big product and reach everyone. You also need to make sure that you're going to grow. And by far the most powerful way to grow is through exponential growth. This is just a few functions plotted. The red line is linear growth, and blue line is, I think it's cubic growth, and then the green line is exponential growth. And the linear growth path, you can do this through things like continually doing PR, you can get more and more users. But eventually, there's a limit to how big you're going to be able to get. It gets expensive to run advertising, it gets expensive to do these kinds of things that attract a fixed number of users. But if you can do things that cause you to get users in proportion to the number of users you already have, then that's going to get you to exponential growth. So there are other places to learn about what to do to grow faster, but as you're measuring your growth, you want to make sure that the way you measure it is aligned with what you want. And if what you want is exponential growth, then what you need to measure is the rate of growth. So a good way to measure this is just the percent increase per week in how much usage you have, or how much revenue you have. This is a tweet from Paul Graham that I especially agreed with. He said that a suggestion for really tough founders is instead of graphing your revenue, graph the percent growth per week. I don't actually know why he said that this is for really tough founders. I actually think this is what's going to make you really tough if you measure this. I think the causality can go the other way. So this is a very important thing to measure. The reason he says you need to be tough is that it's going to be hard to keep up exponential growth, and it's going to be hard to, it might not feel good to just see this line that doesn't increase, but you can also measure your total revenue. There's no problem with doing that, but just make sure that you're measuring the percent growth per week. Because a lot of the time, there's going to be things you can do that don't cause exponential growth that would actually help you maybe more in the short term. And you want to focus on the stuff that's going to cause the product to grow in the short term and in the long term, which is basically things like viral growth, getting users to invite more of their friends, getting word of mouth spreading, getting some kind of dynamic where the bigger your product gets, the easier it is to attract the next user to it. So next I want to talk about iteration. So one of the most important things, one of the most important advantages you have as a startup is that you can iterate faster than a big company. There's all kinds of things that cause it to be hard for companies to change direction, and you just don't have these forces when you're a small company. And so if you can iterate much, much faster than other companies, then you can go through ideas faster, you can go through changes to your product faster, you can go through changes to improve retention faster, you can go through changes to increase growth faster. It's going to add up to a really, really strong position. So, but at the same time, you have to be iterating in the right direction. And so one of the reasons metrics, even just simple metrics are so important is that they let you know whether you're going in the right direction. They let you know whether what you're doing is working, and they let you, out of all these different ways you could go, they kind of help you stay aligned. One other point I want to make, I think this isn't mentioned too often, but you can measure how fast you're iterating. And you can measure all these components of iteration. So whether it's fully quantified or not, you should have in your head, how long did this cycle take us, and what can we do to make the next cycle faster? At Quora, one of the metrics we track is how long does it take from an engineer hitting commit on their code to us being able to run the unit test and get that code out into production. And we try to keep that between ten and 15 minutes from a change in the code base to it being totally out to all the users, because that allows people to iterate just much, much faster. And if we didn't track that metric, there's just a lot of forces that naturally would cause that to get slower. I think a lot of companies end up, they'll maybe start out like that, then they end up releasing daily, or they go to weekly, or even monthly. I've heard of teams that are on every three months they do a release. And you just imagine, how could you possibly iterate if your releases are only going monthly, or even weekly? So next, there's a spectrum of how seriously to take metrics. That I think, I see a lot of companies stumble on. So on the one hand, there's not taking your metrics seriously enough. And this might mean things like, you don't have metrics. Might mean that you have metrics, they're on some page, but no one ever looks at that. It might mean that you have metrics, and one person in the company looks at it, but no one else looks at it. And the issues that happen on this end of the spectrum are, you can fool yourself, you go around in circles, you just lose sense of what the right things to do are. But then there's another end of the spectrum, where you can actually take metrics too seriously. So you've got to remember that metrics are an abstraction. There's what you're actually trying, what you actually care about underneath is, let's say the value to the users, and maybe the long term value to the users. And so, a good metric will be strongly correlated with that, but it won't be perfect. And so you don't want to forget that there's a reality under the metric that's not exactly the metric itself. And so, if you focus too much on the metrics, then you start to get into things like, there's these ways to game the metrics, and we can make the metrics go up. But actually, we're doing some things that are going to hurt us long term, and those things are going to outweigh the short term benefits. So, I would really make sure to be careful about that. I'd say, personally, I think the ideal is to be somewhere in the middle, and I'd say you want to be very close to taking the metrics extremely seriously. Not too seriously, but I think most companies bias toward not being serious enough about their metrics. If you're in the middle, in the right spot, then you're learning, you're making good decisions, and you're informed, but you're not. But you're still aware that there is a product underneath, and there is a strategy, and there's more to the world than just these metrics. I see, a lot of times, companies will oscillate between these. They'll say, they'll get really focused on metrics, and then that causes them to do some things that they think are bad. And then they're, well, these metrics are terrible, and we're going to throw away our metrics and not focus on them at all. And then you get into this world where you don't actually know what you're doing, and there's no accountability, and so this oscillation is not very productive. You want to just make sure you find the right point and try to stick there. So finally, I want to just talk about some of these psychological aspects that come with metrics. I think one of the big things that comes when you start measuring things is you just get closer to being in touch with reality. And that can be painful, because sometimes the metrics are going to be worse than you thought they were. Sometimes, actually, they can be better than you thought, and that's great, and everyone feels great. But a lot of times, if you weren't measuring something, chances are you weren't even aware of it. It was hard for you to make it good, and so it won't be good. And so that means that as you set up metrics, there's going to be some pain, and that can cause problems for companies. I even think at the leadership level, this can get even worse. I think, actually, I think the majority of leaders out there in the world rely on some amount of delusion they're creating among their followers to get them excited, to have them working on this project in the first place. And metrics can get in the way of that. And so people get into this, then you get into this question of, okay, well, what should you do as a leader? And this is where I come out after thinking about this for a long time. I think you want to be learning from the past, so you want everyone fully aware of what has happened, what has worked, what has not worked. You want to be totally in touch with the reality of where you are today. So if things are good, you should know they're good. If things are not good, you should know they're not good. You should know exactly where there are problems and where there are not problems. But then, those things are not in tension with being optimistic about the future. You should be optimistic about the future because there's so much potential. And the reason you're doing a startup is because of this potential. And if you don't feel confident that the path you're on is able to get you to a place that you feel optimistic about, then that's a good sign. You might want to change the path. And you should do something about that, because that's totally within your control. So there's not really a tension between acknowledging that things are not in a great spot and having people not be optimistic about the future. So as long as you just make sure that the reality is that, and I don't think you should make people optimistic about the future in a way that you don't believe, I think you should do the things you need to do to get yourself to be confident and optimistic about the future. And then it's easy to get people to follow through that. So that's all I have, and happy to take questions. He runs a question and answer site, it's easy to ask him questions. Thank you very much, Adam. All right, see you all on Thursday."
  },
  {
    "name_video": "How to Start a Startup: Finding Product-Market Fit ",
    "description_video": "Peter Reinhardt, Co-founder and CEO of Segment (YC S11), draws from his experience to shed some light on finding product-market fit and how much it is tied to solving real problems. From YC's Startup School in 2017.",
    "related_categories": [
      "Customers",
      "Product Market Fit"
    ],
    "page_url": "/library/86-how-to-start-a-startup-finding-product-market-fit",
    "youtube_url": "https://youtube.com/watch?v=_6pl5GG8RQ4",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Finding_Product-Market_Fit_.mp3",
    "mp3_content": "Today, we have Peter Reinhart. He's the CEO of Segment, went through YC when? 2011. 2011. And now, Segment is doing extremely well. Peter is going to talk about product market fit. Sort of this magic concept, word people use, I don't think they really understand it. Certainly the first job to get right in any startup. Peter, thank you very much for coming to talk to us, and look forward to hearing this. My pleasure. All right, so I'm going to talk about finding product market fit today. Segment is a B2B company, so that's probably why none of you have ever heard of us. But just to give you a little sense, we're about 150 people and grew from about four people three and a half years ago. So growing quickly, and hopefully I can shed some light on finding product market fit for you. And I thought, just start by sort of looking back to Alan Kay's lecture last week, I think he had some pretty incredible advice around how to do really amazing research by sort of looking into the future and imagining what that future might be like. And in particular, he had this diagram of sort of exploring the pink plane and sort of testing out different ideas there. And then at some point, having a breakthrough and realizing that, actually there's a blue plane, right? And you can sort of go explore an entirely new space. And that that's like a key breakthrough for sort of understanding how you can really invent that future. And in particular, he had this idea of sort of going into the future and imagining yourself there. So he had this Wayne Gretzky idea of skating to where the puck should be or will be. And sort of going there, grabbing that future, and then pulling it back to the present. And the way that he talks about doing this is, I think, amazing for research. He talks about basically going and sort of imagining that future world. But I'd actually wager that not a single successful company has actually been founded by doing that. I think that's, again, awesome for research. But when it comes to founding companies, it actually has nothing to do with sort of imagining your vision for the future and what that future could be. It's not about sort of how you wish the world was, but it's actually about what customers want. And I think a lot of companies get marketed post facto of like, hey, we had this great idea, and here's how we deductively logicked out what customers we're going to want, and then we built the thing. But in reality, that's not how it works at all, right? In reality, it's a very inductive process. You're going back and forth with customers, and you eventually find something that works. And so I wanted to talk a little bit about that process today, and just how critical it is, and actually how difficult it is, too. So one of the most common mistakes that startups make is to build something that no one wants, right, or solve problems that no one has. And so that Wayne Gretzky method for sort of going into the future and imagining what that future might look like, again, is a good idea for research. It might even be a good idea for venture capitalists to sort of imagine what the future is like, and sort of put startups into different buckets of what building that future might look like. But I actually think it's a really bad strategy for founders. And the reason is that most founders can actually pretty easily build something that looks like it's from the future, or is from the future, to some extent. Like, it's easy to solve the technology problem there. But it's actually really difficult, that's not really what you need to do, right? You don't need to build something that is your vision of the future, you actually need to solve a specific problem that customers have today, here, now, and most startups actually fail to do that. Most startups actually build something that looks vaguely futuristic, but is not, in fact, a real problem that people have today. And it will kill the company every time, right? The market always wins. So we're going to dig into that a little bit more. And this sort of problem of finding product market fit, stat 80%, 80% of all founders fail to find product market fit. So four out of five attempts to find a company just fail at the sort of earliest stage of even finding a problem that you can solve in a unique way. And the last one out of five are going to sort of struggle through the remainder of actually building that company up from there. But that's just the stats. I'll share our own story of finding product market fit, but the short version is that it actually feels, when you're not finding product market fit, it feels like sort of a bottomless emotional free fall. Not to get too dark, but when you're failing to find it, it sort of becomes a strange obsession. And it could really make you sick, actually. To get a little bit too personal for a second, in 2012, in the midst of our search for product market fit, I lost ten pounds in three weeks, and then went to the hospital twice for panic attacks. I haven't had a panic attack before or since then. And I think, it's not just me, actually. I think Sam, I don't know if I should share this or not, but when he was founding Looped, I think he basically forgot to eat properly and ended up with scurvy, if I remember correctly. Sam's back there somewhere. So basically, be warned, finding product market fit is very emotionally a grind. And the reason it is, is that you really, really desperately want to find that fit. You really want to figure out what is going to work. What is something that customers want? We're all wired to want to succeed and help people like that. And so you're so intent on finding this thing, that you sort of convince yourself into seeing mirages of it. And basically, you convince yourself, this is the thing, we're almost there. It's like, this is something that people really want. And so this is a picture of myself with my three co-founders, Ilya, Calvin, and Ian, in the summer of 2012, I think. And this is in the midst of sort of our deepest false hopes that we had found something. So we'll dive into that story. And obviously, I'm here today because it worked out. I wouldn't be speaking if we had just disappeared into the darkness. But yeah, today we're about 150 people and growing rapidly. Yeah? How can you make sure you're finding a big market and not just a small niche that will not grow? Yeah, that's a good question. So I think PG's advice on this is good and valid, which is that it's actually harder to find the first problem and solve any problem well than it is to find a route out. So finding a route out from some initial foothold into a broad market is actually not that hard. Sounds hard, but once you find any foothold, you can pretty much find something. And I can cover that a little bit in a bit, but yeah. Is that because you have more leverage? Because the customer? Yeah, it turns out that once you solve a problem for a customer, they'll keep bringing you more problems, right? The most efficient thing for them to do is just say, well, I have this other problem that's also adjacent to it. Can you solve that? You're like, sure, let me solve that. And you just keep solving adjacent problems. So once you find one thing, it's actually almost trivial to find the next thing, and the next thing, and the next thing. Especially in a selling to other businesses, where you have someone who can just tell you more stuff. Much harder in consumer. I'm the wrong guy to talk to about consumer stuff. I don't get it. Cool, but back then, we were just four dudes in an apartment. We were failing to find product market fit. We were convincing ourselves that maybe we had it, or we were on the cusp of it. And we were writing a lot of code. I saw someone back there was writing code earlier. We were writing a lot of code, and we had no customers. That's the wrong order of operations, and so we were tricking ourselves into this. And in reality, the good thing that was going on here, the reality was that we were a bunch of cockroaches. And the reason is that it's very important, pre-product market fit, to basically save as much cash as possible, spend as little as possible, and extend your runway as long as possible. So a lot of founders make a mistake of spending a bunch on sales, or marketing, or other things as soon as they have an idea. But in reality, until you find product market fit, until you find something that people want, you shouldn't be spending any time on that. You should just be spending time talking with customers and iterating. And you really want to constrain your runway, or constrain your burn so that you can have a really long runway. So that's what we did. We kept our burn really low. I think we paid ourselves the minimum allowable amount by law, which was like 20 or 30K a year. We lived in our apartment slash office, and the company paid for part of it as an office, so it was the minimal thing. And we stretched out our runway through as many ideas as we could. And so to sort of make this process a little bit more explicit, step one is that you build, launch, and sort of iterate on several different ideas. And this is where it's really important to be a cockroach, where you're sort of conserving everything you have. Then suddenly something magical happens, we'll talk about that. And this is product market fit, and it really does feel magical. Hopefully I can illustrate to you and help you feel that. And then three, product market fit sort of suddenly turns you into a unicorn slash cockroach. And rather than just surviving after product market fit, everything gets suddenly easier, not easy, but easier. Customers show up and buy your thing, people want to join your team. You're still pushing the boulder uphill, if you will, but you're not totally constrained on progress, right? You can actually feel forward momentum for the first time. It's not like one step forward with a product idea, full step back when a customer doesn't care. You actually can keep iterating on a product that's starting to work. So let's take that middle portion and let's deconstruct it a little bit. So first, we're going to deconstruct what we call category leaders. So these are really large companies that have been very successful. And then we'll get to sort of the heart of why product market fit is so important at the very beginning. And then we'll talk about what bad fit feels like, bad product market fit. And then we'll talk about what good product market fit feels like. And we'll try to do that through stories, because the goal here is for you to walk away and be able to more easily identify which is which with your own ideas. So category leaders. The reason we care about category leaders is that they're much, much larger than basically the rest of the companies out there. So I'll give you an example. Amazon and Facebook are sort of consumer companies that you might be familiar with. Salesforce is a company that sells to other businesses. They provide sales software, basically. And the reason that we're interested in them is that they're huge, right? They're often ten or a thousand times larger than the next competitor in the space. So Salesforce, for example, you have probably heard of. Sugar, CRM, and Zoho are probably companies you've never heard of. They all do roughly the same thing. And so we want to dig into how can you build a category leader? What's the layer underneath that? And basically what it comes down to is building a platform. Where it's not just a product that you're selling, but where the data inside of your product is actually useful for other businesses to build their business on top of yours. And that's what Salesforce has done, that's what Amazon has done, that's what Facebook has done. And so if you look at Salesforce, they have something called the App Exchange. And the App Exchange sort of reveals all the data inside of Salesforce and allows other companies to build marketing and sales products on top of that. Similarly, Amazon has the reseller program, right? Where now there's tons of other businesses built on top of Amazon. And so the key here is having some sort of platform. Eventually, when you get to scale, having some sort of platform that other companies are building on, selling, and by nature, that pulls people into your ecosystem. But how do you build a platform like that? I know Peter Thiel may not be the most popular right now, but his opinion is that to build a sustainable and compelling platform, you really need to get to 100 million in revenue. And the reason is just that you need to be at a scale where someone actually can capture a couple percentage points of your customer base and build a real business themselves, right? So if they can capture a couple percentage points, say 2 to 3 million in revenue, that's a real business. You can build something on top of that. So to sequence our way here, you want to build a category leader. To do that, you need a platform. To do that, you need 100 million in revenue. So let's keep digging. 100 million in revenue is tough, right? So let's keep digging down. I think you met Jason Lemkin a couple weeks ago, am I right? Or maybe he's coming soon. He's written some amazing stuff about building software as a service businesses. I would highly recommend reading all his answers on Quora. And he basically breaks down the path to 100 million in revenue in sort of three different steps. He says, 0 to 1 million is impossible. 1 to 10 million is improbable, and 10 to 100 is inevitable. And he says that 10 to 100 is inevitable because at that point, there's just so much momentum. You have customers out there who are singing your praises. They're buying, their companies are going to buy more. And it might take you a while, but eventually you're going to get from 10 to 100. 1 to 10 million, I think, is basically always a brutal grind for the founders. And the reason is that you're running a real business. You have real customers, you have some scale. Your customers have reasonable demands about sort of how the quality of service that they expect from the product. But the problem is that pre-10 million in revenue, you have a really tough time attracting a world class management team. You can't hire a great exec team yet because the large enough market isn't there. And so what you have is basically all the early crew sort of like holding the ship together and trying to make sure that it's going to work. So that's a very tough period, I think, for most founders to scale through. And then 0 to 1 million is impossible because this is finding product market fit. And 80% or more of people fail at that first step. And so the question is, how can you become not, and how can you actually make it through that impossible section and become one of the ones that succeeds? And one of the things that people talk about as investors or founders is how important it is to learn from failure. And I recently read a pretty good study talking about the stats of sort of actual analysis of failure and success in startups and finding product market fit. And basically the research shows that you're actually no more likely to succeed the second time around if you fail the first time. So if you fail in finding product market fit the first time, your odds of success are still 20 or 22% the second time around. But if you succeed in finding product market fit, the chances of your success the second time around go from 22% to 34%, which is still miserable, but is at least 50% better. And so what I think that means is that there's actually not that much information encoded in failing to find product market fit. Like you don't actually learn that much. But there's actually quite a bit encoded in feeling the success of actually understanding what did work. And so when we were struggling to find product market fit in 2011 and 2012, I felt this really acutely. Like we had failed multiple times at this point. But I still didn't feel like I really knew what I was looking for, right? Like what is this mystical product market fit thing? So frustrating. And we kept seeing glimmers of hope. We kept convincing ourselves that this, that, or the other thing was like a visitor chatting with us on our site or whatever was a big deal. Or vaguely interested sales prospect was product market fit. And so without any positive product market fit examples, we didn't really know what it looked like. And so we could sort of convince ourselves of everything. And the way I think about it now is I really desperately, if you imagine like a machine learning model, I had a bunch of negative training set examples. And I had no positive training set examples. And so of course, my machine learning algorithm was like, I don't know. And so I'm now going to walk through three stories where I'm going to show you two examples of failure, actually five-ish stories. Two examples of failure, and then three examples on the positive side of times that we actually did feel product market fit. And again, my goal is for you to actually feel what this feels like, so that you can identify it in your own product. So today's segment is a customer data platform, but we actually started as an education tool. And it was actually designed exactly for lectures like this. So this is us coding in our Mountain View apartment in the summer of 2011. And the idea was that as a professor standing up talking to a class, you have no idea if anyone in the audience actually understands what you're saying. And so we were students at the time at MIT in Rhode Island School of Design. And we said, what we really want to do is give students a button to push, where they can say, I'm confused, right? Or I get it, either one. And the professor would see this graph over time of how confused the students were. Might be helpful to me right now. And so we built this. We wrote hundreds of thousands of lines of code. We had commenting and notes and all sorts of crazy stuff. And we actually came to Stanford's campus. We convinced, I may have even been in this hall. Convinced some professors. We would run up to them after class. This is a picture from Berkeley. We pounced on this professor right after class. And we were testing for product market fit, right? We were trying to convince, hey, professor, did you get any feedback from your class during this class? No. Okay, well, we have a solution for you. So we were hustling to try to get people to actually use this tool. But we were mostly sort of ignoring any test of real product market fit there. And so professors would agree to test it out for a few lectures sort of out of pity maybe for some students from MIT who were trying to help. And so basically we thought that this was product market fit, but it really wasn't. And I'll show you why. Because if you stand in the back of the classroom and look at what people actually had on their screens, none of them were using the product, right? Like people were using all these different things. This is that same class at Berkeley the next day. next week, by the way, it was horrifying. And basically, as soon as students opened their laptops, they all went and did other things. And so basically, putting a laptop into the classroom was the most distracting thing you could conceivably do. So as you can imagine, this was pretty horrifying. One of the more embarrassing things that could have happened to us. We had just raised 600K coming out of Y Combinator Demo Day. And we had sold this vision of this is how the future of classrooms is going to work, right, it's going to be digital, it's going to be online, much as this is a MOOC, etc. And it was a great vision, but again, the market wins every time. It doesn't matter what your vision is, it matters what the market actually wants. And in this case, the students didn't care, right? The students didn't actually get that much value out of using the tool. And actually, if you go back, we should have had an even earlier warning sign, which is that the professors didn't really want to use the tool either, right? When you go and talk to the professors, they would sort of out of pity agree to test it for a few lectures. But that is not the same thing as product market fit, where they're like, holy crap, that solves this problem that I have. And so sort of bullying customers into using your product is not anything close to product market fit, even if they sort of reticently agree to do it. And I think being dismissive of users and having your clear vision of the future that isn't necessarily solving a problem for your customers is a pretty stunning failure on our part. And is like a key thing that founders do again and again and again in their sort of search for product market fit. So then we had to do the awkward thing, which by the way is the right thing, of calling back all the investors and saying, this was like four weeks after they'd signed the checks, right? By the way, it turns out this is a terrible idea, we're going to do something else, do you want your money back? And in most of these cases, the investors did take, or sorry, did not take their money back, they said we invested for the team. Like go find another idea, we believe in you guys, go find something else. So we said, okay, let's do it. And we were all committed, very committed to working together as a team of four founders. So we shut down the lecture tool, we went and sort of shut down all the classrooms, and then we went back to the whiteboard. And we said, what is something that is sort of interesting here? And we had always felt like we should have been able to determine that we didn't have product market fit, that the product usage wasn't there from our actual data. The way that we actually figured this out, right, was we went and we stood in the classroom, back where Sam is, and looked at what was on all the laptop screens. And that was how we figured out whether we had product market fit or not. But we should have been able to do that with the data. We should have been able to just look at the analytics and figure out, not only are people using it or not, but are anthropology classes using it different than computer science classes? And so we decided to build basically an analytics tool, which it turns out is a bad idea, in case anyone was considering that. And so the way that we approach this is, how many of you have read the book Lean Startup? Wow, that's actually awesome. You all are way far ahead. So as Lean Startup talks about, you want to get out of the building and actually talk to customers, right? So we read that right around this moment, and we were like, okay, we're going to go out and talk to customers. So we did that. And we tried to validate our idea. So we'd take people out for coffee, and we'd pull people from companies and sort of try to figure out if they were interested in analytics products. And I'd say again and again, they were vaguely interested, right? And they had willingness to meet and chat with us, and they said they wanted product updates as things came out. And so we thought, this must be it, right? This must be product market fit, where people are interested in what we're doing. Again, this is not product market fit. This is idle interest. Very, very big difference. And so based on this sort of idle interest, we got very excited, and we spent about the next six months just writing code. So now this is in a new office. That's my co-founder Calvin and Ilya. As you can see, there's lots of code on our screen. Again, wrong order of operations. And I had gone on one sort of sales trip to visit potential customers. And they were all pretty happy with Mixpanel and Google Analytics, but they had these sort of edge case features that they were hoping that we could solve. And so I sort of tricked myself into believing that these little edge cases that we might be able to solve were actually a really wide gap that we could fill as a product. And so I came back, and I would sort of pitch my co-founders, and we would keep sort of believing that we were almost there. If we just ship one more feature, one more thing, we're going to get to product market fit. Again, bad idea. Give you another one. We used lots of little positive interactions like this. You can also read this not as a positive interaction, but every once in a while, some stray person would visit our website, and they'd open a chat. This is idle interest. Hey, what segment? And this is a complete transcript of that website chat. You can see it's 3 AM, so we're up late coding. And this person is interested, so maybe this is product market fit. Again, this is not what it looks like. This is just idle interest. So it's now December 2012. We've been at this for about a year and a half, and we decided that something was wrong, right? Like clearly this was not working. And so we went back to YC, we emailed Paul Graham, and we said, hey, we think we should catch up and sort of explain what's happened over the last year and a half, like okay, great. So we go, this is us in front of the old YC building, and we're walking around the little cul-de-sac by YC on Pioneer Way. We bring them up to speed, like okay, we've spent half a million dollars, like here's everything we've sort of been through over the last couple years. And as we're walking around, he comes to a stop, and he looks at us, and he says, so just to be clear, you've spent half a million dollars, and you have nothing to show for it. Totally accurate, and super fair, and sort of like shocked us into like, shit, yeah, we've got to do something. And so that was the moment where we realized we had hit rock bottom. But we still had 100K left, so we still got one more shot, right? All right, so that was all the product market failure cases, now you're going to see some successes. But let's rewind. Let's go all the way back to the first week of YC, and in that first week, we had been like, well, we have this classroom lecture tool, and we should have analytics on it, right? So we looked at the different analytics tools, Kismetrics, Google Analytics, Mixpanel, and we were looking at what's similar here. And we saw basically they have different graphs and different APIs, but it's actually the same data going into all these tools, it's just they give you different stuff out the other end. And we were like, well, we don't really want to make a business decision here about which tool we want to use. So we'll just solve the engineering problem, because we're engineers, and we'll just build some code that sends data to all three, and does this automatic translation. So we put one data point in, it gets translated into three API calls that go out to all three services. Cool, this was like 100 lines of code in the hundreds of thousands that we wrote. Set that aside. Then about four months later, it gets improved a little bit. Four months later, it gets improved a little bit. At that point, we are trying to sell our own analytics tool, right? Akin to Mixpanel and Google Analytics. And we keep encountering this sales objection when we're trying to sell it. Which is, I already have Mixpanel installed, I don't really want to install your tool, it seems like a lot of work. So my co-founder, Ilya, has this great idea. He says, what if we take that little library we wrote a year ago that we've totally forgotten about, and we add ourselves as the fourth service that it can send data to. And then every time someone hits us with that objection, we hit them back with the open source library. And we say, okay, great, now you can try both in parallel. And we use it as a growth hack, basically, to get customers to start adopting our tool. Okay, great, we start doing that. Start sending it out. People start replying, this is awesome, I love the library. I'm definitely going to use it. A few weeks later, we follow up. Hey, we saw you're still not sending any data to segment.io, what's going on? And they're like, well, the library is fantastic. We just don't really want to use your analytics service. We should have taken note right then. But a few months go by, people start starring this on GitHub. Maybe gets up to, it was a big deal for us at the time, like 30 stars. And I think maybe there was one pull request issued. And then fast forward some more, people keep sort of paying attention. It's the first time we'd ever felt like pull. Like people were just finding this thing and doing something with it. And so fast forward, we have this conversation with PG. And the next day, we sit down and we're like, all right, we need a new idea. And so my co-founder Ian is like, you know what, I have an idea. Remember that Analytics JS library that has been sort of idling on GitHub? I think that could be a big business. And I was like, you've got to be kidding me. That's the worst idea I've ever heard. First of all, it's open source. And second of all, it's 580 lines of code. So who the heck is going to pay for that? How do you build a business around that? It makes no sense. And so we were fighting and fighting and fighting. And I went home and I was racking my brain to, okay, how can I kill this idea? It's really bad. And it's going to sink us. We only have one more shot. And so I came in the next day and I was like, all right guys, here's what we're going to do. We're going to build a landing page. It's going to be an awesome landing page. It's going to be beautiful. We're going to put it up on Hacker News. It's going to pitch the product. And it'll have an email sign up form at the bottom. And we'll use this to just test whether it's a good idea or not. They agree, okay, great. And I'm like, all right, totally done. We get ready to launch it on Hacker News. I'm starting to think about other ideas, and it goes straight to the top. So it gets about 300 upvotes on Hacker News, gets a few thousand stars on GitHub. We have people reaching out to us on LinkedIn, demanding access to the beta. This guy says, what does a brother have to do to get bumped up on your beta list? And there were others like this, right? Like, holy crap. So like, full stop, right? Like, compare this to everything previously. Like, everything changed. This is what product market fit looks like, where it's not just a single metric slowly starts moving. It's not just a few random conversations where people express vague interest, right? Literally every single metric went totally haywire. And with our lecture tool and our analytics tool, we've been sort of searching in the dark for what features to build next. We did not have that problem anymore, right? There were thousands of people who had signed up, and they're like, your seven integrations are good, but I need these ten more. And I'm deploying it tomorrow on blah, blah, blah, blah, blah. And we're like, holy crap, okay, slow down. And that's actually one of the key things. One of the key things is that it flips from being something that you're pushing against the customer to all of a sudden the customer's running away with it. And you're like, but hold on, wait, it's not quite ready yet. And so another example, with our analytics tool, we had this sort of sad, unanswered questions and chats. No one really seemed to care about what we had built. But now, all of a sudden, we had thousands of stars. People were issuing pull requests. We got like ten pull requests in the first 48 hours or something like that. And I guess the other key thing is with our lecture tool and our analytics tool, we had had this huge vision, right? We had a vision of here's how the classroom should operate, or here's how companies should do analytics. And then we went about trying to build a product that fit that vision. But this was the total opposite, right? This is like a little tiny library that we built for ourselves that solved a real problem, had no vision associated with it whatsoever at the beginning. Now it does, because we have something that we really want to go accomplish. But at the beginning, it literally solves the tiniest of tiny problems. And so to your question earlier, right, this is that tiny little foothold. And again, it's an open source library with 580 lines of code. That's a foothold, right? And since then, now we've expanded greatly into doing all sorts of things and solving adjacent problems for customers. So the key is that, again, the market doesn't care at all what your vision of the world is, the market wants what it wants, and it will win every time. So if you walk away with sort of one thing today, I think it's, let's be incredibly clear that basically product market fit doesn't feel like vague idle interest. It doesn't feel like sort of a glimmer of hope from some early conversation. It doesn't feel like a trickle of people signing up. It really feels like sort of everything in your business has gone totally haywire. There's this big rush of adrenaline from customers starting to adopt it and sort of ripping it out of your hands. And it really feels like the market is dragging you forward. And I think the Dropbox founders said this best, actually, that product market fit feels like stepping on a landmine. And you really, you can't mistake the two. So if you are at all questioning whether you have product market fit or not, you don't. So obviously, that didn't stop us from making this mistake. So just to make sure that, wait, this is backwards, no, no, no, all right. So I thought class metric, for sure, had product market fit, right? Big vision, the market said no, market doesn't care what you think. I thought segment IO, for sure, had great product market fit. Again, market said no, market doesn't care, market wins. And even on our third attempt, when we did find product market fit, I thought for sure that this is too tiny to matter, right? But it actually solved a real problem, and the market demanded it, and sort of ripped it out of our hands. And either that goes to show sort of how obtuse I am, or how hard it is to actually find product market fit. So how come people wanted to pay for something that was open source and only a couple lines of code? That's a good question. So it turns out that the open source library by- Can you repeat the question? Sorry. The question is, why would someone pay anything for an open source library that's 580 lines of code? It's a good question. It turns out that the open source library by itself doesn't totally solve the problem. So the actual problem that we found out that we were solving after we launched it was that marketing teams keep coming to engineering departments and saying, I just signed a contract with ExactTarget, an email marketing tool, or I just signed a contract with Adobe Analytics. And here's the docs, and the engineering team says, what the heck? I have a roadmap, I need to be executing on this other thing. I can't do this analytics implementation. And so what really needed to happen and sort of what Analytics.js could solve, the problem that we could solve as a hosted version, was allowing engineers to do a single implementation of collecting that data once, and then letting marketers just push buttons in our interface to send the data wherever they need it. But the open source library doesn't quite solve that problem. Engineers saw that it was the right abstraction. But if a marketer needed a new tool and you were using the open source version, the engineer still has to go compile it. So, in some ways, we got lucky, right, that the open source version doesn't fully solve the problem. Cool, so I'm going to steal gratuitously from Alan Kay's slides again. And I think finding product market fit feels a lot like finding the sort of blue plane when you're in the pink plane. And I want to give some other examples of finding product market fit after finding that initial product market fit. And sort of the key difference from that initial breakthrough, from what Alan Kay was talking about, is that rather than removing yourself from the world and trying to imagine what the future is like, you actually need to go out into the world and research what problems people really have. But then once you find that product, once you find that sort of blue plane, then things actually get enormously easier, right? That blue plane is basically a foothold into a totally new perspective. And I think Alan Kay talked about the value of perspective and context. So to get this foothold into a new way of thinking about the world, a new way of solving some problem for someone. And so not only do you know what good fit feels like, but you now are operating in sort of green pastures, and you're approaching problems in ways that all the incumbents in the pink plane don't think about the world. I wanted to give you two examples of finding product market fit since that initial win for us. So short intro to what Segment does. We basically help you collect data from mobile apps and websites. We pull it up to Segment, and we fan it out to all the different tools that you need. And that's all you really need to know. One of the places where we could send data was Amazon S3, right? So this is basically just a place to put all your log files. And we started to notice that all of our business tier customers were using this one integration. They were all sending their data to S3. But you have to do something with the data once, you don't just collect log files, you do something with log files. And so we're like, what the heck is going on here? And so we went and visited five of our largest customers in New York, about three years ago. And we said, okay, you're using the S3 integration, but what the heck are you using it for? And for five out of five customers in a row, they said, well, we have a data engineering team that's taking data from the S3 bucket, converting it into CSV files, and managing all the schema translation, and then they're uploading it into a data warehouse, like Redshift. And the first time I heard that from a customer, I was like, okay, that's interesting, and I took a note, went to the second meeting. Customer said exactly the same thing, it's like, that's weird, okay, take a note. Third conversation, I was like, all right, this is getting ridiculous. Like, did you guys talk ahead of time, or what happened here? And by the fifth time, it's like, okay, well, obviously I know what we need to build, right? We just need to build a connection from this straight to Redshift. So then the question is. We went and built that, and just to show you, now we have a company that actually is here in millions of dollars in revenue, and so we have a real product that real people are using. And so what does product market fit look like at that point, right? So we're introducing a second product, basically. Well, it looks like this, right? So you can tell when we introduced Redshift. And basically, again, almost every metric in the business goes nuts, right? So it's very, very clear whether or not you have something that is really transformative for your customers or not. One more story, and then we'll open it up for Q&A. So this is maybe about five months ago. We had five ideas for products that we thought might be exciting to our customers. And so I went to visit a customer of a large company up in the Pacific Northwest. And I sat down with a data architect there and I said, okay, here are the five ideas that I want to run through and see if they're interesting to you. So I went through the first idea, and he was like, yeah, you know what? I totally get it, that sounds super valuable. And I went through the second one, and he's like, that's really cool. That's cool that you can do that, that makes a lot of sense. And then third idea, fourth idea, same kind of thing. And so this is how I would summarize that, that's great, I totally understand what the value is, means, yeah, that would be great, right? He doesn't care is what that is code for, that's someone being nice. Then on the fifth idea, I said, hey, here's what we can do, blah, blah, blah. And he said, wait, sorry, you can do what? And I re-explained it, and he said, interesting. He turns to his friend and he says, hey, can you set up a follow-up meeting with this team, this team, and this team? We also need to tell Joe about this, because it could affect this other thing. And that, again, that is the feeling of product market fit, which is like, wait, wait, no, no, no, it doesn't exist yet. These are ideas, we might, all of a sudden, the customer is just going to rip it out of you, and so now you're on a tight timeline because the customer expects that it already exists, so again, that's what product market fit actually feels like. And I think if you want to find product market fit and build one of these category leading companies, become one of the one out of five founders that actually does succeed in finding this. I think you just need to be really honest with yourself, that the sort of glimmers of false hope that you have are not the same as customers actually ripping something out of your hands, and so, yeah, you just need to be honest with yourself. That's the message. So, questions? Yeah, Sam? I certainly agree, and it's been my experience, that what product market fit is like, but when you're trying to find it, how do you, like, have guideposts for what kind of ideas to try? When you're just sort of casting around, looking for ideas. I actually think the bigger problem is not necessarily having the ideas. I think everyone has lots of interesting ideas. I think the bigger problem is not killing the bad ideas fast enough. I think actually I have the most respect for the Codecademy founders in this respect. I think they tried like 12 ideas in seven weeks or something like that in the summer of YC. It was something totally absurd, but they legitimately tried them, and they killed them so fast. And then like four days before demo day, they started a new idea, which was Codecademy, and then it worked. And on Codecademy, on launch day, on demo day, they had like 300,000 users or something like that, right? Again, that's the landmine effect of nothing, nothing, nothing, nothing, nothing, nothing. And they were so good about killing the ideas, they had no problem throwing out something that wasn't going to work. So yeah, I'm not sure, I mean, I don't think there's any magic to finding the right idea, I feel like if you just kill the bad ideas fast enough, you'll probably find something. Yeah? Talk a little bit about pricing. So this seems like a, you know, start with 500 lines of code and solving a significant but relatively small, like significant but small problem. I don't know if that's a way to describe it. How do you go about pricing something like that when you're doing that custom discovery? Yeah, so we didn't, the question is like, how do you go about pricing something like this where it's 500 lines of code? It seems like it solves a small problem for people. We thought it was a small problem for people, and we underpriced hugely for a long time. It turns out that that problem that we, that, you know, the 500 lines of code solves, is actually really valuable. Like, there are companies, we have lots of customers now that pay over $100,000 a year to solve that problem. And, you know, there's more to the product now than the 500 lines of code. A lot more, but it's nevertheless is, the size of the business problem has almost nothing to do with the amount of code written, right? And I think it did take us a little while to, like, revalue things in that respect. But, to answer your question most directly, we spent the first year just accumulating customers. So we just had lots of people adopting it. Got to maybe like 1,000 or 2,000 companies sending data through Segment. And then we tried experimenting with pricing. And then, I'd say the biggest kick in the butt we had to actually get to the right point here is we had a sales advisor who said, we would go, you know, there were reasonably sized companies using us, like Live Nation and RDO and stuff like that. And so we would go to sales meetings at these companies. And the sales advisor would basically get me pumped up ahead of time. He'd be like, Peter, you have to ask for $120,000 a year. And I'm like, that's crazy. Like, what are you talking about? And he's like, Peter, if you don't ask for $120,000 a year, I'm quitting as your sales advisor. I was like, well, all right, here we go, right? And so I would ask, I'd turn beet red, and then they would negotiate it down to 18K a year, but if you keep doing it, eventually someone is like, well, that seems reasonable, yeah, so. And you have to keep testing the value like that, right? because you don't know how much value you're delivering until you start asking for money. So I think if I had to do it over again, I'd start asking for money earlier, and I'd be a lot more comfortable with it. Like, if you're solving a real business problem, people are going to be happy to pay for it. I'm not sure I totally answered your question, but, yeah? How do you know that you're asking the right people about your product? Like, what if there should maybe be just a small shift in who you should be asking that you're not realizing, like how did you? Yeah, so the question is, how do you know whether you're asking the right people? And how do you know whether you should slightly shift who you're talking to versus shift the product? Yeah, this is actually why it's so hard to find product market fit the first time, and why it's so much easier the second time once you have some product market fit. Because once you do have a defined customer set that you sell to, you can pretty easily figure out by going back to those same people whether or not you're solving an adjacent problem for them. But it's really hard. The thing that makes it super hard at the beginning is it's like you have two things, and you can either slide the product or you can slide the market by talking to different people. I'm not sure that there's a magic rule to know when to slide which, but I think founders get slippery with themselves, like they aren't totally honest with themselves about which thing they're doing when, so I think it's most important just to recognize that like, okay, if we make this shift, we are like shifting the audience versus shifting the product. because I think otherwise you can shift the product and the audience simultaneously and think you're doing well, but then realize you're not. I'm not sure that there's a slam dunk solution to that, other than just being really honest with yourself about which thing you're moving when. Any other questions? Last chance, yeah. So you mentioned that you guys were trying to find product market fit. Before you guys find it, there was a lot of moment that, kill this product, kill this product. How do you encourage people on your team to be like, let's keep focusing on the, like discovering the next thing? Like, what do you self-talk and then what do you talk to other people about it? Yeah, so I think there's a pretty big difference between finding that first product market fit, where you can kill a product, immediately move to a totally new audience. Like, Codecademy tried a whole bunch of different stuff. With a whole bunch of, speaking of switching audiences, they went from SMB to programmers to restaurants all over the place. Later on, when you actually are building a company around it and you have product managers, and each product manager is sort of like searching for a big breakthrough, it's a little bit easier in that you can't shift the audience anymore, the audience is fixed, and so now it's a slightly more straightforward problem for sort of helping a product manager understand how to go talk to customers and sort of reveal what problems those customers have and then actually solve them. And it's mostly training in that loop, and it comes from talking to either larger customers, or your best customers, or your worst customers, and sort of trying to push the boundaries around the core of very happy people have, to what other problems you can solve for them. Yeah? When you talk to your customer, what do you ask them? What's your script? You basically just, so the question is, when you are talking to customers and trying to sort of understand what their problems are, what's the script? I think the biggest mistake is trying to pitch your existing ideas. Like, there's a place for that, right? When you have some product market fit and you want to test some of these things. But I think most founders, and certainly we made this mistake early on of pitching rather than, and trying to sell, rather than actually trying to understand what their problems were, so now when I talk to a customer, I just start by asking what their business problems are, right? Like, hey, person at retail company, do you spend a lot on Facebook? They're like, yeah, yeah, yeah, we spend a lot on Facebook. I'm like, how do you measure whether that spend is efficient or not? And they're like, well, we don't really know. You're like, okay, well, is that a problem? They're like, yeah, yeah, that's a big problem. Like, okay, well, tell me why you haven't solved it. And they're like, well, we haven't solved it because blah, blah, blah. And you just start digging in to these problems. And then you're actually really set up to do a sale then, right? You're like, well, I have just the thing, right? And they're like, holy crap. But if you don't have a product yet, now you know exactly what problem you can fix, right? So I think it's more about listening and digging than it is about pitching an idea. Yeah. How do you find each customer? Like, how do you be like, hey, this is my customer. This company helped this company. Yeah, so the question is, how do you find these customers? At the beginning, it's hustle. It's just like emailing people cold. It's getting intros through everyone you know. It's like scratching and clawing your way through your social network and through introductions. After you have customers in an area, then it gets easier because you have people coming to you all the time, mostly if you're inbound. And so then there's like a steady stream of people to talk to. But the initial piece, that's why people talk about hustle being such an important founder quality is because no one's going to help you. You just got to go find them, right? LinkedIn, investors, friends, it's whatever you can claw together. Yeah. Yeah. So at the beginning, when you like shoot for these customer, like when you're cold emailing them, like how many percentage of people actually come back to you? The question is, when you cold email customers, like what percentage of people come back to you? I don't remember, that was a while ago. Very low, like single digits percentages maybe. You're going to send a lot of emails that are unanswered. That's the nature of sales. Honestly, if you're selling in like a business to business kind of environment, you're going to send a lot of emails that go unanswered. Like sales is basically the exercise we get in the door slammed in your face, like nine times out of ten, right? Yeah, yeah. What's your vision for a second? Where do you think we'll be in five years? Let's go back to the diagram. So, what we have today is basically sort of stream processing. So we have both the ability to collect data across a broad section of stuff here, as well as the ability to fan it out to a whole bunch of different places. And so what we want to do is basically provide a platform that all of these tools can build on top of, that's a super short version. So you can imagine basically every team in a company needs access to customer data, and we want to become the platform on which those tools are built. Whether that's email marketing, or push notifications, or analytics, or help desks, or CRMs, or payment systems, fraud detection, etc. All of those things operate on a core set of customer data. And that's the customer data that already flows through segment by nature of us being that integration connection layer. And so we just want to expose that data to partners to build on top of it. So when I talked about building a platform at the beginning, that's the next step for us. I feel we are out of time, thank you very much. Thank you. Thank you. Thank you. "
  },
  {
    "name_video": "Live office hours with YC's Paul Graham and Sam Altman (2013)",
    "description_video": "YC's Paul Graham and Sam Altman hold office hours.",
    "related_categories": [],
    "page_url": "/library/84-live-office-hours-with-yc-s-paul-graham-and-sam-altman-2013",
    "youtube_url": "https://youtube.com/watch?v=syoqjYLDs48",
    "mp3_file": "downloaded/Live_office_hours_with_YC's_Paul_Graham_and_Sam_Altman_(2013).mp3",
    "mp3_content": "We have to sit up straight. We have lower seats. This is not right. Admiral Rickover would not stand for this. Okay. George, Nick, what are you working on? So we are building a multiplayer programming game for teaching people how to code. So like Codecademy, but actually a game. A game. So how do you win the game? So you just beat more and more levels until you're an awesome developer. So you sort of get points somehow for it. It's competitive learning. Like you learn a program and you get more points? More competitive. So there's multiplayer. Is it like write code to kill a bad guy? Yeah. So the first level, you got your guy, you write code to move him around, and then you kill another guy. So it's like right in the middle that you're killing dudes. All right. So you're motivated. Yeah. Instead of, you know, what is your name? What's the length of your name as a string? Yeah, okay. That's cool. But no, I kill that ogre. Yeah. That's like what you do right away. It's not just badges. Not badges. Is it launched yet? It is, actually. We launched it yesterday. Oh. Well, the beta. Things move fast around here. Check it out. Did you launch because we told you you were going to be in office hours? Actually no. It's just a coincidence. It is. Wow. Somewhat unfortunate because we didn't have time to prepare. The launch went crazy. Yeah. But I got home from the dinner last night and I get on a hangout with these guys and they're just at the server terminal control seeing and restarting the server because it's under so much load. How's it doing now? Not much better, unfortunately. We can only serve a certain fraction of the traffic that we're getting and that's been going on for 24 hours. How did you start working on this? I wanted to learn to code about a year or two ago. I had been a semi-technical co-founder at my first startup and I tried Codecademy. I tried a whole bunch of these and I just couldn't stay, stick with it. It wasn't engaging enough for me. So these guys, my two co-founders, were like, hey, why don't we actually make a game? So you were the original guinea pig? I was. They thought you can't keep motivated using existing stuff. We'll make a game where you can kill people. It wasn't just that. Our first startup, the customers kept coming to us and saying, we keep using your company or your product because it's like a game and we hadn't intended that at all. What was it? It's a company to teach people Chinese characters. I see. We thought, well, if we can do that inadvertently, what would happen if we actually made a game? So how far can you learn how to program by, like, how much can you teach people, right? Because I can remember the kind of crappy programming I did when I was in high school where I didn't really understand what I was doing. So if you look at the stuff that's on, you know, Top Coder or HackerRank. How can you force people to learn advanced concepts when all they really need is, like, to have the right library calls, right? Can you make advanced concepts, produce advanced weaponry? So the software engineering part of learning to be a developer, that's something we can add later. Focusing on core programming for now. Because you get motivated enough, it's like, okay, now I want to build this app. But then you have to get through different levels, right? Presumably you get more and more sophisticated, but you could get more and more sophisticated just by writing more and more code and getting access to the right library functions without actually learning any more about programming, right? Couldn't you? Can you force them to learn more about programming in order to make more powerful weapons? So you can have things like, okay, your code needs to run this fast. In this one you need to learn how to use recursion. This is the only method available to you in this one. You need to figure out how to do, like, a non-honest function passing method here. And generally, if you make the levels hard enough, which you're able to do when they have a reason to complete it, they try really hard, then you can get them to do harder and harder stuff as a natural progression of the game. Have you run beta users through this yet? Quite a few, actually. What did you learn from it? So what went wrong? Well, the first thing that went wrong was that we started at too high a bar. Because I had worked in kind of a semi-technical role in my first startup, we assumed a whole bunch of prior knowledge that was totally untrue for our beta users. So we started out, like, writing for loops, which we were like, oh, well, that's simple. And then we got people with no programming background, and they didn't even know how to complete a line. Like, they didn't know a semi-colon. The mere concept of formal notation is the single biggest obstacle. Correct. Right? What's the most advanced concept you're teaching now? So, so far, we had some dev levels where it was like, okay, you're going to need to figure out the targeting strategy for your artillery, so you're going to fire into the center of a group of dudes. And your soldiers, backed up by the artillery, have to avoid your shots, so you have to make sure that they don't chase into your, like, line of shooting. What era of technology is this? So it's a web game, and you're doing everything in JavaScript. No, no, no. What era of, like, combat? Oh, it's fantasy. So you're a wizard. Yes. So you're casting spells to control your soldiers and your heroes and that sort of thing. I see. How many users did you guys get? There's no Apache helicopters or anything like that. No, unfortunately. We don't have the art for that yet. It's pre-industrial plus magic. Yeah. All right. He keeps saying, do robots. We could do robots. Yeah. It's when fantasy, you can make up anything. Yeah. Right? How many users did you guys get yesterday? So we maxed out the server at 15,000 people. We had 200 concurrent, but we really don't know, because we were actually, people were just getting 404s. Why not just spin up a bunch more servers? We weren't architected that way. We didn't think we'd get nearly this much traffic. We just posted it to Reddit. That's it. Yeah. We posted it to Reddit, and we got swamped. Not even the main Reddit. Actually, people on the Reddit threads were just, like, they were repeated things. They were saying, oh, the hug of death, hug of death, hug of death, and 404 not working. So they were scrambling all last night to do that. Do you know if it's people that didn't know how to program before that are mostly doing this, or if it's just people that want to play a fun game? So the people that know how to program already, they're, like, okay, when's it on GitHub? When can we? This is awesome. Let's get on here. We had, like, 20 people yesterday overlarking me, like, oh, man, I want to help out. And when can we pull? When can we clone? Yeah. So we're thinking open sourcing in the next couple months to really capitalize on the interest. But most of the people, yeah, they're on the learn programming subreddit. They're, like, I don't know any programming. This is great. And they beat all our levels, and we're, like, crap, we need more levels. We're just trying to focus. Do you guys know anything about the gaming business? Like, do you know how to make games? Or learning is the quick answer there. Okay. Because there's probably certain best practices in the gaming business, and probably whatever they do would be the starting point. So if you're just wondering how much to open source, I don't know how much they open source things in their world. But whatever they do is probably the default thing to start with. Yeah. We actually that was the first thing we did when we started the company was we realized, wow, none of us are professional game designers. Let's find and talk to game designers. And so we've got this kind of core group of people that are advising us, mostly just telling us when we've built sucks, but it's been very helpful thus far. Is there anything they told you that changed what you were doing? They said make robots instead. People understand robots. Yeah. They said make robots. Because when you have, like, controlling your units via code, people think, okay, that's natural if you're robots. When you say, oh, it's a spell, you're a wizard, you're adding to the fantasy, and it's, oh, it's a little bit hard to understand. See? Okay. So is it robots now? No. Oh, so that's, like, version two. It's hard to choose the art, right? Yeah, the art is. Yeah. All right. I know you guys are now just going to create as much content as you can while people are Yeah. We just finished the level editor. So now the hope is we can finally churn out three levels a week using our awesome live coding drag and drop thing as opposed to, like, hard coding all the coordinates and be like, ah, does it work now? Yeah. So growth first. How many people do you have? Is it just you two? No. We have one guy that's manning the servers right now. He's keeping it alive. Hopefully. Yeah. Scott, keep it alive. This is the same team from the first startups. We've been working together for six years now. How did you originally meet? So I was his roommate, and I lived down the hall from my co-founder. In college. Yeah. College roommate. Mm-hmm. Did you guys study? Were you guys programmers? Yeah. So Scott and I did CS, and George is the econ film guy. Yeah. I see. And then we graduated. I'm like, oh, let's not get jobs. That's going to suck. What are you talking about? And then we did the startup. And then three months later, the crash. You know what? I was like, oh, good thinking. A lot of the reason people start startups is because they don't want jobs. Yeah. Right? No, seriously. Honestly. One of the pretty good reasons. Seriously. If we were looking at someone's application, and they worked for a long time for a large company, that's actually bad to us, because the best startup founders probably could not stand that. Every month that IBM did me in, it was like sophomore year, like, oh, no more. How are you guys going to make money with this? So it's a recruitment model, basically. The people that the leads that we generate through the coding challenges provide us with the opportunity to qualify people before we even get in touch with a potential company. Can you possibly train these people good enough to make them valuable employees? The recruiters we talked to said, yes, absolutely, companies are interested in the developers on your site, and we're interested, and so let us know when you have something. Recruiters famously say all sorts of crazy stuff. Yeah. They do. So that's yet to be validated. Yes. The other people in the space that we talked to also say the same things. People running coding challenges and doing placements and dev boot camps and that sort of thing. Yeah, we spoke to actually one Y Combinator company, and we asked him how he had done his recruiting. He said, we sent a group of qualified recruiters a spreadsheet. I said, how did that turn out? He said, oh, we had 50 placements in six months. So I said, okay. Is it time? We're out of time. All right. Thank you so much. Thank you. Thank you. Thank you. Okay, guys. Hey, guys. Hey, guys. Wait, wait. Come back. Back for a second. You didn't realize that, but that was your Y Combinator interview. You're in the next batch. You are applying, right? Nice. Good job. Awesome job. No pressure, I guess. Nice job. We just sort of decided to do that on the fly. I mean, that was kind of the idea. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. We just sort of decided to do that on the fly. I mean, that was the first time I talked to them. Hi, I'm Karen. Hey, I'm Fintbar. We are making giveit100.com. What is it? Giveit100.com. No, you can look at me. Okay. We're making a video site where you sign up, you choose something that you want to get better at, and then you share a video of your progress every day. So what would be a typical example? Like, what's the most is it launched now? It's in private beta right now. Okay, so what do you anticipate being the typical use case? Like what sort of thing would people get better at? The most common one right now is dancing. The reason for that is because I made a video of myself learning to dance in a year, and I put it online. It ended up going viral. You mean you spent a year learning to dance? I did spend a year learning to dance. What kind of dancing? Robot dancing. Okay. It's all robots today. Ron Code, you hear this? This is the new trend, robots. So I ended up getting several hundred emails from people who said, hey, because I saw this video, it wasn't a video of an incredible dancer, but it was someone who started off not knowing how to do it and getting better. So is this a video you put on YouTube and a lot of people looked at it? Yeah. So was this what led to the startup? Yeah. Okay. So you made this video of yourself learning to dance, and then you thought if other people did something like this, it would encourage them to dance too. Yes. Ah. I see. What sorts of things are people mostly showing themselves besides dance learning? How many beta users are there, by the way? We have an invite-only beta of 50 people, and then we have... 50? Yeah, it's like 4,300 or so on a waiting list. Yeah. They are... There's a nine-month-old learning how to walk. There's a woman who's recovering from a multiple sclerosis exacerbation. She's relearning how to walk. There's people who are learning how to ride a unicycle, learning a new language, learning how to code, learning design. Why haven't you accepted the rest of the wait list? Well we're kind of just ironing out some kinks in the product and getting it to the stage where we think it's going to be really engaging. Is it not engaging enough now? Well, it is. We actually have some really awesome engagement stats. Well, if it's engaging enough now, you've ironed out enough kinks. Sure, we have. I think really the major things that I'd like to see personally are the kind of social sharing features. Because when we kind of open the floodgate and have lots and lots of people come onto the platform, we want to kind of maximize on that, and if a lot of them come on and share it and then leave, they could have got a lot more people to come in by that point. So they're not sharing it enough now? Well, there's no way for them to share it right now because it's totally a private closed beta. Like nobody else can see it. We really just are... We're kind of just experimenting on our first batch of people getting their feedback, and then we're going to launch in the next couple of weeks. Do they always make videos of their progress? Yes, it's video. That's how it works. We started off as a photo and video site, but then we cut out videos. We cut out photos because the videos were more interesting. So how do people make videos of themselves learning to code? Look how much faster I can type. Actually there is someone who's learning how to touch type, but they sometimes talk into the camera. They talk about what's challenging, what they're struggling with. They'll show actual code. They'll show what they actually built. How many views does an average video get out of like a potential 50? So the view counts, we're seeing about 1,000 views a day. And we have roughly between 20 and 30 of our kind of small group of users are coming back to the website every day. 20 and 30 out of 50 come back to the website every day? So unique, kind of unique visitors. It's not like the same 20 to 30 every day. It's like people will kind of wait a few days and then upload a batch of videos at once. So the videos are hosted on your site, not YouTube. That's right, yeah. But we want to use YouTube. We want to piggyback off of YouTube as a marketing channel the same way we did with MyVideo. So we'll take really compelling 100-day challenges and we will turn it into a viral video, put it up on YouTube and say, made with 100. It seems like that would have been really important to test during the beta is will people share these on YouTube and do they get watched? Well I guess our test for it is MyVideo, which has 3 million views and was shared widely. You don't put it on YouTube. Well, the video clips themselves are on our site and that's something that you can go on every day and see the same people every day, see their clips. No, Sam was saying you should have tested putting it on YouTube specifically. Oh, the clips, the 10-second clips themselves. I mean, I think like the kind of format that we have on the website where you kind of have this gallery of 10-second clips and you can just kind of see them all and consume them all kind of in context and in sequence is like really powerful. So you have a view with a page with a whole bunch of little videos on it. That's right. And you can see from the beginning to end the person's progress. That's the story. That's the most compelling part about it. If you envision like Paul Graham, I'm Paul Graham, I am learning to like pick which start-ups. I'm learning to pick which start-ups for Y Combinator for 100 days, then you see day 1, day 2, day 3, and then as you hover over each video, it just starts playing. So you can watch it for a second or for 10 seconds. We cap it at 10 seconds because I have a short attention span and I'm building this for myself. What do you think will be the most popular things? I don't mean the most popular things by number of people who do them. I mean what will be the most popular things for third parties to come and watch? That's a really good question. Like third parties? Like people who are not the people who are practicing. You've said you built this for yourself. What do you want to watch? Like what are you excited about watching other people learn? I want to see a good story. I want to see someone who is struggling and is against all odds, like doesn't think they want to do it. I want to see Phil Lippin at his 3 a.m. hour saying I'm out of money and I just got an email from this investor. I want to see video of that rather than just hearing him talk about it. I don't think he would have used your system. No, seriously, not for like starting a startup. Maybe someone in this room will. More for learning how to dance or something like that, right? But what do you think will be, I mean what specific type, what genre of stuff? Will it be people learning how to dance? Do you think that will be the most popular stuff? Will it be babies learning to walk? I think there's some, we're seeing some. Because the babies learning to walk part actually sounds pretty exciting. Like parents would love to be able to document their kid's progress. I'll tell you the thing, if you don't have kids, one of the big problems about being a parent is the memories of the current kid overwrite the memories of the more recent, the sort of recent past. I'm so sad. I can't really remember what my four-year-old son was like when he was three. I see three-year-olds and I think, oh yeah, I remember when he was like that, but only vaguely because my God, I got this four-year-old like jumping up and down on the bed in my mind, right? They're very, if you wait until you have kids. I mean I think there's going to be like a number of real kind of killer categories which will be very interesting. The children one is certainly very, very compelling when you see this kid like crawling, learning to kind of open a door and then like his parents hold his hands and he's kind of taking baby steps. And you do, you'd have videos that implicitly have these, the structure of like sequences, right? But they're not organized that way. They're just like on your iPhone, right? In chronological order, you know, they're not like the series of the kid trying to say some phrase or something like that. How good are they? the users it's sticking with the whole 100 days of making a video every day? So good question. So out of the users that we have, there's an average of around 18 videos uploaded per user. So I guess we have some people who actually, our kind of earliest implementation of the product was send us videos via Dropbox every day. So we have some people now who are actually up to kind of in the 80s, yeah. So there's a guy beatboxing who we've got him from day one through day like 85, I think, and he's pretty awesome. What's beatboxing? Beatboxing, yeah. Ah. Yeah, exactly. My day one. Okay. Yeah, exactly like that. So he like starts off and he's like not very confident, not very good, but you really see like over time the amazing improvement in him and that's like what we're trying to get at. Are people like encouraging each other to stick with it? Is the point of this that the community will make you be more likely to stick with this? Sure, absolutely. So that's definitely part of it as well. So we have these kind of commenting and kind of propping features where people say, oh, this was a really awesome day. I think like our most commented on and most kind of liked video, we've got somebody learned to unicycle and one day she uploaded a video where she had kind of a bad fall and kind of fell over and everybody was like, oh, that looks really sore, but you know, keep at it, keep going, you're getting there. You're really improving. Can you, can people make their stuff semi-private? Yeah. There's a feature to make all your videos private because a lot of people, they don't want to share when they're going through it, but maybe once they're good, they're- Or they want a group of their friends to be able to see it, like it's their kid. Yeah, that'd be an interesting thing for us to implement. You know, the kid thing, the kid walking is very different from someone teaching themselves how to unicycle. Don't be, don't like, like over optimize too early, like let it grow into whatever it's going to grow into. Maybe it'll end up being kids are the big thing, or maybe not, who knows, but be empirical about it and don't, don't like wire in some outcome too early. All right. Is it time? Thank you. All right, you guys. Thanks. Good. Sounds pretty good to you. Hey Ryan. Hey Paul. Hey Ryan. Hi Sam. You don't know how odd this is for us. This is the brother of someone we funded in the past and except for having a beard, he seems identical. It's very disconcerting. Hopefully that's a good thing. Yeah. He meant, yeah. All right. What are you working on? It says, oh, that's your username. What's the startup? It's called Flexport. We're the first licensed US Customs brokerage built around a modern web application. A customs brokerage? Yeah, whenever you import a product from another country, you have to clear it through customs. What does a customs brokerage do? They collect tons of documents and organize them and file it forms with US Customs to clear your getaway. What does a customs brokerage do? It's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a, it's a십 if you write software? What do you do differently than an existing customer? Well, first of all, we don't use a fax machine. Unless the customer wants to. It's an online dashboard to allow you to organize all these documents and help you understand which documents are needed and then we actually collect those documents for you instead of asking you to go get it. So I can just come to a website, type in what I'm importing and have it come in the U.S. and you'll take care of everything else? Yeah. Will the experience for users be as simple as a customs broker or are they going to have to do a little bit more work? No, no, no. Way less work. Less work? Oh, absolutely. I mean, we do the work for you. But doesn't a human's customs broker like sort of interview out of people what they're importing? Like the person says they're importing clothes? We're not removing the human elements. We're pairing you with a licensed customs worker. We have customs workers on staff and it's a communications tool to like enable it. It's sort of like Uber. Yeah, I haven't used that analogy. It's kind of like teleporter for products instead of for people. Okay. Yeah, yeah. How much does someone pay a broker to import like a million dollars of goods? It's usually not dependent on the value of the goods, but it's like between $100 and $300 per shipment and there's 30 million shipments that enter the U.S. every year and are filed with a customs entry. 30 million? Yeah, and then that's just tip of the iceberg. So really, I mean, the logistics. How many of them use customs brokers? Yeah, yeah, use a customs broker. I mean, you can have a big company will have a customs broker in staff. Yeah, I would think. At a certain scale, yeah, you hire a customs broker. We'd like to make it so you don't have to hire a customs broker because our software is easier to use than maintaining that division of your company. Do you have customers now? Yeah, we have three customers right now. That are importing stuff. Yeah, we actually have a waiting list of like 300. The biggest oil company in the world signed up. We were a little scared of like creating an energy crisis. So we told them to hold off for a bit. We have a super tanker approaching the port of San Francisco right now. So how did you get those customers? So I was in the industry for like 12 years. And I know a lot of importers. Are you currently a customs broker? I have a, I'm not a, personally, I do not have a customs broker license. I have a customs worker that works for me. I see. And they're kind of teaching me everything. So you guys, have you already been doing the manual version of this? So over the years, I've probably imported about a thousand containers and cleared them through customs. Okay. My companies that I've worked with, worked for, my brother's company is one of them. I used to work for my brother. So you do know how to do this yourself? Yeah, sure. Why has no one done this before? Well, why the existing companies haven't done it before is kind of obvious there. If you go to a customs broker convention, 40 years probably. Yeah. The, why no startups have done it. Well, first of all, I mentioned it's highly regulated. It's hard to get the license. And actually, until recently, it wasn't possible to clear a shipment except at your local port. So if you built a software startup to do this, you could only help people importing into the port of Oakland, unless you had an office in every port. Really? In 2007. Well, you're not doing the clearing though. Aren't you just matching them up with a customs broker? No, no, we are a licensed customs brokerage. We actually do the clearance and file it electronically with customs. Okay. So you guys are kind of the customs broker of record. Yes, we are. So it's not quite like Uber. Yeah. Yeah, I didn't quite get that analogy to be honest. You have the same mordant sense of humor as your brother too. Office hours with him are always a little bit prickly. All right. So how are you going to get all of the importers to switch to this? Presumably, they have these like long-standing relations with their customer brokers. Yeah, and the kind of importers to a large degree have this figured out by definition, right? They've been doing it. They know how to import goods. But every time you import a product into the U.S., it's public record, that product. And my last company actually sells that data. We aggregate every time you import something. We've collected 300 million of those shipping manifests and sell subscriptions to access it. So we know every single importer in America. So you have the customer list? Yeah, we have every importer in America in a database. Wow, that's very convenient. Wow. So how far along are you? Have you got sort of this like a sort of beta version that kind of works? Yeah, there's like an MVP product. It's a web app. You can sign up for it. We're not taking new users right now. But that's just a matter of me wanting to feel like everything's super tight and nice user experience. But it has the functionality, the initial version is going to have to help. How many shipments have you done with your first three customers? How much what? How many inbound shipments have you done? No, so the first clearance is happening in November. So we've got these guys lined up, ready to go. We've got the first shipment. Actually, the government shut down three weeks ago, stopped us from, they won't take a new broker. The guy whose like job it is to onboard us was furloughed. He's back in his office and I filed the forms on Monday. That whole government. I was hoping to have that done and be able to come up on YC app and say, hey, we've cleared our first shipment already. But. See you idiots in the government. You are actually slowing down innovation. How much do you make? Do you have a sense of like on average how much you'll make per customer? Yeah, so well for each clearance, the gross margin should be at 75%. It doesn't take a lot of time to, it's kind of. So you can be like really hands-on and hire a lot of people to help through the process. How much do people pay for one clearance? We're going to charge $100 to do it. No matter the size of the shipment? Yeah, pretty much. It's actually not about the size, but like there's some things you might charge extra for like clearance. Certain, if you want to do something that has to clear with FDA, there's extra paperwork. We might charge extra. It seems that people would pay a lot more for like a 777 full of iPhones than, you know, like one little shipping. Well, now they're going to pay more in taxes to the government, right? But as far as the broker, it's still just one form or whatever. Do current brokers charge flat rates no matter what the shipment is? No, they charge more. And, you know, I'm kind of looking at it a little differently where the brokerage is just the way that we enter the much larger logistics space. Because once I'm your customs broker, I know everything about your supply chain. So what would you do to have freight, warehousing, inspections? You hook them up with trucks or something like that. Someday I would like to be doing all those things, but. Are other brokers doing that sort of these services after you get it into the country? Yeah, but I don't know that they look at it as like they're the primary way that they're going to make money. They would never go into it as a loss leader, for example. And I don't know if I'll do that either. I like I don't like burn rates, but hmm. So how much do you think you'll be able to make like in, you know, once the thing launches? Yeah, well, the logistics globally is a 2.3 trillion dollar industry. No, I just mean when you do the customs broker. I just like to say that we're trillion. Yeah, you know, really big markets are bad for startups. Not good. Yeah, if you say a too big number, the investors just don't believe it. You know, it's really hard to say. I mean, I've kind of modeled out and say like, okay, we can make about 30 million dollars a year in profit. Just being a customs brokerage. If you get, say, 1%, I don't like to do that kind of analysis. But, you know, each customer is probably worth maybe two or three thousand dollars a year. And I think we can get as many customers. But the whole business is three billion a year. Yeah, 30 million is 1%. Yeah, exactly. The customs clearance business. It's about five billion a year, right? Based on the number you said earlier, the whole U.S. customs broker business. About three, yeah. Now, I don't have exact figures for that. But based on the number of shipments that are cleared and what people charge for those shipments. Are you going to hire just an army of sales guys and go down that list? Possibly. My last company had an army of sales guys and it wasn't that fun to manage. But things that aren't fun are still sometimes worth doing. Sometimes it's the way to make the most money. So I'm not, you know, I have to do it better than I did the last time. So it's more fun. We got to end. All right. Boy, that was interesting. Yeah. All right. Thank you. Thank you for coming. Thanks, guys."
  },
  {
    "name_video": "The path to $100B",
    "description_video": "YC Group Partner and the creator of Gmail, Paul Buchheit, in conversation with YC's Geoff Ralston, describes how he thinks about companies that manage to scale to the ultimate level.",
    "related_categories": [
      "Management",
      "Leadership",
      "Growth",
      "Customers",
      "Becoming a Founder"
    ],
    "page_url": "/library/82-the-path-to-100b",
    "youtube_url": "https://youtube.com/watch?v=Ir3hGtg0Wog",
    "mp3_file": "downloaded/The_path_to_$100B.mp3",
    "mp3_content": "It is now my great pleasure to introduce my long-time colleague at Y Combinator, Paul Buchheit. Paul is known for a lot of things, not the least of which is his wisdom and all things when it comes to startups. But he's also, of course, the creator of Gmail, the inventor, this is true, of Don't Be Evil. And has had an incredible career. So I just thought I'd turn it over to Paul for a couple of minutes for him to describe his journey from somewhere into YC and what's happened then. Then we're going to have an interesting conversation, I hope, on what it means to build an epic company. Paul? Wow, all right, thank you. How far back do you want me to go exactly? Where were you born? Where was I born? Upstate New York. Me too. Yeah, so I grew up in the Midwest and I went to college in Ohio and like in the 90s, which is different from now probably. Everything in the 90s is different from now. So yeah, I was always interested in startups and even as a kid, I think I just didn't like the idea of working for someone else. And also I liked the idea that you could make a lot of money and create cool new inventions, basically. You'd read about inventors like Tesla or someone like that. You're like, wow, if only that guy were smarter at business. He invented so much. He invented so much and he died penniless. Didn't he start that car company? Yeah, I don't know if he actually... I'm not sure if he actually got any equity in that. I don't think he did. So yeah, I was always kind of in the back of my mind. But as I'm coming up to graduate college, which was in 1998, so I was very interested in startups. But there really was, you know, there's obviously no startup school. There was no Y Combinator. There's basically very little. The web was relatively tiny at the time. There was not a lot of resources. I didn't really have any connections. I didn't know anyone who worked at a startup. But I suspected they were like in California. So just always doing kind of like the simplest thing first. I'm kind of intrigued by that. What made you think of California? I mean, like eBay, Netscape, like that first generation Yahoo, all of that first generation of internet companies. They had already... You know, those companies are IPO'd by the time I graduated. And they were all located here, you know, with the exception of Amazon up in Seattle. It's pretty obvious. I didn't have to be that smart. Silicon Valley was... I didn't have to be that smart to figure out where Silicon Valley is. So I took a job out here at Intel, kind of with the hope that I would just like... You know, there would be startups everywhere. I'll just like find one or something. So you went to work for the man. Yeah, I went to work at Intel. And that was... You know, Intel is a big company. It wasn't awesome. It wasn't terrible. It wasn't like a bad job. You know, I don't want to like... But it wasn't something I look forward to like continuing to do year after year. Yeah, we used to call working at HP where I first worked the fur-lined rut. Yeah. It's comfortable. It's comfortable, but it's a rut. I actually have a specific memory like hanging out with a couple of other friends who worked at Intel. And, you know, I'm like 21, 22 years old, something like that. And they're talking about like, oh, yeah, they've got this really great like retirement plan where, you know, if you work there until... For however many years, like your age plus your number of years of service, like you could retire at like 55 or something. I'm like, ah! It's like, oh, yeah, why don't I just take the next 30 years of my life and stick it in a box and bury it? Yeah. I mean, it's worse. Worse. There are people there when you're sitting there at 22 who have been there for 30 years who are just kind of doing their time. Yeah. So I wasn't really into doing time. But I was really into Linux. So that was kind of my obsession. I had gotten interested in Linux like actually really early, like 93, like when it wasn't actually very good. And so I was kind of like an early kind of Linux zealot who was like, oh, this is so awesome. This is how, you know, the future is gonna be. And, you know, back then businesses didn't really... Linux wasn't like a serious operating system. They're like, no, serious businesses will always use Windows. You know, you need like an enterprise operating system, not some hobbyist junk. So I was like looking for something to work in Linux. Because, you know, everything at Intel was like pretty much Windows based. And so that was my criteria when looking for startups was just that I wanted it to be kind of technically interesting Linux stuff. Again, there weren't like, you know, great resources on like a huge list of startups. So I just kind of like scouted out what I could find basically on Slashdot. Because I would read Slashdot a lot. And I came up with a list of like six startups that seemed like they might be interesting doing stuff with Linux. And so I like just emailed my resume to all of them. Sort of like ironically it immediately bounced from Google. Because their mail server was misconfigured. So I didn't hear back from most of them ever. I interviewed at one other company. And then I re-sent my resume the next day. And then it went through. They had fixed... Like I think the MX record was broken or something. So I only interviewed at like Google and one other company. And the other company like I wasn't interested. And I think maybe they weren't interested. Because neither one of us really like contacted each other. And so Google was really the only offer I had. So that made it easy to like choose. And so I went to work there in 1999. And how many employees did Google have? I was the 23rd at that point. And so we were in Palo Alto on University Ave. Kind of on the second floor above what is I think a bookshop or cafe or something like that. What did it feel like at Google when there were 20 employees there? It was really cool actually. I was really impressed when I was interviewing with them that they asked actually like really smart questions. Which I think is a pretty good indication. Like that was one of the other reasons I wasn't excited. Another startup I went to that I interviewed at, it was just like I went into their office and I just sort of felt depressed. Like you could just tell people weren't really that excited to be there. And then they'd ask kind of like dumb questions that I didn't think were like. Anyway, it just wasn't like a good sign. Versus like Google kind of like they were into whatever it was they were doing. And actually after I was there for maybe like a week, I went back and I'm like, hey, I want more equity. They're like, sorry, you have to negotiate that before you start. That might have been like the smartest pseudo-investment decision you've ever made. Even though it didn't, I guess it worked out. Yeah, I mean it worked out overall. But yeah, I do wish I'd gotten more. More. The thing about the office, I mean you asked about the environment. It just had like a very, kind of like a buzz of productivity, right? Because we were doing these really kind of exciting things. And I think like they had hired people who were really into building these like big systems and creating great products and everything. So it was an exciting place to work where I would actually like wake up in the morning and be kind of like eager to go to work. It's like I've got stuff I want to do. Do you think that was because not just they were working on exciting things, but because they believed they were going somewhere? Yeah, I mean there was kind of like an irrational belief, right? Like objectively we were just this tiny little company or whatever. But Larry would be talking about whatever crazy ideas. We were just like, wow, what? Like I remember having an early memory where I was building this system and then I'm talking to Larry about it. He's like, why are you even bothering with the disk? We're just going to store everything in memory or whatever. Which at the time was sort of an absurd. We didn't have enough RAM to store all of the data. He was always thinking like so many years ahead and it was a little bit insane, but it made it a very exciting place to be. It seems like there's something fundamental. If you're thinking about whether you have the potential to build a really big business, if you don't have some sort of vision, some sort of idea of a future, it's hard to believe you're ever going to get there. Yeah, I think you have to have some notion of the big picture. It doesn't mean you have a detailed step-by-step plan. Occasionally I'll run into a startup where they're like, here's our five-step plan for how we become whatever. It isn't until the fifth step that actually they have a product anyone would want to use. Those are really bad. You have to have something today that's good and you have to have something tomorrow and you have to day after day have a product that people actually want. Yeah, you almost want a certain amount of vagueness around your vision because if you have too much detail, you're just guaranteed to have wasted your time because it's not going to be right. You spent how much time at Google? I was at Google for seven years. Wow, that's just about how long you've been at YC now. I've actually been at YC for over seven years now. What happened during those seven years? Stuff happened, right? Stuff happened, a few things. When did you know? When did you realize that Google was a thing, that it was going to be this secular juggernaut that was going to take over the world? Earlier this year. I mean, it builds. I think, like many people, I continually underestimated its potential. But from very early on, after being there for a week, I was like, ooh, there's something magical going on. I didn't think it would be what it is today, as big as it is. But it definitely felt like we were somehow creating the future. And then when we started really, like when we got the Yahoo deal and started really displacing. We started really just crushing all the other search engines. And then there was a feeling of inevitability. It was pretty clear we were just going to win because no one else, they just didn't even know what they were doing. The competition just wasn't very good. Before we move on to leaving Google and starting your own company, just maybe say a word about the founding of Gmail and how that happened. Sure. So, email was actually a thing that I'd been interested in for a long time. Ever since your resume bounced? Yeah. Before that. So, in college, I had actually been thinking a lot about this. Because, again, back in the 90s, people, their email would download to their computer. They would run like Eudora or something, and it would use POP3 to pull the email down to their computer. And I remember people would be like, I need to go to my room to check my email. I'm like, that's dumb. That doesn't make any sense. It's information. It shouldn't be stuck in a box. I'd been thinking about this idea that everything is just going to be online, and then we'll just be able to access it anywhere, anytime we want. And so I actually, in the summer of 1996, I think, I kind of had gotten maybe a little bit excessively arrogant and had only applied for a couple of summer jobs, just assuming they would want to hire me, and they didn't. So I sort of ended up without a job. And so I'm like, that's fine. I'm just going to start my own company. And so I actually tried to start this thing of like a web-based email. That's funny, because that's right when we were building web-based email. Yeah. Mine would have been better. 95, 96. RocketMail was really good. Anyway, I had grand visions for it, but my approach to developing it was wrong. It was very much like I had this great big grand vision, and then I started trying to implement it piece by piece, the components, and then I got bored and gave up. It's actually a multi-person job to build email. Yeah, it's kind of a lot of work. It's a lot of stuff. But the way I went about it was kind of wrong, because I actually did sort of this detailed design of this very intricate system and everything. And I've kind of come, at least for myself, I've come to decide that that doesn't work. I need, and this is what we preach to the startups, is like figure out what you can launch today. And so to jump forward to Google, like it was kind of 2001. There was sort of a big reorg where they got rid of all the managers and just gave engineers more of a free-range engineering thing, gave us all projects. And so they were just like, I should build an email thing. Like they knew I kind of had an interest in email, but it was just like we want to do something in email. We don't really know what exactly. Like just go build it. So having learned from my prior experience, I decided to, you know, like I kind of know I have a short attention span. So the very first version of Gmail I wrote in a day, and it wasn't very good. But I had previously been working on Google Groups, which was like a Usenet search at the time. Now it's something different. But I took the code that I'd been working on for that, and then I just like took all of my email and shoved it into that database, into that indexing engine. And then, you know, I kind of had an email search. So your first thing was just an email you could search. Yeah, and so then I like emailed that out to the engineering team. I'm like, hey, I built this email search. Let me know what you think. And then people reply like, yeah, it's okay, but it would be better with my email instead of yours. So I'm like, all right. I have a feature request. So version zero only searched my email. And then like, you know, the next version, I made it so it would search other people's email. But there's a stunning lesson in there, I think, which is like the point wasn't so much that whose email was being searched. It was that email was being searched. Like you guys got to realize back then you couldn't really search email. All you could do is like find the email you wanted and click on it. So searching was like a thing. Yeah, and I figured, I mean, a lot of our email is in common, so it sort of works, right? We're on a lot of the same mailing lists or whatever. Everyone's CC'd. So yeah, so then version two is just like it indexes other people's email. And so I send that out. And then people are like, all right, this is cool. Now I want to be able to reply to one of the messages. All right, feature request, right? And so the whole thing was just iterating, you know, just step by step trying to make something that would make people happy. And so we actually had as our kind of like launch gate this idea that we needed to have 100 happy users inside of Google because, you know, we just hadn't launched it to the world, obviously. And so I actually embedded in the interface this thing that would pop up and be like, are you happy, yes or no? It was just like a single question. Are you happy with, you know, Gmail? Or it was at the time known as Caribou. Yes or no? And it would get a list then I would look at of who said yes and who said no. And then I'd go to all the no's and be like, what's it going to take to make you a happy user, right? And actually just get them one at a time. And some of the people, they're like, it basically has to be a clone of Outlook. And I'm like, well, you're never going to be a happy user. Actually, I did end up getting a lot of those. You are dead to me. I know. I did end up getting those people. And the way I would get them is that Outlook at the time, when you would hit two gigabytes in your mail file, it would corrupt the database and they would lose all of their mail. And then I had the only copy of their email. And so then they would become a Gmail user. Not always a happy user, but they would become a user. But anyway, other people, it would just be like a minor thing where I just need to add one feature or fix a bug or something and then they'll be happy. And so we kind of slogged through just one user at a time until we got to like a hundred happy users. Is that the genesis of what we call YC, the Buchheit rule? Maybe you can just tell these guys. Which rule is that? Right. So one of the ideas is like when you're starting out building something new, especially if you're kind of going into an established category like email, like literally email was like 30 years old when we started on it, right? So there is a lot of history and a lot of opinions about how email should be. People would sometimes angrily tell me I'm like doing it wrong because we made the reply on top instead of the bottom or like weird stuff like that. And so there's like all this history, so it's pretty much impossible to enter a space like that and make a thing that appeals to everyone. And if you try to do that, what you end up making is just like a mediocre product that nobody really loves. And so my philosophy and what we try to get all the startups to do is figure out a thing that will just have really deep appeal, even if it's to like a tiny fraction of people. If you can make that small fraction of people just like obsessively love what you're doing, it's easier to then grow that group, you know, because like there's always people at the margin where if I just make something slightly better, they're going to join into that group. So it's easier to start with that like that deep but narrow appeal and then broaden it over time than it is to start with just sort of like broad meh and then try to like convert people from meh to like loving your thing in mass. Yeah, I've been thinking about that lately just in terms of retention. Like if you get 100 people who never leave, that's a great place to start then if you have thousands of people, all of whom churn eventually. Yeah. Okay. So Gmail happened. And then you left. Yeah. So Gmail happened. And yeah, a couple years later, I left the company kind of, you know, it was becoming a big company again. And I just decided that wasn't the direction I personally wanted to go. And I just had a baby who had a pretty traumatic start on life. So I kind of had other things going on. So actually around that same time, actually even before I left Google, I was again reading Slashdot because that was where I got all of my information. And I saw this thing about the Summer Founders Program, which I thought like sounded super cool because I'm always just like looking for an idea that's actually novel. For those of you who don't know the Summer Founders Program, that's YC. That was the YC. That's caribou. Right. That ended up being YC Batch Summer 05. That's the one that had Reddit and a bunch of companies that didn't make it. Looped. Sam's company, Justin and Emmett's company Kiko were all in that batch. So I saw that. Justin Conn is the founder of Justin TV and Twitch and Atrium. So yeah, a few things. A few things. Yeah. So I was just like really interested. I didn't know Paul Graham or any of these guys. So I was just kind of like keeping it on my radar. Like I'm really excited to see. And part of that was my own experience, kind of like being there in Ohio and thinking like I'm excited about startups and I wouldn't even know where to begin. Right. Because I don't like if you go to Stanford, like your roommate probably has a startup or something like it's just in the water. But if you're from someplace else, if you're not from Silicon Valley, if you're not from this environment, like it feels like you're just excluded. And I really liked the idea that it was just this open thing. Like anyone in the world, you didn't have to know anyone. You could just like submit an application and they were going to like, you know, bring you in. And so like that idea. Turns out startup school is the same way now. Yeah, exactly. I mean, that's the idea that I think like really resonated with me is that it's like opening it up to everyone, even if you're not kind of like an insider or something. So I followed them, you know, pretty closely. I was one of the very first Reddit users, I think, when that launched. And then... Did you go to the demo day? No, I didn't make it to the very first demo day. Is that the only one you ever missed? That's the only one I missed. I've been to every demo day except the first. Paul actually has a distinction of having been to more demo days than anyone. Yeah. Than anyone, including PG and Jessica. Yeah. I don't know if it's a good distinction, but... It is a distinction. Yeah, it is a distinction. So yeah, then that fall, they announced, like PG put out this thing, hey, for the second batch, we're going to do it in Mountain View, like in this room, it turns out. And so I was like, oh, that's cool. I just dropped them. I didn't know him. I just sent him a cold email, introduced myself. I'm like, hey, if I can like help out in any way, just let me know. So he's like, yeah, come on by. And, you know, I started just attending the dinners and actually made my very first angel investment in a company in the second batch, WinterO6, which was Kevin Hale, who then later became a YC partner, Wufoo, which is a form filler. You know, it isn't like a company that IPO'd, but it actually turned out to be a really good investment. Nice first win. Yeah. I forget what the multiple is, but pretty high. Yeah. You know, my first investment returned like 10x, and it was actually a little unfortunate because it made me think I was better at it than I was. Yeah. I think it was maybe like 50x, something like that. Yeah. Hmm. Not bad. So, yeah. So that was kind of how I got hooked into this stuff. So I started at that point just getting to know the founders in each batch. And I've invested in every batch since then, at least a few of the companies. And how did FriendFeed emerge during that time? So yeah, after I left Google, I sort of like retired. And then we just like get depressed because it turns out retirement's not fun. Yeah. And maybe I have issues with depression. I don't know. But working distracts me. So I started talking to some other friends from Google who were thinking of leaving, and basically ended up starting a new company, which was FriendFeed. And that was actually, the actual goal of FriendFeed was just to build a place that was really awesome to work at. I was actually just trying to create a job for myself. We tried to recreate what it felt like when you were at Google in the early days? Yeah. Kind of like the best of parts. Because there was also a lot of stuff about Google that I found just tremendously frustrating. And so I kind of had this idea that like we could take like the good parts and not the bad parts. It's like a little bit naive. But that was the hope. And managed to get like an incredibly strong team, mostly of former Google people. Did you ever feel like, I mean, FriendFeed, it went fine, but it didn't obviously end up becoming like a $100 billion company. Did you ever feel like you could pinpoint what was missing from the beginnings of FriendFeed that might have led you on that path? Or I mean, was there a grand vision? Was that missing? Was it? I'd say explosive growth was missing. You know, social is, for those of you who don't know, it was a social network. We actually created the like button. So like the very first like button was on FriendFeed and then mysteriously appeared on Facebook a number of months later. They had been completely by coincidence. Anyway, social stuff is just really hard. We've seen this. We've had a lot of social stuff come through YC. Google has tried it. It's a really hard space. Somehow, some of these things that kind of like Twitter or Facebook, they just kind of like catch. And you can go back in time and make up a bunch of stories about like why it is. And some of those stories may or may not be true. But it's one of these things that I think is like one of the hardest product categories to like engineer success. But actually, I will answer your question. Which is that I did sort of come to realize this because in the process of trying to make FriendFeed a success, we kept running into this company, Facebook, who actually knew what they were doing. And part of why ultimately like I came to believe that Facebook was just this unstoppable force and that like we weren't going to beat them and Google wasn't going to beat them and Twitter wasn't going to beat them, like, no, it's certainly not my space. Right? Like none of these people are going to stop them. It's like having sort of competed with them, you start to realize, oh, they're really good at this. Right? So that was why I sold FriendFeed to Facebook because I'm like, wow, this is going to be like another Google-sized success. They were the best at what you were doing. Like Google was the best in the world at what they were doing when you were there and they were the best in the world and you weren't. Right. And so it's just like I should go there because it's going to be, first of all, I feel like another one of these Google-sized companies. And then like hopefully I can learn how they do it. And I think being there and kind of reflecting on it, one realization I had is that we kind of brought, like Google always had like a very product-oriented mindset. Like we would try to build products that were like what the user wanted. And you guys were the users. You built product. Like you said, you built Gmail originally for Google people, for yourself. And so with FriendFeed, it was kind of the same thing of like we're just thinking about like what do I want? And I think like one of the really powerful insights that they had at Facebook was that it's almost like it's not the end user who you have to please. It's the network. Because they understood that the most important feature of a social network is that your friends are there. And so sometimes there's actually a tension between like what's good for the individual and what's good for the network. And they would always do what's good for the network. Do you think that's just specific to network effect businesses, social media? Or is that a more general rule, do you think? Like an enterprise product probably doesn't need to think about that. Yeah, I mean enterprise kind of has some of the similar thing where you have to make the buyer happy, not the end user. Which is I think a lot of times why enterprise software is not really lovely to use is because the person using it isn't the person making the buying decision. So in both cases you sort of have to have a meta level where you're like we always talk about making something people want. But people you have to think more broadly than just the end user. It's everyone who's involved in the system. Right, right. And it's people get this wrong a lot of times where they think like there's this meme out there that like oh if you're not paying you're not, you're the product, not the customer or whatever. But it really isn't right. You have to identify whose happiness makes you successful. So like for Google it really is like the end, like the people using Google search. Like if they go to a different search engine like they're Google screwed, right. Like you have to keep those people happy. And you know with the enterprise example it's whoever the buyer is. I think the sort of subtle thing with Facebook was that what makes those people happy is that you have this like huge network, right. And so that's efficient and easy to use and right. And so you really have to think in terms of like almost what the network wants which is a different way of thinking. Yeah. So when you were, FriendFeed was bought by Facebook and so you landed in Facebook. Did it have a similar feel to their, I guess Facebook was a little bigger by the time you got bought. But did it have a Google like feel then? I mean there were a lot of people from Google. So yes. They say hi, you know former co-workers. Similarities and differences. So that was again one of the things, one of the reasons I was excited to go there was just like I had had this experience going through Google and it's very easy to over generalize you know like oh wow the reason we were successful is we had like you know brightly colored balls or something like that. Like you can make up all of these like rationalizations for what made you a success. But in retrospect everything looks different. The truth is I think the majority of the reasons you come up with are probably wrong. There's like a few key things. I will say though that like going into the office it kind of had that vibe of like this is a place that's going somewhere, right. And I think it's like a really powerful indicator and it's a subtle thing and it's a little bit almost metaphysical or whatever but like you walk into an office and you're just like how's the energy? How does it make me feel? When I'm here is that like when I watch my own energy levels am I going up? Is this making me feel like oh wow or is this like pulling me down? Am I like depressed because and I think the reason that works is because the employees actually know what's going on, right. And so if you're just there because like you're collecting your paycheck while you wait for the company to go bust like you're going to have a different energy from like. Yeah, you feel that. Because if you think like oh my God I'm going to launch this thing it's going to be so exciting like it's going to take over the world, right. Like it's just a very exciting feeling to have like these products like when we were building Gmail and Maps and stuff like there was this feeling, this palpable feeling of like this is going to blow people's minds when we put it out there, right. Like and that's a really exciting thing. Do you think, so part of the energy comes from these amazing products that you're building but it seems like part of that has to come from the founders and the just the attitude that they bring, the belief that they bring like whether it's Zuck or Larry and Sergey or. Yeah, absolutely. I mean I think that there has to be a founder conviction like they have to believe in what they're doing and not that they're just chasing after you know some trend like oh I read an article in TechCrunch I'm going to go off in a new direction. I mean I actually think like Zuck is probably the most extreme example of this I've seen. I almost feel like the whole world could tell him he's wrong and he'd be like no. Not really. And this is really reflected in some of the I think like internal mythology of the company. There's a really interesting and this is before my time but you know back when they were just a college social network they had something like 10 million users which for a social network isn't that much and Yahoo wanted to buy them for like a billion dollars and everyone is like you should take the money, right? Like it's a billion dollars. It's a lot of money. He took the money. He actually took the money. But then it changed. And then they like. Then it changed. And he didn't want to. There was pressure on him. Right. So like everyone around him was like pressuring him to take the deal and then by the way if you get offered a billion dollars take the deal, right, in case you have any doubts. And so finally, yeah, I mean it ultimately turns it down, basically replaces an entire management team after that because they were all kind of like we should sell, we should sell. And so it kind of brought in people who maybe believed a little bit more. Oh and then there's kind of like actually the story I meant to tell wasn't even that. It was that when they launched the news feed which was around the same time people were furious. So again, there were like something like 10 million users, something like 8 million of them joined a group protesting it. Like it's impossible to get that percentage of your users to do anything even if you want them to. So to like suddenly have the majority of your users like revolting or whatever and they're just like no, I think people are going to come around on this. And they were, you know, right, obviously, like the news feed is like a fundamental thing. But that requires. The news feed is Facebook for most people now, right? There's nothing else. But I mean, that requires, I think, like a pretty high level of conviction when essentially all of your users are furious at you and you're like, no, I think you're going to come around on this. For somewhat unclear reasons, this reminds me of another Paul Bukaitism, which is that Sam actually repeated in his introduction to the course, which was that, you know, what a company really needs is frugality, focus, obsession and love. And it seems like if you encapsulate those things, even in the very beginning, and you think about leaders like Zuck, that they kind of go together and make sense. Yeah. Yeah. I think like focus is one of the most important things because like as a startup, it's actually, I think, your most powerful weapon, right? Like the reason that you're able to take on like these big companies or whatever is because they're doing a thousand different things, right? And so the only way you can win is if you take everything you have and you focus it at one point, right? Because you are underpowered in every way versus these other companies. So the one thing you do have that they don't have is you can be like absolutely 100% focused on the thing that you're doing. And that was like, you know, with Google, that was part of the reason that we won at search was that was all we were focused on like early on, right? And you became the best in the world at it. Versus like everyone else is like, oh, we want to be a portal, right? We need all this other shit. So like that's really key frugality, I think, is also really essential. I think like one of the best indicators of if you're doing it right is essentially your input to output ratio So you want to do more with less? Unfortunately, most startups do less with more So like you give them money and they just burn it up and there's like no result So like being able to to produce a lot of outputs with a minimum amount of Amplified time and money, right, but you have to like amplify the money and get that ratio where it's like I give you a dollar and you turn it at $10. My god, that's a good business, right? like we just scale that thing up even if it's $10 worth of something like $10 worth of product $10 worth of innovation and so and this goes back to always figuring out how to do things in the absolutely minimal way and You know it means this is one of the key startup things where they're like it You know, if you if you're not embarrassed of your product You've waited too long to launch like these things are at the root There's a lot of like frugality there, right? Because you don't want to spend too much time or too much money Like you want to get it out there as quickly as possible and at as little cost You know So you don't want to spend too much time money on the wrong thing and you just don't know enough, right? You could have built too much email and you wouldn't have learned what to actually build, right? It's easy to go completely off the rails and it's one of the most surprising things like I've learned just working with so many startups Is how often the cause of death is too much money? Like I think there are companies that if they had not been so well funded could have been successful in the company, I like to make fun of not because they may have been successful, but just because it's funny to laugh at is Juicero like the the $700 juice bag squeezing machine and the thing that made that I think such a Like tremendous train wreck is that they gave them a hundred and twenty million dollars for that thing Before they ever like talked to any customer like if if Juicero had gone through YC and we gave them a hundred and twenty $1,000 they would have had to go talk to a customer and be like, hey Like we want to sell you this $700 juice bag squeezer, right? They would have had to talk to customers like like and that's the thing like we push so Like you have to go talk to your customers It's so easy to become detached and off in this like bubble of delusion And the problem with having lots of funding before you're really ready for it is that's exactly what happens So you can you can sell yourself on this idea? Oh, yeah Once we build the perfect juice bag squeezer like we're gonna take over the world. Everyone's gonna want to spend $700 I mean plus like you get this giant box in the mail that has tiny bags of juice in it It's awesome like everyone's gonna want this right and they were able to live in that delusion for Years because they never had to go out and talk to customers, right? If I recall you could actually just recreate everything you did by just going like that, right the reason for it So I cut open one of the bags The reason is I think to actually get it to work. They had to really heavily macerate the fruit So that's why I call it a juice bag squeezer is because it was actually already juiced It was so it was really just separating the pulp from the juice Which is why also it's no better than just like going to the store and buying juice like the whole thing was like built on a number of flawed premises, but But like in particular you weren't really even juicing. It has already been juiced. You're just straining the juice But there's a deep lesson there, which is no matter what you raise if you raise $50,000 or five million You you should think of the amplification you need if you raise five million dollars That doesn't mean you can create $150,000 worth of value and be happy you have to create 50 million dollars worth of value Yeah But you can't like it's easy again I think to come up with stories in your mind about how you're doing it because like once we release this, you know juice squeezer And and that's why I think like you just have to stay close to the customers You have to be out there selling because you can just become delusional otherwise and so that's why you know with startups like I I've just seen it again and again Like if they get a huge round of funding before they have product market fit It kills the company like it because because it's just too hard for the founders to resist that Because actually going out and dealing with the fact that you don't have product market fit. It's really painful It's easier to tell yourself stories about how oh, yeah, we're killing it. I'm hiring. I just hired a whole new team We've got this cool office like there's all these like a cool technology Yeah, we're doing all this amazing stuff. Like I'm in the press all the time. I go to conferences. I'm up on stage, you know, like Theranos like it's easy to just kind of like be completely detached from reality because because you're not out there Selling a thing and you're creating a thing that people actually want to use we were talking earlier It seems like there's this there's this interesting juxtaposition that that if you really want to be creating an epic company You have to be thinking about the future But you better be paying attention to the past at the same time because there's a lot of lessons to be learned about what goes Wrong more things go wrong than go right with startups. Yeah I mean, that's just the past but I think more importantly the present like that's the thing like you have to have some some you have to maintain kind of like a dual like a Dream or a vision of like what that future is of you know, something that gives you an orientation Like I need to head in that direction like like I think about you know, the Lewis and Clark expedition or ever They're like we're going west we're going that direction But like you don't really know all the streams and rivers and forests and mountains. You're gonna have to cross along the way, right? You but so you have to be very focused in the moment so that you don't get like eaten by a bear or something like But at the same time you have to have that vision of like where you're headed and so I think those are kind of the two things I've been being a most like between You know just paying incredible attention to your current customers, right? And having a take over the world, right? And I think the thing that happens with too much money is you just spend all of your time like dreaming of like the promised land But you but you're not actually dealing with the problem that's in front of you We may have I want to turn it over to Q&A and we may have covered most of this already which is fine But you've been spending a lot of time with YC batch companies doing I think what you're called hundred billion dollar office hours, which is which is My understanding is a way for you to help them think About what it might mean to actually become an epic company What are the like other two or three things maybe that we haven't talked about that you cover in those office hours? I thought this would be like a group office hour a hundred billion dollar office. Yeah, all of our startup school companies Yeah, so I thought a lot about you know, what is it that makes these these companies that are you know, Google Netflix? Amazon like all of these like just huge huge companies like What is the thing that gets you there and it's not? It's I don't think it's that you're smarter necessarily. It helps to be smart. It isn't that you're harder working Like there's a limit to how hard you can work What I think necessarily to get to that point you're sitting on top of a Big exponential change in reality or in the world. So like, you know Intel and Microsoft And in the early days Apple, we're kind of sitting on top of this like the rise of Microcomputers right and so like what made Microsoft a big company is that they got in early on Microcomputers and then they kind of owned that space right where the microcomputer operating system, you know And they were they were able to ride that If it weren't for microcomputers like they wouldn't have been able to do that and likewise, you know Google obviously was sitting on the growth of the Internet the reason that Google made sense and the thing that Part of the reason other people got it wrong Was they weren't thinking about the fact that the amount of information online was increasing exponentially? and so we were gonna have to get a lot better at like Organizing it right like Google's mission from the beginning is to like organize and make useful all the world's information And people are always surprised that they're aggressively gathering information. It's like right there in the mission statement I All the world's information so so so I what I try to have the the Founders I kind of give them a two-part question. And so the first part is like let's say I hop in my Time machine, which is hopefully a DeLorean And I like travel 10 years into the future. So I get out. It's the year 2028 You know, I take a look around I like grab some nearby people and talk to them or whatever I ask questions like What about the world of 2028 is fundamentally different from 2018? Like what's what's the thing? That's totally different, right? and so Donald Trump will no longer be president We don't really know the future I You just completely around me That was the first thing out of two Anyway, so the thing is what I want them to do is identify the change and this should be as it pertains to their Startup because obviously there's gonna be a bunch of changes But as it pertains to your startup but factoring out your startup because even if like Facebook didn't exist I guarantee someone would have built a giant social network, right? Like Facebook was was was sitting on top of that exponential change and they were the ones who were most able to like Capture it that position and hold on to it But if it wasn't them, I guarantee someone else would be in that ecological space. There's an evidibility There's an inevitability these companies will exist in some form and maybe you're making it a little bit faster or a little bit better Or something like that, but that position is going to exist And then the second part of the question is simply like how are you gonna be the one who captures it, right? awesome, so Let's do some Q&A any questions Ralph we found a way to Change coffee. So that's actually going to switch the entire market. I was wondering what's the Tipping point where you really approach the market and you know Know that you're going to convert a lot of it for us and customer interviews about 80% of the people want to try What our product does and we even have people pay 40 bucks for a cup of coffee I just take my money. So what's your question? So how do you identify the tipping point and really how do you execute that tipping point? That gets a market to that hundred billion. So the question is how do you identify a tipping point for a market? And execute really how do you make sure that it's uh, I Almost feel like this is being overthought if you've got people who will pay you $40 for a cup of coffee I would just start selling $40 cups of coffee like that sounds like a really good business and The tipping point is when you can't keep up with demand, right? And so again, like you don't you don't find this by thinking about it If you think about it too much you end up just like in delusional land you find out by talking to the market and having them give you dollars and and so it's it's like literally when you're just like scrambling to keep up with with demand and that and that's the thing that you get into in these like Hypergrowth companies like one of the biggest problems inside of Google is like we couldn't build data centers fast enough, right? Like things are just exploding so quickly that you can't even scale out. That's that's what tells you that you have that Yeah, it kind of hits you over the head, right? It's not like you don't you don't have to give instruction for when you're in hyper growth. You know, you're there in the back Best Practices for enterprise companies where maybe you can't launch something that's really really bad because there's requirements around security, etc So the danger I feel like with a lot of these enterprise things is that You end up not really solving an urgent problem because like when you talk to people they're like, oh, yeah This is it would be great to have this solution or whatever And so then you go off and you build this thing you spend years Maybe building this product and then you go to them. You're like here it is. We got it and like You know, we're really busy this quarter and actually we don't have it in the budget until maybe next year So can we talk again in nine months or something? Right like that's just deadly for a startup like so The way I try to think about it is you want to find someone? Who has a really really urgent problem, right? and so like the analogy I like to use is like imagine that your arm is pinned underneath a boulder and You have two options one option is to like gnaw off your own arm with your teeth Or the other option is to sign an LOI with this promising young startup like Right, like that's the kind of customer you want is like someone who's like desperate, right? And because they're desperate they're they're willing to put up with kind of a shitty product Maybe they're willing to spend a lot of time working with you, right? and so like actually one of the things that works really well, like is is is if the Founders are actually able to just go into the organization and actually work there So like that was how like the very early stripe installs Patrick Collison would show up and integrate stripe into your code He would just show up and do the work And so like that's a good thing and and if they're not really eager to have you come in and integrate into their systems or talk to their people or whatever like Maybe they're not in enough pain and like you need to go find a different customer who's in more pain And if it's a big enough market, there's got to be someone who's desperate back there Do you believe in using personas to represent your customers do I have that right? Uh, not really no believe in using people to represent my customers Sorry common denominators for the founders of hundred billion dollar companies So this was actually where the focus frugality obsession and love thing came from is I was actually trying to distill it down into a Small enough number of words and then I was gonna try to translate it into emoji But I failed at that part. I couldn't figure out the I couldn't figure out what is the emoji for obsession? They're like love. I'm like, okay a heart But there is I think like this obsessive focus there's there's almost an irrationality in some of these founders Like the example that comes out as like the most insane version of it is probably like Elon Musk So I actually he came in to Google Gave like a tech talk. I want to say 2003 or something like that And it was it was after he had started SpaceX, but before they had done the first rocket launch and someone is like What are you gonna do if the rocket explodes when you launch it he's like well I have enough money for three launches So I hope one of them succeeds like he literally plowed his entire fortune the first three blew up, too I think yeah, the first three did blob He they managed to scrape together enough money for like a fourth rocket But if that fourth rocket hadn't gone there would be no SpaceX and Elon would be bankrupt, right? Like he like that is insane I would not take all of my money and plow it into like some her brain rocket scheme, right? Like that's like a level of irrationality that is I think like wonderful The network So I think the question is, how come Google never made it in social networking? It just wasn't, I think, really in the DNA. So we actually had, even before Facebook, do you remember Orkut? We actually could have, at the time... Big in Brazil, right? Yeah. Well, it became big in Brazil. But I actually tell you, Orkut actually was taking off, and you can make up a bunch of reasons why maybe it didn't end up being the social network. But it was exploding. And then it became... It was growing so fast, it became unresponsive. So that was kind of why it died off, at least in the United States, is that it was just so slow. But part of the thing is that, within the company, I think it just didn't resonate with people enough. It wasn't really... It didn't become this crisis where, like, oh my God, we have to make this thing succeed. It was kind of like this thing that's over here to the side, right? And so Google is very much about these really interesting, big computer science problems and stuff like that. That's what really would get people excited. And this stuff kind of seemed like a distraction. I mean, the founders of Twitter, or at least two of the three founders of Twitter were Google employees, right? And they never would have built that at Google, because if you had built... It'd be like, what is this thing? There's nothing technically interesting about Twitter, right? And so I think it just wasn't really in the DNA. And then when they did try to do it, it wasn't because, like, Larry has a deep love for social networking or whatever, right? It was because they wanted to be competitive with Facebook. But by then, Facebook was way ahead of them and had a much deeper understanding of, like, what makes this stuff go. So if you're behind and not as good, you're guaranteed to lose. It's not a good outcome. So I think we're gonna call it there. Thank you very much, Paul. Thanks. "
  },
  {
    "name_video": "Patrick Collison on effectively running a startup",
    "description_video": "YC's  Adora Cheung and Patrick Collison, co-founder of Stripe (YC S09), discuss how to most effectively run a startup.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/80-patrick-collison-on-effectively-running-a-startup",
    "youtube_url": "https://youtube.com/watch?v=NprBQi0cSHU",
    "mp3_file": "downloaded/Patrick_Collison_on_effectively_running_a_startup.mp3",
    "mp3_content": "So Patrick, welcome. So Patrick is the co-founder and CEO of Stripe. He launched the startup, we're now a pretty big company, in 2010, correct? With his brother, John. Well, actually, we started working on it full time in 2010. But actually, to your comment just there about companies launching, it took us quite a while to launch, because we had all these kind of banking partnerships in place and so on. And so we didn't launch until September 2011. We'd been working on it for almost two years at that point. And every time we saw a PG, or really anyone else from YC, all they would ask us is why we had not launched yet. So some things don't change. That's interesting. So two years until you had to practice. It was, I think, one year and 11 months from first line of code to public launch. Which, to be clear, I don't recommend. That is not a good idea. It's just we had to, because we had to kind of get all these other things in place. It sort of took us so long to be able to publicly launch. We tried to be very disciplined about gradually expanding the number of users every month. And so even though we weren't publicly available, we got our first production user just three months in. And then every month, we tried to add at least a handful of users. And so by the time we publicly launched, we did have about 100 users. Which, I mean, back then to us, that seemed like a big deal. But it seemed very large. Speaking of, actually, when I was preparing for this interview, I was trying to jog my memories. And I remember specifically, because your office was near here in Palo Alto. And I remember back then, people would always talk about the Collison brothers running around, going to people's offices, and installing their API into the web apps. And in true do things don't scale fashion. And I assume you were not only trying to make sure they installed it, but also get user feedback. And it happened so much that actually, I don't know if you know, Paul Graham, PG, now calls it the Collison installation. And this is actually something we tell founders to go do this, do the Collison installation. Because obviously, in hindsight, it seems so obvious to do. Well, it sort of served two purposes. One is, to your point, it served as a really good way to get user research, and to get UX feedback, and so on. If you've done this, I'm sure you've had the experience where you design what you're absolutely certain is the most streamlined, user-friendly, straightforward, frictionless way to do whatever it is the product does. And then you present it, and put it in front of a user. And you just ask them to do whatever it is. And they find it completely impenetrable. And they're clicking all the wrong links. And they can't find the next button, even though the next button is there blinking green and stuff. And so it's invariably incredibly painful, nothing so sobering as watching somebody use the first version of some new product. But the other reason for us was, we would suggest to somebody they use Stripe, or they switch to Stripe, or whatever. And invariably, the response is, oh yeah, sure. That sounds awesome. But they'll postpone it, and they'll postpone it again. And there's never a moment where it's like, OK, this is the evening where I'm going to switch to Stripe. And so us going and accosting them in person helped, you know, people talk about it in sales. It's always like a why you, and a why this, and a why now, and these kinds of questions. And going in person kind of created a why now moment. It's like, well, we're here at your house. Did you just show up, or how did you? I don't think we ever actually just showed up. Although, perhaps we should have. But no, we tried to be kind of at least semi-invited. Got it. So Stripe now, today, I mean, you've come a long way since back then. I mean, it's not even been, it's really been a decade, not even. But I mean, today you're, well, you have 1,300 employees across nine offices across the world. You're doing, I have a list here. You manage 200 million API requests a day. You process billions a year for millions of companies across 130 companies. In your latest round of funding, Stripe is now worth $20 million, billion. Anyway, the list could go on. I'll stop there. Otherwise, people are going to think I'm your PR agent. But anyway, you've clearly done something right. And so I want to spend a lot of, I guess, the time today talking about running your startup from the perspective of the startup CEO, you yourself. And it's kind of like Zoom. Like, what do you think about from Zooming in on the day-to-day operations to Zooming out to the long-term strategic decisions? So maybe to help us ease into the discussion, one thing is when you start off, from the very beginning, a lot of friends get together. And they come up with an idea. And they're super excited. And they start working on it. And then at some point, they need to decide, ah, we need a CEO for this company. And some people aren't meant to be CEOs. But for you and John, I've met both of you. You're very smart, ambitious people with great qualities and attributes that correlate to becoming a great leader. How did you and John decide you would be the CEO? Well, I think Stripe is unusual, where John and I are a few brothers. We've known each other for a long time. And because of the relationship, we're able to place a lot of trust in each other. And we really do run the company together. There's no major decision that Stripe has made that we've not both been a part of. And it's not always the case that, despite being the CEO, I'm the person who, in the case of disagreement, it's not always the case that I prevail. Our dispute resolution framework is much more around which of us cares more than which of us holds this title or that. And John's title is president. So there's some, I don't know. Both are significant roles. And so in that regard, I think we're kind of an anomaly. The fact that I became CEO was, honestly, semi-random. And I would say, yeah, I think because we're brothers, we're able to get to this unusual situation, where we really do run it together. Is there a certain? Which, sorry, may not be a helpful answer. Because perhaps you're trying to encourage all these companies. It's like, shit, one of you guys has got to be the CEO. But. Well, do you think there's a rubric for this? Here are five questions you should answer. And maybe then you decide. That's a good question. Maybe not. I'm guessing it's quite. OK, well, I will say one thing, which is I think it is important to just have an efficient mechanism for reaching a decision. And it can't be simply orange around consensus. If there are three co-founders, and none of you quite want to, or nobody is a clear CEO, and you don't have some kind of efficient mechanism for having decisions get made, I think that is a recipe for failure. And even doing some kind of quasi-democratic voting is probably not a great idea either. And so for myself and John, we both have areas we respectively specialize in. And so that doesn't mean we have absolute autonomy and authority there, but we bias in that direction. So he spends more time, for example, working externally with users. I spend more of my time working internally on a lot of product and engineering things. That's not to say that he doesn't make decisions there, or I don't here. But again, there's a bias in that direction. And then secondly, we have this additional aspect where, in the case of it being a major decision, and we sort of respectively disagree, then we really do sort of try to make it based on which of us is just more passionate about it. Because that will correlate with the outcome. If one of us really wants to do something, or thinks that x or y is the right thing to do, simply wanting it to be so passionately is more, I mean, that can become a sort of self-fulfilling prophecy. And so I think it's kind of not irrational to have that be a consideration. Yeah. And I also see the best teams that work well together are the ones in which everyone, they all want the best idea to win, not their idea to win. And so there's a stepping back and an unselfish kind of way to get to that conclusion. Definitely. And I think that something that we're kind of lucky about that I think is very, well, exactly to your point, I think is definitely present in sort of the most successful co-founding relationships that I've seen is some degree of sort of dispassion in disagreement. And for us, I think that was kind of easier to get to because we'd been disagreeing with each other for 20 years. And so it had lost some of the emotional charge. But I think that sort of finding other mechanisms whereby you can get there, such that it's not sort of this, I don't know, this kind of, the notion of disagreeing strongly is not sort of a scary phenomenon. And the kind of both parties, or multiple parties if there are more than two, are kind of suppressing their feelings for fear of there being this divergence. You have, how many more siblings do you have? Do you have one more brother? One more sibling, yes. Three of us in total. Would you guys, would he join the, or is it just you and John as a special match there? Well, Tommy, my youngest sibling, he's sort of quite a bit younger than myself and John. So John is almost, or is approximately two years younger than I am. And when we started Stripe, I guess I was about 21. And I think, I guess therefore John was 19. And Tommy was still kind of definitively midway through high school. And so it just wasn't quite practical at the time. Yes, finished high school. And now I think if you asked him, he'd probably say he'd never throw his lot in with miscreants like us. So in terms of the role of CEO, often people say there's a threshold in time in which, and it's related to product market fit, where you have a role as a pre-product market fit CEO, and then which is completely different from your role as a post-product market fit CEO. So I want to spend most of our time talking about pre-product market fit, but just to calibrate those questions, what, in terms for Stripe, what was product market fit for you? Like how did you define it? Were there metrics to it? What number of employees you were at when you reached it, so on and so forth? Yeah, that's a really good question. And I think you're exactly right to kind of divide things into sort of, there's kind of, the story of a startup is two stories. It's a story of getting to product market fit, and then the story of kind of what happens subsequently. And obviously there isn't like a totally definitive binary line between them, but I think it's kind of helpful to frame the narrative in that regard. And I would say for Stripe, actually around the time we launched publicly, I think is basically when we had it, in that when we launched publicly in September of 2011, we'd kind of rebuilt significant components of Stripe kind of multiple times in response to user feedback. Like we're kind of on the third version of our dashboard, and the second or third, depending on how you count, major version of our API. And so we'd kind of gone through a lot of iteration in response to kind of the evident challenges that users had or the deficiencies the product seemed to possess. And when we launched, we were basically immediately bottlenecked on sort of being able to serve user demand rather than generating user demand. And I think sort of directionally, that's kind of the sort of the inversion that happens where sort of, in the early days, you're sort of really trying to figure out, well, okay, kind of conditioned on or given some user, how do I make sure that it does what they need? And they end up a happy retained user in a sufficient fraction of the cases or whatever. And then kind of at some point it flows for, okay, the sort of, well, I think it's kind of very different. Do you sort of take a hundred users and some fraction of them on board and some smaller fraction remain engaged or whatever. And so kind of a hundred users, the curve sort of asymptotes downwards. And then do you take a hundred users and kind of, again, a meaningful fraction end up engaged and they actually tell more people about it or they sort of invite people. I don't mean kind of strictly just in a viral sense, but just kind of generally speaking, does that kind of lead to and generate more demand such that things seem to be sort of in some super linear fashion kind of growing. And I think when you sort of like being kind of less than one is just very different to being more than one. And it sort of seems, again, when we launched, I mean, that didn't generate that many users. I mean, I don't exactly remember, but let's just pretend that sort of 500 businesses signed up on the day we launched. But sort of immediately those 500 businesses told other businesses and people heard about it and all the rest. So kind of the next day, we had a lot of businesses as well and so forth, such that from the day we launched, the challenge became keeping up with demand rather than tweaking the product to somehow serve the market. When you launched, how many people were you at that point, please? We were about 10. So I guess before you launched then, like your day-to-day sounds like it was just, like we were talking about earlier, just running around talking with users and fixing issues. Was that literally every single day was like that or what were you doing every day? Okay, so not literally every single day, but I would say we really tried very hard to understand in sort of very granular detail what exactly it was that people were doing, where they were tripping up and so on. So just to give you some examples, we had a chat room for sort of providing support when people were integrating Stripe and it was actually a public chat room, which kind of had some downsides because if we'd broken something or if somebody had some kind of embarrassing issues, sort of everyone would see it. We thought that was kind of good because it would actually kind of put more pressure on us to sort of have the product be good. We had literally every time sort of for the first, I don't know, call it 10 users of Stripe, every time somebody sent an API request to Stripe, like it sent an email to us. So we were like looking at every single API request. And if we saw users do something weird, we're like, well, why did they do that? Or kind of where were our docs confusing or whatever? And so I'd get a dinner in the evening or something and I would put, well, again, it seemed like a lot of the time out of maybe 10 emails because Stripe was not handling a lot of API requests back then, but sort of you're literally looking at sort of each individual action. And actually Stripe, we just kind of celebrated or at least passed, we're not very good at celebrating, but we passed our seventh anniversary just a few days ago on September 29th. And so I was looking at our sort of, we had an hourly stats email that we used to send. And so on the day we launched, we handled sort of 22 payments in the previous hour, which again sort of seemed huge to us back then. But I was noticing in that email, I'd actually forgotten this, that we had things like in the email, we literally had a list of businesses that had submitted three or five or something API requests, but it's sort of not gone live. They'd not launched their businesses. We literally just had the emails of all these businesses. The idea was that we would then kind of, we would literally individually reach out to them. It's like, hey, you kind of seem to use Stripe a little bit, but you didn't go live. Like did we screw up or was the product somehow inadequate or whatever? We did things like every time anyone ever hit an error of any sort, that generated like a high priority email to us. And so we would sort of try to immediately go solve it. And that also kind of generated sort of, I think this pleasant kind of user experience where, I mean, it's frustrating when you hit an error in some service, but we could then often sort of 15 minutes later, reach out to them and say, hey, we saw that you've encountered this problem. It's all fixed now. And sometimes we did it even in the case where sort of the users made a silly mistake and that they kind of mistyped an API parameter or something. And we just reach out to them and be like, hey, noticed you had a typo in your code, which perhaps some of them was a little bit unsettling, but at least kind of helped us increase the kind of the throughput of product feedback. But so, I mean, these are all kind of examples, I'd say of the sort of general pattern of sort of really trying to be kind of hyper attentive to all the micro details of sort of what people were doing the product and kind of iterating rapidly in response to it. And generally speaking, I think that sort of pre-product market fit, metrics are actually relatively unhelpful. I think you sort of, you really want to buy as very strongly towards kind of as much sort of inspection and kind of high throughput qualitative feedback as possible because probably not that many people are using your product, right? And so, if it's 20 users, you can kind of in some sense afford to just like look at everything they're doing and try to understand kind of. of you know what's working what isn't. Yeah in some sense it's how much do they you can tell subjectively like how much they love your product or how much are they gonna probably be really upset if it just disappears. Totally and actually on this point we had a thing at the bottom of every web page and we had a little sort of text box and kind of anchored to the bottom of the of the sort of the browser frame and and sort of you know one line high sort of text input and but we had placeholder text in it to sort of try to prime people to tell us things and so it had you know my my favorite part of Stripe is ellipsis and you know people just fill it out I'm gonna hit enter now but we also of course had you know most of the prompts were negative it was you know like the worst thing about Stripe is or the worst thing about this page is or I really hate the way Stripe does or whatever and and again we would sort of sort of at that stage you have to be kind of masochistic and so again we'd be sort of always waking up to you know all these emails you know telling us all the terrible things about Stripe but that was you know it's a helpful to-do list for the day ahead. How did you stay happy if like in the early days I mean what makes you think we did so it was I would say it was well happy is such a squishy concept right and because like there are lots of things that we I guess when I look back and look maybe this is the rationalization I taught myself but when I look back and sort of through life of the things that I'm sort of most glad I did I wasn't exactly happy while doing them like often I was very stressed out or you know I had to work really hard or whatever but sort of the things that kind of post hoc brought the most fulfillment and and you know I think that well you know part of it is there's a rich literature here and so I won't kind of dive too deeply into it but I do think kind of happiness is a is a tricky concept to kind of pin down because you know is that kind of happiness in the moment is it sort of the sense that you have a year later looking back and so on and so I think and you know language is squishy and it's not you know completely specifically defined but I think kind of generally speaking kind of a better utility function and kind of gradient to try to climb is that of fulfillment and and so I would say kind of the experience of doing stripe was it was not especially happy because we were sort of you know constantly sort of incredibly aware of all the ways in which the product was severely deficient and you know all the challenges we faced and I mean it seems like there was no fintech category back then it was just like two teenagers or you know just just over teenagers trying to compete with PayPal which you know many people told us was not an especially kind of promising Avenue to pursue and so not especially happy per se and but it did feel kind of fulfilling and like I enjoyed working with John and the kind of people who subsequently hired and it was really fun working with the kinds of kind of customers we were serving they were just sort of businesses doing all these kind of wonderful things and they were kind of really smart people and it felt that like if it worked it could be kind of consequential in the world and so I would say kind of it's sort of felt like I mean well you know I don't know what it feels like to be sort of a scientist or something but I'm guessing when you're sort of pursuing all you have this kind of big question and you're pursuing all these kind of avenues to sort of try to better understand it and I'm guessing day to day it's sort of not especially happy because you know most your experiments don't work or whatever but sort of in perhaps there's some analog there in terms of them it still feels like it still feels in some sense meaningful yeah they're in some sense I mean it did a day like you said you just you're running around with your head cut off but maybe on a weekly or at least monthly basis is just taking a step back and seeing like what progress have I actually made because week to week it's like 1% here 1% here doesn't seem much but from a monthly basis or you know maybe longer than that it it seems like there's movement yeah and I think that's true and I think I don't know like I think it's almost certainly a bad idea to sort of work on a company or to work on anything if if you're like truly unhappy working on it right and so there's kind of cheerleaders and balancing act there and I think I mean a lot of well there's sort of so many different sort of difficult judgment calls to try to make a startup but you know of course part of it is like if something is making you unhappy or if it just doesn't seem like an especially promising Avenue or it's not really working whatever like your time has relatively high opportunity costs like you don't get to start that many startups in your life right and so kind of knowing when to sort of call it quits I think it is actually I mean sort of you know in startup them we really extol and sort of uphold the virtues of sort of you know determination at all costs you know never quit and so on and you know that's clearly not the right answer and that like sometimes you should quit and so so I think what you're getting at is true and right where I think there does need to be some sort of some happiness satisfaction fulfillment there's a good book of that name satisfaction which I recommend kind of week to week month to month if you're on the right trajectory oh man I wish I had known that I could have you know what I remember when I was trying to when I was about to put stripe myself I had these bad memories of trying to implement PayPal and like stacks the documentation and taking like five days to figure it all out and so I sat down I was like it's because you guys are saying oh it took you 10 minutes I was like no way and it probably took me actually five minutes at that point and I was I was super happy I mean that's like but maybe I should have sent you a review yeah I mean they were great especially if the review had a sort of criticism for us but no it was it's definitely helpful to have competitors with not very good products yes okay so you were in the early days you were doing a lot of stuff yourself at some point I guess two part question one is one of the things that you weren't good at and then two at what point did you hire someone to what what I assume is to do those things well I mean I'm not looking at most things right and I see there's a non sort of false modesty or I don't mean to get artificially self deprecating but sort of for almost anything that stripe has to do there are sort of people who are better at that than I am and so I think to some degree sort of the story of say you know product market fit and to say our current stage is kind of implementing the recognition of that and kind of more and more areas that said I think maybe sort of embedded in that question is you know okay well acknowledging that you're probably not the world's expert in in any single thing it's kind of in what order do you sort of replace yourself and for stripe the sort of the the important thing they were sort of most obviously not that great at was kind of partnerships and you know as it working with the various banks that we have to sort of get on board and so on and so kind of we made them in fact Jeff Ralston who is here in the room today I think sort of was some combination of sort of very supportive and perhaps in the back of his mind sort of slightly pitying you know where he saw us kind of trying to get these partnerships with these kind of big banks in place and we really weren't getting anywhere very fast and so he told us that we had to hire this guy Billy Alvarado and I told us just don't ask me questions just hire this guy and at the time everyone everyone at stripe was an engineer and so we just we kind of couldn't quite understand what a non-engineer would do like you're not writing code what else you know is there and and so we were kind of suspicious of this idea and and we sort of we went back to Jeff we met Billy he seemed like a wonderful guy we really liked him but we couldn't quite get past this okay but like what is it actually how does this work out in practice and so Jeff told us that we should hire Billy and if didn't work it over the first few months or whatever that if it didn't work out Jeff would sort of go back and pay his salary so it's gonna zero risk move for us and and and so and and we did not have a whole lot of money at the time so that was those not insignificant so we we hired Billy and that was sort of an immediately trajectory changing event where you know previously when we gone and talked to a bank I mean I don't know if they're literally doing this but certainly felt they're kind of pushing the security button under their desk it's like why are these guys in my office and and then suddenly things started to go kind of much more smoothly and and Billy is still with stripe today and day has been an enormously kind of a pivotal presence and so that was to note you very helpful advice that is interesting Jeff as an inflection point for stripe never knew cool so it sounds like you had hired actually people before Billy I guess the first your very first hire the third person between with you and John it was an engineer I'm assuming like well he actually wasn't an engineer but he joined stripe and he started to become an engineer so like he'd written a little bit of code previously but he joined him which I mean there's a lot of code that had to be written it was a guy I'd known from college he's actually also Irish and we love code to be written and so he was the kind of person who you know would sort of survey the landscape and just do whatever was was you know most important and required at that time I was writing code and so off you went so kind of the transition from preproduct market fit to post product market fit a lot of CEOs when they think back this is like the one point in which they think I could have done that better so how did you how did you grade your success of that transition because a lot of it is you know just taking stuff delegating stuff better and doing other functions of the business so what exactly was your transition like and you know how would you how could I if I was going in your shoes tell that I was doing it well yes I don't think I did it especially well and I think it kind of you know fortunately sort of you know it worked out but I think if if I was doing it all over again I think we could have sort of accelerated ourselves by a year or two if we'd sort of gone about it in a somewhat more disciplined and kind of self-aware fashion I think the I think one of those kind of pernicious sort of mental models you can have here is the kind of you are on some growth curve and it is sort of your job to sustain or you know marginally inflect upwards or is it kind of somehow and you know that one to them is curling the sport where you're kind of you know wiping the ice while the whatever it is the weight proceeds down along it sorry I'm not Canadian but um and but kind of somehow you're kind of making kind of these very small interventions and perturbations on some underlying growth curve and I think that's an easy mental model to have and I think it's kind of you know actively kind of fallacious and mistaken I think kind of a much better mental model to have is you're serving some market and market is I mean for it's relatively finite in size I mean you can always you know change the project and increase the market size but sort of you know you can you can think of it as being finite and then there's sort of the percentage of the market that you're serving and then you know whatever percentage you are not serving is kind of well you just haven't built the sort of go-to-market functions and organization that's kind of capable or at least has yet sort of brought the product to those market segments and the kind of the growth curve or adoption curve is just kind of a function of of that go-to-market apparatus but basically it's it's it's not some kind of cosmic trajectory it's something kind of very much of your creation and under your control and so what I what we did not do but what I wish we did is kind of and maybe whatever you know just after we launched we there's a whole bunch of kind of immediate scaling work we had to do but say six months after launch that we should have sort of mapped out the kind of concentric circles of our market like maybe there's kind of you know very early stage startups that were kind of you know our sort of initial initial constituency then there's kind of all technical startups but you know not necessarily very early stage and there's kind of I don't know you you keep going these kind of successive increments until eventually you get to say all companies handling online payments or something right and I'm gone and sort of figured out okay kind of what's the size of this market sort of you know kind of what fraction of them are we currently serving what would it take to serve more and so on and I think it's quite striking you see that kind of when repeat founders go and start companies they almost invariably are willing to kind of build the organization you know post product market fit though it's invariably willing to kind of build the organization ahead of where things are today and which I think is exactly the right thing to do because they're thinking okay I have the right product now let's kind of work backwards from okay what would the organization look like that was serving the entire market and let's just start building that organization because again the growth curve is under my control and you know of course it's not like 100% under your control but I think it's much more under your control than then things that people tend to think there's also of course a difference here a major difference when you can use or I think about sort of consumer versus kind of b2b use cases where consumer it's a bit more I mean people don't necessarily know exactly what they want you know what's the the market size for like a news reading app or a dating app or something I mean it's it's it kind of it depends a lot on the product like you know maybe way more people should be reading news or something but for for sort of a for some service or a product that sort of serves a discrete logical concrete function that sort of a set of businesses or entities definitively have or don't have I think it's kind of much more sort of much more rational and much more mappable and I partly had this epiphany when I'm Aaron Levy who's the CEO of box John I eventually we started down Palo Alto we moved up to San Francisco I don't well Aaron Levy had Facebook messaged John and we'd never heard of him and we hadn't heard of most people in Silicon Valley and but he'd Facebook messaged us like very early on asking to invest in stripe and I think John didn't know who's this random guy and so we never replied and but then you know we heard of Fox and we heard of Aaron and you know we read his funny tweets and all the rest and so we moved to San Francisco and and we invited him to our housewarming I think was the first time we'd ever met him and sort of you know like we're not very good at partying and so you know by sort of 11 p.m. or you know midnight or something kind of everyone was going home and but Aaron was still there and and Aaron stayed under like 2 a.m. I still remember kind of sitting in our front room telling us how much better it was to be building b2b software than consumer software for this reason we're sort of consumer software it's so hard to predict sort of what people want they don't even know themselves what they want you're kind of you're it's such an amorphous space whereas when you're selling software to businesses you know businesses are kind of are mostly rational are mostly the opposite of inscrutable is scrutable I guess and and so you can sort of work backwards in a way that sort of it's just much more comprehensible and so I still have this kind of you know it's like the angel and demon on your shoulder I still have sort of you know 2 a.m. Aaron Levy sitting on my shoulder sort of extolling the virtues of building software for entities that I that know what they want you've made the right choice yeah in some sense that there's a lot less variables or in consumer there's a lot more variables to to consider and they're quite unknown I want to take a step back you talked a little bit about you know thinking about thinking ahead about what your team is or what your company structure is going to look like how do you maybe this is too big of a question so maybe we can whittle it down a little bit but how do you think about that like like I'm sitting if I'm starting a startup today I'm close to maybe a product market fit but before that stage like am I thinking about this sort of thing like what should my team look like what should my culture be and stuff like that I think that I'm well okay so pre-product market fit I mean the goal is really is just to get to product market fish and so I actually wouldn't bother thinking too much but all these kind of distribution mechanics questions now you can get a product market fit sort of relatively quickly and so kind of that pre-product market stage might only last six months you know you're not necessarily like stripe where you're gonna in it for various reasons for multiple years and so it may not last very long however until that point I really think you should just be thinking okay how do I get there the main thing that I think companies screw up at the pre-product market fit stage and is sort of speed of iteration I think okay well what determines or you kind of speed of fruitful iteration and that sort of I mean if you're kind of completely or if you're repeatedly rebuilding our product, but sort of not in response to user feedback. I mean, that's kind of far less likely to be kind of bringing you in a productive direction. But if you have some kind of meaningful, albeit perhaps small, initial set of users, and you're rapidly iterating in response to their feedback and observed behavior and so on, then I think that's a really good spot to be in. And I think, again, at that juncture of pre-product market phish, you should be doing everything you can to tighten that sort of feedback cycle. There's a fighter pilot who kind of revolutionized airborne combat in the US in the second half of the 20th century, so the Korean War onwards, called Boyd. And he had this concept of the OODA loop, which was sort of a similar notion of the most previously people thought you wanted just like the fastest aircraft or sort of the most sophisticated weaponry and so on, where he was all about sort of, no, you actually want aircraft and sort of pilots and training that are really oriented around sort of the fastest sort of responsiveness and iteration to the kind of particulars of the situation in a way that kind of subsequently went on to really inform sort of modern aircraft design. And so I think you want to be like one of these modern fighters, where you're sort of really optimized to respond as quickly as possible to sort of rapidly evolving situations, again, in this kind of pre-product market stage. And so then from a hiring standpoint, I think it should really be about, OK, well, what's going to get you there faster? And I mean, I think at an early stage, it's most likely, well, sort of just people who will help you kind of build a product. But of course, not too many, because I mean, at some point, like, you might be able to do more, but you might actually be less responsive, because you're a bigger team to manage or something, right? And so as an empirical matter, it seems that somewhere between kind of 2 and 10, depending on exactly what you're building, is kind of the optimally responsive size. But I think it really is about that sort of time from observed sort of necessity or deficiency or just characteristic of your user's behavior to executed fix or improvement, and whatever it is that kind of minimizes that. Is there, I mean, you say 2 to 10, which is helpful, but are there observations or evidence in which you have hit the peak? Like, you should not add an extra, like, this extra person is going to be negative value add to the whole operation. Yeah, I mean, every person, well, startups in general involve all these kind of impossibly difficult sort of judgment calls in this kind of high dimensional possibility space. And so it would be great if you could sort of collapse it down to kind of a fairly simple set of trade-offs. I just don't think you can. However, I think in principle, the calculation you're sort of trying to run is, OK, each successive person takes time to hire, and so slows us down in that regard, takes time to onboard, slows us down in that regard, kind of takes time to just kind of meld with the culture and learn the stack and all that stuff. That also takes cost and time. Then involves subsequent ongoing costs of just like coordination and alignment, and sort of you sort of now have the organization is now distributed across more neurons. And so there's that kind of persistent tax. And that's not just necessarily a linear cost, but it can be sort of quadratic or something, kind of given the multi-way communication problem. So you have all these costs to an additional person. And so the question is, OK, but this person can also help us get more shit done, right? They can write more code or talk to more users or whatever. And so it's kind of, is that fixed benefit to sort of that additional person worth all these other costs? Again, with I think the ultimate arbiter being, will we be more responsive to what we're learning about our users given the presence of this additional person? And I think whether or not you will be depends on the complexity of the product and the complexity of the market and all that stuff. But I think that's in principle the calculation you want to be running. I've heard you said, speaking of hiring people, I've heard you said the key qualities that you look for in a future Stripe employee is intellectually honest, cares a great deal, and just loves getting things done, which are great attributes because some people just don't fit in those categories. So it's good to have the separation there. How do you, when you meet someone, how do you figure out this is the right person? It's very hard. I wish I had a more sort of definitive rubric and kind of particular set of questions. Although if I had a particular set of questions, maybe they'd stop working because kind of people would learn how to game them or something. And so, I mean, well, it's hard to fake just being smart, right? And so that one's kind of not as hard to discern. And it's oddly hard to fake being intellectually honest and sort of the characteristics of kind of being able to see multiple sides of a debate or an argument. Like there are so many kind of complicated questions where sort of the only thing that I'm really skeptical of is kind of certainty in either direction, just because the questions are intrinsically sort of involve very contingent trade-offs. It's also, it's not impossible, but it's hard-ish to fake just being nice. Like something we hear a lot about at Stripe is just sort of people who are pleasant and warm and sort of just make others happier as a result of their presence. And if, well, perhaps if you can fake that perfectly forever, you know, that's fine, right? Maybe then. But yeah, they're all sort of actually, there's no clear rubric for them. And I'm not sure that a clear rubric could even work. Yeah. So you talk about get people who help move the organization faster, if at all possible. And I think there are two issues usually that start slowing down the organization as you start scaling, just because each person adds just more complexity to the organization. But also, I think one is asymmetric information, just people that are never on the same page. And I think you've talked a lot about this, I think. And so everyone can Google around for lectures you've given on this on. You've done email transparency, obviously having metrics transparent to the whole organization. But the second problem to that is if you fix that, there's also this asymmetric interpretation problem, which is everyone's, there's this like black box function that how people interpretate. Even if all the inputs are the same, the outputs are all different. And especially at your scale now, it's nearly impossible to figure out everybody's function. So when you're thinking about creating your organization and building it out, how do you reduce that, reduce that noise and try to get everyone on the same page? Well, the first thing is I wish we had actually between, say, 5 and 50 people. I think we are much too consensus oriented. We, of course, weren't completely consensus oriented. I mean, we couldn't have gotten anything done if we were, but I think we kind of biased too much in that direction. And again, it's just not that efficient, right? And it's sort of, it's necessarily not the case. And so kind of like you can sort of perhaps maintain some kind of fiction for more or less time, but sort of ultimately speaking, there is no way of sort of sustaining that. And I think that's a relatively common mistake, right? Because, you know, you almost invariably come from some kind of, you know, N musketeers or some small N sort of kind of orientation where sort of there's no particular need for sort of formal decision making mechanisms or sort of, you know, subsequent communication of said decisions or whatever, right? But then you kind of, you hit 15 people and now there is, and kind of, I think companies don't adjust quickly enough to sort of that new necessity, again, very much us included. And so I actually think we did relatively well on the kind of ambient availability of sort of context and information and so on, but actually kind of in some sense poorly at sort of deliberate explicit communication of decisions, decisions being, I mean, actual kind of tactical decisions or even, you know, bigger decisions like, you know, what are our priorities the next six months or things of that nature? And so the high order piece of advice and perhaps I'm over extrapolating from our personal experience, but the higher order advice just kind of reflecting back would be to kind of, it's kind of like the pre and post product market fit thing. It's sort of actually about the size of the organization where it kind of, when you hit a certain size, again, maybe I'm just gonna say 10 people for the sake of simplicity. It's a bit before, it's a bit after. I think you need to kind of adjust more deliberately to this kind of explicit communication model of sort of being sort of quite firmly non consensus based and sort of, I mean, nobody likes the idea of sort of being hierarchical. That sounds pejorative, but like in some sense hierarchical. Sort of the top down, like it does move things faster. Maybe some people don't like that, but it does move faster. That's right, that's right. And there is this kind of delicate balancing act you want to sort of orchestrate where kind of on the one hand, you want to sort of really prioritize speed and agility, which involves being kind of somewhat hierarchical because those are sort of efficient sort of symmetry breaking mechanisms and ways to sort of to have shots get called. But on the other hand, you really do want people to have this kind of strong ownership mentality and real sense that sort of they can cause things to change or identify problems or sort of inject new ideas even in unrelated areas. And so it's this sort of delicate act where, I mean, you definitely can be excessively hierarchical. But sort of how do you sort of facilitate enough autonomy and agency, but also not have things devolve into this kind of, I don't know, sort of uniform morass of sort of, I don't know, all these kind of Brownian motion. And I think that's hard and requires all these kind of ongoing sort of tweaks and nudges. And I mean, it's dependent on the personalities involved and all the rest. And again, I really wish there was kind of the sort of rote simple, well, just do X, Y, and Z and you'll be good. But sort of if such X, Y's and Z's exist, no one's told me yet. If only there was a formula for everything. So riding on the same theme, as Stripe grows, you strike me as a company that does the opposite of most companies, which as they get bigger, they just slow down and they get less innovative. But for you guys, and it's hard to even keep up, like you're just pumping out new products which seem to be successful to me, like Stripe Atlas, Stripe Press, Stripe Terminals and so forth. So in the early days, when there's just nine or 10 of you, if someone had a new idea, it's probably really easy to get to you. And then you guys would decide. How has that changed over time to make sure that someone who's like six degrees away from you, that a good idea actually gets to you? And then how is that decision made to actually execute upon it? Well, it's very nice to hear you say that it feels like we're getting faster as we get bigger because we're constantly sort of self-flagellating over how like fricking slow we are and like paranoid about sort of, I don't know, degenerating into some kind of sort of immobile stupor. And so to whatever extent we do get things done or appear fast, I think it's largely because we're very paranoid in this dimension. And I think that kind of the default outcome of companies, of course, as they scale is to become sort of more ossified and rigid and sort of closed to new ideas and directions and things that contradict their prevailing orthodoxies and all of that. As to how we kind of avoid that, I mean, well, there's lots of kind of obvious things, like partly it's sort of, I mean, having leaders who care about the rate of progress and just love seeing things happen quickly and lots of things of that nature. I think maybe sort of deeper rooted is we try to be a kind of yes and culture in that, I mean, I personally love just ideas and potential things we could do. And I mean, most of them are, I mean, no matter how good the idea is, sort of we should not pursue most ideas, right? Even if independently it could be a super successful company or something, but like there is a fairly finite number of things we can do. And so sort of you kind of, on the one hand, need to recognize that intellectually and just like not pursue most things, while on the other hand, enjoying the exercise of contemplating, well, what would it look like if we did it, right? And so one thing we do every year, for example, is we have this kind of crazy ideas process, we call it, where we literally send a document to the whole company, a hack pod document that's open to everyone and people can sort of add ideas to it that they think are probably a bad idea, but if they worked, might be a great idea. And it's very important that they have to be probably a bad idea, because if they're like probably a good idea, then I mean, it's not that risky and I mean, kind of by definition, we should probably do it. And so, you know, whatever, maybe we should just do it. And so people like really self-censor a lot in most organizations, because they don't want to look stupid and they don't want to be sort of associated with just having all these like wacky bad ideas and so on. And so we try to be fairly firm that if you add ideas to this, it has to be probably a bad idea. And actually a lot of cool things that we've subsequently gone on and done first came from that process, Stripe Atlas, you know, being one of them. And also we sort of helped Stellar get off the ground this sort of cryptocurrency back a few years ago and sort of that also sort of came from this process. And so that's one of the mechanisms by which we try to have a kind of yes and culture. And I really think there aren't that many, as just as an empirical matter, there aren't that many large organizations that I think sort of really do this successfully. But I think that sort of the most successful larger organizations somehow do succeed in sort of this iterative, repeated process of kind of augmentation, you know, Amazon and Google being kind of the most prominent examples where, you know, obviously even Google launched, there was no Gmail or YouTube or Android or Google Maps or whatever. And, you know, Amazon sort of is kind of an even more conspicuous example in some sense of this kind of repeated attach of successful ancillary businesses. And so I think kind of, yeah, there's a very natural temptation as you grow to I think become increasingly close to this. I think it's very important to avoid. Cool, so I have a couple more questions and then maybe we'll have time to take questions from the audience. One is, looking back, is there something, did you have a strong opinion of, you know, how startups should be run as a CEO that have just completely reversed because you're now the CEO? That's a good question. Another way to potentially put it is like, what are things that you did where you're like, I know for sure this should have been done and it just turned out to be a mistake? Well, I already mentioned the sort of the consensus orientation. One that we're going through right now, which is a quite sort of significant divergence is, you know, we were sort of fairly centralized up until sort of relatively recently. I mean, we had some remote employees from pretty early stage, but by and large, Stripe was kind of concentrated in San Francisco. Last week, we announced our fourth global hub, fourth global hub, and basically what we've decided to do is we're going to have kind of major sort of product and engineering sort of efforts and teams and functions and all the rest in San Francisco, also in Seattle, also in Dublin, and also in Singapore. And sort of these non-San Francisco locations are not going to be sort of, I don't know, operations offices or satellite offices or, you know, places where we do kind of some localization and local market adaptation. We want to have kind of completely de novo, new products that sort of become super successful. out of these offices. And that's not the sort of standard, obviously kind of Silicon Valley pattern where sort of Apple and Amazon and Facebook and Google and all these companies tend to be sort of highly concentrated in these sort of very, I don't know, sort of monolithic corporate headquarters. And our thesis is that, is kind of several folds, you know, partly that kind of the availability of talent is becoming sort of far more geographically dispersed, partly that sort of, you know, the Bay Area is becoming an increasingly untenably expensive location to locate. And partly that sort of, we really want Stripe to be global infrastructure that works kind of just as well in sort of Asian markets or in Latin American markets or whatever, as it does for businesses in the US and kind of the era of the internet being a sort of predominantly North American or North American and Western European or whatever, the days of being kind of such a phenomenon are over. And so I think that's sort of a fairly substantial break with kind of, you know, descriptive best practice of the past. I mean, you know, we obviously think it'll work and we wouldn't do it if we didn't, but it is also kind of on some level risky, like we don't have good, you know, prior examples to point to. And, you know, I mean, there are some great companies in Singapore like Grab and Carousel, but there aren't really any examples yet of sort of American companies establishing kind of major private engineering hubs there. You know, we're pretty optimistic it can be done, but, you know, kind of if it works, you know, we'll be the first or one of the first. Cool. Last question. So in 100 years from now, what is Stripe gonna be? What do you imagine it to be? Well, we're only seven years old, so that's a difficult question to answer. I mean, we're trying to build this kind of, this economic infrastructure for the internet and this sort of platform for globalization and kind of sort of technological progress in the sense that like it ought to be just as easy to start a company in sort of, you know, Nigeria as it is in New York. And it should be just as easy for somebody in Brazil to buy something sort of from any of these companies as it is for, again, somebody in the Western world. And it just seems so crazy to me that sort of that hasn't happened yet. Like it sort of feels that Stripe should have happened 10 or 20 years before it did. And just kind of, I don't so much think that we're sort of pursuing this kind of unprecedented kind of path breaking or sort of, you know, inconceivable idea so much as kind of correcting a deficiency in sort of a rip in the fabric of internet infrastructure. And so anyway, I think we still have, you know, at least five years to go in sort of correcting this inadequacy. You know, so what happens after that, I'm not sure. In some sense, in the future, all transactions should be digital and they could very well just be all going through Stripe. I mean, right now like in the US, someone was telling me like 80% of all Americans have done some transaction through Stripe, right? Yeah, that's right. So in the last 12 months, more than 80% of American adults have bought something from a Stripe business, at least one thing from a Stripe business, which is cool. And you know, it's not just the case in the US. Like in Singapore, where I was last week, you know, that figure is about 70%, right? But I guess we don't think about it. Well, I think about it more in terms of the things that are possible or get started, as in it's kind of, we think a lot about the rate of sort of new firm creation, what companies are getting started, how successful are those companies, which markets can they serve and so on. And, you know, every now and again, we look back and we look at sort of those kinds of market coverage stats, but I guess that's not really what sort of, what motivates us. It's more that sort of, are these businesses that should exist and or should be able to kind of offer their products and services, you know, in these places where they currently can't. And that's, I think, I mean, that's the kind of thinking that we use to kind of inform the product and that sort of is kind of the core locomotion day-to-day. And then maybe the outcome of that is that all these people get to benefit from it. All right, thank you so much, Patrick. This was great. Thank you. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "How to build a product with Reddit's Steve Huffman and Twitch's Emmett Shear",
    "description_video": "YC's Michael Seibel interviews Reddit co-founder Steve Huffman and Twitch co-founder Emmett Shear on how they built their products.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/7y-how-to-build-a-product-with-reddit-s-steve-huffman-and-twitch-s-emmett-shear",
    "youtube_url": "https://youtube.com/watch?v=6IFR3WYSBFM",
    "mp3_file": "downloaded/How_to_build_a_product_with_Reddit's_Steve_Huffman_and_Twitch's_Emmett_Shear.mp3",
    "mp3_content": "So, this is going to be the first of four lectures on how to build a great product. I apologize because none of the people here today can speak to that topic. My name is Michael, I'm the CEO of YC and help run the batch and program as most of you understand YC to be. This here is Steve, who's a co-founder and CEO of Reddit. And there's Emmett, who's a co-founder and CEO of Twitch. Can you guys introduce yourselves in a couple seconds? You just did, but I can do it again. I'm Steve, yeah, I'm co-founder and CEO of Reddit. I studied computer science, I graduated from UVA in 2005. I was at Reddit for five years, I left for five years. I've been back for about a year and a half. My name's Emmett, I graduated from Yale Computer Science in 2005. I started my first company right out of college. We made a bad copy of Google Calendar before Google Calendar existed. And- Google Calendar copied you. Yeah, that's right. And then we started Justin TV, which is the company that wound up turning into Twitch. And so I've been doing, basically continuously employed, working on that since 2006. And then can you just, each of you guys say whatever the KPI you guys track for your business and approximately what it is, just to give folks a sense of why you guys might be experts at building great products. One of our more shareable ones is monthly active users, and we hit 300 million last month. Nice. That's a good number. Our primary metric that we care about is a metric called minutes watched. It's the number of minutes of video that are consumed every month on Twitch. And we just crossed 30 billion minutes this year for the first time, which is very exciting. No, per month. So that's the main thing we look at, rather than uniques. So what we're going to do for you guys today is I have about 12 questions I'm going to ask these guys. We're going to see how many of them we get through, and then we're going to leave the last ten minutes for questions about startup stuff, YC, or whatever else you'd like to talk about. My goal is to kind of focus this advice on early, early stage. So these guys do a lot of stuff now that really is completely irrelevant to you. But hopefully they'll be talking to you about the things they did, bad or good, when they were starting. So I want to start with one of the major tenets of YC is talking to your users. And we repeat that a bunch of times, and then we don't really go into any detail. So can you guys talk a little bit about how you talk to your users? Maybe the good and maybe some of the mistakes you've made as well. Sure, so most of the advice I give today will have two perspectives, one at Reddit and one at Hipmunk. because the companies were completely different and had different paths. And I think kind of the ground rules for this discussion, the first piece of advice I would give is every company is really different and there are lots of different paths you can take. And what works in one place very likely won't work in another. So at Reddit, I mean, the product is talking to users, right? That was built in. In the early days, we didn't have comments and we didn't have communities. So actually, we got a lot of emails for the first probably six months, was the way we communicated to our users. But when we added the comment feature, there was basically no option but to talk to our users. And the challenge then becomes, which users do you want to listen to? And what are they actually saying? And what do they actually mean? Because they're often saying one thing and they mean something else. At Hipmunk, because we were selling plane tickets and hotel reservations, it was completely different. We didn't really have a good forum for connecting with our users. We used a product called Olark, which was basically this embedded JavaScript chat thing. And that was indispensable. We still use it. It was users, if they got stuck, they could ask us for help. If they wanted to give us compliments or criticisms, they could do that. And we can often, both over email at Reddit and over Olark at Hipmunk, turn emotional users, angry users, often will become your most loyal users. If you can flip them around, there's this absolute value of emotion. And so if you can find those angry users who are having a bad time and treat them well, they will likely turn into some of your most loyal supporters. So we found that whole cycle to be very valuable. The interesting thing for me between Twitch and Justin.tv, which are two very similar products, right? They're both live video products with chat. For Justin.tv, we were our own users. We were building a product for us to build a TV show. And after that, we really sort of declined to actually speak to users in a pretty significant way. And unsurprisingly, all of the good ideas we had were things we came up with when we were building it for ourselves, which sort of brings me to my first point of talking to users, is it's possible, especially very early, to build a product for yourself. And if you truly are building something that is for you to use, that can be super effective. In fact, you don't necessarily need to talk to anyone else. Eventually, you'll need to because you'll want to learn about people other than yourself, but for the first three months, it's possible to build something that's just something that you want, but you have to actually really want it. You can't be lying to yourself about that. It can't be something that you think is cool. It has to be something you, yourself, actually desperately want to use every day. And then we went through a long period in the desert where we were wondering about not talking to users, not really using our own product, and not building anything of value. And the thing we did with Twitch that I thought was really good for talking to users is we talked to them in person. I'd done some amount of surveys and talking to users over email, and I found that getting people on, at least on Skype, or if not, literally in person, changed my depth of understanding of who they were. The other thing I would say about it is that we focused down really hard on which of our users we cared about. And we decided it was the broadcasters, and we decided not only was it the broadcasters, it was the successful broadcasters. We didn't want to talk to people who had two viewers. We wanted to talk to people who had 200 viewers. And so we went and talked to a bunch of broadcasters on the platform, because we decided they were the important ones. The other thing we did that was, I think, really valuable is, we decided it wasn't just people who are currently using our service, it was people who we wanted to use our service. And so we talked to a bunch of people who were streaming on other platforms, rather than just already on Twitch. Because the people who have chosen to not use your product, especially if they've deliberately looked at your product, decided it sucked, and went somewhere else, are some of the best people to talk to. Because they know what's wrong with it. And so I actually think the most valuable things I learned, especially early on, were from users who had tried Justin.TV, they'd tried Ustream, they'd tried Own3D, they'd tried YouTube, and they had a coherent opinion as to why ours was not the one they chose. And that was super valuable, because they really pointed at the details of where we were wrong. And often those details are smaller than you think. Memorably, one of the biggest issues was, we were not listed on the Team Liquid StarCraft fan website. That was one of, we lost maybe 3,000 broadcasters over that. We had to email them and ask them to re-list us, because they just didn't have us there. Yeah, tiny, tiny issue, but really mattered to our users. It's easy to run your company for years, and then be like, I should have fixed this stupid one day fix, if you don't talk to your users. So a lot of people talk about MVPs, minimum viable products. How many of you guys have heard that term, MVPs? So one of the challenges that I have is that when folks like you apply to YC and get into YC, even though you know the idea that you should be releasing something that's crappy, you don't do it. And as a result, users slow down, and oftentimes that prevents you from getting into YC, or prevents you from building and talking to customers. And so I think that what's interesting is that Justin.TV and Reddit are actually pretty good examples of crappy MVPs. So can you guys describe how the products worked in the beginning, or maybe how they only kind of worked? Yeah, we started, I think I wrote my first line of code on June 3rd or 4th, 2005 for Reddit, and we launched on June 22nd. I didn't even launch it. Paul Graham linked to us from his blog without telling me. And from then, it was on. And the good thing about that, for us in particular, is we didn't actually have a vision for Reddit, for better or for worse. Which would affect us in a lot of different ways going forward. But as soon as we launched, that's when we started to find a path, and we just would kind of follow the users every day as what do we think is best for the users, what do we think is best for us, and just build towards that. And we built a lot of loyalty through those actions. And that would not have happened if we were sitting in our apartment not Because we launched, and then for the next six months, we just added a ton of new features, only about probably 25% of which actually lasted more than a day or two, but there was stuff we thought was a great idea. We had these categories. I remember in July at some point, I made Alexis, my co-founder, stay up all night one night categorizing every link that had ever been submitted to Reddit, and the next morning I was like, we launched, I was like, it's not working. Turned it off. But we could have probably, if we had lost, we could have had that feature until November, and then launched, and then wondered why it didn't work, so. I think that Amazon actually has a really good saying about minimum viable products. They like to call them, what they're aiming for, a minimum remarkable product, which I think gets more at what you're trying to accomplish, which is a viable product brings into mind this whole ecosystem of support, like a viable organism. That's got all the things it needs to live, and you don't actually want that. If you're launching something that's actually self-sufficient, that's viable in a real, this thing could go live on its own sense, you definitely waited too long. This thing is going to be on life support when you launch it, and you are the life support system. What you actually want is you want something about the product when you launch it to be actually good. You want to get to the part where you've built something that maybe at least one person in the world finds remarkably useful or remarkably good. You don't know, really, if you've gotten there until you put it in front of someone, which is why you need to launch it so quickly. But I think it's really important to remember Dropbox, for example, one of the big YC successes, did not launch an immediate product, because they were building a backup system. And backup systems aren't allowed to lose your data. And so the last thing you want to do if you're building backup software is go rush something out that's going to lose your customer's data, because you will never get that trust back. And so, the minimum remarkable product for Dropbox was a video basically saying, look at this awesome thing we're going to build, and getting people to sign up for a newsletter. And that worked because the visual idea of what Dropbox was going to do was super compelling. That would not have worked for Justin.TV. We really needed to get something out in front of customers immediately. Most importantly, because we really needed to produce this show. We had this idea, we're going to go build a show. And we basically did the minimum possible work, maybe a little less than that, to get a show onto the Internet. And when we launched it, it could only have one channel. The way that broadcasting worked, the only way we could actually get it to work consistently is we had a Mac Mini running Parallels, which is a virtualization environment for Windows XP. Where we had this piece of broadcasting software called. It got bought by Adobe later. OnFlix, OnLot, I can't remember. Anyway, that we were automating with Windows shell scripting to pick up the right, the camera input, and then auto reboot if it went down. Because it broke all the time, because it was a really buggy software. And that extremely jury-rigged thing worked. It put a video stream on the Internet. And it was not a scale, we could not scale that up to thousands of streams. It was impossible. But we got something that at least was compelling to at least one person onto the Internet, that was compelling to us. And that was a critical step for us. Because before we did that, we basically weren't learning anything. At HitMonk, we again started in June, 2010. And I had given my co-founder basically this ultimatum of what our MVP was. We have to have legit data, because we could scrape anybody. We needed legit data, real data. And when a customer buys a flight, we get revenue. And I was like, if we can do that in three months, we will continue with this business. If we can't launch that in three months, we're calling it. And that for me, MVP, that was that minimum useful thing. If we had a customer who was giving us money, that meant we did something right. And unfortunately, we actually achieved that in three months, so I worked on it for five years. But I think it's good sometimes to set yourself deadlines and specific milestones to keep you focused and keep you pointed in the right direction. So another thing that comes up a lot, and this is actually one of the things that hits when a company gets into YC, is we will often ask them, what are they doing for analytics? What are they tracking? And I think that this is another one of those MVP-like things. Everyone knows they should be doing it, and it's the first thing that gets cut off of any list. So can you guys talk about how an early stage startup should think about measuring what analytics tools should they be using, and generally how you incorporate tracking into building product? All right, I have two very different answers, so reality is somewhere in between. At Reddit, we just didn't. We didn't know our traffic for years. We didn't measure anything. We did product development by intuition for a very long time. Company ended up working out. I'm still not quite sure exactly how many users we have. And it's a huge, huge pain in the ass now. How many users do you have? When you get to 300 million, it's like, I, you know. No, in all seriousness, we have no idea how many unique people use that every month. It's probably somewhere between 250 and 320, yeah. Anyway, at HitMonk, we were actually really good about it from day one, and we were really, because we didn't have that kind of instant feedback with our users, we actually got really disciplined about testing, and analytics, and measuring, and watching. And that company lasted, honestly, quite a bit longer than I think it would have without doing that. And so, if I could do it again, there are a lot of corners you can cut when you're building your MVP. Like you can create all sorts of tech sins, and corporate sins, and I don't know, be completely dysfunctional, your users don't care. But data debt can haunt you, so, because you can't make up missing data. And eventually, your intuition's going to fail you. So, I would think very carefully about what's the minimum viable data? You don't even have to look at it, just log it somewhere, so it's there when you need it. To reinforce that point, having historical baselines for important user actions, you will thank yourself later. Every time I've ever been like, right, how many people are using that feature? And we don't know, and we can't find out. And now, even if we find out how much it is now, we don't know if that's up a lot or down a lot. We have no idea what the trends are. It's awful, and you can't make a decision for another three to six months as you build that baseline. Actually, I got the best advice about this from Suhail, who runs Mixpanel, when he was convincing us to try Mixpanel for the first time. Which, by the way, didn't work, because Mixpanel at that time was only like six months old, and it broke when we tried to instrument everything. But we went back to- It's nice of me to use Mixpanel before you came to that conclusion, though. Yeah, you're welcome. It works better now. It works a lot better now. We went back to it. We're still on Mixpanel today. We use a bunch of other stuff, too, because we're a little too big for just Mixpanel. But Mixpanel, the advice Suhail gave me that was, I think, more important than the software or using Mixpanel in specific, even though I do think it's good software, was pick your top five to seven most important user actions, whatever those are, and just log those. You don't need to log everything. You really don't. Most of the things people can do with your product aren't important. There's maybe five things people can do, like for Reddit, right? It might be vote on something, comment on something, submit a story, load a page, I don't know, some short list of things. And those are important. And you can kind of just ignore everything else. If they're not instrumented, who cares? And so we instrumented, I watched a minute of video, I sent a chat message, I followed a stream, and I bought a subscription. And that turned out to just give, those four actions gave us a huge amount of insight into what was going on with our customers that we hadn't had before. This is one of those areas where if I could go back and give myself just advice for like 30 minutes that would dramatically affect the trajectory of a company, it would be around this topic. And so, if I were in your shoes, I would just take half a day and just read best practices for collecting events and storing them. But, and also, I know the other thing I'd recommend is use a third party service. Like use, collect logs, by all means, put them into your own system because I guarantee you, you'll want to do something the third party service doesn't allow at some point, and you'll be super annoyed if your data's only in the third party service, so collect logs or whatever. But just in the beginning, you don't have time to mess around with building analytics tools. So just use Mixpanel or use Google Analytics or use whatever, anything. They're all better than what you need right now. Later on, you'll need something more complicated. You don't need it today. So, one of the challenges that happens usually after a company, in the early stages, starts talking to their customers, is they realize maybe there's a big disconnect between what they thought their customers wanted and what they actually want. And at YC, this usually comes to us in office hours in terms of, we call the big redesign. So, everything about our site's incorrect, we just basically need to rebuild it from scratch, or rebuild huge components of it from scratch, in order to start serving our customers. Needless to say, this is a very, how do I phrase this? Distracting and oftentimes not fruitful exercise. But how do you see that type of challenge of, man, we got this feedback and we think we need to be going in a different direction now. But how do you deal with that kind of challenge? That's a big one. And I think you need to be clear whether you're talking about tech or the product. I'll repeat what I said before, is your users don't care about your tech. So, if you can move forward, leave that for another day. When you're talking about redesigning your products, you're probably in trouble because whatever habits led you to build a product your customers don't like, if you haven't addressed those habits, you're probably going to build another product your customers don't like. So, I would make sure that, because I've been through lots of rewrites. At Hipmunk, we rewrote our flight and hotels probably half a dozen times each. At Reddit, we rewrote the tech a bunch of times, and we're redoing the UI and UX now with better habits and better data. And so, you want to make sure that you know something new. But honestly, I would, if you're in that situation, I would also go through another mental exercise of, okay, what's the new MVP? Right, it comes up in tech a lot, right, the second system syndrome. The same thing happens in the product, where you're like, all right, I've got this vision, I'm going to fix all of the products, all of the mistakes at once, and it's going to be perfect. That product never ships, it never ships. So, can you iterate your way there? Can you just start from scratch with an MVP and build it back up? Those are much more likely to actually get you somewhere. But they're also harder to do and requires a little bit more discipline. So, I've also gone through a bunch of redesigns, big redesigns, where you have to rebuild the whole product. They've been mixed, actually. We've had some that were super successful. Twitch did a big redesign of our mobile app maybe three years ago. From the first version that had basically been a cloned version of the Justin.TV app to a completely new version. It's basically the version you can use today. And that increased engagement by like 35, 40% per customer when we launched it, it's huge. Changes that make that big of an impact are actually really rare. Usually data errors. Yeah, yeah, yeah, they're usually data errors. And in this case it wasn't. In this case it actually was a huge increase in usage. And so, absolutely, redesigns can make a big difference. But we weren't doing the big Twitch. We didn't do that redesign because we discovered, we couldn't move forward on existing products. Because we got some insights as to what things should be presented at the top of the nav, and we redid the navigation to present those things at the top level instead of burying them three clicks deep, three touches deep, I should say. Most of the time when I see people doing a big redesign, it's because they've fallen into this trap that engineers and product managers often fall into, which is, we have to fix these eight things. Let's just fix them all at once, it'll be easier. That's wrong. You should just fix them each one at a time individually. If you have eight things that are wrong with your product, that's awesome. But if you have this huge create list of things, just fix them one at a time. Fix everything one at a time. Crank them out quickly, you'll get there way faster one change at a time than you will in a big rewrite. A big rewrite for a really early stage startup is almost equivalent to pivoting the company, and I just generally advise against it. It's this weird sort of programmer product procrastination. If I don't know what to do, therefore I'm going to invent this big project to work on. We don't need to use that library, I'm going to build it myself. Very calm. Use the damn library. So I'd like to talk a little bit about decision making. So maybe after you talk to your users, but before you decide what to build, usually there has to be some type of consensus building process, either functional or dysfunctional, between the co-founders. And what are some tips or tricks on how to come to a consensus? And then, maybe more importantly, how do you deal with the contrarian? How do you deal with having to make a decision where you know there's going to be a disagreement? Well, I think the first thing you said is actually super important. It's something I want to reinforce. You talk to your users first, and then you have the ideas about the product. Almost everyone does it in the opposite order. It's called product validation. If you find yourself thinking, I'm going to go talk to my users to validate my product idea, you've gone horribly off the rails. You do it in the other order. You don't talk to users to validate your product ideas. You talk to your users to have your product ideas. And so, I just have a rule in general for people who want to have a voice in product design, is that they better talk to the users and look at the data too. If you haven't talked to users and you haven't looked at data, you don't get to have an opinion about the product. I'm sorry, the person who's actually done the work gets to have the opinion. You can have ideas, but they get to make the call. But in the case you wind up where both people really have talked to the users, and both people really have looked at the data, and people still disagree as to what we should build. Which, by the way, is actually much more rare. Once both people have actually talked to users and actually looked at the data, it's usually relatively easy to get to consensus. But it will come up where people still disagree. I have found it's better when you just have someone who's in charge. At the end of the day, you have someone who's the CEO, and everyone agrees this person's judgment will be trusted. And you let them make the call. Don't avoid conflict, talk about it, argue about it. But then, you have someone who just gets to make the call. because anything else leads to just decision making that's far too slow for a startup. Yeah, maybe it's because I'm usually the one in charge. I just feel like I don't have a lot of disagreements. There are- You're the CEO. Yeah. Largely, I find the situation I'm in, I say one of two things a lot, which is I don't want to argue about it if we can just test it. And I'm very willing to be surprised on this. You're probably right, but this isn't getting into my top three important things to worry about today. So, let's just see. It's easy to do that when you have more resources to let's just see. But I think about Alexis and I over the years, and Adam and I over the years at HitMonk, I think as Emma pointed out, we very rarely had these philosophical differences over with the product. Sometimes it was timing, like should we build this thing now? Like what's the prioritization of these things? But we always agreed on the general mechanics of what we were doing and why we were doing it, and so the strategy might change. But the actual, the details were very rarely not emotional. So if those are getting emotional, I think there's probably something else structurally wrong. You might be swimming upstream. That happens a lot. The arguments I've gotten over the last year, like when we try to promote, we do cross promotion from mobile web to the app, it just doesn't feel great. It works, it works, and we like the numbers going up. But it's not really with the user's best intention in mind all the time. Sometimes it drifts into this, it's good for the company, but maybe not for the users. And when you're in those situations, that's usually when the disagreements come out. And you're not really arguing about the future anymore. You're arguing about short term or long term, or best for the business, or best for the users. And then when you beat at it, and beat at it, and beat at it, eventually you come to a solution that actually feels right, right? And when it meets your intuition, you don't feel like you're fighting the technology, you're not fighting the users anymore. Those are usually situations I look out for. So I want to get to you guys telling product story, but I want to cover one topic first, which is that let's take people past launch. Where now you need to have some type of process around talking to users, looking at data, making a decision, building a product, releasing a product. Checking your success and repeating product development cycle. What is some advice you can give to early stage startups around how to set that up, what that cadence should be, maybe some pitfalls to avoid? The first, just to take one little step back, is I see a lot of startups get too, they get too emotionally high when the numbers are going up. And they're not investing in this sort of process, because growth masks all problems. And then at some point that kind of stops, and you don't have any of these mannerisms. I also see startups get a little too low when things are going right at first, and they kind of psych themselves out. So you want to live in that in between, right? If the data's really good, well, check the data, right? If the data's really bad, check the data. Okay, so then in terms of the actual process, first of all, it's going to be different at every company, and it's going to change as you scale. I think it's just most important to have a way of working. To have, if you just want to start out really, really specific of, the way I like to think about it is, where do we want to be in a year? Okay, let's draw a straight line from that to here. What do we need to be doing today to get there in a year? So that's our hypothesis. Do we need to validate anything about that? Probably a few things here or there. Do that. Did it check out? Yes, and then it's just straight line. I like to work on two-week cycles. Check in every week on basically that kind of thing. Like, where do we want to be in a year? Are we still on track? Are we still doing the right thing? Does it still make sense? Is our assumption still holding to be true? If not, pop it up a stack. And then you give people whatever it is. If you're an early startup, you give them 13 days to work. And if you're a more mature startup, you give them nine days to work. And then keep going after that. I found that that's worked really well for me. One thing I found actually is that your goal of talking to users shouldn't be course corrections on a week-to-week basis. Like, I did a whole crap ton of talking to users at the very start of Twitch, trying to figure out what the users wanted, how to think about them. But then, actually, we could have gone, we didn't, because we had other reasons to go talk to users. But we could have gone six months without talking to a user. Because we actually, we knew what users wanted. They wanted to make money on the service. Like, streamers wanted to be able to make money. They wanted to reach more viewers. And they wanted positive social feedback for what they were doing. And you kind of just check anything you were doing. Is this going to deliver this to our streamers? Like, yes or no? And if so, how much? Great, we don't have to talk to anybody. You already know what they want. And you need to go back and revisit it and sort of talk to users periodically because you need to understand more of the nuances of, are there things about your service that are bugging them? Is someone else doing something really cool? But the goal of talking to users is not to get them to tell you what features to build, because users are really bad at that. They actually have no idea what features to build. The goal of talking to users is to get to understand them really well. And users don't change that fast. So I actually, I personally prefer more in-depth time with my customers, talking to them for a while. And then, depending on the size of the thing we need to do or trying to move, we might go just work and build and look at metrics for the next six months, and not actually talk to users that much for a while. Because if you know that what people want is to make more money, you can spend six months optimizing the sell-through rate on an object or on how much advertising you have. And you just can have faith that it's going to be good, and you will be rewarded. I think the classic advice that's very difficult to follow is you need to have the courage of your convictions. So you decide what you're going to build. Might take six months to build it. And at Reddit, we just kind of do it in front of everybody and get flamed by our users the whole time. Which is fine, like I'm used to it, but I have to kind of tell our product people, like just keep pushing, keep pushing, just chip a little bit every week. And then in six months, they'll get it. And at the same time, the completely contradictory advice is you have to know when you're wrong. You have to be able to identify when you're wrong. You have to be able to say, all of you people are wrong and I'm right. And then at some point, you have to decide, wait, no, you're right. And if you can walk that line, you need to have this good combination of high ego and high humility and balance those. But I always try to just kind of run this process in my head. Wait, am I wrong? Nope, they're so wrong. Just kidding. The making sure, as much as I said, don't talk to users. You don't have to talk to users every week. It's totally unnecessary. You do need to look at your numbers every week. You really need to know, and you don't need to look at them every day. It's actually pointless and almost just ego gratification to look at your numbers every day. But you should look at your numbers every single week. And you should confront, are they up or down, and ask yourself why. And the holy grail of product design is for your numbers to move and for you to truly understand why they moved. We still struggle with that. There have been points where I felt like I understood it, and then it slips away again as the business gets more complicated. But you're always trying to be able to explain fully down to atomic ground truth. We are up 20% this week because we got this many more new devices in, and our retention rate is this on those devices, and this is the conversion rates. And if you do the math, and you can explain it all the way down to this new feature moved this conversion rate on this page by this amount, and therefore we are up. And if you can really do that, it's super powerful. It's also really hard. But you'll never get there if you don't build the intuition just looking at it every week. So in the last five minutes before we open for questions, can you guys walk through a feature that is visible on your sites now? And I'll let you choose. That's either bad or good. And talk about the process of. and how it came to be. I have a lot. I'll talk about one of my favorite ones. This is from the early days of Reddit. So the early days of Reddit, it was just links. Everything was external. And eventually we added comments, probably about six months in. The first comment was, this is the end of Reddit. The first of, that would be the first comment on every product we've ever released, and users started doing this curious thing where they would, so on any post, you could go, you could click on the link, or you could click on the comments page to go to the comments for that page. Our IDs for posts are just a counter that's in the URL. So users would submit the URL that would represent the comment page for the URL they're submitting, right? So they would just increment, they would take the newest post and increment by one and submit that URL. So that you had a post that would link to its own comments page. And it was really cool, so we called those self posts. And users were doing this, and I remember watching them doing it and thinking this was really cool. I would have never thought to do this. Sometimes they'd guess wrong, right? And so they'd submit a post to somebody else's comment page, which was funny. And so because our user base at the time was fairly technical, the way we made this work is when you're submitting a link, you would just type in the URL area, self. And it would automatically do that little circular thing for you. And that was the beginning of self posts on Reddit. Self posts are now 60% of our content, I don't know, a few million a day. And we would have never built that feature if we hadn't been watching our users. I don't think I, I mean, I'm explaining it now, but if I explain that feature without it existing, I don't know if it would make a ton of sense. And users, most of them didn't get it at first either. They were just like, comments are destroying the site, and there's not even a link here, it's just comments. And it just kind of goes to show, I think, the best product ideas are the ones where your users are doing it anyway, and you just grease it a little bit. When you're not, that's what I talked about before, where you're either swimming upstream or everything just feels right. That was the classic example of it just felt right, and it completely changed the site. I think my favorite story here is an advertising product, actually, which is funny. So all of our users told us really, really clearly, we want to show advertising and make money off of our streams. That was a clear desire, everybody wanted it. And they also told us their least favorite thing about our competing competitors' products was that they would show these ads over the stream, and it would be disruptive to their user's experience, and they hated it. And it was very interesting getting these two pieces of feedback, because they both really wanted us to put ads on. And sometimes different people, sometimes actually literally the same people, their biggest complaint about the opposing service was competitive service is annoying my viewers with all these ads, and this is a hard nut to crack because you kind of need to solve for both. You're not allowed to just give up as a product manager and pick one. And I'm really proud of our solution, which was we gave them a button, we inverted it. And we gave the streamer the ability to hit a button to run ads on their own channel. And it's funny because normally you'd think of that as something that will, if you're uploading content to Facebook, you would never press a button on that to show more ads to your friends. But because we were cutting them in on the revenue, they were actually heavily incentivized to hit this button. And we basically got this paid workforce of people placing advertising in the downtime of the stream. And I'm really proud of that clever solution, and I think it points at something that I think is a really important principle of product design in general, which is that you want to just try inverting all of your assumptions. What we got stuck on that advertising problem for a long time, because we didn't want to make it disruptive to the customer experience. We couldn't figure out how to automate putting it on the stream in a good way. And at the same time, we really wanted to show ads on the video stream. And we had this implicit assumption in our heads that we had to figure out where to put the ad. And once we gave that assumption up, it was much more clear what to do going forward. And I think that's one of the most, I don't know, I was really proud of that product design because it was one of the things that made our broadcasters super happy, and you can't complain, you hit the button. How many times has that button clicked every day now? That's a really good question. I don't know the numbers offhand. A lot. It clicked very often. People really like that button because it's a click the button, make $15 button. And like, you know. But they're also aware of the tradeoff, which is that their viewers don't like it when they hit the button too much. And so by putting that in their court, they get to make the optimal tradeoff for their stream in their situation. All right, those are my questions. I want to open it up to you guys. I'm happy to talk about product, happy to talk about YC stuff, whatever you'd like to chat about. Go ahead. Talk about the process of discovering you've had product market fit, getting past that launch bow wave and discovering there's something sustainable behind this, like real core group of users that are really committed to this. Just to repeat the question, how did you know when you had product market fit? So at Reddit, this is the nice scenario. We were growing, despite not knowing anything about our business, knowing little about our users, not really knowing how to run a business, not having a ton of product sense, being down a lot, we were growing. So that's the nice scenario. That's a good one. At Hipmunk, our natural state was zero users. I'm not sure we ever got product market fit. The users who came to Hipmunk liked it, but we had to fight for every single one of them. It's possible to do that, but we were, again, I think that entire company, we were swimming upstream. And I remember the day we kind of realized that. We ran the survey of like, why do you use Hipmunk? And we put a lot of effort into the product. We thought it was a really good product. Legitimately, you could find a flight a lot faster on us than our competitors. 35% of people said it's because of the logo. And 50% of people said because we had lower prices, which we didn't. So, I mean, it's like, we made it. The company ran for five years, it ended up selling, it's just fine. But yeah, I think we were really fighting that one. I think this is a huge misconception, by the way. Most of the companies that apply to YC don't have product market fit. Most of the companies on demo day don't have product market fit. Most companies die before product market fit. Like, a lot of people talk about product market fit as just like this organic step in the process. Oh, you raise Angel, and then you get an office, and you hire some people. And you have product market fit, and it's just like you would be surprised at how few companies. Like, product market fit is typically described as like, you are overwhelmed with demand for your product. It's really obvious when you've hit product market fit. So your product is bad. You can point at seven things that are broken about it. And you have all these features you know you need to build. And weirdly, it's growing really fast anyways. Like, it's really obvious in your product market fit, your product is growing like crazy. And you are spending, you don't get to fix any things that are broken or bad about your product, because you're spending all of your time fixing it as it scales. And you are, so the metaphor I use for startups is kind of Sisyphean. You're like pushing this boulder up a hill. And you're pushing the boulder, and you're pushing the boulder, and you're pushing the boulder. Product market fit is when you crest the hill. And your job doesn't get easier, but it does change a lot, because now you're chasing the boulder as it tries to roll away from you down the hill on the other side. And now you're sprinting flat out trying to catch up, which is hard in its own way, but it feels totally different. Because whereas before you have this like, god, we're like, every inch is like, as Steve was describing with Hipmunk, every inch is like you're pushing this boulder and you're fighting for every inch, now it's like, crap, if we don't keep up with this, it's going to run away from us. And that's a totally different feeling, and you'll know. And here's the problem. Eventually, you'll catch the boulder on the way down, and then you're like, shit, I'm actually pushing it uphill again. Yep, absolutely, that's just what happens. And it's, I guess, it's like asking how do you know if you're in love? Trust me, you know. It's funny, I think one of the major problems that YC companies have is how do they stay small and lean and don't have a lot of, don't spend a lot of money, don't have a lot of management overhead, don't have a lot of bills until they reach product market fit. One of the typical mistakes is confusing an angel round, or a couple million dollars in the bank for product market fit. It's extremely common. All right, other questions? How do you recognize your first group of user? Like, yeah. How do you recognize your first groups of users? Reddit was easy. They were just like Alexis and I. Like we, Emmett was kind of talking about the intuition phase of building products. We were in that for a long time. Like our users, they read the same Paul Graham blog that we did. They were programmers like I was. And so it was really, really easy. Hipmunk, we were actually completely wrong about who our users were. And I don't know if we ever quite solved this problem. They solved it through acquisition, which is we built the product for ourselves. Like tech savvy people who travel a fair amount and buy their own travel. But in reality, our customer, the only way to make money in travel is to sell to business travelers, because they're the only one who travels multiple times a year. And business travelers don't get to use things like Hipmunk or Kayak, right? They use American Express and Concur. So it took us actually a couple years to synthesize that, and we were just like, fuck. I think there's two kinds of startups. There are startups that are building things for themselves, and where your customer is easy to identify, it's you and people like you. And there are startups building things for a third party group of users, where you should arrive at which customers are your customers through an analytic mode, right, through thinking about the problem. So Twitch was an analytic startup, because I was a huge fan of watching game streaming, but actually, I wasn't much of a streamer. I've never been much of a streamer. And I basically dug in on Justin TV and realized that 80% of the minutes watched were coming from our top 200 streamers. And I was like, they're the most important people. We lose them, we lose everything. And if we can get 200 more of them, we'll be twice as big. And so, it was sort of identified analytically that that was the right group of users, and those are the right customers. And I think that you should just know which one you are. And the most important thing there is that if it's not for you, and if you're not legitimately building something for you and for you to use, and you aren't a big group of people in this case, you should absolutely use the analytic mode. And I don't know, it's different for every single company. But think hard about it, I don't know. Yeah, but if it's not for you, your intuition is lying to you every time. And you have to supplement it with data, or talking to your users, or whatever. So shockingly, we were 100% on time. If everyone could thank these guys for coming out today, appreciate it. Thank you. Thank you. Thank you. "
  },
  {
    "name_video": "How to get and test ideas",
    "description_video": "Y Combinator Group Partner Michael Seibel on getting and testing startup ideas.",
    "related_categories": [
      "Startup Ideas",
      "Becoming a Founder",
      "Early Stage",
      "Customers",
      "Talking to Users"
    ],
    "page_url": "/library/7x-how-to-get-and-test-ideas",
    "youtube_url": "https://youtube.com/watch?v=vDXkpJw16os",
    "mp3_file": "downloaded/How_to_get_and_test_ideas.mp3",
    "mp3_content": "There's a common misconception that your idea has to be great in order to start a company. And the first thing I want to do is destroy that misconception. Personally I was one of the co-founders of a company called Justin TV. It later became a company called Twitch and sold to Amazon for almost a billion dollars. Our original idea was to create an online reality TV show. Unfortunately it's hard to draw a line between that and creating a live video site where people watch video gamers and chat with their friends. But that's exactly what it became. And so don't fall into the trap of thinking that your initial idea has to be great by any definition. This is what you should think about instead. My first advice is to start with a problem. I think that starting with ideas is tricky because immediately people want to grade your idea. It's a lot easier to start with a problem and to think about how do you grade a problem. When you think about a problem you should be asking yourself, do I have any relationship with this problem personally? Is this a problem that I have? Is this a problem that my friends have? Is this a problem that my family has? Is it a problem that exists with work? Is it a problem that's in my community? Oftentimes having a personal connection to the problem is really helpful for two reasons. One, you can tell whether the solution is even within the ballpark of solving the problem because you've got some connection with the problem. And two, when you're feeling discouraged and the solutions that you're building aren't working, you still have some personal connection to the problem that sees you through until you find a solution that does work. So that's the first place I would start. Thinking about problems. And I think a lot of people keep little idea books with startup ideas. I think they'd have a lot more success if they kept little problem books and wrote down notes on the problems that they encounter on a daily basis or that their friends complain about, their family complain about. Another interesting thing to do when you're starting to think about problems is to brainstorm with friends. This is the perfect time to start thinking about how do you recruit co-founders. And a lot of recruiting co-founders is about having really good brainstorming sessions. Things where you talk about a problem, they elaborate on it, and you kind of realize that you trade ideas well and that you can talk to each other well and you can build ideas together. And so I really advise when you're doing this thinking about problem, do it with some friends. Friends that you might want to create a startup with one day. Once you find a problem that's interesting enough to start pursuing further, the next question I would ask myself is why are you uniquely qualified to work on this problem? Now by qualified I don't mean in the classical resume sense like oh you've had 25 years experience in this area or something like that. But what I do mean is that like is there some angle on the problem that you understand that you don't think others understand? Is there some way of attacking the problem? Is there some perspective on the problem? Is there some personal experience for the problem that you have that you don't feel is generally used or understood in other solutions to the problem? In this phase it's often helpful if you're solving a common problem to look at some of the people who've tried to solve the problem before and look at some of the products that are trying to solve the problem or have failed to solve the problem just so you can get a basic understanding of what other people thought their unique insight was and whether it was the same or different than yours. This is kind of your gut check. Hey is this a right fit for me? The next step is to start thinking about how do you want to build your MVP, your minimum viable product. What's the first product? What's the first solution you're going to build and release to your users to see if maybe you can try to help them solve this problem? The most important thing to think about your MVP is don't fall in love with it. Your MVP is most likely not going to solve the problem or is going to solve the problem very poorly. And really it's the first step in the learning process of whether the solved problem is solved solvable at all, let alone whether you can solve it. A lot of people fall in love with their product and are not in love with their problem or their customer. I advise the opposite. Be in love with your problem, be in love with the customer and treat your product in a way that it can change, it can develop, it can improve. Don't be too in love with your initial product. The most important thing to not fall too in love with the initial product is to release it quickly. Often times an MVP can be built and released in days or weeks. It's not going to be perfect. It might not be something you're proud of, but it can be the beginning of learning about whether or not you can actually solve the problem. The last thing I would consider once you have an MVP is be very careful who your initial users are. I actually believe that your initial users should almost be handpicked, but certainly you should have a strong opinion about who your initial customer is and you shouldn't try to solve this problem for someone who, one, isn't willing to try a startup or, two, the problem you're trying to solve is not a really important problem in their life. So your goal here with your MVP is not to see how many people want to use your product, it's to see whether for any group of people does this actually solve the problem, for any group of your customers, excuse me, does this actually solve the problem that you're trying to solve. And so the best startups actually very heavily filter the people who are able to use the initial product and make sure that they're the right type of initial customer. So those are the steps that I would take from thinking about a problem, to building the first version of the product, to getting feedback on it. That's how I would think about this problem. Thank you."
  },
  {
    "name_video": "Should I use a dev shop?",
    "description_video": "Y Combinator Partner Michael Seibel on using development shops to build your startup, and how it can be trap in the long run.",
    "related_categories": [
      "Becoming a Founder",
      "Non-Technical Founders",
      "Product",
      "Building Product"
    ],
    "page_url": "/library/7v-should-i-use-a-dev-shop",
    "youtube_url": "https://youtube.com/watch?v=QAJQOXMM7ak",
    "mp3_file": "downloaded/Should_I_use_a_dev_shop?.mp3",
    "mp3_content": "A common question that we get at YC is, is it okay to outsource the development of your initial product? The challenge here is that most founders who are not technical think that they have a problem that's worth solving, think they understand their customer really well, but don't have the ability to build the solution. And more and more, the advice that these people are given is that instead of recruiting a technical co-founder, what they should do is use a dev shop to build the first version, get traction on the version, and then they can hire a CTO. Now, I don't want to say this advice is incorrect, because there are some companies that have been successful in doing this. The problem, though, is that it's too easy to focus on the companies that have done this well and not hear the stories about the companies who have done this poorly. Many, many, many, many times I get emails from founders who have tried to do this path and has failed. And so I want to share a little bit about what that looks like. When you're working with an outsourced dev shop, oftentimes it takes longer than you might think to get the first version of the MVP out. One, because you might not have a lot of experience in how long it will take to build the software. And two, because that dev shop might be working on other projects or have other priorities. And I mean, to be honest, the person is not as motivated as they would be if they were a founder with a lot of equity in the product that they were building. This results in you spending more money than you might expect up front. So you might think it's going to cost you $15,000, $20,000, $30,000 for the first version. And oftentimes it can cost a lot more. This is something that people find extremely frustrating, especially if they've raised a little bit of angel money. And they're pouring all of it in the building of their initial product. The next challenge here is that oftentimes when you use an outsourced dev shop, it's actually harder to raise money. Because there are a lot of very good tech startup investors who do not want to invest in companies that are outsourcing development, unless those companies are absolutely taken off and just growing ridiculously quickly, which is very rare. The last thing that most people understand is that a lot of this work is actually thrown away. Because if you do happen to hire a developer, if the outsourced developer built it in a way that your person you hire doesn't agree with, oftentimes the solution that they will come up with is to rebuild. So this is the kind of trap of working with an outsourced development shop to build your MVP if you want to build a tech startup. And by tech startup, of course, I mean startup that's going to generate a lot of value for a lot of people and be a multi-billion dollar company and that wants to raise money from the venture capital world. That's what I'm focused on. There are lots of other situations where working with dev shop is totally fine. But if you're in that narrow slice, this is the problem. What makes this a trap is that it often doesn't look like a trap in the beginning. You often go from nothing being built before you have the dev shop to things happening once you have the dev shop. So you feel like you're making all this progress. And of course, you're spending money and it's taking longer, but you still feel like you're making progress. Until the first version is released, you've spent that money. You realize that actually the solution that you built doesn't solve the problem because it's rare that an MVP does. And you need to start iterating. And now you start having to spend even more money and more time with the dev shop. And usually this is when your funds run low and you realize, oh man, I can't make it. I'm not going to raise more money and I'm not able to do more iterations. My startup is going to die. Now this is what you should be thinking about. I think the people who give this advice by using dev shops, their heart's in the right place. But what they're not quite understanding is that the vast majority of good early stage investors care more about whether you can build something than what you've built. They understand that at the point that they're investing, there's very little proof that you're going to be successful. And the thing that they're more interested in is, can you iterate through multiple versions of your product until you can find a version that solves the problem that you want to solve? And unfortunately, doing that with a dev shop takes longer and is far more expensive than doing that with a technical co-founder. So there's kind of a misunderstanding that the early stage investor is actually looking for tons and tons of traction. And actually, they're looking for like tons of ability to build and iterate quickly. True early stage investor, not someone who does series A's. Of course, series A investors want traction. If you don't fall in this trap, if you can recruit the technical co-founder, typically what ends up happening is you have to spend far less than you'd have to spend for that dev shop. You have product that's released far faster, and you're much better set up to iterate the solution as you get feedback from your customers. So you get more done spending less money in less time. And so a lot of times up front, people think that finding a technical co-founder is too hard. So they give up and they go the dev shop route. What I would tell you is that so many companies fall into this trap that they should really reconsider whether or not spending that extra time recruiting a technical co-founder in the end is going to be far more worth it than going with the dev shop. Once again, I'm going to reiterate, I'm not saying this applies in every situation. And there are certainly some companies that have bought their first version of the dev shop and have gone on to be successful. But in my experience, that is by far the exception, not the rule. So if you're going with the dev shop, you really should be worried about falling into this trap. Thank you."
  },
  {
    "name_video": "How pitching investors is different than pitching customers",
    "description_video": "Pitching your startup to customers is different than pitching to investors. Y Combinator Group Partner Michael Seibel shares how you can craft your message for each audience and when to use them in your conversations.",
    "related_categories": [
      "Pitch Deck",
      "Fundraising",
      "Customers",
      "Investors"
    ],
    "page_url": "/library/7u-how-pitching-investors-is-different-than-pitching-customers",
    "youtube_url": "https://youtube.com/watch?v=pQnOBHNKlgs",
    "mp3_file": "downloaded/How_pitching_investors_is_different_than_pitching_customers.mp3",
    "mp3_content": "Hello, I'm Michael Seibel and partner at Y Combinator. Today I'd like to talk about the difference between your investor pitch and your customer pitch. What most founders typically screw up here is that your customer typically knows a lot about the problem that you're trying to solve and is extremely personally interested in the solution that you have. Whereas the investor might not have the problem that you're trying to solve at all and might be only interested in the solution in so much as they think it can build a big company. What this means is that the same pitch often doesn't work for these two communities. So when you're talking to a customer, one of the ways that you build credibility is that you use jargon. You use the language of the industry. Another thing that you do is you try to get them to speak a lot about the problem that they have. You want them to be talking more than you. And then the third thing is that you try to figure out how the solution can help them personally as soon as possible. When you think about where to use this customer pitch, it can be on a sales call, it can be on the front page of your website, it can be in your to-do, your help, your FAQ, it can be in user interviews. A lot of the language is really relevant there. On the other hand, when you're talking to an investor, unless you're pitching a consumer product that you're pretty sure that they'd want to use, you have to assume that they don't really understand the problem. In this situation, jargon's actually going to hurt you. It's not going to help you. So you want to make sure your pitch is jargon free. In addition, what you want to do is make sure that you're using language that they can understand. Oftentimes people will incorporate, you know, flowery language. Oh, we're building a platform or this is like the first thing ever done. It's the most unique thing ever. What I call marketing language. Marketing language, unfortunately, is fluff that an investor has to filter out to understand what you really are trying to do. The best example I give about this is pitching Google. Imagine if I was pitching Google and I said, oh, Google organizes the world's information. For an investor, that's actually not telling them anything. If they understood what Google did already, then sure, that'd be great. But if they don't really understand what Google does, that doesn't tell them anything. It doesn't create any picture in their head. A much better pitch for Google is to say, Google's a new type of search engine. With Google, you actually go to our website, you type what you want to know into a search box, you click enter, and we report in an ordered list websites that we think can help you with the information you're looking for. What makes Google different is that those websites are ranked by how other websites link to them. And so those results are way more relevant. That is something that people can understand, even if they don't use a search engine. That is something that people can understand when they don't know any of the jargon of your industry. And so you have to be really, really careful when you're thinking about an investor pitch. Your investor pitch is probably not something you want to put on your website. It's probably not something that feels comfortable when you're talking to a customer. It's something that really is only typically reserved for your pitch deck. If your front page of your website and your pitch deck are saying the same thing, and you don't have a product where you assume the customer is also a user, a product like Yelp or Uber, you might be doing it wrong. So in an investor pitch, typically what the investor is curious about is, one, what do you do in the simplest language possible? Two, how far along are you? Just the idea phase, are you building the product? Have you launched product? Do you have customers? Do you have growth? Three, how big of a total addressable market you think you're addressing? Four, how do you plan to charge your users? Five, what do you think you know about this market that other people or competitors don't understand? And six, who's on your team? Specifically, who are the founders? More specifically, do you have the ability to build the product that you are trying to bring to market? So those things are what the investor is really interested in. As opposed to the customer, where the customer often doesn't really care about at least half of those things. The customer certainly cares how much you're charging, and they certainly care about what you're doing. But they're actually probably far more interested in what the functionality of what you're doing is, what the onboarding process is like, specifically how the pricing applies to them. Specifically, does it solve their specific problems versus maybe some more general problem? And so in a customer conversation, you end up getting into a lot of interesting nitty-grittiness about the product. Might be you want to bring up screenshots, you actually might want to do a live demo. In an investor conversation, more often than not, you're really getting to the nitty-gritty about the business, about how big the market is, whether customers actually want to buy this product, what their demand level is, how many customers there are potentially for this product. All of those types of things around the business, and less getting into screenshots and demos and so on and so forth. Of course, there are exceptions on all sides. I would certainly say that mass market consumer products, the investor pitch looks a little bit more like the customer pitch. But for most companies that are going through YC, we have to split these up. We have to teach founders that just going one-to-one investor pitch, customer pitch is not the way to do it. Interestingly enough, it takes them some practice. Within the first month, YC founders are still trying to figure out how to meld their customer pitch and their investor pitch. Only after kind of constant trying do we convince them it's better just to have two separate pitches. So in summary, the customer pitch and the investor pitch are two very different things. The investor is trying to understand, can you build a big business? The customer is trying to understand, does your product solve their specific problem? Because there are two different motivations for these two different audiences, most likely you're going to need two different pitches. So that's one thing that you should focus on even at the early stage of your company."
  },
  {
    "name_video": "Post-product market fit: people, customers, sales",
    "description_video": "Mathilde Collin, founder of Front (YC S14), describes what she learned as she scaled to thousands of paying customers.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/7q-post-product-market-fit-people-customers-sales",
    "youtube_url": "https://youtube.com/watch?v=S2YCcdb1rG4",
    "mp3_file": "downloaded/Post-product_market_fit:_people,_customers,_sales.mp3",
    "mp3_content": "Following on from Paul's talk about some of the ways to think about becoming or what it takes to become or whether you might believe you might become a hundred billion dollar business, I am going to have a conversation with Mathilde Cullen who is in the process of building one of those hundred billion dollar businesses and she's going to be able to tell us all about that and her company called Front. So Mathilde, what batch were you in at YC? Summer 14. Summer 14, wow. Already four years ago. So tell us about your, if you would, your journey to being the CEO of Front. Sure. So in just a few seconds, so I think I've always been wanting to start a company but the main thing is I didn't feel confident enough to think that I would one day build a company. So I was hearing all these people saying, oh yeah, I'll start a company and I was like, I wish I could say that but I just don't feel like I can do it. So instead of what I did is after I graduated, I joined a startup that was super small doing a contract management software and that's when I discovered the world of softwares. And there is something that went well during this first experience and something that didn't do well. So what went well is I became very passionate about softwares in general and I just felt like the fact that you could build something in a few months that could change how people work and people spend so much time at work, I felt was super rewarding. So that's what went well. So you didn't find, contract management sounds painfully boring. Yeah. So it's super boring. But what was cool about it was that it actually changed how people did their daily work. Exactly. And so when I was talking to people, so I was in charge of launching a new product for them. And so when I was talking to people using the products and they were telling me how their day-to-day was much better because they were using the product, it made sense to me. And it's still one thing that drives me today. So that's what was great. What wasn't great is the culture was terrible. And so I was very unhappy. And I also understood how much of a responsibility you had as a founding team of a company to create an environment where people would be happy to come to work. So a year after I joined this company, I quit this company. Can you elaborate a little bit? What was it about the culture that was bad? So I think the main thing is there was no transparency. And so then there is no trust. And then there is no engagement from employees. So I can tell you more about how I've built the front and I think what's unique about our culture. But one of the things is how transparent we are. And I don't believe that transparency is good in itself. And that's why you should be transparent. I believe that that's the most efficient way I've found to create engagement at scale. So if you ask people at France, why are you happy to come to work every day? They will tell you, I'm happy because I can see the impact of my work. And that's what I care about. And how do you make sure that people see the impact of their work? You make sure that everything is transparent from where you want to go, how you'll go there, what are the goals that they need to achieve and how their work relate to these goals. It seems like there's something really fundamental there for the companies that are going to be successful. You just talked about what it felt like at Google where everyone knew where they were going and everyone was passionate and everyone believed. And so you had this energy in the company. So I guess somehow this is about sharing a vision with the team and having them believe in it and at every step in the way having them be able to see how that vision is being created. Yeah. So I think there are two things that are incredibly important as early as you are. So one is the vision. And of course you should know where you're going and of course you don't know yet and that's totally fine. Like I didn't know four years ago how big Front would be and I still don't know today. But I think that will just evolve along the way. What you need to have is just what you deeply believe in. And so what I've always believed in is Front should be a place where people come to work every day and are happy. And our customers should be happier because they use Front. Either because the impact of their work is higher or because it's an email product so they spend hours in the app every day. But that's what drove me. And so today our mission is work happier and I make sure that I explain to people what it means for us. And I think it should be clear to everyone in your company and to you why you care so deeply about what you're doing. And it doesn't need to be this huge idea because the truth is I didn't know what Front would be but I knew that I cared so much about it and people could relate to it. So that's one thing. Super important. Yet I don't think that that's the most important thing. I think the most important thing is discipline. And I think that discipline is actually more important than having a grand vision. And my personal belief, and I am sure that not a lot of people agree with me, is one of the reasons why we've been successful so far is because we've been incredibly disciplined in many, many things. So for example, always having one focus and making sure that it's clear to the entire company. So in the early days, we wanted to make sure that we were making something that people wanted and the way we would track that was, can we generate revenue? And so every single day, everyone in the company would know where our revenue was and the next day where it was and the next day, et cetera, for at least a year. And anything that we would work on was aimed at increasing that revenue. And I was sending daily emails that became weekly emails. There are still weekly emails telling everyone how we're doing against our core targets. And I think having this discipline of focusing on a few things and making sure that in every presentation you do, in every email you send, even to investors, to whatever, you show that will be one of the key to succeed. So let's back up before we dig further into the sort of the unique culture and the success you've had at front. You left the lousy startup, the lousy company with a lousy culture and somehow you ended up deciding you're going to start your own thing. How did that transpire? What led you to start your company, to find your co-founder Laurent and get going with Front? Yeah. So I think I was very lucky for a few reasons. So one is I met my co-founder. So the story of my co-founder and I is not that we were best friends or brothers and sisters or whatever. I actually met my co-founder three months before we started the company and then we spent so much time together trying to go through every hard conversations that I could think about. Like, I don't know. What if I want to fire you? What if you want to fire me? What if you want to sell and I don't want to sell and blah, blah, blah. And we were just aligned on most things, actually everything. So that's one thing that led me to start this company with him. Then we found- So you knew you wanted to start a company? Yes. So I knew I wanted to start a company. I quit the software company. I knew I wanted to start a company in the email space because I love softwares, but I was using email to get work done. I wasn't using contracts. And so I knew that and I knew that I needed money to start a company because I had to have a loan for my school and so I couldn't start a company if I didn't find money. And so I was lucky enough to meet with an angel investor in Paris who committed to giving us money. So Franchi is the company- It sounds really risky though. You had college debt. Right. You had just left your job. Yeah. And- I don't know if that's the biggest risk I took or when I moved here with all our employees and their family and they quit their jobs and sold their house. So I've taken many risks in my life. Right. Wow. So you decided to jump in headlong. You had to get money. You got an angel investor. Yeah. You found Laurent. Yes. And the last thing that I think is incredibly important is I found someone that became my husband later on who believed in me. And I think that it's so important to find someone, whether it's a mentor or a friend or whoever, who can tell you that you can do it. And maybe you already know that you can do it, but at least for me, these four things were equally important. I would have never started this company if someone was not telling me every day you can do it. So you found your future husband and your co-founder, different people, by the way, at about the same time. Although my husband works at Franchi. Although your husband does work at Franchi. But you met them at the same time. He didn't work at Franchi at the time. And you met them about the same time. No, no. I met my future husband a few years before. But he was the one telling me that you can do it at that time. So he was supportive of you quitting your job and jumping in headlong into the startup. Yes. And he did the same thing at the same time. Right. And how did you meet Laurent? So in Paris, we met in a startup studio called eFounders. It was love at first sight. How did the two of you decide who was going to be CEO? That was very easy. So basically, everything I love, he hates. And everything he loves, I hate. So he's the CTO of Franchi, loves building the product. But he doesn't like doing what I'm doing right now. He doesn't like managing as much. And I think that when I reflect back on Franchi, the thing that I've been most lucky with is my relationship with my co-founder, because we have the most amazing relationship. And what I mean by that is not that we're super close in a sense that we would hang out together. He's actually a friend, but he's not like my best friend or my buddy. But we have so much respect for one another. And that's the thing that you need to optimize for. It doesn't matter how well you get along. You just need to be so impressed by whatever your other person or other persons are doing. And you had sort of a unique process to figure that out in the beginning. You sort of grilled each other until you were both sure that you were compatible. Right. Yeah. So when you began as CEO, can you talk a little bit about how you split up responsibilities and what the role of CEO was? There's a lot of people here who have similar questions as to what exactly they should be doing as CEO. How did you think about that from the beginning? So a few things. So my role as a CEO in the early days, I was basically doing everything but being an engineer because I wasn't an engineer. But so I was the product manager, the recruiter. I was, for the longest time, the only marketing person for three years. I was the only sales rep. I was the only support rep. I was the only customer success person. And I guess my job was just to do the job of like what ultimately will become our team. And that was really what my goal was. So everything but building. Yeah. That was you. Exactly. How has that changed over time? We talked a bit with Gil about how the role of CEO evolves as a company gets much larger. But it changes a lot, even as you go from two people to five people to 10 people, right? Sure. So what's super important is I wasn't expecting to hire people to figure out things that I would have not figured out. So it wasn't like, oh, I'm struggling with marketing. Like I don't know how to generate leads. So I need to hire someone better than me. So the way I was thinking about it is there are a few things that I feel are scalable. So for example, we would have leads that would sign up to Front. I would call them and I would be like, do you want to sign up to Front? Here is what Front does. What's your process? And when I started to think that another person could do that and could do it better than me because the person would be more skilled, then that's when I hired people. And so at every step of the way, I hired people better than me. But once I had figured out what roughly their job would be, and the mistake I've done in the early days was I've not figured out something and I hope that someone will figure it out for me. The truth is, if with all the knowledge I have about the company, I can't figure out something, I think it's very rare that someone would come and figure it out. So that's something that I learned in the early days. So you can't count on someone else to have the answers if you don't have them. Right. Yeah, for sure. And still today, like even today, we are 110 people now and I'm not hiring people to figure out things that I've not figured out because I think it's incredibly hard. I'm here to hire people that will scale what's kind of working. So that's what happened. So I hired people that were better than me on things that I had figured out. And then once I had everyone, I hired head of functions. And then my job now is to find the head of every function and to make them work together. So that's how my job has evolved. So it sounds like from the very beginning, though, hiring was foremost in your mind as a key role for the CEO. So one funny thing is anytime, so I was in the summer 14 batch. And so every week we had a speaker. And every time the speaker was talking about hiring, that's the moment I was in my phone because I was like, you know, I don't care. Hiring is a long time from now on. And that's probably a big mistake I've done because then you understand that hiring is the key. If you fail on that, your company will fail. So you should listen and just take notes and read the notes later on. So at least I can tell you one piece of advice that I got from Patrick Collison, the CEO of Stripe, that I thought was super insightful. They said in the early days, every time you hire someone, just think about whether you want 10 times this person, because the truth is this person will hire people like them. So I'm interviewing you and I'm like, do I want 10 Jeff in this team? Yeah, tough. So if the answer is yes, maybe I do. So if the answer is yes, then you know, I can hire you if the answer is no, but the bar should be as high as that. And I think that was a good piece of advice that I received. From the very beginning, it seems like Front has a strong, specific culture. Did you pay attention to that as you were hiring from the beginning and how did you implement that? How did you think about it? Yeah. So I think very early on, I was very deliberate about what we call today our values, but I basically know who I think I would work well with and who I wouldn't work well with. And that's the truth. Like our values are just extensions of who we are as co-founders. And so, you know, some of our values are low ego and high standards, care and collaboration. And the last one is transparency. And I just believe that I'm incredibly demanding and that's why high standards is part of our value and I don't want to hire anyone that doesn't have these standards. I'm also, I think, very low ego, like it doesn't mean I don't have an ego, but when I make a decision, I think about Front first and I think about our employees first and I think about myself after. And I think that just putting words on what we care about as co-founders and then making sure that you're assessing that during your interview process is what matters. It's not useful to display them on a wall and to explain them and all of that in the early days, but at least being just self-aware is what will help you hire the right people. And it does kind of speak to the fact that you are going to play an important role in hiring everybody in the beginning. Yeah. And I kept interviewing everyone until like employee number 80 or something. Did you ever find yourself in a position of needing or wanting or having to compromise on those values or did the values always take precedence? Like there was someone who maybe didn't quite match the values, but was like the perfect fit for the designer job. So no, we'd never, or if we did, then we let go of the person after, which is worse. Never worked. Yeah. Never worked. And in a company that's fast growing, like you think, for example, I've been willing to hire a head of finance for, I don't know, six months. And it's so important. Like we don't have any finance person at front and we, I don't know, we are 110 people. We've raised 80 million and I don't know what I'm doing because I've never done any finance work before, but I've never found someone that I was incredibly excited about that had both the skills and would match our values. So I'm not hiring anyone. And I think being very disciplined about not hiring even if you desperately need this person is important. I want to move on to product, but before we do that, I'm just wondering if you were going to talk to relatively new startup founders or people with young companies, like most of the companies in startup school, is there specific advice you'd give about creating a culture of success, creating the kind of culture you have at front for them? Um, so I think my biggest advice would be, um, one to be incredibly demanding. So I just. I just feel like in the early days, if you have someone that's not working out, being very tough and letting this person go, I think that's a mistake I've seen because if you have a team of five and one person is not working out and you kind of know and you always know and you're not making this tough decision that it has an impact on your entire team, it's easy to say, hard to do and I can tell you how we've done it. I think that's super important. I think transparency is just so important in the early days and even at scale, but so making sure that everyone in your company knows everything, like there is no reason why you should hide anything, maybe except for, I don't know, salaries. So I was going to ask, when you say transparency, people throw that word out a lot. How do you, in actual practice, what does that mean for you at Front? So it means that everyone knows what I, so a few things. One, I think there is bad transparency and good transparency. Good transparency is everything that you can share that will help people do their job better and help answer questions they have. Bad transparency will raise more questions and create more problems than you need. And so, for example, sharing salaries, we can have a debate about that, but I think it raises more questions than it actually solve problems. But then, everything else, so everyone knows our revenue, our churn, every email about, I don't know, leads coming in and telling us what they want, customer complaining about this or being happy about that, every NPS score that is here, either people are super happy, super upset, everything is public, our runway, the amount of cash we have in the bank account, every board meeting that we do, we publish the board deck, then I do an all-hands and I share what the board said and or I answer a question on the board deck. I don't know, I share just everything that's business-related. And also how I feel. Like, I'm happy to say I'm extremely happy about that and I'm extremely unhappy about that. And everyone in the company ends up knowing that. And they know that and I think it's good because then if you really want people to work on the thing that are broken, there is no point in hiding what's broken. And there is always this human feeling of, I will not share because they will be worried. I'm gonna tell them that that's broken. And some people joined two days ago and they're gonna know that it's broken. But that's fine because what you gain is the fact that they will all work on that problem and that's better than avoiding the question. And it feels like people stay aligned and moving in the same direction. Yes, and I mean, you know that, but I think Frontier is like at least one thing, there are lots of things that we struggle with, but one thing that we've done I think really well is our retention of employees. So people are super happy. Our NPS is 87, which is super high. If you look at Glassdoor, we only have five stars reviews. If you look at our attrition, no one has, there are just two people that have left Front ever and it was one to go back to school, one to join the company of their best friend. So I think we've done a good job and I believe that we've done a good job because of this engagement that we've created thanks to this transparency. We were talking earlier about one great sign for a company, for a company's product is having really high retention, but likewise, I guess, having really high retention of your employees is a pretty fantastic sign for a company. Yeah, and it's so important because so much knowledge is gathered. Institutional, right. And every time, especially if you lose someone good, you lose... So much knowledge. So much. So you guys are a really interesting case because you're an enterprise company that started with a handful of customers, well, zero, eventually a handful, and then you've scaled to thousands. Can you talk about the early days of figuring out that you had product market fit and then a little bit about the evolution to going from, we were just talking about 10 or 100 people who love you to many more? Yeah, so I would say a few things. So first thing is, I remember when I arrived here in YC four years ago, Kevin Hale came to me and was like, what's your company? And so I was like, it's Front. And then he was like, oh, so cool. I think it's one of the coolest company from this batch. And then I was sure that he was talking about another company. So, and it's true. Like, I just was so... You mean he was confused about, oh, you must be confusing me with another company in the back. It's just like, I wasn't confident. And another example is my batch mates would come to me and say, should we use your product? And I was like, no, no, use our competitor. It's much better. It's true. Like, I just, I've always been very ashamed with the current state of the product. And so, of course, convinced that we didn't have product market fit. Isn't that one of the definitions of product market fit is a product that your customers love, but that you're ashamed of? Maybe. I think it's actually a good thing that you're ashamed of your product, but... So, product market fit, at least I can tell you that if you feel like you don't have product market fit, great, it doesn't mean that you're doomed. But then I think that there is a lot of thing that we, I'm also someone that's incredibly honest with myself and I can't just wake up and think that I don't have product market fit. So I need to fix every single problem that I have. So how did I do that? One is, I've been incredibly disciplined about talking to as many users as possible. So my day-to-day at YC, four years ago, and I can tell you what my day-to-day is today, but it's not very different. I was talking to leads and customers all the time. And I made sure that every single day, I had at least, I don't know, seven, eight meetings with people that sign up to our product. Even if they ended up not using our product, it doesn't matter, I want to talk to them and I want to understand why they got initially interested. Can I just stop you there? Do you remember, this might be a stretch, but do you remember any specific conversations that maybe changed the trajectory or at least changed the product in significant ways? Yeah, and actually in YC, so we started with this email that was helping companies manage shared inboxes, so shared email addresses, like support, add, sales, add. And that's what it was doing. And then we talked to Adora, the CEO of Homejoy. And- YC partner now? YC partner now. YC startup school. Awesome. And so she told me, oh, so the product that you've built, it's awesome, could it work with SMS? Because they were chatting through SMS with all their cleaners. And then we looked at Twilio and their API was pretty good, and so we realized that in a week, we could just add SMS as a new channel. And it drove so much revenue, because I think there was a big need for collaboration around SMS. And I would have never thought about it. I've never worked in a company that used SMS to work. But, and so that's one example, but I have many more. I basically have never, I worked one year in a company, so what do I know about business workflows? And still today, the reason why I still spend a ton of time talking to either leads or customers is because we're going up market, we're going in new kinds of companies and new use cases. And one of the use cases that Trent is super popular in is logistics and transportations. And so I'm going to these trucking conferences and trying to understand, what do I know about their workflows? Nothing. I bet you stand out at a trucking conference. Right. I do. So if I don't talk to them, then I can't lead the company in the right way, because I can't hire the right people, make the right product decisions. And so I just believe that that's what I used to do. That's what I still do. I think it's insanely important. And the only way you'll manage to do that is by hustling. Like the truth is when you're early and you need to have eight meetings a day, it's insanely difficult. And so you need to do everything you can from reaching out to all the people you know, to finding new ways to writing contents in the hope of someone reading and then ultimately signing up to your product. And that's what I did. And I think that's what made us grow quickly in the early days. So when you entered YC, do you remember how many customers you had? So one thing I remember is when I interviewed at YC, we had 3000 companies that had signed up to our product, but it was closed beta, so they were not using it yet. And then I was onboarding them one by one and every time was the same thing. Great, but we don't want to use your product because you don't have XYZ or it doesn't work. So maybe out of the 3000 companies, maybe one ended up using the product. But that's just how I built so much knowledge about what they wanted. And then I was telling Laurent, need to build that we're one feature away, I promise. Just one feature. Just one feature away. I still say that today. And when you left YC, how many customers did you have? So when we left YC, we had 5000 MR. And so we had probably like 130 companies using the product. Which is pretty amazing. So do you recall what the retention was of those 130 companies? Yeah, so we hadn't had a single user churn. So basically the reason why I'm saying that is because every time someone joined the company at front, I showed the video of demo day. So I know my demo day pitch by heart because I've listened to it so many times. And so part of the pitch is, we haven't had a single user churn. And that's good, right? Great. It doesn't mean though, so that's great. But what wasn't great is our conversion rate from trial to paid was terrible. Why was that? I mean, just because the product was very early and so didn't have a lot of the features that the market needed. So have you managed to shift that over time? Yeah, I mean, we've built more and more and so our conversion has increased. I wanna talk about how you went from hundreds to thousands of customers. But a question that's come up a lot during startup school is like, how do you figure out how to price your product? Can you talk about the front pricing journey from wherever you started to how you started and to where you are now? Yeah, so we started with a freemium model. So we had three or $9 per user per month. One thing I would say is just release your pricing as early as possible because there is, so first, you're always scared that you're not ready, but you're ready, all of you at least. The good thing is that will confront you to the market and that's what you need. Two is when you want to listen to some feedback, you should listen to feedback of people that are paying some money because otherwise you can be overwhelmed with feedback from people that will never pay for your product. So we had a freemium model. What we realized is even if we had a free product, I think at the end we maybe had 15% of our users on the free plan, so it was more a distraction. Like it's good to have a free plan if that's a way for you to get leads and then you convert these leads. But if it's just something where you end up having 15% of your users, it's not useful. So removed it, change it into nine and 19. Consistently increase prices over time, maybe too much. Do you feel like you started too low? Yeah, and I think 99.99% of people will tell you that they started too low, so yeah. Right. It doesn't matter though because you can increase price later. It's harder to increase than to decrease, I suppose. Yeah, true, but everyone does it. Yeah. How did you come up with those numbers? Was it sort of a 19.99? 100%. Oh yeah, it's, I mean, you can work as, so we're now for the first time. Did you ask customers what they would pay and, no, no. I don't think they can, I don't think they can tell you. Yeah, I just do, I mean, of course you can look at your kind of competition and then make sure that you're not 10 times cheaper or 10 times more expensive. But then once you know that and you have a rent, just pick a number and go with it. Just pick a number and go. Yeah, it's like in the scope of distraction that you can have in the early days, like thinking too much about the pricing is one of them. Just pick a price and sell the products and you'll see what people say. I wanted to dig more into one other thing about sort of the initial stages of growth and talking to customers. Is there any advice you would give? Because you just gave a really useful piece of advice, which is to talk to people who are paying more than people who aren't. But what advice can you give to people who are trying to extract useful feedback from customers? Yes, so I mean, I think first of all, you should understand that not everyone wants to share feedback in the same way. And so for us, we had different ways to get feedback. So one of them was talking to people. And so people that would accept to talk to me, I would talk to them and they would tell me I like this, I don't like that. But another thing that we did was we were using Trello for product roadmap. And so we published our Trello roadmap. And so if you, even today, if you go on frontlab.com slash roadmap, you can see our roadmap. It's public. It's public. It's always been public. I can talk about that, but you can vote for the thing that you want. And that's one of the way we got a ton of feedback as well. So I just felt like some people, and then another thing that we did was every quarter, at the beginning of the quarter, I would email all our customers and I would say, working on the roadmap for this quarter, what do you want to see? And then they would reply. And so I think it was a good mix of people that want to spend a lot of time, people that want to spend some time, and people that just want to do one click. But in any way, you need to have this data. So that sounds like it's a little bit later in your evolution when you had Trello and you had a roadmap. In the very beginning, when you were trying to figure out, you talk to Adora and figure out SMS, what was that like? How did you know if you were talking to a customer who was giving you useful feedback or basically wasting your time? Yeah, so I mean, so I think once you talk to someone, you have to figure out if you understand the person really well, because they can tell you, I think I want that and then you build it and that's not what they want. So the best way you can think about sales, so I would bet that most of you are not excited about doing a sales call. I mean, that's my guess. And it's normal because otherwise you would be doing sales in a company. And that was how I felt. Yeah, that's how I felt as well. So one thing that I would say is the way I thought about sales in the early days was I wanted to make sure I understood exactly what the workflows of people were, what their issue was, and then think afterwards, can front solve it. And I think that then it becomes pretty interesting. So today when I do a sales call or sales meeting or customer success meeting, I'm not here to sell extra feature or to demo the product. I find that a bit boring. But what I'm here to do is understand exactly what their pain point is and what their workflows is and then can I explain to them how that could be better with front, if it can be better with front. And so I guess there are two things that you need to focus on. One is being incredibly honest with yourself about whether front is a good solution for them. And even today, one of the things that I struggle the most with is telling our team, these are some use cases we want and these are some use cases we don't want. And being very deliberate about saying yes and no in the early days is insanely important. And you know that. The truth is, you know where you want this company to be and you don't know 100%, but at least you can tell if that's something you want or that's something you want. And then making sure that you were super curious when you were doing these sales calls and making sure that it was more about understanding something that someone is telling you more than demoing the product or showing a list of features they probably don't care that much about. Yeah, so I want to come back to that because it seems to harken back to your idea of discipline. Basically, you're saying you have to say no to some customers because if you want to keep your churn down to zero and you sell the wrong person the wrong product, you're going to have churn. Right, and I think the churn is not the, I think the biggest danger. I think the biggest danger is you have a customer and then you know, you care so much about growing your revenue. So then they're telling you, I want this. And so then you build this and I want that and you build that and then you just pull your, you push your product in a direction that you don't want to go. And I think that's the biggest mistake. Let's talk a little bit about sales because you have, I mean, you've had to learn about enterprise sales all on your own and you've had to build a sales force. Talk a little bit about what that's been like and what advice you would give to people who are probably just a couple of folks trying to figure out how to get their product into customers' hands. So I guess my advice based on a mistake I did was first you need to figure out, there are different sales motions you can have. So for example, you can have a bottom-up approach or a top-down approach. So top-down, you sell to, I don't know, CIO and then they deploy the product. bottom-up is you demo the product to the end user and because they tell you that it could be a great tool then that's how they will buy and I think that it's we try to do both and we've struggled a lot and first of all I think you should know how you want to sell your product because the people you will hire the way you will sell your like everything will be different if you're bottom-up or top-down so piece of advice number one now I can tell you that we started bottom-up so we had a lot of customers and it was like it was a numbers game so the only thing that I cared about was our reps should call every lead five times and should end up having 15 demos every week and I don't care about how they make it happen but I want to see that level of activity and so you know every morning we would receive an email saying here are all the calls that have been done and here are all the meetings that have been scheduled and that have been done and I think that the input is far more important at this stage than the output because the truth is if they don't hit their target first your target could be wrong and how could you know what your target should be when you are so early and two maybe your product is an issue or maybe whatever your pricing is an issue you don't know that so I've always felt like if you look at the end number it's actually pretty challenging and you might blame someone for not doing a good job whereas they're doing a really good job whereas if you look at just number of demos and calls they make and if you check that they're not saying stupid things then they're probably doing a good job and you should be happy and learn from that. You said something to me the other day about about one of the key lessons you learned and you were kind of referring to it earlier about about the importance of listening versus describing your product. Yeah so I think the tendency like you're all super either you're ashamed or whatever you want to show your product and I think that's the temptation and every person I talk to that's showing me their new company wants to show me the product the truth is like resist this temptation first try to ask me questions because then it's too late like when you've not showed your product that's the moment you can ask so much because people want to see what's new so they will answer a few questions and I believe that you should spend a lot of time listening to this understanding and then showing you know maybe 10% of your features and it doesn't matter but not showing like if I do the full demo of front like you'll be pretty bored now if I explain to you how when I was in your seat using front I think is one of the things that made us successful as the company then and I'm convinced and I'm obviously super biased but I'm convinced then maybe you'll be more interested to hear. So I'm gonna transition a little bit before we go to Q&A I don't know I have a feeling that your fundraising experience was maybe unusual not representative maybe a little bit too simple but maybe I'm wrong about that were there any lessons from fundraising that that you think are useful besides grow really fast and have a cool company because that helps right so I mean yes it's unusual every every time we've raised we've raised in a week I think if I think about why though so I think it's unusual and that's not what you should expect now the thing that we did well again like coming back to discipline I've published all my series seed series a series B deck there are nine so you can look at them and you'll see that our metrics are pretty good and it just like every single day every single week and every single month I care about hitting our targets and they will do everything it takes for us to eat our targets and that's what's shown in these metrics and at the end of the day even if of course people were excited about the team we had the market opportunity and whatever like if you ask them why were they crazy about front it's because of four metrics so yeah I just feel so good metrics the thing is you can't you can't imagine like even if it seems obvious the two things I've seen that I know are wrong from founders one is coming up with excuses so I'm you know for example I'm helping you as a company and you tell me I want our revenue to grow and then you know the week after we meet and I'm like what's your revenue you're like I'm not focusing on that because we had to redo our home page because the conversion blah blah blah and I don't care about your conversion like the only thing I care about is but I think you've convinced yourself that your website was more important and that's something that I see all the time is just finding excuses for not growing and I understand how hard it is to admit that you're not growing and that's an issue and you need to fix it but if you don't admit it to yourself and your team then you will not grow that's for sure one ultimate founder delusion yeah and two is then bring discipline to force you to face the reality and one way is to send this weekly email to your team monthly email to your investors like it's I've invested in a few companies since like I don't know in the past few years and you can't imagine how I can tell you after two or three emails so two or three months which companies are going to be successful and I don't know if I'm the only one to have that opinion or that insight but I just feel like there are people that will send an email and then nothing for four months and then email and then blah blah or some people they will change the format every single month and some people that are incredibly disciplined about here are our KPIs and I will send it to you every month and that's also what I show to my team and that's how we have focus so important that's a great lesson so last thing I wanted to talk about was you're a co-founder recently got sick and it caused the company to have to you know do a whole bunch of things and and maybe change you to sort of relook at your priorities and what was important to you as a person as a CEO as a friend as a co-founder and as just a human being in the company maybe you can talk a little bit about about what that experience has been like sure so December 2016 so a year and a half ago my co-founder was diagnosed with the cancer and it was pretty bad and now he's fine so all good but it took 18 months and I think the thing that I realized and that I would you know well you're here and you're listening to how to build a company every single day you're working on your company it's so important but you should remember that like the most important thing is to be happy and healthy and as much as you care about this company it's just a job and I can't it's it's annoying to have to go through these painful moments to realize it but one thing that I do now is anytime so there are many things that I've changed personally and for the company but at least anytime someone joined the company I go through a presentation and I share like what is front what I care about and I will always tell them like first and foremost be happy and healthy and if front is not a place where you can be and be happy and healthy you shouldn't be here and you know front is important but life is far more important and I think them knowing that's that's how you think is insanely important so just tell the people you love that you love them and spend time with your friends and go on vacation and all these things are equally important as price are more important than pricing your product in the right way and doing all these phone calls etc that's just what I've been asked to talk about the other thing is one thing that changed my life is meditation so and I'm also convinced that it would change the the life of probably I don't know 95% of human beings so you I felt like before I felt like I had a choice between caring so much about my company and so therefore being unhappy because if you care so much even if your company is doing okay there are so many things to worry about so I cared so much I was constantly upset like I don't know I'm worried this customer is churning I'm worried this person is not working out I'm worried I don't know how we'll hit our goals for next for next month etc and or then sometimes I try to care less but then the company wasn't doing as well so I was like either I care and I'm unhappy or I don't care and I'm unhappy because the company is not doing well so I'm doomed and I think meditation was really good because so I meditate 10 minutes every morning I wake up have a shower meditate for 10 minutes using headspace and this and it's it's really something that doesn't have immediate benefits so if you're waiting like I don't feel better after I've meditated it's just you have to think about it as a muscle that you're training and what it does is really what it says which is headspace so it's like I can't I could tell you if you want how things are going at front right now but there's so many things need to be figured out and the truth is I feel great it's like I know that I have a bunch of things to figure out and I know that either I'm working on them or someone else is working on them and so I care so much but I have this headspace to not be overwhelmed by everything bad that's happening and that's by far has been the thing that had the biggest impact in my life and I think my co-founder being sick is what led me to me being overwhelmed to the point where I was not sure that I could still run front and so I had to act and meditation was one of the thing I did so try not to wait until you have something that awful happen in your your life or someone you loves or someone you're close to his life we're going to spend more time on the topic of how to how to stay a human being while you're doing a startup tomorrow when Daniel Gross comes in to give a talk but with that let's go to Q&A for a while yeah enterprise and how you take care of the security and privacy part of setting it to the enterprise and I understand that you want enterprise customer that desperate about it but like when you actually are at a point where you are dealing with that like what is the best part of it how much is enough yeah so the question is is around dealing with safety and security when you're trying to sell to enterprise customers and how soon can you get it in their hands I think things like that yes and so even if you know we didn't start as an enterprise sales we are dealing with emails so security was a big deal so what I would say is it's never enough the thing is you have to find the companies that are willing to take more risks because you have no choice like for us of course everyone wanted us to be suck to complain and stuff we're still not suck to complain today but what we did we did a lot of things from you know just a one-pager that explain everything about why our business is secure to very early on Tesla started using our product and they wanted to make sure that they were using it for product feedback and they were they wanted to make sure that their information was secure and so we did a few penetration tests like that doesn't cost a lot of money but you know then if you can say okay we had good results and you can show the results to other companies then at least it unlocks some potential it's but the truth is you also need to agree to not go after a few industries or just not go after a few customers because they always want more but there are companies that will accept to have their emails deal with a company that's three months old and there's nothing about anything you know and they will because there are a few things that you can show them okay you got the same answer twice so hopefully that helps yes how did you define why in the end did you choose a subscription based model so I believe that people get more benefit out of the product when they have more users so that's the reason why I also think that most of our most of the competition so whether you're looking at help the solutions or email products they charge per user per month or per user per year so the combination of everyone does it plus it seems in line with the benefit that people get is what led us to have a subscription model what's the best way to notify your users you're going to raise prices yeah it's a good question so I think so I was chatting with the president of Atlassian about that and he gave me some good advice which is the temptation is to say we're going to raise our price but we'll do that do that maybe in a year and so you want to be nice and so you give a lot of time the problem is you actually make your customers angry twice because by then they had forgotten and so then BAM again so it's almost as if you increased twice so one trick I've used so there is not like just tell them and and then do it sooner than later there is no good way to do it one more trick that I've used that I think is successful is for us so we have monthly subscription and yearly subscription and so you can tell them that if they switch to a yearly plan they will lock their price for one more year which is win-win they pay less you have the money up front so at least that's one way to show that you care about them so randomly so how do you set the target for the first salesperson you hire so randomly the truth is I didn't know because I was the only one doing the job so there are a few ratio you can hear off so for example they should bring between 3x and 6x the the the amount of money they're paid so then you have a range because the truth is if they bring less than what they're paid probably not good 10x like probably not good either like you should hire more so once you have that then building trust with your first rep saying that's what I will inquire against I have no idea if it's the right thing but let's reassess every month and then let's be realistic about what's feasible or not yes oh this is a hard question so if users bounce how can you find them yeah there are a few technology that you can use like clear bit is one of them but I mean for us we I care more about the people that sign up and end up never converting because they should interest the truth is I think our conversion rate on our website I don't know is maybe 3% so there is so much and we don't know about them so we don't do much about them leaky funnels at the top are difficult yes yeah how sorry how early should you put pricing out there and be transparent about it even even while you're still in beta so it's a good question one thing I did that I think was a great idea was so implementing stripe for us took some time and so but I wanted to know if people were willing to pay for the product before we had striping implemented so in private beta when you sign up to France you would receive an automated email from me saying what would you give me to get access to your to our product and so then I don't know so I like Legos and that was on my Twitter feed and so some people would send me Legos Lego sets or like when our first customer is a company called Lumio they do a lamp and so they said we'll give you a lamp and so I guess I was just very you know creative into trying to understand what people were willing to give and if it's not money doesn't matter the truth is even giving an hour of their time if you ask them you can have access if you spend 30 minutes an hour with me is a proof that they will accept to give something in the back how did you get those first 3,000 signups for private beta so it was only content marketing so I was doing an email product and I was really writing all these blog posts about is email dead as slack is saying or like all kinds of thing that I think people were curious to hear about or what will email look like 20 years from now and content marketing was or then I was at YC and I was writing a something about what it's like to be at YC a month in and then another one what it's like to be at YC three months in and and just people kept reading them and so content marketing has been big for us I think it's good in the early days I don't know if it scales as much I don't think it does but that's how we got our signups yes on more features based on what you hear from the customers, once you have a set pricing, and they kind of understand that, and then they ask for more features, how did you adjust your pricing after that? So how do you adjust pricing in the context of feature demands or new product demands from customers? The truth is new features are always a great way to upsell. And so usually what I like, I was very happy to build a new feature and put it on a new plan and say, you can have a 30 day trial of this feature, but then would you be down to double the price per user if you're using that feature? Also something that we did two years ago, and I wrote a blog post about this, is we built a backend system that enables us to iterate super quickly on our pricing. So if tomorrow I want to change one of our enterprise feature and put it in the premium plan, I can easily do it. And I can just release the new pricing, doesn't change anything for existing users. So that's a good way to just look at your cohorts and see where does every feature fit best. Okay. We're going to do one more question right here. Hi. You said you quit your job, you wanted to work in email. How did you figure out exactly what product to build? So the question is you quit your job because you wanted to work in email, but how did you figure out what product to build? So I think email is a big problem to solve, and so we had to make sure that we had the right go-to-market, which was shared email addresses as a way to enter this market. The reason is it was an easier product to build. People were willing to pay for it, and you could have a lightweight deployment within an organization. So not the entire company needs to use Front. The reason I chose that is I had a pain point when I was at this company. I remember that we had all these support at sales at addresses, and people kept asking me, did you reply to this email? And I was like, yes. Do you want me to CC you on every single email? No. So just believe me that I replied to this email, and that's a pain point I had seen, and so I thought it was a good entry. Awesome. Thank you, Mathilde. Thank you so much.  Thank you. "
  },
  {
    "name_video": "Live office hours with YC's Kevin Hale and Dalton Caldwell (2017)",
    "description_video": "YC's Kevin Hale and Dalton Caldwell hold office hours with three startups: HubHaus, Lambda Intelligence, and Commaful.",
    "related_categories": [
      "Office Hours ",
      "Early Stage"
    ],
    "page_url": "/library/7n-live-office-hours-with-yc-s-kevin-hale-and-dalton-caldwell-2017",
    "youtube_url": "https://youtube.com/watch?v=8Qc8ipjzatY",
    "mp3_file": "downloaded/Live_office_hours_with_YC's_Kevin_Hale_and_Dalton_Caldwell_(2017).mp3",
    "mp3_content": "Hey, how's it going? We're going to get started. Yeah, I'm Dalton. I'm a partner at Y Combinator. And we're going to be doing office hours today. Yeah. Yeah. A couple things to note. I know that a couple of live office hours happened beforehand. We're going to try to spend a little bit of time, even after these, to talk with the different companies. 20 minutes for office hours is not a normal time period that we'll do stuff. So we're going to try to do it as fast as possible. Apologies in advance. We might interrupt you, just because we know how short the time is, to try to get as much information out of you for us to communicate as well. All right, thanks a lot. I think. Yeah. How you doing? Kevin. Kerry. Nice shooting. Dalton, how's it going? And then I think you'll need to use the mic, right? Yeah, the handheld mic. Yep. So just very quickly, introduce each of yourselves, like your name, your role with the company, and then name of the company, and what you guys are doing. Yeah, I'm Shruti. We're with Hubhouse. And. Kerry, and I'm the CTO. I'm the CEO. And then what does Hubhouse do? So Hubhouse does co-living. We provide co-living spaces for professionals. So if you're new to the area, you've just, you've just gotten here, and you want to rent a room out in a house with a curated community, and you want it to be set up, you can move into one of our rooms. And then, what does co-living exactly mean? Co-living means living with a group of people. So basically shared housing. How many people? Our houses are five to ten people. Some co-living spaces can range up to 30, but ours are five to ten. And then, is it, is the characteristic that you're sharing a bathroom with a bunch of other people also? Not necessarily. Some are, some don't. Gotcha. And then how are things going for you guys so far? Pretty well. So we launched 18 months ago. We are now at 220 tenancies across over a dozen cities in the Bay Area and Los Angeles. What's the occupancy rate for the house? We currently have a occupancy rate of 94%. Most of the vacancy rate comes from our launch vacancy. So our vacancy rate, not including the first two weeks and the last two weeks, is about 2%. 2%. So when you say 94%, like how many people does that mean, like in 220 properties? So I'm sorry, so 220 tenants total. Tenants. Gotcha. 220, yeah, that includes, so that doesn't, so we have more rooms than 220. We have about 230 rooms. Yeah. 230 rooms. So in terms of the timeline, when did you first start? Like you said, 18 months ago, but what did that look like, the very first tenant, I guess? Yeah, so first thing is we got a house, and I was actually, we both still live in our hub houses, but I moved into our very first hub house. And then we got a bunch of tenants, and the first few houses was very much so a learning process. We were trying to figure out what works, what doesn't, and try to create this backbone for our co-living spaces. Does that answer that question? It took about seven, I think it's seven houses in the first three months. Okay, and so you guys take on the lease. What are the terms of the lease that you take out? It's just a standard one year lease, but then it goes month to month? I see. Yeah, so we do one year to two year leases for each of our houses, and Do you need any special permissions from the actual owner of the property to do this? Yeah, so we are completely upfront with our owners. We let them know exactly what we're doing. We sell it as a benefit. We act as a property advisor to the owners, and we guarantee them rent every month, even if the house is completely vacant. And then what's the margins that you get currently? 30 to 40%. 40%, so let's just say, let's just take a typical property. You have one house that has how many rooms on average? Six. Six rooms, and then how much are you paying rent on that house? So roughly $6,000. $6,000, okay. And then you guys will make 40% on top of that, usually through renting out. So if I'm a property owner, why is this a good deal? You said an advisor, I don't really know what that means. Why am I like, wow, please have a bunch of people come into my house, and maybe it's going to depreciate a lot. Yeah, so most of our property owners have pretty large properties which are hard to rent out, so we're able to quickly rent out a house which maybe rents for like $6,000 to like $8,000, $9,000. And instead of having to deal with a typical roommate situation where you have to deal with five, like six or seven- But the landlord doesn't care about that. As long as they get paid, this has been going on a while. The landlord is like, I don't care. As long as the rent shows up, whatever you guys are doing, not a problem. Well, so at the end of the day, as a landlord, you want one check. You want to make sure your house is taken care of, and you want professional people living there, and you don't want to have to deal with it. So we take care of all the hard stuff. If there are any property problems which come up, we advise them on what to do. But at the end of the day, all you're getting is one check, and you don't hear anything from us. So what's the rate of growth? So how are things going right now? You said you're doing pretty well, but is revenue increasing monthly or weekly? Yeah, so we just raised a round, and after we raised, we've kind of scaled back, and we've been growing out our team. Why would you scale back? We wanted to hire a team. We wanted to make sure our processes were going well. We will. Sorry. We were working about 80 to 100 hour weeks, each of us, and we were kind of reaching the limit of what we could do without a team. So just to go back, so what is the rate of growth right now? About 8 to 10%. 8 to 10% a month? Yeah, and we're growing, so before that we were doing about 15 to 20%. How fast are you adding on new properties? Is that pretty much your bottleneck, finding supply? Right now, our bottleneck is operations. So we want to make sure that each of our houses is launching smoothly and well. So that's what- So right now you don't have a playbook for launching, how many properties do you have? We have 40 properties. 40 properties, and you feel like you still don't, why do you feel like you don't have a playbook after 40? I mean, we definitely, we do have a playbook. So we do have a step-by-step process that we go through. But we've just gotten our team on, and we're building out our tech and training so that we're able to scale sustainably and provide a fantastic experience to each customer. So when you say you want to build out a team to build tech and training, can you just dig into that a little bit? Like, what do you need the team to do? We now have a team. So before, until December, I was the only full-time person working. And in December, Kerry came on full-time. Kerry was working as a co-founder before that, but he came on full-time. And then we had one employee in December. So the past few months, we hired on a property manager. We hired on a person to help out with partnerships. And we want a second developer to basically help us build out the tech to automate a lot of these manual processes that we're doing. So just like responding to emails, responding to tenants. With property management inquiries that come in, there's ways to automate a lot of those steps. We do look at ourselves like a marketplace, but it's not a true marketplace because we're not connecting the landlords with the tenants. And so we do have the supply and demand factors of it. We found that it tends to go back and forth between. That doesn't make any sense to me. I don't understand that. Which part? It's two parts. Yeah. So, right? And you're connecting them together. So I don't. So the tenants never deal with the landlords specifically. And so we're not connecting landlords with the tenants. We have to make the deal with the landlord themselves. Right, but it's one ecosystem of supply, one ecosystem of demand, and you're bringing them together. So regardless of how the connections happen, it still works that way. What I'm trying to figure out is, how does this sort of win? And the thing is, do you feel like part of co-living is this movement? People are realizing, I want to work. And it's a lot nicer if I can work with a bunch of other people. The places where I want to work, I take it you mostly are in the Bay Area, right? Yeah, we're in the Bay Area and LA. Then it's really expensive to get places. And so for the places where I'm trying to get in there really quickly, I might not have enough capital to move in. So co-living is a way to step into that. So what I'm trying to think is, do you have a reliable source of supply for people where this, let's say this is a really big trend, that you're going to be able to onboard. And I'm trying to figure out is, at what point do you feel like you are ready to add on new properties? And at what rate do you add on properties? So we're picking up approximately four to six houses a month. Four to six a month? Yeah. Okay. And then how long are they vacant before, like how long does it take to get a house up and going? So the time from when we sign a lease to the time the first person moves in is about two weeks. The time from when we launch the house to when it's 100% full is another two weeks. So about a month before it's a completely up and running hub house. About a month. So we've seen a lot of people work on this idea, and it seems like you can get about as far as you have gotten, which is really great. But because you actually have to take on the lease, and because you have hard costs, sometimes these can look much more like a real estate business than a tech business. And so I think what I kind of want to get at is, are there ways that you can not hold the leases? Is there a way you can make this much more efficient from a capital basis? because right now, this is basically a real estate business, right? And it sounds like there's some tech in there, but I haven't really gotten from you that tech is the differentiating factor that will make, it sounds like it's a lot of operations work to sign leases and then get people in units, which is pretty traditional residential housing type business, so how are you thinking about what lets us get huge, right? Like what are your thoughts along those lines? So part of that, so there is a good deal of tech. I do agree that it is not the key differentiating factor that we have. Some of it's different, and we automate a lot of the operations that are happening. And one of those- For like, hey, the faucet's broken, can someone fix it? And you open a ticket, is that what you mean? Can you tell me what that means? So more along the lines of automatically finding houses to go and see using some different methods there, automatically posting. And so we have a constant in stream of probably about 100 tenants reaching out to us a day that's being automated by tech. A lot of the interoperations going between that is operated by tech. None of that's very, some of it's unique, some of it's not so much unique. I'd say the bigger differentiating factor, which we haven't mentioned yet, is the community fact that we build into it. Which is, a lot of people come because it's cheaper and because it's a place that they need quickly. But we have a very strong community element and create an infrastructure in each house. So people are actually forming these really strong bonds. How do you make that happen? So part of that is we set up monthly dinners and we give them formats of these are things you should go over. And we throw events every month for the entire community. And so we're actually connecting these people. And for that reason, we've had a continual growth. While we started with month to month leases, we've moved up since then, our average stay length has been a continual process upwards since the beginning and still going. Quite honestly, I feel like this really comes down to cost. Like people want to move into cities in places where it's highly desirable but property is like not abundant. And they're trying to figure out how can I get to this in a cost affordable way. So co-living is a way to sort of make it happen. You can advertise all these community stuff. It's stuff that you can tell the people, but it's no different from an apartment or condo complex. It's like, hey, we have these community stuff. We have a pool room. We have these wealthy dinners or barbecues. It doesn't sound any different, because no one says, we don't have a community here. We don't do anything nice for the people. Make sure there's a bunch of shitty people here living inside of it. You don't sound any differentiated from it. So all I can think is this is pretty much, it's either a land grab, because usually you have more great properties than anyone else. And then onboarding feels so simple and easy. Basically, it's like someone contacts you on average, how long before they're moved in? Is that a month? No, so it's, I mean, it's as short as a week or two. But I think the difference is that the house is, access to rooms isn't easily accessible right now. Access to rooms in single family homes with curated communities, the only way you can get access to these is through Craigslist or by setting it up yourself. So we're unlocking a whole new market, which is- The whole thing is you build a brand that gets people to trust you. Are dead houses still a thing? Rob Levitsky, anybody? Dead houses? Anyone live in a dead house? Yeah, okay, cool. Yeah, okay, so clearly there's people that want to do this. And okay, so it sounds like we have about five minutes left. So what are the things you're thinking about that can make this as constructive as possible? Because just to summarize, sounds good, you're making money, good job. What might be tough is, what's the move to make this huge? Let me give you some options. Sometimes people that are working on the startup idea decide to actually buy their properties because you can renovate them. And then you actually own an asset, and it becomes almost, again, like a real estate business. And I've seen, that's kind of the WeWork model, right? So I've seen that happen. On the other hand, you can try to make this as asset light possible, where maybe you're not taking the obligation of the leases, right? And then you can grow really fast and somehow have a special deal with the landlords. Where you can just grow really fast, and then you're a true marketplace, because you're not holding any of the liability that right now you're holding. Or you can, again, maybe you found the just right compromise between the two. So this is sort of where I would think about from the long-term perspective. Do you have thoughts around where you see this going in a year or two? So the latter is probably the direction we're going to go. The reason why we have it is just because it hasn't really been a problem until now. But in the future, as it does become more of a problem, we do want to shift more of the liability to the property owners. Got it, and one quick question while we're on that. Is there any insurance implications to this? What kind of insurance do you have to take out? So we do have a pretty comprehensive insurance policy to cover our properties for tenants to damage anything, up to if the tenants burn down the house or something, they are covered. And then we are also asking our tenants to get renter's insurance on top of that. If your problem right now is operations and you're recruiting, trying to find people, what is your pitch to people? To get people on board to say, come and do this startup. Because it's not many people's dream to be like, I'm going to work on basically the new form of apartment complexes or dorms, basically get dorms for millennials. So I think the biggest piece of our company is our community. So each of our houses is almost like a family-like environment, and people can really buy into that. I mean, I think a lot of people out here don't really have access to that, and around universities, sure, some people have access to things like dead houses. But most people move out here and are lonely and don't really know people. So being able to offer the sense of community and the friendships that form from within our community is probably the biggest pitch that we make. And so you think that's the long-term defensibility thing is ultimately I'm just trying to make sure I understand. So you're saying, look, we're going to have the best community and the best brand for community, and that's what will attract people. because again, with this kind of business, it's very easy for new entrants to come in. So if we use the example of Airbnb, anyone can make an Airbnb clone. But what they actually had was network effects, where just like eBay, it's hard to communicate with eBay because they have the buyers and sellers. What's the equivalent here? It is the community? Is that what you're saying? So it is branding, a lot of that. And we do have a network effect, because it's not just community in the houses. We connect all the houses to each other as well. So we do have a bit of a network effect there. I do think branding is the defensibility part. The other key part that Shruti's mentioned to me in the past is, most of the competitors can do one or two things well. So Campus was a previous company who did something very similar, but they had very low margin on it, and they did the community aspect really well. People loved staying in them, but the operations was awful. And then there's other companies that do the operations very, very well. But, and many people have come to us and said, everybody talks about community, but you're the only ones with it. And so we feel that what we have is different, but we are also good at operations. And so that's the part that we are trying to scale and trying to hire for tech to turn it more and more into a tech business. And to take all the lengthy processes that are taking operations, like we're hiring for more engineers right now. And making that as automated as possible, so we can do less of the actual, the signing the leases and the direct things there. I think all the community stuff are good. It's stuff for you to focus on. It'll prevent churn from happening. Before the conversion, my feeling is your bottom line is probably still supply. So whatever it is you need to do to relieve yourself on what allows us to say, we want to take on more properties. Because really, what you've set up is your liability is that first month's rent that you need to take on, which is pretty decent, sort of capital liability. So if you can figure out, how can I turn around where I sign a house, right? And I can turn around, I think you also have to put a safety deposit, like a security deposit also. So it's almost two months worth of rent that you're taking on before you can have it covered back. And how long before you have that covered? So it's about a month. About a month, so- It's going to be about two, no, it's going to be about four months before you cover two months worth of rent. Well, we collect back security deposits from our tenants. Great. And then I think that's all it comes down to. You need to figure out how to do all the community stuff up ahead of time. But everything that allows you to say, I want to take as many properties as possible and figure out how to jump start them. And get people into the houses or homes very, very quickly without losing quality. And so the whole thing is, what is that exact playbook like? And you want to almost time yourself. It's like, okay, I've identified a property. How long does it take? What is our checklist that's very, very reliable for us to determine if it's viable or not? Go in there, figure it out. And that's where part of the tech is going to be, seeing how much can we do online. And then the second part of it. it's going to be like, we send someone down there, they do a very quick assessment, and you have a team that quickly turns around the place, takes the pictures, puts the listing up there, and gets it out to people. So that's like the first, supply. And then your demand is just like being very proactive on getting the demand so that a lot of the people, tenants, like you get testimonials, you send it out to whatever universities or wherever people are going to be looking for housing. And so make sure that they all think like, HubHouse is the first place I go to consider moving to a new city. It's like, I want HubHouse to be there because I know that's a good, even if it's transit or it's like, I want to go there, be there for maybe one to two months, and then I'll, maybe I'll transition to something better. Or some percentage of them say like, I just want to stay here because this is the kind of community I want to be with. Imagine most people are going to eventually graduate. Nobody wants to live in a co-living forever. Some people might, but that's actually, I think, the thing I most worry about. Co-living, kind of like co-working spaces, the thing I always get nervous about in terms of brand erosion, is that it's not an easy way to like churn people out. And the thing is like, in places where you go where great people will graduate, what ends up being is like, it slowly starts rotting with people who like can't leave. And it's like, I don't have anyone else that loves me enough or wants to live with me. Or, and it, it looks like online forums, it looks like co-working spaces, and it's just like people don't want to be in those spaces anymore. Cuz it's like, oh, it's all filled up with people who like never left, and they start getting grumpy, etc., etc. And it's just like, where are those places? But, what you want to really pay attention is like, how do I figure that out? Like, how do I make sure that this stays fresh? How do I make sure that like, people who might be creating rot will not like, like poison the rest of the house? Yeah, to paraphrase, these kinds of businesses, churn kills you. And the founders never realized that they have high churn until, like, you may be like, oh, we have really great churn. Everyone always says that. But like, and you don't, you don't have enough data yet. But over the long run, sometimes you can, things can creep up on you. And if all of a sudden you start to have high churn, and then you're on the hook for all these leases, like, these can get tricky. This is, a lot of the food delivery type startups, like there's a whole class of things that don't work. And they're like, we have positive margins, and we have low churn, and we have great, like they all say the same things. But if you really dig into them, the, the secret hiding in their numbers that the founders don't want to admit to themselves is that actually, churn can get you. If you have hard costs like warehouses, not for you, but for other people. If you have all these hard costs, and then you have like some down months, like you have to pay your rent every month, you can't get out of it. Like if community is everything. Yeah. Then the tools you want to think about also are like, the equivalent of what you might see in like moderation tools. Like what, like, we have to build all this stuff to work, work on communities at scale. How does that work for like, within homes and houses? Like how, who do we have to empower within our community to make them sort of work and carry things onward? Lots of great real life communities that have grown to be really big, they have, they actually be really careful of like how they sort of set that up. So there's going to be this delicate balance between, that you're actually going through right now between like, I need to achieve growth and revenue, but also need to make sure the community is like taken care of. And so like the moment, I think you choose this way above this, then then there's the sacrifice. But the thing is you have to figure out like how do I get these to work in tandem in a way that doesn't break everything. And hopefully this trend, and this is the other thing I always worry about, is that this is a trend that just might break over time. Like just people start, cities and governments are building enough housing that basically people are able to find cheap housing on their own. They just live by themselves. From your perspective, what do you think the biggest risk is? Like what do you, is it, is it, you need to hire operations people? You know what I'm saying? Like what do you think is the, like if you had, in the future, let's say it didn't work, and you're like, man, it was this reason. You had to guess. What do you think that is? We definitely do run a risk that if the market crashes, rents could just crash. And we are locked into one to two year leases, which is why we try to restrict it to one to two year leases. Yeah. I think that's, that's a big one. Can you think about it? Yeah, I think, I would agree that that's the number one risk. The other part is not being able to out, be able to continue to scale because operations cost are not able to be automated in a valid way. Yeah, and like for your own edification, I think a good thing to do would be to amortize all of your costs for operations and your time when you're calculating your margins. This is a, this is a classic thing people do is like, we do food delivery and we have positive margins and it's, it's just that they sell, you know, a burrito for ten bucks and it costs them seven bucks to make it. But if you include delivery costs, if you include support costs, if you include returns, if you, like, if you actually bake in all this stuff, they're definitely not positive margins. And so I think in your case, just for your own edification, try to bake in some of these costs you have from an operations basis. That you have your 80 hours. Yeah, you gotta put those into the, your margin calculation, you know, and that'll just help you know that you're actually building a great business, versus you're just like, leaving out some of the costs in your margin calculation. Yeah. All right, we are out of time. Thank you so much, I had a fly spot. Thank you, appreciate it, thank you. Thank you. Thanks. Hi. Hi, how's it going? Good, how are you guys? Good. Okay, so what's your name? My name is Osh. Hi. Hi, Osh. Shea. Hi, how's it going? Hi, Shea. Good, nice to meet you. So we are Lambda Intelligence. I'm CEO. And we've built an API that allows developers to extract product information out of digitized receipts, so image, receipt images. And turns out it's, there's huge volumes of data that's locked up in these receipts. Okay, before you go into your back story, can you be really clear, so who's the customer? So we're actually selling to mobile app developers. So we've got a mobile app developer who's, who we just signed a contract with. They're our first customer, but they're paying us $2,000 a month right now for processing, basically processing our data. For processing, basically product information out of receipt images. Okay, so you guys offer an API to be able to take receipts and just give them structured information. Exactly. And then can you give me one more use case? Why does this developer need this? So the core piece here is not just the OCR, but it's also mapping the shortened product descriptions and the prices to the actual product, the full product name, description, brand. All of that type of structured information. So, but what is their app to? So like, why would I want to download their app? What do I get to do with it? So, they're a loyalty car vendor. Yeah, so they're using this to better their app and better target themselves to their customers. So that's why they need this product information. So, I always get nervous with API companies because basically APIs is like the bottom rung of infrastructure for software projects. And so, they tend to want to be commodities ultimately in the end. And so, the great API companies are going to be like, okay, if we're going to figure out how to do this as cheaply as possible, because this is going to eventually become a commodity. Then, which ones are going after markets that are super, super huge? So that's why I'm very interested in who the customers are. You're like, mobile app developers that need to read receipts. How many of those are there in the ecosystem? That's actually a good question. There are only 200 mobile app developers, but the second side of the business that we are focusing on is that brands are really interested, deeply interested in this type of data. So, we're in talks with one of the top brands, with Kraft, and they've expressed interest in getting this type of data from us. So, okay, so your real customer is CPG company. Exactly, yeah. But the thing you need to, okay, so you have like a multi-step process. You're like, are you giving the API away for free? Why not just give it for free? If the real customer is these giant CPG companies, why not just be like mobile developers who have a really great OCR receipt reading thing, have at it, and then because you have the best data collecting all that information, then you're able to actually close these enterprises. That's kind of our plan going forward. Right now, we're able to get some revenue off of just providing this OCR API to our mobile app vendors. And so, that's kind of our way of bootstrapping. I think it'll just slow you down. The thing is, how bootstrapped are you? Are you going to run out of money? We are completely bootstrapped right now. Yeah, and right now, they're paying us $2,000 per month for processing their receipts. This is on track to scale up to $15,000. Sorry, just like, you process the receipts. What are you pulling out of the product data? Why are they giving you, that's a lot of money for an app developer to give you. What is the thing that they can't build themselves that you can build, that's super useful to them? So, the thing that we got is that we built a bunch of scrapers, and we've got some partnerships in work. So, are you scraping their email, or what are you scraping exactly? We're scraping receipt images, so people take photos. Okay, the user photographs a physical receipt, and then the app developer calls your API and passes it like a GIF. And then you OCR it, and you're like, okay, this is what this thing says. Yep. Exactly. Okay. We structure it for them. Okay. So that it's not just the receipts, but the discounts. And they need that to do loyalty. Okay, so I'm just making sure I really understand exactly what your API does. Okay. Yes. You get it? Yeah, I do get it. Just makes me nervous, because if your real customer is a CPG, it's like what's your real business model. How much data do you need to collect for craft to say we'll even look at this? So. I know it's got to be a lot. They want a million receipts a month. Gotcha. So all the mobile app developers that potentially need this, how much? Is that much? because I feel like the people who mostly are going to track receipts are going to be people who are tracking expenses. It's the only app I use that I take a picture of my receipt. Nothing consumer related do I do that. And there's loyalty stuff. But going along this line of thinking, so if your real customer is a CPG, and this is sort of, everyone can extrapolate from this in the audience. Maybe you should just be building the receipt tracking app that does loyalty. It seems like you're trying to use this API thing as a shortcut, and it's going to be hard. But you're like, well, we don't really know how to get a million receipts, so let's just build an API, and other people will get receipts. And that kind of sounds like wishful thinking, unless. And again, it's great that you have this first customer, so congrats on that. But to get a million receipts, are they going to have a million receipts? So they're on track, so they want us to do about half a million receipts right now. So they're getting us close, and so we'll need to work with a couple others. They're actually processing that many? They're getting that many. And so that's one of the reasons. Okay, along this line of thinking, and they're cool with us, right? because sometimes what's tough with an API company is if you're doing something, and that it's really straightforward how you're monetizing it, you're kind of a middle man, and eventually people like to squeeze out middle men, right? And so maybe they're like, hey, this is really valuable. Maybe the app that you're selling the API to also wants to sell us the CPGs. Do you see the tension there? Yeah, yeah. Yeah, we see that. And actually, we've done research, and CPGs are buying lots of data from third party companies like Oracle, DataLogix, Experian, and they're spending millions of dollars to get this type of data. And what's interesting is that this data is more aggregated in nature, that it's mostly transactional. And what we are getting at is product level data that we are focusing on, which we know brands really want. So that makes sense, but I think just from a scale perspective. My understanding of what data brokers want for ad targeting is tens of millions or hundreds. The scale that you need to build a data business is much larger. Have you seen anyone, even with millions, maybe for millions they give you a small. So the closest ones I've seen the people doing this is they're offering companies for free. So grocery stores, electronic stores, retailers, basically for free e-receipts. They say, we offer this technology, e-receipts for free. And then what they do is they take all the data. And what they have is it's good for those customers, it's good for retailers because they're getting information they wouldn't have otherwise about their customer base. And then they resell the data as a data play, the CPG, and even bigger retailers. And so the whole thing is a race to the data. So if it's like, I closed this company, they're doing half a million receipts. Well, okay, maybe this is easier than I think. Then what's the barrier for you closing more people? Right, and I think that's something that we're actively trying to go after more of these kind of data sources. And so the more data sources that we can get, obviously that improves the value of our- Yeah. Yeah, so how's that going? You said there's 200, so have you emailed all 200? So we've emailed about 100 of them so far. And what have you learned? We've learned, so our response rate has been about 25% so far. And we've learned that the current mobile app vendor that's providing us this data, like them, others are also interested and they are willing to share their data because they are experiencing similar problems. They have all of these- You had 25 people respond to you. Why are they not customers? That's actually the question I'm interested in. So we actually only launched our private data with this mobile app vendor about a week and a half ago. So we're still super early on this. And so we've got a list of meetings like next week. And so one of the reasons why they're not customers yet is because our sales cycle is a little bit, I think, probably at least a month or two. It's still pretty good. Yeah. But I mean, these aren't really enterprise prices that you're charging. Right. I think for API, the biggest thing is, for any API, is you have such a long cycle because you've got to meet with someone on the CTO. You have to have someone actually try the thing. Are people going to be invested? Is it meeting at the right time, right? So it's at the time that someone's developing the app and need to work on the feature is at the time that they need your product or service. So it's really a matter of you need all cylinders going up once to have as many of those people try, because you don't know at what point, and all of a sudden, there's a proper nexus for the sale to actually close, or usage to actually happen. When you talk to this craft, how much were they willing to pay? So they were looking at $0.20 a receipt. $0.20 a receipt for a million receipts? Yeah. Yeah. Okay. So, fascinating. So, one thing, this is just like a general purpose piece of advice. It's like, when you're dealing with large corporates, they employ lots of people in the business development role, and their job is to meet with people and to find innovative stuff all the time. And for every deal that they actually do, and for every, you know, contract they execute, they probably meet with 100 startups. And so, we meet with a lot of startups all the time that have similar things where from their side of the table, you just ask for something crazy. Like, go get a million receipts, and then we'll look at it, and maybe we'll pay. But, you know, I doubt they're saying that in writing, right? Did they send you a contract? No. Okay, well, so you can give people these impossible tasks just for fun, and see if they come back with it. But even if they do come back with it, that doesn't necessarily mean they're going to do the deal with you. And so, we're always talking to startups that they believe the best case scenario, and it's so good to be optimistic, so I get why. But they believe the best case scenario that, you know, hey, this huge Fortune 500 company is going to do a deal with my two-person startup, and they're going to give us a million dollars. And man, does that rarely, like usually, to pattern match here, usually you have to stair step up, and you start with smaller customers that say yes more quickly. And it's for smaller dollar amounts. And you'd have to do that for quite a while before you're able to get one of these deals. You can, sometimes people call them silver bullet deals. You know, it's like the deal that makes your startup where you go from zero revenue to a million. Somehow, the universe makes those very, those things rarely happen. And so, I think in your case, one negotiation tactic here, maybe, is to be like, hey, we don't have a million receipts, but why don't we start with a pilot? We do have whatever. Half a million. How about that? Let's start with that, and let's just get this going, and let's do our first data drop, and let's get this on paper. And what you can do when you're negotiating with these kinds of people, is to try to, if they're saying, come back with this really hard thing, and then maybe I'll say yes, get, move them down to something you can do, something that's more minor, and then just try to get it in writing. And once you get something in writing, it's so much more likely they'll do the deal, because talk is cheap, man. Like, anyone can say, oh, we'll give you a million dollars if you do whatever. But to get someone that works at a corporation to put something in paper, they're either coming up with an excuse why they can't, or they're actually serious. And think about how much better that would be for you as founders if you had something in writing. Because then you know this is real, and that can give you so much more confidence that you're going down the right direction. So that's always something I would suggest. This goes for everybody, that when you're dealing with these big organizations, is try to get anything in writing. You have five minutes. The thing I don't like about this kind of code is inefficient. Like, one, you're working on commodity level, data processing, it's being set up, and then. You have to do one thing before you can do the other thing, all right? And it's a two-step process. And so there's so many additional risks. So to me, it's always like, all right, if I'm trying to get this other thing, how do I make that go really, really fast to prove out this sort of nature? So that's why my first instinct is like, you should just make this free. It's like, if your mobile developers really want this and everything comes down to you having as much data as possible, then you make sure that you get as much data as possible, as quickly as possible. And that means doing it and doing it at a scale that other people won't be able to sort of compete. because I firmly believe down the line, this technology for OCR processing for receipts and stuff, that's going to be fairly common. Maybe this is a dumb question, but is there a reason why Expensify and all the receipt tracking things aren't just doing this? Why can't the CPGs get access to all these other receipt tracking data things? I mean, what we've seen so far is that a lot of the accuracy levels in receipts is still pretty low. Interesting. And especially because you can get at the direct OCR, that's pretty good at this point. But it's going from that OCR kind of piece to an NLP piece that a lot of companies either are really good at. Do you actually need the SKU, is that what you're saying? Yeah, yeah. Is that they can get pricing data, but they don't have the actual SKU to map it back? Exactly, that's exactly what it is. And it's one of those things, this is a problem that I actually solved when I was a co-founder at a healthcare company. We had lab reports that we actually had to match to individual SNOMED lab codes, and so I did that there. And so we were able to do it for 40 million patients. That's great, so here's something to think about when you're at this stage. It's like, you think about, what are my strengths? What are the things that we can do really well that no one else can do? And what are the areas where we're on the same level playing field with everybody else? And so I feel like what I'm getting from this conversation is that a lot of your strength is in this technology. And it is in the fact you can build this amazing OCR. And it sounds like you've been trying to find what the best possible market is. And so by doing a bunch of customer conversations, you ended up saying, hey, you know what, CPG's got money, and we can use this technology we already know we're good at. And so I would think of your core strength as being the technology. On the CPG side, until you have your first thing in writing, that's still in the question mark. It's not not a strength, but you don't, it's not like in the bag in the way that, it sounds like you have this technology and it works today, right? That's in the bag, like you can take that to the bank. And so I would think about, thinking about what your strengths are, and then maybe being open minded to how you monetize it. because it could be, until you get this right, until you lock in this risk, that this may not be the best possible market for this technology. I call it being promiscuous. Yeah, be open minded to ways you can use this. Like other people may be like, hey, you don't need a million receipts. We'll give you money today for this other, like semi-related. Like it could be really close to what you're doing, or it could be a little farther away, we don't know. But you have something really special, and you have. How long ago did you talk to Kraft? So we talked to Kraft about three weeks ago. Great, so you, and then is the deal closed with the half a million? No, we are in relatively early conversations, but they've. With Kraft. With Kraft, and that's with Kraft. No, no, no, I got you. The deal closed with the app developer. Yes, the deal is closed with the app developer. Did you actually have data for half a million? Yes, we have. That's awesome. Okay, you should go immediately back to Kraft. It's like, we currently have. Let's do a pilot. Half a million. Right. Would you be interested in doing a pilot, sign a letter of intent to start looking at the data we provided to you. You guys can check to see if, is it what you're looking for? because that will help you know that you're delivering something on time. And then have them sign a letter of intent. A letter of intent, all it's going to say is just like, okay, and then if you're going to initially look at this data, we'll work back and forth to see, is this what you're looking for? This is going to be the format you want. And then when we have a million receipts, we'll start talking about pricing. because again, just put numbers on this. I would say, when a startup says we're in discussions with a customer, the close rate on that is like ten percent. I discount to zero. Let's just say, between zero and ten percent, it's very low. Versus if you get an LOI, then I'd discount that to like 50%? because maybe even 60. What's that, 25? All right, I guess I'm more optimistic than Kevin here. But, and then once you have a signed contract, then obviously it's 100%. But like, we, from our side of the table, we've seen so many people that are in discussions with all these great signing deals. And we're like, well, can you get into writing? And they're like, then they go try to get into writing, and they're like, nope. So, that's such a good test at this stage, and it doesn't cost you anything. Absolutely. Yeah. The other piece of advice is, everything Don talked about in terms of like, what you have in the bank in terms of what you're good at, another way of thinking about it is that like, that is the default for your business. The default is the technology, the OCR, it has to work, and it has to work better than anything else. You have to do this other thing, usually at a startup, that is going to actually determine whether you'll grow and be really successful. And that is going to be sales. And so, that is the part you have to work 10x harder on. So, this thing that you're not very good at, you actually have to spend, ironically, a lot more time on it to make your company better. And so, yes, for the sales, you're going to talk to all the rest of those mobile developers, try to get them all in discussion, and close them to get the deal. But also, you've got craft going on. But also, you should talk to as many other CPG companies also. Well, let's see, it's like, is there a market beyond these guys? Is it similar sort of pricing? What do I need to understand? What needs to be delivered? Because I'm actually basing everything that I'm going to give to CPG companies on what craft has said. So, it's really like, by the end of the next two months, it should be like, you've talked to, and figured out how to talk to all the other mobile developers, and you've talked to 50 other CPG companies at the very least. And that's almost all your time. It's almost no programming or coding. It's just developing the language for, do I understand, what is the process for closing these deals, which is actually going to make me money? We're out of time. Guys, thank you so much. Thank you so much. Thanks, appreciate it. Thank you. Thank you. Hey, how's it going? I'm Dalton. Hi, Kevin. Hi. Hi. Cool. So, we are working on Commaful, a place where people share and read short stories. We found a new format that's a little bit like a picture book. So there's a little bit of text on each page, then there's a background image that relates to the text. And you tap through to flip through the pages of the story. People share anything from poetry, fiction, as well as random blog posts about what they're doing in their daily lives. Currently, we get about 100,000 monthly uniques. And mostly teenagers currently using this site. How many stories are being created? 20,000 have been created total, about 1,500 a month. So let's say I'm one of your active users. What format do I consume this in? Is this a mobile app? Is this a website? Right now, it's all mobile web. So, okay, 100% mobile web. Yes. Okay. And what's the breakdown of what devices they're on? It's about half and half on iOS and Android. Okay. And then what's the geolocation of those folks? What countries are they in? It's like, it's really lean towards iOS in America and the rest of the world in Android, so it's still 60-40. Okay, so 60% iOS, US. Yes. Cool. And then what are the countries that are non-US? Philippines is a pretty popular one. Okay. UK, yeah. UK, India. And then what would be the breakdown, say, of the Philippines on that one? Like 10, 20%? Like 15%. 15, okay. Who's your most popular storyteller? So there's a girl in LA, and she basically writes kind of fourth wall fiction stories. And she already had an audience before joining Commaful, and she brought a good chunk of her audience over. Gotcha, and so what does popular mean? Does she have, you guys have a thing like subscribers? Yeah, so she has about 700 followers. So we have people who have more followers than her. However, she gets the most likes on her stories. She gets the most engagement. How often does she publish? Probably a couple times a month. Couple times a month, gotcha. And sorry, just I want to really picture it. So, and then when she publishes, what is her, you said there's a few things people can make. What is the thing that she makes? Fiction stories. How long are they usually? They take about three minutes to read. They're about 1,000 words. Cool. Would you say there's any similarity between this and some of the apps that are taking off right now that are collaborative fiction? What's the name of one of them? There's like three. Yeah, yeah, yeah. I've seen those. Is there, is this, if you squint at it at all, does it look like any of those? It's a very different model. Those are built as games. So there's a subscription model built into them. However, we have very similar users. So many of the target users use both, or if they're conscious about the money, they use Commaful. So that's kind of the similar audience, but different play. So do you have in-app purchases? Do you have anything analogous to that? Currently, no. Got it. I don't have a mobile app yet, so that's. Okay, sorry. I'm just trying to think of how those companies work. Do you see this as, like how do you see, what's the big version of this? Like, what's the metaphor that you think of? Metaphor wise, we see this as kind of how these teens interact with the written word. So you see Instagram and Snapchat as these very, very visual creatures, very short form types of content. However, the written word really hasn't seen much change. And as a result, a lot of the stories that you can only tell through the written word that you can't tell through a Snapchat or an Instagram kind of get lost. And for us, we want to be the bridge for this new generation to the written word and those types of stories. These stories are like permanent, so they exist in a space. Are there some stories from like a year ago that are still like super popular as per the permanence question? Yeah. They still get hits. I wouldn't say they blow up or they get us consistent huge amounts of traffic. But it shows up on search sometimes. Sometimes it still resurfaces in sharing and Twitter. Do you have a sense of what percentage of your users come from SEO? Very few. We get like 700 clicks, I think, per month. What are the most consistent sources of traffic? Like when you said it's the authors promote it, it's that they post it to Twitter and Facebook, and then that drives traffic? It's pretty much all of them. This is what success looks like to me in this sort of space. It really comes down to is you build a platform that allows people to get famous. That's pretty much it. Yeah, it is. Because I think there's like three drivers, man, three drivers of desires by most people. And it's like money, then sex, and then power or influence, right? Watch, it's only three. Right, three. And so that influence is the biggest thing. So does your platform allow people to get really popular? Do they generate stuff that lots of people want to see? And until you hit that, the thing's dead in the water. So this really, it's like, what do I do to bring and on board the very best storytellers, the very best people? And ideally, it's like, you guys are constantly generating these stories, and they have to be really, really great. But also, it's like, hopefully, your community is generating stuff. And then, are you able to promote them better than they can even promote themselves, like something has to happen there, and that's like your only goal. Like, you can try to monetize, etc., but I think it really comes down to is like, is this a platform where it's like, if I use this, it's like, or I want to tell stories on here because people actually read or experience them. It's like, similar to what you saw for Medium, the whole thing is like, what do you do next? I don't know, that becomes a really hard part. Sometimes you end up raising a bunch of money and it doesn't work out. But the whole thing is you have to at least get to the point where it's a platform that gets people really popular. So everything has to do with looking at what is somewhat popular and saying, how do I multiply that, how do I replicate that? Is there a viral portion of that where people see those and they start making things for themselves? So it's like, I would go and just figure out, how do I get, let me see here. Best story I heard from within the YC community was Twitch. Basically, they launched a streaming platform, and what they tried to do was, some people were already streaming gaming on YouTube. They contacted all the top streamers on there and said, what do we have to do to get you to come to our platform? And they did whatever they wanted, because they knew that it's a power law curve for content, right? So only a handful of people are going to be the most popular. And so that gives you the best head start. And so they built whatever features, they super nice them, etc. And so where are the very best storytellers for your sort of format? And I would think it's creative people who have been really good at Snapchat or Instagram or whatever. And say, look, you want more than this, we can offer this to you. And you have to figure out, what do they most want? And then build those sort of features. Have you started doing that? Yes, so the last while we've been, we know a lot of top creators and that that are able. What is a top creator? So someone who has 10,000, 50,000, 100,000 followers. No, I want you to find people that are the top ones. I see. You have to talk to them and figure out what would it actually take. So like the best selling authors, the million followers plus. Could you start pulling people off Tumblr, because Tumblr's. That's actually most of our traffic. So when we say social, it's the bulk of our traffic. 80% is from Twitter. Because Tumblr, Yahoo's not really taken care of. And I imagine you can pull the top Tumblr people, right? Yep, so we actually are friends with almost all the top Tumblr creators. What we've been thinking about is critical mass. And we think that there's a certain point, like we want to spike everything with all of the users coming together at once. Where you hit this critical mass point, and theoretically, supply meets demand. I would not even think of it like that. That's just too complicated. Mostly, it's just like, all the popular kids, and I'm just going to systematically talk to all of them. So just land, grab, get as many popular people. As many as you can, because what you're looking for is inspiration, and you don't know what it's going to be. You don't know who is going to be the one that makes the platform take off. You don't know what is the piece that they're going to make. So you need just a lot of lightning striking. So hopefully, people go like, holy crap, what's this new platform? I agree with that. I mean, look, I think that founders that are working on consumer internet stuff, they undercount how many social things get to your scale, and then top out. Like, they think everyone knows the story of Snapchat and Facebook, and they know about things like that. But man, even back in the day, there were a lot of Facebook competitors. Like, hundreds. And a lot of them had millions of users, right? Tens of millions of users. And- It's not meaningful. And the thing that's tricky about consumer internet, if you're not going to monetize and charging your users, is the only way you can ever build an ad business, is you need hundreds of millions. And so, I think in your, like, think about Tumblr itself. They had trouble with their ad business. But remember, they were the winner. For every Tumblr, there were like ten other little blog sites, which it sounds like you guys are experts. So you remember them, right? There were other wannabe Tumblrs that had decent, you know, even LiveJournal itself. LiveJournal was the original Tumblr, but like that, and so the point I'm making is I agree with Kevin. If you're going to do this kind of business, you usually want it to grow as fast as you can, and get those economies of scale. Otherwise, you can get stuck in the 100,000 to million user range, and then like top out, and then what? Like those are, I know the founders of a lot of those types of ones, and those are rough, right? I feel like you want both a bunch of users, and then a bunch of different stories. Like, I think, again, be permissive. It's like, what are the top things that people have done on Tumblr, recreating it on your platform? Like top tweet stories, right? That's like series of small pieces of text, and then tell them on your platform. And as per his Twitch thing, just ask them, what would it take for you to move everything over from Tumblr? Like, what features do we need to build for you to take everything from your Tumblr over here, and then put up a Adios Tumblr blog post, and then like point to your site? And then if you just did that systematically, that was the Twitch playbook. I think that would work. I don't think, I think now is the time to raid the Tumblr users, yeah. Yeah. One of the most popular things we have is that it's a two directional thing. So people take content from Tumblr and then post it on Commaful, and we have an export function. Every social site has a different preferred format. So on Tumblr we export as a photo set. So if you share on Tumblr, it automatically generates a photo set that's pretty and fits on Tumblr. Facebook is different, Twitter is different. You should also look at all the people making the little stories on Medium, too. Exactly. Still all of them as well. We also have edible stories, too. So, the whole thing is, figure out, talk to the top storytellers, talk to the top people who are on all those different platforms, figure out what it's going to take to bring them over. Yeah. Or start moving some of that stuff over automatically and just showing it off to your community. Right. And seeing what sticks, what people really like, what goes around. Because, yeah, consumer is different. I think a lot of times people out in the audience world, they hear these consumer things, which is just get big, get big, get big. And that is what we're telling you. But just for everyone else in the audience, that's not the case if you're doing B2B. This is not one size fits all advice, but if you're going to, hey, you're launched, you're doing consumer internet, you have 100,000 MAU. Like, okay, you made it this far, you've got to power through here. Or else, if you end up stalling out. Yeah, you're dead in the water. Then what? You don't have enough users to really monetize. And we've just seen a lot of people stall out at this stage. So, in your case, yeah, you've got to grow. Yeah, we are in the problem solving position here. Yeah. Well, you need to generate whatever it takes to get people, the word of mouth about your thing is like, if I'm a really. I'm a good creator, I tell the stories on this platform, I can get really big. And one other piece of tactical advice, I would look at SEO. Usually, like the way you get really huge, I built a consumer site. I got it up to 25 million MAU, and SEO was a big part of that. And the way you do something like Quora, where you get hundreds of millions of MAU, is SEO. So I would try to start tracking that. We've heard that embedding helps us get backlinks. Okay. And help us rank some of those stories that normally wouldn't rank. We're approaching SEO currently right now, yeah. Okay, good. Because that's the sort of thing, it doesn't cost you anything, and that'll just get the flywheel spinning for you to hit that escape velocity. Five minutes. Any questions for us? I think the biggest challenge for us, obviously, is getting from our 100,000 to a million, right? Like, that's the next big phase. You've already kind of gone over different strategies. I'm curious what other companies that you've seen through going through YC, who have successfully gone from that 100,000 to a million. It's still parallel. It's always parallel for those kind of communities. So the top ones bring almost all the traffic. Which is why I'm saying, everything you have to do is, how do I bring on celebrities onto the platform? Or I turn people into celebrities. Well, and along those lines, here's the pitfall. Don't pay them. Right. Don't pay them. Sometimes, I've seen people try that. That is not, like, paying for traffic when you don't have revenue is like. You need to love it. And once you pay them, they also expect to be paid to make something. That is exactly right. Like, right? Like, as far as, my understanding is, you know, Instagram never paid anyone. Right. Snapchat never paid anyone. All their clones sure did, right? Like, but, that's, you know what I'm saying? Like, like, YouTube wasn't really paying for traffic. But all the wannabe YouTubes that were trying to raise money were paying for traffic. So like, whatever you try, don't just take what he's saying and be like, yeah, we're just going to pay some celebrities and, you know. Right, right. It's not a cost effective way of growing. Yeah, yep. I think, if you have the dev cycles, I don't know if you do, but I would consider a mobile app. One advantage from a retention perspective is that you can do push notifications. Right. And that way, if someone is subscribing to something and you do a push notification to their followers, then you're ensuring a much more, a tighter feedback loop than maybe you have now on mobile web. Definitely. So how's your email, what are you doing with email, Joe? Because they're teens, email has been pretty tricky in terms of getting the response rates. We tried messenger bots, so we get some decent response rate there. Still nothing huge or significant. I would keep explaining with those. Again, you're asking what have people done. You have to reach out and touch people for them to not forget your thing exists. Like think about it, there's a million apps out there. There's a million, everything is competing for our attention. And if you think about tools like Facebook, it's basically a weaponized attention grabber, right? They have thousands of people working on making sure that you're constantly looking back at it, right? Very smart people, that's all they do all day, is try to steal your attention. And you're competing with them for attention. So I think just doing some really basic stuff, like continuing to iterate on email, if chat is the right thing to do. Make sure people remember you exist, and that they are a member of your community, and that they should go check out some new stories. Otherwise, it's going to be tricky. One experiment you could do, I've heard someone give this talk before, is go create a Facebook account with a fake email, and don't add any friends, and look at how many emails it sends you. I think it sends you like 50, I'm exaggerating. But the point is, they realize that if you don't add any friends, that you're going to have a bad time, and that you're useless to them. And so they're very aggressive about emailing people. Otherwise, they know they've churned you. So anyway, if you have users that you know are going to churn, or on the way past churning, well, just remind them that you exist. That's best practices, too. Great. Yeah. Guys, thank you so much. Appreciate it. Best of luck. Thanks. Okay, cool. Well, I think that's it for us."
  },
  {
    "name_video": "How to build and manage teams ",
    "description_video": "Anu Hariharan, Partner at YC Continuity, sits down with Vinod Khosla, Founder of Khosla Ventures and previously the founding CEO and Co-Founder of Sun Microsystems, to talk about belief systems around hiring, and how to manage your company's growth internally. This was a talk for YC's Startup School in 2017.",
    "related_categories": [
      "People",
      "Hiring"
    ],
    "page_url": "/library/7g-how-to-build-and-manage-teams",
    "youtube_url": "https://youtube.com/watch?v=alqHBCkSN8I",
    "mp3_file": "downloaded/How_to_build_and_manage_teams_.mp3",
    "mp3_content": "Today, we have Vinod Khosla, Founder of Khosla Ventures, and former founder of Sun Microsystems. He has advised a lot of startups in Silicon Valley. I'm going to interview Vinod today, and we're going to talk about how to build and manage teams. Thank you, Vinod. Thanks, Vinod. So, you've talked a lot about company building and hiring. And I know that you've often said that a company becomes the people it hires, not the plan it makes. So, can you elaborate on what you mean by that? And especially for founders who are just beginning to start a company. Like, what should they focus on in hiring? Yeah, this is one of my favorite topics. Many, many founders, and when you start, you know very little about what you're doing. If you did know enough, you wouldn't start the company. If you were really sensible and pragmatic, you wouldn't start companies. I'm an entrepreneurship zealot, as self-described, and I'm a real fan of people trying companies and trying to build things. Especially when you're younger, when you can afford to take the risks. There's no reason to go work for somebody else. My book, and I never did. What I find is people have plans, but it is very, very rare for a company to achieve that plan. So, the way to think about where you're starting is a collection of ideas in a relatively rich space that you find you can be passionate about. That's the way to think about a plan. And I have a separate talk on flexi-planning, which is don't plan, just plan to plan. But the critical part of that is the team you build ends up making all the iterative decisions about where you're going to end up. Whether to hire the next person from this area or that area or with that strength or some other strength, or to pick path A or B. Path A is very, very critical to where a company ends up. There's a huge path dependence, and the path depends so much on the people you hire. Your starting plan becomes much less relevant than the people you hired initially, especially the first ten people. Those ten people will then go on to hire the next 50, and they will then hire the last 100. You can fire the original team, and it's gene DNA stays in the company. So that's why it's so important, and why the people you hire determine the company becomes. And we can come back later and talk about where I see mistakes made around functional hiring. People always ask me, and I say, this gets tweeted a lot. There's a huge difference between a $0 million company and a $0 billion company. And the difference is attitude and ambition and mostly the kind of team you build, which will reinforce certain directions for you. Especially who else you end up hiring. So it's far more critical than people believe. And it's very hard to hire those skills later. So that, hence my- Yeah, and I think you've touched upon the first ten hires being so important. And especially defining, pretty much, even the culture or the belief system that you would call for the company. A lot of founders here have a one or two member teams. How should they think about who should be those first few hires? And how do they go about finding those candidates? And I know you have a strong view about how equity should be split for the first ten employees versus the next 30. So we'd love to hear, how should a founder think about that? So many startups are very tactical, and they should be. But in doing the tactics, you can sometimes forget what the big vision is. And you may even exclude the big vision. So I was talking to a company fairly recently in our portfolio, and they had hired a bunch of people to do particular tasks they needed doing. And there was a new hire, potentially a big hire, very attractive person to have joined the team. And I asked the founder, who's going to interview him? And he told me who would interview this founder. And I said, if I was a really great candidate, and these three people interviewed me first, I'd drop out of the recruiting process. So I said, you know what, why don't I be the first interviewer? So that can be a real waste of my time, because I want him to grab the big vision first, and not just be interviewed. Let me sell him on the big idea and why he can be a part of forming it. And so the best people almost can't be interviewed. They have to be sold and evaluated. Evaluation's important, but evaluation and interviewing are different things, in my mind. So once you hire the first five and they're interviewing other people, you might actually exclude the best candidates. And that's very, very tricky for a founder. At the same time, sometimes you can't afford the big names, or you don't have enough to attract them. And those are very tricky times, and that's why I think, whether you're a $0 million company or a $0 billion company, sort of gets set by the time you're 15 or 20 people. There's people who've done it very poorly. I won't give you examples, but people like Stripe, Patrick, did an amazingly great job of his early hires, and has continued to do that. So you can completely change the trajectory of a company by that hiring, and how big you'll become. Now, what are some of the things that you think Patrick at Stripe, or some of these successful founders have done in the first year? Is it that they meet candidates in other roles? Because the founder often also doesn't know a lot of the other roles, or doesn't have domain knowledge about the roles that they're looking to hire. So let's talk about each of those separately, because they're quite distinct things. First, I think of company building as going after Mount Everest. But nobody got to Mount Everest without getting to base camp first. Here's the misstep. You can't get to Everest without base camp. And many people forget that base camp has to lead to Everest. So they set up base camp where it doesn't help reduce the risk to Everest. And so building a company, you never shoot for the big enchilada in one step. You go after base camp one, then base camp two, and it's a very good analogy. However, especially with bad investors, and I have a lot of beefs about investors. They want revenue, or they want break even, or they want management. All the things that can lead to setting up business here, that then excludes the possibility that you learn more about how to get to base camp two and three, you are out in some other local minima or maxima. And that's really dangerous early on, too. In fact, one of the beefs, I was just talking to somebody in the YC class and sort of talking about this, I said, and this is one of my pieces of advice to YC. If you get too tactical and forget the strategic, you'll set up base camp in the wrong place. So you want to sort of decide which is the rich space you want to go after with the technology, in this case, starting with a great technology, before you start doing all the tactical stuff. So there's this uncomfortable balance between tactics and strategy. I say, be obstinate about your vision, be flexible about your tactics. Another way I'd like to say it is, think big, but act small. These are really difficult things to navigate, much easier said than done. But back to this issue. Let me talk about a process I call gene pool engineering. Going after a space, assuming you pick the right space, or the one you're passionate about, and it doesn't even have to be right for others, right for you, the first thing I suggest people do is say, all the ways in which you can fail, think about it. You want to identify the key risks in whatever you're trying to do. Then you hire for those risks. So I always say to people, find your top five risks. For each of those risks, say risk one, who are the companies that have dealt with that risk? Or where does the expertise on that risk lie? Make a list of three to five companies. And by the way, this document, you'll get a link called Gene Pool Engineering, that's on our website. That I wrote just for this purpose. If you've identified the five companies that have dealt with that risk, then you have at least the places that can reduce your risk. Within each company, identify three names. Now you have 15 names for the risk number one. If you do that for your top five risks, you essentially have a library of names that will help you reduce the risk in your business. And that's risk-oriented management. And startups, after you decide what space you're going after, is all about risk management. There's lots of risk trade-offs. Every time you hire somebody, you increase your burn, you're taking on financial risk, but you're reducing some other risk. Maybe it's product risk, or development risk, or feature risk. So it's a series of trade-offs. That's how startups should think about what they're trying to do. So this is a process I call Gene Pool Engineering, where you engineer 15 names for each of your major risks. And then go after all of them, and hopefully hire one or two of the 15. And so you've then engineered the gene pool of your company for the risks that are in the plan you're going to pursue. It's way more precise than the platitude of, let's hire great people. I find that really disturbing, because I've never actually had a startup come in to me and say they're only hiring bad people. It never quite happens. So how do you make platitudes into something concrete and actionable? That's a big thing with me. The second part of that is the reality that startups seldom pursue the original plan they started with. So they were hired. You also have to hire not only for the risks you know, but all the other things that you might pivot to, change to, adapt to, iterate to. Because building a business plan in a new area is a series of iterations. So suddenly this risk requirement goes in parallel with this other requirement which I call smart adaptation. You adapt very quickly to whatever the market is teaching you. And YC is particularly good at that, teaching you how to iterate quickly and learn, and essentially very similar to what I call this flexi-planning process. Where you iterate your way to a plan instead of saying, this is my plan. I always worry when people make plans seven years out and give me a forecast because it tells me they don't have a clue what they don't know. And that is one of the great benefits of YC from my point of view, this iterative approach. Other people call it MVP or there's other names for this iterative approach. I call it flexi-planning. But the team you build, in addition to this risk approach, also has to be open to new ideas, grab new ideas, ask a lot of questions, adapt quickly, brainstorm with others constructively so you build on each other. These are parallel set of requirements around hiring that are very hard to quantify. They're also full of danger. They're full of danger for the following reason. Sometimes people don't hire for these, that's a danger. At other times, and one of the biggest risks if you decide you want to be aggressive about hiring is going after names or titles or other things. Big names and titles in big companies are really, really dangerous and misleading for startups. My biggest mistakes early on in my career was getting too impressed with somebody's title at IBM or some big company. Now I take the view if somebody's been at a big company for 10 or 15 years, if they've been at Cisco for 10 years, they can't work effectively in a startup until they get re-brainwashed by failing once or twice in the startup. Then it'll work. So hiring for this other stuff and not falling into the trap of just big names is very important, also depends upon your domain. If the domain your startup is in is radically different, then you act, doesn't, let me put it differently. Some domains need a lot of expertise. So if you're doing a blood test like Theranos, you can drop out of school and start that, but eventually it's a serious physics and chemistry problem. And you have to get that talent on board. If you're doing something like Stripe did, it was a very simple problem. You don't need three PhDs. If you're going to solve healthcare with AI, you're going to need expertise. So it depends on the domain. You don't always need the gurus. It depends on your problem. You don't always need the big names. Another very counter-intuitive thing, we were recruiting for a CEO for our company, AliveCore. They essentially do cardiac care. And I insisted I would not talk to any candidate who had ever worked in healthcare. And that's because healthcare executives tend to apply old rules. Because the domain hasn't changed very much, people are so used to applying old rules and applying good process. As opposed to inventing this new future, this new path, and that's very dangerous. And we should come back and talk about how founders should figure all this out when they don't have a clue what these other functions are. That's really dangerous, and so that's a big, big caution. It's seldom that a person out of a domain can innovate in a domain. And if you're a young founder and you hire somebody with deep experience in a domain, it is logical as human beings to defer more to their knowledge, and that is a real problem. It's important to understand the problems they raise, not the solutions they propose. Because if you take that, you'll keep doing what traditional people in that industry have done. This is why CEO hired into companies don't work very well, and why founder vision becomes so important and so critical. I'm wandering all over the place, but correct me. Yeah, no, this is how, I think you've also, before we touch on the functional hiring and how to look for domain knowledge. I wanted to touch upon one other element that you talked about in the gene pool hiring paper, which is about diversity. And not in the literal sense, but you talked about there are different dimensions of diversity that are important as you're trying to figure out candidates. Can you elaborate on what are the different dimensions of diversity a startup should really focus on, and why is it important to do that early on? Yeah, so if you buy the thesis that most of what you'll end up executing on isn't part of your plans today, then the single most important thing becomes people who can help you evolve your plan, and the more diverse the set of people. And I don't mean diverse ethnically, I mean backgrounds and places they've worked, areas they know, age, level of experience. There's some really great things about experience. You want experience, but you don't want experience to have you, guide you into doing what others have already done in that same business and not innovate. That is the result of too much experience. So mixing the right experience where you can identify the problems with first principles thinking. From fresh new ideas, people who've never worked in the domain, or people who actually are just fresh graduates and have no idea, but can ask fundamental questions, those are the best kind of founders. Put it differently, in big companies, you need people with good process. In startups, you need people with good iteration and good adaptation. And those are very, very different skills. Because in startups, you invent 90% of stuff. In big companies, 90% of what you do this year will be what was done last year. And so there's very little innovation takes a different kind of person. In fact, every startup, if they're successful, they'll need some process people later. But process people early in a startup can be a disaster. Too good a manager is a bad thing for early startups. But at some point, you'll really need to add that. So that's what I mean by diversity. If you have a bunch of PhDs, how many are experienced PhDs and how many are fresh? How many are from within your area and how many are from completely outside the area? Those, every dimension of diversity will help, because they'll bring a different point of view. As long as they have this ability to think from first principles, not say, this is done this way because we did it this way before. I should also sort of probably say, this feels way more complex, this is why I've written about it extensively in two articles. One's called The Art and Science of Hiring. You'll get a link to that, it's on our website too. One's called Gene Pool Engineering. There's a third one I actually wrote when Peter Boyd joined us, which talked about what boards should and shouldn't do. Boards do more damage to startups than anything else I know. And that's why I don't go to board meetings anymore. What applying tradition just really hurts. So when you're looking for an investor, it's not money. It's help in building this team that's way more important. Way, way more important to where you'll get to than anything around the amount of money raised or the valuation or other things. We should come back and talk about founder equity also. But I spend a third of my time, maybe, more time on recruiting for our companies than any other single thing I do. Because of all the things I've talked about. In fact, at Startup Grind, the interviewer asked me, he said, Chamath was saying that you couldn't possibly spend that much time interviewing. And I said, that's because he just fundamentally has a different belief system than me. I do, and it's most of what I do. I'll go through 100 LinkedIn resumes by myself on a weekend if I'm looking for a critical hire for a company. Because a few people can make or break a company. Yeah, and I think you've talked about this too, which would be helpful here. Like the CEO's job initially is to be the chief recruiting officer, right? So can you elaborate on what is the founder's role and how should they be thinking, especially because we see a lot of startups where they say, I'm looking for VP of sales, and they write down all the skills. But then they forget about all the elements needed for what it takes to lead in a startup. Yeah, so let's come back to this notion of functional hiring. Let me talk about what founders need to do. A founder's role, and when I was a founder, I spent probably 40% of my time recruiting. It's not coding. You're much better off hiring the people who can code than coding. And was it throughout the life of the startup, or did it- Both in the beginning and throughout the life of the startup. I think it's true of very early, mid-stage, and later stage companies. And really good founders do most of that. Because if you can hire the people, you should generally be able to hire the people who can do any given job better than you can. And I tell founders about their role. If there's any job you can hire for, modular money, which we can talk about, you should hire for that role so you don't have to spend time. Founders have some unique characteristics. They have sort of this no real spirit, this first principle thinking, this attitude says, yeah, it's done this way, but why? This why, and I recommend a book by Simon Sinek called Start With Why. It's a really good book about questioning everything. And yet staying true to your vision, even if it's not precise. If you're doing something radically new, it's going to be ambiguous. And very, very few normal people are comfortable with that ambiguity. Let's charge ahead in this direction, even though we don't know precisely what the business model is, or why, or what we'll take. That leadership is a founder's role. And that's something it's almost impossible to hire for. If you hire a senior executive from another company, there's zero chance you'll have that. They can systematize what you're doing and get more, much more boost to your efforts, but not without your vision. All right, and so that's a founder's role. I call it leadership. It's belief system in the face of ambiguity. It's figuring it out kind of attitude. Assembling a diverse team. I was very lucky as a young founder. I loved awesome people. I didn't know why we hired many of the people. But if you look at it, the first 15 people we hired at Sun probably started more than ten companies worth a billion dollars later on. You know, we hired Carol Bartz, who became CEO of Yahoo. We hired Eric Schmidt, who became CEO of Google. We hired all these, we hired Bill Joy. In fact, Bill Joy became a founder six months after we started, we should come back to it. I so badly wanted him, we made him founder retroactively. Anything is okay in this game of assembling great talent. I loved learning from great people, so we hired great people. In retrospect, that was why we were successful. When I started believing company becomes the people you hire. By the way, Andy Bechtolsheim was a student in Margaret Jacks Hall, not far from here, where the computer science department used to be. And he'd licensed his technology to six companies. The only one that succeeded with it is us. And we started two years after some of the other companies had licensed the technology, but we got all the people. I hounded Andy till he dropped his PhD to join me. I hounded Bill Joy till he dropped his PhD to join us. So both of them dropped their PhDs when they thought they were six months from finishing. Selling is also a founder's job. And it's gut-wrenching because you don't know you're going to be successful and you're trying to convince somebody to drop their PhD. It's gut-wrenching. Hiring is gut-wrenching. Are you convincing them to drop a comfortable job at Google and join you? So many stories. Anyway, back to what were we talking about? Yeah, no, I think just to read, I know before you've said in one of the points that when it comes to selling for hiring, no means maybe, and then maybe means yes. Yeah, I have my favorite. When a candidate says no, I convince them it's a maybe. Then I'll spend enough time, and once they say maybe, then my job is to say maybe is a yes. So I always say a no is a maybe, and a maybe is a yes. And it doesn't matter if you fail. Occasionally when you succeed, it's worth it. People give up on recruiting way too early and way too quickly. I just hound people. I wanted to touch upon founder's equity because I know you brought it up twice. So how should, especially when you're trying to attract, you want to build a great team, right? And a great team is a magnet for other people to join the company. How should founders think about equity, especially in the early hires? So I find, by and large, and there are exceptions, plenty of them. Founders keep too much equity for themselves. And they don't realize the following fact. Anybody they hire who's exceptional will a year later figure out they want to start their own company unless they're a founder, right? So you self-select for okay people, good people, not awesome people. So my son's starting a company, actually two companies right now. He graduated last June from Stanford. And I convinced him that him and his co-founder should just take 15% each. Leave 15% for a third founder, and another 15% for three junior founders. And then a 20% pool after that. So they have this humongous pool. I said, because I fundamentally believe a company becomes the people it hires. I said, you'll be able to hire great people. So for one of his companies, and I think this is public. If it's not, stop recording. He just hired, for one of his companies, the VP of Engineering of Quora. Why would that person join a fresh graduate? Because one, he helped define a fairly interesting large vision. But two, he had this huge pool. And he'd been talking to people who would take that kind of thing, any of whom could start their own company. Let me invert it and say, when a team comes in to present to me, one of the questions I ask myself, in judging how good a team is. Yeah, do they have expertise in all the areas they need expertise? But the single most important question I ask, on this team, if some of these people left and started a company, would I want to invest in that company? If somebody has two people like that on their team, zero chance I won't want to invest, independent of whether I like the plan or not. Because they're collecting great talent. If I could have great talent or a great plan, I'd rather have great talent. And somebody, a founder who loves great talent. So it's a great way to judge a startup, is what kind of people do they hire? I was telling Anu, and I told Sam, in the last YC batch, there was two companies we made an offer to if they hired in a critical area. They're both AI startups. If they left co-founder equity, equal co-founder equity for an AI startup. I said, I'll write you a check at the valuation you want. If you do that, if not, then we don't want to invest. One of them took our offer and the other one didn't, which is okay. But I really religiously believe this idea. You get a Bill Joy or Andy Becker, and they weren't experienced, they were graduates, but they made the whole company. Eric Schmidt wanted to come work for them. By the time we had first ten people, we were getting so many resumes, everybody wanted to join us. Because we had so many awesome people, other than, I was sort of, me and McNeely were just fresh business school graduates, we didn't count. I always say, and I keep telling my son, hire some magnets. People, I tell them, you graduated from Stanford, you're young. Nobody's going to come join you just to work with you, all right? Think about who you could get that everybody wants to work with. That's how you'll hire the numbers 10 through 30 or 50. A rough rule of thumb I use on equity. I think Sam has said, at least 10% of the company should be reserved for the first ten hires. I actually think that number's too low. I flip it around and say, when a company's 50, the founders should have a third of the common. Their direct reports should have, so if there's five or six direct reports, should have a third of the common. And everybody else, the engineers, the worker bees should have a third of the common. If you do that, people don't leave, people stay with you. Now, Sam has a good blog post on how to attract a team. One of those is growth. Growth is always a metric, but you can't always close that. When things get tough, when you run into trouble, why will people stay? They'll stay because they believe in your value system. What are you going after, the vision you're defining? Define an interesting, ambitious enough vision. If your vision is just to make money. The people who's at the first dip will say, oh, I joined to make money. Doesn't look like it, they'll leave. They won't stick with it. But the single biggest reason people stick with a company is because they have people around them who are really awesome that they can learn from, who are better than them. Everybody should feel that way. That's a great culture to set up, and every time I've seen that done, it's turned out really well. The gene pool engineering article I mentioned, I put together in 1995 when we were starting Juniper. Nobody had ever challenged Cisco, and nobody wanted to challenge Cisco. And no customer in the world wanted to buy TCP IP routers. None for the public network. It sounds incredulous, but go look up articles from 1995. Not a single carrier, AT&T, what was Pac Bell, Verizon, what is now Verizon, all said they would never introduce TCP IP in the public network. And we defined this large vision. We built this process of engineering the gene pool of the company. And everybody got excited about changing the course of the Internet from what was ATM, and nobody remembers this. But a very, very senior executive told me when I was looking at investing in this, they would never use TCP IP. This is what telecom carriers do. This is how traditional wisdom goes. But you need this awesome team to change that. And Pradeep Sindhu, who was one of the great founders I've run into, not only built a great company, but it actually changed the trajectory of the protocols of the Internet, in my view. We would have ended up with something else, most likely ATM if all the carriers had their way. Every single carrier from Deutsche Telekom in Europe to AT&T here had decided they would go with ATM, not TCP IP. So, great missions, great people to work with. All that is why you want people in your team. Got it. And I want to touch upon functional hiring. Because I think it is a component of building a great team as well. And too often, founders tend to prioritize a lot on skills for a particular role versus really figuring out the complete package or the fit of the person. So can you talk about how should a founder think about hiring? So, let me answer that question. Yeah. But later, if you're a founder, you're a technologist or have a technical breakthrough or a big idea, and you start a company. And you need a VP of marketing or you need a CFO. We should come back to the question, and I covered this in my art of hiring. Of how you judge somebody's a good VP of marketing or a good CFO. Because the first thing you have to realize is you're not qualified to judge. Knowing what you don't know is critical. And one of the most important things a founder does is decide whose judgment to trust on what topic. And not just ask their friends, because they may not be qualified. In fact, founders just hired their friends, instead of gene pool engineering a startup. And that's wasting slots and talent, too. But let me go back to functional hiring. We can come back to this. Otherwise, I cover it fairly extensively in my paper on hiring. How do you interview people? How do you judge them? If you need a VP of engineering, you can look at somebody who's managed an engineering project. But if you're a founder, especially an inexperienced founder with a big breakthrough idea in a new space that nobody knows. You clearly need to build an engineering team and execute on that. But what do you need more than that? Somebody who's going to go help you evaluate all the pivots and changes and iterations in your plan. Now, let's say you hire a VP of engineering who's good at that, a VP of marketing who's good at marketing, a VP of sales who's good at sales, and a CFO, and they do their job well. Who's going to help you figure out what path to take? So I always say, you need functions. But way more important, while hiring those functional people, you're getting something else, whether you recognize it or not. You're getting somebody who's going to participate in all the more critical decisions, even more critical than having engineering run smoothly, which is, which path should we take? So ask the following question. When I hire a VP of engineering, how will it make my VP of marketing better? That's by asking fundamental first principles questions, right? Elon Musk's book is worth reading, because he knew so little about building cars or about launching rockets. He made so many screwy mistakes that could have been avoided. But if he had had all that experience and knowledge, he wouldn't even have attempted what he did. So I'd rather have somebody like Elon Musk, who just fundamentally asks a lot of questions. So why are we doing it this way? Not that we've done it this way for 50 years at GM. Remember, GM spent more money, more time, and started earlier trying to do an electric vehicle called the EV1. And Elon, with no experience, by asking a lot of questions and adapting rapidly as he screwed up, he got to a place where Tesla is a much more interesting company than GM today. So when you look for that functional hire, realize you're also getting this other thing which is much more important. Look for how they think, how fast they change, how much they become defensive when you challenge an idea versus saying, why didn't I think of that? Or be much more brainstorm oriented. This sort of horizontal hiring that you get while doing functional vertical hiring is much more important and a much more important dimension. And by the way, most VCs don't look for it because they've not gone through building companies themselves. So they give you bad advice. The number of times they say, go get somebody with distribution channel expertise. I'd rather have somebody figure it out and not have a source of inertia in this fluid, dynamic, evolving, thinking method in a company. So when you're hiring, more than anything, you're hiring a brain trust. And they happen to also have skills in doing functional jobs, but the brain trust is more important than the functional job. And evaluating them is very tricky. And it's tricky because partly you don't know how to evaluate somebody outside of your area of competence, do you call a VP of marketing at Cisco. I don't mean to pick on Cisco, but it's a good company to pick on. They will look at marketing very, very differently than what a startup needs. So they'll give you the wrong advice. Going through, and this is where the tricky part comes, not being overly swayed by titles or positions and understanding why people did certain things and how thoughtful were they about it. What did they do that wasn't usual is very hard. It's also tricky to go back to this question of how you evaluate people. Most experienced interviewees know how to give you the right answers. They're going to fool you. You ask somebody, hey, what did you do here? They'll retroactively look at what was great about the strategy and say, I did this. I've actually had people pitch me on why they did Sun's marketing strategy. Being very, very indirect, I have a list of questions in my paper on hiring. The way you get to the bottom. So I always, for example, give you one example. I'll ask the same thing three different ways. I'll say at the beginning, what do you love doing? What are you good at? Somebody will say something. Then while talking later about a job, I say, what did you do really well there? If those two don't coincide, if somebody's making it up, they won't. I'll ask that question three different ways. Third time I might ask, if you were to join this company, what would you think your strength would be? I've asked the same question three different ways in three different contexts. People who are making it up will make up different answers. People who fundamentally have the truth will give the right answer. Then I might, at the end of the interview, ask, so what would your boss say about you? Now I've asked the same question a fourth time. If they say something, then I'll say, hey, can I get your last performance review that your boss did? If they say no, I know they don't want to share their performance. I have a hundred tricks like this I use. You can never rely on the direct answer you get in interviewing somebody. It's the trickiest thing. And then it's good to get together with each other and see what each person looked at. One other danger in hiring, I find like if I'm rushed today and I'm interviewing somebody, I'll evaluate them differently than if I'm doing it over coffee on a Saturday morning, all right? So other thing to keep in mind, depending upon how your day went or what mindset you're in, how you evaluate people changes. So for critical positions, I'll interview the same person three times at three different days, just so I'm not biasing myself. Because humans, including yourself and myself, are really biased. And so, there's so many pitfalls. This is why doing a startup is so hard. Anyway, I'll let you ask more questions. Sorry, I keep rambling. I could go on for six hours. I'll ask one more question, and then I'm going to open it up for Q&A. So I know in that paper you have a lot of questions, and we will circulate that for interviews. But you also make the point that in spite of, even if you follow all those processes, mistakes are inevitable. And at least one third of the time, the hires don't work out. What, in your view, is the most common reason why the hires don't work out? And how should a founder handle that? Because sometimes startups wait too long to sort of fix it. Look, if somebody wants a job, in the interview, their job is to fool you. All right? Question is, are they better at fooling you, or are you better at getting behind the words? I find after hiring many, many people, and I probably do hundreds of interviews every year. I have a success rate of about 65%. Okay? I'm wrong, and I find most people with less experience are wrong more often. Because usually, if you're a young founder, the people you're interviewing are more experienced than you at fooling you. Okay? So it is a game. And we didn't talk about culture and other things. There's those reasons why candidates fail. But there's really not being able to get behind the scenes and dig deep. So, one, you ought to plan on that happening. I always tell my teams, if you want four people on your team, hire six. Even make up a title you don't need. Yeah. So I always overhire, because you're never successful. And hiring is a long process. To hire a critical person in a startup, whether it's a technology, critical technologist, or a senior executive, can easily take six months or longer, and then they take six months coming up to speed. So if you've made a mistake, you lose a year. And they will have hired other crappy people during that time. And so it's very, very expensive. This is why you really need to watch new people. So you need to really evaluate how they're doing. And this is where I think board members and investors should be much more about assisting a venture. So I never call myself a venture capitalist. I say a venture assistant. And so even our tagline for our firm says venture assistant. I like to do all this and spend all my time doing all this. I never go to VC functions, so I never go to financial conferences. I just spend my time with founders and people they're trying to hire. And by the way, it's a lot more fun and you learn a lot more and get excited about it. But you should overhire. Flip side, if you find somebody great, make up a title and hire them. Two things, no great talent is worth getting away because you don't have a slot. Make up a slot. They will pay for themselves. The flip side, with few exceptions, and there are some, a great talent is never too expensive to hire. So I've gone to all kinds of ridiculous things. We are trying to hire an exec today and I was arguing with another VC this morning. I said, so his company offered him this, they're about to go public. Why don't we guarantee him the first $15 million out of this startup? Like give him a preference over the preferred stock. I'll go to any lengths for great talent. Nobody heard of putting $15 million of preference for an employee above the preferred stock that the investor's money. But I've done this more than once. So, couple of things around that. The flip side is plan for failure and evaluate new people. One other thing, you can also, when you hire somebody, and I want to stop, try and assimilate them. People can fail because they're the wrong fit, but people can also fail because you didn't assimilate them well. So if you have somebody really experienced in a business, and you hired somebody from that business, they can advise you on how to assimilate this person, because you might think of what they're doing differently than somebody who knows that person or that business. So getting advice on how to assimilate people into your business, because they are going to be different. They are the diversity you're trying to be, and you don't want to be too. So, it's getting help in assimilating, getting lots of advice and how to make them successful as opposed to reacting because they're acting so differently and doing things so differently, that's bad too. But then of course, if you make a mistake, you have to be quick. And your investors can, good investors can help you do that. That to me is the principle value good investors bring. Anyway, let's open it up to questions for a few minutes. I have a question. So you talk about Elon Musk with the space rocket and Tesla and then Terranos with like, and why do you think, both of them are a college dropout, but why do you think one of them requires good domain expertise and then one of them doesn't? Well, different questions. One, I think, Stripe hired really awesome teams. In fact, the Stripe co-founder that is now running Open AI. Yeah. So he hired somebody so strong, even though he was a college dropout, Patrick. Right, he hired awesome people around him. I don't think Terranos did this early. There's a culture thing we didn't talk about, and culture is very important. I think good companies acknowledge their problems, say what do we need to solve it, and Terranos early on tried to hide their problems. They didn't encourage discussion around their problems. And I think that was the difference. I think Elizabeth has learned a lot. I think if she was to do another startup, she'd do much, much better. But sometimes in trying to show the outside world you're a great startup, you tend to not acknowledge your weaknesses, and that's a danger. In fact, most startups spend way more time on their assets, not their liabilities. Your liabilities can kill you faster than your assets can make you successful. So you need to spend time, you need to have open, because you're a cohesive group, generally when you're starting out, you tend to have group think, so you tend to lose sight of your risks. And you want to encourage that behavior of asking a lot of, that's culture. We won't go too much into culture today, but establishing the right values, why people are here, what the mission is, what kind of culture, and a number of people made the point. Having good goodies in your lunch menu isn't culture. Allowing dogs in your workplace isn't culture, though I love dogs. Culture is about fundamental values and how you behave and what you encourage. And the more people at every level in the organization can ask questions, the more you will identify your risks sooner, have a more constructive culture, and the more likely you will to increase success. Let me finish that by saying one other thing. Sam said something else that I really like. He said, startups are a pass-fail game. Let me put everything I've been saying in context. I like to say, startups are not about dilution. They're about the probability of success. They're much more digital than you think. If you can increase the probability of success by hiring great people, by asking a lot of questions, by finding your risks early, by having people surface problems, you're going to increase your probability of success. And either you're successful or you're not, and so it's about probability. And people worry way too much about dilution and not giving more equity to a co-founder or a new hire who may need to be made a co-founder. I'm seeing a lot of this in the AI startups now. They're AI startups, but they don't hire the AI talent because, hey, the average AI person at Google, machine learning person, is making the median income, I think, is like $750,000 comp. What you going to do to get that person? You can pretend you can do without that, but you're fooling yourself. Sorry, there was a question there? You touched on this earlier, and you spend your Saturdays going through resumes. So for early stage, can you quickly go to a 30 seconds, one minute where you look for, if you're hiring, let's say, probably technical or an early business dev person? What do I look for? First, people who can think originally about their area, whatever their area is. Quickly, how do you do that on LinkedIn? If you're looking on LinkedIn, how would you do that? LinkedIn, it may be the kind of, sometimes just, if I ask somebody, what interesting papers have you read in your area of expertise? If it's narrow diversity, it tells me one thing. If it's broad diversity, it's one of my 100 questions. I always do this trick question, like what books have you read, or what? It tells you how they think, and that's critical to a startup. In addition to knowing encryption algorithms. Anu, tell me when to stop. I'll keep asking. Probably the last one. Yeah. So for an early stage startup that's bootstrapping, do you see any value in leveraging technical advisors or an advisory board? There is always value in leveraging technical advisors and advisory board. What's important is to get their opinions, but not respect it too much. This is again, this quandary which is hard. You want them to surface the issues. But you as the founder using first principles. When I say, do I believe this or not? Or how much should I weigh this versus some other things? That's the critical part, that's the hard part. That's what makes entrepreneurship hard. because it is a lot of fun, but it's really hard too. I have a great presentation. I came up with the title in 1986 and still on our website. The entrepreneurial roller coaster where the highs are high and the lows are low. And the lows are really low in every startup. Yes, that's true. Well, thank you so much, Vinod, for taking the time. Thank you, everybody. Thank you."
  },
  {
    "name_video": "How and why to start a startup",
    "description_video": "Sam Altman, former YC partner and president, and Dustin Moskovitz, co-founder of Facebook and Asana, discuss why to start a startup. Sam introduces the 4 key components of starting a startup: idea, product, team, and execution.",
    "related_categories": [
      "Becoming a Founder"
    ],
    "page_url": "/library/7e-how-and-why-to-start-a-startup",
    "youtube_url": "https://youtube.com/watch?v=ZoqgAy3h4OM",
    "mp3_file": "downloaded/How_and_why_to_start_a_startup.mp3",
    "mp3_content": "Welcome, this is CS183F. Thank you all for coming. We'll hope to make it a really great class. So we're going to try to teach you what you need to know for the first 100 days of a startup. Basically, how do you go from a very raw idea to a company? And I'm the president of Y Combinator, my name is Sam Altman. I have been teaching this people for a while. And so hopefully we'll be able to make this make a lot of sense. Today, our guest speaker, besides me, is Dustin Moskovitz. Dustin was the co-founder of Facebook and CTO and VP of Engineering, I just learned, and is now the co-founder and CEO of Asana. Dustin gave a talk at the first version of this class that is still the one I refer other people to the most. And it's about why to start a startup, which is actually a really important question and one that people don't think about enough. So he was kind enough to come back and do that again. So if you're here today, you're watching the video later. You're probably planning to start a company, that's why you're taking the course. And most of the class is going to be about how to go about doing that and achieving success. But before you dive into the how of being an entrepreneur, I'm here to help you think about the why. So it's important to know which reason is yours so that you think through the decision correctly. So I hear a variety of common motivators from potential entrepreneurs. But I found that once they've fully considered the trade-off, they often decide that starting a company isn't actually the best way to achieve their goals. So I'll help you make sure you're choosing the best solution. And I'll also explain the reason I like to hear best from people about why they want to start a company, what I hear when I think someone's really set up for success. So I've given this talk before, as Sam said, and a bunch of people have come up to me after and said it really helped them with their decision. And in a few cases, they decided that they shouldn't start a company and they should really join an established one. But I know a lot of you are resolved on what you're doing. And if that's true, no problem. I think this will still be useful for you because you'll get a better sense of the reality of what you're about to go through. So it's not a long talk, it's just about ten slides, and I've left some time for questions at the end. Great, so let's call a spade a spade. A lot of people become entrepreneurs specifically as a way to try to become extremely wealthy. So they see themselves starting the next Facebook or Google. However, the odds of being that successful are actually incredibly small. So only a handful, an entire generation of companies actually end up getting to that scale. So here's a funnel from CB Insights, actually. It shows how many seed funded tech companies get through each round of funding. So even if we reduce our ambitions a bit to becoming a unicorn, so a company with a billion dollar valuation, you still have incredibly long odds. So only 1% of seed funded companies get all the way through this funnel. Now getting to six rounds of funding, it's not exactly the same as becoming a unicorn, but it's pretty well correlated. Most of the unicorns I know had to have at least that many rounds of funding. So to get there, you have to have a truly great idea. It's got to be unique, defensible, going after a large market. You have to execute, sorry, you have to execute extremely well. So that means you have to work hard, you have to attract the right people, and you have to have a better strategy than your competitors. And you also just have to be really, really lucky, because there's a lot of things that can get in your way, and a lot of them aren't even in your control. So I've talked to a bunch of investors, entrepreneurs, and the sense is that it's actually getting harder over time to get through this funnel. So not only are more people starting companies, meaning you have more people to compete with, but they're becoming more expensive to operate for a lot of reasons, particularly here in the Bay Area. And investors have higher expectations too, so you've seen valuation multiples start to decline, particularly on the public market. And perhaps most importantly, it's becoming harder to disrupt incumbents. So they're not the slow moving giants that they were ten or 20 years ago, and they know how to take advantage of their market position. So, some of you are thinking, sure it's hard, but you get so much more equity as a founder that it's clearly the only way to make a lot of money. So let's talk about two different ways that you might get to a great financial outcome. So, story one, you're the founder. You started a company that does Uber for pet sitting. So in this picture, this is the customer, not the founder. And it's a great idea, and you executed it well. So you sell the company at some point for $100 million. And if you've been really successful limiting dilution, your equity might be as high as 10% of the company at that point, by the time it becomes liquid. So you're walking away with $10 million. Pretty great outcome. However, I just showed you only a small portion of startups make it that far, so this is the lucky case. $100 million, a little easier than $1 billion, but it's still extremely rare. And it's actually most likely that you end up with nothing on this path, because you just end up shutting down the company for whatever reason. And oftentimes, you see a company sell to and acquire at this kind of range of valuation. In a lot of those cases, the founder still ends up with nothing, because of investor liquidity preference. So it depends a lot on how much money you've raised to get there. So this is definitely the high-risk path. But another way to make a similar amount of money is to join a later stage company and help them scale from, say, $500 million in valuation to $20 billion. So even straight out of college, you can do really well financially by joining a company at that stage. But especially if you have a few years of experience, you're going to get a really good options package, and you're going to have a fairly high salary, too. So I just sort of swagged five basis points here. If you joined a little earlier, it might be more than that. If you have more experience, it might be more than that. But this is sort of a good sort of benchmark. And you probably know the market for experienced tech workers. It's extremely competitive right now, particularly for product roles. So if you choose well, you can also walk away with $10 million by taking this path. And if you choose really well, and you do find that next Facebook or Google, while it's still not yet a unicorn, you can do extremely well. So the 100th engineer at Facebook had a way better financial outcome than the vast majority of entrepreneurs. So, of course, it's still possible you'll choose the wrong company, won't grow enough for this kind of outcome. This is actually 40X growth, which is pretty impressive. But the key is you get to join it much later in its life cycle, so you have a lot more information. You can see the performance so far, you can meet some of the team, you can understand the competitive landscape. And even if you don't find the company that's going to grow this much, you've got a good chance of picking one that's going to grow some. In fact, your equity value is probably already non-zero. So you've got a pretty good chance of having a positive outcome in that situation, and maybe a really great outcome. And then finally, if you found a company, you have a long-term commitment. So there's a good chance you're going to be putting ten years or more into making it scale, and you still may fail in the end. Whereas if you join an established company, you can work there for a couple years, you can get a sense of whether it's growing. If not, you can easily leave and try again. So you can actually work for several different ones in that same ten-year period, and that really increases your chances of a home run. So the ultimate takeaway here is there are multiple ways to get a great financial outcome, but it's a lot lower risk to join an established company. Don't worry, not all of these will be arguments about why you should join an established company. So similarly, a lot of people want to start a company in order to maximize their impact, so usually financial outcomes pretty well correlated with that. So a lot of the arguments I just made apply here as well. But when you join a company that's already established, you get some big advantages. So you get access to their existing user base, might be hundreds of millions, sometimes a billion people. You get the ability to work on top of infrastructure that's already been built out and scaled, and you're collaborating with an established team. So they're going to help you succeed. So I want to give some concrete examples of massive impact that people achieved as an employee. So Brett Taylor, who's the head of Quip, before he became an entrepreneur, he joined Google after it already had over 1,000 employees, and there he was able to spearhead the creation of Google Maps, which is used by hundreds of millions of people, including me on my way here today. Similarly, my co-founder at Asana, Justin Rosenstein, he joined Google at a similar time. And there he prototyped GChat inside Gmail. So this was over ten years ago, still used by a ton of people. And then shortly after that, he went to Facebook after it had a few hundred employees, and he led the hackathon project that created the Like button. Some of you have probably used it once or twice. So you can still join teams at Facebook and Google today and work on something that literally might reach a billion people. So that's a lot of impact, even if your contribution is a relatively small portion of the product surface area. So if you want to become an entrepreneur to maximize impact, these are the types of stories that I think you should be comparing the opportunity to. So next, there's lifestyle. So everyone's got their own story about what it means to be an entrepreneur. So in general, the media likes to make it seem glamorous, emphasizing launches and funding milestones. They tend to talk about success cases and ignore failures. And the entrepreneurs themselves are like ducks. They're calm on the surface, but they're paddling like hell underneath. But you only get to see them on that surface looking passionate and focused. So the first image here is from The Social Network, which is a fictional movie about the founding of Facebook. It looks pretty fun. And the last image is an actual photo from the founding of Facebook. They're a little different. So reality is a lot of heads down time doing hard work. We hardly had any time to bust open champagne and spray it all over our laptops. All right, so in practice, tech is a little less like the social network and more like Silicon Valley. It's actually really stressful. So why is that? Well, a few reasons. One, your team is relying on you, so they're betting some of their best years on the story you've told them. And their recruiter's pinging them constantly, like many times a week. So you're always worried you're going to lose them. Each round of fundraising feels a little like life and death, and your competitors are actually trying to kill you. And you always feel stretched then, because it's hard to make time for the company, your significant other, your family, and yourself. So of course, my title here is a reference to Ben Horowitz's book, The Hard Thing About Hard Things. If you want to go way deep on this subject, I definitely recommend giving that a read. So relatedly, people also think being a founder will give you control over how you spend your time. Here's a great quote from Phil Liban here. Give you a sec to read it. So Phil and I both learned this the hard way, but you don't actually have control in practice. So I spend most of my time working on the problems I just couldn't delegate. Tracking the issues that are popping up or resolving conflicts. And you're always on call. So it makes it hard to really unplug during a vacation or on the weekends. And you're a role model too. So if you take your foot off the gas, then so will your team. So that said, this one really doesn't apply if you want to have a lifestyle business or be like a small business entrepreneur. If you do that, then you actually do have a lot of control over your lifestyle. But the financial and impact outcomes are going to be smaller. All right, so this is a recap of those first four topics. So these are the top reasons I usually hear from people. So the success funnel that I showed you in practice suggests that startups aren't clearly the best way to maximize financial impact or, sorry, financial reward or impact. So you might do better by joining an established company. And then similarly, the reality of entrepreneurship doesn't usually match what you see in the media. So if you want to aim for a home run, you should feel committed to putting in the many years of effort and discipline that it takes to become a professional athlete. And you still may fail. So now that I've given you a bunch of bad news, let's talk about what I see as the best reason for starting a company. So basically, you can't not do it. So this has two roots. The first is passion. So passion is really important, since we just talked about how hard it is to start a company. So you're going to need that passion to power through. And you also need it to recruit great people to follow you as a leader. And then the second part of this is that you're the right person to make this happen by starting a company. So if you fail to do it, you're actually going to be depriving the world of something great. So this implies that the idea itself is really valuable, and it also implies that you're the best person to bring that idea into the world. If you're not the best person, then that best person's out there, and they're probably going to out-compete you and create something even more valuable. So one twist on this is maybe you're the best person, but you should do it within the context of an existing company. So I often feel this way when I hear someone describe something to me that really sounds like a feature of an existing product. So if you want to have the next twist on photo sharing, I definitely recommend considering Instagram or Snapchat and helping them build it into their products. So you can be entrepreneurial inside the context of an existing company. So I've twice chosen to become an entrepreneur myself, and both of the times were motivated by this reason exactly. So for Facebook, we actually continued to be students at Harvard until the site had over 100,000 monthly active users. So we had cognitive dissonance for kind of an embarrassing long period of time that we could just be students and have this little side project on the side. But eventually, it pulled us out, because we couldn't bear the idea of it not living up to its full potential. And then similarly at Asana, Justin and I were both reluctant entrepreneurs, but we thought the problem of work tracking was really important. And that the other people working on it were going to develop incremental solutions and leave a lot of value on the table. So we couldn't stop working on it. Eventually, we decided to leave Facebook and focus on it full time. So when I meet entrepreneurs that really seem set up for success, this is usually the reason I'm hearing from them. They're starting a company because it felt like really the only thing that they could do next. So that's it, short and sweet. We have time for questions. I don't know what my cutoff time is. A few minutes. A few minutes, all right, cool. So feel free to just raise your hands and I'll call on you and repeat the question for the mic. So one always has to break the bubble, but like ten of you have questions. I have one. Okay. How do you decide if it's like, or how do you advise people to decide if it's, if the best way is to go do this at some other company or do it themselves? Like it's easy in the photo sharing example, but in the real world, most of the time it's a little bit murkier. So what's the framework you think through about? Yeah, so two things. Like one is just the sort of like, you know, feature not company distinction that Mark Andreessen has talked about. So I don't know how to like make that concrete, but it's just sort of like thinking about the idea. Is this like a separate product that it feels like somebody's going to sign up for? Can it have its own monetization model? Are people really going to invest in like learning a new system? Or does it really feel like the add-on on top of some existing model? And very related to that, I think, are just going to be the competitive nature. So if you have to introduce like a whole new photo sharing app, right? And then you have to compete with the distribution and network effects of the existing ones. That's a huge barrier to entry, and there's sort of similar metaphors in other products. Does that make sense? Yes. That's going to require judgment. Go, you and then you. I was wondering like what's your thought on like the challenges starting a company when you started a company and like starting a company like the two of today? Yeah, so I sort of briefly outlined them when I was talking about the funnel. So yeah, sorry. The question was about the difference in challenges between starting a company basically in 2004, first starting a company today. Or the second time in 2009. So I sort of outlined them when I was talking about the funnel. But I definitely think it's just a lot more competitive in terms of the other businesses out there. So there's just like most of the valuable markets have interesting players already. It's also very competitive in the recruiting market. So it's really hard to get a big enough team of sufficiently talented people. And those people are going to be more expensive. So that's one of the ways that costs have gone up. There's also a bunch of other ways, including just like real estate in the Bay Area is really expensive right now. Some other costs have come down, like data center costs. But in general, it just feels higher friction and harder to get going. So I mentioned there's a comparison between startup, like being a founder and being a late stage employee. So how do you position early stage, say like maybe the first 10, 20 people? Yeah, it's just somewhere on that spectrum. So sorry, the question is, what's the difference between being a sort of late stage or a later employee at an established company versus being like an early employee, is that the question? So I think of it as just a spectrum on the risk scale between like founder and like 1,000th employee. So if you're in the first 10, you have a little bit more information, you know who the founders are, you know who the leaders are. You can meet some of the investors, hopefully they've already done a seed round or an A round. But usually, you still don't have evidence yet about the revenue or the monetization, and probably a product that isn't scaling yet. So it's just sort of continuous spectrum. And the earlier you are, the lower your salary is going to be, the lower the sort of probability of a positive outcome is going to be. But you also have a possibility of a really big outcome, because you might have 50 basis points or 100 basis points if you're one of the first employees. Does that make sense? Yeah, so the probability of a successful early employee and founder is approximately equal. Again, it's on the spectrum, right? So maybe the second employee, so the question was, isn't the probability of success basically equal? Yeah, for the second employee, yes. For the tenth employee, no, they've got a lot more information. For the 20th employee, they've got even more information. So it's just going to be a continuous spectrum. There's a question over here? How did you find your core team when you were founding like a song on Facebook? natural process, or did you go about selecting the best of each area? Sure, so how did we go about finding the core team? At Facebook, pretty organic, so really a lot of people were just like the people in our network at Harvard that we moved out to Palo Alto with. And then very early on we hired Matt Kohler, and he sort of took over recruiting and helped us get network into Stanford actually, and a lot of the people we hired were recent graduates here. And we really focused on the product team first. But yeah, a lot of it was very path dependent and organic working networks. Things are a little different now. As a small company, you can work with contractor recruiters, and even with some of the services that help connect people. And I think those are pretty good. We'll go call on someone new. Sure, I was thinking along the passion dimension. What are your thoughts along the lines from, say, interest to pathological obsession? Okay, so the question is, when I talked about passion, am I talking just about an interest in the subject or pathological obsession? Again, it's a spectrum, but probably more towards the pathological obsession. When I say you can't not do it, it's one of these things where you'll look back 20 years from now and be like, man, I really should have gone after that idea. It was really important to me. Whereas interests, I have a lot of interests in the world. They're not all necessarily important. They're not all going to keep my attention for like the 10 or 20 years that you need to focus. How are we doing on time? One more? Okay, here. I am building out a product or idea. Should you always have a co-founder? And if so, how should you look for that co-founder? So the question is about, should you always have a co-founder? And if so, how should you look for that co-founder? This is a really tough one. I happen to have a pretty strong opinion that co-founders are super important. Again, because this is really hard, and that's like your buddy that you get to lean on. And they're kind of like in the trenches with you. But if you don't have someone who's sort of like the obvious person you want to work with, I don't have good advice on how to do that. In both of my cases, we were starting a company together and discussing it together the whole time. The sort of founder dating thing doesn't make as much sense to me. I actually think starting a company is an even more important relationship than getting married or something. Because financial issues enter the conversation even more often. And founder breakups are really bad. So I highly recommend working with someone that you've known a long time and really just discussing as many of the details as possible to make sure you're on the same page, because those conversations get a lot harder later. All right, so I'm going to wrap up. Thank you, Dustin, that was great. Yeah. Can I get that clicker? All right, so I wanted to use today to sort of summarize other things we'll be touching on in the class, and since it's mostly guest lectures, this is my chance to say the things that I believe. And I wanted to start off by talking about what makes Silicon Valley special. There are 100 people in the room, in the class here at Stanford. There will be hundreds of thousands or millions, low millions of people that watch this online from around the world. And as I travel around the world talking about startups, the most common question I get is why Silicon Valley? What happens there that's different than everywhere else? Why can't we do this where I'm from? And I think it's an instructive question, even for people living here, because you want to find out what this is and surround yourself with the most concentrated version of it. The thing that I think is most important of all is there is a relentless belief in the future here. There are people here who will take your wild ideas seriously instead of mocking you, and that's because they've learned it's very expensive to just pass and say every idea is stupid. So if you have someone that's like, I'm going to start an electric car company, and they don't know much about batteries, even less about cars, it'd be very easy to write that off. And yesterday, Tesla passed Ford in the market cap. And so people have learned that these wild ideas about the future, you don't want to write them off too quickly. You want to give them a real chance, you want to think about them. And in most of the world, and in most other work contexts, people will just mock you, behind your back, to your face, whatever it is. You really want to find the small number of people in your life that will support your ambitions, not belittle your ambitions. And this is hard to find. This is not the default state. We don't realize how rare it is that we're in an environment where that's what most people are like. There's no tall poppy syndrome. In many other countries, many other cultures, there's a word for what it is when if a person gets too tall, too ambitious, thinking too big, you cut them down. There's not even really a phrase like that in America, but there is one in most other cultures. There's also a very high density of people working on startups here, and there's a culture of paying it forward. People help me on my startup, I'm going to help them on theirs. And so you want to surround yourself with this, no matter where you are in the world. You may find that you have to go online to find that community. But you still want to do it. This is my old version of slides. Did I send you a new one? We're just going to go with this. All right, so one of the things that startups really have to get right is the idea, there's become this myth in Silicon Valley that the idea doesn't matter. And that you should start a startup and just sort of pivot your way on this random walk and hope you get something big. But as Dustin said, all of the best startups that we have started, we have funded at Y Combinator, it was an idea first and a startup second. It was not a bunch of pivots. The very few pivots that were successful were when the founders discovered along the way that there was some other idea they were more passionate about than their first one, or they just learned some new problem. Original thought is really hard to get good at, but really important. The most successful startups are not derivatives. They are not a copy of something else that was working pretty well. Most people try to start a copy of whatever worked last year. I don't know how many people started a Facebook clone in the year after Facebook. Had to be a lot, a lot. And none of those went on to really matter. The next Facebook never looks like Facebook. It looks like something totally different. And the way to get good at this is to start noticing problems in your own life. And the great advantage that you have as students is that students, young people in general, tend to be on the forefront of technology. You can predict the great wave before it happens. And this idea of the great wave, I think this is the most important concept to find good ideas out there. People wonder why startups cluster in small periods of time. Why were there a bunch of companies that started in the late 90s, early 2000s that were really successful? Why were there a bunch of startups between sort of 2009, 2011 that started that were really successful? And the reason is that there are these great waves, the Internet and mobile in those two cases, smartphones. That all of a sudden, new things are possible that were never possible before. And when that happens, because startups can move so quickly, you can do things that otherwise would never happen, or that otherwise a big company would win on. And you want to think about what the next great wave is. My personal best guess is that it will be machine learning and just applied to every vertical. I think that's the easiest layup right now if I were going to start a company. But you all probably know what that is much better than I do. Whatever your peers are doing, whatever your peers are excited about, even if it looks like a toy today, especially if it looks like a toy today. That's probably the next great wave. But you want to identify this. What is the big technological tectonic shift that's going to happen in the next couple of years and do something that's enabled by that and built on that platform? It's also easier to start a hard company than an easy company. Most people, especially young people, want to pick something that doesn't sound too ambitious, doesn't sound too hard. Because they're like, well, starting a company sounds really hard. I better pick the easiest possible company. But actually, starting a company is always hard, and it's about equally hard no matter what you do. If you start a hard company, though, if you inspire passionate people, if you are building general AI, or supersonic airplanes, or nuclear power, you'll have a lot more people that are excited about that than another derivative idea, Facebook 1952. So this idea that it's easier to start a hard company than an easy company, I think is a big secret in startups still, but it's one that I've seen again and again play out. As Dustin mentioned in answering a question, co-founders are really good, but a bad co-founder is way worse than no co-founder. Because so many people say you need a co-founder, there are a lot of people that will pull some random person off the street and make her their co-founder. This is really bad. In fact, we did a little analysis of our data at Y Combinator on this once, and these glommed-on random co-founders, 100% failure rate, 100%. You really need a shared history. You want someone that you know is good, you know you can work with, and that you have an obligation to. There are many times in the course of a startup where the expected value dips below the x-axis, just temporarily, and it's not rational to keep going. And if you have a shared history and a bond with someone, you keep going anyway, because you don't want to let your friend down. This is really important. You want to select determination. Determination is the most important value in a co-founder I've ever been able to identify, and it's not the thing people look for the most. Startups really, really hard. Determined people are the ones that make it work. Startups are about not giving up. When we talk to our best founders, the things that they say are things like, I always figure it out. I never give up. And these are the traits that it actually works. It's not that picture that Dustin showed from the movie of a beautiful mind style writing equations on the window. It's just dogged persistence. And you keep going, and it eventually works. And that comes, it's co-founders that need to have that. So when I think about co-founders, I tell people to think values first, aptitude second, and specific skills third. I think most people go in the opposite order. They're like, I need a co-founder who knows JavaScript and X and Y. And really, you want to find someone that matches your values, especially this value of determination. You want someone that just has a lot of potential and aptitude. And then finally, you can think about specific skills. And finally, you want someone that is humble and not entitled. When someone asked Dustin the question about what has changed in startups from 2004 to 2017, my answer to that question is that there are more people than ever before that want to get into startups for the wrong reasons. They want to do it because it's the cool thing to do. These are the people that would have gone into investment banking in 2004. And you want people that are humble, that are not entitled, that are willing to do whatever it takes. And they're doing this because they want to create this thing. They have this idea that they can't let go. We have five lectures in this course devoted to the product, because a great product is the single most important thing that you do. The one thing I want to mention for now, as you're thinking about the product you build, is that it is more important to have a small number of users that love you than a lot of users that like you. And almost all startups get this wrong. Eventually what you want, of course, is a lot of users that really love your product. That's almost impossible to do. In practice, you have two choices. You can go deep and narrow. You can have a small number of users that really love you, and then you can find out how to find more and more of those users and broaden the appeal of the product. Or you can have a lot of people that kind of use the product once or twice, kind of like it, and try to figure out how to get them more engaged over time. With high confidence, I can say, you want to start with a small number of users that really love you. Almost all great companies have products that start this way. Think about the ones in your own life, the products that are so good that you spontaneously tell your friends about them, the products that are so good that if they went away you would write the company in protest. That's what it means to really love a product. A good indicator of that is retention and frequency of use. So if you have, and in fact, I think this is so important, that you actually shouldn't track absolute growth in number of users in the early days of a startup, you should just track how often they're using it. And we'll have a session on metrics later, but you really want to get good at analyzing your metrics and saying, is this a user that I'm retaining and that's using it frequently? How do I compare to other products in my space? And that's a good early indicator of users that love you. Better still is them spontaneously telling their friends to buy your product. But the important point here is this. Nothing but a great product will save you. We're going to talk about a lot of other things in this course, and they all kind of matter. But if you don't get this one right, if you don't make a great product, the thing is still not going to work. So you need to get some users to build a great product. You can't do this in a vacuum. You need people to talk to and to iterate with. And so you need to find a small number of users that will help you build this great product. And one of the most common cliches in all of startup advice is to talk to your users. One thing I've learned is that most people don't know what that actually means. Most people will say, I'm supposed to talk to my users. So they call up a user and say, hey, it's Sam, do you like my product? And then the user says, yeah, I do, it's fine. People kind of generally don't want to disappoint you. And so you say, great, thanks, and you hang up the phone. And this is what most founders do when you say, talk to your users. This is not what it means. Emmett Shear, who's one of our lecturers later, is really good at doing user interviews, and he'll talk about this in more detail. But you really need to drill in, and remember, people are going to be too nice to you. So you need to find out exactly what they like about it. You need to watch them use it. You need to try to figure out where they're doing things that seem weird to you, because they're trying to accomplish something else. You should ask them, have you recommended this to anyone else? If not, why not? Have you paid me yet? If not, why not? What would that take? You really have to dig in and talk about specific features, things they used to use instead, times when they stopped using your product and used some other product. The top level questions here don't help you. In terms of getting those users, everyone thinks that they're just going to put up this website, tell one person about it, and it's going to take off like wildfire. That's not what usually happens. So there are four common strategies to get your first 100 users. I'm going to go through them in order of roughly best to worst. You can email people you already know, and you can ask them to be your customers. You can call in all the favors with anyone you can think of, someone you took a random class with, someone you were friends with in high school. If it's a paid product, you should actually charge. This is important. Remember, people are going to be inclined to do you favors. They're going to be too nice in what they tell you. So if it's a paid product, charge them. Another strategy is to research people that you think might use your product, and email them or whatever, and ask them to try it. Conversion rates here are low, maybe 2%, 3%, so you'll have to do this to more. But you can send targeted emails and say, hey, I just made this new product. I'd really appreciate it if you would try it out. Most people want to be helpful. They probably will. You can do social media, hacker news, forums, press, whatever. If this is going to be your growth strategy, you need to figure out a way for it to be ongoing. Not a one big pop and then go away. Most people who do this find that it works once. Then they call up the journalist and say, will you write about me again? And the journalist says, has anything changed? No, but I really need users. Will you please write? The journalist still says no. Airbnb is an example of a company that made this work as an ongoing process. And they would do the craziest things. They just kept coming up with press stunt after press stunt. They would mail journalists giant boxes of cereal so they got on their desk, and they were able to get it to keep going. But that's hard. And finally, the laziest and least impressive thing you can do is to just buy ads on Facebook or Google and point people to your website. This is not what I recommend. I don't know of any startup that's gotten big starting this way. I include it because it's the idea that most people try. I want to wrap this up before I take a few questions by talking about building a great company. We talked about this earlier. Getting to know your users really well is important. The best founders, they do customer support themselves. They go visit their users. They sit in their office if they can. In the case of Airbnb, they go live with them. You want to get to know your users really, really well. They have a short cycle time. The cycle here is basically like, talk to customer, understand pain point. Build product to address that. Get that in front of a user. Ask them, see what they do, and then repeat the cycle. And this cycle is how you iterate and improve. The law of compound growth being what it is, if you can get 2% better every iteration cycle, and you have a chance of having an iteration cycle be every four hours or every four weeks, and you compound that over the course of a few years, you get very, very different places. So make it one of your top goals to build the fastest iterating company the world has ever seen. You want to make a long term commitment. Most companies don't do this. Most companies, especially if they're trying to start the easy company, think in a two or three year time frame. These things always just take a lot longer. It's always somehow almost a ten year project, if it's going to work. And if you think about that way from the very beginning, you will make very different and much better decisions. I think this is the only arbitrage opportunity left in the market. Almost no one makes a very long term commitment to a new project. And if you do that, you will think in a different way, you will hire different people, and that'll work really well. Speaking of hiring, stay lean until everything is working really well. I think this is somewhat bimodal. In the early days when you're experimenting and zigzagging, and you want to be like a fast little speed boat. And you want to be able to turn the whole company on a dime. And you can't do that if you have a big company. Cash burn aside, which is another problem, the flexibility of a company basically decreases with the square of the number of employees. So you want to stay really small until you're sure things are working. Once things are working, then you can get really big. And in fact, then you need to. And so once you switch into hyperscale mode, you want to just get as big, as fast as you can with great people. Because then, you don't want to be a speed boat. You want to be an aircraft carrier. You want to be a battleship. And you don't care about the fact that you can't turn as fast. You just want to steamroll everything. But you really want to be in one mode or the other. And you'll know once users are just begging for your product. And you'll be convinced you have great product market fit. That is when you can really start to scale up the company. Even when you get there, though, resist the urge to hire mediocre people. The note Kostler, who's speaking later in the course, has a saying that I love, which is, the team you build is the company you build. And this is really true. I didn't appreciate how true this was for a long time. But if you build a team of great people, and you have a product that people love, you have a 90-something percent chance of success. Those are both really hard to do, and they're independent variables. But don't ignore the team point. The best CEOs I know spend huge amounts of their time recruiting and retaining their talent. How much of your time would you say you spend on this? 40 to 50%? Like this is Dustin Moskovitz, doesn't need to do anything he doesn't want to do. He chooses to spend half of his time recruiting and retaining employees. So if Dustin can do that, you all probably should really be doing that as well. Every CEO I've met has an excuse for why they only spend 5% of their time on building their team. And it always sounds really good, and then they always turn out to fail. Really, really invest in this. Relentless execution. So this is a theme we'll talk about a lot. But you have to keep going, and keep going, and keep going. And you have to do things perfectly, and you have to get all the details right. You have to care too much about every experience that a customer has with your company. There's this book, The Score Will Take Care of Itself, something like that. Read it, it's really good. But it's about how important it is to get all the details right and just move forward relentlessly and as quickly as you can. Startups are about not giving up to a degree that most people don't have a good intuitive understanding for. One of the very best companies in the last YC batch, he applied seven times before he got in. Most people, you reject them six times, they're not going to apply again on the seventh, and this is just a version of what happens in startups all of the time. Where you get beat down again and again and again. And it's like that last time when you get pushed down and you don't think you have enough energy to get back up. That's when it finally works. And this is what you sign up for if you're going to start a startup. Remember, if this is like a ten year marathon, you have a fiduciary duty to your shareholders to take care of yourself. So some people treat a startup as an all nighter. They don't do a good job taking care of their health. They don't sleep. They don't maintain their personal relationships. It is true that startups are a bad choice for work life balance. There are always these posts about how I changed the world. I'm a startup only working two hours a day and kite surfing the rest of the time. Some of these people though are never the ones that actually make a big impact, they just talk a lot. So startups are really hard. But you have a duty to yourself, your team, your investors to take care of yourself. And to not neglect your health, your well-being, the rest of your life, your personal relationships. And then finally, a clear mission. You don't have to figure this out on day one. But all of the most successful startups I've been fortunate enough to be a part of pretty quickly, first year, two years at the outside. They figure out a really important mission. And it is this mission that gets people to join them, that drives them, that drives the founders, that gets the media to write about them. And even if you start off building a project that's just interesting to you and solves a problem in your own life, which is how you should start. Remember to, at some point, have a clear mission. You have to become a great evangelist for this mission. One other skill that I didn't make it into this version of the deck is being a great communicator. But you need to clearly communicate and clearly think, clearly communicate this clear mission. And that is what will convince people to come help you. And that is how you will build this idea into this giant set of this huge company and all these people that really love your product. All right, I talked a little longer than I was hoping to. I've got about two minutes left for questions, if anyone has one. I was wondering, so if there are two people you could hire, one person is very passionate about the things that you're building, but lack of skill that you need. But the other person is really, really good at things that you're not good at, but they're not really passionate about your idea. Which one would you convert them to join? All right, so you have a choice to hire people. One is passionate and value aligned, but not a good skills match. The other one's a great skills match, but not passion aligned. Values first, aptitude second, specific skills third. If you can get a really smart person who really shares your values and your mission and believes in what you're doing, they can learn the skills. I think this is a framework that has not let me down many times, sure. How do you get good at getting good ideas? How do you get good at getting good ideas? One thing is just to practice a lot and tell people your ideas and be willing for them to tell you why it's terrible. But I think good ideas are not a solo endeavor. You want to find a group of smart people that you can start bouncing things off of and say, hey, I noticed this thing and it kind of sucked. What could we do about it? And you don't just sit in the room and write on the window with the whiteboard pen and have the good ideas come to you. Good ideas come because you talk to people. You have smart friends, you have colleagues, and you spitball ideas around. So I would say, notice problems in your life. Even if you don't have a solution, still talk just about the problem and see if you can come up with something. This is, One more thing on that. Ideas are very fragile. So when you find this set of people to start talking about ideas with, you want people that don't immediately shoot a bad, half-baked, half-formed idea down. You want people who will say, well, yes, what if we did this other thing? You don't want people who are like, that sounds stupid. You want people who will say, well, that sounds crazy and unlikely to work, but think how big it could be if it did work. Like that's the spirit of the kind of person. And then how can we figure out how to make it work that you want? But I'd say notice problems, have people to talk with. Anything you'd add to that? All right, we can do one more question. Yes. Thoughts around fundraising. How do you know when to start fundraising? How do you know when to start fundraising? We don't have a whole class on that. But in general, if you can raise money, and it's easy. So if people are desperate to give you money on good terms, that might be a good time to take it. And the other one, of course, is if you need the money. And then you kind of may need to do it no matter what the terms are. In general, you want to have progress to warrant the funding you need. And so it's kind of when you have enough progress that you're able to fairly easily raise money and you need it, that's the best of all possible times. But again, that's a complicated question. We'll do a full lecture on it. All right, one more. So how do you decide when to turn from the searching mode and stay lean to the risk killing mode? How do you decide this switch from when you're kind of like tacking around, trying to get good product market fit, and when to really scale up the company? You will know. Everyone wonders how they know when it's time for that. And it's like, when you are running around the office 80 hours a week, pulling your hairs out, and people love your product so much you just can't build it fast enough, that's when. I have never seen someone not been able to figure out when this moment is. All right, on Thursday, we will have a session on startup mechanics. And thank you very much. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "How to build a product with WhatsApp co-founder Jan Koum",
    "description_video": "Jan Koum, co-founder of WhatsApp, shares his journey building his company.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/7a-how-to-build-a-product-with-whatsapp-co-founder-jan-koum",
    "youtube_url": "https://youtube.com/watch?v=s1Rd4UShDxQ",
    "mp3_file": "downloaded/How_to_build_a_product_with_WhatsApp_co-founder_Jan_Koum.mp3",
    "mp3_content": "Today's speaker, we have Yann Koum. Yann is the founder of WhatsApp. WhatsApp, as we mentioned in earlier iteration of this, is the startup that did everything right. After not getting, after trying to get jobs at Facebook and not, for either Yann or Brian, they put their heads down. They figured out a product that people really wanted. And while everybody else in Silicon Valley was going to conferences, doing PR, whatever else it is people do other than making a product that people really love, WhatsApp just quietly built this thing that was used by, how many people at the time of the acquisition? 450. 450 million people for a consumer app and more than a billion now. And it was acquired by Facebook a couple of years ago. And Yann can tell that story. But thank you very much for coming to talk to us. Sure. Thanks for having me. So when Sam asked me to come and speak here, I think I made some smart-ass comment how I'm going to speak about people actually building a product and not going to class or something like that. But as Sam mentioned, we were just fortunate in a way that we stumbled into something that people really wanted. And I'll explain in a second how we got there. But the credit really goes to not necessarily us having some brilliant idea. I think the credit goes to also being in the right time and the right place and building a product that people wanted and just realizing that people wanted it. So just to kind of give the quick history of how we got where we got. We actually, both me and my co-founder Brian, we were at Yahoo for about, I was there for nine years, he was there for 11 years. And that time was actually really, really valuable for us to learn how to scale back end servers, how to, what makes a good product, what makes a bad product. And kind of seeing the Yahoo as a company get really successful and then kind of, you know the story. So we left in 2007, just coincidentally, we both left around the same time, like within a month difference. And we took some time off, we took about a year off. So we left in 2007, we took all of 2008 off, he moved to New York with his girlfriend, I was just like goofing off and I really kind of fell in love with my Nokia phone. I had this candy bar, I think it was 6610 Nokia phone that I jail broke, I installed a Netmon software on it, which showed you which mobile cell you were connected to and all this advanced things you could do with a phone that you couldn't do when you took it out of the box. And so 2008 ends, and January of 2009, my birthday was coming up in February. And I figured I'll get myself an early birthday present, I'll go buy an iPhone. So I went to Apple store, bought an iPhone, and right around the same time as the cake came out, I think there was no SDK when iPhone first came out in 2007. But I think they released it in September of 2008. So I was like, literally three, four months after iPhone came out, sorry, after iOS SDK came out, I got an iPhone and I started tinkering with it. I was also really bored, and I had a lot of free time. So I'm like, okay, well, let's install this weird thing called Xcode. Luckily, I had a Mac, let's install Xcode, let's figure out what can be done. Let's build a simple app, and then you kind of realize, holy shit, it has full Internet connectivity and it can do full TCP IP stack. So it basically is a little computer that can talk to your server. So I'm like, okay, cool, what can we do with it? So the first thing that we built, which I don't know how many of you know the history of WhatsApp, the first thing that we built was actually this concept of a status. And so the idea was, if you ever used, and you all might be young for this, if you ever used something like AOL, AIM, or ICQ, or IRC, or any of these products, you have this concept of a status. Like Yahoo Messenger has this away from keyboard, or I'm busy, or I'm in a meeting. And so the first thing that you would do when you use those messengers is you would, the first message you would send was, hey, are you there? That was the first message you sent to start a conversation with somebody on ICQ or if you private messaged somebody on IRC, because people would be away. And so they would use the status to kind of indicate I'm not near a computer or I'm AFK or whatever. And so the idea was, well, let's take this concept of status and just apply it to your phone. So before people call you, they can check your status, like maybe you're busy, maybe you're in a meeting, maybe you're traveling, whatever. So if you don't pick up, at least people know why you don't pick up. And that was kind of like the WhatsApp 1.0 application. And what we built was the app that hooked into your address book. So the other thing that kind of worked in our favor was there were address book APIs on a mobile phone. They didn't really exist on a desktop, right? If you think about desktop, like Windows, from 2000 to 2008-ish. People never really put address books on their desktops. People always had address books on their mobile phones. And so even if the API existed, there was nothing to query, because the address book database was empty on all these devices. And so luckily, the one thing that Apple opened was their address book API, which was great for us. So what we did was, sorry, we basically went through the address book. And we could figure out if the contact in your address book was another WhatsApp user, and that's basically how the status worked. We would take your phone number, and if it was an international phone number, we would try to normalize it to the plus format. So all of the phone numbers in our system would start with a plus in the full international format. And we would be able to detect if the other person is a person on a WhatsApp network, a user of our product. And the idea was that before you start a phone call or before you send a message, you would check the status of this person from WhatsApp. And they would say, I'm available, and you would call them, right. So that was a WhatsApp 1.0. It failed horribly, it was a disaster, it was depressing. Nobody used it, people downloaded it, actually, surprisingly enough. And I think people downloaded it because there were no apps back at the time. There were maybe, I don't know, 1,000 or 2,000 apps in the whole app store, it just went live. So we benefited from being early, but the idea wasn't that great. So people would download, and they just never used it. People just called people like they normally would. It was really hard to replace a native dialer, and that's kind of what we wanted to do. We wanted to replace a native dialing application. So we struggled for a little bit. We kept adding all these weird features in retrospect. Back then, we thought they were the best thing ever. You could set your status to automatically change at a certain time of day. If you knew you were always in a meeting from two to four, you could automatically configure it to always say that you're in a meeting from two to four, so it kind of had that functionality. And then something happened around the summer of 2009, Apple introduced push notifications. So back then, if you wanted the application to wake up, the only way to wake it up was the user tapping on the application icon. And there was no way to do anything in the background, which in retrospect was really backwards. Because I don't know if any of you know about Nokia Symbian phones. But S60 and BlackBerry had all this capability, even before iPhone came out, to do autostart, to do background multitasking, to do networking, to do all of this stuff. And so iOS actually limited what we can do, so we were struggling. And then Apple introduced push notifications, and we were like, hallelujah. So we ended up hooking into Apple push notifications. I think this was around the summertime, even before they were still in beta, because we had developer access. And we noticed that people were using the status as a way to kind of communicate with each other. They would change the status to say, I'm going to a bar. And the change in status would broadcast and go to all the other people who use WhatsApp in their address book. And so around the summer of 2009, we were like, huh, interesting. Maybe we should build messaging. And then it all kind of clicked, because I've always used SMS. And if you remember on those old Nokia phones, the SMS was not threaded. So you would get a message, it would show up as a phone number. And if you get another message from that person, it would show up with just another entry in your list. And then iOS came out, and they introduced threaded SMS, and everybody went like, wow. So we kind of said, okay, well, we can do full networking. We can do TCPIP. We can connect if your phone is a client to a server on the back end. We already had all this code to figure out if you're a WhatsApp user or not. We could take your phone number, parse it, figure out all the international prefixes, we even figured out Argentina at some point, which was not an easy thing to do, but we got there. So we got to a state where we could actually send messaging, have people send messages over WhatsApp. And if you look at our application today, you see all these features. You see group chat, you see ability to send media, to record voice messages, to do all this stuff. We didn't have any of it. We didn't have, the only thing we had was one-on-one messaging, that's it. Just think how antiquated that is. And that's what we launched with. So around September, I think it was September-ish, maybe late August, early September, is maybe even early October, I actually don't remember. Is when we launched messaging, and it took off. And it was intuitive to us why it took off, because SMS was so expensive back in those days, right? And especially international SMS. So if you had two people who were living in two different countries, how did they communicate? Well, they could send each other SMS, it was expensive. They could use Skype, but Skype mostly worked on a desktop, so you had to synchronize the time when both of you are in front of a computer. And people usually are not. Some of you have computers open, but if you get a Skype call now, you're not going to answer it, right? So there was really no good way for people to communicate in real time. And so that's why SMS was so popular, because your phone was always with you. It was always in your pocket. It was always, no matter where you went, you had your phone with you. So when you sent an SMS, you never said, hey, are you there? You never did that, you just sent an SMS. The only thing sometimes you could say is, hey, did you get my message? Because SMS was so unreliable, especially internationally. And so that was the other problem that we could solve by building on top of TCP IP, is we could add reliability in our protocol. So we rolled out messaging, we made it super reliable. We added all these visual indicators. You knew if the message actually was successfully delivered to a server. You knew if it was successfully delivered to the device that you were sending it to. And it just took off. And when Sam talked about, well, we kind of went heads down and we didn't go to conferences and we didn't do a whole lot of other stuff. It's just because we were lucky. We stumbled into something that people really, really had a need for. Just think about SMS back in 2006, 2007, right? There was no iMessage, nothing else worked on your phone. SMS was expensive, it was horribly limiting. You can only send 160 characters at a time. And if you sent a longer message, it would break it into multiple chunks. And sometimes the chunk at the bottom would arrive first, so you have to read the message at the bottom and then read the message on top after that. Media was horribly expensive and it was not working well across platforms. So if I sent a video recorded on Nokia phone to Blackberry users, they probably couldn't have watched it. Or if you sent a video recorded on Blackberry to iPhone, it probably wouldn't work either. So we had all these limitations with SMS that we were trying to address in our product, and obviously the biggest one was cost. SMS was very expensive in Europe and in many countries outside of North America. And we just kept going. So once we figured out that there is a need for it, we were like, well, we better hire. So we hired some of our old friends from Yahoo, who left Yahoo, some of our ex-Yahoo friends. We hired, I hired a friend of mine who I actually met when I was working at Stanford, when I was doing IT at Graduate School of Business in 96, 97-ish, back when I was in high school. So he came and he helped work on a Blackberry client. And so our goal was like, okay, well, we gotta build all these features, but we also gotta build all these platforms. Because we started out with iPhone, but the world back then was very different. Nokia actually was majority smartphone platform back in the days. Not in North America, but if you kind of looked at the rest of the world, everybody was using Nokia smartphones and Blackberry. And Android, I think, didn't even exist or just barely existed at the end of 2009 and early 2010. So we had to build for Nokia, and we had to find people who could actually build for Nokia, Symbian S60. And we had to find those people in Europe, because nobody in Silicon Valley even heard of Nokia. So we got lucky, we found two really good engineers to help us build that. Funny story about our Nokia client, it's actually built using Python. Not a lot of people know that actually Nokia S60 had a Python runtime. So I remember when Brian, my co-founder, he started looking at Nokia, because we knew that we had to do Nokia. So he kind of went away for a week. He comes back a week later. He's like, you're not going to believe this. You can use Python to build a client. I was like, no way, get out of here. He's like, no, no, no, no, seriously, you don't understand. You can run Python on this little tiny phone. I was like, okay, let's try and do it, and that's what we did. Basically, the whole back end, the communications, the protocol, was all in Python, and the UI was actually in C++. So we started working on building multiple platforms, and we started working on building features. So we launched Blackberry, we launched Nokia 60, we launched Android, all within a few months of each other in 2010. And then we started building features. So we had to build what people asked us to build. People wanted group chat. Everybody's like, this is great. I love your product. I want to have a group conversation with my family, or three friends, or five co-workers, or ten people in a study group. And we're like, okay, well, how do we build group chat? Let's figure it out. So we sit down and sketch the user experience, then figure out how to make the back end system work for group chat. And then people wanted, obviously we had, very quickly, we added multimedia. And I think multimedia is what really took us to the next level. Once we added ability to send a picture, which today is comical. How could you not have ability to send a picture through a messaging product over your smartphone? Back then, you couldn't. There was nothing that worked really well, or was cheap, or was reliable. So we added ability to send a picture. We added ability to send videos. We, at some point, introduced voice messages. And then things just took off. And so at that point, it was just scaling the back end. And this is where it kind of ties into what I was talking about earlier, where me and Brian worked at Yahoo. Because we spent so much time there, and because we were there in early days, and we saw the company scale, we had all this experience to scale the back end. And we had our own share of outages, and our service wasn't 100% perfect. But we would make sure that we would learn from an outage, and make sure that we would add the right monitoring in place. And we would have enough capacity always for holidays, like Christmas and New Year's, where there's a traffic spike. But having that experience working at Yahoo, learning how to scale the back end systems, learning how to tweak the operating systems, the kernels, the networking stack, the Ethernet driver if you have to, it all kind of tied together. So our experience at Yahoo, our experience with difficult or challenging SMS protocol that we'll use as a consumer, kind of all combined with this perfect timing that happened in 2009, 2010, with smartphones coming online, and people wanting to have this ability to communicate. And if you think about smartphone, it's ultimately, the messaging is a killer app for a smartphone. So we just basically stumbled into the killer app, because there is nothing else you do more with a smartphone than communicate. Most of it is probably talking to your friends and family and your loved ones, either over iMessage or WhatsApp or Skype or anything else. Yes, the guy from Virginia. Could you do it again? Huh? Could you make another app again that takes off? A messaging app or just an app? Just any app. I could, I'm sure you can. I I mean, the chances of me being successful again are like zero. So the odds are on your side, so you should go and do something. So that's why we're able to actually spend all of our time heads down building a product, because we had this amazing product market fit. We had this amazing product that people wanted. They were like, gimme, gimme, gimme. When we were rolling out Nokia S40, which was just like a step below Nokia S60, which was kind of like a feature phone, people were emailing us, asking for when is it going to be done, when is it going to be done, when is it going to be done? And so there was a huge pent up demand for any platform before we would launch it. And so that's why we didn't have a need to go to the conferences and do a lot of PR or do anything like that, because we had people who needed our product and we had millions of people who were waiting for us to build a new feature or a new platform. And that's why we were able to just go heads up and go heads down and build a product. So that was kind of the background that I wanted to give you on how we got started. We can do a Q&A for the next 15, 20 minutes, and yeah. The specific thing I want to hear most about is how you dealt with the launch of iMessage and Facebook Messenger and all of these other messaging platforms. WhatsApp was clearly first, and then it looked, the world got scary quickly. How did you think about that, what was it like inside of it? So how did we think about iMessage and all these other platforms? Well, so with iMessage, we, when did they launch? I think 2011-ish, something like that. I think 2011 at the developer conference. So the world in Silicon Valley is very different from the world outside. In Silicon Valley, if you look around, 90% of people have an iPhone. Not only do they have an iPhone, they have a latest, greatest iPhone. Outside of Silicon Valley, it's 80 or 90% Android, right? So for us, having an iMessage launch was just a small blip on the radar. What about Facebook Messenger? So Facebook Messenger, so I think Facebook for a very long time didn't really have a good messaging story. I remember they bought this company called Beluga, which, I think it was Beluga. That was group messaging, so they were kind of focused on group messaging at first, and then they shut it down and turned it into Facebook Messenger. But Facebook Messenger was part of the Facebook app. It wasn't a really dedicated app back in the days. But ultimately, if you look at a Facebook Messenger, the graph that the Facebook Messenger is using is very different from the graph on your phone. And if you think about people you add to your address book, and people who you add on Facebook, there's going to be some overlap, but for the most part, it's going to be different. So people who I add on Facebook are probably not people who I'm going to message with a lot. And people who I put in my address book are people who are probably a different graph in terms of how important they are to me. And if I add you into my, basically, if I exchange a number with somebody, it means it gives them ability to WhatsApp me, SMS me, or call me. There are probably a lot of people who I'm friends with on Facebook who, if they called me, I would probably first go, who is this? Yeah, we met each other once, and I added them. I'm probably not necessarily a typical example. I mean, I'm sure there are people who have different graphs on different networks. I'm sure there are people who use WhatsApp only for work, and only have their co-workers on WhatsApp in their address book. And I'm sure that there are people who only have a certain set of their contacts in one or the other. But I think overall, this idea of, well, if I add you to my phone, I give you permission to interrupt my life, is what makes our network a little different. Because people have these connections that are stronger with people who they have in each other's address book. With Facebook, I have people I went to high school with, I have people I went to university with. And it's great that I can keep in touch with them on Facebook, but I wouldn't want them to call me randomly out of the blue at 7 PM. It would be just awkward, because I haven't talked to them for years. So the graphs are different in that sense. And so we always had, kind of going back and generalizing it, we always had competition from day one. There was actually a point in time where there was a new messaging app popping up every month. And every month, there was an article on TechCrunch how this awesome new messaging app was gonna take down all other messaging apps. And I don't know if they paid TechCrunch to write it or what. And we would just read this and we would go, they have no users. How can you write that story in TechCrunch? It just makes no sense. And obviously, we didn't want to say anything, because we don't want to draw attention to ourselves. We actually, on purpose, tried to stay under the radar. But it was just kind of funny to see this from the sidelines, all this kind of dog and pony show that happened with all these apps. I mean, there was Ping Me, there was Message Me, there was Group Me, there was Skig, there were like, hello. There were like ten different messaging apps at some point, which kept getting all this publicity. And we were like, good for you, have the publicity you want. We'll just send it as a radar and not have any attention drawn to us. So we always had competition, be it big guys like iMessage or Facebook Messenger, be it little guys like Kik. We always had competition. We always, even today, we still have apps like Telegram out there and Line and Kakao. But what we said that our destiny is really in our hands. Like we can't worry too much about competition. We have to worry about our product and our users. And if we spend a lot of time thinking about competition or looking at competition, we're going to fail. Yeah. So trying to build upon what you just talked about, this social graph. I mean, I feel like there's this whole social graph and it's actually now changing. Like, I mean, at least among me and my friends, I mean, I think I don't call people so much. I don't really send them SMS. I would probably add people mostly on this social media, like online, Facebook, or I could add them on chat apps like this, WhatsApp and more. But I feel like this whole social graph, it is also changing slowly because people call less and people send SMS less. People like to do it more on this social media platform. Do you have a view on that? And do you think there's any opportunity on that? Or do you think this shift is even true? I think, yeah, I think it's true. So the question was, how is it, so the world is changing. People call less, and now people add. The social networks all kind of merge into one now. Yeah, you're right. I think people call less these days, and people mostly message each other. I don't really know if we would do anything differently today or even back then. I think for us, the focus has always been on, well, we want to provide a utility. We want to provide an application that is purely only about communication. So if you look at some other apps like WeChat or Line or Kakao, they do a lot of different things, right? You can order taxis through WeChat, and you can follow people online. Line has a whole feed concept. And we always wanted to build something that is really, really efficient and utilitarian, and also fast and reliable. I mean, not a lot of people can have the latest and greatest smartphone, right? A lot of people have Android phones that are low-end. A lot of people have, or used to have, Blackberry phones that didn't have a lot of horsepower and a lot of memory and a lot of CPU. So for us, it was always about reliability and efficiency of the app, and not trying to do all these different things that a lot of different social networks and apps do. Yeah? So how do you think about Messenger right now? Because now that Messenger integrated a lot of the features that WhatsApp had, I am starting to use Messenger a lot more. And that definitely takes away from the airtime of WhatsApp. So do you have an internal competition? No, I think in general, there is still a lot of room for both apps to grow. I think Messenger is really strong in countries like North America, like the United States, for example. So I think we complement each other geographically. I think if you look at countries like India, or Israel, or Hong Kong, or Germany, or Spain, WhatsApp has really strong foothold in those countries. And I think if you look at something like Australia or North America, you're probably going to see Messenger do really well. So a lot of it is also not necessarily split by a graph, but also by the country you're in. Yeah? I appreciate the humility that you couldn't do it again with another app. But I'm sure people ask you all the time for help or advice. How do you determine if you hear an idea or look at an application, if it can be really well? How do you think you do that? It's very simple. The question is how do you determine if an app has a potential or is a good idea? It has to solve a really basic problem, and it has to do it in a really simple and efficient way. And going back to what we built, we, in some ways, solved a problem, right? People had problem communicating when they were not in the same room, when they were in different cities, or in different countries, or in different time zones. And so, it's not that it wasn't impossible. It was hard and it was expensive, and we made it easier and cheaper. And when you offer something to people that is easier and cheaper, people, of course, will use it. So, I think the number one thing to look at, for me, when I look at a product, does it solve a need and doesn't solve a need on a global scale, right? If you solve a need for people on Stanford campus, that's great, but can it scale to a billion or two billion people? If you solve a need for people only in Silicon Valley by providing them chargers for their Teslas, great, how many people have Teslas in the world, right? It's gotta be like a global, actually a lot of people have Teslas, I don't know. It's gotta be like a global solution that applies to everybody in every country, potentially, right? And so, that was kind of like. That's something I've seen so many startups sort of get wrong. As you said, in Silicon Valley, everyone's got the iPhone 7S, or whatever we're on now. How did you build that into the culture of the company to think about your users all around the world? I don't know. I was just lucky with the people who were hired. And that was the other thing that I didn't mention that I should have mentioned. We ended up with a really incredible team that we mostly hired out of our personal network from ex-Yahoo and from friends of friends. We, I think ourselves, had a really good understanding. I mean, me, myself, being an immigrant and growing up in another country and going to all these other countries, I understood that there was more to smartphone than just iPhone. That was the thing that everybody talked about and wrote about in 2008 and 2009. So for me, especially as somebody who really liked Nokia phones before Nokia went out of business, I was like, we gotta build for Nokia because they're great phones and there's a billion Nokia smartphones out there. So I think just me and my co-founder having that perspective probably distilled through the company and people understood that, hey, you don't want to just build for iPhones, you don't want to just build for the latest and greatest. You have all these millions of phones out there, billions of phones out there, that you gotta build for because you want those users to be using your product. And they also were asking us to do that. Yeah? Can you talk about the business side as far as incorporation, equity, and raising money? A business side, my favorite topic, sure. So we incorporated on my birthday, on February 24th of 2009. And the reason I, the thinking that was going through, so let me back up. We were trying to submit an app into the Apple store. And I didn't want to do it under my own name. I didn't want the app to say Yankoon, because I figured who would want to install an app made by some guy? So I figured we should probably be more official. We should have a company. I'm like, okay, so go to Google, how do you start a company, right? It's just like step one. So I got a friend of mine, he was an insurance broker. So he had his own company, and he was three blocks away from me in Santa Clara, where I lived. And so I went to his office, because I used to buy insurance for my car and my house from him. And so I was like, dude, how did you incorporate? He's like, it's easy, you take these articles of incorporation. It's like one page with like five things written in it. And you go to San Francisco to the state building, the Secretary of State or whatever. And he gives them $100 and they stamp it and you're done. I'm like, no way, it can't be that easy. He's like, yeah, it's that easy. I'm like, all right. So we had to submit an app, and they wanted us to show, like Apple Store wanted us to actually send them a copy of the incorporation article. So it was like, okay, easy, I have nothing to do that day. I'm like, drive to San Francisco, get lunch, go to his office, get a stamp, get a letter, great. Send it to Apple, they look at the letters, they're like, yep, you're legit, you're a company, you can now submit under the name WhatsApp. I'm like, cool, submitted an app under the name WhatsApp. So that was how we incorporated. In terms of, it's easier than it sounds, back then it was like a struggle for me because I never done it. How did we think about money or the whole funding thing? So we left Yahoo with some savings, because Yahoo did really well in late 90s, early 2000s. And so we had stock, we had options, we had RSUs. So I was actually able to not only take a year off, obviously not do anything extravagant, but live off my savings for a year. And then I had enough money to where, while I was still tinkering around with an app and we didn't have exuberant costs, I actually remember when we started out, I was using my buddy's server, this guy Chuck, who also used to work at Yahoo. He used to run Yahoo Sports. And so I used to sit next to the Yahoo Sports team, so we became friends. So I was like, hey Chuck, can I use your server? I don't want to pay $20 a month for a server. He's like, yeah, sure. So saving $20 a month on the server was a big deal for me. And so we would run originally on his server. And I remember at some point, as we launched messaging and saw all this growth, he's like, dude, you gotta get your own servers. And I'm like, no, no, no, I'm fine. I don't want to pay for my own servers. He's like, no, no, no, you gotta get your own servers. You're taking up all this CPU and bandwidth. And I'm like, no, no, no, I'm fine, I'm fine. So eventually he kicked me off his server. Which was great, because we switched from Linux to FreeBSD, which we all loved and we had experience with at Yahoo. And so we were able to actually, for a long time, live off our savings. And since we had all this experience on how to run the company efficiently when it comes to servers and backend and bandwidth and everything, there was not a lot of expense. The expense started when we had to go hire people. And the idea was that, okay, well, we're gonna have to pay for more servers. We're gonna have to pay for bandwidth. We're gonna have to pay for SMS verification, because to sign up on WhatsApp, you have to verify your phone number. And we did a small angel round. I can't even remember, I think it was end of 2009. We did a small angel round, and then we basically kinda kept our company running without losing too much money, because in the early days, iPhone app was actually paid. People had to pay a dollar to download iPhone app, while everything else was free, like Android and Blackberry and Nokia. And so we had people paying for iPhone app, and that kinda went to, it gave us ability to pay for the bill, for electricity, for bandwidth bills, for server bills, and all that stuff. And I think probably around 2011, 2010, 2011, people started knocking on our door. We didn't even went out to look for money, which is a great situation to be in. Cuz if you're gonna go and raise, and you need money, you're probably not gonna get the terms you want, which is, for us, was kinda worked in our favor, because all these VCs started coming to us. And they're like, you guys are doing great, we wanna partner with you, we wanna give you money, and we're like, eh, we don't really need it. Which makes them wanna invest even more. So we kind of did this dance where we were like, no, no, we don't really want your money, come back in a few months. And eventually, after all these conversations, me and Brian sit down and we're like, okay, well, we're just wasting their time and our time. Should we just take funding or should we not? And we decided that we should because it's better to have money in your bank account for your business than not. And that's the words of wisdom that I got from Jeff Ralston, because Jeff was like, if you can have money in your bank account, you should have money in your bank account. Because you never know if you need to buy a building or if you need to buy some office space, because you're starting growing too quickly. And you don't want to negotiate and raise money when it's too late. Like, you want to do it when you don't need money. So, listening to words of wisdom of Jeff Ralston, we were like, okay, let's get some funding and we partnered with Sequoia and we got money from Sequoia. Any other questions? Yeah. Did you sort of walk us through your internal psychology and confidence over the trajectory of the company? Like, at the beginning, did you identify that the market timing was pretty spot on, or were you just sort of following what your users were saying to you? I think until we did messaging, when we're doing that dinky status feature, Obviously, it was rough, because we had no users and nobody uses our product. And so, you're sitting there in your room, building a product and thinking, well, nobody wants it. Why am I doing this? What is the meaning of life? And all that stuff, right? And so, it's tough, right? When you're building a product that people don't really want, you feel rejected. You feel like, why aren't you using it? It's great. I put all my energy in it. So, once we added messaging, it was like 180 degrees difference, right? All of a sudden, everybody wants our product. Everybody thinks it's the coolest thing ever. We get all these letters into our own inboxes. All these emails from people saying, how great your product is. I'm able to keep in touch with my fiance. I got married because of your product. Your product helped me save life, because the hikers were lost, and the hikers were able to use WhatsApp share location to send. It's just night and day, right? When people want your product, and they love your product, the psychology inside a company is just different. People would come into work, and they would be like, we're building the best thing ever. People love the product. This is great. And so, we didn't really have to do a lot of selling, even to the candidates. People who came in to interview with us basically fell into two camps. People who live in a Silicon Valley bubble and never heard of WhatsApp, and they'll be like, why would I want to work for WhatsApp? And people who kind of fell into, well, there is a whole world out there bubble. And they were like, you guys have millions of users. My cousin in Spain, or my friend in Germany was telling me about your product, and everybody uses it. Or people would say, I went to India, or I went to Middle East, and everybody uses your product. It's amazing, how come nobody heard about you? And they're like, well, that's the purpose. And so, basically, we have these two types of people we would interview. And so, obviously, people who had a Silicon Valley bubble didn't even want to come work for us, which is not the end of the world, because there were plenty of people who understood there was a whole big world out there, and they were happy to build product for hundreds of millions of users all over the world. Yeah. You only get a couple questions, so. How was the fundraising experience, and why did you partner with Sequoia? Why did we partner with Sequoia? So, we had a few companies give us term sheets. One of them even gave us a blank term sheet. They're like, fill out the number you want. And we were like, well, if they're that irresponsible with other people's money, maybe we shouldn't do that, shouldn't be partnering with them. Sequoia is just an amazing brand, right? For me, living in Silicon Valley since 1992, and reading articles and seeing news about all these companies that went public, like Netscape, and Cisco, and Google, and knowing that a lot of them were backed by Sequoia, just made it not a very difficult decision to pick Sequoia. I've also really liked people who work there. A lot of it is just personal chemistry. A lot of it is the VC company understanding how much to be hands-on or not. Like, Sequoia was actually really great about, they knew the numbers, they knew we were growing, they didn't meddle, right? They didn't need to come in and say, you guys are doing this wrong or doing that wrong, like, there was no need for that. And I think we had that understanding up front, whereas it kind of made us a promise, we're like, we're here to help you financially. We're not here to help you with management. We're not here to help you write code. We're not here to help you build features. We're here just to help you grow and to help you financially. And if you need any help, outside of that, come knock on our door and we'll try to help. And they were really helpful with stuff when we asked, like recruiting or anything like that, they would sometimes meet with prospective candidates and tell them why they should join WhatsApp. So Sequoia was really great. It was a brand, and I remember, actually, when we had multiple term sheets, me and Brian went to Jeff Ralston's house, and we were talking to him. It was late in the evening. We were trying to just get advice on what should we do, and he kind of looked at all them, and we talked through all the different term sheets. And then he kind of said, once you're a Sequoia company, you're a Sequoia company. It's like that branding is really strong, and it means a lot. I have an important one. Yes, last one. Last one for you. How did you get your first few thousand users back in the days of the status? Well, how did we get our first few thousand users? So there was no apps back then. And iOS, well, it wasn't iOS back then. It was iPhone OS. And the Apple store had this category, what's new? And the trick was to submit a new app every few days, so you would always show up on top of what's new. And you would make a small change to the name. Because I think back in the old days, the name difference triggered you as a new app. So we would basically have status, and then we would say, status for your smartphone, or status for your calls, or status for your iPhone, or updated status. We would basically tweak the name a little bit with every new version we submit, which always kept us almost always at the top of the new category. And since there are no apps, people would go to what's new category all the time to download, to try to download whatever people would build. Because today you have thousands of apps, back in the days you had hundreds. And basically by gaming the system a little bit, we were able to, I think the loophole got closed really quickly. But luckily by that time we already had messaging. Yeah? How do you scout up your company? I mean, how do you scout up WhatsApp into different countries? How do we scale into different countries? Yeah. We didn't have to scale. Well, we did have to do a couple of things, I take it back. So there were two things that we had to do. One, we had to build different platforms. Because there were some countries where iPhones just didn't exist and everybody was using either Nokia or BlackBerry or a combination of two. The second thing that we started doing early on is focusing on localization. Right, so again, this kind of goes back to Silicon Valley bubble, where everybody in Silicon Valley speaks English. Therefore, the rest of the world must speak English. Not quite. So we focused early on localization. We actually hired people internally into the company who were doing two things. They were customer support representatives, so they would help people with problems and write FAQs and help debug issues. But they were also all multilingual. So we would hire somebody who was perfect in Spanish. And we would hire somebody who was perfect in German. And we would hire somebody who was perfect in Portuguese. And we would hire somebody who was perfect in Italian. And we would hire somebody who was perfect in all these languages where our apps were starting to grow so we could build a really good localized experience. So when you download WhatsApp in Brazil, it's not in English, it's in Portuguese. And I think that is what helped us grow in all these countries. Yeah. Your first few employees, I know that they came from your personal network. But how did you convince them to join you? It wasn't hard. Most of them were unemployed. So let me see. So Brian joined. So Brian left Yahoo, and he, I think, didn't really do anything for like, I think he left in 98. So he didn't really do anything for like ten years. He was one of the early Yahoo engineers. So that was one. Chris, my friend who I met from Stanford, I think he was doing this startup that wasn't really going anywhere. And he was in LA. And he got married to this wonderful girl whose parents are actually from here. So I think for her it was an advantage to move here to be closer to her parents. So I'm like, yeah, yeah, you guys should move. You guys should move here. Move back to Northern California. So it's a combination of her wanting to move to be closer to her parents and him not really doing anything, not having a full-time job also contributed. This guy Eugene, who was one of our early hires, he was working at a company. I actually knew him through my social network. We are and still friends. He would always complain how he hated his job and how they were trying to screw him over by promising him stock options and never delivering. It was like, he hated it. So I'm like, well, that's a good opportunity. We had, let's see who else. We hired this guy Michael, who was in New York, wasn't really doing anything also. So he was a referral through a friend of mine from Yahoo. So there was this guy, Michael Radman, who I used to work with at Yahoo, who was working at a startup. And we would keep in touch. And at some point I was complaining to him how hard it is to find good engineers that are smart and capable and can get shit done and don't just sit there and theorize. And he was like, I know a guy. Calls this guy Michael in New York. And so we randomly called this guy Michael in New York. And I'm like, hey, Michael, I got your name from other Michael. Do you want to come and interview? And I figured he would say, no, I'm pretty happy in New York. But he wasn't really doing much. He's like, yeah, okay. So he came in and interviewed. And so we had, let's see, we had one of the guys, one of our engineers was in Russia. This guy Igor. He wasn't really doing much in Russia also. It's not like they have Silicon Valley in Russia. So we were like this band of outcasts in some way. The group of people who weren't really doing much who got together and built the product. But there were also people who were working full time who actually had to try really hard to convince to join. One of the guys, Rick, who helped us a lot with the back end, as we were scaling the back end. He was working at Yahoo. And so I think it took us six months of meetings and dinners with me and Brian trying to convince him. And we would meet him. And we would do it in a very subtle way. Not like, come join us. We're like, we have all these users and we have all this skin. And we knew that he was really, really technical and he loved solving problems. So we weren't saying, come join us and we'll give you lots of money or options or whatever. We were playing a different angle. We were saying, hi, Rick, if you're watching this. We were like, hey, Rick, we're having all these technical problems. And we did. And we were like, we just don't know. There was this weird issue with FreeBSD 8 where it computes for kernel resources with Erlang. And Erlang is trying to run on these 48 cores. And we don't know how there's some contention in the kernel. If only we could figure it out. We just need some help. And we knew that he loved doing this kind of stuff, right? So with him, we played a different angle. It took us a few months to convince him. But eventually he joined and he helped us fix a lot of bottlenecks in our system. So they were all different stories. But I think the bulk of the initial kind of core of people who joined, they were from our professional and personal networks. We are out of time, unfortunately. Man, I think you're going as long as you're going. All right, if you've got. I have time. All right, we'll go do one more question. Thank you. Sure. I think WhatsApp is a role model of being focused. I want to understand your decision making process when you get feedback from users, how you define it as a noise to your product. How you define it as a key feature we need to improve. And how you find out that the efficiency of communicating is a core feature you want to focus on for so many years. How do we know what features to build and what features not to build? And you're absolutely right. Because in the early days, people would write in and say, we want usernames or we want pins. Because people were so conditioned by all these messaging apps that came before us that you need to have a username or pin. So if you were using BBM or if you were using ICQ, you have some random pin that you would have to exchange with people. Or if you were using Skype or Yahoo Messenger, you had to have a username. And people didn't understand that what we were building was this whole new idea of you don't need any of that stuff. You just sign up with your number and it's connected to your phone that has the same phone number and you go. And so in early days, a lot of feedback we took from users was useful. They're like, we want groups, we want multimedia, we want to have additional privacy controls, we want to turn off our last scene, great, we built a lot of what people asked. But we also didn't build what people asked because we didn't think it was the right fit for our product. Having the fundamental belief and the gut feeling that what you're doing is right and having that vision of it's just going to work. I'm going to build it using phone numbers, I'm not going to have usernames, I'm not going to have pins because it makes product more complicated. It makes product harder to use, people forget their usernames and pins and all that stuff. Having that belief in yourself and knowing that what you're building is going to work is obviously also important. So that's kind of how we would make decisions. Okay, you go and then we'll get kicked out for the 1 PM class. Yeah? Yeah, what do you feel about security issue or future security issue of messenger app? What do I feel about security issue, future security issue? For us, well, as you know, we rolled out end-to-end encryption. And we weren't the first ones to do it. Obviously, there were apps before us that focused on security. But we were the first ones to do it on such a global scale for everybody seamlessly, right? I mean, there is no other app today that has more than a billion people that has end-to-end encryption enabled by default into everything you do. Individual chats, group chats, and everything else. So we didn't start out, again, this kind of goes back to what we started with. It was just a pure one-on-one messaging, right? There was no group chats. There was no multimedia. There was no end-to-end encryption. There was no video call-ins. There was no voice call-ins. There was none of that. But over years, we made a commitment to our users that we were going to add all these features and we were going to make them work and make them work really well. And so obviously, we feel strongly that encryption is important. And we feel strongly about end-to-end encryption, which is why we added it. And which is why we have it in our application today. Great, thank you so much. Thank you. Yeah."
  },
  {
    "name_video": "Quantum computing with Chad Rigetti",
    "description_video": "Chad Rigetti, founder of Rigetti Quantum Computing (YC S14), talks about quantum computing and Rigetti's founding story.",
    "related_categories": [
      "Technical"
    ],
    "page_url": "/library/7S-quantum-computing-with-chad-rigetti",
    "youtube_url": "https://youtube.com/watch?v=GzMvG8UO6Eg",
    "mp3_file": "downloaded/Quantum_computing_with_Chad_Rigetti.mp3",
    "mp3_content": "everybody. Our next speaker is Chad Rigetti from Rigetti Quantum Computing. Rigetti Quantum Computing went through YC in the summer of 2014. Um at that point they had nothing. Uh they are now one of the leading quantum computing companies in the world and next year, well I don't know exactly when, they are getting close to a quantum supremacy machine. Uh I have a particular love for the startups where they're trying to do something, it's not clear if it's technically possible, but if they do, uh it changes the world. And it just goes nothing, nothing, nothing, nothing and then everything is different. Uh these companies are super fun to work with, uh and I think they're super fun to work on, which is why I'm so excited Chad's here to tell us about Rigetti and also hard technology startups in general. Um and why it's okay if you don't have a growth graph every week. Uh sometimes you just work and work and everything comes together. Um Chad come out here because I have a question for you. So Chad and I met on the streets uh of San Francisco in uh walking around the financial district in 2014 and Chad had not yet started his company but was thinking about it. And Chad and I have actually never spoken about this again, but I think, I hope you remember this, um I think Chad thought I was really crazy because we got into a long conversation about this simulation hypothesis and if a building a quantum computer was actually bad because it would use a lot of resources uh to emulate and shut down the simulation. Did you think I was really crazy? It was a very interesting conversation. Is that like a really nice, you can say yes. I didn't think you're crazy but I had just moved to San Francisco into Silicon Valley from New York City and that is not a conversation you can have in New York City without people thinking you're crazy. Uh and but I'm an open person and I you know I like to learn so I was very interested in this hypothesis and it was an amazing conversation. It was very fun. Alright well I hope the company works and I hope the simulation is not shut down. Um. Great thank you. That will help. Alright so Chad is going to talk to us about Rigetti. Thank you for coming Chad. Awesome. Thank you so much Sam. Alright I'm incredibly excited to be here today and to talk with you. Um. I'm also incredibly honored. So thank you very much Sam and Kat and YC for having me uh giving me the opportunity to talk with you guys. So this uh as Sam mentioned when we joined Y Combinator in summer 2014 we had nothing. Uh we had not built a single qubit, the fundamental like building block of a quantum computer. We did not know how we were going to build qubits. Uh I knew what they needed to look like and I knew uh what the fundamental requirements were. In fact I'd been working in the field for already about 10 or 12 years in quantum computing. Um and uh this is a 5 qubit quantum computer that we have built at Rigetti Computing. Uh it's less than 2 years later. And uh we're about 35 people in a warehouse in Berkeley. Uh about 20 some PhDs. And we're building quantum computers. And we're in a race uh to define this technology for the next 20, 30, 40 years. And it's incredibly fun. It is the kind of thing that gets you up in the morning and is worth spending your life on. Humans are building, humans have been building tools and technology to store and process information for millennia. Uh I like to think of the sundial as the original computer. It takes an input and it tells, does something useful with it and tells you the time. Uh from the sundial to the abacus uh and then things like the Babbage Difference Engine which you can go see at the Computer History Museum. It's amazing and you should do it. Um to punch cards. Those are all systems based on Newtonian mechanics. And every time our understanding of nature evolves and develops further, we add a deeper level of understanding, our technology progresses as well. So uh many great companies were born of this first transition that I'm talking about on the slide. Uh IBM started as a computing tabulated and recording company. They made punch cards and time clocks. Uh they were kind of born out of this first transition into the microchip era. And uh they you know they blossomed and evolved and survived through this time to grow into a very very large company. Other companies that drove that first transition uh who was it? Fairchild? Intel? And then what's been born in the era of the microchip? Well almost everything we see around us. It's driven the global economy for the past 50 or 60 years. That's incredible. The amount of leverage you can get from a computing technology is massive. And you know what? We've known since 1905 that beneath uh there's Newton's laws on one hand and then beneath that there's kind of Maxwell's equations and we've known since 1905 that there's a more fundamental description of nature. And that's quantum mechanics. Uh at Rigetti Computing we're driving this next transition from microchips to those systems based on individual atoms or artificial atoms that we build in in in the lab. Uh and that that's a very exciting opportunity for for us. So why is it worth doing this? This sounds incredibly hard. Why is it worth uh trying to build quantum computers in the first place? Well the kind of problems that these machines will solve are incredibly impactful. They fall into two broad categories. We think of them in in kind of two broad categories. On the one hand you have a class of applications that we think of as quantum chemistry. So what you're doing in this case is using the quantum mechanical the the quantum computer as a tool to investigate other quantum mechanical systems. It turns out that that's almost everything uh in science, uh medicine, material science. This is stuff that's going to lead to better drugs, uh better materials, better nuclear reactors. Highly impactful technology. Why are we doing this? Because if you can you you build a quantum computer you can do simulation driven design of new catalysts. Catalysts that capture carbon or nitrogen from the atmosphere. It can help solve global warming. This is an incredible incredibly broad technology. Uh the other bucket of applications uh is is machine learning and artificial intelligence. So in this case what you do is learn to embed a learning problem on a classically intractable physical model that you can simulate on a quantum computer. That's a mouthful. What it means is quantum computers are going to lead to fundamentally more powerful forms of artificial intelligence. So when I say more powerful what do I mean? Uh does anyone recognize this? Uh it's on the slide so this is Tianhe 2. Uh this is until about three months ago was the most powerful computer on the planet. It cost about 400 million dollars. It burns about 20 megawatts of electricity. You guys know how much electricity that is? It's enough to it's enough to power about it's enough to power the town I grew up in. About 20,000 households. It's about half the size of a football field. It's based on 3.2 million Intel cores. So there's two problems with this. Ultimately our approach to building large scale computers is starting to break. And there's two problems. The first is that Moore's law is ending. That's been happening for a long time. Lateral transistor scaling the fundamental measure of Moore's law has sort of leveled off for the past eight years. The other thing is something that I hope you've all heard about in your computer science classes called Amdahl's law. Amdahl's law talks about the limiting benefits or the diminishing returns of parallelization. These are massively parallel machines. 3.2 million cores running in parallel. Only problems that can be parallelized run fast on these kinds of machines. Uh there's a fundamentally better way. Now President Obama has shown significant vision in sort of driving a return of American leadership in high performance computing and he has said that America is going to build an exascale computer. Something about 30 times more powerful than Tianhe 2 by 2020. That machine will cost about a billion dollars with current technology and it would require a nuclear power plant to run it. We're going to do it and we need to. But there's another path. Ultimately when you can compute with quantum physics you have a faster and cheaper path to that level of computing power. How is that possible? Well these are two developmental systems in our lab in Berkeley. These are what you see in the big white cans are cooling systems. Every high performance computer has a cooling system. These ones are very powerful. These run at low temperature. Uh inside each of those cooling systems is a single chip. When this picture was taken we had a five qubit processor in that machine. A single chip with about 60 or 70 qubits on it would be more powerful than that entire half a football field sized machine. That's what quantum computing unlocks. Uh so this is a true hard tech startup. And one of the challenges that hard tech companies, I'll talk about this more in a moment, brings is this challenge of operating in an arena that is not well defined, that does not have a well developed supply chain. You know what you want to do but the capabilities to do it do not exist or are not commercially or easily accessible. We've had to develop all of the building blocks, the entire supply chain for this technology. What does that mean for us? We have developed new simulation driven design methods to actually design these quantum chips. Uh we've had to develop our own fab, our own microfabrication capability. Uh we've developed advanced electronics that allow you to control these chips. You can think of a quantum computer something like a nuclear reactor where you have the core, you know where the reactions happening that generates all the power. But then there's this really complex traditional engineering system around it that stabilizes it and extracts the computational capability. And that thing is very expensive and it requires very advanced control electronics. And then ultimately uh we serve access to these machines over the cloud. And so we have to have cloud software and applications. And that's a lot of work. There's a lot of different things you gotta tie together in one organization to do this. Uh this slide is frankly a synthesis of the past 15 years of my life. I've been working on this problem my entire adult life. Uh I was a junior in college in Saskatchewan, Canada. And really? That's amazing. Where are y'all from? Oh wow. Moose Jaw here. Moose Jaw. Um I was I was a junior at the University of Regina in Saskatchewan, Canada. And a physics major. I was incredibly frustrated. I was very very frustrated cuz I didn't understand two basic things that I thought every human on the planet should understand. What's quantum physics? And how do computers actually work? How do they actually store, process, represent information? About the same time I read about a field called quantum computing. I like to synthesize things. I thought this was amazing. There's one field that I can learn instead of having to learn two? This makes life so much easier. I've been working on that ever since. And that was in 2001. Uh I heard about these people at Yale University that had an idea for building quantum computers. Uh you can build these things out of real individual atoms or ions. That's really hard because individual atoms or ions are extremely tiny and very very hard to control. They said why don't we build these things out of special electrical circuits based on superconductors that have no dissipation and build them in such a manner that they mimic real atoms. Build an artificial atom out of an electrical circuit. I was like that that's amazing. That's such a great idea because what's gonna happen is you're gonna be able to leverage all of traditional semiconductor manufacturing capabilities. You're gonna be able to build a scalable tech chip technology someday based on those superconducting qubits. I spent about seven years with those uh with that group at Yale. I was a PhD student, a postdoc. Uh I spent about three years in doing further research at IBM in quantum computing. And in 2013 I started Rigetti Computing to develop quantum integrated circuits. And that's what we've done. So this is the jump on my second slide. This is the leap from Newtonian plus Maxwell's equations to Newtonian plus Maxwell's equations plus Schrodinger's equations quantum physics. And uh ultimately I want to offer you a work working definition. If there's any physics majors in in the audience I want to give you a working definition of a quantum computer. Quantum computers store and process information in individual photons. That's it. Um your iPhone, the iPhone 7, uses about a hundred billion photons per bit processed. It may be as much as 10 to the 17. Uh and a hundred billion photons per bit transmitted. This is far more efficient technology. Okay. So I want to talk for a moment about the distinction between a hard tech company and a tech company. First of all, when I say hard tech I don't mean it's harder. Although it feels harder. What we mean is every company and look at the companies on this slide. These are incredible organizations. Incredible incredible organizations, incredible companies, incredible products, incredible founders. These are all incredibly hard things. There's one distinction. A hard tech company has to deal with in in in addition to all of the tech, execution, market risk, all the standard things, all the gauntlet that you have to steer your organization through to survive. Fundamental questions of possibility. You have to deal with that when you're a hard tech company. That is the that is the signature of a hard tech organization. Now I'm going to tell you there's two things I want you to take away from this. The first is that well with all of that risk we're saying it might not even be possible. Why the hell are you going to do that? Why the hell is anyone going to invest in your company if it might not be possible to even do it? Why is it worth it if you're not sure it's possible? Well there's two things you get from my perspective. The first is if and when you are successful you create monumental leverage and defensibility. I think of the Manhattan Project as a canonical hard tech organization. Look at the fucking leverage they created. That's incredible. The Apollo missions. When President Kennedy said in 1961 as a nation we're going to put an American on the surface of the moon and return him safely to earth by the close of this decade. That was an epochal moment for mankind. That's the kind of story that isn't written in quarterly reports and spreadsheets. That's written in hieroglyphs on cave walls. That's the kind of stuff that stirs the heart. That's what you get when you do a hard tech company. And that is so powerful. Now I want you to notice something on this slide. Look at these amazing companies. At some point the defensibility and leverage that hard tech provides and the incredible passion that you engender by working on problems of that scope and impact leads organizations on the left to pushing into hard tech in order to access those things. Think of Uber moving into self-driving cars. Think of Google with now 100 seedlings hoping to turn something into a long-term defensibility. Microsoft built software and has started working on quantum computing. That's what you get with a hard tech company. Now, there's also significant challenges and I want to talk about three of them for a moment. Team communication and integration. So first of all, building an organization that has world's experts in X, Y, Z, all of the things that you need to master as an organization is incredibly hard. It comes with its own set of challenges. You're going to have to interface to the best scientists and engineers on the planet in those various fields. You're going to hire them. You're going to have to bring them all into one company. And you're going to have to find a way to impedance match them, to allow them to talk to each other under the roof of one organization. And that leads into this integration challenge. Integrating an organization that does all these disparate things. We have people on the team. We have a Rhodes Scholar who's been doing research in quantum computing for 10 years and is 27 years old. We have tenured physics faculty. We have someone teaching a course at Caltech who built the communication systems on the Mars rover missions. We have an incredible organization and one of the problems we've solved is that we have people who can all have a conversation together because they all have developed a shared language. That level of integration becomes a long-term weapon for your organization. Huge amount of value can be created by it. Now, communication. We're not doing this because quantum computing is interesting. We're doing this to cure cancer and to solve global warming. How you talk about what you do as an organization is incredibly impactful. I encourage you to spend a lot of time thinking about it. I did this a few years ago and I decided that our mission as an organization when there were three people in the company was we're on a mission to build the world's most powerful computer. It gives you something to sink your teeth into. It's a little more tangible than photons. We did this exercise again in the past month. With the team fully built out, well, partially built out at this stage. We got to the same thing. It's really amazing. Why are we doing it? We're building the most powerful computers in the world to solve humanity's most important and pressing problems. That's a rallying cry. That can be very impactful for your organization. Now, the other thing you get with integration is the opportunity to create all this defensibility. So the chip, the quantum integrated circuit is one part of it. That gives you an Intel kind of business for the quantum computing era. We're not stopping at that because no one is competing at all these different levels today and we have an opportunity to build moats around the entire thing. The next layer up is to build the system, become master system integration. That's an IBM style business. And then ultimately to own the software and platform, add in the Microsoft style business. Ultimately, I want to go full stack and also include the Google style business of applications and designing new drugs to save people's lives. All right, so before I move on to this, I want y'all to do something for me. I want you to do this one thing for me. I want you to take 10 minutes today. After this, at the break, when you go home today, during your meditation, whatever you want to do, I want you to take 10 minutes and look in your heart and I want you to ask yourself the question, what kind of company do I want to join or found? What kind of organization resonates with me? And when you do that, spend that 10 minutes. When you do that, some small fraction of you, it won't be many, some small fraction of you will say, you know what, I want to do the thing that stirs my heart. I want to do the thing that calls to me, that is worth spending your life on. One last thing. So one of the special challenges that a hard tech organization faces is the capabilities to do what you need to do don't exist. If they existed, it wouldn't be a hard tech organization. So there's this tension that exists in all companies, but is especially accentuated in hard tech. A tension between developing the product, take your product from concept to market, get the product built, ship the product, with the things you need to do to enable that at each successive stage of evolution. Company development, build the capabilities and create organizational clarity. That's your job as a founder and a leader. What should you work on? Well, I found that there's a useful framework. I thought about this problem for a really long time because I was spending every day trying to balance these two competing tensions. Ultimately, these are both processes of pumping entropy out of the system. You have an idea for the product. I know what this quantum computer wants to look like. But it doesn't exist. It doesn't exist yet. There's all these questions we have to answer. Think of when Elon started SpaceX. He had an idea for what this rocket was gonna look like. There's a gazillion micro decisions that have to be made to actually manifest that thing in the real world. That is a process of pumping entropy out of the vision. Same with company development. Creating this organizational clarity, building the capabilities, answering the question, are we gonna do our own fab, or are we gonna outsource fab, or are we gonna partner with IBM to do the fab, or how are we gonna do the fab? We have to answer that question. Ultimately, that is a process of pumping entropy out of the system. There's a lot of things that this leads you to. One is, it tells you who you should hire. Some people create order and clarity in their wake. They create systems. They execute systems. They reinforce systems. They train other people how to use those systems. Other people generate entropy. Know what you're looking for. Hire people who pump entropy out of your vision for your organization. It's incredibly powerful. This is one of my favorite pictures I've ever seen. This is a picture of the Control Data Corporation 6600 machine. What I love about it is, look at how kludgy it is. There's wires hanging out of this thing everywhere. You can see the pumps down in the corner. This machine is widely considered the first supercomputer. The United States blocked the export of one of these things to our allies in France. It was incredibly impactful at a geopolitical level. Who built it? A group of 34 folks in the woods of Wisconsin. 34 people built the world's most powerful computer. I can't even read the memo. It's too powerful. Ultimately, 34 people out-competing a giant behemoth. That is what happens in high-performance computing. That is what happens with a lot of hard-tech organizations. And it's an incredible opportunity for you if this pulls at your heartstrings. Thank you very much."
  },
  {
    "name_video": "Startup legal mechanics ",
    "description_video": "YC's Carolynn Levy, Jon Levy, and Jason Kwon discuss legal mechanics for startups, in addition to common mistakes and problems.",
    "related_categories": [
      "Finance",
      "Fundraising",
      "Legal"
    ],
    "page_url": "/library/7R-startup-legal-mechanics",
    "youtube_url": "https://youtube.com/watch?v=BTShgZxiNV8",
    "mp3_file": "downloaded/Startup_legal_mechanics_.mp3",
    "mp3_content": "I would like to introduce my colleague, Carolyn Levy, to my right here, who's going to talk about startup mechanics, and then with John Levy and Jason Kwan, they'll answer some questions about getting your startup started, legal issues. I will point out that these three folks are probably the finest legal minds in the startup world. And I do not exaggerate, they may hate me saying it, but these folks have seen more, they've worked with more startups in more situations than you could believe. And some of the situations you wouldn't believe. So they know everything. And so I do hope you listen carefully. And I do hope, look, I know you gave everyone homework to watch videos from 2014 and 2017 on startup mechanics. I urge you all to watch those videos, if you haven't already, as an adjunct to what Carolyn and John and Jason are about to say, because you will find them useful as you build your company. So Carolyn? Thank you. Jeff totally exaggerated, but we have seen a lot of stuff. Okay. So like Jeff just mentioned, back in 2014, Kirstie and I did a startup school lecture on legal and accounting mechanics, and we were hoping that most of you would have time to watch that before you came here today. I'm going to blaze through a recap of that and just touch on the key takeaways from that lecture. But I am gonna skip the part about investors and fundraising, because Kirstie's actually gonna do an entirely separate lecture on that stuff later on in the program. Next I'm gonna go through some common mistakes and problems that we see founders make. And finally, Jason and John are gonna come up here, and I wanna thank all of you who sent in email questions to us beforehand, because we're gonna go through some of those on the, some of your legal mechanics questions that you guys already submitted. Okay. So the first thing you have to do when you're starting a startup is actually form your separate legal entity. This is your company. And the act of incorporating is just filing a document called a Certificate of Incorporation, which is really short and simple for startups. And you go and you file it with the Department of Corporations in whatever state you choose to incorporate in. Now, we strongly recommend choosing Delaware, because the process in that state is really, really easy, and the service is really fast and efficient. And that's the primary reason we suggest, but also, as a lot of you probably know, most public companies are Delaware companies, so that saves you a little time if you're gonna go public. And some investors actually will require that you're in Delaware before they'll fund you. So that's another good reason to be in Delaware. Okay. So this has been mentioned a couple times already. We also strongly recommend that you use an online platform specifically geared to startups to incorporate. And there's a lot of these platforms. Some are good. Some are not so good. Clerky and Stripe Atlas have already been mentioned, and those are the two that we think are great. They're YC companies. We have extensive experience with Clerky, and I was really happy to hear that Darby Wong, one of the founders of Clerky, is gonna do an AMA, because he's great. One of the reasons why we think Clerky and Stripe Atlas are so great is because they don't stop after formation. They also have post-incorporation documents, and some of the not-so-good platforms stop after formation, and they don't do post-incorporation. And one of the things that doesn't happen if you don't do post-incorporation is founders don't buy their stock. And when we were commuting down here today, Jason reminded me of a story, a really big company and a really big law firm, and they didn't, the founders never bought their stock, and this wasn't discovered until the Series B financing. So if you think this sounds weird, like, of course founders need to buy stock. This is a mistake that actually happens. Okay. Another step in the incorporation process is forming a board of directors. And for early startups, the members of the board are usually the founders. If you're a solo founder, you can have a board of one. If you are two founders, you can have a board of two. There's a misconception that board of directors have to have an odd number of directors, but that is not necessary. And then you need to appoint corporate officers. You need to have a president and or a CEO. You can have both if you want. And in Delaware, you're required to have a corporate secretary. And another part of the process is adopting corporate bylaws. For startups, bylaws can be extremely generic. And finally, this isn't technically part of the incorporation process, but I encourage you to open a corporate bank account as soon as possible. Most startups won't have very much cash to put in that bank account, but it's great to get into the habit of treating the corporation as a separate entity as early as possible. And it's critical to form good habits around the way you treat your company's money. Okay. So post-incorporation. So now we're going to go back to what I just said about issuing founder stock. You all know that corporations are owned by stockholders, and you and your co-founders are going to be the first stockholders. Okay. If you are a founder team of two or more, you have to think about how you're going to allocate that stock. Our belief about the best way to allocate stock among founders is to think about the challenge of execution, and that's another way of saying the following. Do not place too much importance on the founder that had the idea for the business, because all of the hard work is in front of the team, and all of the value is going to be created in the future. If you are all going to be working hard going forward, which you all are, we think the equity split should be more or less equal among you. If you and your co-founders are having a really hard time coming to a consensus about stock allocation, there may be underlying trust or commitment issues with the team, so you want to pay close attention to that. Okay. Founders need to purchase their shares from the company, and you buy them using a stock purchase agreement. Founders actually have to pay for them, but fortunately the stock of a brand-new company is very cheap. The way most founder stock purchase agreements work is that you give a very, very small amount of cash, and then you contribute to the company any intellectual property that you've created, so that's the total purchase price for your founder shares. Founders' shares should be subject to vesting, and this ties back to the point I just made about all the work being ahead of you. Vesting means that you don't get full ownership of your stock until a certain period of time has passed. During the vesting period, you can vote all of your shares, but if you quit your company before the full period of time has passed, the company will automatically repurchase all of your unvested shares. When shares are subject to vesting, they're called restricted stock, so your founder stock purchase agreement will be actually a restricted stock purchase agreement, and as I'm sure most of you know, the standard or typical vesting period is about four years. So I'm not going to get into cap tables in this lecture, because Kirstie is going to explain them in detail in her lecture about fundraising mechanics, but the basic idea is that every company absolutely needs to keep a cap table. You need to keep a record of every single share of stock that your company issues, and we used to have to do these on these complicated Excel spreadsheets, but fortunately there are now multiple online platforms that will keep track of stock ownership effortlessly, and we'll make sure that those resources are included on one of these, on the forum. Okay. Because founders tend to identify so closely with their startup, it's easy to forget that they actually need to be employees of their company. Let me look at that. So it's pretty self-evident that most founders can't pay themselves in the early days of their startup, because practically, if there's no money, you can't have payroll, but if there is enough money, it's a really good idea for founders to pay themselves minimum wage. Strictly speaking, it's against the law not to pay yourselves, although obviously this isn't a thing that gets enforced. Okay. So employment, whether of founders or others, does not require an employment agreement. Employment agreements are actually, are not actually appropriate for startups, because employment is at will by default, and the basics of hiring and firing are governed by law anyway. In fact, employment agreements can sometimes complicate things, because courts may interpret certain of the language in an employment agreement as changing that default at will status to a for-cause status, which makes it a lot harder to terminate people. So an employee agreement is only necessary if you're hiring an employee who's going to have something special, like a severance package, and we really don't see those in startups. But what is really, really important is that all the founders, and in the future, everyone who works for your company, has signed a CIIA or a PIIA, and I'm sure a lot of you have heard of these. It's a Confidential or Proprietary Information Invention Assignment Agreement. The CIIA protects the company's confidential information and trade secrets and ensures that all the intellectual property that is created is owned by the company. So you want everyone in the company signed up to one of these. Very early stage startups usually cannot afford to have employees, but the solution is not to convince people to work for your company for free. It's one thing for founders to work for free, but it's significantly riskier for non-founders creating work product and other intellectual property to work for no compensation. So unfortunately all of you all have to do all the work until you can afford to hire. So I'm going to wrap up this summary and digress from legal mechanics to make a few common sense points, and my belief, my personal belief, is that ignoring these points can cause you to waste a lot of time fixing problems later. These are really common mistakes. So ideally you will have opened a corporate bank account as part of or right after incorporating the company, and hopefully you have a little bit of money in it. So you should use that for all of your company expenses. If the company bank account has no money in it and you are paying for all the business expenses with your own personal savings, the company can reimburse you later when it eventually has money, but you absolutely need to keep all the receipts and you need to document everything carefully. Corporations have to pay taxes. If your startup is a Delaware corporation, there is an annual tax you have to pay to that state, but if you calculate it correctly, the tax owed is really minor for startups. Corporations also have to pay, they also have to file a corporate tax return with the IRS. Obviously when your company is just getting started, you're not going to actually owe the IRS any taxes, but you still have to file the return. And if your startup does have employees, even if it's just the founders getting minimum wage, you need to pay payroll taxes, and the best way to do this is to get set up with an online payroll service, of which there are many. Oh, this is a personal favorite of mine. So you need to find a good place to store the company's legal documents, like the Certificate of Incorporation, the Bylaws, the CIIAs, the Founders Stock Restrictions Agreements, Founders Stock Purchase Agreements. For example, a shared Dropbox folder is a good idea. Do not store them in a co-founder's email, because you do not want one person to control the access to these very important documents. Also make sure that the legal documents that you are carefully collecting and storing are actually the signed and dated versions, and triple check to make sure that every blank is signed by every party that needs to sign it. Later when your company is fundraising and investors are doing due diligence on your company, it just looks really amateur when you serve up a bunch of formation documents and there's a bunch of blanks in them. All right. So that's the summary of that. Oh, sorry, one more thing. I just wanted to mention what is acting like a real company, and my opinion is that acting, if you treat your startup like a board of directors, governed, tax-paying, founder-employee, confidential information-holding entity, that that's the way to act like a real company, and this is also the only way you're going to get protection from personal liability, which is the whole point of forming a separate legal entity anyway. Okay. Now we're going to move on to common mistakes and problems. Okay. I don't know when to form a corporation. So this isn't actually a problem or a mistake, I just wanted to talk about it here, and it turns out that a lot of you emailed us this question. So the right timing on when to pull the trigger on incorporating is going to actually be different for every startup, but in general, we believe in doing it sooner rather than later. And so my top four reasons about why you want to do this would be, number one, because forming a corporation protects you and your co-founders from personal liability for your company's actions. Number two, the corporation is the correct repository for all of the intellectual property that you and your co-founders are creating. Otherwise, you're all just working on a project, the separate pieces of which are owned by individuals, and to me that's a hackathon, not a corporation. Number three, you can't raise, you all know this, you can't raise real money for your startup without forming a corporation first, because your mom might give you some money for your startup, but no professional investor is going to wire money to your personal bank account. And you need to have a corporation in order to have payroll, and you can't enter into contracts with vendors or consultants or potential customers personally, and if you try to do these things as an individual, it's super messy. I formed an LLC instead of a corporation because I got advice that LLCs are better for taxes. So for our purposes, this is usually a mistake, because even though LLCs are better for optimizing taxes, the vast majority of angels and VC firms will not invest in an LLC. So if you plan to fundraise from people other than a small group of your friends and family, your startup needs to be a corporation. The question that several of you asked in the emails is whether there are other reasons besides fundraising considerations to form a corporation instead of an LLC, and so in other words, if you're not planning to fundraise for a long time after starting your company, does it make sense to start out as an LLC and then switch to a corporation later? And in my opinion, the answer is no, because I don't believe the tax benefits of an LLC are compelling enough to outweigh the inconvenience of converting your LLC into a corporation later. And for those of you who watched the 2014 Startup School Lecture, Kirstie and I told an anecdote about a company that was an LLC, and they had to convert into a Delaware Corp, and it was a $400,000 legal nightmare. It's obviously an outlier. But we do see this a lot at YC. We see a lot of LLC to corporate conversions, and it's just kind of a headache you don't need. Okay, I'm thinking about hiring a lawyer to incorporate my company. So this is usually not a mistake if your startup is really complicated for some reason, or if you've already formed a non-US entity and you now want to come to the United States and raise money. In these cases, you probably do need to get a lawyer, but I'm sure all of you know lawyers are very expensive. So save money and use one of the good online platforms that we just talked about for incorporation. Also realize that lawyers who are free, like family members doing you a favor, may not be actually as good as the online platforms because they don't specialize in corporate transactional work. So your Aunt Sally who does personal injury may mean well, but Clerky and Stripe Atlas will do a much better job. I'm starting a startup, but I still have a full-time job. This has actually already come up today. Common problem for founders because it's a big decision to ditch the security of a salary. I think some of the other speakers in this course will talk about sort of the psychology of taking that plunge. But if you've decided to work on your startup in your spare time, the primary legal consideration is just keeping everything separate. So in California, for example, if you're working on your startup on your own time with your own resources, your current employer should have no claim on your new business idea. So use a different computer, don't work on it during business hours. But keep in mind that different states and even different countries have very different rules about this particular issue, and there's things like non-compete agreements with your employer that may come into play. So if you're gonna do this, you really should do a little bit of research first or get legal help. Our founding team has been working on this idea for years so we don't need vesting on our founder shares. This is a broken record, we hear this all the time. This is a big mistake. If you don't have vesting, you are setting your company up for future problems. No investor wants to put money into a company with founders who may decide the next day that they're burned out so they take their shares and they leave. But the more common scenario is that one member of a founding team decides that he or she is burned out and so leaves the company with a giant ownership stake. The remaining founders have to do all the work but someone who's not doing any work has the same ownership. It is painful to fix this problem because the price of the company's stock may have increased in the interim and it becomes really expensive for the remaining founders to allocate the share ownership fairly. How many of you are single founders? I'm just curious. Quite a few of you, okay. So I'm a single founder and I don't need vesting, you may be thinking. I think this is also a mistake. Single founders obviously don't have the same problems that founder teams do, but no vesting is still unattractive to investors for the same reasons. Also, you will eventually hire employees and probably grant them stock options and those stock options will have vesting and it just is a lot better when you lead by example. All right. Another personal favorite. I signed a legal document but I was too busy to read it so I have no idea what it is. This happens a lot. This is a big mistake. We see founders do this all the time and I mean we sympathize, right? The legal mechanics of your startup are the really boring parts of the process. You can get away with not reading every word of your bylaws, for example, but you need to understand every provision in your founder stock purchase agreement. You actually don't wanna have anything happen with your company stock that you don't know every word of. And this is actually a bigger problem. This isn't such a huge problem with formation documents. It's a big problem with fundraising documents. I can't tell you how many founders have told me they won't read a five page safe. So you wanna get into the habit now of reading all of your company documents. It's daunting, it's legalese, whatever. Read it anyway, understand it. It's a great habit to get into. And then you'll know if it isn't signed. Okay, my friend offered to work for my startup for free so I'm going to pay her with shares. Generally this is a mistake because people who work for your company need to be paid money. Obviously compensation packages can include an equity component but paying with only stock is not a good idea. The exception is if your friend can be hired by your company as a consultant or independent contractor, those are the same thing. And it's okay for consultants to be paid for services with just stock. But you have to first get comfortable that your friend is properly classified as an independent contractor. And the rules in California about this just changed and got stricter. Also you'll wanna make sure you paper this relationship with a good consulting agreement because you really wanna make sure that the company owns all of the consultant's work product. You don't wanna wing it. Okay, this is a big one. My co-founder and I don't want to work together anymore. So this is sometimes a small problem and this is sometimes a fatal problem. Startups die sometimes because of this. And it happens unfortunately a lot. And it can be overwhelmingly acrimonious. It's kind of like watching people get a divorce. So the reason to pay careful attention to the points I've already mentioned, like paying yourselves, having vesting on your founder's shares, having a CIIA that clearly demonstrates that the company owns all the IP that's created. Doing these things can significantly decrease the legal drama around breakups. I don't know what decreases the emotional drama but that decreases the legal drama. My company has some employees and I promise to issue them stock. This isn't a problem as long as you take action on it sooner rather than later. And the appropriate action to take is to adopt a stock incentive plan and to grant stock to these early employees. A stock plan, as some of you probably know, is like a 15 to 20 page document. It references a specific number of shares of your company's common stock that are allocated to the plan. The company can issue restricted stock or stock options pursuant to the plan. But what you need to know about stock options is that if you grant stock options you have to get something called a 409A valuation. And most startups don't want to do this until after they've had a fundraising event. So you can issue restricted stock to employees under this plan and they will also have vesting. And they come with a whole host of tax and securities rules which is why the plan needs to be 20 plus pages long. But the reason to not wait too long to do this is because the longer you wait the more expensive your stock will get. And so you want to give your employees cheap stock or as cheap as you can because expensive stock is not very incentivizing. I got a cease and desist letter. Another company says my company is infringing on its trademark. This is a problem an early stage startup really doesn't need but we actually see it happen fairly often. Founders get very attached to names and once this happens it's really tough to let go. But your company is probably too young to have created much value in the name you picked. And the expense and distraction of getting into a trademark dispute with a more established better funded company can be substantial. So your best course of action is let it go. Let the name go. Pick a new name and get back to work. Related to this a few of you emailed the question about whether or not it's worth it to register your company's name and get the official trademark. Generally we consider trademark registration to be something that can wait. It's a nice to have and not a need to have in the early days of your startup. All right finally. I picked an awesome name for my company but I have to pay 10K to get the domain. This happens a lot. So again don't fall in love with a name that may cause you to make bad decisions no matter how great that name is. It is a bad decision to waste time getting into a lawsuit with a company that claims you stole its trademark and it is usually also a bad decision to spend a ton of money on a domain. So do your research on names. Don't just research the PTO. Research it and then do whatever is cheapest and most efficient and move on. Okay that's it. So now we're gonna have John and Jason come up and we, okay so what we did is we took, you guys emailed us a bunch of questions and we pulled some out. We edited them a little bit for brevity but we mostly kept them sort of unfiltered original style so we're gonna go through a bunch of those now. Okay Jason I'm gonna ask you the first question when you're ready. Go ahead. Okay. When does the 30 day IRS clock for filing an 83B election start and you might wanna just start by describing what an 83B election form is in case somebody here doesn't know. Yeah so an 83B election is a tax election so when you buy stock, if you don't make an election what happens is you're taxed on the stock as it vests so each vesting period, whichever the amount of stock that vests, whatever the value of the stock is at that time you incur an income tax for that. But an 83B election allows you to be taxed on the difference between the value of the stock and the price that you pay for the stock on the day that you actually buy the stock so it's actually by default in most cases the best thing to do when you are a startup founder is to actually make the election so that because you're gonna be paying a very nominal price for your founder stock and so there's gonna be no income taxes because you're gonna be, if you make the election because you're gonna be paying the same amount so you'll pay like a dollar for your stock and then basically say that the stock is worth a dollar and then you make the 83B election and then there are no more taxes that are gonna accrue on your vesting as the stock grows in value. So if you don't do that, which does happen from time to time, you can be faced with a very large tax liability if your company ends up becoming very, very valuable as your stock vests and the time period from when the 83B election, the 30 day period that you have to make the filing, it starts from the day that you actually buy the stock. So that is a hard deadline, it includes calendar days, it's not a business day period and if you miss it, there's really not much you can do about it. There are some sort of things that you can do to mitigate the tax liability when if you work with tax lawyers but if you miss it, it can be pretty bad. So that's one thing to definitely remember. Okay, and I will add that this is a good reason to pay really careful attention to the date on your restricted stock purchase agreement and it should be the same date that you write the check for the $1. You just pay attention to that. Like you want that all happening on the same time so you're not really worried about like, oh my gosh, what's my actual start date? And the other thing I'll say about that is 83B election forms need to be saved by the company as well. So the individual founder is gonna save that election form for their own tax returns and their own files but the company needs to keep a copy too. You put that in your shared Dropbox, you make sure it's signed, you make sure it's dated and you save it in that safe place and the company has it forever. That's really important. It's one of the few things that can't be fixed. That's also an important. Well yeah, I mean Jason was just saying like there are some fixes sometimes but they're painful and really expensive. And people look at it in diligence. It's actually one of the few things to remember. If you remember nothing else from this, file your 83B election forms. Okay, so we also got a lot of questions that touched on a variety of immigration issues. So and here's a sample question we got. I'm in Canada, can you help me get a TN visa so I can work on my startup in the US? John, why don't you take a crack at that? This is a difficult, Jeff said we know everything but immigration's not something that we're experts on and this is a situation where you need to speak to an expert. Especially if you have situations where you're going to be, you need to be employed as Carolyn was saying earlier by your company and if you can't work in the US, you can't be employed because it's illegal then you're better off speaking to an expert. Now immigration's particularly tricky. It's a political issue obviously now so the landscape's always changing but it's also, it's more of an art than a science. So it's always been very difficult for us jumping in, knowing the basics to talk about immigration. We're really not experts in this area and you definitely need to speak to an expert. Yeah, okay. Jason, should I be a C-Corp or an S-Corp? C-Corp, so if you just file in Delaware you're kind of C-Corp by default. In order to actually be an S-Corp you have to make an election on a tax form and the difference between the two of the C-Corp or S-Corp is S-Corp is pass-through taxation so it's tax transparent. So any income earned by the corporation is then passed through to its owners. A C-Corp cuts off the income at the level of the corporation and the corporation pays taxes. And so the reason why you wanna be a C-Corp is that's the kind of entity that investors are used to investing in. And also when you actually take investment from outside investors it will blow the S-Corp election most of the time anyway. Okay. John, how much equity should we save for our first employees or key hires during the incorporation of the company? That depends on the size of the company and how many people you need to hire. I would say the standards are probably 10 to 20% people think is going to be saved for employees but it's definitely specific to the company. So I would, this is a situation where it's very easy for me to say, hey you should be very generous with your employees and have alignment and make sure they're benefiting from the upside in the company. It is something I believe very strongly and especially if you have good employees. You wanna keep them, you want them aligned with your mission. So it's worth thinking about this in a long-term view, having a long-term view and setting up everyone for success. The online platforms, Clerky and Stripe Alice, well I know Clerky for sure, you can actually create a stock option pool at formation if you want to. So if you've already thought that far ahead and you know you wanna have a plan set up, you can do that at formation. I would say though the vast majority of companies actually wait and don't adopt a stock option plan until they're a little farther along. Jason, is it illegal to have unpaid interns? Generally yes. So you just went over this in the fundamentals. So you wanna avoid unpaid employees. Interns are gonna be generally considered employees. And then there are some exceptions you can use or take advantage of for giving people sort of college credit if they're college interns or things like that. But that's gonna take some work on your part to actually learn those rules and you're probably gonna need to talk to a lawyer for those things. And if you want to get the help of people and just pay them in the form of equity, again that was already covered by Carolyn's presentation. They could be contractors but there are standards for when somebody is classified as a contractor versus an employee and those standards got just recently more, are harder to satisfy given some of the California Supreme Court rulings. We had a YC company once that had 14 interns. 14 unpaid interns, that was a big mess. Okay. John, there's a ton of advice out there for how to properly structure for a non-profit, for a for-profit startup. What about non-profits? What's the best legal practices for starting a non-profit startup? I'm getting all the questions that I can't answer. That seems fair. Non-profits are also completely different. It's a different animal. It's different from for-profits. I mean the government doesn't favor non-profits because the government likes to get taxes. Non-profits are tax-free. So if you think about it, the government's going to make it difficult to become a non-profit. You have to go through all these steps and fill out forms. It takes like nine months. I'm not an expert on it. YC's not an expert on it. We do donate to non-profits. We accept non-profits in our program. That said, it's always been, you have to have a public good. Your company has to be set up for the public good. There are certain disclosures you need to make. You have to disclose the top five salaries in the non-profit. And I'm certainly not an expert in this area, so I don't want to touch on it anymore. But it's a completely different animal. You're out there soliciting donations from foundations rather than raising money from VCs. So it is a totally different beast. Jason, can I invite a stranger to be a partner? So that question probably answers itself. Generally, you want to work with people that you can trust and know. And so before you bring on somebody as a partner or co-founder, you kind of want to understand how well you're gonna work together, whether you can actually build something together, whether you're gonna actually get along. So I think the answer to that is not, if you really want to make sure that you're gonna be successful. And even if the person who asked this question meant partner-like advisor, or some other, not like a co-founder, but they meant something else, I would say don't ever work with a stranger, right? And this goes back to what I was saying about founder breakups. I mean, that's a recipe for disaster to work with someone you've only just met. Because we've seen brothers break up. Like the founder breakup goes through all levels of relationships. So you're gonna stack the deck against. yourself if you have a stranger involved. John, what are key factors to consider while determining what country should one register their parent company in? The quick answer is where's your market, where's your business, who are you, most people set up in the U.S. because they're attacking the U.S. market, which is a big market. If you're selling something in India, you should be in India, most likely. The problem with this question, like the parent subsidiary question to me, I always think, like when I'm talking to startups, keep it simple, like get, you know, this lecture seems a little dry, and it's a little, you know, it's the legal mechanics, not the most exciting thing, but it's really pretty simple if you think about it. It's like, hey, you know, form your corporation, keep it, be serious, keep your documents, like don't have one person squirrel it away, buy your stock from the company, never forget your 83B, that's the one thing I wanna drill home, you know, after you buy your stock, you file your 83B, that's about it, like there's not that much to do as long as you're serious. With parent subsidiaries, complexity, when I hear that from companies early on, I just wanna run. You're gonna make it extra hard on yourself with that kind of stuff. Jason, with the explosion of legal services tech, it's possible I may not need traditional counsel until a sophisticated angel or institutional round. When do you advise your companies to stop using these services and migrate to a traditional law firm? How would you distribute the work between the two? Yeah, so there are a lot of good tools out there right now. So you could use Clerky, you could use Stripe Atlas, you can get pretty far with them, and, you know, I think when you get to the point where you're raising significant amounts of capital, you definitely should get a lawyer, because a lot of the agreements are gonna be custom and bespoke, or there's gonna be some negotiation. When you're just incorporating and setting up, those services will take care of it. You could probably go without counsel. You could certainly get counsel if you want, especially if you wanna do something a little bit more custom. When you get to the point where you're issuing stock to employees, you probably do wanna get somebody involved just because there are some things that can go wrong if you don't do things perfectly. And you also don't want to be careless about having written promises for stock with various people. So sometimes outside counsel there can be very helpful in making sure you're not out over your skis when you're talking about things like that with people. So John, this question is kind of similar to the one I just asked you, so it's probably the same answer, but you can reiterate. From a legal perspective, can I form a startup and then sell it while having a full-time job? If so, what things should I consider? I also think Jeff touched on this earlier, but this is kind of asking the impossible. There's no way, or I've never seen any company started part-time on weekends, holidays, become like a giant company. Maybe you can do that on a small scale, but we're asking you to start a company out of thin air and that is very difficult to grow a giant. This is an all-consuming, full-time thing. It's not like, oh, I'm gonna do this as a hobby. So I don't want to sound dismissive, but I just think that's practically impossible. I wouldn't even think that way. This isn't a part-time gig. Jason, are patents ever worth applying for? So this is sort of like, you could talk a very long time about patents and whether it's useful or worthwhile applying for them. The short answer is, so patents are useful for protecting your technology, especially from competitions and copying your technology. Your technology matters. If you're pursuing a software startup or tech-enabled internet company, patents tend to matter less. There's less protection under patent law for software or patents anyway, and most of your success is gonna be determined not by their protectability of your property under law, but rather your execution under the software. If you're pursuing a life sciences startup, their duplication is actually easier for competitors to execute on. So patents tend to be more important. And if you have questions about the specific things that you're doing technology-wise and whether it falls into the weak patent or strong patent protection bucket, you should definitely consult with a patent expert or a lawyer on that. But the last part of this is that no company has sort of raised money purely on the strength of their patent portfolio. It's always gonna come down to how good is the founding team? Can they execute on their vision? The patents are just one part of the puzzle. John, I'm thinking about setting up an advisory board and wonder if advisors should have equity. In my experience, advisory boards are more a non-US thing, like non-Silicon Valley thing. Maybe in Silicon Valley we see advisory boards for life sciences companies. You would see academics and professors try to legitimize the company as advisors and get a little stock. But this is not something where, it's not something where you give stock to people without thought. It's more, I think the best quote on advisors somebody said was like, advisors are investors who want stock for free. And that's kind of how I think about it. People should invest, ideally, instead of advising for free shares. And I know this isn't a one size fits all. Some situations, like I was saying, it's appropriate, maybe a life sciences company. And you can have consultants who get stock, but it's mostly a situation I try to avoid. Jason, what have you seen founders do when they had to cut off and fire a co-founder who was a personal friend? So has anybody here ever had a roommate who's been a friend? It's kind of like that, right? So sometimes it's better to not do certain things with your friend so that you can stay friends. And so if you have started a company with a friend of yours and it's not working out, and it's oftentimes because you guys have different ideas about the direction the company should go in, or somebody's working just a lot harder than the other person is, it's usually better to just solve that problem, or basically resolve that problem as soon as possible, rather than letting it be something that you think or hope will work out over time and letting it fester. Because not only does it hurt the company, it hurts the friendship too. So it's generally better to kind of get to a quick resolution. Yeah, you don't want to stall on that. That's something I would add. The biggest mistake we see is people delaying and thinking, oh, things are gonna work out, and this is a friend, and things are gonna change. It's usually best that you just end the relationship if it's not working. And the startup relationship. The startup relationship, thank you. But hopefully preserve the friendship. Preserve the friendship, exactly. Okay, John, what is the best methodology for reviewing potential loopholes in your privacy policies in terms of service? This is an area where if you're going to spend money early on on a lawyer and you have something that's tricky, that's a sensitive startup topic, it's worth spending money on a lawyer. But there are excellent services for privacy policies in terms of service on the internet right now. IU Benda's one, and all the major law firms also have privacy policy generators. But if there's something specific, IU Benda, I'll send out on the resources tab. It's definitely important. It's required if you're taking somebody's information. You have to have a privacy policy up on your website or your app in California. So this is something you need to do. There are good services in certain circumstances you're gonna need to hire a lawyer in this situation. So as many of you probably know, if you are collecting personally identifiable information from anyone in the EU, you're governed by the GDPR, and that's a huge quagmire. And so if you fall into that bucket, even though some of these privacy policy generators are fantastic, they're not gonna get, they're probably, I mean, unless someone's really done a great one, they're probably not gonna cover all the stuff you need to know for GDPR. So you would probably wanna get a lawyer for that. Let's see. Jason, should we work 18 hours a day as a co-founder and founder of our startup? How can we measure and manage our commitment status for our product? So the advice we give all of our startups is to still exercise, sleep, and have some semblance of a life in terms of maintaining some of your relationships and friendships. So 18 hours a day is not something that we would recommend, really, except for maybe short sprints where you need to get something out. And just remember that this is just gonna be a multi-year journey where you're building a company. So to use a tired cliche, it's a marathon, not a sprint. You don't wanna get sick. Okay, John, should we have a shareholder agreement and what should be included in a good shareholder agreement? Shareholder agreements are really a non-US type of document. It's a document that describes in detail what happens when there's departures, severance, founder breakups, or all different types of situations. And often they can be very detailed. The ones I've seen, Canadian companies have come in with them. It's really a foreign thing, not so much a US. Goes back to what we were saying, or what I was saying earlier, you wanna keep things simple. There's no reason to have this giant prenup in a situation for a startup. I mean, chances are if things go wrong with a startup, there are no assets to divide anyway. It's not like a marriage, using the prenup analogy. Except when you break up. Except when you break up in a marriage, there are assets, hopefully. There's a house, couch, television, whatever. You need a prenup sometimes. For startups, these detailed documents that I get from the Netherlands about what happens when a company breaks up with no assets seem just like a waste of time to me. Overkill. To clarify for some people, so I think the person who asked this question was talking about the shareholder agreements that John was talking about, which is among founders. When you sell preferred stock to investors in like a series A financing, there are shareholder agreements, and they do govern a lot of the things that he just talked about, but that's between the company and the investors. So that is different, and that is, of course, a very US thing. So yeah, so just to make sure people weren't confused about that. Okay, our last question for Jason. Many companies have information about their rounds, like price per share or amount raised, displayed on PitchBook, CrunchBase, and other sites. Given that this seems to be due to company charters and filings being publicly available, is there any way to prevent outsiders from seeing this detail about your company? So the technical answer is yeah, there are methods you could use to actually conceal some of the information that the charters, the charters are publicly filed, documented, people can pay $100 or whatever to pull down the charter from Delaware and look at some of the details of your company. So that's sort of like the literal answer, but I think the larger answer is just, it's not something that I would worry about really, because it's sort of way down on the list of priorities in terms of what you need to sort of think about and plan for. And look, there are plenty of companies that have this information listed on PitchBook. They're doing fine, and plenty of others are not doing fine, because, and it's not because they're on PitchBook or not on PitchBook, it's because of other things. So it's just, I wouldn't spend a whole lot of time thinking about this. So Jeff and Adora, I don't know how we're doing on time and whether or not you want to do any, their Q&A. So, are there any questions? Shockingly, there are. Why don't we take just a few questions and then we'll call it a day. Okay, all right, yes. Can you talk about B Corps? That goes back, I'm not an expert on non-profits. I don't think, oh, thank you. She's asking about B Corps, which is a quasi-non-profit and for-profit corporation, social enterprise where part of your mission is for the public good. That's not something I'm an expert in, unfortunately. Many companies have been doing it recently. It's much more prevalent. I'm not really qualified to speak on it. It changes the fiduciary duties, right? So the whole goal of, I mean, the goal of your average corporation is you make money for the stockholders, right? B Corp is more like there's a social good, so the fiduciary duties on the part of the management and the directors are different. And like John said, they're gaining in popularity, so I think we're gonna see a lot more of them. Yeah, it's not really YC's thing, so we don't, I would hesitate to give you any advice about them, but I know there's actually a couple good books about them. I have one of them, I just haven't read it. But there's a lot of information out there about them. You know, if not for YC's, maybe, but it's- Could be fun. Yeah, it could be fun. We haven't done a lot of them, so we don't really have any data about what that looks like long-term. One point about a B Corporation is, as you can imagine, it might not be as attractive to your typical venture investor. So it depends on what the goal is for the company. If you're looking to create a startup, which is high growth, fast growth, you won't generally see a B Corp, and most investors probably look at that somewhat askance. I will say, we do have one recently that converted into a B Corp that had been around for like five or six years, so that's something you could consider. A consideration is, if you want to be a B Corp, do that before you raise money, so that your position is geared down, because a conversion later might be harder. Yeah, I mean, it can be done. I just don't know the wisdom of it. Way back here. I have a question. I have a SaaS company, and I'm registered in Australia, and I'm just wondering, should I register a company in the U.S. as well, if I want to target the U.S. market? I do charge U.S. dollars, but I'm not a corporate company in the U.S., and would it be beneficial to register a company in the U.S.? Because it's similar to the question you asked before. Yes, it is similar. The question is, I believe you have a SaaS company in Australia, and you're attacking the U.S. market, but you're also in Australia, you're not sure where to incorporate. Again, the key is, where are your customers? It sounds like you're thinking about the U.S., you're not 100% sure, and I would just figure out really where you want to be. Most, from a practical standpoint, again, setting up complex structures is really what the question that we were talking about earlier, and I have a little aversion to that. It could be a good situation where it makes sense to have a parent subsidiary structure for you, but it's a little more complicated. And... State corporations in the U.S. can gain a lot from the U.S. market. You can incorporate in the U.S., and then have your Australian company be a sub. But again, you could just incorporate in the U.S. and just sell into Australia. You could just not, I mean, if that's your market and that's where you want to raise money, just incorporate and be a U.S. company. We always suggest U.S. companies. It's much easier to fundraise in the U.S., in much more favorable terms, in my opinion. So I always tend to push people to be in the U.S., it's just better for the business long-term. Just one issue at a time. Just two more questions. Two more questions. Okay, how about you, Becca? I have a question about the business schedule that you talked about earlier. If you add co-founders, it's a year after you start a company. Do you have to restart the business schedule for all the shareholders, for all the founders? Or, in the same question, every single time you raise money, do you have to restart a company? Okay, so his question was, when you add new co-founders, like later on, maybe a year or so later, do you have to restart all the original founders' vesting schedule to match the new? And the answer is no, you do not. So you put you and your original team of co-founders, let's say you put four-year vesting on your founder stock, and then a year later, you find a fourth co-founder. you think is great. And by the way, be a little bit circumspect about throwing the word co-founder around. Like sometimes that person who comes a year later is just a key hire and not a founder. There's a lot of emotional attachment to the word founder in the Silicon Valley. We all know why. But like not everyone's a co-founder. Anyway, but to answer your question, no, you guys will stay on the same vesting schedule. The new person who came a year later will start four years on the day that he or she started at your company. Now the thing that some of you probably already know is that when your investors come in, they may decide they want to restart you all. They would, I mean, unless you had absolutely zero leverage, they're not gonna start you back on square one. But sometimes investors look at your schedule and they say, ah, you guys only have about a year left. That's not really enough for us. Can we put on another year? So that happens every now and then. And again, it depends a lot on leverage. But don't be surprised if that happens. Did that answer your question? Okay. Okay, I think we, one more. One more. Someone else can answer. Someone else can answer. So you talked about having very simple structure. We have employers outside the U.S. And how do we pay those employers? How do we have them in the U.S. entity if we don't want to register an entity in the foreign country? So the question was, how do you hire outside the U.S. when you have a U.S. entity? And how do we show them? Is it a contractor? Are they employing? We want to give them staffs. We want to have them outside. They're not a U.S. employee. They're not U.S. law firm. Yeah, so the short but unsatisfying answer is gonna be that it depends on which country. Because each country has different sort of rules for who counts as an employee and who counts as a contractor and what you have to do in order to actually satisfy those rules. And then also, when you actually open up a significant presence in any sort of foreign country, what you oftentimes have to do is create a local entity. And sometimes that can be a subsidiary. And sometimes it can actually just be something more simple like a local branch. And again, your menu of options sort of depends on which country you're going into. So, I don't know, do you have like a country specifically? Yeah, India. So India, typically what happens is there's a subsidiary that's created. It's usually owned 99% by the American parent, the Delaware parent, and 1% or some other small percentage by one or two local Indian sort of representatives. And then that subsidiary is the one that then hires employees in India. Is it important at an early stage or can we somehow hack it in the early? So, I think if you want to try and avoid that kind of structure, I'm not an expert on Indian law. You probably need to talk to somebody who actually has a license in India to actually advise on the employment issue because just like in the United States, various countries have stronger or weaker protections for when you can classify somebody as an employee or not. Okay. Thank you guys very much. So, sorry to have to cut off. I know there's a lot more questions live here. Remember, Darby Wong from Clerky is having an AMA now, tomorrow, but it's open now, you can post questions. So, if you have questions, that is an outlet and you can always work with your group to ask more questions. Just one more word on the part-time question, which has come up a few times and we discussed a little bit at the break. The way I look at that, it is certainly true that some companies are kicked off while people are working in a full-time job, but those aren't really companies yet. They're just projects, they're just ideas. Once you really start your company and all of the great companies have this feature, you'll be on it full-time. You'll be on it more than full-time. You'll be on it 120%. So, thank you all for coming in person and thank you for watching online. Just a couple reminders. There will be a conversation with the founder of Y Combinator, Paul Graham, on Friday, as well as the AMA tomorrow with Darby. Next week, we're gonna dive into product with the CEO of YC, Michael Seibel, and David Rusenko from Weebly on building product and product market fit. There are also several great videos in the Startup Library on product that I very much encourage you guys to take a look at. And lastly, log in to the site, many of you already have. Post on the forum, post in your group, and figure out how it works. Hopefully, it'll be a good home for all of you, and if you have any issues, send an email to ycombinator at startupschool.org, and everyone have a great day. Thanks. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "Building an engineering team",
    "description_video": "YC Partner and Co-founder of Triplebyte (YC S15) Harj Taggar, along with Co-founder Ammon Bartram, discuss a topic startups often struggle with most: finding and hiring the key engineers who will build your product.  This was a talk for YC's Startup School in 2018.",
    "related_categories": [
      "Co-Founders",
      "Management ",
      "Becoming a Founder",
      "Non-Technical Founders",
      "Founder Psychology",
      "People",
      "Hiring"
    ],
    "page_url": "/library/7N-building-an-engineering-team",
    "youtube_url": "https://youtube.com/watch?v=AZidfpz9KfY",
    "mp3_file": "downloaded/Building_an_engineering_team.mp3",
    "mp3_content": "As the slides are loading, there is no topic that should occupy your minds more as you build your company than bringing on the team that's going to make your company successful as you move forward. Harsh and Aman from Triple Byte, YC alumnus, are going to talk about building, in today's day and age, perhaps the key portion of that team, the engineering team. So please welcome Harsh, you're starting, yeah, Harsh. All right. Thanks for having us, everyone. So I'm Harsh. I'm one of the cofounders of Triple Byte, along with Aman. Previously, I used to be a partner at Y Combinator, and part of the inspiration of starting Triple Byte was noticing how after graduating Y Combinator and raising the first investment round, everyone's number one problem was hiring and specifically hiring engineers, because it's the hardest hiring challenge. So through working on Triple Byte, which is a hiring marketplace that's used by engineers to find new places to work, Aman and I have gathered lots of data on what works well when it comes to hiring engineers. I've personally focused a lot on spending time with companies, helping them think through their strategies for finding engineers and obviously getting the most out of Triple Byte. And Aman spent a lot of time thinking through the details of how do you evaluate an engineer, how do you evaluate their engineering skill, and answer the question of are they a good engineer or not. So we're going to share that and sort of have a divide and conquer strategy going on here. The four main topics we're going to cover are where to look for engineers, and when you should start thinking about using recruiters, and that's what I'm going to start with. Then we'll talk about evaluating technical skills, which Aman's going to cover. And then I'll finish up by talking through the process of making offers and closing, which is getting people to actually join your team. But before we start on any of that, I want to just issue a warning and make sure you're well prepared for the fact that hiring really well and truly sucks. It's an incredibly painful process, because for many reasons, which I'll describe in detail, the first is it takes a lot of time. It takes a lot of time just to convince someone good to even have a conversation with you. And as a founder, as you know, time is a very scarce resource. There's bugs to fix, there's sales, customers to close, various things going on. And hiring will never feel like it's your top, most urgent priority, and it's very easy to procrastinate and push it back. But if you do that for too long, you won't scale and you won't grow your startup, and someone else will come along, do that, and take the market. Two, hiring involves a lot of repetitive work. So actually, as Tyler was giving his presentation, I was talking to Jeff about this back there, there's a lot of similarities between sales and hiring. And actually, there's a lot of similarities between sales and hiring and fundraising, and by lots of things that you do as a startup founder, a large part of it is effectively selling all of the time. And selling, as Tyler pointed out, involves a lot of repetitive work. So hiring will involve lots of messaging, it will involve taking lots of coffee meetings, lots of phone calls, lots of interviews, and most of those will result in the dead end and be a complete waste of your time. But you have to keep going. And finally, you will get your heart broken. You will inevitably end up getting rejected by people who you really wanted to hire, who would have been the perfect fit to help you hit your growth goals. But it turns out they were never really that serious about leaving their comfortable job at a big company to join your exciting but risky startup. So be prepared for all of this. And as you're thinking through building a hiring process, I encourage you to think about this as a funnel that you're creating that has three parts to it. The top of the funnel is sourcing, and that's finding people who could be a good fit. The second is screening, that's answering the question of, do you want to hire this person or not? And the final part of the funnel is closing, making the offer and getting the offer accepted. I'm going to start by talking through some strategies for building the top of your hiring funnel. These are the five places I'd recommend that you look for making engineering hiring, for making engineer hires. I'll talk through the pros and cons of each of these. They are personal networks, hiring marketplaces, LinkedIn, GitHub, job boards, and meetups. I'll talk about how you can get the most out of each of these. And this list is ranked or it's sorted in order of where I think you should start out focusing most of your attention and energy down to where you should focus the least. So we start with personal networks. In my opinion, personal networks are the best place to hire, especially when you're early and making your first few hires by far. And the reason is anytime you're deciding if you want to hire someone, you're essentially asking yourself two questions. One, does this person have the skills that you need for them to do the job? And two, can you personally work effectively with this person? When you're a big company, you can mostly focus on answering just the first question because you're large enough, there's enough people, there's enough teams that it's likely that one team somewhere will be able to work effectively with anyone. But when you're small, that's not true. Whether you can work effectively with someone or not is a big determinant of your success. And if you hire the wrong person early on, that could literally be fatal. So when you hire someone that you've worked with previously, or you hire someone that's worked with a person you trust, you de-risk the chances that you won't be able to work well together, which is a big thing to consider early on. So that probably sounds like somewhat obvious advice. And yet, I'm surprised by how often founders still don't really use their personal networks effectively when they're hiring. And I think there's two reasons for this. The first is they don't use a process to exhaustively search through everyone they could potentially hire. And the second is they don't actually make the ask. That usually comes down to being afraid of being rejected by your friends. It's somewhat easier, actually, to be rejected by a complete stranger than it is to ask your best friend to come join you, and they say, eh, I'm not sure the idea is that great. You can also worry about what happens to the friendship if the startup doesn't work out. There's more that goes into it when you're talking to someone you know personally than when you're talking to someone you don't. But the truth is, you just have to suck it up and do it. But if you want your startup to be successful, hiring from people you know is a tremendously valuable resource, and you just have to make that ask. So I'd recommend you follow a strict process here, and start with just making a list of every good engineer you know, whether you think they're available or not. That's actually completely irrelevant. It doesn't matter if they just sold their company for a billion dollars. Put them on the list. Then ping each and every one person on that list to meet up and commit to asking them if they would join you. However crazy you think it is, however unlikely, commit to making the ask. If they say no, or they're hesitant, de-risk it a little bit and say, will you at least come by the office and see what we're working on? If the office is your apartment, that's totally fine too. But just keep pushing until you've at least shown them something that you've done. Keep working on convincing them. If it doesn't work out, if they say no, and you get a definitive no, then ask them if they were in your position, who would they try and hire? Take a list and go out and repeat this exact same process with them. And this process just never ends. I know public company startup founders, well not startups, but public company founders who still do this on a daily basis. This is just a key thing you have to embed in yourself as a startup founder. As your company does scale and grow and you start putting the team together, you want to start tapping into the personal networks of your team. The way I'd recommend doing this is team events where people brainstorm potential hires. This is commonly referred to as a sourcing party. The way I'd recommend going about this is get everyone together, send out a shared spreadsheet and describe the role that you're hiring for. So if it's an engineering role, describe in detail who you're looking for, who are examples, candidates, what are skills and qualities you'd be excited about. And then literally have everyone spend 30 to 45 minutes going through their LinkedIn or their Facebook or whatever, right there and then, thinking of everyone that could be a fit and putting them into the spreadsheet. Once that's done, at TripleBind, I'll actually then personally follow up with anyone on that list who seems like a good candidate or not. And we've made several really great hires doing this. It works really, really well. And you can kind of make it like a fun thing too, right? So we'll do it at the end of the week, just before our Friday, all hands, food and drink. And you can also offer referral bonuses to your team to incentivize them to do this. So really make sure that you're sticking to an exhaustive process, you're making the ask of people you know, and then as you scale, tap into the personal networks of your team. Once you're sure that you've exhausted your personal network for leads, the next place I'd start looking would be hiring marketplaces. Hiring marketplaces are actually relatively new. They've become more popular over the last few years as it's become harder to hire engineers by using traditional methods like reaching out on LinkedIn or GitHub. And I'm going to talk more about that next. The way I think about hiring marketplaces is they actually work a lot like dating sites. The idea is there's engineers who create profiles, companies that create profiles, and both are advertising their best selves. You message each other and you figure out if it's worth meeting up in person. And if it all works out, you make a hire. The dynamics of the marketplaces, though, is such that the demand for good engineering talent far exceeds the supply. And so typically, it's the companies that are being a lot more proactive in terms of reaching out first to the candidates. The candidates are getting multiple inquiries, and the candidates or the engineers are the ones that are choosing who they want to speak to and who they don't. A big benefit of using a marketplace, especially in the early stages, is that they can help you hire very quickly because most candidates who are on the marketplaces are actively looking for a place to move right now. It's very quick to get on a phone call with them and start pitching. And if you run a good closing process, you can significantly reduce the amount of time you'll spend as a founder on hiring, which is obviously great. The downsides, though, are that they tend to be quite competitive. So engineers are being reached out to by multiple companies at the same time. So you'll have to be very effective at convincing them to join if you want to make hires. And the second is that they can be expensive. So most marketplaces will work on a fee per hire basis, which can be 15% to 20% of the first year salary. That's cheaper than a recruiting agency, but still a significant cost if you're an early stage startup. I'm obviously biased here because TripWide is a hiring marketplace, but I'd say the three main ones that come up in conversations, or at least when we're pitching customers, would be TripWide, Hired, and Vetri. You should try it. They're all free to use to get started, so you're welcome to try it. I'd say TripWide, the way we differentiate ourselves is essentially by having better candidates. And we measure that by what percentage of candidates that companies interview through TripWide do they make an offer to. And that tends to be twice the rate that they make through other sources. And just as a general note, hiring is a funnel. You're optimizing your funnel. So you should pay attention to what percentage of candidates are making it through each step in your funnel. When you're early, you won't have that many candidates, so you can't be that scientific about it. But start capturing that data and just building that into the habits you have when you're thinking about hiring. The third source that I'd recommend you go to and look at is LinkedIn and GitHub. These are effectively the biggest online directory of engineers in the world. Most of hiring that's done at big companies is through teams of technical recruiters reaching out to engineers on LinkedIn or GitHub, finding the ones that fit certain keyword criteria, and sending them cold messages. And they go for a very high volume approach here. So a technical recruiter may well send over 100 messages a day, just in the hope that they get a few replies. And a dynamic that's occurred, especially in the last few years, is as there's more recruiters, there's more messages going out on these platforms, so response rates are dropping for everyone. Which means for early-stage startups in particular, it's going to require a lot of your time sending a lot of messages in order to get a few interested candidates. So making this work for you requires, in my opinion, not playing to a high-volume approach like a big company recruiting team would, and instead spending the time actually researching and reading the details of profiles, so reading through someone's LinkedIn, looking through their GitHub, looking at the details of the work that they've done, and sending a smaller number of personalized, targeted messages, and emphasizing when you send the message, why would someone be a good fit for your company specifically, and give them clear evidence that you've read their profile and you're interested in them as an individual, as opposed to sending a spam message. But that doesn't mean the message has to be super long. I'd still advise keeping it short and concise. Just the key fact is there's proof that you've read their profile. Final note here is send emails instead of messages. So if you sign up for LinkedIn Recruiter Lite, which is about $120 a month, that will give you access to Connectify, which is a Chrome plugin that makes it really easy to pull out email addresses from anyone's LinkedIn profile, and you'll consistently see much higher response rates through emails than you will on messages. So definitely go for that. The fourth place I'd start looking for engineers would be job postings or job boards. The two main ones for startups are Stack Overflow Jobs and AngelList. I haven't included Hack and Use Jobs on there because it's only available to YC companies, but Hack and Use Jobs is somewhat unique and just has a particularly high quality of engineer, and I'd rank it second on this list, actually, if it were sort of a standalone source of engineers. Job boards, in general, do suffer from a quantity over quality problem. So what's good about them is you don't have to spend a huge amount of time posting to one of them. The downside, though, is that the time suck can come in later because most of the applicants you'll get will be vastly underqualified. You'll get a lot of applications from people who aren't even really software engineers, and it will take a lot of your time reading through all of these resumes and applications to find the one or two good applicants. So to maximize your return and maximize the number of good applicants you do get, I'd recommend focusing on making your job listings unique and interesting, and bear in mind that the majority of job descriptions on the internet are written by someone in a recruiting or marketing department that's using corporate boilerplate language that especially isn't going to appeal to an engineering audience. So as a startup founder, you can experiment to try and bring through a bit of your personality in the job listing. So one thing you might try is write in the first person about the personal story for why you started the company, why you're excited about the mission, and get that excitement and passion across. Other things you could try, is there anything unique about the culture? Is there anything specific about the technical challenges or product challenges you're facing? So if you put in more details, that again will stand out, because big companies tend to be very generic and vague when they're talking about what you actually get to work on there. The final source I'll talk about is actually just like physical in-person meetups. So I don't think that these are actually going to be very effective, and they're sort of a long shot. Like the numbers don't really work out, like in-person meetups don't have that large of a number of people in attendance, and the truth is most of the time people are there for free food and drink, more than trying to actively find somewhere to work. So it's unlikely that you're going to find both a really qualified candidate who's actively looking to move, who's excited about your company, and you also personally need to be very effective at talking to strangers and convincing them of things in order for this to work at all. So I've included it on there because I do know startup founders who have had success through meetups, but they are few and far between. If you do try this approach, I'd recommend focusing on technical meetups, and by that I mean the local closure programming group where people come together and meet up and bring laptops and work on things is more likely a better source of engineers than going to Dreamforce. The sort of final thing you could try here is hosting meetups at your own office, right? So you could also combine this with the personal network hiring and use it as an excuse to have friends come by the office, or have their friends who are engineers come by the office. At TripleByte, for example, one of our engineers is a fanatical Emacs user, and he hosts the Bay Area Emacs meetup at our office, and it hasn't worked for us for hiring, but it is a good way to just meet and build a network of good engineers that could come in valuable at some point in the future. So it's definitely worth considering. Now I'm going to talk about when you should think about using recruiters. Truth is, there's not really any hard rule on when you should hire a technical recruiter. I've seen companies of less than 10 people hire one. I've seen companies wait until they're 50 people and plus. These are my opinions on when you should, and I treat these as a rule of thumb. So first, I think you absolutely should wait until you've at least hired your first engineer before you consider bringing on a recruiter in any capacity. The reason for that is actually, I think general startup advice applies here. So one is just in general, when you're hiring, it's good for you to do the job yourself for a bit. So you feel the pain and you understand it, and you sort of understand the details of what makes someone good at that role at your startup in particular, before you go and hire someone, you'll be better able to assess them. So if you feel the pain of recruiting yourself, I think you have a better shot at hiring the right recruiter for you. And the second reason I say is just, it's like sales. It's actually good for you to go out and try and pitch and convince people to join your startup. So you can just understand yourself like what message works and what doesn't, because as a startup founder, you are always selling and you never know when you might bump into someone who could be a really great hire. And if you've already sort of practiced the pitch for convincing engineers to join you, you'll have that sort of ready to go. So I'd recommend making sure you always make your first hire before you try and delegate this to a technical recruiter. Second, I'd expect to have a good hiring cadence, so somewhere around hiring an engineer a month for the next six months or so before you start bringing on a recruiter. Otherwise, it's likely they'll run out of work to do quite quickly. And then finally, as a rule of thumb, if you're spending more than 50% of your time sourcing, that's like all the things I mentioned before, and doing initial phone calls and screens and getting people to come and meet you in person. Over 50% is probably about the time where you want to start thinking about bringing on help, because 50% is about the amount of time you want to be spending on hiring. So recruiters themselves come in roughly three types. You have contract recruiters who you pay by the hour, and they can sort of do anything from just cold messaging on LinkedIn all the way to doing the initial phone screens. There's in-house recruiters, it's just hiring a full-time technical recruiter that works as a member of your team. And the final would be agency. And agencies are essentially teams of salespeople that are paying lots of engineers on LinkedIn or wherever they can, and then sending their resumes out to as many companies as possible. And they tend to charge 25% to 30% of first year salary if you hire an engineer's resume that they send you. They do tend to be fairly high touch, so they're quite involved in trying to give you information that will help you close an engineer, but they're also sending that information to multiple companies at the same time. So my recommendations here would be when you get to the point where you feel it's time to bring on help or bring on a recruiter, start with a contract recruiter and have them focus on just the sourcing piece of it. So have them just focus on reaching out to engineers on LinkedIn and GitHub, and their main deliverable for you should be filling your calendar with calls with promising candidates. Then you're doing the pitching and practicing, or you're doing the pitching and convincing, and when you get to the point where that becomes too much work for just you, then I'd consider hiring a full-time in-house recruiter and training them to do the pitch call. So now they're both sourcing and doing the initial calls and sort of setting up the on-site interview process for you. So to sum up, my sort of startup hiring plan, if I were just getting going and building an engineering team, would be start by making sure you've exhausted your personal network, spend lots of time taking people out for lunch, coffee, making the ask. Two, experiment with the hiring marketplaces. Your mileage will vary on these depending on how effectively you can pitch your company, but even if you don't make hires from them, you'll get valuable experience pitching real engineers and real candidates and learning what resonates about your company to that audience. Third, spend some amount of time doing personalized and targeted outreach to engineers on LinkedIn and GitHub, making those messages really personalized. And then finally, treat job boards and meetups and sort of meeting people in person as a background process you run, where you're not expecting to make any hires from them, but you're sort of building a general pipeline that could be valuable in the future. Cool, that's the first part of this. Armand's now going to talk about how to screen and evaluate technical school of engineers, then I'll jump back in and wrap up with making offers and closing. Awesome, thank you, Harj. So I'm Armand, I'm Harj's co-founder at Dribblebyte. And before this, I started SocialCam with Michael Seibel, and I was an early employee at Twitch. And I'm going to talk about just the screening step. So how to identify skilled engineers at your company. So the first question here is just, you know, why you should believe me about any of this. And one answer is that I've done a lot of interviews. So since starting Dribblebyte, I've interviewed over 1000 engineers personally. But I think a better answer is that, you know, Dribblebyte has a pretty special vantage point. We're able to see how interviews do, see how candidates rather do, you know, in the interviews at multiple different companies, I can see how the same candidate performs in multiple companies. And that gives us a data set that I think no one else has. And, you know, that data is, is, you know, where the advice I'm going to give today comes from. Before I jump in, I want to just go over the basic hiring process that most companies use. And this is actually pretty standardized. So probably 95% of tech companies use these basic steps to screen candidates. So first is a resume screen. Someone applies to a company, they send in a resume, and a recruiter looks over the resume and decides if this looks like someone who's a basically good fit. Then a recruiter call. So this is a usually a 30 minute phone call with recruiter, just asked about the candidate background, judge culture fit, and make sure they're interested in the company. Then a technical phone screen. And so this would be between 30 minutes and an hour with an engineer, usually solving a single programming problem. So this is sometimes something like fizzbuzz or a little bit harder. Often this point done over over a synchronized text pad of some sort. Then this is optional, sometimes a take home project. So a substantial project the candidate completes on their own time, and then sends into the company to be evaluated. Then finally, the onsite interview. So the candidate comes into the office and does between three and six one hour sessions with engineers at the company, covering individual problems. And then finally, decision meeting. So usually the next day after the candidate has gone home, everyone who interviewed the candidate and the hiring manager gets together in a room and talks about sort of their perceptions, and they as a group make a hire or no hire decision. Some stats on this. Companies make offers to between two and eight percent of all of the engineers who apply. But interestingly, exactly where in the process that drop off happens is very different between companies. So we see companies where 75% of people who apply get screened out at the first step on a culture fit call. And then we see companies where almost all applicants make it through to the final interview, and that's where all the screening happens. And about 95% of people who are hired work out. That is about 5% of technical hires result in someone being fired within a few months. And then from the candidate side, what we see is a distribution of success in interviews. So the top few percentage points of programmers by skill receive job offers after most of their interviews. But then the bulk of programmers are somewhere in the middle where they do interviews and they receive offers after somewhere between 15 to 30% of the interviews they do. And an interesting point is that no one passes all their interviews. So there are not magical engineers who receive offers after every interview they do. And yeah, this gets at what I think is the major challenge when designing an interview process. And this is inconsistency. So this is noise in the interview process. It's kind of the idea, is your interview fundamentally repeatable and meaningful? You know, if you had to, if you could somehow, you know, re-interview your co-workers, your employees, or everyone who passed your interview in the last year, if you could re-interview those people, how many of them would pass again? And it's a pretty scary question. But it's kind of an interesting thing is that we've been able to get some data on this. So what I did was I calculated a stat called the inter-rater reliability between all of the interviewers at all of the companies on Trailbite. And so what that means is this is a statistical measure of the extent to which different interviewers tend to agree about which candidates are best. And it's on a scale of zero to one, where zero would be no agreement, or the amount of agreement you would expect to see, you know, in random data from chance alone. And one would be perfect agreement. And what I found was an agreement of just over 0.1. So the first point is that that's obviously much closer to no agreement than it is to perfect agreement. But for some context on that, I calculated the same stat on a data set of online movie reviews. And what I got was an agreement of very similar, but actually slightly higher. So it ends up that, you know, interviewers agree about which engineers are the best at about the same rate that Netflix viewers agree about which movies are best. And that's, yeah, that's scary. Interviews are fundamentally noisy, and they are more noisy, the data shows them to be more noisy than most hiring managers sort of want to believe. So, you know, the first question here is sort of why do interviewers at all then? If interviews are so noisy, why do them at all? Why can't we just use something like trial periods to actually be engineers? And, yeah, I think this is actually a great idea. It is almost certainly much more, you know, if you can work with someone for a week, you can almost certainly get a much better sense of if they're a good employee than you could in a, you know, in a three-hour interview with them. The problem is that most engineers don't actually want to do trial periods. So we did some research on this at Trailbite, and it ends up that only 20% of engineers are willing to do trial periods. And there's actually some, there's some adverse selection there. So the, you know, most of the best programmers are in the 80% who would prefer to do a standard technical interview because it takes less their time and is faster. So I think that trial employment is an excellent option, and you can offer that as an option. But, you know, if you don't want to scare away most good programmers, you do have to still run a standard traditional interview process. So what I'm going to talk about sort of today is, you know, specific pieces of advice that you can use to try to reduce the noise in a traditional interview. And I'm going to go over seven points. So point one, the first way to reduce noise in an interview is to decide what skills matter for your company. There are a lot of different ways that a programmer can be skilled. So, you know, someone, for example, can be very productive, or they can be slow, careful, write great tests, and make sure they don't commit bugs. You know, someone can be strong in math and computer science, or they could be, you know, deeply knowledgeable about the internals of the Linux kernel and, you know, scheduling and real-time operating systems or something. And if you don't decide as a founder which of those skills matter for your company, then your interviewers are going to decide that for you. So they're going to come up with questions that they ask you in the interview process, and they will fail people who answer poorly on those questions whether or not those are areas that should matter for your company. And this is actually a major source of noise in interviews. Every, you know, engineer has this bias where they think the things that they know the best are the most important skills one could know. And absent specific direction from above about what to look for, they will fail people for areas that are not important for your company. So my first piece of advice here is that you should go through and ask yourself these questions before you start hiring. So the first is, I need to clarify, these are the axes along which we see most disagreement between interviewers. So the first question is, you know, do you need sort of fast iterative programmers or someone who's careful and rigorous? Do you want to look for someone who's motivated by solving hard tech problems or someone who is motivated by building, you know, beautiful product for users? Is it important that someone comes in with skill in a particular technology, particular language, say? Or can you hire, you know, do you want to hire a smart person and let them learn your tech stack on the job? Is academic computer science or sort of algorithm ability something which is important for you or is that an irrelevant skill? And then is there any other sort of specific expertise that you need in people you're hiring? It's actually, so, you know, it's fine to answer both some of these questions. You don't have to specify only a single profile of person you're hiring. The important thing is to decide what matters, even if that's multiple profiles. That sets you up to design the rest of your process and make sure that you're not, you know, failing people for being bad in irrelevant areas. Okay, point number two, second way you can reduce noise in interviews is to use structured interviews. So to define this, you know, a free-form unstructured interview is an interview where an interviewer gets in a room with a candidate and they ask questions and they follow their intuition. They, you know, based on the answer the candidate gives, they ask follow-ups and they try to get a sense of what the candidate feels like, if that person can be a good fit for the company. And at the end, they make a global yes-no, hire-no-hire decision based on that interview. And that contrasts with a structured interview where the interviewer comes into the room with a question which they're going to ask and a defined criteria they're trying to evaluate. And the very interesting point here is that everyone thinks that free-form interviews feel better. Almost all interviewers prefer free-form interviews and they think they're more accurate. And many candidates, if you ask them, actually say they prefer to be interviewed in that way. But the interesting thing is that this is completely opposite to all of the available data on this. Structured interviews are simply more predictive. They are better at predicting success on the job and there's no excuse not to use them. We should all be using structured interviews. And so I'm going to go over some examples of what that means. The first thing is that you have to hold the process constant. So the goal of an interview is essentially to evaluate variance in candidates. And if you do not hold the rest of your process constant between candidates, you're introducing noise. So there is simply no excuse for not asking every candidate for the same job the exact same set of questions. I think the reason this is not more common is that the interviewers themselves tend to find this boring. And all I can say is suck it up. You have to do that. So second point on structured interview is that you want to give your interviewers defined criteria to evaluate. So rather than putting them in the room and saying, decide if this person is going to be a good fit for the company, say, we care about coding productivity and knowledge of back-end web systems. And so your goal is to ask this question in the interview and grade the candidate on coding productivity and knowledge of back-end web. And there's actually some great research on this. It ends up that a lot of the worst biases that can come up in interviews are made worse when the interviewer is trying to make a global decision. So if someone is making a global, does this person feel like a good employee decision, that's where things like, do they look like someone I knew in the past? Or their race, their gender, that's where those things come into play. And interviewers are much better at ignoring those criteria, ignoring those attributes when they're given a defined criteria to evaluate. And then final point is that you want to unify decision-making. making. This applies mostly to larger companies. But you want to make sure that one person or one group of people is involved in all the final decisions. So rather than viewing interviewers as people making decisions, view them as people taking notes, grading candidates on criteria, and that all those notes and criteria go to a centralized person or a centralized group who makes the final decision. And the idea is just that, again, the goal is consistency. And it's far more easy to be consistent if one person is making all the decisions. Point three for how to reduce noise is just to use better interview questions. And so I have some tips on that. The first is that you want to avoid questions that require a leap of insight from the candidate. And rather, you want questions where there is a gradual ramp of steps that they can follow that lead to a solution. And this is a general idea. The rule of thumb I like is that you can ask yourself, can this question be given away? So if it's a question that has a single fact in the solution, which a candidate could know in advance and perhaps be communicated to them by a friend or by a thing they read in Glassdoor, then that means that it's probably a bad question. And an example of that is there's a classic question. The question is, imagine you're standing at the bottom of a flight of stairs. And every step, you can take a single step up one stair or a double step up two stairs. How many unique paths are there at the top of the flight of stairs? And it ends up the solution of that is the Fibonacci sequence, kind of strangely. If someone knows that, obviously that's the solution. If they don't know it, they may well struggle and then think about it and go down some rabbit hole. And so that's the example of a bad question where this leap of insight is the solution. An example of a good question is, can you please implement the game Connect Four for me? So it's a series of steps, each one relatively straightforward. But that leads to a solution. And there's nothing someone's friend could tell them in 10 minutes which would give them a massively unfair advantage implementing the game Connect Four. So another idea here, this is kind of related, but you want multi-step problems. And those tend to lead to problems that don't have leaps of insight, but also candidates will often get stuck in an interview, even good candidates. And if your problem has multiple steps to it, you can give them a hint. You can help them on one portion and still have enough left for them to go on to do well and redeem themselves and demonstrate skill. Whereas if your problem is all in one sort of nugget of difficulty, if they can't solve that and you have to help them at that point, they've basically failed or done poorly on that section. You want to avoid specialized knowledge. So if your goal is to assess general programmability, you probably want to ask questions that involve things like lists and hash tables and strings rather than questions that involve tris or prefix trees. This is, of course, unless you've decided that you really care about algorithm data structure knowledge and your goal is to make sure that everyone knows about tris. In that case, it's totally fine to ask about them. But if you're measuring something else, if a tri is a portion of the problem, some portion of the people, your candidates will be familiar with this, others won't, and that will introduce noise. So in general, I think it's good to stick with the sort of classic, most basic CS concepts. You want to budget about three times the amount of time it takes you to solve a problem for the candidate. So if you come up with a question and you solve it yourself and it takes you 10 minutes, that's probably a good question for a 30-minute interview session. And the reason here is just that it's far easier to be the interviewer than it is to be the candidate. It's far easier to ask the question. And we tend to downplay how hard the questions actually are. And we did some actual research on this. We went through all the questions we asked at Trollbyte, and we looked which are most correlated with candidates going on to succeed. And it ends up that the most predictive questions tend to be much easier than what our intuition going in was predicting. So it ends up that most interviewers think that the optimal question is quite a bit harder than the optimal question actually is. You want to make sure that you ask four or more questions in an interview. The idea here is that each individual question carries a certain amount of noise. Has the person seen this question before? Were they lucky answering it? If you ask more questions, you'll get a more consistent signal out. And then finally, just one tip. A type of question we like a lot at Trollbyte is a question where we give the candidate a problem. And then rather than wanting them to devise a solution, we tell them a solution to the problem. And then their goal is to take that idea and implement that in the code. And so we give them an algorithm, and we see if they can implement that algorithm rather than require them to devise an algorithm. OK, the fourth way to reduce noise is to ignore credentials during your interview. So by credential, I mean things like did someone study at a well-known school, or has someone worked at a well-known company? And I'm not claiming that credentials are meaningless. Credentials are important. So they're predictive in any case. The group of people who are ex-Googlers are indeed better engineers than the group of people who have not worked at Google. So it's totally legitimate to take that fact into account when deciding whether to hire someone. However, it's not relevant to their actual programming skill. So my advice here is to make sure that you're not biased by the fact that someone comes from Google when you are narrowly evaluating their programming skill. So I recommend that you hide that credential from the interviewers. And the reason is we've found that interviewers are actually pretty significantly biased by this. If they know someone has strong credentials, they're more likely to interpret the results of the coding screen as in a positive fashion. Oh, this person, yeah, they didn't know that answer, but I'm sure there was a temporary slip up. And so hide credentials from your interviewers, let them assess programmability, and then when making the final decision in the decision meeting, consider credentials and also the performance in the interview. And yeah, this will help you find the programmers who are skilled and who lack additional credentials. And those are the undervalued people in the market. And as a startup, if you're good at finding those people, that is a big advantage. OK, point five is that you want to think about the false negative rate in your interview. So a false negative is when someone fails your interview who could have gone on to do the job well. And the opposite of false positive is when someone passes your interview, you hire someone who then goes on to do poorly and probably be fired. And both false positive and false negatives are very costly. So if you hire a bad person and you have to fire them, that's terrible. It harms the morale of the team. It's also very expensive and there's actual money, big problem. But if you're a startup and you're really hungering, you're held back by not having enough engineers, if you pass up a person who could have joined your team and could have been productive, that's also very expensive. And I'm making a pretty subtle point here, but I think there's a bit of a cognitive bias where false positives, we're very aware of them. If we hire a bad person, we feel that pain for a month or month plus, best case. And we've seen companies on Shopify, they generally have too much faith that the folks who fail their process must have been bad engineers and couldn't have done the job. And that's empirically not the case. If you watch, as I said earlier, no engineer will pass all interviews. So a significant portion of people who fail interviews do go on to be employed very practically at other companies. And so I just recommend that folks designing interview processes think about the false negative rate and try to give that some weight in their calculations of setting hiring bars. One of my goals for Shopify, actually, is to get to a point where you can actually measure this rate, because no one knows what it is. No one knows what the false negative rate on the interview is, because to measure that, you have to just hire people randomly and see how they perform. That's very expensive. My goal is to get to a point where we can do that. Let's see. OK, point six is that you want to generally calibrate on the maximum skill that each candidate brings, rather than their average skill or their minimum skill. So if someone comes in an interview, they're very strong in one area or they're weaker in others, what matters the most is what they were strongest in. Everyone can look stupid. If you ask me the right question, I will definitely look very stupid. That's true for everyone out there. And so the problem is that someone might go through an interview and do very well on some things that would be useful for the company, but look stupid on one question. And if that interviewer gives a blocking no, that that person was stupid, that's introducing noise in the process, perhaps. Now again, if someone does poorly in an area that is important for the job, totally fail them. But be open to the fact that everyone does look stupid sometimes, and don't fail someone just because they look stupid on one portion of the interview. OK, finally, last point here is that you want to think about the candidate experience when designing an interview. You want to make sure that every candidate who goes through your process likes your company. And this is true for a few reasons. One is just if they enjoy the process, they have a higher probability of accepting an offer you make. And so this will help in the closing step. But an interesting point is that it will also actually make your screening itself more accurate, because stress has a big impact on performance. A high percentage of candidates get very stressed in interviews and underperform their actual peakability. And so some tips here to help reduce stress include just letting everyone bring in their laptop and work in their own environment, their own language, their own tools. They will be able to be much more productive, much less stressed, and then coaching your interviewers in just some soft skills, so being friendly, providing breaks for the candidates, and when they are doing poorly on a section, training them on how to intercede in a way which isn't too stressful and insulting to the candidate. Rule of thumb here that comes from the old Jolan software blog is that you want every candidate, no matter how they do, to finish your interview wishing that they had, you know, wanting to join your company. You know, even people who fail your interview very poorly, you want them to end your interview wanting to join and being excited about the opportunity. And the final point, you want to avoid hazing. So this is rare, but results in some of the worst horror stories of interviews. This is where, you know, an interviewer takes on the role of, you know, a ritual of acceptance into a group. You know, if this happens, it's terrible, and as a hiring manager, you want to stay totally away from that. Okay, those are my points. I want to emphasize that I'm not saying that you should lower the bar for who you hire. I think if you follow this advice, you will get a more accurate signal. You can then set your bar for who you hire if you want on that signal, but you will still be making, at that point, better hires. So just to summarize here, I recommend that the first step you follow is to decide what skills matter for your organization, make sure that you're screening on things that you actually care about, and then design a structured interview around those skills. So come up with ways to assess each skill and structured criteria for the interviewers so that they are, you know, less likely to be biased by outside factors. Then you want to use good interview questions, you know, multiple parts, no leaks of insight. You want to hide credentials from the technical interviewers because that introduces noise in the process. You want to think about the false negative as well as the false positive cost in your interviews, and you want to generally calibrate around the maximum skill that each candidate brings. While doing all that, you want to try to provide a positive experience for the candidate. So those are my tips. So far, I think this all applies to both big and small companies, so I'm going to go over a few points here that I think are specific to, let's say, series A and smaller companies. So one point here is, what if you're so small that you don't have the scale to standardize your process? So you're a seed stage startup. You're hiring. You're interviewing your first few people. You obviously can't run an extremely standardized process because it's the first few candidates to have seen those questions. That's a totally real point. I think it still is worth trying to run structured interviews. So your plan will probably be a Google Doc with some tips written down, but it still is helpful to think about what skills matter and try to design questions that assess those skills. That will still reduce the bad bias in the interview. Let's say that you're having trouble sourcing. So you're an early stage startup, and your number one problem is, how do you get enough qualified applicants for your company? So in that scenario, it's fairly obvious that a false negative costs more. So if you're struggling to get people to apply to your company, screening out someone who could have been good is very expensive, more expensive than for a large company. But the flip side is that if you're a small company, hiring a bad person is also way more expensive. So it's not clear yet the ratio of those two cost changes, so I think you still have to care a lot about both. I think what you can do is be less aggressive about screening folks out early. So if you're an early stage company struggling to source candidates, I recommend you are less aggressive in screening out prior to your on-site. Pass more folks through and accept a lower final interview success rate in exchange for better screening all the applicants. Let's say that you're a small startup, and you just don't know what skills matter. So you're not sure if you want to hire someone who's very CS focused or someone who's very web focused. And there's no crisp answer here, so we have plenty of examples of billion dollar companies that have taken various routes here. My personal advice from Trailbite, and from Social Cam, and from Twitch when it was small, is that I believe strongly that the two most important skills for the first few hires are productivity and ownership, so being able to basically take a project, figure out what has to be built, and just make that happen. And I recommend optimizing for that at the expense, potentially, of code quality. So I think the first few hires at a company, you should accept that perhaps they're writing crappy code, but by God, they're writing it quickly, and they're getting stuff done. Let's just say that was the case during the early stages of all three companies I've been involved with, and I think that's normal and probably good. So let's say that you're hiring for an area where you yourself don't have technical expertise. So you're a web developer, and you need to hire an iOS engineer. What do you do? So one answer is you can use us, you can use Trailbite. We'll help you do that. You can call in friends to do the interview for you if you have them. But I think a good point here is that a trick that I've used in the past is to just ask candidates to explain things. So you're a web developer, you ask the iOS engineer a question, they give an answer. You have no idea if it's a good answer or a bad answer. What you can do is just ask them to explain. You say, oh, that's interesting. Can you explain why that's a good idea? And for the most part, if someone truly is a skilled iOS engineer, they should be capable of explaining their answer in terms that an experienced web engineer can understand. It's not always the case. Sometimes someone will come along who's a good iOS engineer but a bad communicator, and that might fail them. But this is a pretty good trick to hire outside your area of expertise. I want to end, actually, with an ask for you guys. We've been developing an exercise for interviewers that we use when training new interviewers for Toolbite. And I want to see if I can get you guys to try this. And email me and let me know how it goes, because I'm curious about if this works more broadly. And the idea is that interviewers tend to significantly underestimate how noisy interviews are. They overestimate their own ability to distinguish good engineers from bad engineers. And part of becoming a better interviewer is to become a little more humble and more aware of your own limitations. And so this exercise is designed to highlight that. And so what I want you to do is to do a mock interview with one of your co-workers. So have one of your co-workers interview you where they're asking questions. They're the interviewer. And you're role-playing a candidate. You're giving answers. And I want you to tell them in advance that you're going to be giving bad answers to some of the questions. You're going to be role-playing a candidate who makes mistakes. And then during the interview, they ask questions. I want you to, half the time, go ahead and give a bad answer. Role-play a poor answer to the question. And the other half of the time, give it your best shot and actually try to give the best possible answer you know to that question. And then after the interview's done, do a debrief session where your co-worker goes over all the mistakes you made and gives you feedback. And what's great here is that they don't know what answers that you gave were intentionally bad, and what were you trying your best? And if they don't highlight the mistake you made, when you were trying to make a mistake, like they're going to look a little bit bad. So they're fully incentivized to be completely honest and rigorous when pointing out the flaws they saw in the interview. And the criticism they give will apply both to the points where you were intentionally making mistakes, but also to your attempts to give your best possible answers. This ends up being really interesting. We've been doing this a lot at Trailbite. And it is great at highlighting how interviewers disagree. So if you do this with your coworker, and you do it a few times, reverse roles, the result is that you will highlight your areas where you're both weak, but you'll also highlight a bunch of areas where you have legitimately strong disagreements about what constitutes the best answer to a technical question. There will almost certainly be more disagreement than you're expecting going in. Yeah, I found this super insightful. A lot of you guys could try this and email me and let me know how it goes. Awesome. That's everything from me. Harjit's going to talk about closing, and then we'll both answer questions. OK. I'm going to wrap up here by going through best practices and points to optimize your chances of people actually accepting the offers you make them. OK, I have five main pieces of advice here. The first is just understand, as a startup in particular, speed is a huge hiring advantage that you have over bigger companies. So through Triplebyte, we work with startups and larger companies, and we ourselves are surprised by how often a big company can take weeks just to deliver the actual final offer details. And when someone's getting to the end of their job search process, that's when they're most keen to just make a decision, move on, and know what they're doing. So as a startup, if you're quick at every step in your hiring process, from the moment you have the first contact through to when you make the offer, you increase your chances of closing a candidate. So just be fast and responsive at every step. Second, Armon already mentioned, train your interviewers to have a good bedside manner with interviewees. And so we ask candidates or engineers on Triplebyte, what were some of the reasons you had bad experiences when you went and interviewed in-person at companies? And all of the replies centered around their experience with the interviewers. And the top two complaints were interviewers not being familiar with the technical questions they were asking. And second, the interviewer being determined to show how smart they were, specifically smarter than the interviewee. So if someone has a bad experience interviewing with you, they are highly unlikely to accept your offer. Three, be prepared to talk in some detail about your company culture. Because almost every candidate is going to ask you that question. What's it like to work here? What's your company culture like? And I think we've seen a particular uptick in this question over the past year. And I think, frankly, a lot of the stuff around Uber and just a lot of the focus on the culture in the technology industry in Silicon Valley is making people, especially individuals, think more about the kind of culture they want to work in. So two specific bits of advice here. I'd definitely be prepared to answer questions about how you think about diversity. If your team's already diverse or not, I think you should have some thought around how you plan on incorporating that into your hiring practices going forward. And second, when you're describing your culture, be aware that almost every company, like a significant majority, essentially use three adjectives, open, transparent, and collaborative. And we've seen this on TrimbleWide because we see them creating their profiles. And so that can be an effective strategy because all three of those things are good aspirational qualities. No one would not want to work at an open, transparent, collaborative place. But it's not very good for differentiating yourself. So one strategy you could take when you're talking about your culture is take more risk. And an example of risk might be talk about the trade-offs in your culture. So if you believe yourself to be an open culture, talk about the trade-off there. Openness means being honest about things. And being honest about things can be difficult and uncomfortable for people. So if you're willing to go in that direction, you may alienate some candidates. But you may also really increase your closing rate on the candidates that are most excited about you. Fourth, get your team and investors involved in the process. So once you made an offer, make sure your team reaches out afterwards, offers to meet up with the candidate again, answer more questions, and generally be involved in their decision-making process. And do the same with investors. And in particular, pick any investors you have who would be particularly good at closing that candidate. So if they're on the fence about whether to leave a big company for your startup, do you have an investor that successfully left a big company and joined a successful startup? And finally, present full and transparent offers with all the details a candidate needs to understand how much they're being compensated. This sounds, again, probably somewhat obvious. But I've been surprised by seeing companies engage in this sort of hypothetical battle, where instead of just telling a candidate, here's how much salary and equity you get, posing questions like, how excited are you about us? If we made you an offer, do you think you'd join? And this always creates a bad, awkward candidate experience. It's also unfair, because the truth is, no matter how powerful your mission is, compensation is a big factor in where someone's going to work. And so asking them to commit before giving them details just puts them in an uncomfortable position and decreases the chances that they would accept your offer to join. So when you do make the offer, provide full details. This slide has the minimum of what you should put on an offer letter. Salary is fairly self-explanatory. With equity, make sure that when you present the details of an equity offer, so the number of stock options, exercise price, et cetera, that you're also checking in to ask the candidate, how comfortable are they with this? If they're a senior engineer and they've worked at six or seven different startups, they probably understand this. They don't have to go into too much detail. If they've spent most of their life working at Intel, they may not be familiar with how startup equity works. So ask them how comfortable they are. Don't overwhelm them when you present the offer details if they're not. Just send them follow-up resources that they can read on their own time. And also, this sounds somewhat obvious, but make sure you yourself as founders really understand how stock options work, because people will ask you questions about it. And you actually don't end up spending much time on this, because you yourself have restricted stock, and fundraising doesn't usually include options. But you should understand, even down to the level of, I'd say, tax implications of different types of options. Final thing I'm just going to close on here is a common thing that comes up with startups is how do you compete for engineers against the tech giants, like Google and Facebook in particular, right? So Google and Facebook obviously can offer much larger liquid compensation packages than a startup can. And frankly, the public tech company stocks have been doing great over the last few years. So it's becoming more challenging to compete against them. Still, we routinely see startups do it and win out against much larger companies offering more money. I think there's four pitches they make that have been quite compelling. The first is emphasize learning. The case I'd make here is that you learn the most, or you learn the fastest when you're given real decision-making responsibility, which means if you make a mistake, bad shit happens. And there's very, very little chance, practically no chance, that that's going to happen at a big company, right? Like, big companies have checks and balances in place to make sure that no one can create too much damage, in particular for new hires, right? So if you tell someone that, hey, like, we just don't have that luxury, we're growing quickly, we've got to get everything shipped yesterday, you're going to get thrown straight into making real decision-making authority, and if you screw up, that's going to be bad for the company. And that's the way that you learn and build real experience. So emphasize that. Two, I talk about career progression, and one sort of macro comment I'd make is, if you look at executives at public technology companies, they tend to be, or often can be, much younger than you'd see at their counterparts at like a public detective or like a public utilities company, right? And the reason for that is you can grow up and be like chief product officer at Facebook at 38, or however old the chief product officer is, because you joined the startup when it was really early and you grew along with it, right? And the tech industry is really the only place that happens. Like, it's more of a meritocracy. You don't have to sort of pay your 20-year dues at a company before they consider you for a senior role. You can rise up as quickly as a startup grows. So emphasize that. Third, talk about opportunity cost. And in particular, the way I'd frame this or talk about this would be, at any given moment in time, there's always going to be a basket of big, safe technology companies to go work at. The names might change sort of every five years or so, but the experience of working at one is largely fungible. Whereas the experience of working at a startup varies wildly, right? So I would emphasize the fact that your startup right now, the team you have, the opportunity is a unique one that's a uniquely good fit for that candidate that they won't get again. And if it doesn't work out, they can always go back to generic big company. And final point, this one's specific to hiring more junior candidates, talk about mentorship. So one thing that we see, especially for new grads, people straight out of college, is that they're worried they won't get the right level of mentorship. They won't learn how to best practices work if they join a startup. And maybe they should go work at Google for a couple of years, get that under their belt, and then join a startup. I mean, first decide if that's actually true or not, right? Like if you yourself have only junior engineers on your team, and frankly, you just don't want to mentor or get someone up to speed, then don't make that case and maybe don't hire someone like that. But if you have experienced engineers on your team, emphasize that and emphasize the fact that they will get to learn alongside experienced engineers who have worked at places and learn best practices, et cetera, et cetera. So that's everything. I think we're gonna open up for questions. I will ask the questions about the topics we covered. Do you wanna come up? Okay. Thank you so much. Yeah. So, this is obviously a more engineering and tech problem discussion, but can you maybe talk about things like background checks and things that totally rule out the candidate. Like background, things that rule out the candidate? I mean, background checks or... Background checks, frankly, most startups I know don't do them. They're especially easy to do now, though, because you can integrate checker in with your payroll service, so sure, but that's not something that I would focus on. I'd focus more on, like, is someone gonna be a good fit or not? Yeah. Yeah. I have a computer science engineer who wants to intern for me. I don't have any engineers on the team, but even given that I only need to get a, like, three credit time, what would you do? That's a hard question. So, the majority of computer science juniors are probably not gonna be doing a particularly good job of doing the work you want. That said, this sounds like a case where you could probably just evaluate past work this person has done. So, you could probably ask this person to give you a portfolio or other examples of work they've done, and if that is at a level and of a type that you're happy with, hiring them would probably work. Is there any metadata you could actually use to help make a better decision when it comes on to, like, hiring people that have higher grades or probably a Geek of Legends ELO score? Yeah, probably. So, the thing we focus on is background-blind hiring. So, we focus very narrowly on just direct skills assessment rather than looking at other things that correlate and are predictive. So, you know, personality type is real. People vary in their personality. Some of that stuff matters for forming jobs. I think there's more research on, like, the Big Five, rather than, the Big Five personality traits rather than Myers-Briggs. All relevant, but I would try to keep it pretty separate from technical assessment. I'd say assess technical attributes, and then, you know, separately try to assess, you know, culture, friendliness, soft skills, and then combine that all, and then try to make a global decision. Yeah, sorry, back in the sunglasses. So, okay, I'm a, like, a non-technical commenter, right? So, if I want to find the right technical, I know you guys just went through, and you guys told us, like, you know, the ways that you can test, or have an engineer on board, and give them, like, a talk, so, but if I'm non-technical, how can I engage if the person is actually qualified if I don't actually know how to do this? That's the extreme version, and I'm just gonna say you probably can't. So, you, oh, yeah, so the question is, if you're a non-technical founder, how can you assess an applicant's technical skills? And I think the answer, unfortunately, is that you probably can't. So, you can fall back on the same advice of trying to look at past work, but I think this is why it's very helpful to have a technical co-founder, is because you are gonna be at a fundamental disadvantage there. I mean, as far as finding a technical co-founder, I think that would be the dad part, to know, like, they're the right person to be able to do that. Yeah, I, yeah, you have your thought there? I was like, so the question is, how do you find a technical co-founder and figure out if they're good or not? I think sort of Armon's advice mostly applies here. The most thing is that even if you, use a friend or someone that you know who is an engineer to talk to them and figure out if they're a good engineer or not. Otherwise, there's not really any other options. Yeah. Yeah. Apparently, I'm not precise with my pointing. Need to work on that. A question about talent generation, so like a step before sourcing. You know, is there any methods around kind of working with universities and doing project-based challenges with them or some kind of mechanism for sourcing that might be a good way to kind of build an account rather than sourcing? Yes, but I think this is largely focused, oh, sorry, yeah, repeating the question. The question is, are there ways to work with the universities and colleges to generate like a pipeline of talent that you could hire from? Is that accurate? I would say, yes, there certainly are, and they exist, like career fairs and sponsored events at colleges, et cetera, et cetera. But I think those probably work better for larger companies that can fit themselves around the college graduation deadlines and that schedule. For startups, it's kind of tough because usually you want someone that's available right now to hire as opposed to waiting for them to graduate. So I probably wouldn't recommend investing too much time in that as a startup. And just to clarify, big companies at this point make offers a full year in advance with large signing bonuses delivered a year in advance. So it's very hard for startups to compete with college hiring. Question? Yeah. So you talked about role-playing a bat in your college career, so why a bat is good other than just basically face-saving in front of your friends and making mistakes. Yeah, so the question is, for me to clarify on my last point about role-playing a bat interview. So the key point here is that you're gonna role-play an interview and the coworker who's playing the candidate who's giving the answers, they're going to intentionally make some mistakes. And what that does is it frees up their coworker to be critical. So normally, if you say, if you do a mock interview between two coworkers, the problem is that in the end, everyone's gonna pull their punches. They're not gonna honestly give their opinion of the performance that their coworker gave. It just doesn't quite work due to all kinds of social pressure. But if you tell them, I'm gonna be intentionally making some bad, I'm saying, I'm gonna be intentionally making some mistakes, that frees them up where they're then free to point out the flaws in your interview. They're not only free to, they have to. Because if you say, I'm making mistakes, and you ask them, what's your opinion of my results? If they don't point at a mistake you made, that means you got something past them, right? So it flips the social pressure and creates pressure where they're then incentivized to be critical, which is extremely useful because as experienced engineers, like it's been a while, you're a senior engineer on a team at a successful company, it's been a while since you've had someone really brutally critique how good you are at answering your own questions. And that, what will happen is that they will point out legitimate flaws. You'll be trying to give your best answer, and they will point out things you said that are wrong or things that could be better, and that it's very humbling. It's very humbling, and I recommend that. I think this is an exercise where you can give yourself that experience of being humbled and having flaws in your own performance pointed out. Okay guys, sorry, due to the timing, just one more question, please. In the middle. Yes, got it. You talked about a 95% plus success rate on one of the slides, and I, given the, the fact that the interviewers tend not to have a very high interview rate or reliability. It seems hard to believe that there's a 95%, and it also doesn't match my experience, that 95% of the hires were successful. So, what do you think is the real success rate where, you know, a year after hire, somebody's still there and they're a top performer? Yep, that's going to be, so that number 95 comes from some surveys we did among companies. Oh, okay, sorry. So the question was, in one of my slides I said that hires are successful 95% of the time, but that doesn't mesh with, you know, the experience of being a hiring manager, hiring people. Many people you hire are not great. So the question is, what's the actual rate at which, you know, candidates end up being top performers? And, yeah, the question is totally right. So that number comes from some surveys we did where we asked companies, of all their hires, what percentage got fired? We actually asked what percentage are top performers, and that 5% is the fire rate. So 5% actually get fired. You know, an additional 30% are people who stick on but are not really great employees. And then about 10% are in the bucket that that company said were their best hires and top performers. Thank you."
  },
  {
    "name_video": "Most startups are undercharging",
    "description_video": "Dalton Caldwell, Y Combinator partner and founder of imeem and Mixed Media Labs, on pricing and how most startups undercharge. He also shares examples of how companies like Doordash, Zapier and Dropbox, determined their pricing strategy.",
    "related_categories": [
      "Business Models",
      "Pricing",
      "Customers"
    ],
    "page_url": "/library/7M-most-startups-are-undercharging",
    "youtube_url": "https://youtube.com/watch?v=RxjZbmr1d1w",
    "mp3_file": "downloaded/Most_startups_are_undercharging.mp3",
    "mp3_content": "Most of the time, people are way undercharging for their product. For some reason, the idea is out there that you should either not charge for your product or you charge such a tiny fraction of what you could be charging that you're not set up for success. So to give you an example, I've seen startups charge 1 10th or 1 100th of what they should actually be charging for whatever reason. I think there's ideas out there that investors want you to never charge or they, I don't know where these ideas come from, but a lot of the time, the first advice we give to people is to dramatically increase their prices as fast as possible. A lot of the times, startups apply to YC saying that they are competing on price and that the way that they're winning versus competitors is that their product is cheaper. The reason that is so dangerous is you don't actually know if your product is good or it's solving a real problem for people and you could just be trying to get people that want the cheapest possible product. And so, if you are charging a fraction of other options for your thing, it could be that you're actually getting bad data about whether or not anyone wants your thing, right? And so, that's one way that you know that you're in trouble is that your entire customer acquisition strategy is like your product is way cheaper than everyone else's. Usually, a good product that we see become successful does not charge less than competitors. It actually charges a premium. It's because it solves such a huge problem for their customers that they will happily pay a premium versus other options on the market because it's such a great product, right? That's a sign that you've made something that people want is that the market pays a premium, not a massive discount to what other options are. That's a really good sign for you. Instacart was expensive. DoorDash was expensive. Airbnb, I think, was expensive. Dropbox was expensive. It wasn't like DoorDash was, hey, we're like other things and we're like a tenth of the cost. That was never the pitch. So, I'm sure there are examples of those, but generally speaking of our hugely successful companies, they are either serving a market that has never been served before and so it's expensive or it's actually more expensive than direct competitors. I mean, Zapier charged money and IFTTT did not. So, they had a perfect substitute that cost more money."
  },
  {
    "name_video": "How do you create luck?",
    "description_video": "To create luck, you need to move fast, make things, and give yourself as many opportunities as possible. YC Partner Dalton Caldwell shares his advice for founders, with examples from companies like Brex and Retool.",
    "related_categories": [
      "Startup Ideas",
      "Founder Psychology",
      "Becoming a Founder"
    ],
    "page_url": "/library/7L-how-do-you-create-luck",
    "youtube_url": "https://youtube.com/watch?v=NmEyx9TEkRw",
    "mp3_file": "downloaded/How_do_you_create_luck?.mp3",
    "mp3_content": "I'm Dalton, I'm a partner at Y Combinator. I was the founder of a company called iMeme in 2003, and a company called Mixed Media Labs in 2010. I've been working at YC since 2013. Okay, how do you create luck? The way to create luck is to move much faster than everyone else, and to give yourselves as many opportunities for that lucky thing to happen to you. So, say that everyone is running at five miles an hour. Imagine that you're able to run at 15 miles an hour. You can run circles around everyone. And so, if you're a startup that's moving really fast, it gives you more opportunities to talk to more customers, to change your idea more often, to write code more quickly. Everything gets way easier if you've moved much faster. And so, we've seen the founders that get the luckiest are actually the founders that move the fastest to give them as much surface area as possible to get super lucky. One example, of course, is Brex, which is the credit card for a startup's company that's been doing extremely well. When we initially funded them, it was for a completely different idea. It was for a VR headset idea. And if the founders weren't lucky, they would have worked on that idea, realized it wasn't gonna work, and given up. And the way they got lucky is they realized very quickly that that idea wasn't gonna work, probably a month or two into the batch, probably like six weeks into the batch, probably like six weeks, and decided to change ideas. And they didn't decide just about one idea to change to. They iteratively went through half a dozen or more different ideas and very quickly talked to all the world's experts about their other ideas and were able to cross them off the list as being good ideas. And so, by doing this really fast process really quickly during the batch, they zeroed in on what became Brex very quickly. And so, if they were way slower moving and they weren't creating luck for themselves, the odds were definitely, it was definitely the case that that company was not gonna work. And so, they did that. I've seen other companies do the same thing, the same thing for Retool, where they had to change ideas and they moved very quickly to find a much better idea. Also, a company called Magic did the same thing that I worked with, where they originally were funded to do something completely different. And they moved so fast at going through different ideas and actually building full prototypes of the ideas and even launching the ideas to customers. They got lucky and found an idea that really took off. And so, that's how they, all of those companies dramatically increased the surface area of luck. If you were pre-company, how do you create luck? It's to know as many interesting people as possible and to learn from as many interesting people as possible. And I think another way you can create luck is to do things that make you super uncomfortable. And so, I think a lot of the times, founders that may not get as lucky just stay at home and they wait for the world to come to them and they wait to be recognized for their secret genius. Whereas the folks that are able to create luck just go out there and interact with people and tell other people about their ideas. They build things. A great example of this is, if you look at the history of Facebook, Mark Zuckerberg was constantly creating prototypes and giving them to users. He was creating music plugins for Winamp. He was making hacks for his friends. He was always just kind of making stuff and giving it to people. And that was the surface area by which the genesis of Facebook was created was he was just kind of making stuff. And so, you can dramatically increase the chance that you will get lucky if you just make things. You learn how to make things really fast. You learn how to make things by yourself or with other people that are interesting. And you give them to other people. You don't just hide them to yourself. And if you just do that a lot, things start happening for you, is what I've noticed in life. So, I would definitely recommend that. When do you know when to double down on your strengths versus to go outside of what you know? I think you can go both ways on that. So, for instance, if you know literally nothing about science and you know nothing about biology and you decide you want to cure cancer with your startup, that's a pretty tall order. Maybe it's possible. I can't say impossible. But the odds that you will get super lucky creating a cure for cancer as someone as a complete outsider does not feel like playing to your strengths. On the other hand, sometimes it's the case where experts in a space are very uninterested and give up on anything in the space. And it takes sort of an outsider's philosophy to be able to see the greatness in it. And so, maybe the delineation is if you have the technical skills to build the product you want to build, then I think it's okay to get in way over your head. But if you have absolutely no relevant skills and you're trying to break into something that requires technical skills, I think you're gonna have a pretty hard time. I think the way that you create luck when you're Series A or later is by continuing to move really fast and having a culture of fast-moving experimentation. And also, to hire people that move so fast that they get lucky too, right? Like if you're a very fast-moving founder and you continue to hire people that are able to iterate through ideas very quickly and have this culture of getting more done in a set amount of time than most people would not be able to, that's how you can make your culture continuously lucky."
  },
  {
    "name_video": "Design for startups (part 2)",
    "description_video": "YC's Garry Tan describes how to effectively integrate design into a product development process.",
    "related_categories": [
      "Design",
      "UX + Design"
    ],
    "page_url": "/library/7H-design-for-startups-part-2",
    "youtube_url": "https://youtube.com/watch?v=O6uREh3G3sQ",
    "mp3_file": "downloaded/Design_for_startups_(part_2).mp3",
    "mp3_content": "Now's the super practical section of how to find and choose designers. We can get through this really quickly. I'm happy to answer questions afterwards about it. But, you know, the basic questions we always get asked is, you know, well, when and how? The reality of it is there are so many ways to answer this, but this is just, you know, super boilerplate advice. It's that pre-seed, seed, and probably pre-A, you still need a co-founder probably to do it, and then you could probably get by with a little bit of consulting. By series A, you should probably, unless you truly have nothing that has a user-facing element, which is rare, I mean, even developer APIs today, you know, I would argue that you need a developer API designer who sort of runs through this whole process, but just for a developer experience. It's incredibly valuable. That's make or break for, you know, even highly technical products. You know, that's when you should really start thinking about your first hire, and then, you know, by series B, what you really should think about is how do you hire a team? A lot of people reach series B, and they're actually, you know, they're still at the first hire stage, and the difficult part is if you actually have 10, 15 engineers, and you're trying to hire that first designer, and you don't have, you're not going to hire a team, that's actually like a little bit of a nightmare for a designer to work at, which makes sense, actually, to be the only person on that whole team in charge of design, and you versus 20 engineers is a very scary thing for a designer. So, this might be a little outdated, but this is, you know, sort of what I've always used in the past. They're just websites online to sort of find designers. So, Dribbble is this incredible portfolio. You can get a lot out of LinkedIn. Look for, you know, companies in your space that have done design very, very well, and you can just very point blank start reaching out to them. Behance, Crop, I mean, all of these are websites that you should just go check out. AIGA even has a little database of member designers on there. When I'm thinking about hiring people directly for a full-time role, or even for contract, there are a bunch of schools that have worked well for me. CMU, HCI, NYU, MIT, RISD, Parsons, Stanford. This is really not a comprehensive list, and frankly, there are so many incredibly good designers, you know, who have never been to a design school. In terms of finding consultants, there's really two paths here. One is to go ahead and find an individual. So, you know, it turns out that there are a lot of people who, you can kind of use this as a way to recruit them. So, some of the best folks, they actually really like to work on a lot of different projects all of the time, and, you know, there's actually a very large pool of individuals who are basically individual consultants, and they're hard to get, and you might have to email a lot of them, but you can reach out, you can hire them as consultants, and if there's a really good fit, that could be a way to get to know them to come on board. A really cool trick that I've heard for people who just need low-cost, like logo design and visual design, there's actually an incredible number of people out there in the world who are not first-world designers, and they're totally available on 99designs, Fiverr, I think this is not, you know, there are probably a bunch of other places like that. The trick that I've heard that you could use is you can actually take your job, put it on one of these job boards, and then don't just do it for, you know, one, don't just hire one job, you could hire 20 jobs, and then look at the output of those 20 different people, and then personally befriend the person who does some of the best work, and you'll find people in, you know, all around the world, Philippines, Thailand, Eastern Europe, everywhere, really, I mean, Africa, Asia, Europe, like, you know, even in the United States, people who are incredibly talented, who, you know, actually, you know, they're just starting out in their careers, or they don't know how to actually get great jobs, and you could be that way to, that they learn about startups. You know, design firms, there are just so many, you know, the difficulty with design firms is you kind of have to find one that is willing to work with startups, and, you know, many of them, the bread and butter for the best design firms truly is working with Fortune 500 companies for outrageous sums of money, so it can be very difficult to find ones that will work with startups. You know, Vigette Labs is the one out of DC that I use the most, but there, you know, are giant directories, and frankly, referrals are sort of your best bet. And then I want to call out a company that just graduated from YC a few weeks ago called Play-Doh Design. Their URL is useplaydoh.com. You should definitely reach out to them. I think that they do a very, very amazing job. So, how do you actually attract a designer to work at a startup? And, you know, really sort of the ideal at Series A, or even where you're at right now, is like, you know, if you are truly a consumer-focused company, you kind of need a co-founder on there who can actually run this for you. But later on, especially, you know, and if you're a three- or four-person team, you can usually find one, ideally, unicorn to come join and give them, you know, a much more senior role. That'll be fairly important at Series A. But once you do have a larger team of five to ten engineers, it gets really scary for a designer who's used to working with teams, who's working for a design firm, or working at, you know, Facebook, or one of the large tech companies. Like, they're used to sitting with other people who spend all of their time thinking about all of the things that we were just talking about, with wireframes, and users, and personas. And so it can be incredibly scary for those designers to come and work for you at a much later stage if you don't plan to hire a team that is diversified, that, you know, it just gives them a really good day-to-day. You know, and then at the end of the day, like, being able to be very crisp about what those roles are, that's the other part of hiring a team that's incredibly important. It's going to be very, very hard to find a unicorn, but often you can break it down by the exact things that I mentioned. Like, there are incredibly good PMs who have great resumes, who have great backgrounds, who, you know, that's one coherent role. Interaction designers, sometimes they can't make things that are pretty, but they are incredibly empathetic, they're able to think through, you know, they're great writers, they're incredible communicators, and that's what you would look for in that role. And finally, visual design, that's probably the part that is, you know, it often stands on its own, it doesn't have to, and so it's just a different skill set. And then really quickly, I mean, it's actually very effective for startups who want to hire design teams to actually write about it. Content marketing works extremely well, social media works incredibly well, and, you know, if you're all engineers but you're already thinking about this and talking through a lot of the terms that I was talking about, well, that's a culture fit for designers, because, you know, that's basically what they want. They want executives or workplaces or founders who understand and speak their language. And so that's why I encourage you guys to be very open with do-it-yourself, to do it, to understand these things, because even if you don't do it, you know, down the road, you're actually far better at evaluating, managing, and working closely with people who do and who are very good at it. How do you actually interview these designers? Well, this is typically what I recommend. You know, do a quick phone screen. At the end of the day, like, it's actually, you know, no matter how beautiful a portfolio is, it's just so hard to work with people who have sort of their own vision that cannot communicate. And so the phone screen is really all about, you know, great communication skills. I think that that's incredibly essential. And then when they actually come and meet you and the team, you know, actually have them walk through the hard decisions, the trade-offs. Like, we spend a lot of time about product design. You want to see exactly that kind of thought about personas, about prioritization. What are the difficult trade-offs? Because there always are in every type of product you could design. And finally, I recommend whichever founder has been doing the design or the product, you know, you've already been solving problems that you might have. So the key thing there is if you've already spent your, you know, hundred to thousand hours thinking about a given problem, you know, it's the best for you to actually spend time walking through a candidate over and over again and just to make sure that you think through these things the same way that they do. So you can read this later, but, you know, it's pretty straightforward. You know, think about design. You don't want people who are complainers. That actually is pretty common. You know, you want someone who's empathetic and listens to your needs. You know, it's usually bad for someone to talk about themselves a lot. And so, you know, going back to the empathy point, that's incredibly important. You know, the funniest thing that I like to use is when someone's, when I ask them a design question, if they just go to the whiteboard and just start drawing, they fail. Because, wait, why didn't you ask about the users? Who's it for? What's the problem? And so, you know, these are just guidelines. There's so many ways to interview. You know, if you don't have a really good design leader on your team, I highly recommend that you go to a friend or someone who you do respect who can do this stuff to just be like sort of a final check before you do hire someone. So, you know, these are a bunch of books that I sort of refer to throughout the talk. This is just a starting point. This is far from comprehensive. But, you know, if you bought every single one of these books and read it, you know, front to back, you would be a pretty good designer, maybe. I hear a bunch of links that you should probably read afterwards, too. You know, Taste for Makers is one of these PG essays that, you know, I think not a lot of people talk about, but it's incredibly timeless. So I highly recommend that. And then these are links that are very specific about, you know, how do you write a PRD? What's your first wireframe? And then these other websites we just really, really like because there's so much there. You know, this field is incredibly deep. So thank you so much for spending and making it all the way to the end of this talk. It's an hour and a half, 90 minutes. We made it through a hundred and four slides. So thank you for sitting with me. I will leave you with just one final thought. And it's truly that, you know, what we're talking about with a startup, design is only one leg of this three-legged stool. And your startup, your startup success truly lies at the intersection of all of these things. So thank you so much. Thank you for spending time with me. I know that was a lot. Thank you. So the question is, how important is an about us page? I mean, you know, this isn't necessarily a design thing. I actually really think it's important in that going back to our, you know, moment where we were talking about how alone we are in this, you know, sort of barren product landscape. You know, you just feel so alone. And the about us page is the one place where you as founders can tell your story. Like everyone is spending so much time trying to be incredibly, I mean, they're trying to imitate Microsoft. They're trying to be Google, right? You know, you should embrace how powerful it is that you're trying to do this thing. And being a real human being, answering emails, and putting your name on the website. I mean, I would argue that that's why one of the big reasons why Coinbase was so successful. I mean, Brian Armstrong, very early on, he was probably the only person in the whole Bitcoin world who was willing to put their name, you know, the address. Like, I mean, just basic things to make it an incredibly real, real thing. So, you know, I think about us is very important for your relationship with your customers. And that's not a design thing. Yes? Hi, Sue. Later on in the talk, you were talking about understanding your users. And early, you mentioned transport, like global transport, which had, I think, packetized transport decades before the TCP IP stack. And engine efficiency is like 50%, while your car was only at 30%. How do you ask questions that really let you accurately see your user? Because a lot of times, you know, you might be doing a user interview, and you feel like they're not really giving you the whole story. Yeah, so I guess the question is, how do you actually, well, how do you properly ask questions to sort of get the story of your user? You know, the hard part here is there's not really one way to do it. I think it really does come back to being a good interviewer, and thinking through, I mean, asking open-ended questions is actually a really good way to do it. It's just, you know, tell me about your day. And like, oh, you know, tell me, you can even seize on emotion, because the best problems to solve are actually incredibly emotional ones. It's like, I get frustrated when blah, or I get mad when blah, right? Like, those are a lot of very, very strong, you know, going back to, you know, I think Jeff might have taught me this, actually, just purely that, you know, you really want to look for things that are, you know, hair-on-fire problems. You know, things that actually, you know, get people upset. You know, like emotion, it can be an incredibly powerful and good thing. So open-ended questions, and look for emotion. Yes? Hi, my name is Lawrence from Intersect, and would you talk a bit about prototyping? And maybe bonus question, if you have, you know the problem, but haven't found a solution in a long time, and you have chicken and egg, how would you go about finding a solution? Yeah, so first question is about prototyping, and... If you wanted to, if you have something important about that, say. You know, I have a confession to make. I have not done a lot of prototyping, simply because I'm always in such a rush to get the code done, that the second I know what I want to build, I just build it, and then I ship it, and then I'll just do it live. And so I haven't personally gotten a lot of use out of prototyping, but I know that it's an incredibly valuable tool. And that's just a weird one for me, because I'm just always, I would rather just ship the thing, and have it be out there. Yeah. And then, sorry, the second question. If you know the problem of the user, but you haven't found the solution, you try to get an egg, maybe, how would you go about... So the question is, you know, if you know a problem, but you haven't found the solution. You know, the hard part there is like, it's not totally clear to me that design can solve it. You know, what you described maybe is either a business problem, or a technology problem. You know, sometimes there's a design problem if there's, you know, I don't know. I mean, the hard part is these things are so squishy, right? Like, if it's a business problem, then you don't have distribution, people don't know they have the problem, you can't get in front of them. Or if it's a technology problem, then it's like, I mean, yeah, how do we actually build the thing? And if we're not capable of doing it, then design can't solve it, right? You don't know how to build to solve that problem. Okay, Gary. Yes. How about... How about you just keep building things until you get it right? Do what Jeff said. Over here. Yes, please. Yeah, you talked about coinbases. Are there industries where you think it's like, keeping that distance between you and your users or you and the public is appropriate? Or it's like, it's pretty hard if you just walk away? The question is, are there places where you should maintain your distance? I can't think of any at the moment. There probably are. I mean, it was a really big advantage for them to, you know, be out in the open. I could imagine being... If it's A, incredibly competitive, and if you want to be secretive, there are cases where you don't want to be that open. And that does happen, especially for, you know, something that's easily copied or something that, you know, is incredibly enterprise focused, so it's not important for a lot of people to know about it. Those are the main scenarios where I think secrecy turns out to be very important. But most people tend to err on the side of more secrecy than less. You know, the standard YC-ism around this that I very much believe is, you know... whenever you're creating something new, you're not competing against all of the other people out there. You're only competing against obscurity. You're competing against the back button. So to the extent that that's true, being as open as possible, getting as many people to know about you as possible, and being a human being, and having that interplay, that's really good. Do you think controversy is the reason you do that? Question is controversy. I mean, it depends on the type of controversy. One of the funniest examples of me giving very bad advice and me being very relieved that the founder did not take that advice was a company called Soylent. So they came in through YC. They were working on something totally different in networking equipment. And I sat down with them in this room for office hours, and they said, great news, we have this incredible, we have all of these orders, people love this thing. Oh, by the way, we're gonna stick with the name Soylent. And I said, please, please, don't call it that. Do you know what that means? Haven't you seen the movie? And it turns out that the entire reason why they were able to get probably a billion dollars worth of earned free advertising, the reason why they have an incredibly powerful business today is purely because they found exactly the right kind of controversy. 90% of people who love food hear about it and say, this is terrible, I hate it. In fact, they hate it so much they're at dinner and they're telling everyone they know about it. And then 10% of people hear about it and they're like, oh my God, I need that now. So there are cases where controversy can be incredibly powerful. That's so, stop it there, sorry. Thank you guys. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "Design for startups (part 1)",
    "description_video": "YC Partner Garry Tan, co-founder of Initialized Capital and a design expert describes how to effectively integrate design and design thinking into a product development process.  This was a talk for YC's Startup School in 2018.",
    "related_categories": [
      "Design",
      "UX + Design"
    ],
    "page_url": "/library/7G-design-for-startups-part-1",
    "youtube_url": "https://youtube.com/watch?v=9urYWGx2uNk",
    "mp3_file": "downloaded/Design_for_startups_(part_1).mp3",
    "mp3_content": "Welcome to week four of Y Combinator Startup School. This is gonna be a great session. We have Gary Tan, who is my good friend, former partner at Y Combinator, the founder of Postress, the founder of Initialized Capital, which is what he's doing now, and an amazing designer who's gonna talk about product design and how to make that an advantage as you're building something people want. And then following Gary, we have Kat Manialak, who is my current partner at YC, and Craig Cannon to talk about how you can use public relations and content to acquire users to improve the prospects of your company. Before we get going, I wanna just mention a few rapid administrative matters. If you miss an update, I know everyone's trying to get their updates in so that they can meet the graduation criteria, do not fear. For now, the easiest thing to do is to send your update in an email to startupschoolatycombinator.com. It's okay, don't panic. Secondly, we have, as many of you know, just done a merge of a number of your groups. Hopefully it goes incredibly smoothly for everyone. Certainly it won't. And if, for example, there's a problem with your group, if there's no moderator, please let us know as soon as you can, again, to startupschoolatycombinator.com, that's the easiest way to do that. If for some reason you think you're in the wrong group, it doesn't work for some reason, let us know and we'll accommodate you to the best extent that we can. Um, if you haven't launched, we recommend that you launch, if you at all can. That sounds, if that sounds like a broken record, it should. And with that, let's get going. I will, I am hugely pleased to introduce Gary Tan. Thank you. Thanks, Jeff. Thanks, Jeff. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thanks for coming all the way out and spending time with me to hear about design. And well, frankly, design can be incredibly complicated and there's a lot to it. But in hopefully an hour, possibly a little bit longer, we're gonna get through about 100 slides. So I try to cram down basically everything that I knew that founders would get wrong or run into problems with all the time. And so it's not going to be super in depth. Think of this as more, these are the terms that you need to know. These are the basic concepts you need to know. And, you know, personally, I am actually self-taught. And so, you know, the first thing that I really wanted to start off with is actually, I mean, it's almost cliche to associate Steve Jobs with design. But I think that this is one of the most important things. If you're in this room or watching on the internet, you probably already understand this. This is why you're starting a startup. It's that everything around you that you call life was made up by people that were no smarter than you and you can change it. You can influence it and you can build your own things that other people can use. And Steve says, once you learn that, you'll never be the same again. And so the thing I really want to underscore here is what is design? It's about making and building these things that other people can use. And if you remove one word from that sentence, it actually doesn't work. And so what we're going to explore today is, you know, well, what is design? Why does it matter? We're going to go deep on both the concepts around product design, interaction design, and visual design, but we're also going to see tactically, how do you actually do it yourself? Even if you have no design background whatsoever, if you're a human being, if you're smart, if you can put yourselves in the shoes of other people, well, you too can do it yourself. And in fact, as founders, you probably need to. And then finally, we're going to walk through, well, you know, when should you hire and how should you do it? You know, when should you use a consulting firm, things like that, practical matters. So I spent my 10,000 hours, you know, actually I was trained as an engineer, so I've never been to school for being a designer, but I taught myself, you know, whether it's books, learn by doing, I just always found myself, not just in my code editor, but also in Photoshop, trying to dream up, trying to figure out what should it look like? How do I want people to feel? What should I be building before I actually put it to code? So I've been a program manager, I was employee number 10 at Palantir, and then YC funded me back in 2008 with a company called Posterous, which we will actually use as an example for some of how I've thought about product in the past and how you might be able to apply that to your startup in the future. And finally, I spent 10 batches working with companies, initially actually just as designer in residence, so I sat here in this room doing office hours with more than 1,000 founders, just like you, just starting out, how do I build my first homepage? What's my first time experience? And then after that, what do I do next? How do I build a design process, a product process? And so what you're about to see is basically the distilling of those 10,000 hours. One of the things that I am most excited about when it comes to design is this ability to actually put together the iconography of something that is very significant. And so when I joined Palantir, it was just 10 people, and we got to design this logo. And one of my favorite things about it is this mix of both meaning and aesthetics. And so on the face of it, one of the things I really wanted to do was sort of really underscore what Palantir was about. And so at one level, this wordmark, but with this specific logo, is actually a Palantir. It's actually an orb on a pedestal from Lord of the Rings. It let you see into your enemy's secrets. So on a very literal level, it made sense. But a more subtle level of this that was very important to us as we were building that company was that this is also a human reading a book. And so one of the major themes of Palantir broadly is that we're at this moment in society where computers are able to help us understand the world around us in a much more fundamental way. And so what a computer is is basically the infinite book. And so that was just one example of where I've seen design actually, well, help put together a culture for a company. And it's fun. It's just fun to be able to translate all of these different pieces of a company and why we're here, what it's about, into something that can go on a T-shirt or on a hat, actually. And so really, really big disclaimer, I'm an engineer by training. I've never went to school. Never went to school formally for this stuff. Totally self-taught. I was a founder, so I applied this just like you. I did it myself. And now I'm a VC, basically by accident. And so the things that I'm talking about today will be a hyper simplification. If we wanted to, we could turn this into easily a 10-week course just about each given section. But instead, what I want this to be is a roadmap. So you might hear these terms. There will be times in your startup, perhaps now, perhaps tomorrow, that you'll want to actually start applying these things. Google's your friend. There's everything in the world that you need to know. It's out there. And so the computer is truly the bicycle for the mind. And so the other thing that I really want to underscore is we talk about design as the singular thing on its own, but it truly is deeply integrated in this broader picture of how do you create great products? It's not just design on its own. It's how design actually interfaces with all the other pieces of the pie. So it takes great product management in addition to that great design, and engineering, and customer support. It's all of these things. And especially at your stage, don't box yourself in. You have to know that you are the shepherd of your product and you're gonna have to do every single one of these things. So what is design? Why does it matter? In a nutshell, it really is just these two very simple things to me. It's just creating things for users that work well and delight them. And those are two sometimes disparate things as we'll see. Some of the most inspiring companies to me in the world, they have design as a very core piece of what they do. And so you can't talk about design without talking about Steve Jobs and Apple, obviously. But the first misconception that is probably the most common misconception is that design is how it looks. It truly is not merely how it looks. It is actually also how it works. And that's why in the slides that are coming up, we're gonna talk a lot about that process on how it works, what should it do, and what are the problems. I like to think about Leica. I just got my first Leica camera and I kinda can't believe I waited this long in my life to finally get one. But one of the really interesting things about Leica as a brand, it truly is this beautiful design, this incredible brand, but then it is also functional. It's also about deeply the functionality. Why is this thing better than all the other things that existed before it? And so a review from 1929 actually just straight up told you that. A Leica at that time was basically magical. It was eight times lighter and 10 times cheaper. It was an incredible machine for its time and it's still a pretty amazing machine. To other physical products as well, one of the great design inspirations for me and for a lot of other people out there is actually Dieter Rams, who built all of these very simple, incredibly beautiful products that were incredibly usable. And one of the most important things that I think that he really showed us in his designs is that good design is actually as little design as possible so minimalism. And so that's a point that we'll return to several times in this presentation. But the key thing here is how do you create things that are not burdened with non-essentials? It really is about purity, about simplicity. And just to drive it home, I mean, this is a guiding sort of force in sort of everything that we see in the marketplace today. History doesn't repeat, it rhymes. And another thing that we'll get back to in this talk is actually simply the fact that there's very little totally new under the sun. In fact, as designers, you probably shouldn't be spending too much time trying to be extremely novel because novelty is the opposite of functionality. And so what do I mean by that? Earlier, we talked about form versus function in the form of delight and works well. These are sort of the two yin and yang, the opposing forces when you're trying to put together a design. We obviously always want something to be beautiful, want something to make you feel good, make the user feel good. But at the same time, and delight is also a part of novelty. It's that, hey, this is new. I've never seen this before. This is interesting. I wanna see more of this. Like, let me turn the page, let me click next. But at the same time, function is the thing that, that's the stake. If delight is a sizzle, then works well as a stake. That's why we're here. We're trying to get something done. And so part of the problem with form over function, and this actually happens even in the best products. I mean, I'd like to call out Apple for its notch. I mean, that is the definition of form over function. I mean, this is a photo from their marketing website, and certainly it's incredibly novel. Certainly it serves the purpose of a marketer to be able to have this very novel, different thing and to differentiate it from, you know, all of these other smartphones out there. But in terms of function, when I'm watching a video, this is categorically worse. Like, why am I, you know, I'm not here for the notch, I'm here for the content. And this happens all over the place. You might go to a restaurant later tonight, and it's a beautiful restaurant, incredibly well decorated, very, very thoughtful, incredible food. But you'll walk in, and you'll sit down at this seat, and gosh, it's so romantic, but I really can't read my menu. I can't even order. Like, you know, this is again an example of form, this idea of, you know, well, we want to make people feel like this is a romantic, premium, incredible experience, but then if I can't even read the menu, why am I here? And so, and this happens all the time. I mean, one of my favorite books that I highly recommend that you read is Don Norman's Design of Everyday Things, and he basically has a whole chapter about this on doors that are incredibly beautiful, but you have no idea how to use them. And so this is, you know, one of the more absurd situations of like, someone actually had a right pull on this thing because too many people were just, could not figure out how to use a door. A door is one of the simplest things that you could possibly try to use. But, you know, when you put form over function, if you put the wrong door or, you know, it's too elegant, there's not, it's not clear how you use it, well, that's, you know, missing the point. And so, if you take a moment and try to think through, like, why is it that we see, you know, form over function so much in, you know, the things we use, the products we use, just walking around in our daily lives, you know, why does this happen? You know, clearly, this should not happen. And so that form should follow function. And deep down, I really want to emphasize the one thing that, frankly, as founders, I think you need to spend a lot of time on, and that's empathy. This is the thing that I admire, you know, one of the things that I admired the most about my time both working at YC, but also as a founder going through Y Combinator back in 2008, it was that sitting down with Paul Graham, he would give us such incredible advice about specifically what are your users thinking? You know, what are they feeling? Why are they here? And really being able to peel away the layers of, like, you know, I know we're sitting in a room looking at this particular UI, but, you know, put yourself in the shoes of someone who has never seen this before. And this is something we'll come back to again and again. You know, and, you know, one of the things that I put actually in, you know, my recommendations for design resources, and on its face, it's kind of absurd. This is this Depression-era book written by Dale Carnegie, a self-help book. But I actually think that it should basically be required reading for founders. It's that, you know, one must actually become genuinely interested in other people. You actually have to see their point of view. You want to be able to be sympathetic, like understand what are their ideas, what do they understand, and, you know, what do they actually want? And, you know, this goes back to YC itself. The first day you get into YC, you get a t-shirt that says, you know, make something people want. And I think, I don't know if they still do this, but do you still get a t-shirt if you get an exit that says I made something people want? Yes, I need to get mine, by the way. Oh, shoot. Okay. Maybe that's why I haven't gotten mine yet. Okay. So one of the things that's really interesting about building highly technological products is that we often think about them as incredibly complicated machinery. But the most useful mental model for me in what I've been doing is actually to not think of it as building a car or even building a website or, you know, writing software or anything like that. It's actually about throwing the best possible party you possibly can. And so if you think about great parties you've been to, there's no line. You're ushered right in. A human being, ideally someone you know, someone who's very friendly, comes to you and says, hey, welcome. I am so glad you're here. Here are your friends. Oh, let me take your coat. You know, beers are over here. And so, you know, that sort of politeness, that inviting, welcome nature, that thoughtfulness, that's something that you really have to keep in mind as you do, you know, your work as not just a designer but as a founder. And the key piece here is actually knowing what problem you're actually solving. Just being very crystal clear. And, you know, this is sort of, if I'm, you know, starting to sound like a, you know, sort of, if I'm repeating myself, I mean, that in a nutshell is, I think, what you're going to get over and over again at startup school is that really how do we be as crisp as possible about here's the problem, you know, that we need to solve. And this is sort of the core tenet of design thinking as well. And so part of the problem with not knowing what your problem is and going back to lack of empathy and going back to, you know, basically form over function is that if you don't know who that user is, what their problem is, then you are in danger of creating something like this. So if you, you know, basically each of these do sort of talk about a particular, you know, they refer to a particular problem that someone might have. But if you buy any of these products and you have that problem you're trying to solve, now you have two problems. If anything, each one of these, you know, each one of these inventions were created mainly to serve the central problem of the inventor, of the inventor wanting something to solve. And so, you know, this is the opposite. Again, like, you know, just to give more examples, this is the opposite of empathy. This is something, this is you putting novelty, putting, you know, one's own interest ahead of your users, of society, of, you know, the people around you. And so at the end of the day if there's no problem then there's no solution. It ends up being design for its own sake. And, you know, design for its own sake isn't design, it's art. And there's nothing wrong with art. I love art. But, you know, that's not what we're here for actually. It's, you know, founders creating things that people don't actually need. Or, you know, engineers do this too. You know, make stuff that we think we need and then actually it's not, you know, it's not better, it's not novel, it's not something that other people actually want. And that's a problem. So there are so many types of design. You know, it's no mistake that some of the most obvious examples of companies that are design driven, they're actually hardware companies. There are as many kinds of design as, you know, types of things that humans need. It's no mistake by that. You know, architecture is absolutely a form of design. Branding and identity. You know, communication design. Being able to communicate something using data and iconography or maps or charts. Furniture design. You know, a piece of furniture easily has all the same mechanisms as anything else that a human being might use. Landscape design. How does someone go into a place? How do they use it? You know, where do they know where to go? You know, packaging. So how does this make me feel when this arrives at my doorstep if this is a gift? You know, why is there a gift box anyway? And, you know, what is the form and function of each piece of this physical object? Or, you know, transportation design. Like, a car is one of the most evocative things. It's almost entirely pure emotion. But for the people in this room, you know, I think that these are probably the ones that are most relevant to you and we're going to spend a bunch of time talking about that. And so this is, again, an extreme oversimplification, but the way I would break it down in terms of design for startups really is product design. So what's the problem and who's it for? Interaction design. So, you know, how do we actually do that, right? How do I actually, you know, create wireframes, create the flows, create the sort of intermediate step between that and the, you know, pixel perfect, ready to go, ready to implement thing? And the visual design actually really is about that last mile. And, you know, part of the reason why we divide this up this way, you know, to be frank, the ideal is that you have a co-founder on your team who's able to do all of these. And then if they can code, that's amazing. If they can do business too, that's incredible, right? But that's obviously a unicorn. Like, you know, unicorns are incredibly rare. They do exist though. And I'm sure there are a few unicorns in this room as a matter of fact. And if, you know, certainly quite a few watching online. So, you know, shout out to the unicorns in the room. And so part of it is you will find very specific people who have experience and who are extremely good, usually at one of these things. If you can find someone who's good at a few of them, you're really, really blessed. And, you know, man, if you can find someone who can do all of those things, immediately make them a co-founder. But only if you've known them for a while. So going back to the overall product process, I mean, there is sort of a sequential aspect to it. Truly, you start with product design, you know, and each of these, it really is a little bit of a water flow sometimes. You really can't start interaction design without actually capturing requirements. And then finally, of course, engineering, you know, ideally you're kind of in conversation all the way through. But, you know, engineering and actually implementation, often that is something that happens afterwards. So let's dig in a little bit to product design. And so what's funny is I'm cheating a little bit here. So I am actually mashing product management into this. But to me, I actually just can't do, I can't do product without, I can't do the design process without doing this part. And so it really is thinking about the business case. What's the problem? Who has the problem? What are all the possible ways to solve the problem? And what's the actual priority for each of those parts? And so, you know, indulge me. I know this isn't exactly formally a part of design. I just don't know how you could possibly do design without doing this part too. And, you know, every single one of these things has a fairly specific deliverable. And so in this case, you know, the deliverable here is a PRD, a product requirement document, or, you know, you can also call it a spec. And so the interesting thing is there's not really one way to do product design. Just as there's, you know, this, you could call this product management. Some, you know, Microsoft calls it program management. And then some organizations, you know, sort of de-emphasize some of this stuff and they just call it project management. But the project manager still actually has to think through all of these things. So, you know, the labels matter less. The fact that you do them matters a lot more. And so this is actually the actual content of my YC application from, you know, basically January of 2008 or I think it was February. And so everything that, you know, you really do sort of have to start with a problem statement. It's, you know, what we were trying to solve is this ability to post online. We looked at online services at the time. You know, blog platforms had been out for a while, but they're, you know, pretty stale actually. And the iPhone was brand new. And then we looked at email as sort of this universal way to get content online. And we thought this is a novel, different way to actually do it. And so one of the most valuable things that you can do once you have that problem statement is actually to think through who are these very, very specific people who have this problem. And so I'm going to use Posterous as an example to walk you through personas. And so personas are just one tool for designers or product people to think through who are these very, very specific people. And it's just a tool. You know, there's not really one way to do this either, but this is what we did. You know, we thought about our users really as three different types. David the dad is sort of one of them. You know, we kind of want to identify them as, you know, specific human beings. Like this is a very abridged version that you might do. You know, sometimes you fill them in on backstory, like what school did they go to or, you know, what kind of family did they grow up in or, you know, or very specific things like, you know, what type of phone do they use or what type of computer do they use. You know, back then it was did they use Internet Explorer or did they use Chrome? Did they use, you know, I'm not sure if Safari was even out yet. You know, what do they use for email? You know, what type of technology, what level of comfort with technology do they have? And so that will actually help you a lot when you're making decisions about, well, what are you trying to do and, you know, what are the features that really matter? Another persona we had was actually David's family. And so we, you know, captured this in the form of Grace the grandma. You know, and some of this is actually intention as well. It's like she's a little bit less. She uses an Asus netbook. She uses Hotmail. She doesn't really understand exactly how to use it. And part of the reason why this is incredibly important is thinking through different, you know, both modality and level of comfort with technology is often some of the most important things. Like, you know, you guys, some of you in this room are actively thinking about building things for totally late adopter industries. You know, some of the best YC companies in the past five years have been, you know, they're being deployed to construction, to, you know, global freight. So if you walk into any office in the world, you know, you're going to find some tech savvy people but not a lot. And so, you know, even for, you know, enterprise companies, for B2B companies in the room, these personas, it's still a very valuable exercise because it makes it very clear, you know, you might have your decision maker, you might have your executive and then you might have your in line level worker and their capabilities with, you know, their motivations, why they're here, they might be very different. And finally, we also had, you know, this was the dawning of social media, sort of the Cambrian era of social networks. And so it wasn't clear that Twitter was going to win yet. There were sort of a dozen different social networks that were happening. And so this was another persona. She, you know, she had very specific needs. And so we were trying to build something for her as well. And so one of the things you really do have to do as you, you know, think through a sprint, you know, whether it's the next two weeks or the next month, you know, the shorter the better, frankly. You know, a PRD document basically will detail, here are the actual features of what we're trying to build. And so there's not really one way to do it. You just, you know, try to bucket them into coherent features that make sense. So in our case, you know, one way to do it for us would be post by email with plain text. That's just one coherent thing that's a capability. You know, you could hand this to an engineer and they would understand what exactly that was. And then post by email without an account. So one of the things that we did for Posterous that was very novel was that we didn't have a sign up flow on our homepage. All you had to do was send an email from whatever email client you actually already had and you could attach anything to it and we would just reply with your new URL. And what we, it was very intentional in that we wanted to cement a totally new novel behavior that nobody had ever done. So you could just email post at posterous.com and we'd take care of the rest. The interesting thing was that was, the capability itself was not novel. There were other people who were doing it, but it wasn't a central part of the flow. And so, you know, once you're able to do the basics of it, you know, there are other things that you want to be able to do. Photo attachments, being able to take multiple attachments and turn into a web gallery, being able to support videos, and then finally a security aspect that was very important for us early on was that, you know, we launched up TechCrunch. Michael Arrington himself actually reviewed us and he immediately, he knew that if he started using it, everyone else in the valley at the time definitely had his email address. And so he almost immediately tried to get his technical friends to try and hack him. And luckily we had already figured that one out. So it wasn't possible for someone to actually spoof his posterous email address. And that was novel and, you know, actually important for us. And so I want to pause there and actually say earlier when I said it was these steps, I actually lied. There's actually an additional step in here. This whole exercise when you're talking about users, this is actually called user research. So if you see that term out there, if you, you know, end up trying to hire people for that role, this is sort of where it fits. It's that, you know, and frankly, if you're working on your startup, you should be, you know, just doing this as a matter of course. Like you should not be, you know, outsourcing this. This is just a basic piece of customer development. Understanding your users, spending time with them, you know, being able to write down specific personas for these are the types of users we want to, you know, we want to use our product and to be as basically crisp as possible around, you know, what their needs are. You know, we call that user research. And this actually does, done right, it does actually happen before you even, you know, start thinking about what problems to solve at some level. So you know, if some of you out there are trying to figure out what problem to solve, sometimes you could just go and talk to people who you want to build software for and that has worked for people. That will shake out their problems. So once you actually know what these requirements are, the next step really is prioritization. And so this is just a guideline. This has just worked for me in the past. There's not one way to do it, but you know, this is more so basic project management 101. But being able to assign these priorities to the specific features is actually a very, very useful and important exercise. You know, P0 is pretty self-explanatory. Just start on, this is just the core thing. If we don't do this, then you know, what are we here for? And so, you know, P1 is what you would consider, you know, the next obvious step. You just wouldn't ship without it, but maybe it's not quite as core. And then, you know, if you think about this in the terms of say a two-week or three-week sprint, you know, you try and get all the P0 bugs, the P1 bugs, you know, and actually, sorry, I skipped ahead a little bit in that, you know, if you haven't started using a bug database in your software development, you absolutely should. In fact, that's one of the key ways that you, you know, you as a small team, you might not need it, but as you grow your team, it can be one of the most fundamental ways that you can make sure that you're doing the right things as a product. You know, especially as your team grows, having a bug database and assigning these priorities, and you know, it doesn't have to be this. You as a team, you could figure out what these priorities mean for you, but being able to sort of manage a given sprint just at the beginning by putting these bugs in, linking to a PRD document or all of the, you know, the wireframes or the visual comps that, you know, an engineer needs. That can be one way coherently you can run your whole product and engineering organization. And so, you know, as we go down, you know, one of the things that has always worked for me is actually, you know, a lot of the devil in the details is actually in priority two and three, because things will always go wrong, almost guaranteed. I mean, I just have never been through any sprint or any release that, you know, there's things that are totally unforeseen that break things. And so part of the reason why this priority, prioritization is very important is that it makes sure that you try to set up realistic goals. You know, one of the most dangerous things in product development period is that if you don't have these priorities, you don't know what to cut. And so that two-week sprint might become three weeks, four weeks, six weeks, you know, two months, three months, and then you never ship, right? You know, and so we'll talk about that in a little bit, but this is really why priority matters. And so in this case, you know, it's pretty straightforward post by email with plain text. Hey, that's must-have. We're just going to start that first. And then one of the things that, you know, you don't always write this in the spec, but it's something that's just very useful as you think through this stage of your product development process. It's really helpful to think through who of my personas, who of my users need or want this, and you know, is that important? What's the interaction between them? You know, post by email without an account. Well, some of our less technical users are actually very scared by signing up for new products. And so being able to do this without an account really opens up our user base to the whole set of people who are not very technically savvy. And then photo attachment support. David and Irene as power users. They both, you know, it's 2008. They, you know, they had the newest most beautiful iPhone and so it's immediately the thing that they really, really wanted to do. And, you know, P2, you know, as you go down, you can kind of break down what is important and what is less important. So, you know, to be frank, this has never happened before in my life, but if you're very, very lucky and your product development goes awesome in that particular sprint, that's often one thing that you can just start, you know, it's valuable to have P2 and P3 things as a part of a given sprint simply because sometimes you'll just have extra time and someone will be able to get farther along than you hoped. And so the other way to, you know, reason why it's useful is that then you can think about your product across different sprints. So you might be doing a release this month and then P3 file, video file support. At least, you know, if your software engineer knows that that's something that they want to do, well, when they're factoring, when they're actually writing those classes or writing, you know, writing the library or architecture of that code, they'll know that they can't make it just for photos. They'll also be able to support other types of media and that can actually save everyone on the team a lot more rework. And so, you know, one of the key difficulties of product is always trying to figure out, you know, what are we doing now and what are we doing later? And so priority and being able to be very crisp about these requirements, that's one of the most fundamental ways that you can make sure, like release to release, you know that the product's going in the right direction. And so that's, you know, really, really product management 101. But if you do this, you will be far ahead of pretty much, you know, a lot of your peers. A lot of people don't even do this very basic step of writing down what these features are, who are they for, what are the problems we're trying to solve, and then what are the respective priorities. You know, and one of the classic reasons why, you know, we kind of talked about this already, but if you do the prioritization up front, then PMing a given product gets very easy because you can just cut off the bottom. Everyone sort of knows, well, you know, we're going to start with P0s first, then P1s, and then, oh, if we're ahead, like let's do the P2s and the P3s. But if we're late, well, you know, the key thing that everyone, and all of you will run into this, you really have three things in front of you, scope, quality, and time. So, you know, how much you do, that's the part of the prioritization. Quality, the reality of it is, this is not encompassed by your PRD. It's just purely in how people use your product. You know, how many bugs are there? Are there things in there that just don't work? And that, you know, that's sort of always an issue. And finally, time. You can always, you know, do all the features you want with the highest possible quality, but, you know, you might have to slip your date by two weeks, three weeks, four weeks. And, you know, if you don't cut scope, likewise, well, you might be able to hit your time, but, you know, users are going to run into a thousand bugs in production, and you're not going to like that. And so if we work backwards from that, then this is precisely the process you use to sort of fight that. And so, you know, the other thing that is very common, the other reason why prioritization is incredibly important is that, you know, without this, well, you basically can head off a lot of really strange product decisions at the pass. And so if you ever get incredibly frustrated with, you know, you're deep in some settings panel in, you know, your iPhone or, you know, any sort of product, and you're like, why is it broken like that? Well, it's probably because someone failed to do this properly. And so they just said, you know what, F it. We'll just ship it. And so, you know, it's a real danger. Like product quality and products, you know, really, really fail simply because prioritization and these basic requirements are not really figured out. And so finally, you know, and the classic thing that, you know, personas really help you with is sort of this classic trade-off of, you're gonna have users who are incredibly savvy and some people who are incredibly unsavvy. And how do you actually deal with that? How do you think through not just what you're going to do, but also how do you represent it on the screen? And so all of these things are incredibly important for this very first part, which is just pure product design. So interaction design. So you know who the user is, you know what the problem is, how do we actually translate that into, you know, something that, you know, you can actually start working on? And so the questions you ask, how will they actually do it? What are their goals, you know, and how do they achieve it? And so at the end of the day, what you're trying to get to is either a prototype or a wireframe. And so what these things are, are basically, you know, you might use a tool like OmniGraffle, or you know, there's quite a few prototyping, wireframing tools that are out there. And what you wanna do is figure out just the text, just the call to actions, just the flow, screen to screen. You don't wanna care, you don't wanna care about color, you don't wanna care about, you know, really how it looks, what font you use. You don't even really have to worry about layout too much, though it is, you know, I would start thinking about layout, you know, as a part of this process. And so the most interesting, important aspect of interaction design is actually that people treat, you know, and this is kind of a very shocking thing to me. I did research at Stanford for the late professor, Cliff Nass, and he built an entire career at Stanford based on this notion that people treat computers like people. And you know, it turns out that if a computer is polite to you, you know, a person will be likewise polite back, or you know, being negative will sort of elicit the same response. Almost every psychological principle that psychologists have proven, Cliff Nass and Byron Reeves and B.J. Fogg at Stanford were able to show that people mirror with computers, even without any sort of anthropomorphism, without, you know, Clippy, without, you know, an avatar, without anything like that. Truly, every interaction you have with computers, they're actually a conversation. And it's a conversation that happens over and over and over again because it's written in pixels, it's written in design, it's written in code. And so what is this about? At the end of the day, like, you know, interaction design is actually about commands. It's actually about telling people what to do and you actually doing it. People are incredibly suggestible, actually. One of the most interesting psychological phenomenon that I can think of, it maybe explains Trump and a lot of other things, is that actually when you absorb media, whether it's reading or, you know, any type of media, period, you actually read that stuff in your own voice. And so that actually becomes, you know, deeper, you know, kind of a part of you. And so as an interaction designer, an interaction designer is not merely the person who figures out where the buttons go or what the layout might be or what the flow is. It's also, they're also the writers. They actually are trying to influence people directly by using direct command language. And so this is actually one of the most common mistakes that founders make. They write like this. Well, you know, so just to put a point on this, really command language is about, you know, people will do whatever you tell them to do. You just really do have to tell them. And so, you know, this is a super common thing. In fact, I'm pretty sure, you know, a lot of you are making this mistake in your homepage copy, in your design, in your first time experience. You know, it's passive voice. You're, you know, you're not showing your telling. And you're just describing something about what you're doing in sort of this, you know, sort of third-party disembodied voice. And I thought a lot about why this is. I actually think big companies actually can get away with this. If you go to most big company websites, they are actually written in a very passive voice. You know, if you go to Microsoft's homepage and start clicking through the products, like the product names are like blah, blah, blah, server edition, admin, you know, 2009, whatever it is. It's like this insane word salad. And if you read it, you have no idea what that product is and who's it for. But Microsoft can do that because it's incredibly big and it has a scale that's unimaginable. And it has a sales force that will go out and sell their product. And they have incredible amounts of capital. But you as a startup cannot afford that. And so, everything that you write needs to be direct. It has to be a direct, personal voice. And you need the call to action to be incredibly obvious. Like, you know, the previous, you know, why is this so small? Like, this happens all the time, actually. People never are opinionated about what you want the next user to do. And so, you know, this is an extreme example, obviously. But, you know, what you want is, you know, contrast. You want to be incredibly direct. You want to use command language. And you want the call to action to be, you know, someone goes to that webpage and they just know. They go to that mobile app and they just know what they need to do. So, you know, the other part of interaction design that is actually also very important is trying to figure out how do you, you know, aside from direct command language, how do you get people to actually do things? And so, obviously, this is an oversimplification. But I generally think about this in two ways. One is, how do you remove actions? One of the things that Paul Graham really directly, you know, called out to me on our signup page back in 2008 was why the hell do you have a confirmed password? You know, well, I mean, you have their email address. If it's broken, just ask them to, you know, click forgot password. It's fine. It's really not that bad to just have them type a wrong password and have them recover it. And most people won't type the wrong password. So it's fine. Why would you optimize for this strange case that doesn't happen that often? And it's actually really interesting. If you remove that confirmed password, it actually will increase conversion on a signup flow by as much as 50% on average. So it's significant. You know, cognitive load is an incredibly real issue. The other strategy that you can really use is how do you chop up an action if it's incredibly complicated? How do you break it up into steps? And so, you know, I like to use this example because it's like, you know, Windows 95 is this absurd, you know, I mean, one of the first wizards really to come out. But, you know, I think that there is a timeless aspect to it. You know, the other thing that I often think about because, you know, some of you in this room will be doing fairly B2B enterprise, just like complicated configuration steps. You know, kind of like doing your taxes, actually. You don't have to do the taxes that often. But when you do, it can get really complicated. You know, you might have branching flow. You might have a lot that you have to take care of. And so the other thing that you can do is actually chop up those actions more intelligently with a wizard. And so, you know, these are a couple patterns that you can use. And then I want to kind of stop there and sort of really point out another super big misconception that beginning designers or people doing it yourself, you know, have, you know, they sort of run into all the time. They're always trying to do something incredibly novel. And at the interaction design stage, I don't recommend that. I actually really recommend that you just steal what works. And so, you know, don't reinvent the wheel. It's very important for you to be aware of what are the conventions and things that people already use. And so, you know, these are very basic ones, for instance. You know, pull to refresh is something that works incredibly well. A lot of apps do it. But, you know, it's become a convention because it's easy and natural to use. It's satisfying. It's great to use. Swipe left to right. You know, this is from a mailbox app, which sold to Dropbox. And so, you know, there's a reason why, you know, mailbox was incredibly innovative. But the reality was, like, you guys generally don't need to. And you can get really, really far with just design patterns. And so, you know, this does take a little bit of time. And, frankly, anyone who uses computers for any amount of time, you can just click through all of these things and you'll just, you know, the, you know, synapses of recognition will just kind of come to you. You'll just realize, oh, my God, there's actually so much that, you know, you have already seen that you can just steal wholesale. And that's actually what is desirable for you for most of your designs. You don't want to be novel. You want to be something that gets people to the right place as quickly as possible. And so, you know, there are just so many of these that I can't possibly cover them. Like, that would be its own 10-week course. So, you know, I highly recommend, you know, go to that website and check it out. And so one of the really interesting things I do want to call out, and, you know, it's sort of a danger zone for using design patterns. You know, one of the more common ones that I've seen is actually, you know, using the wrong kind of pagination. Like, you know, one of the things that can be very frustrating to use, I've seen, you know, people design for the web and they actually use these little dots to represent where you are in sort of a swiping navigation. But you're on the web and you're using a touchpad and that makes no sense at all. And in fact, it's, you know, really, really bad. And so you have to be incredibly careful with mixing modalities, you know, and even each one of these design patterns as you implement them, you should sort of think through, like, well, why am I here? What is the user trying to do? And does this make sense for my modality? Here's probably the most tactical part of the whole talk, but we're going to start off with a little bit of theory. You know, visual design really is about, you know, again, these things really do blend together. It's the interaction design and visual design are, you know, they're super linked. And it really is how you tell a user what is important at the visual level. You know, what emotions do we want to evoke? How do we want them to feel? And the output of this is either, you know, pixel-level compositions, usually, you know, Photoshop or, you know, sometimes the actual HTML CSS. And so the really interesting thing here is that, you know, to go back to function over form, you know, when you're forced to be simple, you actually have to solve the real problem. So, you know, I want to start off by just saying, like, let's just avoid as much ornament as possible. Like, you know, ultimately, we're here to build something that solves people's problems, and it's about that substance. One of my favorite design thinkers is actually Edward Tufte. He has a great book called The Visual Display of Quantity. quantitative information. And so one of the key concepts that he talks about is chart junk. So he just can't stand chart junk. And these are just examples of it. Here's a chart, but there's no y-axis. And we don't know what the x-axis means either. And why is that a green background for this map? Why are there these strange gradients and what do they mean? And then again, one of the major misconceptions that people starting out have around visual design is visual design is not actually about necessarily expressing yourself per se. The key thing is what information are you trying to get across? And so one of the key principles that you can actually apply is just look at any design that you're doing and just try to figure out if it can be removed without taking away any meaning. So that includes text, that includes lines, borders, really anything. Even colons. A pet peeve of mine is seeing colons all over a form on the web or in a mobile app. And it's like, if you removed it, would you even notice it? In fact, it looks cleaner. And so this is a stupid example but an incredibly basic one that you can apply over and over again throughout anything that you do. Ornaments at the end of the day are not signal. You're really like, and this is a very opinionated version of design, of course, but it's just worked for me. It's that we want to eliminate this type of ornament because we want to focus on that which is useful. And so how do we actually do that? Okay, so I have actually just three very simple principles that you can use in visual design. The first and most important is actually contrast. And so I'll just walk you through a very simple example. The most basic type of contrast that you can give is bold versus not bold. More important, less important. Incredibly simple. Bold is not the only way you can actually denote what is important versus not. You can use color. And so that's an incredibly valuable tool. You can also use size. And so immediately you can kind of see, as a visual designer, I am being opinionated about what you should pay attention to when and what is important and what is less important. And so what's funny is if we unwind those things, all of these suddenly become basically the same level. If everything is bold, nothing is bold. And so that's something that you should definitely remember as you go about your business and you try to design anything. It's, you know, all of your choices around color, around weight, you know, it really is a question of contrast. And so it goes both to the less important but also the more important. You know, if you want to, you can use color and weight and size to also make something even more important. The final really cool trick that I like to use is, you know, you can kind of, we call it the squint test. So if you can look, if you look at any webpage, any effective mobile app, immediately if you just squint your eyes at it, if you can't make out the details of what's on that page, but you can just make out the basic shapes of, you can, you know, without having the ability to read any of this, you kind of know, oh, there's something, your eye is immediately drawn to the thing that is the highest contrast, the highest weight on the page. And so this is a very basic, you know, basically your hammer for visual design is contrast. Related to that is closeness. And so, you know, you as a designer can take related flows, related ideas, and put them together to make them actually related. And that, you know, serves your purpose as a designer. And so I can't tell you how often, this is just a personal pet peeve of mine, you know, you have this login page, and then why, you know, what is going on there? Like why, why is the login page, like it's very confusing because the user will come here and say, why is the login there? Is it like a part of creating an account? It doesn't look like it's a part of that other thing. You know, that to me feels so much better. And so it's a very simple principle, but you know, one to be very, very mindful of. But if you put all of both, just those two very simple concepts together, you get visual hierarchy. And this is where a grid really comes into play. This is why Bootstrap from Twitter was this incredible tool that just suddenly put in the hands of everyone here, you know, the basic building blocks of being able to create great visual design, do-it-yourself style. In a nutshell, you know, sort of, not to break it down to the CSS level, but you could literally just create divs that were of any size that would automatically flow into a flexible grid. And that's incredibly valuable. And so, you know, this is just, you know, literally the boilerplate stuff off of the old version of Bootstrap. But, you know, it's a good example of using a grid. And so why this is important, well, you know, we can overlay this grid and we can actually see that we are immediately, you know, and so you can see how the headings actually just line up to particular sections of this visual design. And it's important because users, when they're using your site, they're coming to your site and trying to figure out, you know, why am I here? What am I trying to do? And they will immediately be drawn to the highest contrast things. Remember the squint test? You'll immediately go to, like, headings exist exactly for this reason. A user will go to a webpage or an app and they will actually just scan the page and they'll look for the highest contrast things and try to figure out, is this what I want? Is this what I'm looking for? I have a goal. You know, is this going to get me what I want? And then if so, then they'll actually direct their, you know, if I do care about that part, then immediately I'm going to dive deeper into, you know, exactly that part. And so visual hierarchy is your best tool for giving your users, you know, basically the guidepost. Like, this is the way to go. So, okay, now we got visual hierarchy, but you know, what do I do with all of these lines and, you know, why are there so many, you know, how do I use color? You know, there's, it can be very confusing. And this is a common mistake for people who do DIYs. They just, you know, put boxes all over everything or they use lines and things like that. Here's my super extreme oversimplification on how to do your own layout. You know, basically figure out what you need to put on the page. And then first, you know, try to use padding and margin to the extent that you can, you know, you can use a grid, you can put related things close to each other. And then next, use a line if you have to. And so, you know, 90% of the time you can probably get away with just using, you know, a proper grid with enough spacing, putting related things together with good headings, thinking through the contrast. But finally, you know, a box is actually a very important thing. You know, it draws a lot of attention. So that's why you'll see it so commonly on, you know, websites around a call to action. It, you know, really is a high contrast thing. So, but be very, very careful when you use it because otherwise, you know, you kind of end up with this sauce of a ton of boxes. And, you know, I have no idea what's important and what I should be doing. Whereas if you use a grid, if you use this sort of visual hierarchy, it is very straightforward. You know, the other thing that's very valuable is like you don't have to fill every single design, you know, margin to margin. White space can be incredibly useful, you know, sometimes even helping direct a user, helping to explain what's going on. Like having, you know, space on the side just gives you a place to put that. Or to just, you know, focus the user's attention. And so, you know, those are incredibly basic. But, you know, a lot of these minimal techniques are really from, you know, the folks who created Helvetica, from Swiss design in the, you know, mid-20th century. You know, and so there's, these are incredibly simple things. But the use of contrast, the use of a grid, and the use of color can actually do a lot. Okay. So I said that we're almost done with the tactical part, but I lied because there is actually a part that I did not cover yet. Most people think about design as the creation part, but it's definitely not the only part. And here's the reason why. You know, if you ever put yourself, you know, some of you have, you know, took the airport, took an airplane and walked through SFO airport and maybe that was the first time you've ever been. You know, every airport is this, you know, itself is designed. And one of the issues with a badly designed airport or a badly designed user experience is that we don't know where to go. We don't know where we are. And we don't, you know, the signs are placed in the wrong place. And there's actually, it's actually incredibly hard. If you put yourself in the shoes of the airport designer, the architect who created this airport, and more specifically the person who put up the, who designed where the signs go. You know, you have the design. You know where everything is. You're sitting there and, you know, your design tool and you know where everything, like it's all loaded in your head. But how are you going to know for someone who's never been to that airport, you know, what am I looking at? You know, I'm at every given point in that airport. You know, what am I trying to do? What are my goals? And, you know, lack of proper signage is one of the, you know, I get lost in airports all the time. I got lost in like Paris accidentally, like just like this weekend actually. And so this is actually what feedback is designed to solve. And so there's actually two types of, that, you know, both designers and founders should be really, really aware of. One is usability testing. So actually that moment between the wireframe and, you know, you can kind of even do this in parallel. Like once you have the wireframe, you can actually start doing usability testing with the wireframe. You can print it out and actually sit down with people who have never seen it before and just sort of walk them through it. Or even better, say, you know, just ask open-ended questions. You know, what are we looking at? You know, you can prompt them a little bit with like, oh, well, you're here to do blah, blah, blah. And it's like, what are you reading? What are you going to click next? You know, why am I here? That's before you even write a line of code, you can do a lot to test out whether or not this thing is going to work. And it's way cheaper to do that than actually have to fix it in a bug in code later. And then the other part that is way, way under appreciated but is extremely important for great product is actually customer support. Most people treat their support line as basically like kind of a shredder. You know, they just don't even look at it. They don't reply to it. But the reality of product is that, you know, most, and this is an extremely, extremely common problem for people building things for other people, is that we always assume that the product that we're creating, well, it's just the visible part, right? It's the 80% case. You know, it's the ideal case in your wireframe or in the requirement document. But the best requirement documents, the best wireframes, the best designs, the best ship thing actually solve all of these other use cases that, you know, a PM might sit there and say, oh, well, once in a blue moon this happens. But there are actually 10,000 things like that that once in a blue moon happen. And if you add them all up, well, you have a broken product. And so that's one of the most fundamental reasons why we are so dissatisfied with the products that we use day to day. It's that some PM or some designer looked at that and said, oh, when is that ever going to happen? So the devil truly is in these long tail bugs. And, you know, as a founder, the best part is, I mean, these big companies, they don't think about this at all. Like they literally make it impossible for, you know, designers and engineers and the product team to actually have anything to do with customer support. They just think of their users as cattle. And so the greatest advantage that you have in this room is that you're a human being, you built it yourself, and when someone comes to you and says, oh, my God, I'm stuck here. What happened? You don't have to just throw that email in the garbage. You can say, oh, my God, that's a bug. Oh, I'm going to fix it. And then once you do that, you have an evangelist for life. Because we live in a world with products that are incredibly impersonal, you know, we're alone in this, you know, incredible place that, like, you know, we are so frustrated when our products don't work. And nobody listens. And so if you're the creator of that product and you listen, well, you know, you only need a couple hundred people like that and you're well on your way to something that could be incredibly powerful. You know, to steal, you know, a quote from Paul Bukai, don't try and go and make something that, you know, a thousand people kind of like. You really need to go and create something that a hundred people absolutely love. And customer support is the way you can do that. And so, you know, and design, the designer, the person who actually puts together the wireframes, who, like, thinks through the user, they're the best on the whole team to actually think through that. So, you know, they're awesome at advocating for the user. And this process is incredibly complicated, but I just want you to make sure that you know, like, these are the parts of, you know, how I think about a great product. You know, it's not just user research. It's all of these things, one after the other, and usability testing and customer support are the key pieces of this. And so, you know, you're never done with just one sprint. You're basically in a perpetual cycle of doing this over and over again. And you really do need to, you don't need people doing every single piece of this, but you do need to spend a little bit of time thinking about each piece of this."
  },
  {
    "name_video": "How to invent the future (part 1)",
    "description_video": "One of the pioneers of personal computing, Alan Kay shares his story and how to think about building for the future. From YC's Startup School in 2017.",
    "related_categories": [
      "Technical"
    ],
    "page_url": "/library/77-how-to-invent-the-future-part-1",
    "youtube_url": "https://youtube.com/watch?v=id1WShzzMCQ",
    "mp3_file": "downloaded/How_to_invent_the_future_(part_1).mp3",
    "mp3_content": "We have Alan Kay with us this week, he's going to do both lectures. Alan Kay has forgotten more about how to invent the future than the rest of us. That would make a very bad class, Sam, if I have. I think Alan is the genuine world expert on this, invented with others the Xerox Alto, which we recently restored at Y Combinator with a group of incredible computer scientists. And I think it's the person who has been most thoughtful, probably to anyone I've ever met, about how you build organizations to do real innovation. So thank you very much for coming, I am super excited to hear this. Great, Sam. So, well, I'm thoughtful about it because I got to watch masters do it. I'm basically a research scientist, but I was interested in the process done by far better managers than me who could deal with larger sets of ideas. And I'll try and give you a gist here. Basically, I think because people are here because they want to do startups and make money, I just want to point out that if you want to make money, don't bother with a startup, create an industry. Because then you get trillions instead of billions. So it's about a factor of 1,000 between doing invention over innovation. In other words, not going incrementally from the present, but carving out a whole new set of ideas that creates an entirely new context. And we'll see some of the ways to go about it, and we'll also see some of the barriers and see if this, no, this has got a bad user interface because it has the back button near to the front button, see if that works. So a lot of what these two days are about are talking about the place that most people naturally live, which is the present. But the problem with the present, it is so glittery and distracting, there's so much stuff going on. It's hard to think about anything except the present, and if you're thinking about the present, your ideas are going to be derived from the present, and therefore, they're going to be incremental, and therefore, you wind up doing innovation. It's not that you can't make money that way. But today, I'm going to do the opposite of my usual order. I usually like to build a lot of context first, but I thought in the spirit of the Harvard Business School and the equivalent at Stanford, I'd start off with things like results and process and methods first, so you have a feeling that I'm actually saying something that you might quote unquote apply. But the important talk is really on Thursday. I'm still struggling with making it the right size. So today, we're going to do that, and I urge you to copy my email address. I love emails. We're not going to have time to have the discussion we should have here. I welcome any questions. And by the way, while I'm talking, I welcome questions at any time. Don't be shy. Okay, and here's why school pisses me off. Great man in our field, Marvin Minsky, observed that this is the best place ever to keep you from ever thinking about anything for long enough. So you don't want to try and learn in a classroom. It's terrible. In fact, I don't like to do classroom process, partly because of the time constraints, but also because it's oral. We might as well be sitting around a campfire 100,000 years ago. And almost everything that's happened that's important in the last several thousands of years has been basically literary in form. Okay, so one of my favorite Picasso sayings, and he meant a lot of different things by this. Part of it is the best you can ever do with any kind of representation is make a kind of a map, even when you're trying to make a map of a map. You're making a lie compared to the thing you're trying to represent. But if you do it right, people can gain some intuition about what the map is about. That's what science is all about. This talk in 50 minutes has to be a lie. It really is. I'm leaving out a lot of important things. But I think the shadow of the talk, or whatever is projected by the talk, is pretty close to the way things actually are for doing this very different process. And a thing that Picasso didn't say, but he knew and he meant, is art is also the lie that tells the truth that wakes you up. So if something wakes you up in the next two days, I will have done my job. And then the two days are really about another Picasso quote, which is learn the rules like a pro, so you can break them like an artist. And not doing this is probably the greatest sin of Silicon Valley since the 80s. Almost never, nobody has bothered becoming a pro, particularly in software and user interface design. And so when they break the rules, they're breaking them like a dumb child does by throwing rocks through windows. And it's probably the most sickening thing to see about the field. So another way of thinking about the mantra is you have to learn everything and then find a way of forgetting it, so you can have your own ideas. But what you forget is everything except the perfume. So when you have an idea, then your nose will pick up the right scent, and you'll be able to make use of all the stuff that you've learned after you've had the idea. Now, I was specifically asked to talk about Xerox PARC because that was an example of making trillions instead of billions. And so I thought what I'll do here is just show you a couple of results from Xerox PARC, and I'll then try to give you some of what it took to get those results. So Xerox PARC is known for this machine that happened, I gave one to Sam. He got it working with the help of some really great people. So this machine happened in 1973, which was 11 years before the Mac, and its screen was more than twice the size of the Mac. And it was more like a Mac of 1988 or 1989. So it was about maybe 15 or 16 years ahead of the commercial development. And the commercial development actually was based on the stuff that was done on this machine. So this is an example of the best way to predict the future is to invent it. There was nothing like this before. Once we did it, people could see, yeah, there could be something like this because here it is. In fact, we made 2,000 of these. So there's a lot to look at. They had bitmap screens, they had pointing device. The famous GUI, which is you're still using today. WYSIWYG means what you see is what you get. Desktop publishing and the whole media gig. What does that say? It's not helping me. Anybody read that? Symmetrical reading and writing. Yeah, symmetrical reading and writing. Meaning, what you almost never get on the web, but that you did get in many of the apps of the 1980s, which is when you get a document, the thing that you read the document with also allows you to edit the document. So if you think about the web, it's actually much more made for consumption than it is made for authoring. They're completely decoupled. And most of the authoring facilities are typing in tiny little windows and then pushing a button to see what you did. So this is a vast retrogression. What we call real loop these days, we just called it object-oriented programming back then. I made up that term. But what's called object-oriented programming today is not what we had back then, and I don't think I'll have time to really talk about the profound differences. Suffice to say that what we did at PARC became popular and everybody wanted it even if they only got the label. Comparison is you can go out and buy a set of designer jeans with the label Harvard on them. And for all I know, with Stanford on them. Laser printer, main difference between this and what you have today is the first one was a page a second. So most people have never printed with a page a second printer. Postscript, outline fonts, and so forth. The Ethernet, peer-to-peer and client-server, and 50% of the Internet, PARC did an Internet before there was the Internet. And we're part of that community, so we participated in the official Internet. So we think of that as eight and a half inventions. How long did it take? Well, 25 researchers for five years. Think about that. Two dozen people did all of these things in about five years. Cost about $10 million to $12 million a year in today's money. Return is about $35 trillion. This is an old number. It's probably more like 40 now. So that's a pretty good return on investment if you think about it. If you like to do little spreadsheets and stuff, 15% is good, right, Sam? Yeah, so, and it was an industry rather than an increment. People say, well, but Xerox didn't benefit from this. They didn't make any money for it. That's complete bullshit. It's made up by companies that don't want to invest in research. Xerox made about a factor of 250 over their entire investment in PARC. So that's 25,000% return right there. Xerox's bug was they didn't understand the rest of this stuff, but they certainly understood what a laser printer was, and they made billions from it. And in fact, if you look at it, it was better for the world that they stonewalled us, because no single company can handle an entire industry. So this made it possible. The Japanese had to do printers slightly differently than that. And this kind of heaven on earth lasted for about 12 years. Xerox finally fired the guy who made it all happen. You'd think he would have been rewarded, right, because he made all this stuff happen. But in fact, they hated him. And they hated him for the very reason that most companies hate people who are doing something different, because it makes middle management and upper management extremely uncomfortable. The last thing they want to do is make trillions. What they want to do is make a few millions in a comfortable way. And so this leads to an enormous problem that where the real job of upper management in the 20th and 21st century is to learn things. Because change is the constant thing that's going on. What they try to do is to maximize whatever they had when they got into the job and whatever the company was successful at. Think about it, if large companies were actually rational, there'd never be a small company. There'd be no startups. Because large companies have vastly more resources for doing new things than any venture capitalist. Right, Sam? They've got gazillions of money. But because they refuse to get into new businesses and refuse to change their old businesses, you guys have a chance. So just pray that they don't ever wake up. Now the interesting thing is if you look at that collection of inventions, you see every single one of them today. And what's interesting is if I were to enlarge this a bit, I would show that there's hardly been anything interesting invented since this funding stopped. So it's been a basically nuclear winter of people cashing in on these inventions and extracting the wealth from them, but hardly any efforts of any interesting kind to go beyond them. And the last point here is the lack of curiosity. Sam is a huge, I met Sam because he wanted to know where did all this stuff come from? I've hardly ever been asked that question. It's the most successful generation of wealth in computing history. And almost nobody wants to know. Sam did. And the difficult thing about today and Thursday is the world that you grew up in, because I don't see anybody. Is anybody here older than 35? Okay, yeah, I see a little more reflectivity back there. Yeah, so almost everybody in the room grew up in a world that was unlike the world I'm going to just tell you about now. So it's just many, many things were qualitatively different in ways that are sometimes difficult to explain. So here's the book to read. This is why lectures suck. This is a 500 page book done very carefully about the whole story of ARPA and Xerox PARC. Anybody who's really interested, read this book. This is a tribute I wrote to this whole research community about, I don't know, 14, 15 years ago. And I'll hand it out at the end of the class. And the main thing that's interesting about it, perhaps, is the bibliography, which has a lot of references on more detailed things you can read about how this particular community operated, right? And the important thing about Xerox PARC, which is not emphasized enough, is that PARC was just another one of the ARPA research projects. So there was eight years of research before PARC happened. And PARC only happened because of the Vietnam War. Nobody wanted to try to do this stuff inside of a company. The company quarterly cycles and everything else are really antithetical to long range thinking. So this stuff was all funded by Cold War funds in the public domain. So none of the IP was kept secret. But it was done in a better rhythm. So to get the $35 trillion, it actually required not five years, but 12 to 14 years. We were the lucky researchers who got our PhDs in this process. And we're the right age to go to PARC and finish it off, right? And as we'll see, I'm not going to dwell on it much more, but the zeitgeist of this way of doing things goes back to the rate, especially the radar effort at MIT, then the air defense effort, and then ARPA, and then PARC. So there's a long continuity here of kind of how do you work on things that are doable, but where you have to invent several generations of technology to get to the thing that's doable. So most of these things are not doable with the technology that's lying around. That is the problem with these hard problems. Okay, so the general world, the normal world, the present, for most of this period was either punch card accounting machines or their replacement. After IBM said famously there's no room for more than five or six computers in the entire world. world, they wound up doing the first mass-produced computer, the 1401, the first computer I ever programmed, to replace their punch card machines before other computer companies did. So they did sort of a Trump-like reversal on their belief and wound up owning the 60s and much of the 70s. And the most important thing, and this is a dumb sentence because you don't know what these machines were like. So I realized after I put it in there that why did I even put this sentence in, right? But the way I look at what's going on at any given time, whether it's today, 30 or 40 years ago, is whatever is going on right now is just crap by definition. If we know about it, except in the 1 10th of 1% or 1,000th of 1%, it's gotten mundane. And part of it is just because of the bell curve of normality in humans. Whatever it is, it gets converted to something like normal, no matter how exciting it is. And so when things are widely successful, they tend to bring up the mean of the bell curve a little bit for everybody, raises all boats. But in fact, there's also this regression to the mean on almost all of these things. So living in the present, man, you're just out of it if you're trying to think about things from what we have now. Now, there are two processes. There's the bomb project and the radar project at MIT that had roughly the same process, roughly the same difficulty. You have to realize the US was in World War II for only about 2 and 1 1⁄2 years. Pearl Harbor was December of 1941, and so we had 42, 43, 44, 3 and 1⁄2 years. And a lot of things got done. Most interesting thing is for the first time in history, really, a lot of really good scientists and a lot of really good engineers started working together and cloning each other. So seven Nobel Prizes came out of the Building 20 thing because they were physicists who put on their engineering hats to make 185 different kinds of radar systems and install them in every size of building and plane and boat. And World War II was basically a war of supply, and it was the ability to stave off the German submarines that actually won the war for us. Most people don't think of it that way, but that's what happened. So the Zeitgeist I'm talking about came out of this group, and there's a couple of good books about how these people went about doing things. Maybe the number one thing is what I have on the right-hand side is basically they said, forget about your egos. I really meant it. Doesn't matter who you are, how smart you are, how smart you think you are. There's only one thing that counts here is making progress, and we make progress through synergy. And they learned how to do this, and they passed it on generation after generation. Well, the next round of this after World War II was the Cold War and the air defense system that was done in the 50s. And again at MIT, the first displays that you could interact with, that is essentially a stylus in the guy's hand. It was called the light gun. So he's pointing at something on the screen and squeezing the trigger like you would put a stylus down and push it down, and the light gun can tell, the computer can tell what the light gun is looking at. So you can do all of the stuff that you're used to today. To give you an idea of what these guys did, you can't really see what this is, right? It's just like, it's obviously four floors of a building. This is a football field. And if you notice the second floor there, it says Computer A and Computer B. Each one of those computers had 50,000 vacuum tubes, both running the same programs at the same time and many other interesting things I don't have time to talk about. But I'll just say that when one of these computers started crashing, it took it three or four days to crash. And the reason is it was running diagnostics on itself. And every time an instruction failed, it would patch in a simulated instruction based on what instructions were still working. So what would happen is the machine would just get slower and slower, and more software-like, more like a Turing machine. Usually they could fix it before it came all the way down. Meanwhile, the other one was still working. But even though I shouldn't be digressing, there's a fun thing here. There are 32 of these concrete bunkers made. So the two interesting things, what happened to this stuff? Anybody know? Does this look like anything you've ever seen before? No? Space program stuff? No, that's but. Airline radar, sorry. Yeah, yeah. This actually was the invention of our air traffic control system. That's what it was designed to do, except it was designed to control traffic of both American and Russian bombers. And in fact, if many of the displays, before they replaced them with flat screen displays, were basically the same big round things. So this whole system lasted until 1982, when the last one was finally decommissioned. And 50,000 vacuum tubes, they're like incandescent light bulbs. They blow out, so they're always blowing out. So of course, there are redundant ones there. Where do we get the vacuum tubes from? Think about it, all the way through the 70s. Parachute power? Huh? Parachute outside the duct? No. No, this is vacuum. No transistors in these machines. No transistors. These are the- From Russia? Absolutely. How did you know that? I've heard it before. Yeah. That's good, and you remembered it. That's good. For the last 12 or 18 years of this defense system, which was never used against the Russians ever, because they never tried to bomb us. It was actually obsolete very soon because of ICBMs. It couldn't track them. There's a whole other system for doing that. Yeah, but we kept it going. And there are reasons why it was kept going. We bought, while we're still contending in the Russian for the Cold War, we're buying vacuum tubes from them, too. And by the way, people still buy vacuum tubes from the Russians for getting old 50s guitar amp sounds, those overdriven sounds. And this guy who was one of the inventors of artificial intelligence and the inventor of the programming language Lisp, John McCarthy, looked at one of these in the 50s and said, everybody's going to have one in their home someday, because he didn't give a shit about the concrete bunkers and anything else like that. Because what he thought was, yeah, this is like an electric power generating station. Nobody ever sees them, but they're out there. We got wires going into the home for it. It's like where we get our water from. It's where we get our gas from. So utilities, so he thought, oh, there will be an information utility, and it will actually be a human right, like the telephone, to have one of these things in your home that is connected to all the world's information. So that was one of the earliest and most influential ideas. 1962, I'm going to show you a system done on one of these supercomputers. This is done on the test computer at Lincoln Labs for this whole SAGE system. So this computer was close to the size of this entire building, with one guy on it at 3 o'clock in the morning. So take a look at this. This is Ivan Sutherland. So it doesn't even really have a display. It's actually simulating a computer display here. This is just an oscilloscope. So what Ivan wants to do is to draw a flange. And so he says, OK, it's kind of like this. Now take these guys and make them all mutually perpendicular. And wow, Sketchpad just solved that problem. So it's a dynamic problem solver in there. First window that clipped. Now he wants to put a hole in the flange. So these are guidelines. And the first thing he does is said, OK, I want to make these parallel. And see, Sketchpad keeps them on the line there and lines them up. And now he's using them as guidelines to draw dashed lines. You'll see here he misses. And now he makes the guidelines invisible. They're still there. The constraint was called linearity there. And he has a knob to continuously zoom. So this is the first computer graphics ever. And he wants some rivets to go along with that flange. And so again, this is why this system is called Sketchpad, because you just casually draw. He's going to use that as the center for the arc here. And again, he's going to say, take these guys and make them mutually perpendicular. And here, Sketchpad solves that problem. So you wind up with a symmetric object. And he can change things. And he'll get another solution. He could have constrained the side lengths to be ratios of each other. And the kind of problem solving this system could do were included nonlinear problems. So there he's got a rivet. And what's cool about this, that is a master rivet, what we'd call a class in object-oriented programming. What we'd call a class in object-oriented programming. So this is not that rivet, but an instance of that master rivet. You might wonder, why is the display bouncing around like that? Well, it's putting up every dot individually. And about half the power of this supercomputer is being used to just do that. So here's another instance of the rivet. Here's another one. And he says, whoops, I didn't want to have those crossbars there. So I'll go back to the master rivet and make the crossbars invisible. They're still there, but invisible. And we see the instances. So this is object-oriented programming. Maybe nicer than you've seen it. Get rid of those guys. And now, that construction that he made, he's made it into a master. He's made it into a master. And so he can make instances of it. OK, get the idea? I have a question. Yes. What has gone wrong to sort of regressed from here? Well, anybody in this class ever seen Sketchpad before? So that's part of the answer. OK. Yeah, we'll pick that and go along. It's sort of the larger question that we have to. It's worthwhile bringing up the question. Here he's rotating three of them. So this is the most shocking thing I'd ever seen when I went to graduate school in 66. This system was only three years old at that time. And I'd been programming for five years, and just conventional programming. And seeing this, it blew my mind, because it was exactly different than everything I thought about computing. As soon as I saw it, I realized, oh, yeah, of course, you can do that. But I didn't think about that. I even did. OK. So Sketchpad, interactive computer graphics, in the way we recognize today for the first time, objects, masters, and instances. The programming was not done by the kind of programming today, but by problem solving, which I think you can imagine is much nicer. Like, it will find a solution. And it creates automatic dynamic simulation. So it's not just for drawing bridges. When you draw the bridge in, it knows how to simulate the bridge and tell you what the stresses and strains are. So I said to Ivan, Ivan, you did all of this in one year? This was his PhD thesis. I said, you did all this in one year by yourself. How could you possibly do it? And he said, well, I didn't know it was hard. He just went after what the problem is. And if you read his thesis, and you should, because you can see there are things that are of absolute goodness still today. It's not just relatively good for being done more than 50 years. It's absolutely good. And his thesis is, every other page is an apology because it doesn't do more. Because Ivan was working on the problem. He wasn't working on what you could do. He was working on the problem. Yeah. So Sketchpad was a bombshell in this research community it was about to happen. Because right away, you were looking at the future. You just had to believe that a room, a building-sized computer was going to wind up on a laptop, or even something at a desk. So the main player here back then was a guy by the name of Lick, Licklider. He got given some money in 1962 by ARPA before the D. And whenever anybody asked him, what are you going to do? This is what he would say. Computers are destined to become interactive intellectual amplifiers for everyone in the world, universally networked worldwide. He would not say anything more. Simply gave out money. Now, here's some bullet points. I hate bullet points, but this is a perfect class, I think, to put bullet points in. And I found 16 that will tell you just what you have to do. And I've thought of a few since, but 16 is more than enough. So the first thing was just picking an idea that's worth dedicating your life, if necessary, to. So this stuff was human destiny fixing big human problems, like we can't think very well. We need to make things to help us to think. We need to make things to help us cooperate. So these were save the world kind of ideas, and they were done when the Russians were starting to test hydrogen bombs, and things did not look so good. Forget about goals. The problem is that goals tend to be much more idiosyncratic to individual humans. So research wants to be a vision. So notice there aren't any goals in the ARPA dream. And that allowed Licklider to fund 15 or 20 super smart people who thought they had ways of approaching the dream, and some of these people didn't agree, and some of them hated each other. And Lick didn't give a shit. He just wanted smart people working on this dream. So fund people, not projects. ARPA never decided, and we'll see a slight modification of this. But basically, fund people, not projects. If you're going to do that, you better have the very best people. So if you know MacArthur grants are for individuals, but this funding was funding groups, like you funded MacArthur. Just five years, forget it. Nobody at MacArthur asks, you don't get a second MacArthur grant. Here they would get another grant if they'd done something good in five years. But basically, the idea of MacArthur is throw away. We've identified this person of extreme potential. Let's just give them five years of funding, and we won't cry if they don't do anything. It turns out most MacArthur people do do something, because the people that attract attention are people who are not working for money. They're doing it because they must. They're people, like artists, are people who do their art because they must. Yeah, community, not a project. You have to fund problem finding. This really drives funders crazy today. What do I mean by that? Most of the time when you're working on hard problems, you don't know what the right problem is. This is why visions are really good. Visions are detached. If you pick a problem too early, you might be picking it out of the current context. And therefore, you're going to be hampered, unless you're incredibly lucky. So ARPA put a lot of money into just people dicking around with stuff. Milestones, not deadlines. Baseball, not golf. Meaning, when you lose a stroke in golf, you cry. When you strike out in baseball, you better not cry, because you're going to do it a lot. And this is what Licklider said to them. He said, look, if you're batting 350 in baseball, you're really doing well. And if you look at what we're funding, if we bat 350, we're going to change the world, that's what happened. Nobody cares about all the stuff that didn't work. And people said, well, what about the 65% failure? And they said, well, it's not failure in baseball, it's overhead. Hitting a ball is hard. When you're doing something really, really hard, the times you don't do it well is just overhead for doing it the times you do well. And this is probably the biggest distinction that business people do not understand, because what they want is actually teeny little uninteresting projects that are guaranteed for success. But sports is right in front of us. Sports is really hard, and most sports people are not succeeding all the time. What's the thing in, anybody know baseball here? What's the thing in baseball that's called an error? Like what? No, just fielding. Yeah, what's an error in baseball? Not catching a fly ball. How good are the average fielders? They're 98.5% effective, so really good ones are like 1% error. So an error in technical stuff is designing to build a computer system and failing to build it. Like anybody should be able, or deciding to build a software system and failing to build it. You just should be able to knock that off. But you're in this other range when you're trying to do design. And it's really two different things. So here's a memo Lick wrote in 63 shortly after he got this initial money from ARPA to members and affiliates of the Intergalactic Computing Network. And they asked him, why did you call it that? And he said, well, engineers always give you the minimum. And I want a network that spans the entire planet, so I'm asking for an intergalactic one. And when they scale it down, we'll still get, so that's where the Internet came from, literally. The original name of the Internet was the Intergalactic Computing. Nobody knew how to do it back then. Packet, for instance, packet switching had not been invented in 63. And here's a nice line in that memo. If we succeed in making an intergalactic network, then our main problem will be learning to communicate with aliens. And he meant this in the biggest possible way, and I don't have time to really explain it. It's really interesting. People who are interested in this should write me an email. Didn't mean just other people. He meant other software, other computers. Meant what does it mean to communicate when you scale things up? So this guy was a big thinker. Number nine, you can't think inside the beltway. That's, of course, referring to Washington DC, but this is a general principle. And they asked him why, and he said, well, because there's too much noise, there's too much politics, there's too much bullshit, and nobody does research in Washington DC. So the last thing we want to do as ARPA funders is to try to think while we're there, our job is to get money out of the government and pass it along. And so a solution to that was say, hey, let's not be here for longer than two years. And so every two years, so Lick set up the process to get his successor. It happened that Ivan Sutherland got drafted into the army at just the right time, and so they grabbed him. And so at age 26, Ivan ran this whole show, and man, was he good. So he was a second lieutenant chairing meetings with generals in it. And one of the most famous things recalled of that, some general was going on and on. At some point, Ivan said, General, you have just two minutes to make your point, if you have one, that's about the simplest way of describing Ivan. Bob Taylor and Larry Roberts, those are the four that made this happen. Taylor is special because he also was the guy who set up PARC, and he was a student of Licklider. Licklider was intuitively wonderful. Taylor was a student of what was wonderful about Licklider, and he could explain everything that Licklider could do and why it worked. So here's a couple of things I'm not going to go on about. But basically, the idea here is it isn't like, let's look around and see what is available and what we can do with it. The idea was stick with the vision and just make every freaking thing that's necessary. It doesn't matter what it is. If we have to make a new kind of integrated circuit, we'll do it. All of these things were done. So it's very much like these other cultures where nobody worried about whether you had half centimeter radar in Building 20 at MIT, they just did it. And here's one that is really a bug today. And if you don't have the chops, yeah, you shouldn't make your tools. You shouldn't make your own operating system. You shouldn't make your own programming language, because that's not what you're trying to do. If you do have the chops, and you better not do this unless you have the chops, then you have to make your own hardware and software and operating system and programming languages. Otherwise, you're working in the past on some vendor's bad idea of what computing is about. So part of this deal, remember what Picasso said. You have to get really much, much better than most people want to today. And here's another reversal. Today, people buy hardware and put software on it basically to make the hardware look good. The ARPA community in part did it exactly the opposite. It started off with the software, using supercomputers to simulate the thing. And when you got the software the way you wanted it, then you'd design a computer that would optimize and make more efficient what you were doing on a supercomputer. That was what Sketchpad was. Nobody thought that the next graphics systems were going to be done on a computer the size of this building. Okay, and then make a bunch of them. So almost every project in the ARPA project, they actually made enough of them so they could be used as tools. They weren't just demos. And so part of this invention process had to require a kind of limited engineering. PARC, for instance, had a thing where whatever you did, you had to make 100 of them. Made an Ethernet, it had to run 100 machines. If you made a time-sharing system, it had to run 100 users. If you made a personal computer, you had to be able to build 100 of them. Learn how to argue. This is what you learned as a graduate student there. Argue for clarity, not to win. It's the biggest bug today. People are always contending with each other, trying to be winners and losers. And that's one of the problems with Washington. They've forgotten what their job is. No, what you have to do is understand these complicated things. Here's a biggie. Every researcher at PARC was a second or third generation PhD that ARPA had created, right? Eight years. So it wasn't just the stuff in the past. I'll show you a couple more of those. Wow, we're getting close to. But it was creating the next generation. Again, this is baseball. Baseball, you have to develop talent going all the way down to Little League. And they did. And the other thing is a little difficult to, some of you will understand this readily, that the reward of doing this stuff wasn't the reward of making it happen, because a lot of times it didn't happen. It was a reward of actually being funded to work on what the actual problems were. I can't emphasize this too much. Working on what the problems actually are rather than something that's going to get a paper, something that's going to make you money, but taking, like big human problems, could be something like drinkable water for the 70% of the planet that doesn't have it. Doesn't matter. There's no other goal. If you pick one of those things, that's a great one, worth putting a life into. Okay, so background was partly tinkering. A lot of people came from New York, down where the World Trade Center was. Before the World Trade Center, there was about a mile across Manhattan Island that was nothing but electronic surplus stores. Mow a few lawns, put a dime into the subway, and you could go down there and buy almost anything to mess around with. And that group got used to, everybody was broke, but you could build your own, like there's a kit to build your own oscilloscope. And if you wanted an oscilloscope and you were broke, you could get one of these on time for 30 or 40 bucks and build it. And I'm going to just put, these are just washed out anyway, so I'm just going to go past. Okay, so Moore's Law, this was the original thing in Moore's paper, doubling every year. He picked MOS silicon, which is too slow to make things out of, but it would get faster if you made it smaller. Here's doubling every two years. And what happened, the prediction was 30 years, and so what happened was very in line with doubling every two years to every 18 months. And there was physics behind this, this wasn't just an engineering aspiration. And so if you believe this, you had something really worthwhile. I'm going to skip past Engelbart here. Set it up so I see it over like that, that leaves a corner. I think you should see a little of this, though. Because the same time the mouse was invented, this was done at RAND. And how did the RAND people go about it? Well, at midnight they would go through people's waste paper baskets to see how they worked. What were they throwing away? And what people were doing when they were working is making all kinds of diagrams, little flow charts, and all this stuff. So they said, okay, well, let's invent the first tablet. As good as most of the tablets you've ever used today. It's the hallmark of these people is they generally did it good enough. And- Or we may start to edit the flow diagram. First we erase a flow arrow, then move the connector out of the way so that we may draw a box in its place. The printing in the box is being used as commentary only in this case. The box is slightly too large, so we may change its size. Then draw a flow from the connector to the box. Attach a decision element to the box and draw a flow from it to scan. We then erase the flow. Okay, so this is about 1968 or so. Again, on a big room-sized mainframe with one guy. But this system really, you could ask your question more even about this. This system was one of the best systems I've ever used in every, it felt so intimate, it was so different from the mouse. It was one of the things that we actually looked at. I guess I do have to show the next thing here. Just so you think that VR wasn't something done recently, but the second thing Ivan did after he came back, the thing when he came back from ARPA was to do this. I worked on this when I was a graduate student. You could grab things that had a thing in your hand, you could grab things and move them around. It's a little exciting because instead of the thing that you're used to today in VR, it had two CRTs with 15,000 volts right above your ears crackling away. So it's a very exciting thing to do. And of course, one of the hardest things was to do good head positioning back then. There are many ways of doing it. One of the things they did here, I won't explain what it is, but it was hooked to a crane. So as you walked around this big room at MIT, a crane would automatically follow you with the positioning thing over your head. To find out what this was about, and, man. I'm getting killed because I should stop right now. But I really have two more things to do. If you could give me two more minutes, I will do that. First one here is, this is something you have to think about. Let time go one way and progress go the other way. Yay, boo, yay, boo, it goes up, it goes down. This is the way people tend to measure things. Problem is they never put in a threshold. If you put in a threshold, then the only things above the threshold count. Like if these are reading scores, nothing counts. Reading scores never get above threshold. So it doesn't matter whether they go up or down. And what is actually needed changes over in time. You need more. And if you're measuring to a baseline, which people usually do, one of the ways of improving things or making it look like you're not doing such a bad job is to lower the baseline. For example, Apple completely lowered the baseline on what constitutes a reasonable user interface for iPhones and iPads. Interfaces on the systems beforehand had an undo and these don't. And I can name 15 more things. Think about it. So what they did is they decided, well, we're just not going to work on all of those problems anymore. We're going to condition the unsophisticated public to do work at the level of a two-year-old or a 92-year-old. And we're just going to eliminate everything in between. And the public has bought it because you don't want to count noses when you're looking for quality. People can be talking to anything. So what you have to do on this stuff is you have to pick something that is absolutely above that line, we call that in the McCready sweet spot. He's the guy who did man-powered flight. And once you have achieved that, it opens. opens up a whole region that you can explore it, and that's what we did at PARC. The moonshot was set space travel back 50 years. Everybody uses this as a metaphor. We need a moonshot. No, we don't need a moonshot. You just don't do space travel with chemical rocketry. And what's interesting about the people who, like Jeff Bezos and Elon, they don't get it, MV equals MV. Every child who read science fiction in the 50s knew this. What that means is, you either have to carry a shitload of reaction mass with you if you're doing chemicals because you can't get the velocity high enough, so you have to put out a lot of mass. And if you do that, you have to lift that mass. So you wind up with 45 story building rockets just to get into orbit. That is nuts. Anyway, I will not go on that. So, but the thing that was a tragedy was that there were very good proposals for how to get that high exhaust velocity using various forms of atomic power. And it was something that the public was not interested in. The moonshot was not about space travel. Okay, so, I'll skip past this because I want to end with, yeah, here's. So this tablet computer I thought up in 1968, it had two initial forms. One was the familiar tablet, and the other one was what Ivan's head-mounted display was inevitable with Moore's Law. And then Nicholas Negroponte had this idea of wearing a watch and communicating with the rest of the world. Okay, so here's the last little segment, and then I'll let you go. Wayne Gretzky, you know who Wayne Gretzky is. I'll bet, greatest hockey player who ever lived. And he was just a little guy. He tried to avoid fights. They asked him why he took so many shots on goal, and he says, well, you miss 100% of the shots you don't take. So he wasn't trying to be careful. He scored more goals than anybody in history by 1,000. So the fact that his percentage of misses was also high was irrelevant. And they asked him why he was better than anybody else. And he said, well, a good hockey player goes to where the puck is. A great one goes to where the puck is going to be. And he didn't mean tracking the puck. He meant getting into a place where somebody could pass him the puck, where he could make a goal. So what he did is he looked at the entire configuration, saw where the future was going to be, and went to that place. So you can make a game to invent the future out of this. So you start off with a cosmic goodness intuition. Like for me, the tablet one was good. You identify a favorable exponential, like Moore's Law. You take the cosmic intuition out 30 years, and you ask, can we say, wouldn't it be ridiculous if we didn't have this? And see, 30 years out, 30 years away, well, of course we'll have one. That's what that exponential means. And bring it back to the 10, 15 year point, and at that point, you can just pay money, because that's also what Moore's Law and what Turing means, is if you pay a lot of money now, you can make the commodity computer of 10, 15 years in the future. That's what the Alto was. It was about 50 times faster than what you got out of the time-sharing terminal. And you make a bunch of them, and you intertwine it with the, so it'll run the software, and then you can do two kinds of computing in the future. One kind of computing is zillions of experiments to get a user interface that would be universal for now 5 billion people, and deal with millions of people who are doing applications you've never seen before. And the other thing you can do, the thing on the right there is Microsoft Word, as it was at Xerox PARC in 1974. If you optimize the code, you can get what the applications are going to be 10 years out. So those are the two things you can do by doing this supercomputer thing. And it costs money. In today's dollars, those Altos cost about 125k a piece, and we made 2,000 of them. Think about that. Gotta be a funder who's serious. Xerox went batshit when we did it. They really went batshit when we wanted to cash them in. But I'll just leave you this, since I'm over time now. I'll leave you this as one of the ways of escaping the present. Have a glimmer of an idea, take it so far out that you don't have to worry about how you're going to get there, and then you just bring it back. So instead of innovating out from the present, what you want to do is invent the future from the future. You go out and live in the future and bring the future back. Thank you. Thank you. Thank you all. Thank you. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "How to invent the future (part 2)",
    "description_video": "Alan Kay, one of the pioneers of personal computing, speaks about the history of the technology we know today.",
    "related_categories": [
      "Technical"
    ],
    "page_url": "/library/76-how-to-invent-the-future-part-2",
    "youtube_url": "https://youtube.com/watch?v=1e8VZlPBx_0",
    "mp3_file": "downloaded/How_to_invent_the_future_(part_2).mp3",
    "mp3_content": "So, I kept on rewriting the title. This is not a bad title for this class. Another way of looking at it is instead of trying to move forward from here where everything is confusing and the present looks like reality, we want to go out to the future and bring it back. And we talked about some process and methods. Today, we're going to talk about a few of the gazillion things. Of course, I didn't get done last week, which made this week even more. And finally, I decided, screw it, I'm going to do both of these talks again without an audience to do them to their natural length. Because the destiny for this is being online, and online people are not confined to 50 minute hours. I'm sure Sam was all for that. Great, so again, here's my email address. Of all the people who are tuned in to this talk and in the classroom, I got three emails, one of which was interesting. That means that either or both of my talk isn't interesting, or you're not interesting, or both. So try and at least disabuse me of the latter. Okay, so to start off with, here's Leonardo, pretty smart guy. Imagine if you were born with twice Leonardo's IQ. Think of how easy it would be to get into Stanford. Maybe you do have twice Leonardo's IQ. But suppose you were born with twice Leonardo's IQ in 10,000 BC. How far are you going to get? Zip, right? Before they burn you at the stake or whatever they did back then. Yeah, so here's a guy with nowhere near Leonardo's IQ, Henry Ford. And whereas Leonardo could not invent a single motor for any of his vehicles. Think about that. So he was smart, but he wasn't that smart. Henry Ford was able to put together processes that allowed him to make millions and millions of cars for about, sell them for $800 a piece. And the difference between the two was that Ford was born into the right century, and Leonardo was born into the wrong century. And so the knowledge that had accumulated in the 19th century made much more difference than any level of smartness. And where did that knowledge come from? It came, might as well pick Newton if you're going to pick anybody. It came because the context was changed from the Middle Ages and the Renaissance to something completely different in the 17th century. And Newton made the biggest change of anybody. And so we can call that change a change in outlook. We can call it a change in context, worldview, point of view, whatever you want. So I'm numbering rules for you. I decided to go back and start with zero. So the zeroth rule here, probably the most important one, is to make progress here. Let me move this guy out. Context or point of view is worth 80 IQ points. If you've got the context of science and math, you are gazillions of times smarter effectively than the smartest people of antiquity like Archimedes. A person who learns calculus with an IQ of 110 or 120 can do things that the greatest geniuses of the past can't do. Okay, so we can sum that up by saying knowledge is silver, context is gold, and IQ is just lead. It's a lead weight on you. Biggest problem with most people who are at your level and going to the next level is you're always the smartest people in your classroom or room at home, but that only means you're the smartest person amongst 30 or 100. And if you happen to be a room that had the 100 smartest people in the world, and you were the smartest person in that room, you're still not as smart as the other 99 working together. So being clever doesn't do it. And this is the simplest snare is the IQ snare. Tony Hoare, really great guy, was here at Stanford for a while, Turing winner. Said debugging is harder than programming, so don't use all your cleverness to write the program. Anybody recognize this? Anybody write programs here? Let me see hands. Yeah, so people are so clever writing the program, they forget that debugging is harder. And that's true about anything. So that's principle number one, we had zero. And here's a summary of what I showed you. And the number two one at the top there is that the goodness of the results correlates most strongly with the goodness of the funders. This is the simplest way of summing up the past. because you have to realize the difference in the past wasn't that the people were smarter back then. We weren't smarter than the smart people today. Every generation has really smart people. The difference in whether you get enormous results or not is in this context idea and the funders that support it. One of the ways of thinking about them is, as opposed to getting gold medals like a bunch of us have gotten in our 60s and 70s, 40 years after we did the deeds. Good funders give out the gold medals ahead of time, knowing that 70% of them are going to turn to lead. Because the funders give it out before you've gotten the results. So this will be a slide that you can use later on. It's basically what I said last time. And last time we looked at four systems. Sketchpad, we didn't really look at the Engelbart system, but it's easy to find out about online. We looked at the first really good gesture system, Grail, and we saw that Ivan Sutherland again invented VR long, long before it ever came into use. And I really rushed past personal computers. And the first thing, it was kind of like a personal computer, it was kind of cute, was Harry Husky's Bendix G15 in the mid 50s. So this is really early. Harry just left us a few years over the age of 100. Really wonderful guy. Here's my vote for the first real personal computer called Link by Wes Clark. Wes Clark also did the building size computer that Sketchpad was done on. So he liked to work both large and small. Here's one I did with Ed Cheadle, looks kind of modern. And an idea I had in 1968, which struck me really deeply. Not because it was a tablet, but because it was a thing that children needed. And I'd learned from Seymour Papert what children could actually do with computers, and that seized me in a romantic fashion. And we looked at this idea of better and perfect are the enemy of what is actually needed. In other words, you have to draw thresholds in order to know where you are, else you're just measuring local variations. You don't know whether they're good or bad. And the last thing we did on Tuesday was looking at this process of taking a glimmer of an idea out 30 or more years to see if it makes more sense 30 years from now than it seems to now. And if it does, you bring it back. Simulate it by making supercomputers that allow you to do the software. And five or eight years later, you've got something that will revolutionize the world. This is where the trillions rather than billions comes in, because you create an industry. And last time, I didn't get a chance to show you kind of just one of the examples of what Park did, so I thought I'd do it today. And this is a self-portrait, because now I have extracted stuff from a demo. But this is a system we brought back to life from 1978. So you get a chance, and this is a self-portrait. So this is the successor to the Alto called the Dorado. So it had now a bigger than XVGA screen rather than the portrait model. And this dithering technique was invented at the same time in the 70s by Bob Floyd and Steinberg, and partly done at Park. So this is what a typical image on only a few computers in the world look like back then, one bit per point. And where do we get this system from? Well, here's the Xerox dump, and if you look closely there, there's a disk pack. Actually got Xerox throughout most of the disk packs of the work that was done at Xerox Park. A few of them got rescued. Here it is, a few hundred files on there. One of them happened to be most of a system that we did in 1978. And it's of partial interest because the next year it was the stuff that Steve got, Jobs got shown during his famous visit to. So you have a little flavor here. Now what we did is we brought this back to life. And it was relatively easy because this system is called Smalltalk, Smalltalk 78 is a pure object system, and so it resembles the Internet. This is a Internet self-portrait, and it's just as good a self-portrait of Smalltalk. Because the idea was to have the one-to-one correspondence between the idea of little logical computers, which is what we called objects, that could send messages around and make an entire system. And so it's a little different than from what you think object-oriented programming is today. One of the consequences is that there are no actual applications, because you can mix and match objects as you choose to see. Here we see something that is vaguely familiar. Thought I'd turn that off. Okay, so this is a typical screen back then, and it ran on the Alto there, the portable note taker and the Dorado. Here's a bitmap painting I did 45 years ago that we found and stuck in here. See the user interface is with the object itself, and here I'm marking it up. And it has a character recognizer, gesture recognizer like Grail did. There it's recognizing I want an arrow and making one. The overlapping windows, the icons. What would be called rich text today, and you can see the gesture recognizer is being used to tell it how to justify. And this system is organized in terms of projects. So each project you can think of in today's terms as a separate desktop. They persist over time. Now think about this compared to the user interface today, where you use an application that doesn't have every feature that you want. And you start and stop applications and try and cut and paste between them. Here what you have is just working spaces, an unlimited desk for every project that you have. You can have as many, they persist over time, because this is a workflow idea. We couldn't get Apple to adopt this idea. And so these are kind of thumbnails of each one of them. We can go into one of them. Here's a little thing done by a 13-year-old girl writing an article for creative computing back in 1975. And so you can see it's sort of like desktop publishing. But in fact, any object can be used in here. And so, for example, if we look here, she's telling about this, how she used the program, and how she's typing in there. She's typing in code, and it's being executed to grow the box and turn the box, and so forth, right? Get the idea? So, it'd be nice if Wikipedia had even thought about this, right? Because imagine you go to the article on logo. Guess what? You can't execute logo code in there. Why? It's on a computer. What didn't they get about computing? Well, pretty much everything. If you look at it closely, you'll see the web design and the web browser are two of the worst things ever done in computing. Because they fail to take account of the fact that you're actually on a computer. Okay, another example here is an animation system. You notice that ball is not squashing there. And it would look better if the ball squashed when it hit. So if this were a normal system, and it didn't have that feature, we'd be done, but we can relate objects to each other. So here we're single stepping to get to that frame that we'd like to change. We're looking at the interface of this bouncing guy, and we're seeing, yeah, there's a thing called current frame, that's what this thing is. And here's our painting window, and let's look at its interface. And here's something that allows me to set the picture in there. And I want to connect the two windows together, so I use the gesture recognizer to draw a line between them. Gives me a little place to explain how I'd like to relate them. And I say, well, the painter's picture wants to be the bouncing animation's current frame. Okay, everybody get what's going on here? So I say, okay, go ahead and do that. And now it's latched on to that thing that's there. Now I can start the animation going again. But while it's going, I can paint, look carefully, and you'll see that the thing is being painted while it's running. Wouldn't you like to be able to do that today? I mean, just think about, why not? This is like Sketchpad, right? Except a few years later. Yeah, this is completely natural. It's what you get very, very easily if you just have unlimited objects. So in this particular thing gives you automatically something much more powerful than PowerPoint, because all you have to do is sequence these things called projects or the desktops. That's what I'm doing here, I'm just moving from one to another. So that's an example of what happened at Park. And if we go back to this screen of the various inventions there, we can look at this, now I'm answering Sam's question. Well, how much of the Alto idea actually made it out of Xerox PARC? Well, about half, we'll see what the other half is in a second. How about the GUI? Well, about 70%, because you notice the GUI didn't come out as something that has this unlimited desktop idea. Even today, 30 some odd years after this, nobody has put it in there. It's ridiculous. But it has to do with people wanting to have applications and sell applications, even though most applications won't do all the things that you need. How about desktop publishing? About 70% for the same reason. The way we did programming, only about 10% has come out, and I won't go into all of the differences, but I think you've seen some of them. Laser printer, about 90%, PostScript, 100%. And that's partly because the guys who did this at PARC formed Adobe, Geschke and Warnock. And so they sold, as in their company, what it was that, how they thought you should be able to do printing. 100% of the Ethernet, there was no competitor. About 50% of peer-to-peer and client-server, we'll see why in a second. 100% of the Internet, again, there was no competitor for it. There was no, and so one way of looking at this is, what came out most successfully were the things for which people already out there didn't think they already knew how to do it. So everybody knew how to program, and so the biggest resistance was in how we did programming. That just didn't make it. Now here's three things that I didn't mention before because none of them made it, but one of them was, hey, the architecture of the Alto was revolutionary and allowed you to run very high-level languages very efficiently and to make changes on the fly. And we tried with Intel and Motorola to get them to adopt these architectures for the chip and zero. Intel, especially at the time, didn't know anything about computing, didn't know anything about programming, and didn't want to learn. They had to be dragging, kicking, and screaming even to do CPUs. Andy Grove, for instance, was against the first CPU on a chip that Intel did. The idea of the Dynabook didn't make it out. If you think about it, when did the iPad decide to put a stylus and a keyboard on the iPad, right? The iPad Pro, they couldn't, why couldn't they do it? What was their problem? So 10% of that idea came out. Now here's an interesting idea to think about. Here we've got the internet of machines connected together, and if your programming language happens to be a software internet, like Smalltalk was, then you can map the objects into the network, and you can migrate the objects around. Each object is self-contained. They do messaging. The messaging is either done internally or it goes out on the internet, and so you have a solution for all the different scalings of computing that you have, whether it's a small device. Yes? Why do you say only 10% of the Dynabook? What's so important about the stylus and the keyboard? Well, so here's the thing. Two-year-olds use this, and 92-year-olds use this. And everybody else uses tools for dealing with media. So when Steve decided not to do styluses, he completely went away. All he was doing was selling sugar water to babies. He was not selling something, for instance, that any artist can draw on. And when I first, and he sent me the first iPad for my comments on the thing. The first thing I did was to go out and get a capacitive stylus and draw lines with a ruler on, I guess it was Autodesk, one of the Autodesk software that was pretty good. And I determined that the touch sensitivity on the iPad was fabulous, despite the fact that it's done in a very, very complex way. because it has to find centroids from wide things on it. But it was done extremely well, and I got very linear results on it. And so it was there to do, but there was no place to put the stylus on the iPad. And long, long ago, remember I showed you a tablet system from the mid-60s. 50 years ago. So we had a perfect chance to decide by experiment whether a purely stylus driven system was actually enough to do the work that you wanted to do. And the answer is no. Similarly with Engelbart, you could do every piece of text entry without using the keyboard. But they had a keyboard there because you just can't do it fast enough for being able to put in large amounts of text. You need to have a keyboard. This is- Tools for experts by experts, like Engelbart. Well, so here's the thing that Engelbart said. They said, well, why do you have to learn your system? Back then, he said, well, people are going to use their computers for six to eight hours a day, and they laughed at him. So what you guys are doing, do, do, do, do, do, do, do, do, do is using your computers for six to eight hours a day. And using interfaces that are made for a couple of seconds a day. That, if that isn't the most ridiculous thing you've ever, it's about as ridiculous as this building. If you think about it as a user interface, right? Come in the door, and there's a stairway, and there's no map, and where am I? Where can I go? And Jesus, this looks like a dungeon. And remember, computer-human interface is part of what you're supposed to learn about, and you can't do it in a dump like this. You have to have some sense of design around, and I'm not sure you can do software without having some sense of design around. So how could, no, I won't make any really rude remarks. But, so, and just to use up time I don't have, I should point out that some of this migrating object idea was done at Park. Really great follow-up was done by a visitor to Park, Jerry Popek, who then went, who was at UCLA, went back to UCLA and did a fabulous system using Unix as the base called Locus. L-O-C-U-S. And if you're interested in looking at a future that will, at some point, actually happen, you can get that book from MIT Press. And particularly the first couple of chapters of that book outline what the issues are for dealing with real scaling on the Internet. I won't go further than that, so zero. So, principle 21, reality is a low-pass filter. You have to have enormous ideas in order so that people not understanding them will retain something. You don't want to have the low-pass filter give you back a dial tone. That happens on, because most of the, you know, most ideas are mediocre down to bad, even by people who have good ideas. Those are the ones that you don't want to work on. Because if you're successful on them, they're still going to get peeled down. So here's a book, I put this slide up here for Sam, because Sam reads books. You people probably don't. But this is a book, this is not a book about Xerox PARC, Sam. This is a book by an executive at Xerox written in the 60s before PARC. About trying to get the Xerox machine adopted. And this was after Xerox had been the fastest growing, but one of the companies that turned down the complete rights for a licensing fee to the Xerox machine was IBM. That story is in this book. And IBM's consultant said, well, this isn't going to work because there's no market for plain paper copying, because people are not copying. Well, of course, it wasn't a good copier back then. And so I could write a book, our use with Xerox to trillions, nobody wanted. I didn't have time to make a picture that looks like John Dessauer. So it doesn't matter, and I'm going to try and explain to you in the time I have left, why the goodness of an idea is almost irrelevant. Now for the reality kit, get out your reality kit, and we're going to deal with the top. So just break the seal, and just open up the thing. And this will work best if you put it down on your thing like this, but look at the instructions for people online. Did you get a reality kit? Okay, everybody got one? What happened? Where were you? Boy. Hey, you know what? You guys must have been late. Take them, hand them out to some, anybody else? Okay, you're killing me, guys. Okay, so cover your right eye, look at the plus with your left eye, and then slowly move the thing in, keeping focused on the plus until something happens. Slowly move, slow, slow as in the word slow. Who's seeing something? What do you see? Disappears in our blind spot. Everybody seeing that? Don't say yes if you're not. This is a good thing for everybody, particularly in computing, to do once a day. All right, okay, so now let me ask you. What do you see where the dot was? Nothing? What? Text. See text. How can that be? The brain's algorithm falls in the spot with things. What? The brain's algorithm falls in the spot with what are things that you see. I don't know what the brain's algorithm is. It falls in the spot with what the surrounding factors are. Why? That's what I expect. Okay, so here's what's happening here. You see something like this, right? So what's happening is inside your eye, there is, I wonder if I got a laser, yeah. Over here is where the blood vessels come through, so we have a very badly designed eye. If you're arguing with a creationist, this is a good argument against God here. Because if there was a God, he gave squids a great eye and he gave us a bad one. Our eye happens to have the blood vessels in front of the light detecting cells. And so our brain has to filter out all of those also. And over here is where most of your acuity is in an area called the fovea. And so when the thing is further away, you get something like this. And when you move in, at some point, the dot gets over where there are no light sensitive cells at all, and you can't see it anymore. And as my friend over here said, somehow the brain fills it in. And we'll look at that in a second. So principle number 22 is we have a blind spot in our eyes that our brain makes up stuff to fill in. It's just making it up. Think about this, because what's the other case where your brain makes up stuff that you think is real? A dream? And most people think they only dream at night, but in fact, human brains are set up so that we actually dream. Did you get one of these? So in the old days, we'd throw chalk at you, but there was no chalk. Okay. And a powerful idea about that is number 23 is that we can't learn to see until we realize and admit that we're blind. And the biggest problem with most human beings is they don't understand that they are blind because they think they can see. This leads to much of the trouble in the world. And the powerful idea about that is the zeroth one, again, is it makes a huge difference if ideas are experienced in as many ways as possible. In other words, perspective, point of view is worth 80 IQ points. Just because something seems to be right. And this is why math is a danger about thinking. Okay, let's go to the poker chips now. Pry them loose. Okay, and what you're going to do is hold them up like this. So one is about twice as far away as the other. Like that. Okay, you'll see something like this, all right? On your retina is actually something like this. Think about it, if it's twice as far away, it's subtending half the angle. And therefore, it should show up as half size, but it doesn't show up as half size. And we can stick these guys on a ruler. Since these poker chips are now yours, you can take it back and really science the shit out of it. Here's what we should see. That's what's on our retina. Descartes, by the way, got an ox eye and peeled the back of it off to see whether biological lenses actually acted like glass lenses, and they do. And here's what's going on. So the stuff that's on your retina gets mapped into about 12 different places in your brain. Your brain is active. Think about this in computer terms, the hard, whoops, sorry. In computer terms, the cells in your brain are like the hardware and there are processes going on. And one set of processes are all the ones that have to do with our belief system. And before we recognize something, it goes through our belief system. And then it goes into the real-time version of our belief system, which is called the dream. So we have beliefs in the dream, and our beliefs are, damn it, these things are the same size. By the way, you can do this with oranges, with quarters. Anything where you know they're the same size, do the same thing. And so the result of information from the actual world combined with your beliefs, you wind up with this. And anybody here is an artist who can draw? Okay, you must know this illusion then, right? It's called size constancy. And it's why, One of the things, did you learn that? I mean, can you actually draw? Yeah, didn't you raise your, you can draw, right? So if you can actually draw, first thing you realize is you can't see what's going on, and so you start measuring. Hold your arm rigid, you measure it off so I can measure. Yeah, Sam's head is that high, and wow, it's only half size compared to this guy who's closer to me. Doesn't look like it to me, it looks like it's almost the same size, because heads are the same, got it? So principle 24, the mind's eye is different than our sensory eye. And we do things according to the mind's eye, and most people who have ever lived on this planet don't know that there are two different eyes, because they take the world as it seems. They build up a common sense from the world as it seems. This is why human beings generally cannot think. You can't think if you're doing this stuff. So another term for beliefs is a private universe. We each have one of our very own. If you've ever argued with somebody you thought was reasonable up to that point. What's happening is your beliefs are conflicting with their beliefs. Our waking dreams are private. I love this phrase. This is a new phrase, alternate truths. Kellyanne Conway. That's what's going on. So you can see why being a scientist is tough. A scientist has to get around all of this crap that our brain is throwing up. Okay, so a quick, easy model is how random this is. Is a little bit of rainwater on dirt. Dislodges a few crumbs of dirt and a little gully happens. And the gully is more efficient at rooting water, so things start happening. Just where things start happening. Originally, you get something like this. Completely random, it could have gone any way. And you make a whole world out of it. Here's a world that's completely pink, if you've ever been in the Grand Canyon. It is just almost overwhelming. If you look up, you have to remember to look up. There's a little bit of blue sky up above. And the problem with human beings is we don't look up, we look out. So here's an example, that's pretty washed out. But here's a, that's a pink plane, and our thoughts are like ants crawling over it. We can think about things, we can make progress, we can run into an obstacle, we can get around the obstacle, and so forth. But everything we're doing here is pink, except we don't know it's pink, because we've never been in anything else but pink. So this is like a fish not knowing it's in water. It's always been in water. Every once in a while, you might have a little outlaw thought, a little blue thought. But you've been to school, you're going to Stanford, you go to church, temple, synagogue, mosque, whatever it is, because our beliefs project out. And when we see something that isn't normal, normal is actually the same as crazy, smash. But maybe you're out for a run, you're just waking up in the morning, you're taking a shower, and all of a sudden, you get a holy shit. Holy shit, there's a blue world. Blue world, it's orthogonal to the one I'm in. Once you're in that blue world, you realize, there's probably a lot of them. Can you see each one of these as a context? Can you see that what happened from the Renaissance by Newton to our modern age was going from a pink plane to a blue plane, right? This is what ARPA did with computing, it went from mainframes, a completely different way of thinking about things to the world we have today. Despite the fact that nobody had thought of it at all, it was considered literally crazy by our colleagues in computing when we were doing it, okay? So here's the compass, you just leave the compass on there. It's for you to remember that some people get to this really early. Einstein was five, he was recovering from having the measles, I think. His father brought him a little compass for him to play with. And Einstein remembered later in life, he said this made the most impression of me of anything in my childhood. because the way he looked at it, there must be something deeply hidden behind things. He didn't take it as it came, because he was worrying about how does the needle know where to go? There's nothing visible about it, and yet it is doing this. And that changed Einstein's complete way of thinking about things. Okay? So when a baby is born, when we are born, we're not born into nothing, we're born into a culture. Most cultures over the last 100 plus thousands of years were traditional cultures, hunting and gathering cultures. And traditional cultures don't know that they are inside a particular outlook. Traditional cultures think they're in reality. And so they react incredibly strongly to other people's versions of reality. To the point of war. And many people, this is what our genes give rise to, and many people today, including in our country, are born into this pretty natural way of looking at things. We had to invent the idea of outlook, and well, here's another one. So if you happen to be born here, you can have the same baby and bring it up here, the baby will grow into being French. French in its outlook, French in language, and so forth. Here's a big idea, what happens when books got invented? So a guy by the name of Marshall McLuhan asked the question, what are books? What is writing as an environment? If you thought of writing as being brought up in France. What would that actually mean to the human race? Turns out it's profound. Take a look at it if you're interested. You also ask, what is media as an environment? So for example, what is this as an environment, 24-7? Think about it. Not that the kids are being told to shoot people. But the problem is, they're seeing shooting people as normal. Because what environments do is to take things and normalize them. They make them into part of reality, and make things thinkable. They don't say what to do. And of course, media that we have today is doing exactly the same thing, and most people don't realize. Okay, so unhook the last flap here. There's a little desktop here, tabletop. So look at the picture there first, and before you start experimenting, let me make an assertion that the tops of the tables are exactly the same shapes. I've been doing this hundreds of times, and I can't see it, but if I take my plastic thing and move it over there. Yeah, no, it isn't crazy, we are crazy. If you remember nothing else from this course, remember that the natural state of humanity is to be crazy. Because crazy is not having good models in our mind for what's going on out there. We just draw the line at certain kinds of crazy, but we are actually crazy. So this is a really good one, isn't it? Happens to have been first done here at Stanford. This guy is Roger Shepard, and his book, it's full of these. Okay, so, good. Last couple of, got a, yeah, I think I'll get through. So, anthropologists over the last 120 years or so studied several thousand traditional cultures. And wrote down properties of these cultures that were never absent. So if a single culture out of several thousand did not have a trait, then that trait was removed. So all of these traits are thought of as human universals. Virtually all of them are genetic. And here's a book, you know, books are actually useful. It's another good one to read. This is a great book. This is, yeah. I became very friendly with Sam, and I noticed I could not mention a book to him that he would not have read the next time I saw him. That's how you know he's a good guy. Okay, so the basic idea here is genetics drives culture. Genetics has the precursors, the desires. And culture fills in the parameters. So you can think of these, they're all category names. And once that list was made, people got interested in things that were not in every culture. And this is a partial list of those. So agriculture had to be invented. It was a pretty easy invention, but it was only invented about 12,000 years ago. Out of several hundred thousand years of us being on the planet. So initially, it was a hard thing for hunting and gathering people to think about. We've got, like every animal, we have zillions of genes to help us cope with things, we can deal with hardship, like every animal, incredibly. But the idea of progress had to be invented. It's really an invention of the 18th century. And the reason is, is that for almost all of human existence, people died in the same world that they were born into. Almost nothing happened. And so what you had to do to get from birth to death was to cope. It's only been recently that the idea of, no, we can shape the world to be better. That's a new idea. These are all powerful ideas, oral language versus writing and reading. The differences are profound. Story, superstition, religion, and magic versus the representation systems of science, news, remember news never introduces a new category, right? What you hear about is, it's this forest fire, it's that war, it's this murder, it's this kind deed. This is why news can happen so quickly. And that's what our mind craves. What we hate is categories, because it can take us a couple of years to learn a category. So you never hear any news about calculus. It takes a couple of years to learn it, and there aren't enough people. Fast thinking versus slow thinking. Differences over similarities. This is one of the reasons why most programming languages go bad and the web browser went bad. Whereas a modern way of thinking about things is similarities over differences. Emphasizes similarities, it has many things to do also with equal rights and democracy. Vendetta and revenge, those are the favorite movies and the favorite video games are revenge games. Personal revenge games where the system has gone bad and somebody has to break the law to put things right. We just love that trope. But in fact, the whole legal system was set up in order to avoid 1,000 year feuds and vendettas, okay? So we can think of this side, we have things that human beings want. And simple way of thinking about them is, every single one of them on this side is a legal drug. And for people in this class who are trying to make money by being entrepreneurs, just make a technological amplifier for any of these things that we crave. Genetically, look at the things that are there, hunting and gathering, social, language, like the telephone, stories, news, theater, all of those things. That's your list, just get this book, right Sam? And make something that will make people worse and they'll buy the hell out of it, because we don't have any natural, all of these things are in shortage in the world that human beings have been into, except for a couple hundred years ago. Over here, we have things that human beings need, and they're terribly, you can't really see, but these are terribly difficult to learn. Because they're not particularly genetically prepared for, they had to be, they had to be invented. Okay, so last shot here, 21st century, going on to the 22nd century. Hey, we're not born into France or traditional society anymore, we're born into a universe that is unbelievably large. A planet that most people don't even realize we're on yet. Not just our social system of a few hundred people that we know, but millions of social systems and billions of people. A technological system that is starting to touch everybody in many, many different ways. It's only been, for instance, modern medicine really dates from only World War II. That's a long time ago for you folks, but it's within my lifetime. I was born before World War II, and before World War II, you simply did not get antibiotics when you had an infection. It was that soon. Doctoring was almost quackery, so much of scientific medicine has happened in the last 50 or 60 years. And then we have the system of our mind. That is not just social, but psychological, cognitive, and so forth. And so we can sum up this world that we're born into in this century as the systems we live in and the systems we are. Think about that, the difference between that and what most people think that they want. These are the systems we have to learn about and deal with. And these systems are not separate. I mentioned them separately, but they're all intertwined with each other. They're all invisible. Okay, and I'll just leave you with this last slide. So we found out about all of these systems. They were invisible until a few hundred years ago, and some of them invisible until a few years ago. And the human tragedy is in two parts. Part of it is just finding out something in our civilization doesn't automatically transmit it to people born into the civilization, right? The educational system has to be changed in order to reflect this stuff. And the composite picture here is that part of our brain, the genetic part of our brain, even overlaid with this stuff, still has these reactions and ways of thinking about things or not thinking about things that go back 100,000 years. So, I think with things like television to look at, things like video games to look at, things like Facebook to look at, if you're going to go out and make a company that is going to appeal to people, try to do it without appealing to the parts of their nature that they're helpless in front of. Because one of the things that those of us who helped invent the technologies of today are quite worried about now is that the technology is so much easier to invent than it is to change the educational system. And so what we've got is the informational equivalent of cave people with nuclear weapons. But now they're informational weapons, and in many ways, I think these weapons are more dangerous because by re-normalizing human attitudes and human beliefs could very easily bring down our civilization and put us back into the stone age. The talk on Tuesday may be a little thicker today, but the whole impetus behind the ARPA research and inventions of these things, and particularly people like Engelbart, was to to try to invent new tools and new media for humanity to get itself out of its problems. And Engelbart, for example, said, almost everything important that has consequence in the adult world is done by adults working together. And so this is why his system was collaborative from the, so here's an interesting thing, so here's a Mac, some people have Linux, some people have Windows on it, here's the interesting thing. Not a single one of the main operating systems today has built into it the thing that Engelbart showed in 1968, which is the intrinsic ability to share any content that you're looking at with anybody else to the point of allowing them to interact with it and to talk back and forth, right? Skype, it doesn't do it. So this is a thing that is at an operating system level. It's not a trivial thing to do. It is possible to do, but not a single operating system used today does it. And so the ability to actually work collaboratively on content has been held back by notions of operating systems that go back pre-1965. All three operating systems we have today that are the main ones are old, old ideas. They don't even get to where Park was on the notion of how processes can coordinate with each other. There are many, many other of these things. Because these operating systems are rather similar to each other and because they're pervasive, unless you use your reality kit, you're going to think that they're normal and therefore that's the way things should be. Many people in computing have a misplaced notion of Darwinian process. Like most people. Most people think Darwinian processes optimize. That is absolutely not the truth. One of my degrees in molecular biology, and I can tell you any biologist would say, they're absolutely not optimized. The whole point of Darwinian processes is to fit into some niche and some environment. And if that environment isn't the right kind of environment, the process of evolution is not going to give you something that's very interesting. That is the way it works. And as computing gets less and less interesting, it's way of accepting and rejecting things gets more and more mundane. So this is why some of these early systems, like Sam, look at Sketchpad and say, why aren't they doing it today? Because nobody even thinks about that that's important. Nobody even thinks of doing WYSIWYG on the web, on web media. I just typed in some answers to Quora, and I was in a regime that was pre-70s. I was typing into a little window. I couldn't see what it was going to look like until I clicked the button. Come on, this is bullshit. But nobody is protesting except old fogies like me, because I know it can be better. You need to find out that it can be better. That is your job. Your job is not to agree with me. Your job is to wake up. Find ways of criticizing the stuff that seems normal. That is the only way out of the soup. You have to go against your genetic impulses to try and learn the environment around you. It's the most natural thing we have, but it's not going to help, because the environment is weak. And if you learn the environment, you're going to be weak. All right, thank you very much. Thank you."
  },
  {
    "name_video": "How to Start a Startup: Building for the Enterprise",
    "description_video": "Aaron Levie, CEO and Co-founder of Box talks about his lessons learned building an enterprise software company, and why he made the decision to change their business model to what it is today. From Startup School 2017.",
    "related_categories": [
      "Growth",
      "Enterprise Sales",
      "B2B"
    ],
    "page_url": "/library/73-how-to-start-a-startup-building-for-the-enterprise",
    "youtube_url": "https://youtube.com/watch?v=qRt7mFuKwQY",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Building_for_the_Enterprise.mp3",
    "mp3_content": "How's everybody doing? Is everybody really pumped up to talk about enterprise software? Good, that's what you want to do today. So, I'm Aaron Levy, CEO, co-founder of Box, and what I wanted to do was share a little bit about our story at Box, and how we started building our company. We actually didn't start as an enterprise software company. We eventually changed our business model and our path. But I want to talk a little bit about how we got to that decision and how we started building up our product and our company. And then if, and I really hope this is true, if many of you go out and build enterprise software companies, maybe there's some lessons that we've learned that took us a long time to learn that maybe you can learn a little bit faster because of some of the things that we've gone through. So, and I think with some time, we can open it up for questions or whatnot. So is that all cool? We're good with that? Okay, this is gonna be highly interactive. So if we're talking, we gotta talk to each other, you know what I'm saying? Okay, good, okay. I love it when the least interactive part is when I call out that we need to be interactive, but okay, so here's how we have been building for the modern enterprise and maybe some lessons that you can take with you. So we started Box in 2005, and we were actually sophomores and freshmen in college at the time when the idea got started. So this was about 12 years ago, and what was happening was everywhere that we were working from, everywhere that we were trying to access files from, everywhere that we were trying to share, or anybody we were trying to share data with, it was just way too hard to do this. So we had to have these USB thumb drives, hopefully you've never had to use one before. You have USB thumb drives, you're emailing yourself files, you have FTP accounts, and it was just way too complicated for just getting daily work done. Just way too slow, too cumbersome. And at the time, I actually did an internship with a company that also used enterprise software for sharing and collaborating and managing content. And that technology was also way too complicated and complex. And so this is back in, really we got the idea in kind of late 2004, and what was happening was we saw this confluence of major technology trends that we felt could go and solve this problem of, why is it so hard just to share files and get work done with other people? And so we saw that there would be a handful of major technology trends that could ultimately solve this problem of working with our information, working with our data from anywhere. So the big three, though, that we focused in on were the first was mobile ubiquity. And now, obviously, this is a standard trend. No software company would start without a mobile strategy. But back in 2004 and 2005, it wasn't the case. But we had this vision, and we had this foresight where we thought back in 2004 and 2005 that over the next decade, the entire planet would start to be using BlackBerrys everywhere. So that was our vision. And so we were wrong, fortunately. We got better devices. But we knew that mobile was certainly gonna be a really powerful opportunity in the future and was gonna change the way people work with information. So we're glad that it ended up being a little bit of a better platform. We also saw this trend of the cost of computing and the cost of storage was dropping pretty rapidly. So it wasn't called cloud computing at the time, but you could see that there was this ability to buy lots and lots of infrastructure at scale, centralize it in one place, and then be able to build applications on it over the Internet. And so we sort of figured, why is it that people are going out and building their own infrastructure and their own data center when a software provider could do this all themselves and get the economies of scale to serve lots and lots of customers with that technology? So we said, okay, at some point in time, computing is gonna reach this point where it's really, really cheap and inexpensive for anybody, and so thus it should be in the cloud. And then finally, we figured that as more and more people were connected to the Internet, as more and more people and businesses were working on mobile devices and collaborating more and more, that we'd become much more interconnected. And so businesses that once had to have all of their own people and infrastructure and competencies within their own organization would eventually be able to be networked with partners and clients and vendors and colleagues all around the world and be able to get value from everyone, which would mean that you'd need software that would be better at letting us interact with one another over the Internet as opposed to just people within our own corporate network, which is where our market had traditionally kind of been focused on. And so we took these three big trends, everybody on the Internet, everybody on mobile, and really, really cheap computing and storage. And we said, what would we design if those conditions were true in the future, what would we design to build a really, really simple way for people to share files and securely access their information? And so we launched this thing, it was actually called Box.net at the time. And we launched this site, and the idea was really simple. You could upload your files and you could access them from any web browser or any mobile device. And within a few months of launching, thousands of people were signing up for it, and we had worked on some mechanics to make sure that was as simple as possible. So we had a way easier sign-up flow, it was just focused on the end user. So in traditional IT environments, you usually had to go to corporate IT or you had to go to corporate security to be able to get access to technology. We just let anybody sign up with their own information, their own email address, which was actually pretty disruptive at the time to traditional IT. So anybody could go online, they could get a couple gigabytes of storage space and be able to share and access their information from anywhere. And that was the original idea. And what we sort of ultimately realized that we actually had no clue about, because we were just in college at the time, was that enterprises all around the world and companies of all sizes were just used to really, really bad technology. And the bar was just really, really low for what you could do to, our first application was pretty horrendous. But the bar was so low that all you had to do was solve some basic problems. And then end users within those IT environments, within those enterprises, would all of a sudden want to adopt your technology. And so what we discovered was that people all around the world and companies of all sizes, whether it was a Fortune 500 company that was spending hundreds of millions of dollars on technology, or small businesses, everybody had this interest and demand for really, really simple tools. So one of our competitors at the time, the primary product you had to use for sharing information, looked a little something like this. This is a screenshot from one of the products. And it's pretty horribly designed technology. I don't know even what it says, it's just a screen grab from the Internet. But really not elegant software for working with other people and collaborating. And so what sort of started out for us as a really simple way to share files, it was like that dead simple of a proposition, actually turned out that it was the sort of crux of how people could be working in the future. And it was a much easier way for people to be able to work. And so we, we're getting a little security prompt, of course that has to happen. Okay, so what started out as a really simple way to share files, turned into this new way of working. And we actually weren't trying to solve this vast problem of how could companies work in a modern way, all we were trying to do was build really simple technology that makes it easy for people to share files and access information from anywhere. And then we eventually evolved this strategy. And so things were growing so quickly that we basically decided, like any classic startup story, we decided to get in a minivan and drop out of college and move to the Bay Area to go and build the company. And there's always this part in the story where if you kind of roll back in time, so this was us living and working out of a renovated garage. So that thing behind us is actually technically, it's actually zoned as a garage, but we were living out of it, so it was actually pretty illegal. But we were just the four founders just going out and we had all dropped out of college and building out this. What we didn't yet fully know was this enterprise software company, but eventually would become a whole enterprise software platform. And it's funny because when you're dropping out, you know, what you imagine, you know, the glory of, okay, I'm leaving school. This is gonna be so glorious. You know, think about all the people that dropped out before us. You have Bill Gates, you know, Bill Gates dropped out. This is gonna be so exciting. And then you've got Steve Jobs, and he dropped out, and this is super exciting. And Michael Dell dropped out, and that's super exciting. But nobody ever really remembers this guy. And so we always sort of think about the glorious stories of dropping out. But actually, I don't even know if this guy dropped out. But it just, it looks like he must have or had to do something. But, you know, we were so pumped. We were like, we're dropping out of college. Like, you know, fuck this. And we're gonna go start a software company. And we were in this position where we were living and working and all together. And we were iterating on our business over and over again. We were, you know, pivoting almost every single day. So if you've ever done a startup, you know, what you find is like maybe every 24 hours, you're sort of reflecting on your business model and your strategy, and is it gonna work, and do you think it's gonna scale, and is this, are the economics actually gonna play out? And so we got to this juncture where we basically had to say, do we wanna be a company that serves consumers? Or do we wanna be a company that serves businesses? And the reason that we got to that juncture was, we had consumers that were spending, I think at the time, I think the most you could spend on our product was $9.99 a month. So, you know, pretty standard consumer software payment structure. And it was about $10 a month. But what we saw was that companies like Google and Facebook and Apple and Microsoft eventually would be giving everybody free storage on the Internet. And that you really wouldn't wanna be spending money for storage on the Internet. And let's, maybe just as a quick survey, who actually pays for more storage in one of the storage solutions that you're using? Maybe we can get a, wow, okay, all right, you guys just create a lot of data or something? What's going on here? All right, so, okay, who doesn't pay? Let's just see the, okay, right. So not a great business model when you only have about maybe 35% or so of the market that's willing to upgrade for your solution. You wanna be able to reach a broader population than that. So what we said was, at some point, Google, Facebook, and others were gonna give away unlimited space, and it was gonna be really, really hard to upsell people over time. So that was on the consumer side. On the enterprise side, though, what we realized was, actually, companies were spending millions and millions of dollars on software that we thought we could do with, at a far smaller amount of spend and for a fraction of the price. So companies, on one hand, were spending millions or tens of millions of dollars, and we thought we could deliver it to them for maybe hundreds of thousands of dollars. So you could have almost a 10 or 20x improvement on sort of the cost of the service. On the other hand, we felt that, at most, we could charge consumers maybe $10 per month, and that would actually have downward pressure over time, just because of the economics of the space where storage is getting cheaper. So it actually took us a surprising amount of time to come to the conclusion that we needed to go into the enterprise, cuz we still were like, well, yeah, but what if we could serve advertising on the files or something? It just turns out you really don't wanna see ads when you're looking at your tax documents or your photos. And so we didn't think that the advertising model was gonna work for consumers, but we did decide that actually, if you could build really, really great enterprise software that could solve all of the enterprise's problems around managing information and collaborating around files, and you could build one platform for being able to do that, that maybe you could actually compress some of the economics in the market and be fairly disruptive to the traditional players. But we sort of stepped back and we said, okay, if we're gonna do this, are we really gonna build an enterprise software company? We were 23 and 22 at the time, the founding team, and we had a few other employees, but it's really, there's actually a long list of things that you could do that aren't very cool. Somewhere near the bottom of that list, when you're 23 and 22, is starting an enterprise software company. Literally, if you just had a quadrant, it's like a McKinsey quadrant of lamest things possible to do, it's starting an enterprise software company. So we were pretty sort of distraught of this idea of, are we really gonna go and build a company like an Oracle or an SAP or something, is that really gonna be fun? Because think about what we think about. When I say the words enterprise and B2B, what you should be thinking of, if you have some experience in this space, is you should be thinking like, okay, it's like slow companies that don't innovate quickly. The technology's way too expensive, you're just selling to the buyer, you're not really selling to the user. The technology itself is super complex, so there's really no incentive structure to make really simple enterprise software. The reason for that is that because the people who have the budget don't actually have to deal with the complexity of the technology, so they don't actually prioritize simplicity and user experience when they're making buying decisions. You have all this, you have to deal with frustrating sales reps. So if you're on the other end of buying enterprise software, what ends up happening is you're just getting called all day long by sales reps, and for software that you basically don't want. There's unfriendly sort of policy terms. So it's always sort of terms of services that favor the vendor, not favor the customer. So the very structure of the contracts in this industry are totally not favorable to the client. Software design is pretty horrible, because again, if you don't have a market that is prioritizing user experience or simplicity, then you can't get the best designers. Because the best designers don't want to work in companies that aren't building really simple software. And so then what's the point of having great design? And so then the design ends up sucking. You get really infrequent updates. So it turns out when you sell to enterprises, this actually makes sense. Enterprises want a lot of predictability. They don't want their technology changing on them at the same rate that Snapchat or Facebook is able to change their software for us. Because if I'm a CIO, a Chief Information Officer of a 20 or 50,000 person company, and my software vendor is changing all the time, that's going to make it so I have to go retrain my employees. And so what that then means is that the vendors, the software vendors, don't want to update their software and don't want to update their technology a lot. Because the customers want it to be infrequently updated. And so that then slows down all of your innovation. Imagine working at a company where you ship product updates maybe once a year or once every three years. That's pretty annoying, so you're not going to get the best innovation. You have all this downtime just because it's really creaky technology that always has these weird problems that you run into, corrupted data. So these are the things, and the list could be about five times longer. If you were to make a list of what words describe the enterprise software industry, this is just sort of getting started. And it all sort of comes, if you kind of took it all together, and you sort of rounded it all together, basically like the picture that people have in their head when you say enterprise software is basically like this. It's just your vendor just being angry at you. Actually, it looks a little bit more like this. It's a little bit more pirate oriented. And this is basically what enterprises think of when they think of enterprise software companies. And when they think about enterprise technology vendors at least ten years ago. So we said, okay, if we're going to pivot the company, and we're going to forego all the fun and all the exciting times we would have as a consumer company, then we have to find a way to build an enterprise software company that operates and acts and innovates and moves like a consumer company. If we're going to forego the consumer side and serving just consumers in their personal lives, we still have to find a way to build a company that feels like a consumer company that just happens to sell to enterprises, and so then we made a list of basically what are the things that are changing in the technology world that allow for you to build a company in a very different way. And this is, I think, what makes enterprise software so exciting for all of us today, which is why I think it might not be still the number one coolest thing to do of all time, but it's at least getting in the top 300 options. So we said, okay, if we're going to build a different enterprise software company, what is true today, and this is back in 2006 and 2007, what is true in 2006 and 2007 that allows us to build a different kind of enterprise software company? Well, the first is, let's look at the old way. So the old way was, you had really complex technology, it was all about the sales. was your distribution channel. So you had to have salespeople as your primary way into getting into customers. Because customers couldn't access your technology on their own, they had to install it. To install it, you had to have a salesperson go out and try and pitch the customer that they should start using it. And so all of your distribution was constrained by the number of sales reps that you had. Technology was only available to the biggest companies. And so this ends up being a pretty big flaw because if you're trying to have a massive impact on the world, but only the Fortune 500 can actually afford to use your technology because nobody else has the infrastructure or the apparatus to be able to install the technology, then really, you're not having that big of an impact on the world. You're just having a big impact on the top enterprises that are out there. We saw a lot of flaws with how technology sort of solved the security problem. So when you buy enterprise software 10 years ago, you bought the infrastructure or the hardware, then you bought software, then you bought security software to secure the software and the hardware. And so, bless you. And so you had all of this technology that you had to have buy from lots of different vendors and it was the customer's responsibility from putting it all together. And so that meant that there was a lot of security vulnerability inside of those platforms. There's also a thing where the customer's bearing the risk because what happens is the customer is buying the licenses for the software upfront, regardless of what they use. And so you have this sort of asymmetry where the vendor always wins because the customer is buying the software in perpetuity, essentially. And what's happening is even if the software doesn't work for them, the customer's already paid. So you'd see all the time you'd have these software projects that enterprises would have where they'd spend $10 million on software and they'd never install it because it wasn't what they wanted. And there's no recourse. Once they bought it, they can't do anything about it. So pretty fundamental broken business model. And then finally, the platforms themselves were fairly proprietary. So they were closed systems, they weren't integrated and open to other platforms, and so it was very proprietary technology. And so we said, well, what if there's a new version of each of these things? What if you could make it so the technology was simple and elegant and we always focused on the end user and we never lost sight of the power of the end user? What if the product was actually pulled into organizations by those end users, as opposed to you having to only do tops down sales? What if the software was so good and so freely available that anyone could bring it into the workplace on their own? What if it was available to people inside of organizations of all sizes? What if it could be a small business anywhere around the world? What if it could be a large enterprise? What if it could be a three person startup? So how could you make that technology available to anybody of all size? How could you make sure that security was baked in so the customer doesn't have to buy all this other technology and wrap it around these tools? What if the vendor could bear more of the risk? So if you're a customer of ours and the technology's not working, you're not gonna renew. So what if more of that risk to making sure you're successful is actually something that the vendor has to focus on? And then finally, what if you had open systems? What if you connected to all the different enterprise software that people were using and you didn't have a closed platform that locked in data? So we kind of said, okay, there's this old way that the oracles of the world built their technology and then there's a new way and what if we could go describe each of these new things that was different about technology today and go build an enterprise software company that really solved this core set of issues? And that's essentially what we've been working on for the past decade. So we said, here are the new conditions of this landscape. Let's build a software company for the enterprise that is built and operates like a consumer company and that's been our strategy since about 2007. And fortunately, what's cool is that it has played out in favor of a lot of the things that we've been talking about or that we identified. So we now have about 71,000 customers. We're in about 63% of the Fortune 500 and this was generated mostly because people, just at work, wanted to bring in better technology and then we eventually were able to sell to the broader organization. But it was really about solving for that user, pulling the technology into the workplace and then ultimately solving a bunch of problems from there. And the exciting thing about what has played out in the cloud is that you have companies of all sizes and in all industries that are now transforming the way they work because of the cloud. And so we can work with companies as wide ranging as Pixar where they use Box to be able to share and collaborate around movies, to Nike where they use Box for product and marketing, all the way to Eli Lilly where you have things like R&D and drug discovery and various kind of medical discoveries happening and collaborating around through Box as well. So what's cool is it doesn't matter the industry. Companies of all sizes have realized all of this potential from moving to the cloud and we are one of many companies that are benefiting from this set of trends. And the cool thing I think for all of us and for anybody starting a company in this space is that really this is just the beginning of a whole significant change in this industry. So going back 10 years, I thought it was the beginning but it was still a pretty slow start to kind of get to where we are today. But if I look at all of the trends that are happening in the enterprise, I think the sort of best opportunities are actually yet to come. So this means that there's gonna be more growth and more opportunity than ever before. And the reason for this is basically you have two big factors. First is most of the technology still used by enterprises is still that legacy technology. It's still old, it's slow, it's complex, it's expensive, it's sold by the legacy vendors. And so on one hand, you just have this gigantic market of old stuff that is gonna have to get retired, shut down and move to the cloud. That's the first thing. But the other trend is that every business on the planet is recognizing that that legacy technology is not gonna let them transform their business models, the way that they serve their customers, the way that they operate. And you're probably familiar with the fact that every single company on the planet at this point knows they need to modernize their organization in some significant way. So if you're a media company, you're freaking out because of Netflix. If you're a life sciences company, you're freaking out because of 23andMe. If you're a financial services company, you're freaking out because of Stripe. If you're a hospitality company, you're freaking out because of Airbnb. And so every single company in every single industry recognizes that you have all of these disruptive forces coming from the digital industries and Silicon Valley and broader than Silicon Valley. And that every single company is gonna have to operate and upgrade both the technology that they use as well as the sort of business models that they have. And what's cool is if you're building for enterprises, that means there's an unbelievable amount of opportunity because all those companies, all the Fortune 500 and all the other companies that need to be transforming are gonna need modern software to be able to work and operate in this new way. They're gonna need new technology that allows them to be able to actually compete effectively with the digital economy. So that means for all of us there's more opportunity than ever before. Because if I go back 10 years ago, there wasn't actually a significant catalyst for enterprises to go upgrade their IT systems and their technology systems. But today, that catalyst is just the fact that every company is being disrupted in sort of every single way that they look at the market. And so that just means that you have this catalyst which is if I'm a General Electric, or I'm a Walmart, or I'm a Procter & Gamble, I need to be working with startups and new suppliers that are gonna make me more effective and more competitive. Which means that then there's opportunity if you're building for B2B. So, if I can convince you to build an enterprise software company, here are some lessons that we have learned. And a lot of these actually apply probably for most markets. They're ones that we've specifically taken from building for the B2B market, but certainly a lot of these apply whether you're building a consumer app or a medical device company or any kind of entrepreneurial activity. But here are sort of, I think, eight lessons that we've taken from our journey and a few that I've learned from other companies over the years as well that I'll try and weave in. So, some of the things that we've been thinking about. The first is, and this one has been just the foundational way that we got started, which is start with something insanely simple. And then focus on expanding it over time. And when we got started, if you were in enterprise IT or you worked at one of our competitors like a Microsoft or a SAP or an Oracle and you looked at our software, you literally would have died laughing. You would have looked at our technology and you would be like, that is the stupidest thing I've ever seen. Like, all it does is you upload a file and then you access the file. And it was that simplicity that was actually why it was so disruptive. Because all of those vendors thought that the problem was we just need to jam in as many features as humanly possible into one piece of software and that was correlated with our value proposition. That was sort of how enterprise software companies operated. And so, mostly because we weren't focused on the enterprise, we just took the opposite approach. We said, actually, the fewer features, the simpler set of functionality in one place is actually gonna be our value proposition. And if you were in classic enterprise software, you would have looked at our product and you would have thought it was a toy, essentially. You would have been like, that is never gonna serve enterprises. It's not gonna serve regulated businesses. It's not gonna serve complex workflows. And what they didn't recognize was that was just the start. That was just our day one use case. That was the day one thing that we were trying to solve. So, the instinct and the tendency, and this still happens today, like at our company 12 years later when we've learned this, I think, so directly, you still have this tendency, anybody in this room that goes out and brainstorms, like how can we build a big enterprise software company, you're gonna brainstorm by listing out lots and lots and lots of things. You're gonna list out lots and lots and lots of features, like this wish list of what if you could just build all this cool shit. But that's not actually how you're gonna be successful. You're gonna be successful by nailing one use case that just happens to be a use case that everybody has a massive problem with. And if you can nail that one use case, that becomes essentially the wedge to then use to expand out to all the other use cases that you wanna go and solve. And so, you have to sort of resist the natural instinct, which is that more functionality, more powerful software is better, and really make sure that you're focused on one thing that you're gonna do better than everybody else. A great example that I've been re-reminded of this over and over from is a company called Gusto that was previously called ZenPayroll. And what they did was they just said that payroll software and payroll services sucks in small businesses, as an example. And so, they built a software application that was just about making sure your employees get paid as efficiently as possible. And then eventually, that was so successful, and they got embedded into so many businesses that they could eventually expand to more and more HR services, and more and more things that an HR team has to do with their employees. And so, but they started with that one use case, which is let's just get payroll right, make it so successful, so simple, so effective, that then you could build up over time. So again, when starting out, you have to resist the urge to want to build a lot of functionality, and really focus on one use case that people are gonna be able to easily describe to other people, and then be able to go from there. So that's the first lesson, and again, 12 years in, we're still having to relearn this over and over again. The amount of product meetings that I end up in where we have to be like, we have to remove that feature, we have to hide that thing, we have to make that simpler, it never goes away. Even when you're bigger, you still have to make sure you're really, really focused on keeping things dead simple, and almost deceptively simple in what you're actually gonna go and do for the customer. Because it just turns out that in these cases, having less functionality gives people way more opportunity than go use your service, and it's counterintuitive, but the more functionality you have, the more you're gonna narrow the set of customers that ultimately are gonna be able to sort of make sense of your product and wanna use your product. So that's the first thing. Another major factor is, and I think that as you're starting your company, you really need to think hard about this one, which is make sure that you're benefiting from a major technology tailwind. There are so many companies that get started where there's no particular macro technology trend that they're riding on top of, and in some cases, even worse, there can be technology trends that you're sort of resisting or that are sort of points of friction for you, and so you really have to think hard about what is going on in the technology landscape that I am going to be able to ride that wave with my innovation, where the growth of whatever that technology trend is is something that I can then grow alongside. In our case, we benefited from three or four megatrends. We benefited from the growth of mobile. We benefited from the lower cost of computing. We benefited from the fact that everybody was coming onto the internet, and all three of those trends were disruptive to our incumbents that were selling traditional enterprise software, and so we were able to take these megatrends that we had nothing to do with, take these megatrends, ride on top of them, and they were just an onslaught of basically disaster for the traditional competitors in the space. So try and find what are the technology trends that you think incumbents are not gonna be able to respond well to because they're sort of economically, strategically, or from a talent standpoint not able to leverage those technology trends in the same way that you can. PlanGrid is a pretty cool example of this. They basically do software for construction companies and for architecture firms and builders to be able to let you do blueprints and other kind of construction projects on the iPad and the iPhone, and it's a pretty dead simple idea, but it's going after just the fact that there's billions of dollars spent every single year on either software that is stuck on your computer or paper-based processes, and they could basically ride the growth of mobile and the growth of mobile in these sort of field worker scenarios to be able to grow with that, and so they nailed the timing perfectly of, okay, it was a couple years after the iPad, now's the time where these devices are gonna start to show up in physical environments. What is the software that we need to do to be able to let construction teams and building companies be able to use that technology? So really make sure that you're gonna benefit significantly from a major tailwind, and don't create unnecessary headwinds for yourself. Your product, in a perfect world, should really literally sell itself, and this is, again, when you're going out and you're building for the enterprise, instinctively you're not thinking about how can I make the product be that sort of point of viral adoption, because we're so used to sort of building up sales teams and building up all the sort of customer relationships, which are still important, because you're still gonna have to use probably sales to ultimately close large deals with clients, but make sure that the product itself is something that can be adopted, spread, and utilized without any friction by the end user. Sales really should be used to close big deals, not to drive product adoption, and that's a big distinction in the traditional enterprise software world, where sales was sort of the only way that you could push out product adoption into companies, and so in our case, what we did was we made it, we put a huge emphasis on all of our sharing functionality in Box, so when you had a document that you wanted to share, we wanted to make it really, really, really simple to be able to share those files around, so then the software would spread itself, as opposed to us having to just keep selling it into companies like the traditional enterprise software vendors were doing, and then you use sales to close bigger deals, essentially, to help sort of navigate in that customer environment, and so Slack today is sort of the perfect quintessential example of a viral enterprise software product, where the very usage of the service is to then spread to other people, because by definition, you're communicating with other people, and they've really done this extremely well, which is make sure that you're building a product that is as easy to adopt and as viral as possible. Every single thing about that product is tuned for the end user to be able to be empowered to spread it on their own, so they can build their own sort of viral distribution channel. Sales then comes in later. then you can sell additional services or capabilities to that enterprise. And so you really want to have a bifurcation between product adoption and sales, sort of making sure that you're doing the bigger deals. Bless you. Okay, next one. Spend time, a lot of time, with your sort of futuristic customers, but don't exactly just build what they're asking for. And so what happens when you're building for the enterprise, you will always have, just inevitably, you always have a bell curve of sort of customers, of sort of how innovative or how sort of leaning into the future they are versus how conservative they are. And it's the customers that are sort of at the first sort of 5 to 10% of that bell curve. They're at the bleeding edge of everything. These are the people that they wait in line and they get the AirPods and they have an Amazon Alexa at their desk in their office. These are the customers that you want to spend a lot of time with. Because they're going to see things, even before you will, about how your technology could be used in their environment. They're going to spot trends of what's happening in their employee base and how they want to push your technology farther than you even would have imagined would have been possible. The amount of sort of innovation that we've been able to drive because of what we've heard from those customers is probably a significant percentage of what we've ended up building. But the difference is, from legacy enterprise software companies to today, is back in the day what you would do is you would just ask them, what do you want us to build? And then you'd go build those things, because that would essentially lead to a sale or an upsell. What you need to do is listen to what are the issues that they're seeing. What are the things they wish your product could do? And then either work with them or come back with solutions that maybe aren't exactly what they asked for, maybe aren't the specific features that they asked for, but are going to eventually get them down the path that really they're trying to push your product in. So we spend a lot of time listening to customers, but not building exactly what they asked for. Because when you just build what a customer asked for, essentially you become this sort of amalgamation of feature requests from every single one of your customers. And there's no way that you're going to then be able to keep a consistent North Star with your product. You're going to be sort of pulled in lots of different directions by lots of different customers. But the software vendors that do it really wrong is by not listening at all to those early adopters. They start focusing on the most conservative companies. They start focusing on the people that will only adopt if they build all of the features that they ask for. And that's really how you go wrong in enterprise software, because then you really lose sight of your vision and ultimately what you're trying to build. And so we have a bunch of different groups that we work with to try and learn all of the things that the customer would want. So we have lots of advisory boards, and we're getting lists of hundreds and hundreds of requests. But we don't just go and build whatever those requests are. We spend a lot of time thinking about how can we connect the dots between multiple requests or multiple ideas to build a solution that people didn't really even think about previously. Also, another area where software companies go wrong is, you're going to get a lot of requests from customers that are sort of contradictory in nature. Somebody in financial services is going to say, I want this functionality for my bank. And then somebody in life science is going to say, I want this functionality for my pharmaceutical company. And you're not going to be able to kind of actually synchronize those requests. They're going to fundamentally require different user experiences, different product functionality. And where a lot of software companies go wrong is you start to sort of build all these features in isolation. And then you sort of zoom out five years later, and you've just built this mess of technology that has like, okay, we've got this vertical offering for that industry. And then we've got a separate vertical offering for that industry. You can learn a lot from companies like Salesforce, which essentially said, okay, we're going to build these modular components that can be mixed and matched to create user experiences for different industries, for different lines of business, for different job functions. We're not going to bake in all of the functionality directly into the product. We're going to give customers the tools or even our own team to do that customization themselves. So a lot of companies get into a trap where you just are mindlessly building lots of features, you sort of zoom out a few years later, and what you have is this mess of serving a whole bunch of different industries with a really, really bad user experience. The thing that we still stayed true to today, and this gets harder and harder over time, especially as the deals get bigger and bigger, is making sure that at any juncture, you're not ever trading off the user experience for some enterprise feature or some feature that's going to get you a bigger deal. There's going to be hundreds of times where you're at this moment where the customer is asking for something that is antithetical or going to go against the simplicity of that user experience. Maybe it's a security feature, maybe it's a compliance feature, maybe it's something that they're just trying to put in the way of the end user. And every single one of those decision points, we have made sure that we always favor the end user over the enterprise. And in some cases, that means that we will lose deals. And so we'll have to say no to a customer because by building that feature, we don't think we're going to be able to deliver the delight and the user experience that we're looking for over time. And so that gets really, really painful because you lose then deals all throughout the years. So if I look back over the past ten years, we've lost tens of millions of dollars of business because we said no to certain customers. What we benefited from, though, was a product that many, many years later could serve a much wider population of customers. And that ended up making our existing customers much more successful with our product. And funny enough, the companies that once didn't say yes to us and took their business somewhere else ended up being unsuccessful with those products and had to eventually come back to us. And so if you're right, and the key point here is you have to be right, if you're right and that user trade-off truly was going to be disastrous for that user experience, and you remain true to that North Star of always focusing on the user, eventually over the long run, and sort of long run can be defined whatever your market is in, you will end up winning in that market over the long run. But you're going to lose deals along the way, and that's going to be really stressful for you, for your team, for investors. But it's really important that you're crystal clear on the principles of how you're building your product and what you're going to say no to. Finally, find ways, and this kind of goes back to that technology trend thing, but try and find ways where you can have asymmetrical or asymmetric advantages over the competitors. And what you'll find is that your competitors, the big incumbents, tend to be locked in pretty significantly to particular business models. Because they, in some cases, have tens of thousands of employees that are built up to build and to deliver products in a very specific way. And so if you can find points of differentiation and disruption that they can't respond to because either it is too expensive for them to respond to, or strategically it doesn't make as much sense for them to respond, or they don't have maybe the talent to respond to it. That is how you ultimately remain disruptive to these bigger companies. That's the only way to survive as a small startup. Amazon Web Services, we take it for granted now how easily you can build a company just by writing some code and deploy it on AWS. Ten years ago, 15 years ago, what you had to do is you had to buy all these servers. You had to put them in data centers. You had to rack them yourselves. You had to connect them all together. And that would take weeks or months and cost, in some cases, hundreds of thousands of dollars just to get your startup going. But that's the benefit to us as building software companies. Think about now the difference if you're one of the vendors that built that hardware, and you sold those servers, and you sold that data center space. Think about how disruptive Amazon Web Services was coming out of nowhere and having a completely different model where now I don't have to buy servers anymore because I can just go to Amazon. Amazon did something that was so disruptive to the core business model of traditional server makers and software providers that literally, those companies, to this day, have not even responded. 12 years later, they still have not responded by being able to deliver these capabilities over the cloud because of how disruptive it is from a business model standpoint. So really try and identify, are there things from a product standpoint that can be highly disruptive to how your product can be delivered to clients versus how incumbent solutions were delivered? And I kind of wrap all of this up with a Steve Jobs quote. It's sort of, it's a requirement that you have a Steve Jobs quote in any product presentation, so I need to meet that quota. But this is really true, and it's especially true in enterprise. It's really true in consumer, but it's even more true in enterprise software. Because what happens is enterprises are just asking for solutions to all their problems. But in many cases, they don't know what the right solution is until you come out of nowhere with something they never thought would be possible. In our case, just in our product, literally, if you took 100 IT people from 100 different companies 12 years ago, and you said, draw out the best way for your company to manage documents, manage files, secure their information, not in 100 attempts would our solution have been sort of designed, because everybody was so used to the technology has to be really complex, it has to have all these interface buttons, it has to have all these features for it to make sense. We came in with a product that nobody would have anticipated because of how dead simple it was. And so you can't really go ask your customers, just like, hey, what do you want us to do? And then somehow, you're going to end up with a really great solution. You have to really think hard about what is possible in the future. What are the things that maybe your customers aren't anticipating? And you have to build that, and then essentially have that land inside of the customer base. So really make sure that you're not just building what customers are asking for, because no great technology has been built that way. Last thing that I'll leave you with. It's my, I think they're my four favorite books on building B2B stuff. But don't hold me to it, but here are four good books that I would highly recommend reading if you're going to build a B2B software company. It's all about, it sort of gets you into the mindset and have the frame of reference of how to think about growth, disruption, building a new market, and then ultimately going out and building a company that can scale in this space. So if I had read these four books 12 years ago, I think we would have not had to learn these lessons so slowly. So I would highly recommend checking these out. So with that, I would just say, good luck. Please do not compete with me. I don't need more competition. Do not use my advice against me in any way, and hope to see you in the market. So take care. Okay, and I don't know what happens next, but what? I have time, I have like five minutes, but I don't know how it works. Okay, I can answer questions, or you can leave, either way. Okay, yes? So what are some ways that you would actually suggest us to find out the pinpoints in this large company? Because similar to you when you were actually back in school, you may not have had a chance to work in those large companies. What are your take on that? Yeah, it's hard because I haven't had to do what you're asking, which is, and the question was, how do you discover issues that enterprises are having without necessarily working inside the enterprise? I think one is, spend a lot of time with people that every day they're going into the office, and they're running into all these problems. And I would just go interview like 100 people. Just like, walk me through your day. What are all the places where you are less effective, less efficient, having to do repetitive or redundant work? And don't ask for technology problems. Just listen to where they're spending their time. And what processes do they keep repeating over and over again? And then you can kind of start to imagine, well, how could software go and attack that problem? How could software attack the problem of meeting scheduling? Not a big market, but one space. How could software attack the problem of payroll? How could software attack the problem of expense reporting? All these kind of things are the drudgery of working inside of a big company. But if you haven't worked in one of those big companies, you at least have to get as much information as you can from people that do work in those big companies. And then you can kind of start to see patterns of like, okay, this seems like a really big problem. And in our case, if you had interviewed clients or people that worked in big enterprises 15 years ago, and you said, walk me through your day, I think you would have eventually spotted how much time is wasted when people are working with their documents. And they're trying to share their documents, and they're trying to access their documents from different devices. If you really peeled it apart and you asked all the right questions, you would have actually discovered this problem. We discovered it because of what we were doing in our personal lives in college. But you would have also discovered it by just understanding where are people spending time in the workplace. And then saying, hey, wait a second, that doesn't make sense, because technology today could solve that problem way better than what they're getting as solutions. And so as soon as you find that gap, that's where you can build a company. Yeah. I was wondering, you mentioned about writing the top way. What is your opinion, what do you think is the biggest type right now? Well, it's not Bitcoin, so sorry to all the Bitcoin startups. I mean, it might be, Bitcoin could be up in the top five or something. But I don't want to offend all the Bitcoin people, so I'm going to get hate mail. Can we edit that part out about my attack on Bitcoin? So, I'm going to say a bunch of the trends. I actually, I don't know how to rank order them. But obviously, AR, VR is a big one. I think AR, VR is, it's in a challenging spot because we don't have ubiquitous devices yet. And so the question is, is AR, VR like mobile was 12 years ago? Or is it still another five years away? The last thing you want to do is be the mobile startup of 2001 because those startups died. So you got it, and it's actually really hard to predict these things. So I don't have any advice on how do you predict if it's actually going to happen or not. But there was a bunch of mobile companies, and funny enough, Sam Altman would have good stories around this back in 2004 building a mobile company, and how hard it was because you didn't have the iPhone. And so before the iPhone, it really sucked being in mobile. And that's kind of the state of things right now if you're building AR, VR, which is like, we know this is probably the future. We don't know if we're looking at the right era of it yet. So that would be the one caveat I'd just say. It's going to be the future, we don't know exactly when. AI is a massive tech trend. It doesn't necessarily benefit, though, startups versus incumbents. It's going to be more pervasive than that. So I don't know how to necessarily use it as an advantage over an incumbent because the incumbents are actually almost superior in this technology right now. You can always expect the cost of computing is just going to continue to drop. So we thought that was a trend 12 years ago. Well, it hasn't gone away, and it's actually more powerful than ever before. But I think there's some pretty cool things, like as an example. And I might have to change my own even definition of this, of thinking about the compounding of two trends. So for instance, AI and cheap computing together are actually the really powerful trend right now. So Google just launched this new service that does image recognition and video recognition, object recognition inside of images and videos. So just via an API, you can send Google an image or a video, and it will tell you what's in that image or video. So that would have taken like 100 engineers five years ago to go build that. And now you get it as a simple API from Google. So thinking about, wait a second, what happens when you have a bunch of these new services that are being created on our behalf from Google, Amazon, Microsoft, etc. What's the new set of problems that we could use those solutions and build software for? So maybe you build a company that does security cameras that plugs in the Google Computer Vision API. Maybe you build a new way to navigate or search for images and data because of these APIs. So there's a lot of new problems that you wouldn't have even been able to see were a problem before you knew that this technology was possible. And so now you can start to look at the world in a different way if you have kind of complete understanding of what all those APIs are that are out there now. Cool, maybe the last question. Yeah? I was wondering what's your opinion on, as a startup, using other enterprise softwares on your platform, or just building up your own? What's an example? So, I mean, so I guess servers are pretty obvious to use, but for instance, money transactions, using something for that. Or do you have something specific that maybe could be built, versus- Yeah, I mean, I think the question is sort of like, when do you decide what to build versus what to use other companies for? And I think for us, I'm generally a, I generally believe that anything that is not your core competency, you need to make sure that you're using the best-in-class outside solution for. And so the moment that you realize, I'm not gonna be the best company at payments, you better be using Stripe or something else for that problem. You shouldn't be building that yourself. So the last thing you wanna do is spend any time as a company building out things that the market is gonna solve better than you will, and make sure that you are extremely clear on your core competency. And I think this is actually where startups go sort of the wrong way a lot of times, is not getting crystal clear on what is the thing that we can do that the market is not going to go and build and commoditize. And what's interesting, and kind of we've learned this over the years, is that's not a static definition. The market is always changing, and so your core competency might actually be changing every couple of years, because you have to adapt with the realities of the market. If I go back ten years ago or 12 years ago, we had that picture of the four of us. We would go into data centers, and we were building out our own storage infrastructure. And we knew that it sucked that we were building out our own storage infrastructure, because we knew somebody else could be doing this better than us. But there was no other solution. Fast forward to today, we have no problem using Amazon for all of that. We have no illusion that that is somehow a point of differentiation or value for us. And so the moment that the rest of the market catches up and commoditizes something that you used to be good at, you need to get away from that part of the market as fast as possible. Cool, all right, I gotta jump. Good luck guys, take care."
  },
  {
    "name_video": "Building culture",
    "description_video": "YC Group Partner Tim Brady covers the importance of building a strong and coherent culture early and shares six things that you can do now to help you create a solid foundation for your startup.",
    "related_categories": [
      "startup school",
      "Management",
      "Leadership",
      "People",
      "Culture"
    ],
    "page_url": "/library/6r-building-culture",
    "youtube_url": "https://youtube.com/watch?v=qnNHW6TYv5I",
    "mp3_file": "downloaded/Building_culture.mp3",
    "mp3_content": "Good morning, my name's Tim Brady. I am a partner here at YC, a group partner, which means I work with the companies during the batch closely. I have started three things prior, one of which was Yahoo back in 1994. So a lot of what I'm gonna talk about today stems from that experience. So as Kevin said, I wanna talk about building culture, how to think about it at this stage of your company and why it's important. Now culture can be pretty broadly defined, so let me be super clear on what I'm talking about. Really, to me, culture is just behavior. And company culture is that implicit set of behaviors inside of your company. They should inform your employees on how to behave. I guess when done right, they should inform the employees inside of your company how to behave when it hasn't been explicitly laid out for them. And the good news, if you do it right, if you get the right culture, the right behaviors will support a good business and hopefully a great business. And over the course of your company, over the history of your company, it will support that in a lot of kind of intangible ways that are hard even to describe. But that's why it's important. That's how you should think about it at this stage. Don't overcomplicate it, right? That's really it. So you're probably asking yourselves, at this stage of the company, you have so many things on your plate, you're so busy, it almost seems like a luxury to be thinking about culture, right? And that's kind of the, you're not wrong to be asking that question. And the reason is, is that when your company gets going, like these are three phases that you'll be going through as you build your company. All of you really are at this top stage that I call the idea stage, right? Talking to customers, iterating the product, experimenting, iterating the product. Hopefully you'll raise some money at some point to allow you to continue to do that. And at some point in the future, you're going to reach product market fit, right? If you think back on the product market fit talk that Michael gave a couple of weeks ago. And when you do that, hopefully you'll raise a whole lot more money and begin scaling the company. Now scaling the company almost always requires hiring a lot of people, right? And the people that you have inside of the company prior to hiring a lot of people are really your cultural DNA. Those are the people that are going to be involved in hiring and training that next wave of people. So it's super important that you get it right. You get that, that's why I subtitled this kind of the first 20 employees that you get. And there's no magic to the number 20. It's really that set of employees that are in place when you begin scaling the company. Because again, those folks are going to be highly involved in hiring and training this next wave. So if you get it right, if those first set of employees are this embody kind of the culture and the values that you want inside your company, you have a much higher likelihood of building a strong and coherent culture. The reverse is also true, right? If you make mistakes, if you get the wrong types of people inside of the company early on, they're going to be involved in hiring and training and those mistakes are going to get propagated. And it'll be much harder later on to build to kind of correct course and try to build a coherent company, right? So that's why it's important to be thinking about now. I know you have a lot on your plate in starting this company but what you need to do doesn't take a whole lot of time. For the most part, it's just some conversations with your co-founder. And so I came up with a list of six things that you can do now to help you or to help the likelihood of you building a strong and coherent culture. First one, be proud of the problem you're solving. Kind of seems silly to say, but you need to, right? If you don't have the problem yourself, you need to identify with the people that do have the problem. And you need to be really proud of the fact that you're solving it for them, right? Because building, as I'm sure you're gonna, if you've heard already and you'll continue to hear, building a company is hard. It's a long process and there will be some really difficult times. And if you're not proud of what you're doing, it's really hard to maintain the level of energy and enthusiasm you need to sustain the company, right? Sometimes where we see founders go wrong is they choose an idea with their ego. They choose an idea because it sounds good to tell their friends at a party, right? And when times get tough, it's really hard to maintain that level of energy. And the reason energy and enthusiasm is important, not just for sustaining the company, but everyone around you will see how you feel about the company, right? And to a large degree, that will set the tone for your culture. A couple of batches back, we had a YC alum come and tell his story. He went through the YC program a few years back. He applied with four other guys with the idea of helping retailers liquidate their excess inventory. That was the idea they started with. And they did all the right things. Talked to customers, iterated, experimented, and he raised some money and he got to search for product market fit and he continued to search for product market fit. Ultimately, they ended up, had a good business for a little while, but they also ultimately ended up in the business of makeup for teenage girls, right? They didn't identify with the problem. And when times got tough, they just didn't want to be there, right? They didn't identify with their customers. And he told the story of where the employees around him actually came up to him and said, hey, like, it doesn't look like you're enjoying what you're doing. And ultimately, they ended up shutting down the company. Next, when you do find the right problem to solve, one that you're proud of, create a long-term vision that others will follow. It's much easier to create a great culture if people who identify with the problem you're solving know you're solving it, they'll raise their hand and say, hey, I want to be part of what you're doing, right? We call it kind of a, you can call it a North Star for the company. And say it in a way that will inspire people. It should give purpose to the work you're doing. It shouldn't describe the work, but it should talk about the purpose of that work. And let me give you a couple of examples to illustrate what I mean. Tesla, to accelerate the world's transition to sustainable energy. Pretty inspiring, right? No mention of an electric vehicle. You know, if you said, oh, we're building the world's best electrical vehicle, that's good. You'll inspire a handful of engineers who implicitly understand kind of the technical challenges that come with that. But if you're gonna build a big company, you need to attract kind of a broad array of people. This does that. Another example, Microsoft's original. A computer on every desk in every home. It's kind of laughable now, but in the early 80s, like this was crazy talk, right? Computers were only for businesses and hobbyists. But this vision, you know, laid out by Bill Gates and Paul Gallant, attracted the right type of people to their company, right? The hobbyists that had the capability to help them build the type of company they needed to build saw this and were excited about it. It attracted and allowed them to kind of build the type of culture that they needed at Microsoft. Last one, one you're all familiar with. Organize the world's information and make it universally accessible and useful. Again, no mention of the product. It doesn't say we're building a kick-ass search engine. All right, so once you're able to come up with kind of an inspiring vision to attract the right people to your company, the next thing you should do is have a conversation with your co-founder about the types of values and behaviors you wanna cultivate inside of your company, right? Ultimately, the purpose of this at this stage in your company is to use as a filter for the hiring process. It should be a short list. And at this stage, it's fine that it's informal. If you're lucky enough to move on and grow, ultimately, maybe this list becomes a more polished corporate values list. This is probably the seed of that. But at this stage, it doesn't need to be polished, right? You don't need to publish a blog post on it. It's just a short list, less than five things. And this will help you during the hiring process to make sure that you're letting the right type of people inside the company, right? This is in addition to that skill list that you'll need, you know, job description, the skills that person needs. This is, you know, above and beyond that. So let me take you through a couple of examples. And I apologize, these are actually more corporate value lists. They're a little more polished. Yours won't need to be this polished, right? Spotify, innovative, collaborative, sincere, passionate, and playful, right? You can see pretty clearly how you can use that set of lists, that this list to begin screening potential employees. Atlassian, right? This is a little different the way they make the list. Like it doesn't have to be just adjectives like the Spotify one was. Open company, no bullshit, right? Build with heart and balance. Don't fuck with the customer. Play as a team and be the change you seek, right? They set it a little different. You can see how this came from a conversation between co-founders, right? Like I don't want to work in an environment that's highly political, no bullshit, right? That translates into, you know, kind of a hiring filter. If you're like, if someone seems political in any way, let's not let him in the company, him or her in the company. So come up with this list, right? Again, a short list. What type of company do you want to build? What type of behaviors will support the business you're building? And then create that list, but don't let it just be a piece of paper, right? Don't put it in a drawer and wait for the marketing department to polish it a few years later. You have to model that behavior. For better or for worse, the early employees will look to you for the cultural cues, right? You can't say, you know, do as I say, not as I do, right? You have to walk the walk. They will take their cues from you. Four, when thinking about this list, to the extent you can, make sure it's externally focused. It's much better to build a culture that's focused on the customer than it is on how you treat one another inside the company. Look, your short list can have both, but the more important ones are creating, like having it externally focused. Over the long haul, that will serve you much, much better. And let me give you an example of what I mean by this. So move fast and break things. You've heard this, right? Facebook. This is what I consider an internally focused thing. If you're a project manager or an engineer at Facebook trying to decide what to do next, this doesn't offer you a whole lot of guidance, right? Think back to kind of the definition I gave of company culture, right? It informs employees how to behave when it hasn't been explicitly laid out. If you're deciding what next product to build, this doesn't help at all. Just tells you to move fast, right? Shouldn't be a surprise when you look at this that some of the privacy violations that they've been charged with have occurred at Facebook, right? I don't think for a second anyone at Facebook set out to violate anyone's privacy, but their culture certainly didn't help them, didn't give them the guide rails on where to stop, right? Contrast that with kind of Google's early motto, don't be evil. Not particularly prescriptive necessarily, but it's outwardly focused, right? It lets the employees and the world know, like, hey, we're a force for good. And when you think about kind of that policy that Google has with its engineers, they're allowed to work 20% of their time on these independent projects. It's pretty impressive that you haven't heard of any of those go astray, right? Pretty amazing given the data they're sitting on. Again, outwardly focused, right? It gives some guide rails to the employees on how to behave. Next, have a conversation about diversity. And I'm not just talking about ethnic and gender diversity here. I'm talking about a diversity of opinions. Can you create a culture where people with diametrically opposed opinions, strongly held, can coexist? Can you foster conversations that are loud, but then people walk away and are okay? How important is that to your business? Right, there's plenty of research out there that suggests that companies that are able to foster this type of environment, have a diverse environment that isn't always agreeable, tend to be more creative. They tend to be better problem solvers. And the reason I put this up there is it's really hard because most of the advice when you get going, when you're hiring the first set of employees, is to, hey, tap your Rolodex, talk to friends, talk to former colleagues, right? Those people, you know whether or not they're good engineers. You know whether or not they embody the values that you're trying to put into your company. They're known quantities. And at that stage, it's a good thing. But they're also probably a lot like you, right? And you can find pretty quickly that you've built a pretty homogeneous environment in trying to hire too quickly. So have this conversation. How important is it to you, to your company, to have diversity? Because if you think you're gonna wake up at 100 employees and then start a diversity program, you're fooling yourself. Way too hard, it's too late by then. So have that conversation. It's tough, I don't have the right answers on what that looks like, but have it, it's important. So once you've done all that, had those conversations, put a hiring plan in place, right? Don't just let it happen. From the very first employee, make sure you're following a process. There's a ton of stuff online about hiring processes beyond the scope of this talk. But consider all those conversations you've had with your co-founder, the type of values you're trying to instill in the company and the type of diversity you want, and make sure that's part of the process from day one. And make sure you assess whether it's working, especially the early employees. After you hire your first couple of people, make sure you get back together with your co-founder a month or two after, and discuss whether it did what it should've. Did it filter the right way? Do you have the right type of people in your company at this point? And if it didn't work well, improve it. Plan on evolving it, right? You want it tested by the time you get to the point where you have to scale fast, right? You want a process that you know works by then. So that's it, right? Again, not too early. You have a ton on your plate. And again, what I've given you, hopefully, are just a few simple things that aren't too time-consuming. Just conversation. you can have kind of thought experiments with your co-founder that can help kind of build a solid foundation for building a culture later on. Thanks everyone. you"
  },
  {
    "name_video": "Understanding SAFEs and priced equity rounds",
    "description_video": "YC's Kirsty Nathoo gives the lowdown on several different ways to capitalize your company and how those impact founder equity and cap tables overall.",
    "related_categories": [
      "startup school",
      "Legal",
      "Safes"
    ],
    "page_url": "/library/6m-understanding-safes-and-priced-equity-rounds",
    "youtube_url": "https://youtube.com/watch?v=Dk6JNTDec9I",
    "mp3_file": "downloaded/Understanding_SAFEs_and_priced_equity_rounds.mp3",
    "mp3_content": "I would like to introduce Kirstie who is going to talk in much detail about safe notes, equity and the like, Kirstie. All right. Good morning, everybody. So my name is Kirstie Nathoo. I'm the CFO, one of the partners here at Y Combinator. And I have now worked with probably over 1,500 companies in terms of getting them incorporated, doing our YC investment, and then seeing them through their subsequent raises, either on convertible instruments or on equity rounds. So I've seen kind of a lot by now. And so this presentation is to give you some understanding of some of the things that people don't necessarily understand when they're raising money and to hopefully help you avoid some of the pitfalls that some of the mistakes that we've seen founders make. So the key message in all of this presentation is that it's important that you understand at all stages of the company's lifecycle how much of the company you've sold to investors and in connection with that, how much therefore you also own. And the thing that makes this complicated is that most companies will raise money on convertible instruments first. And because those convertible instruments aren't yet shares, it's not immediately obvious for a lot of founders how much of the company they've sold. So I'm going to talk through some of the mechanics of that and help you understand how all that works so that you don't get surprised when it's too late and you can't do anything about it. So the other thing that you should also be aware of is that a lot of companies and a lot of founders will just say, oh, I don't need to worry about my cap table. My lawyers deal with my cap table. I don't need to worry. And actually, that's a really dangerous statement. Again, you should make sure that you're understanding this. It's your responsibility as the CEO or as the founder of the company to understand all of this. And there's lots of ways that you can maintain your cap table. There's lots of ways that you can keep track of this. And the simplest form is just a spreadsheet. All it's going to show is who owns how many shares and that's it. That's all you need at the beginning. But there are other services out there that can help. I'll include them on a list of resources after the presentation. But there's tools like captable.io and Carta, which also help for you to keep track of these things. OK, so these are the three sections that I'm going to talk about. First of all, I'm going to talk about SAFEs and particularly for U.S. companies. Most companies will raise money first on SAFEs or some other convertible instruments, which I will talk about briefly as well. And I know Jeff mentioned the SAFE last week in a little bit of detail, but I'm going to go into much more detail on that and also how the sections of the SAFE works. The S stands for simple. And so hopefully you will believe me with that and you will all be ready to understand what's going on in that SAFE as you come out of this presentation. Then we'll talk some more about dilution again. So that you can see, we're going to walk through the lifecycle of a company from incorporation up to raising a priced Series A round so that you can see how things change over that period. And then I'll give you some top tips on other items to do with raising money. All right. So first of all, the SAFE. So let's cover what it is and then we'll go through the details of how a SAFE is built up. So as I said, SAFE, the S stands for simple. The rest of it is a simple agreement for future equity. And put simply, it's a instrument where the investor will give you money now in exchange for a promise from the company to give shares to the investor at a future date when you raise money on a priced round. There are minimal negotiations with a SAFE. Really, there's only two things that you're probably going to negotiate with the investor, which is how much money the investor will put into the company and at what valuation cap. So really, those two things are the things to negotiate. Whereas when you compare that with a priced round, there's a whole raft of things to negotiate. And that's what makes a priced round a lot harder to close and to raise money on than a SAFE does. So that's why often companies will start with a SAFE. And then when they get to the point of being able to raise more money and they have a lead investor, which they negotiate with for the priced round, then the SAFEs, when they convert into shares, will piggyback on the terms that has been negotiated with the lead investor in the priced round. The other thing to bear in mind is that a SAFE is not debt. So some of you will have raised on what's known as convertible debt. That's a different instrument. Debt has generally an interest rate attached to it, and it has a maturity date where the debt needs to be repaid. SAFEs have neither of those things. So it's important to understand that there is a distinction between the two instruments. But in terms of conversion, in the way that they convert in a priced round, there are some similarities. So this is the first section in the SAFE. And this paragraph actually includes pretty much all the key details that you need to understand in a SAFE. So it talks about, in exchange for payment by investor, the investor is putting in a certain amount of dollars around this date. And down here, the valuation cap is some number. So really, those two blanks are the two negotiating points. This paragraph here is something that we've added just recently in our newest version of SAFEs. And this is something that will hopefully help you so that once you've read our SAFE that we have available on our website once, if there's this paragraph on the SAFE, then you know that you have read the SAFE. The idea behind this is that if anything changes in the SAFE, either the company or the investor cannot say this paragraph. It can't say that it's the same as the SAFE that's on the Y Combinator website. And so you'll know as a founder that you should be looking at it more closely to see what's been changed. So this is just something to keep your eyes open for if you receive a SAFE from an investor. OK, so the anatomy of the SAFE is pretty straightforward. It's only five pages in length, so it's not very long. We've tried really hard to keep the language not too legal so that it's easy to understand. And really, it's split into five sections. Section one talks about what happens in various different sets of events. And so most of the time what's going to happen is there will be an equity financing at some point in the future. And so the first part of the section talks about what happens then. How does the SAFE convert? Or there might be a liquidity event, i.e. the company might get sold before the SAFE converts. So it also addresses what happens if the company is sold whilst the SAFE is still outstanding. Or the company might decide to close down whilst the SAFE is still outstanding, so it also addresses that. So those are the three real key events that might drive change from the SAFE. So it addresses all of those. And often we get questions from founders or from investors saying, but what happens if? And actually these three sections are the answers to pretty much all of those questions. And then there's a couple of other sections where we clarify the liquidation priority, which just means who comes first in the queue to be repaid in these different situations. And also clarifying that the SAFE actually terminates, i.e. it does no longer exist if any of the top three events happen. So that section is kind of your instruction booklet. If something happens in your company, that's the section you look at to see what happens to your SAFE. Then the next section, section two, is just the definition section. So anything that we refer to within the SAFE will be explained in section two. So if you're not sure what the company capitalization definition is, you go to section two to look at that for an explanation. Section three are the representations that the company makes to the investor. So it's saying things like the company is duly formed. It's correctly formed in Delaware. Section four is the representations that the investors make to the company. So it's things like the investor saying, yes, I agree, I'm an accredited investor. And then section five is kind of legal boilerplate language that needs to be in there. So really, from your point of view, the sections that you really need to understand are sections one and sections two. Obviously, you need to know what you're representing in section three as well. But those section one and section two are the key, key parts. And that bit is only three pages long of the SAFE. So I'm pretty sure you can all read three pages and understand what's going on. So I encourage you to do that. OK, some of you may have heard in the last couple of weeks, we announced to move to a different type of SAFE. We've introduced the concept of post-money SAFEs. And it's important that we understand what post-money means. What it basically means is after all the SAFEs have converted, what happens at that point? And we'll go into that in a little bit more detail in a moment. But it's easy to get confused about what post-money means here. But it's after all the SAFEs. And the reason why we introduced these is that we wanted to make it easier for founders to understand the dilution that they were taking. I.e. how much of the company they'd sold to investors and so how much less of the company they owned. It's a lot easier to understand that with post-money SAFEs than with the previous SAFEs that we had, which were known as pre-money SAFEs. Okay, so basically when we're talking about pre-money and post-money, we're talking about the same thing. It's just a different way to express it, to explain it. And so in both the priced round and for SAFEs, the formula stays the same. So the pre-money valuation plus the amount of money raised equals the post-money valuation of the company. Okay, so if you have a $5 million pre-money valuation and you raise a million dollars, then the post-money valuation of the company is $6 million. Okay, and that's important to remember in a moment. But really that's as simple as it gets. So then based on that, so that you can understand how much of the company you've sold when you're raising money on SAFEs, the formula is just the ownership of the investors. The ownership that the investors will take is their amount raised divided by the post-money either valuation in the case of a priced round or valuation cap in the case of a SAFE. So in our example before, if the investors were putting in $1 million and the post-money valuation was $6 million, then they will own 16.67% of the company. Does that all make sense to everybody so far? Okay, good. So I'm going to talk only about SAFEs with valuation caps here to keep things simple. But just be aware that there are other different flavors of SAFEs that you can use and that you may have already used or that you may find that you use in future. So there may be the concept of a discount instead of a cap. So instead of capping the valuation at say $6 million, it says there's a 20% discount on the Series A price. There's also an uncapped SAFE, which basically just says, I'm going to put money in now as an investor. And when you do a priced round, I'll get the same price as the priced round investors are going to get. That's pretty uncommon because the investors who are putting in money early want some kind of bonus for putting in the money early. So it's pretty unlikely that you'll use one of those. And then finally, there's a SAFE that's uncapped with a most favored nation clause, which basically what that says is, I'm not going to agree a cap right now. But if you raise some money from some other investors who do have a cap, and those terms are better than my terms, I get their terms as well as an investor. So this one can sometimes happen if you're raising money very early on and you don't really know what the cap is. And maybe, you know, you just want to punt it for another month or two. But it just creates a little bit more admin for the founders because it's another thing that they have to keep track of. So we see them sometimes, again, not all that common. By far, the most common is just the valuation cap only. All right, so now we understand SAFEs and how they're made up. We're going to talk about dilution and understanding how your cap tables work. All right, so we're going to walk through this process. So we're going to start with our company at Incorporation, which Carolyn talked about right at the start of the Startup School course, I believe. So hopefully this will not be anything new to you. Then we're going to talk about what happens when you raise money on SAFEs, on post money SAFEs. Then we're going to talk about what happens as you hire people and start to issue equity to employees. And then the company is going to do a price round. And so what happens to the cap table at that point? And now I'll warn you, this is starting to get into the math section of the whole thing. So turn your brains on and keep concentrating. All right, so Incorporation. So let's just assume it's a really simple company. There's two founders and they split their shares equally between the two of them. So in this example, each founder owns 4.625 million shares. So there's a total of 9.25 million shares issued and each founder owns 50%. That's pretty straightforward, right? And so at this point, in order for them to own those shares, the founders have done the paperwork. They've granted those shares through a restricted stock purchase agreement. And there's vesting on those shares, as was talked about with Carolyn earlier in the course. Okay, so then the next thing that's going to happen is this company raises some money on a post money SAFE. And they raise from two investors. So the first investor comes in quite early and they put in $200,000 at a $4 million post money valuation cap. And then a little bit later on, investor B comes in, puts in $800,000 at an $8 million post money valuation cap. So if you remember back to our formulas, the ownership that investor A has at this point is their amount of money that they've put in divided by the post money valuation cap, which gives them 5% of the company. Same for investor B, $800,000 over $8 million, which gives them 10% of the company. So in total, the founders at this stage have sold 15% of the company. So even though this doesn't change the actual cap table, because these aren't shares at this point, this is just a SAFE, this is just a promise to give shares in future. The founders should know at this stage that they have sold 15% of the company. And if they've sold 15% of the company, then they can no longer own 100% of the company. So now instead of the founders owning 100% of the company between them, they've been diluted by the 15%, so they're going down to 85% of the company. So it's important to have that in your brain when you're raising money, because whilst the cap table, like I say, doesn't change, the fact that you've just sold 15% of the company is an important fact, and it's an important thing to know because you want to make sure that you're not selling too much of the company because you know that there's a lot of future fundraisings that are going to happen with the company, and therefore there's going to be more future dilution. Is everyone happy with how we've got to that 15%? Yes, the question. So the founders are the only ones getting diluted at this point, the earlier investor doesn't get diluted. Right, so the question is, it's only the founders that are being diluted at the moment, and yes, that's exactly right, because that's the construct of the post-money safes. The later safe investors don't dilute the earlier safe investors, it just dilutes the existing shareholders. And at this stage, it's just the founders who are the existing shareholders. Does it make sense to have shares in the treasury so that they can cover the anticipated dilution? Okay, so the question is, does it make sense to have shares authorized but unissued, I think is what you mean. So at this stage, it doesn't necessarily make a difference as you'll see in a moment, you actually create new shares that you're going to issue to these safeholders when they convert. So at this stage, it's fine to just have the shares that the founders have, and maybe some that you want to give out for hiring. Why index strain D has different post-money valuation cap? Well, in this example, so the question is, why do they have different post-money valuation caps? And so in this example, you know, it could be for any number of reasons, but in this example, we're assuming that, you know, this one happened maybe a month after incorporation, and maybe this one happened six months after incorporation, and more has gone on in the company, and so there's slightly less risk, and so the company has been able to negotiate a different cap. But things change through the company, and it's totally fine to have different caps, because as you can see from here, you just calculate everything separately, and then add it all together. Okay, so company's raised a million dollars, first thing it's probably going to do with that money is hire some people. And when you hire employees, you're probably going to give them some equity. And so in this example, the company creates at this stage a option pool, otherwise known as an ESOP, or an employee incentive plan, there's lots of different names for it. And in this example, they have created a plan or a pool that has 750,000 shares in it, and they've issued out of their 650,000 shares to early employees. So this has now changed their cap table, because they've issued shares. And so the fact that there's more shares being issued means that the cap table changes because we now have more shareholders. And so now we have a total of 10 million shares that have been fully diluted basically means the combination of issued and set aside in the option pool, in this case. So now we have our founders, instead of owning 100%, have 92.5% of the company. And the option plan in total is 7.5% of the company. But remember those safes. So these founders don't actually have 92.5%, because they have also sold 15% of the company. And so actually, they own less than the 92.5%. They've actually, they actually own 85% of that, which is about 78.6%. So again, this is where it gets dangerous for the founders. If they forget about the safes, the founders are sitting there saying, well, I own 92.5%. This is great. I own still loads of the company. And they have forgotten about the safes and the dilution they're about to take from that. So again, it's really important to keep track of how much you've sold on your safes so that you can do that calculation and say, actually, I don't have 92.5%. I have 85% of that because I've sold 15% of the company. But it's also, these numbers have been diluted by those safes as well. So as you'll see in a moment, these numbers change as well. Okay, so now we're going to fast forward about, let's say, a year. The company is doing well. It's raised a price round. And it has a term sheet for the price round, which says that the pre-money valuation of the round is $15 million. And they're going to raise a total of $5 million, of which the lead investor, which is the investor that they do all of the negotiations with, is going to invest $4 million. And so if you remember from our formula at the start, the post-money valuation is the pre-money valuation plus the total raise. So the post-money valuation is 20 million. The other thing that gets negotiated as part of the price round is the option pool increase. So generally what happens is that the investors in the Series A will say, okay, we're going to put some money in. We're going to put some money in. And then they'll say, okay, we're going to put some money in. We know that this money is going to go towards hiring. So we want you to create an option pool for all the new employees that you're going to employ and give equity to in advance so that it's sitting there ready for those employees. And so usually you see that the option pool is about 10%. It might go up to about 15%. But anything more than that is fairly non-standard. Yes, where did that come from? Oh, over there. Okay, yes. Is the 10% coming from founders or collectively? So the question is, is the 10% coming from founders or collectively? And you'll see in a moment, it's going to dilute the existing shareholders and the safeholders, but it doesn't dilute the new money. So how is the option pool represented on GAPI? Is it represented on GAPI or what form does it take? So the question is, how is the option pool represented on the cap table? So if we go back to here, we just show it so that we have the options available from the pool that haven't been issued is a line. And anything that has been issued from the pool is a separate line. The reason why we show those two things separately is that these shares are considered outstanding, they're considered issued, whereas these aren't. And so that's the difference that that's what fully diluted means. It means outstanding shares, which are these two lines, plus any shares reserved under the option pool. All right, where are we? Oh, so quick maths question for you. What do we expect that the lead investor will own? What percentage of the company do we think the lead investor is going to own after the round closes? 20%, yeah, for the lead investor, 25% in total for all of the Series A investors. Okay, because the lead investor is going to put in $4 million, divided by $20 million gives 20%. So you'll see in a minute in the cap table that that all works through in the calculations. But it's always good to just do that quick check so that you can sense check what's going on in your cap table. All right, so in a priced round where you have, or where the company has raised money just on post money safes, and then has raised a priced round, three things will happen. And these three things happen at the same time in terms of the documents. But in terms of the calculations, it's important that the order is correct. And so the three things with post money safes is that the first thing that happens is the safes convert into shares. Then an options pool is increased or created if there isn't one already. And then the new investors invest. And you'll see in a minute how that all works through with the calculations. Now, one other thing that starts to get a little bit confusing here is one of the sort of the lingo of how this works is that often the lawyers and the founders will talk about the safes being included in the pre-money. And what that's basically saying is that when the new investors invest and they calculate their price per share, the calculation includes the shares from the conversion of the safes. So even though the safes themselves are referred to as post money safes, that's talking about how the safes convert. This sentence where the safes are included in the pre-money is talking about how the series A price is calculated. So it gets a little bit confusing because it's talking about post money and pre-money, but that's just something to bear in mind when this happens. And obviously at the time that you're raising price round, you're going to have a lot of advisors, you're going to be working with lawyers who can explain all of this to you as well. All right, let's go through these three steps then. So the first step is our safes are going to convert. And we already know, because we've already done the calculation, that these safes are going to convert into 15% of the company. And so 15% of the company means 15% of the total fully diluted shares, both common shares and preferred shares. So investors get preferred shares, which have a different set of rights and privileges than the common shares, which is what the founders and employees get. So we have enough information here in the cap table that we have here to calculate what the actual number of shares are here, because we know that they're going to be 15% of the total issued shares. So we know that this is 85% of the total issued shares. So we know what our total is. And then once we get the totals, we can work out what 5% of that is and what 10% of that is. So after a bit of algebra, these are the numbers that come through. So now at this point, we have 11,764,705 shares in total, because it's preferred shares plus common shares. Our first safe investor, who we said was going to have 5%, has 588,000 shares, which represents 5% of that 11.7 million. And our second safe investor has 10%. Now, it's important to remember that this is partway through a whole process. It's partway through those three steps that are happening in a priced round. And so actually, you're never going to see your cap table looking like this. This is just one step in the calculation, but it's just to break out so that you can see where that 15% has come from. And you can also see here that when we were saying that the founders, instead of owning 92.5%, they owned about 78%, you can see that here because they've been diluted by that 15%, as have the employees with their options. So this is the post money part of the post money safes after the safes have converted, but before anything else has happened in relation to the priced round. Got it? Okay. All right, so the next step is, oh, we have a question. Okay. So the percentage of, if you can go back, so the 5% and 10%, that has nothing to do with the post valuation and the 78, right? Okay, so the question is, does the 5% and 10% have any... Does the 5% and 10% have any... Like the seal state. Yeah. Okay, so yeah, so the 5% and 10% is based on the valuation cap in the safe. And so assuming the priced round valuation is higher than the valuation cap in the safe, then this is just looked at with reference to the safe. And it's just connected to the existing shareholders. If in the very rare circumstances that the priced round is lower than the valuation cap on the safe, then actually these safe investors will get a better deal because their safes will convert at the same price that the series A investors have, which is a lower price than the valuation cap. So actually there is the potential that this can go up. This percentage can be higher if the priced round is valued at a lower price than the cap on the safe. But that doesn't trigger the conversion? It still triggers the conversion even if the valuation is lower because it's the fact that they've raised money that triggers the conversion, not the price. So it's just something to bear in mind that when we're talking about this, that post money safes and in this example that you're selling 15% of the company, there is potential that it could be higher, but it's a pretty rare situation where you raise a priced round that's priced lower than the valuation of your safes. And it's also something to bear in mind of trying not to negotiate too hard on the safes to make your caps too high, because if you raise money on a $100 million cap, but then you can only raise money on a $25 million priced round, let's say, then you're actually selling more of the company to those safe holders than you expected. If the holders have convertible debt at this point in time, where does that come into play? Okay, so the question is if there's convertible debt. So this would happen here as well. So it would, the calculation for convertible debt is slightly different, but it would happen in here and you would show them just as other investors because they would be converting into shares in relation to the priced round as well. What if you went crazy and actually gave, sold 85% of your company and the valuation is lower at the end, what happens? You can't share more than others. Well, so that's the big question. So the question is what happens if you go crazy and sell 85% of your company? That, yeah, I mean, that's the problem. The founders can raise too much money on too low valuation caps when they're raising on convertible instruments when they're raising on convertible instruments, they don't realize how much dilution they're taking and then they get to their priced round and they look at their cap table and they're just like, what, I only own 10% of the company now. And unfortunately, there's not a huge amount you can do at that point because you've already entered into the contracts with the investors to do this. And so that's why it's important to not get into that situation in the first place. You had made a comment earlier that the saves are priced, but the cap is higher than the priced round, then you would lose actually a lot more. Can you explain that? Because I thought the cap was actually the cap, right? Because price had told them that you were still good at the lower priced amount, right? So, yeah, so the question is how the cap works in terms of, in relation to the priced rounds. If the priced round is higher than the cap, then the safe converts at the cap, which means that the safe holders basically get more shares for the same amount of money than the series A investors get. So in that situation, that's how you know what percentage you're selling. But in the situation where the cap is higher than the priced round, then you would never, it wouldn't be fair to the safe holders to have them getting a worse deal than the series A investors because they put money in earlier. And so what happens then is that you, the calculation, if you remember, if you go back. the section one of the SAFE where it says what happens in a priced equity round situation it says if the if the cap is if the cap is higher than the priced round then they just use the priced round price to calculate their shares and so because that priced round price is different these numbers will go up. So you don't lose much right? Well it depends it depends on the delta so if it's if it's only a little bit different then yeah maybe instead of 15 they've sold 16 let's say but if it's if the delta is really big then it could go up but again it's it's something to be aware of it's in the current environment it's pretty unlikely that people raise price rounds at lower valuations than their SAFEs just because when you're raising money on SAFEs the investors won't agree to invest at a ridiculously high valuation because they want they want to get that bonus of the lower price when their when their SAFEs convert. Yeah okay let's keep going. All right so this this step you're going to have to trust me on. So the next step in the in the section is that the option pool is increased and this is actually quite a complicated calculation it gets a little bit circular and I'm going to be sharing a model with everybody so you can see how this works if you're interested but basically what you're trying to do is to get to 10% of the post money shares are sitting available in the option pool and in this example we're going to increase our option pool by 1.695 million and you'll see in a minute that that flows through into the cap table and you'll see that 10% but just trust me on this one because this is this is quite a complicated calculation. And then step three the new money invests so this is where we have our series A investors putting in five million dollars and there is a couple of calculations that happen in there so the price per share that's calculated for the round is the valuation divided by the capitalization so this is the pre money valuation 15 million and when we're talking about capitalization here what we are meaning is this is the total fully diluted shares after the safe conversion and the option pool increase so that's why this is step three because our safes have converted and our option pool has increased and so we have our 10 million shares that we'd issued 9.25 to the founders 725,000 in the options pool plus the safe conversion shares plus the increase in the options pool and you'll see the numbers in a moment so then the number of shares that the series A investors get is the amount they're investing divided by their price per share so those are the three calculations that you need to remember for your series A. So here we go here's here are those calculations so we're saying that the capitalization we have our 10 million shares that were already issued we have our 1.76 million shares from the conversion of the safes and we have our increase to the option pool of 1.695 million so that gives us 13.5 million total shares we divide our 15 million dollars by those shares to get a new money price so this is the price that the investors will pay for their shares of 1.114 dollars so that means that the 5 million dollars of new money that's coming in will buy 4.48 million shares and the lead investor because they're putting in 4 million will get 3.59 million of those shares. So these are the calculations that get that get worked through this is what the cap table then looks like post money so this is now everything has been done in the round. So we've still got our founders we've still got our options those numbers haven't changed this numbers changed because it's increased by 1.695 million and you can see here that now this is 10% of the total shares which is what we were targeting because that was agreed in the term sheet. We have our safe investors who the number of shares haven't changed because they already we'd already done their calculation for the conversion but their percentages have changed it's gone down a little bit and the reason why those have gone down is because the safe investors have been diluted by the series A money and by the increase in the options pool and then we have our lead investor and our other investors in our series A and as you remember when we did the the quick back of envelope calculation at a point of getting the term sheet our lead investor owns 20% our other investors own 5% so in total they have 25% and so the founders up here now own 51 and a half percent which is a big jump from the cap table that they originally were looking at where they owned 92 and a half percent and that's where this gets complicated if you don't understand your dilution you don't understand how much of the company that you've sold when you get to this point and you look at the cap table and you're saying oh no I only own 30% of the company how did that happen there isn't a lot you can do because most of that dilution has already happened because you've raised money from the safes there because you've raised money on safes and so that's why it's super important that you keep track of this dilution because at this point there isn't a lot you can do about it all right moving on so a couple of couple of top tips for you we've mentioned briefly about convertible notes and that's just another instrument that you can use to raise money in the early days often we find companies outside of the US will raise money on convertible debts there's nothing wrong with it it is a little bit more complex just because you have to deal with interest that accrues on it and maturity dates but companies companies deal with that but what I would say is try not to have a combination of safes and convertible notes just because it makes things a little bit more complicated in the calculations so if you start raising on debt then probably stick with it but ideally start with safes because it's actually making your life's a little bit easier so again we are now recommending that companies use post money safes but there are pre money safes available and some of you may have already raised on pre money safes that's totally fine it just makes it a little bit more complicated to understand dilution but you can still do the same back of envelope calculation to get a ballpark figure even though it's not exactly accurate if you have raised money on pre money safes then it's fine to come to in future raise money on post money safes the calculations just get a little bit complex but it's it's totally doable so that's fine don't panic would suggest that you probably move on to post money safes even if you've raised money on pre money safes just so you can keep track of your future dilution and a quick word on optimization in all of this when you're raising money on safes don't try to over optimize for the cap it gets really easy to start seeing this as a competition and you start talking to your friends and you start saying well I've raised money on a six million dollar cap and they say well I've got an eight million dollar cap and so I'm more successful than you are and you know as Jeff mentioned last week fundraising is not the be-all and end-all it's a means to an end so just don't don't try to over optimize don't try to push this up too far because you're negotiating with investors who do this all day and every day and you're probably not somebody who negotiates this all day and every day and actually when I ran the numbers on the calculation that we've just been through if we'd have changed that eight hundred thousand that was raised on an eight million dollar cap to a ten million dollar cap the ownership at the close for the founders would have been fifty two point seven percent rather than fifty one point five so it's not actually a huge difference especially if you have two or three or four founders co-founders and the extra pain for negotiating that two million dollar cap is probably not worth it you know just take the money do what you need to do with the money and make the company a success instead okay so in conclusion use post money safes where you can hopefully all of you can use those going forward understand what you're selling with the company so make sure that you keep track of your dilution and understand where where the company is being sold and finally again don't over optimize for valuation caps because it doesn't actually make as much difference as you think it's going to make thank you very much for listening I know this stuff's difficult"
  },
  {
    "name_video": "How to improve conversion rates",
    "description_video": "YC's Kevin Hale covers the first principles of conversion, one of the main drivers of growth for your startup, and how you can improve it starting with your landing page.",
    "related_categories": [
      "startup school",
      "Growth",
      "Product",
      "Building Product"
    ],
    "page_url": "/library/6l-how-to-improve-conversion-rates",
    "youtube_url": "https://youtube.com/watch?v=PGqX9fpweyc",
    "mp3_file": "downloaded/How_to_improve_conversion_rates.mp3",
    "mp3_content": "So, this presentation on improving conversion rates is designed to mostly focus on like landing pages, but all of the principles and ideas that I'll talk about in this talk actually can help you improve the conversion rates of almost anything, any user interface, so keep that in mind. This is a typical example conversion rate funnel, and when you're trying to improve a conversion rate, you're basically trying to improve the efficiency of going from one step to the next, and the thing is, why we care about conversion rate is because it's part of two different aspects of growth, the two main sort of drivers, and so growth is kind of like the balance between conversion and churn, and basically growth happens as a gap between the two. Something to keep in mind is that working on churn is actually much easier than working on conversion, so in this talk, we're working on the harder thing, it's the thing that usually are going to get started. When I talk to a company, and I'm trying to help them with their conversion rates, the first thing I usually try to figure out is do we even need to be working on this at all? So the only time you should be working on and improving your conversion rate is because you have a leaky bucket. So I'd like to just talk about a couple of benchmarks into industry so that we all kind of sit on the same page and understand whether we should be working on this or working on something else, like putting more things into the top of the funnel. Shareware. Conversion rates here is about .5%, so basically, this is old school, like before the internet, if people just release software out for free and they just hope that somebody will pay for it out of their own goodwill, this is the conversion rate you can expect. Casual download games, it's about 2%, so stuff that you sort of play on and off while waiting in line. Most companies kind of care about this one, freemium software as a service companies, they range between 1.5 and 5%. On average, it's about 3%. So once I talk to a company and they have pages that are converting at about 3%, and that is from like out of 100 visitors that visit your page, 2% to 3% sign up, I usually say you probably don't need to spend that much more time on this, there's probably other things you should work on instead. That being said, you can do much better than that, Flickr back in the heyday had a conversion rate between 5% and 10%. Adult friend finder. So depending on what you're selling, people wanted a whole lot more, so 10% to 22% for sex and end of loneliness. Even better, so these are, if you don't recognize them, children's social networks. And so basically, this is the conversion rate to get your kid to shut the fuck up, right? To leave you alone. TurboTax online, the monster, 70% conversion rate. Basically you're going to TurboTax, you're downloading that software, you are paying for it. It is very, very high intent. Every conversion rate problem looks like every other user interface problem, and the concept or framework that I like to use to explain how to solve any user interface problem is using something called the knowledge spectrum. This was created by an amazing interface designer named Jared Spool, and basically the knowledge spectrum says that this represents all knowledge on a spectrum, and on this side represents zero knowledge. No knowledge. You don't know anything. The other side is godlike, all knowledge. Your product and your user sits on two points on that line. Just two dimensions. Your user sits here at what we call the current knowledge point, and your interface, your landing page, the thing you want them to do, sits here at the target knowledge point. And every interface problem that's trying to be solved is trying to close what we call the knowledge gap. That's it. You don't need to go to a complicated design school to know how to solve these problems. You either are going to increase the amount of knowledge that is needed by your user, or you need to decrease the amount of knowledge needed to use your product or interface. That's it. And I, whenever I'm looking at anyone's design problem, I'm trying to figure out, do I need to increase knowledge, or do I need to decrease it? So the most helpful exercise that I will use from this, once I understand this concept, when I'm trying to design a landing page or to improve it, is to simplify things very, very simply. And what I imagine is something called the one-button interface. So let's imagine that we reduced our landing page, our product, to just one button on a page. The question becomes, what do I have to put on this page to get someone to push the button? What's the minimum amount? That's what you ideally want to have on there. And is there any information that I put on this page that keeps me from pushing the button? Or is there any lack of information that keeps me from pushing the button? Now, for every time that I deal with any page that I'm looking at that I'm trying to help improve, I basically go through a series of seven questions for every single one. And then through the series of seven questions, I look very smart. You now can be smart on your own. The first question I ask is, what's the call to action? Is the button, is the thing I most want my user to do, is it super obvious? Where do I find it? And the thing to keep in mind about the call to action is it should be really, really close to a concept I like to call the magic moment. The magic moment is basically the experience, the knowledge, the information, the interaction that someone has with your startup, and all of a sudden they get tingly inside, the light bulb goes off, and they go, holy fuck, I've been waiting for this my whole life. I now get it. This is super exciting. I can't wait to use this. And your call to action should be as close to that magic moment as possible, that when I click that button, I'm going to be taken to that point. So often, I go through a design critique with someone, and I'm like, what's your magic moment? And then somehow, the call to action is like 27 steps away from whatever it is that makes someone feel special or gets really excited about your product or app. So D should be as close to zero as possible from your call to action. The six other questions, we're going to go through relatively quickly. And then we're going to go through two examples from people participating in startup school. Just watch them in action. The next question is, what is this magic moment? And my test for this, my litmus test is like, can I just copy paste a sentence on this page, this landing page, that I can put into an email and send it to my mom, and my mom goes, I understand what this is. 99% of the time, I look at people's websites, and they're so filled with MBA, marketing jargon and talk that there's no sentence that exists on that page that lets me very clearly understand what it is that this company does. Is it right for me? So people who are super in a rush, impatient, trying to solve their problems, they're quickly trying to identify themselves. They're just like, am I in the wrong place? Is this the right product? And the way they're trying to determine that is to see like, is there any reflection of themselves in this or any reflection of their problems located anywhere on the page? Is it legit? So the threshold is very low here. This can't look like a Russian spamming website, right? Outside of that, you don't need to overthink this. Thanks to tons of templates and themes out there, you should be able to get over this bar very, very quickly. Who else is using it? So a lot of people are uncomfortable using a product unless they know that there's something else out there. I think it's a variation of legit, but again, this bar is completely different. It's letting me kind of know, oh, a shortcut for is it right for me and is it legit? And basically a shortcut for trust. And people often are trying to say like, oh, if so and so is already using this, then I should actually give this a chance. How much is it? What's the catch? This is the one that so many B2B enterprise companies are afraid to put on their website, which is why we've paired this talk up with pricing. And basically you should have some empathy. How many times do you go to a website and go like, well, I'll use this without knowing how much it costs. Sounds good to me. Let's just do it. No one does that. And so you shouldn't be surprised that your conversion rates are affected because you don't tell people how much it costs or what's the catch. So let's say you're giving away something for free and really your business model is you make money some other way. You should explain that to people because otherwise people feel paranoid or worried or feel kind of weird. And then lastly is where can I get help? There's always a percentage of users who will go to your website and know it doesn't matter that you have all the FAQs, you've written everything down, you've created these beautiful video documentation. They will just go like, I just want to ask someone, I just need to talk to somebody. I need someone to tell me directly. And part of it is some people are just like, I just want to see if there's a real person behind this. That's number one. Or some people are just can't be bothered. And sometimes it's easier for them to just directly ask, then navigate through the website. And if you don't make it really easy to find and contact you or make it look like that you are going to help them if they start using the product, they probably won't use it. This talk is so short. So that's basically it. Those are the seven questions. We are now going to go through two examples of startup school companies that sent their stuff to me. And I don't really have their permission. But they did submit it when they asked to have a design critique done in the startup school forums. So I feel like we're going to be okay. So the first one we're going to do is meetingroom.io. First question, what is the call to action? What is it that this company most wants me to do? And then what I do is I basically then try to do that thing and just follow it all the way through and just see how far away am I from the magic moment. So these guys create virtual meeting room platforms. So basically we don't have a copy paste sentence. But basically it's like you want to meet in VR space with someone. You can use this to help create that space and create that sort of meeting. Second question is get a virtual room right now. There's a lot of things that are sort of competing with it for all the call to actions on this page. And then we kind of don't repeat it down here. That reminds me where to go. So let's go to the most efficient. Get a virtual meeting room right now. And then on here we have competing call to actions to download. And then we have manage rooms. And then there's a start here to get to your virtual room, which is a carousel that walks you through seven steps to finally get to making a room. But none of these are the actual forms to do it. So you have to then go here. And then hopefully you will remember all of those seven steps in the carousel and you will walk all the way through it. So things that I would recommend would be like I want to have always one button that's very, very clear is what I want you to do on any given page. Number two, I don't think this makes it easy to understand and I can't keep it in my head to follow. It's good that they know all the steps, but I would probably imagine that there's something that's going to help me experience that magic moment much sooner. And what I imagine is that magic moment happens when I finally like make a booking and I meet with someone in a room together and we start interacting and we're solving something. And I feel like if I can't do that right away, then I want to have them be able to experience it some way. So I would totally add some kind of video. I think they have that kind of here that will kind of show it off. This video is kind of long and it doesn't get us to that sort of magical place. So that's number one. Second, what is this? So virtual meeting room platform. But if I copy and pasted that, I wouldn't quite know. Also you see these carousels kind of moving around. Carousels don't work very well because you're hiding information that I might want to have to answer any one of my seven questions. And secondly, oh God, I can't figure out. We do this thing where he calls it an open beta. And so the legit part here starts getting affected. It's like, oh, I can't rely on this. And then later on the signup page, it talks about entering into the closed beta. And so these are all things that indicate I'm not ready for you to experience this. Don't use me for any real meetings is what this sort of telegraphs. And so if this basically works, I would try to move that straight forward to there. And then on here, we're trying to look for who else is also using it. So we don't have a list of customers. Instead, we have a bunch of other logos here in terms of featured in a bunch of press, that we have partners, but I don't know what that means. And then we have a bunch of awards. But none of them are actual people using it. And so it's so many logos of other things that it would make me nervous that no one's really using this as a result. And then lastly, when do I get help? We've got an intercom in the lower right. And then we also have no help page, no documentation to quickly sort of look at to see how this works. And then the last one is going to pricing. So here, we get to this point, and I realize, okay, I see this pricing. If I need 12 people in a room, it's going to be $99 a month, and then I can start sort of working on it. And it's one page over. And if I go for the free, again, we'll go through all this whole process. So a bunch of little things. We just go through all the questions, and we can see a bunch of non-optimal stuff on this page. Let's go to our second example. It'll be a little bit different. So this is a company called DivJoy. And so they describe themselves as a React codebase generator. And then he has this one description, which is, like, use our free web-based tool to create the perfect codebase for your next project. So my first question I'm trying to figure out is, like, what's the call to action he most wants me to do? And so as I scroll down this page, there's actually nothing that looks like a giant button. And actually, the big thing he wants me to do is click on one of these templates, these screenshots that are supposed to be the button. So we have sort of an affordance problem. And then we go into here. And my magic moment is when I get over and realize it's, like, oh, it's not just, like, landing page templates, but it's, like, a dashboard. It's, like, a sign-in page, a pricing page. It's, like, the entire project for building a SaaS app is all located here, which I think is really amazing. And nothing just tells me that that's what's all here. And I might not find out until I export code, and then I hit download, and then I'll get the code. Oh, yeah. So we're so many steps away from sort of... of experiencing that and also I feel it's so not explicit that I might miss how amazing what he's built here is in terms of what he's offering. One thing he does kind of well is like he doesn't have like logos of customers but he has shown how many people have created or downloaded the templates. So this number kind of sets it like oh there's people actually using this and finding it useful. Down here he tries to get at this everything you need is included and then he adds all this other text but all that text is there and the odds are your users aren't going to read them. So because it's located into that copy it gets kind of lost and then again we have an intercom but there's just not enough information in terms of like FAQs right an about page that just makes me go like oh that this is more than a side project and so in terms of like how much I can sort of invest in this and how much I can rely on this down the road in the future is going to be minimal as a result. Great."
  },
  {
    "name_video": "Startup pricing 101",
    "description_video": "YC's Kevin Hale goes over the fundamentals of pricing and monetization, how it affects your customer acquisition strategy, and how to optimize it through a few rules of thumb.",
    "related_categories": [
      "startup school",
      "Growth",
      "Marketing",
      "Business Models",
      "Monetization"
    ],
    "page_url": "/library/6h-startup-pricing-101",
    "youtube_url": "https://youtube.com/watch?v=jwXlo9gy_k4",
    "mp3_file": "downloaded/Startup_pricing_101.mp3",
    "mp3_content": "This was a highly requested talk from last year, where lots of people had questions about pricing or really confused. It actually was well requested both at YC itself. It's a very, very popular workshop that we run. And so we're going to go over a lot of basic fundamentals for pricing that hopefully will just help you understand how to approach your pricing and monetization from first principles, and then help you help yourselves. Same thing with the landing page talk. So we're going to go over first principles for pricing. We're going to go over, why is pricing particularly hard for startups, for people making innovative products in new markets? Why is it extra difficult? How do you do price optimization? How do you actually do it? What does that actually look like? And just kind of demystify that whole process. When we look at the challenges of pricing, you start recognizing why certain types of customer segments that you're going after are difficult, like S&P. And we'll talk a little bit about that. We're going to talk about how pricing affects your acquisition strategy. It changes what you can do and what you cannot do. And it's extremely important, because a lot of companies get caught up doing the wrong acquisition strategy or wasting too much money, because their price is incorrect. And then I'm going to give you some rules of thumbs, some pricing tricks, just to help make it a lot easier when you're encountering different pricing problems. I call them pricing trick sprinkles. OK. There are three levers you can pull to improve growth. So in the last talk, I talked about conversion rate and churn. But monetization is actually the big dog. It's the one that I really like. Now, there was a survey done with over 500 SaaS companies. And they talked about amount of effort that they put into each one of these strategies and the returns that they got as a result of it. Now, acquisition is really fun and exciting. It's the one that everyone understands simply. It's like, I get more customers. I get more logos. Gives me more growth. Retention, of course, is about keeping customers. And monetization is about getting more money per customer. Now, if you increase just your efforts or resources by 1%, your work on acquisition, you usually get a return of about 3.32%. In retention, it's about 6.7%. And when you're optimizing pricing, that gives you your biggest bang for your buck, in terms of impact on your business. Yet, it's the one that is most neglected. And I think it's the one that everyone is so afraid to touch. Because they're so scared that if they get the pricing wrong, that they will lose all their customers. Now, the first principles, the basic idea about pricing, the thing, the concept that really opened up in my head how to think about pricing, how to understand the problems that people are facing, and why startups get it wrong, is to use a concept called the pricing thermometer. And so you have to understand that when you price something, there's actually two other factors at play. And so there's the cost, there's the price, and then there's the value. And the interplay and relationship between these items affects how growth happens inside of your company. Now, the gap between price and cost, that is your margin. That is your incentive to sell. And so the bigger that gap is, the more you are driven to want to push your product to your customers, to have your salespeople, et cetera. This gap here, between price and value, is incentive to buy. And the larger that gap is, the easier it is to have your customers want to sign up or use your product. Now, to figure out price, there's really two ways to go about it. You either start with the cost, if you know what it is, and you figure out where your price is based off of that. That is called cost plus. The other way to do it is figure out what is the value of your company or product or service, and then you figure out your price from that. And that is called value-based pricing. In startups, and almost pretty consistently across all businesses, everyone will tell you, you should strive for value-based pricing. It allows you to charge a whole lot more. It allows you to manipulate this incentive to buy. The problem is, because people do not understand their relationships, or even understand what are their costs and what are the value that their customer is going to think about their product, they put their price in a kind of arbitrary place. And they don't know what are the forces that play, that drives it. And it results in four different types of mistakes. The first one is, startups will price their products too low. Basically, you consistently undercharge. It is the number one piece of device we give to most startups to fix their pricing. And I'll talk a little bit about why most companies fall into that trap. You underestimate your costs. And the result is, you have a problem where your margins aren't enough to cover acquisition. You don't understand your value. You don't understand how your company thinks about the problem that you're solving for them, or how they value it. And either they don't understand your value, or you don't know how to convince them of the value that you think you offer. And as a result, you can't get the price that you want. And lastly, you focus on the wrong customers. That you think, man, man, if I built a better product, and I charge half the competition, I win. The thing is, that almost never happens. And the reason is, because you as a startup, you as working on something to create a new market, are working on innovative products. You are focused on the wrong customers. They are not the mainstream people who are going to look at the price and make most of the determination based off of that. This is the sales and profit over a product's life from inception to demise. That's what it's called. All you need to know is that these are five different stages of a company. This is what sales might look like over different stages, and what profits might look like over those different stages. You who are in startup school, you who are getting seed funding, you are in the first two stages. Product development stage, introduction. You are not in the growth phase. And the thing to keep in mind is that the customers in the first two stages, the ones that you're going after, they don't look like mainstream customers that you find in growth and maturity stages. They're not mature customers. They're early adopters. And the thing to know about early adopters is you kind of don't really get a lot of momentum and growth until you get past the first 2% to 5% of potential buyers of your market. These people in that 2% to 5%, they're called early adopters. And the thing that drives them is very different from mainstream people. So there's a couple of things to keep in mind about pricing innovative products. What you are trying to do fundamentally is require users to change their pattern, to stop doing it the old, shitty spreadsheet way, and do it in the new, better, your way. And getting someone to change their pattern is actually really difficult, especially if they're a mature person, partly because the average user lacks information needed and the trust in you or whatever it is that you're making to make that change, to take that risk. You are entrepreneurs. You're comfortable taking risks. Your customers are not entrepreneurs, for the most part. They're probably less comfortable taking risks. And so in the beginning, you're going after people who are willing to take a risk. And those are early adopters. Those are people who care about benefits above all else, that the highest value to them is beating their competition, doing something much better, and taking a chance that something new will give them that edge over anybody else. Those early adopters, therefore, are not price sensitive. If anything, if you've built a better product and you charge less, it looks like you have reputation risk. It's like, why is it too good to be true? What is the catch? And what will end up happening is it takes it much longer to get them to understand. This is basically all price optimization. This is the most complicated way that you can try to show price optimization. This is a demand-yield curve. And what you have on this side is different prices. And on this side, you have sales, unit sales. And basically, what you are trying to figure out when you're optimizing the price that you're charging your customers is, basically, what is the perfect balance between how much I charge and how much sales volume I get? And then your price optimization is basically that. Try different prices and then see what the effect is. When I have my companies optimize their prices, they just use a very simple table. You don't need to try to figure that weird-ass graph. Basically, you wanna have a column that says, these are the prices I'm gonna try. And then what is the result in conversion rate? What is the result in sales volume? And then how much revenue did I generate? That's all it is. And so let's say I have prices at these different price points. And I get these different conversion rates. And I get this sales volume. I should immediately be able to see who the winner is. Here we go. Now, the one thing to keep in mind once we have figured out something like this on a simple product is that these areas at lower prices, if you can afford them in terms of your margin, are actually lost opportunities. And what you wanna understand about these are these are what you're going to see if you offer discount pricing or offer tiered pricing at different price points. Another exercise I like to go with companies when dealing with pricing is help them understand is like, are you in a danger zone? And so what I usually do with my companies is I help have them sort of calculate what would their business look like or what is it gonna look like to be a billion dollar company and usually the rule of thumb there is to be doing $100 million a year in sales and revenue. And so that basically is like at your price that you give, how many customers do you need to have to make $100 million in that year? So let's have a bunch of different price points. Then we know, okay, great. I need these number of customers in order to make this formula work. You understand what that looks like. At $100 price point with a potential of about million users, right? This is consumers. That's what that consumer space looks like. And you know what this down here looks like. $100,000 a year, we call this enterprise. This area here is the part that a lot of companies are in and really, really struggle. They're on the struggle bus and it tends to be S and B. These are people who kind of treat their money like consumers, right? But they kind of look like they might be an enterprise. And the reason why this is such a danger zone is because it will tend to fit in the wrong place on my next diagram. So let's imagine that this vertical axis represents price. You can charge either a high price or a low price for your product. And this represents complexity of your sales process. Low complexity to high complexity. If you are having a product that is $2,000 or less and is basically self-serve, then you have something in this quadrant here. And this affects completely what you can do in terms of what drives your business, what you can spend on to get that sort of growth, that price point here at $2,000. It needs to have almost all marketing be inbound. You can't spend a lot of money outbound or in ads, et cetera. Your support has to be completely self-serve or very, very minimal. You have no sales team at this price point. You can't afford it, right? But conversions can happen on the same day. Must be in a self-serve model. Transactional, so between two and $10,000 when you're able to charge this, you're able to have a few new toys at your sleeves. And so marketing now can be focused on generating qualified leads. Your customer support can now offer SLAs or you could start paying for training to help people get onboarded. And for sales, you can't hire a dedicated salesperson, but maybe you can have an inside sales rep to sell within companies or within your customers. You could maybe have an SDR and you can maybe have someone dedicated to giving product demos. Sales cycle here should not be longer than one to three months. Enterprise, so over $25,000. Now for marketing, you can start spending things on branding, on building up trust with customers. Your support is very, very high touch that you can afford. You can do phone support. You can have a customer success person dedicated to the client. And for sales, you're gonna start thinking about sales managers, dividing stuff into territories, and having sales engineers that participate in terms of conversion and the sales calls. These will have a sales cycle of about six to 12 months. This is the garbage zone, right? And you know if you're potentially in this, and this is the big wake-up call for you, if it's taking you months and months and months to close someone, but you're not making a lot of money to cover it, you have a process where your acquisition costs are just too high for you to be sustainable, and you have to get yourself out of that problem. All of your work should be towards increasing the perceived value of your product or service. I'm gonna end on a good rule of thumb. So if you are starting with some kind of price, but you don't know how to sort of optimize it or figure it out, then here's a good place to get going. The first thing is, I like to have things where the value is 10x the price of whatever it is I'm charging. And I want to have it so that the value is easily understood to be 10x. So for example, if I charge for a product that is $10, then it should be, in terms of perceived value by my customer, that it's worth $100 to them. If they do not immediately understand the 10x value of the price, it's gonna be hard to get them to move. Their incentive to buy might be too low. Once you have any kind of price, and this is particularly important for people who are doing B2B or enterprise sale, you should start practicing raising prices. And I like to just start by raising prices by 5%. If you feel really confident, jump it up by bigger numbers if you want. But this is a pretty safe way to do it so that you can feel comfortable with it. And you want to keep raising prices until you're losing 20% of your customers. That's about a good balance to have in terms of understanding that I have a good price here. I'm losing 20% of my deals. It's not too high, it's not too low. In summary, for pricing. Pricing gives the most bang for your buck. You should work on pricing. If you've never touched the pricing of your product, then you're losing out on lots of potential growth. Understand the variables. Do you really understand your cost? Do you understand why you've placed the price where it is? And do you understand the value? When you go into a sales meeting or a call, do you talk to people and you basically say, I know exactly what this is going to be worth it to you. So when I tell you what the price is going to be, you're going to be like, damn, that's totally worth it. Go after early adopters. Remember, as a startup, that is who you're going after. So when you are talking to customers and they are taking a really long time to make a decision or they're wanting to have a lot more proof that other people are using it, you are not talking to an early adopter. You're wasting a lot of time on non-believers. Go after them first. Don't take it personally when these people who are much more mature aren't ready for your product. They were never going to be. Your job is to get through that first two to 5% of the market. Those early adopters care more about benefits than price. So don't undercharge your products when you have something that is of value and easily understood to have value. Get organized. When you're doing price optimization, it's really, really easy. Don't overcomplicate things. Figure out a bunch of different price points you wanna check. Understand sales volume, conversion rate, and the revenue that's involved and that will help you make the best pricing decision. Your price will determine your acquisition strategy. If you realize that your sales cycle or all the things that you're spending on is way too much for the amount of money that you're charging, you either need to increase the price or completely reduce your acquisition strategy costs. Use the 10-5-20 rule. Set a price that is 10x. That is a tenth of the value. Increase prices by 5% until you are losing 20% of the deals. Thank you very much, guys. Thank you. Thank you. Thank you. "
  },
  {
    "name_video": "On starting and scaling direct mail automation startup Lob",
    "description_video": "Harry Zhang, CEO & founder of Lob (YC S13), talks about his journey as a founder, the genesis and evolution of Lob, and lessons he's learned along the way.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/6a-on-starting-and-scaling-direct-mail-automation-startup-lob",
    "youtube_url": "https://youtube.com/watch?v=O-LKD3yUnk0",
    "mp3_file": "downloaded/On_starting_and_scaling_direct_mail_automation_startup_Lob.mp3",
    "mp3_content": "Today, we have Harry Zhang, co-founder of Lobb. Lobb makes APIs for companies to send letters and postcards. So Kevin, I have a question for you. I'm trying to think back to when you guys applied to YC. You didn't have almost anything. I would say it was fairly embarrassing in terms of what you guys had. I guess you could say that. I mean, honestly, we were scrambling weeks before the interview to try to come up with something that we thought was worthwhile for demoing. But I think the important thing when you're starting a company and for us is thinking about the problem that you're working on versus having a bunch of stuff. And I think for us, we had done the due diligence beforehand. We talked to a lot of customers. We had a good sense for what the core problems are. But we didn't have the exact product just yet. What was that MVP when you guys applied to YC at the time? I think back, and it's pretty funny just thinking about this. We literally had an API that took whatever you put into it and spit it right out to you. And that was our MVP. And we were secretly hoping. It just mirrored the response back. Yeah. It just mirrored the response back. And we were just sort of hoping that we wouldn't have to demo, because honestly, we hadn't built a lot of product yet. We didn't know what we wanted to build. And we've always operated from the penalties. Like, we want customers to pay us for something before we actually go and do it. What's interesting to me, as someone who's focusing on design interfaces at YC, is that I kind of really love API companies. Because I think a lot of people think of it as, oh, it has no sort of interface. But to me, the interface is just documentation. It's very pure. And so I'm always interested in, when I look at an API company, is looking at, oh, what are they doing here to say this is how we want to build community around this? Because what they're trying to build out is that this is something that people who build stuff want to use. And so what are the ways they're going to communicate that this will allow them to do something sort of cool, or solve a problem, et cetera? And I feel like you learn a lot about people's thought processes, and also how good someone is as an engineer or programmer by how thoughtful that documentation is. I think Stripe is a classic example of this. But for you guys, I remember you had the basics down. But it was clear that you guys knew enough to be considered to anyone that would want to be using it, even if it was their first time ever writing any API call. Yeah, that's definitely right. I think documentation, to this day, is still the number one thing. And I think we take a point in pride in making sure that our documentation is something that every single developers want to use. And I see it as friction. When your core product is an API, you better have the best documentation on the planet. And so what was the insight you guys had early on that made you convinced that you wanted to follow this path? Yeah, that's a good question. So it actually started from the problem, and it started from my time at Microsoft. So admittedly, I did not think I was going to end up in a business that's focused on mail, nor did I think that at a job at Microsoft, at a company that's 100% tech-based, one of the main things I was going to be working on was actually a direct mail campaign. So that's sort of like how we initially got started with the problem, and it actually started from a place of complaining. I was driving back from a ski trip with my co-founder, Lior, and I was complaining to him about this project that I was working on at Microsoft. And essentially, what we were doing was we had come up with a system for sending out these very custom training materials and invites to a webinar online. But for a number of different reasons, we weren't allowed to do that using email, and telesales was too expensive. So the thing I was doing was actually building a direct mail program. That was one of the most effective things that we'd done to date. And honestly, it was a little out of, we didn't have any other options. But when it worked really well, I got a huge budget and was asked to sort of scale across a much bigger set of customers and different use cases and more products. And I thought that was going to be something that was easy, but it turned out to be the bane of my existence for like the following three months. In the early days, like for YC, what did the API do? Oh yeah, the API just went into a database that literally, I started off using my inkjet printer. We printed everything on my home printer out of my apartment. There hit a point where we were watching TV and stuffing, we had an assembly line of letters that we were stuffing ourselves. And sort of at that point, we're like, maybe we should go get a printer to help us with this problem. What made you feel confident that you could just go try to sell to a company, or get someone to program against that, even though it was connected to your inkjet printer? What gave you the confidence? It's like, oh, I'll go in here and sell someone on this fake magic. Yeah, that's, I guess like for us, it was more just like a belief that this was like a real problem for people. So when we told them about the problem that we're solving, it really resonated with the customers that we were talking to. And I remember like our very first customer. It's this guy's named William Wei. Last use case I'd expect for mail. He found us on our Hacker News launch. And he sent me a note saying, hey, like I wanna use your guys' letter product, can we chat? And I said, okay, William, like tell me a little bit more about your business. And 16 year old kid, awesome. I looked him up. I was like very little information online, but he actually ran one of the largest Team Fortress 2 stores online. And if you don't know what Team Fortress 2 is, do you know what that is? One of my favorite games. Perfect. So one of the things that people like to do is they buy digital items online, right? And that's like a regular thing because people don't wanna go through all this time to like, you know, find like the right weapon or whatever that might look like. So he had one of the largest Team Fortress 2s online. And I was still super confused. I'm like, why are you talking to me? Just didn't know. But it turns out he had a problem, which was every single time people would buy his items online, he'd deliver it. And he'd give them like, you know, the item online, but he had no proof that he actually gave them a digital item. So what he had was a ridiculously high rate of fraud, which is people would charge back and he will lose every single dispute because he couldn't show that he actually sent anything. So his solution to this problem was, I'm also just going to send him a letter in the mail with a code. And that served as his proof, but he had to do that himself and he hated that. That's something that we would have never like thought of out of the gate, but I think it goes to show, right? Like you can always think you have a way to use product, but not always. How'd he find you? So he found us like online on Hacker News. That was like the original- So you did like a show HN type thing? That's right. We did a show HN. I think that thread might still be around somewhere, but that's sort of how he found us, right? And we basically said, we have an API for sending letters. And he was like, I have a problem. Like, can you guys help me with this? And then once you got past having 16 year olds as clients, how did you get the first like really top tier big client? Yeah, I think, you know, for us, that top tier clients, it's a big insurance company that's currently in New York. I would say they're pretty tech forward. I can't tell you the name of that company, but one of the things that's exciting that we found them was they had a problem in that they didn't have compliance and security around their existing printers. So this is in the midst of like me as a sales rep, literally sending like hundreds and thousands of emails to potential companies that I thought could be a fit. And this one got a response back, you know, from the CEO. He asked a few sort of qualifying questions and punded me to, you know, the guy who's actually in charge, he's now their VP of data. And they had a problem that their printer, they didn't have confidence their printer knew what like HIPAA was. They didn't know what a BA was and they were essentially reevaluating the technology they were using to work for PrintShop. And that's sort of where we entered and ultimately that became one of our first major like real customers and they're still a client with us today. It's just a cold email you sent out? It was just a cold email. How long, here's the question. Can you remember like what was in that cold email? Like, was it super short? Was it super long? Was it personalized, et cetera? It was definitely personalized. You know, I had a good idea of what type of mail that could be potentially sending. And it was a short, crisp email. Like, this is what we do, here's how we're different. And I think we can help you with your current problem in these three ways, right? I think the key things in a cold email, you really want to hit on like- Did you know that they were having that problem? I was going to say like, were you clued in on the HIPAA part? I did not know that they were having a problem at that company. We didn't know what like HIPAA was and this was sensitive information, but like we didn't know that they were looking, right? So we got a little bit of luck. They were looking, we didn't know about it. We knew that they were sort of within the space that we're looking for. But honestly, in the early days, not everyone's going to be able to find you. And what's important, especially in our business as like a B2B SaaS businesses, you got to find the customers that believe in the method and the methodology and how you're building the product, not just what you serve today, but also the vision of what your product could become. And that's where we found a lot of alignment with this company because they understood exactly why building it as an API is valuable. They're super technology forward. And while we didn't have every single capability they needed, we could cover the majority of what they wanted and they knew that we'd be able to scale with them as well. And so once you got there, how did you start expanding that like the other top tier clients? Was it all just cold email? Like these are big contracts, I imagine. Yeah, these are definitely big contracts. So today our contracts are everything from like, on a small side for our mid markets, like 30,000 a year just to use LOBS API. And we sell contracts up to like millions of year as well. So there's a big range. But I think for us, there's a couple of things. It's a sort of a chicken and egg problem in that like you need a lighthouse customer to get other big customers. So getting the first one is always the hardest. And that's a combination of just like combination of luck, hard work, and really understanding like your problem space and what you're solving. Once you've done that, and you've successfully done that for a customer, it's much easier to take that exact same story to a similar customer and help them realize that value. And by that point, you should also understand sort of the language of the customer. In their industry, what do they care about? What are the key problems that they have? And when you have that insight, it makes you much more credible as a potential vendor. Like how much time do you guys spend researching before you like reach out to? Let's say you have one company, you're like, I really wanna have their business. What's the prep work that you start doing? Who do you start contacting? How long does it sort of take? Yeah, I mean, there's a fair amount of prep work. So for us, it starts from just mapping out the organization. Drawing a blueprint of like, who are the key stakeholders in the organization, especially for larger companies. Decisions aren't made by just one individual. They're made by different folks and each different person may have a slightly different motivation. We work with our sales reps to figure out what is that motivation for each of those individuals? Who are sort of the key contacts? And what's the message that's gonna resonate with them? So we'll typically start by having Cole outreach these folks. We'll also sort of combine it with a lot of our marketing tactics and that like, they're gonna start seeing a lot of pop up everywhere, right? And ideally, if they're not responsive to email, we'll also look at what conferences they're gonna be attending. So we can actually find these folks in person. So really, it's sort of like a multi-pronged approach. It's pretty rare and you shouldn't have expectations. It's like, I send like 10 emails, I'm gonna get like eight responses back. That's not gonna happen. It's a grind, but that's part of your job is to like work your way through that and figure out like, who are the accounts are gonna work? And over time, you're gonna get more and more accurate about understanding the motivation and what resonates with people and like what people care about. And you may find that like the person you thought was the person who's gonna make decision might actually be someone totally different. Did you always know that this was going to be an enterprise company? That this will be what you'd focus on? Or was there, like a lot of people will start an API coming in like, anybody could use this. Anybody should. And so like, how did you know where to focus? And actually, I'm kind of interested as like, what is this split in API? I imagine most of it is enterprise usage, but how much is also SMB? How much is like consumers using it? Yeah, absolutely. So I'd say roughly about, you know, 15% or so of our business is still self-service customers today. So it's a meaningful share of our revenue and that fluctuates based on how much our big customers do. But like, there is a healthy self-service segment of folks that utilize our API. And that's where we started. So for us, like, you know, how we ended up focusing on enterprise is really sort of evaluation of like our market. And it turns out like the market that we're in today, the top, you know, 20 players send such an enormous amount of mail that if you really wanna capture the entire market, you have to focus on how you're gonna win those top couple of folks. And what we realized is one of the things that's really nice about an API is that like, you can essentially give those same capabilities to people who aren't executing at that type of volume. So in fact, it's a focus for our business to sign these enterprise customers, but we know a lot of the features and functionality that these guys have or are looking for are also things that smaller customers want, but don't have access to because they're not operating at that scale or capacity. So an API enables them to get access to that. So you guys like graduated up to enterprise. That's right. How long did that take? We're still working on it now, even today. So really it's been a six year journey for us. I would say we signed our first few true like enterprise accounts, you know, just two years ago. So it took us almost four years to get there. So one thing a lot of startups don't get right is pricing. So when you guys are working your way up to enterprise, by the time you got that first big client, did you feel like you had your pricing locked down? Cause it like, if that was wrong, it could have multiplied in a bad way quickly. Yeah, definitely. You know, we're always evaluating our pricing to make sure we have the right model. We actually made some like pretty big mistakes early on as it came to price. And I think like you guys have probably all heard the typical mistakes, right? It's like, hey, you know, didn't price high enough. Like, you know, we started talking about pricing too late. For us, it's the structure of pricing. We actually learned a lot about and was a big motivating factor in us changing our pricing model a couple of years ago. So we started off thinking very much like a traditional mail provider, or even someone who sells like reserve instances in AWS. Essentially, you could buy LOM. And what you were buying is you would buy, you know, 100,000 letters over the course of the year. You'd pay for the 100,000 letters. You can use it whenever you want. Super logical, very easy to understand. And it worked for us for a while. But the problem we found was we went into larger customers. They don't look at, not every single budget is made equal. So when you were selling, you know, 100,000 letters, they're gonna evaluate us against 100,000 letters from another direct mail provider. And, you know, our value is, you know, 5 cents of that letter is going to LOM, right? That's the value that we see in our technology. But the problem is when you're talking to customers who are used to pricing in a specific methodology, they're comparing us to like, why are you 5 cents more expensive than everybody else? And they're starting to do the math, like how many more responses do I have to get? What's the higher conversion that I need to see a result? But in reality, it's two different investments, right? They're making a technology investment in the technology that we're providing them, and they're buying the mail piece. So one of the big changes that we made that was really successful in helping shift the conversations to the right level of our customers was actually creating what we call like a platform fee. So essentially now our customers pay us, you know, 25, $30,000 a year to use LOM, and they get access to, you know, our de facto like mail pricing, which is now competitive, if not lower than every single other offering. So now we can focus the conversation as like, how do you value LOM's technology? Is that worth 25 to 30,000? Instead of having a conversation about what is the cost of a mail piece and what's the conversion that we're looking for? I think it's important to differentiate and associate the value that customers see in your technology with what they pay for versus something that could be a commoditized, you know, product in the market today. Now, was that pricing model only an option given your maturity? I think we could have started that model. The reality is we just didn't know people were gonna think that way. So it's hard to get everything right. What helped you shift to that? Well, we kept getting feedback from customers, right? And we could tell that the way that they were modeling us was they would be trying to figure out- This apples to apples comparison. Yeah, it wasn't apples to apples comparison. That's exactly right. And the part that was challenging is like, they were totally okay with like paying with like another agency to help manage their mail sense, right? But that's not pulling out of the same budget. And essentially part of what we offer is like, we're doing that for them. But they were looking at our mail piece price and comparing it to another mail piece price. But in reality, it's the mail piece price plus whatever they're paying this other agency to manage it for them. But those are coming at two different budgets, right? So for us, we had this realization when we started talking to companies and they kept trying to sort of ask like, oh, well, why is it more expensive? When really the reason why it's more expensive is because we're doing more things for them, right? And that's very logical, but help them understand in a model that are used to. to adapt to what they've already seen in the market. One of the things that's been interesting to me as a trend is that software wanting to be a commodity and the value and price of it getting lower and lower, and then API companies sit at the very bottom. And so, this is probably related, but how do you think about that as a business? Do you guys set out to be like, okay, we're gonna look here to compete on price or on sort of a value, and then how can value work in an infrastructure sort of commodity-like business, like an API? And I think it's different for every single commodity. So while you might be able to compare email, SMS, I think those are priced differently than, you know, LOB. For us, I think what we found is we wanted to be cost competitive, if not the best price in the market for the actual cost of mail, which we see as a relatively commoditized product, right? You can go to any number of commercial printers and they can produce the mail for you. So really, like what's different about buying software through LOB is that you're getting access to our entire API and all the associated offerings that come with our platform by sending mail through LOB. So we wanna differentiate, like what is it that a customer's paying? We want them to know that they're getting the best price in a market for something that they see as a commodity, which is the cost of the actual mail piece, but we want them to pay us the value that they saw in using our software to send mail. So that's sort of why we made this split and having a platform fee as well as like a per piece price. How does that adjust your sort of product roadmap to like have these technology differences that makes you different from like just a printer who can say like, hey, I can do that digital printing? Yeah, that's a good question. So I think for us, it goes down to a conversation on like how much are these like features worth to our customers, right? And I think over time we built different layers, like different sort of offerings, like main market and enterprise offering. We realized that customers would be willing to pay more for specific features. What are some examples? So a good example of this is like, you know, HIPAA. One of the key considerations for companies that are more regulated spaces that they need to have a HIPAA compliant offering. Now, like it's more expensive for us to have like a HIPAA compliant offering, but we also realized that one of the key considerations when companies are looking at, you know, printers is can they meet these requirements? So we actually charge more for those customers because it costs us more. And also because there's less offerings that are able to do something like that programmatically, right, that are gonna manage their customer information in a secure fashion, both in terms of how they're transitioning information to you and transferring it to you, as well as like, you know, being stored in our system. And this is like, you know, people's names and addresses. So this is very sensitive information for a lot of companies and it's something that they value very highly. We had customers that would be like, we'll pay you if you guys can do X for us. And that's when you really know you're onto a feature that's really important because they can actually quantify the value that that's worth to them. And it makes it easier for us to understand and prioritize our product roadmap because we know what customers are willing to pay for, not just like, you know, hey, can they achieve a slightly higher conversion of HIPAA? Now we know that like, they're gonna pay us an extra 10,000 and it's worth it to them because that's what they see. And so what are the other trades that you've made in the context of like, fulfilling the desires of these enterprise customers when you realize, oh, maybe they don't care about this, for example, like more vertical integration type stuff? Yeah. So I think some examples of this is like, we realized that the execution component, like being able to track your mail and having sort of a platform offering, being available through API, that was really important because a lot of companies actually are, especially larger folks, they're working with agencies that help them with a lot of the, you know, segmentation, the actual management of the campaign, the design of the mail pieces, you know, these are things that we've thought about building products around, make it easier for people to build beautiful mail pieces. But what we found is like, most people already have that in enterprise. They're already ready to go. Their problems are not around, you know, the need for designing a better mail piece. They have a full service creative agency that has like 16 different campaigns and have already thought that through. So they already have it, right? So that's a good example for you. How many employees do you guys have at WoW? How big are you guys? Yeah, we've been hiring a lot this year. So we're just shy of 70 right now. Just shy of 70. And then, don't take offense, but for an API company, I imagine it's difficult to recruit people here. And so like, what do you guys have to do? And what have you sort of figured out that helps you sort of like, compete against everyone else out here in San Francisco? I mean, I can tell you mail is not exactly the most sexy thing in the world. Certainly not, you know, AI. But I love these non-sexy things. Especially ones that make money. And so to me, it's like, that's probably a good leg up. But I'm just wondering like, for you guys, if you're looking for that like, top engineer to come on and make a difference. Like, how do you inspire them with a mission like this? Good question. So a couple things that we think about. The first thing you need to do is understand the motivations for each individual that you're trying to hire. Everyone's going to care about something. Sounds a lot like your sales. Yeah. Approach. But there's, but it's true, right? You have to realize like, what is it that people want to join a company for? And you need to identify the folks that are a good fit for where we're really strong. So for us, if you go and you ask like, why some of the folks join Lob? I think the majority of folks would tell you it's around our culture, right? And that's the reason that they got inspired to join. So the mission is certainly important. And I think we spend a lot of time on talking, not just about what we do today, but like, what is it that we want to achieve? But ultimately, I think one of the key consideration is like, what's it going to be like to actually work at Lob? How can, am I going to be happy there? And that's a huge motivating factor for a lot of people. So we spend a lot of time internally thinking about, you know, our culture. How do we sort of like, find the right folks that map into the culture that we have? How do we sort of like, give engineers and give potential candidates a sense for what our culture's like? And we do that through writing blogs. We do that through, you know, having people come on site beforehand to get a sense of what it's like to be there. And we try to make sure that throughout sort of like our activities, we're tying together our core values and giving people a good representation of what it's like to work at Lob. And so also part of this is the comp. And so before we started recording, you talked about options versus RSUs. What's your opinion on that? Yeah, so, you know, I think they're both good instruments. Do you mind helping for those people who might not know? What is the difference between like an RSU and an option? Absolutely. So one of the things Colin misunderstood is like equity compensation at companies. So RSUs and options, they're both different forms of equity that a company can offer you in a company. The main difference that we see, options essentially, you have to purchase. So there's a strike price associated for options. So as an employee, you have to make a decision at some point in the company's life cycle that you want to spend, you know, your own money to purchase shares of the company. And that's why you have essentially one option is it's the right to purchase shares at a particular price point. But the reality is, you know, you're going to pay some relatively significant amount of money potentially in order to acquire those shares. And we've heard like people taking out loans to do this. Like there's companies designed to help people do this. So it's not an insignificant amount of money. RSUs are a little bit different. RSUs is actually a stock grant. So, you know, there's actual value to the RSU that you're receiving, and you're not paying for the right to the RSU. You're actually being granted that RSU. So for us, you know, at Lobb, we actually decided, and I think it's a little non-traditional, that we built sort of like a unique RSU instrument that we think is sort of like the best of both worlds, right? And essentially the motivation is where we want people to be invested in the company in the longterm. We want to design equity compensation that didn't feel like a risk to the employee. The whole entire reason why you want equity in a company is you want a share in the upside. You want to feel like you're a part owner of the company. But if you have to like spend an enormous amount of money without knowing what the outcome of the company is going to be in advance, which you can't predict, that puts you in this like weird scenario where like you want to buy your shares, but you're not sure if you want it. And we felt like that was a really tough position to be in as a potential candidate. So we designed RSUs in a way so that, you know, our employees actually get RSUs when you join Lobb. And that's what that means is you don't have to make that consideration of like, you know, should I spend the money to buy my options? When should I exercise that? And there's obviously some differences there, right? Like I think the major difference is like when you get taxed, but we always looked at it as, you know, you don't get taxed in RSUs until there's actual a liquidity event in this scenario. Because we don't physically, we don't actually grant you the RSU until there is liquidity event. So therefore, you know, you owe taxes at the time of which you probably already received money from your RSUs. And I think, you know, what we found is that, you know, especially employees who understand equity compensation, that's something that's really attractive to them. And when we think about wanting people to be here for 30 years, we don't want people to stay for the wrong reasons of like, oh, I don't have the money to exercise my options, I'm gonna stay. I want them to stay because they enjoy the people that work with. They enjoy what we're working on or inspire the problems that we have, but we still want to give them a share and actually being an owner in the company. And how do you handle vesting? So it's sort of still same, vesting essentially do a one-year cliff and we essentially, you know, vest monthly thereafter. So it's the same as like an option in that sense. One thing we do, we also reserve like retention grants for people. So at our two and a half year mark and every year thereafter, we continue to give people opportunity to gain additional equity in the company. And our thought is like, the longer you stay at the company, the more equity you should be able to acquire. There shouldn't be a point where you ever stop earning equity in the company. So what kind of mistakes did you guys make when it came to like closing your first like big sales? Yeah, so I actually think there's a valuable lesson we learned during our early YC days in that like when you're selling your product, you're oftentimes selling something that you might not have just yet. But I also think it's really important that you have to actually get alignment with your customer and be upfront about like what you can do today and what you might be able to do in the future and also agree on like a timeline of what that looks like, get it in writing and have that sort of be part of the close to the deal. Where we went wrong and I sort of laughed because we built what I thought was a freaking awesome product back in the day. We actually had a mugs API. This was in our like demo day slides. Like coffee mugs? Yeah, coffee mugs. There was a point where we thought it was a brilliant idea to be able to print coffee mugs on demand through our API. We wanted to be able to print on anything and how this happens, we had a customer who came to us and told us that they had this use case for coffee mugs and it was like a big number, a really big number for us. And you know, when you're small, every single deal looks super valuable and we're like, this is awesome. It would be so cool to do coffee mugs. And we built the product. So we told the customer, we can definitely do it for you. You know, we'll have free tools and we scrambled and we hustled super hard. We built a fully functioning mugs API product. But we didn't sign any paperwork with this customer. So we built this whole entire thing. We spent two weeks of valuable engineering time. We met the customer, missed the customer. We have the mugs API. Here's how you use it. And he was like, awesome. Like, we'll get right on it. He went dark. He stopped responding. I was super disappointed. To this date, we sold two mugs through our mugs API, two. One of them went to another YC partner, actually Dalton. He was working at app.net and I convinced him that like he should definitely do mugs as well. And I think he put in like one order for it and it worked. And he was like, this is awesome. We killed the product a little bit shortly after, but I think it was a really valuable lesson in that like, you always want to be selling a little bit ahead of where you are, but you also want to align with the customer, like what you actually have and don't have. And that actually helped us close, you know, one of our biggest customers to date in booking.com. So, you know, essentially how this opportunity came about is they were already a customer of Lobb using our Azure verification API. And they had sort of this moment in time with GDPR where they started reevaluating all of their vendors for print. And we sort of got roped into consideration. One of the key things that was really important to them was actually like having operations in Europe. They were familiar with our API in the US. They knew it worked really well, but like they're a global company. And of course, like they want to know what our long-term plan is to support Europe and eventually Asia. So, you know, part of the negotiation as we're working through this big deal with customers that we need to align with them on a timeline on how we were going to get Europe up and running for them. So for us, that's originating, you know, letters and postcards and our other mail offerings in Europe. And that was sort of tricky, but I think we had learned some valuable lessons in that like we weren't going to just go and build all of Europe and scramble for potentially months at a time, but we also weren't going to tell a customer something we didn't have either. So we were pretty upfront about them, about what our capabilities look like, you know, the timeline of what you're going to roll out. And we actually agreed to all of these things during our negotiation. So what it really helped is like, our customer actually wanted to help us get things going faster, right? They're like, we want you guys to get up and running Europe like right now. And, you know, we could actually ask for their help in building exactly what it is they want. And now it's sort of like a partnership rather than like, hey, we've oversold something. It's more about how can we work with our customer to achieve the results that we both want to get to. And I think that's really important, especially as you're talking about larger enterprise deals, you're not always going to have everything, but really sort of structuring and not overselling it, but also setting the right expectation of customers. It's difficult to navigate that sometimes, but we found as a policy, it's better to be upfront, honest about what you can and can't do. And actually, you know, if the customer really wants to work with you, they're going to find a way to make it work with you. And that's the best position to be in. Are there other examples where you get a potentially incredibly high value kind of like enterprise scale client and they want something that you don't do? Do you now like kind of fish around to see if anyone else is interested in the Mugs API before you follow through with it? Yeah, definitely. So like, I think a common example of this is we're always evaluating mail format. So what I mean by that is like, you know, you get different types of letters, all shapes and sizes. We don't support every single different mail offering today, but we have a list of like what people have been asking for. And what we found is for us, it's a little bit of a chicken and egg problem. We don't want to start with like a really small volume customer because it makes it difficult for us operationally. But same time, it's like, we also know that this is a product people are interested in, they want to see proof points. So what we found is, you know, we have a list of these mail format types we're constantly evaluating. When we talk to potential customers, we know here's a list that we would potentially be willing to consider. So if they can agree on a commitment level of like what they're going to send and, you know, then we're willing to entertain some of those areas. And that's actually helped we build some products in the path for it. You know, we recently just launched, I think, you know, earlier this week, certified mail receipts. We knew that when we launched certified mail, this is for William Wei. If you guys remember, he needed certified mail. We launched certified mail, but he didn't need certified mail tracking receipts because he didn't really care. Like when it received, he just cared that he had a proof point. But we knew that that was something that we could potentially do. We chose not to do in early days because we didn't have like customers that were willing to do that en masse. So, you know, we were able to, we got a few customers that were really interested in certified mail, but felt like we were missing this one little thing in, you know, mail receipts. And we had that sort of like plan and we had thought about it. And finally we had the right customer who come if we're willing to make that commitment level. We're already familiar with our product. We actually went and built it and we just launched it that this week. Congrats. So the way the API works is like, you guys provide this technology layer and you connect to all the, like a network of all these printers. That's correct. All around the world? That's correct. So what I'm kind of curious about is like, you've seen this trend, especially as companies get larger and larger where they get more vertically integrated. Well, they'll like want to do every step of the process so they can own it in terms of quality, but also like an R and D, et cetera. And I'm kind of curious, do you feel like, is that a thing that you guys will eventually do? Or if not, why not? So for example, it's just like, basically you buy a printer or you like own some printing facilities and be like, okay, great. Because like this whole like flexibility and mail format, et cetera, like part of the reason that you have to be cautious about what you go into is because you have to go and spend time to find the right partners, build out the integration, and then sort of make it work. And so I'm just kind of curious about like, is there a point in the future where Lobb like owns like a giant printer? Yeah, I mean, we don't have that in the plan today is the short answer, right? Certainly if there's a huge need, we'd consider it. But the motivation for us is like, we see mail as a somewhat commoditized product. We also know that it's a huge industry for a reason. There are hundreds of thousands of printers that are out there, but they all specialize in slightly different things. So for us to be good at what we do, we can't try to do everything at once. It would actually be really difficult and super capital intensive for us to buy all of the necessary hardware and what if our customers need to change? We wanted that flexibility and part of having a network of folks enable us to have that flexibility. I remember in our very early days at Lobb, we were still, this was pre-YC application. One of the things we wanted to do is we sort of just wanted to get our own printer. We were like, hey, it'd be nice if we could just do it ourselves. Why do we need to rely on somebody else that's just another place for something to go wrong? Because you're looking at all these printers and probably like, these guys are in the stone age. We should be replacing them. Yep, that's exactly right. So we called up an HP Indigo vendor. So if you guys don't know, HP Indigos are like the commercial print standard. Everyone uses them. It's like the Ferrari and printers. They're the Ferrari, yeah. It's like, this is what you want, trust me. So we figured this out and honestly, we didn't know too much about the print world at the time. So we called up the sales rep. I think the first time for him should have been like, it was weird that we were meeting in a Starbucks. We met this guy at Starbucks. We didn't have a company, we didn't have a product at the time and we were like, we're just gonna get this printer because we can do it better. So we started asking him all of the right questions. Like, ooh, what's the, how are we gonna do inserter? What are the different formatting options? We cover everything. And this guy's feeling really good about this. We're like, yeah, this guy's really smart. He knows exactly what he's talking about. We'll definitely get this. So my co-founder loves to negotiate. It's like, so how much would this cost? And he's sort of taken aback. He starts immediately talking about their leasing options. And in my head, I'm like, I don't wanna lease this. I just wanna buy it. We're about to go get some money and we're gonna raise capital. We're gonna go buy this and do it. So we sort of corner him a little bit. We're like, all right, how much would it cost? Offer us a better price if we just buy outright. And I think, I don't remember the exact number, but it was something like over a million dollars. And I sort of looked at Lira, I was like, dude, we're not doing that. It was like no chance we're gonna buy that printer. But I think, thinking about where we are today, maybe we do wanna buy that printer, but it immediately creates a ton of complexity in our business. Absolutely, and that's the thing I'm always curious about. Amazon could have continued using 3PL services, but at some point they realized we need to own and build our own warehouses to build up a certain efficiency. We have a vision for the future that requires us to own that technology. And so I'm just curious, at what point do you guys start to be like, you know what, we're... We're being held back by our partners. Yeah, yeah, that's a good question. So we haven't felt that way. And our partners have been like incredible partners. And honestly, they're experts at print. They know so much more, down to like the color calibration that we should be using on all of our printers. I think the places we'd be willing to think about it is if it could give us a competitive advantage. If we're able to offer something by owning the print infrastructure, that will give us the ability to do something nobody else can. But I think that's complex for us, right? That would be like, hey, we have a awesome hardware printing engineer who thought of a completely new way to do print. And we're going to go compete with HP's imaging division. And we decided we can offer something that nobody else has done. We can do this new method of printing. Oh, someone came out on the market with a brand new type of printer that can do offset printing dynamically. Yeah, someone could do offset printing using a digital methodology at a price point that was not achievable in the past. I would be interested in talking to anybody who's starting that company, by the way. The Tesla printers. Right. Cool, so you guys are now six years old? Six years, coming up soon. How have you had to change as a founder and a manager over those years? Yeah, that's a good question. I think the first thing, and I'm still getting comfortable with it now, is understanding that your role as a founder is going to constantly keep changing. For some reason, the early days, I was just like, hey, I'll just constantly be building cool product. Then I found a place where we needed somebody to go do sales so I led the sales team for a number of years. And then all of a sudden we were doing okay on sales but we didn't have any leads so I started working on marketing. And I think what I've found is that my role is going to continue to change. And that's something you have to get comfortable with as a founder is that your role is going to change. And that's okay because what that's essentially saying is that you guys have gotten good enough that you can hire somebody else to do that. And I think that's the expectation everyone should have when you go into business that you should be comfortable with every aspect. I think a lot of people think that they can just build product forever. Everyone should talk to customers. Everyone should be going and trying to do sales in the early days because if you, as the founder of the company, can't sell the product, nobody else is going to be able to either. Yeah, that's a great piece of advice. All right, thanks man. Thanks for coming in. Yeah, absolutely. Thanks for the time guys. Thanks, Harry."
  },
  {
    "name_video": "On starting and scaling Dropbox (YC W07)",
    "description_video": "Drew Houston, co-founder & CEO of Dropbox (YC W07) talks about how he started Dropbox and went through YC after being rejected once and how has since grown it to over 500 million users today.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/6S-on-starting-and-scaling-dropbox-yc-w07",
    "youtube_url": "https://youtube.com/watch?v=U_g-fBfPOF8",
    "mp3_file": "downloaded/On_starting_and_scaling_Dropbox_(YC_W07).mp3",
    "mp3_content": "Hi, I'm Sam Altman. This is How to Build the Future. Our guest today is Drew Huston. Drew, thank you for taking the time. Thank you for having me. So, you were in Y Combinator with Dropbox in the summer of 2007. That's right. How did you come up with the idea and end up at YC in the first place? Well, I had the idea. It was born out of frustration, so I kept forgetting my thumb drive. The sort of origin story of the company was when I was riding the Chinatown bus from Boston to New York and forgot my thumb drive and couldn't get anything done on the trip. And then I had another problem, which was I was working on my first company, which we can talk about, and I had a real pain point around collaborating with my co-founder around the things we were working on. But it was personal frustration. I'd hacked together all these scripts to try to fix it, but then that bus ride was the last straw. You mentioned you had a first company. You had applied to YC before. We were rejected. You were rejected. That was either a mistake or a really good call. It was a good call. My first company was called Accolade, and it was doing online SAT prep because we realized back in the day the SAT was changing and no one had really built a good online course. So I started that company, applied to YC, rejected largely because we were both, my co-founder and I were both part-time on it for a couple of other reasons, market size, probably some other stuff. Did you interview or were you rejected without an interview? We were rejected without an interview. Wow. I don't think I knew that. And you came back the next batch? I got a little more feedback about what happened, and some of the concerns were the ones I said about. My co-founder and I didn't know each other super well. Neither of us was full-time on it. Some market issues. What happened with that co-founder? We kept working on the company until I started Dropbox, and then it sort of drifted apart. You applied to YC as a single founder and then met Arash rightly after, right? Yes. Or quickly after. Can you talk about that story? It's interesting. Usually these co-founder stories start with, oh, we played t-ball together. No, Arash and I probably knew each other for maybe two or three hours before we threw in together. How did you, what gave you the confidence to be okay with doing that? Well, it was funny. So I applied as a single founder to YC, and I got an email from Paul saying, hey, idea seems interesting, but you really need to find a co-founder. Only problem was application deadline was like three weeks away. Yeah. So that's like saying, oh, you need to get married in the next three weeks. What happened was, Kyle Voigt, who's one of the founders of Justin.TV, which turned into Twitch and then started Cruise. So far the only YC founder with two billion plus exes. Yeah. So Kyle and I knew each other from MIT. We were both in the Entrepreneurs Club together, and then he knew Arash. They were floor mates in East Campus at MIT. They were both from Kansas. And Arash was having a pretty similar experience to one that I was having, which is we had friends who had moved from Boston, who dropped out of school, moved from Boston, settled in San Francisco. Suddenly their companies are raising millions of dollars, taking off. And so I think both of us had a little bit of cabin fever. It's frustrating to watch that happen. Yeah, it's motivating. It is. So literally two or three hours you guys spent together. So we got introduced. I was complaining to Kyle, is there anyone great that you know who could be a potential co-founder? Because all my friends or the folks I was closer to, just for whatever reason, timing wasn't right, weren't ready to make the jump, whatever it was. And then Kyle suggested Arash. And so I probably have the email somewhere where Arash just said, hey, let's meet up. And we hung out in the Student Center for a couple hours, and he dropped out of school the next day. It was pretty wild. I have to add this to Kyle's list of special services to YC. I didn't even know this. So you guys just started working on it immediately, talked about the equity, and went forward. Pretty much. So we met up in the Student Center at MIT. He was already pretty excited about the concept of starting a company, of doing YC, and we hit it off. And I wish I could say that, oh, yeah, here are the 17 things I was looking for on this seven-point scale. But no, he's like, this kid's clearly smart, a little quiet, but very thoughtful. And over time, it became clear that this was a really good fit. How did you guys validate the need for Dropbox? I've heard stories, although it may be apocryphal, that you posted on Reddit to ask people if they wanted something like Dropbox. Well, the first real test was I made a demo video, and it was initially just to get into YC, because the whole Y Combinator application process was pretty similar to the world where I came from, which was college admissions and test prep. And one of the things you can do to give yourself an edge in admissions is just do something different. So I knew everybody was going to have a demo link in their application or whatever that would be, but I thought that Dropbox was something that would really appeal to the Hacker News audience. And it was really to get into YC, where I made this three-minute demo video with some music equipment that I had from my band. And I put it on Hacker News. It stayed at the top of Hacker News for two days. I got the thing I was looking for, which was the email from Paul. The thing I didn't want was that you also need a co-founder in three weeks, but that was the first. I think we did that at least twice, first to get into YC, then to build some momentum around the company. There's this infamous comment, either on that poster, a future one you made, probably that one, where someone's like, I think this is the stupidest thing I've ever heard of. Don't these people know that Wget exists? You can just use that. No one needs a company for this. We send that around to other founders when they get demotivated because people shit on their idea on Hacker News or Reddit or something else. Well, we were getting it from all different directions. Actually, we can jump to that because I think that's a really interesting point. One of the things I respect most about you is you have just kept doing your thing, no matter what noise there is in the ecosystem about Dropbox this or Dropbox that, whether it's like, I don't need this because I can use Wget or this company's overvalued or whatever. And now you're just like this behemoth and everyone's like, well, we were wrong about Dropbox. How do you handle just constant negativity from people saying this isn't going to work or anything like that? Well, I think the first thing is you have to recognize that that is always going to happen. And we experienced that from the day we founded the company, actually before that, and all the way to now. And when you zoom out, you realize that a company like Apple, quarter after quarter, can post the best, the most revenue, most profit of any company in business history. It's over. It's dead. And the next day, it's like, but they're really dead now. So you have to appreciate that that's human nature and that's just going to happen. I think where it gets a little harder is you have to simultaneously have thick skin and be able to tune things like that out. But you also have kind of thin skin. And if your customers are unhappy or your team's unhappy, you have to respond to that. So that's a weird dynamic that you have to handle. But I think it starts with just getting some perspective that that's always going to happen. How do you decide when you need to address something with customers or team versus just let it go in its normal course? Well, I think maybe more in the fundraising context. So in addition to people on Hacker News, a bunch of the comments were negative, but actually a bunch were positive, too. We got a lot of pushback from investors saying, hey, look, Google's going to do this. It's a commodity. Online storage was kind of the startup cliche of its time, the way that Bitcoin or other things have been. And frankly, I agreed with them. I was like, yeah, Google can probably do this. Yeah, we don't really have a lot of structural advantages. Yeah, we're not really sure how we're going to make money. We don't even have users. So that's all true, but you have to realize that's not causal. It's sort of just because other folks have done something or done it in a way that you don't think is good doesn't mean it's inherently a bad idea. Or maybe put another way, I would ask investors, yes, there are 50 of these things out there, but do you use any of them? And they would say no. And I'd say, yeah, isn't that interesting? Was this the biggest problem that you found in early days was just the level of competition or presumed competition in the market? Competition didn't bother me that much because our sites were also a lot lower in the beginning. And really, I had a target customer of one, which is really myself. And victory for me would be never having to carry on a thumb drive. How long did it take you from the day you had the idea for Dropbox until you had a product where you, until the last time you used a thumb drive? Probably about a couple months, six weeks, six to eight weeks. When it's early, you can make massive progress like that. But then it took a long time to make it bulletproof and safe for the world to use. So what were the big initial problems that you faced? Or what were the, as you think back towards the few times Dropbox almost died, what actually went really wrong? So I think the early problems, when they're real problems, were just keeping up with growth. So we had this idea to build a prototype. The prototype worked well. We made this video, and we put it on Dig and Reddit, and it just blew up, which I can talk about. But then you need to build a company because you start a product, and then you're like, OK, we have a product, now we need users. OK, let's go figure out how to get users. They always leave this part out of the movie of startups. Yeah. Well, it's just you're on this treadmill of you have to, every day, you have to do everything you were doing yesterday just as well or better. And then you have a bunch of new stuff to deal with. And so it's like, OK, well, we need to build the product. We need engineers. OK, before we can get engineers, we need to pay them. I guess that means we need to fundraise. OK, we need to fundraise. Then we need a lawyer and an accountant. So just the circle keeps getting bigger. And so you deal with that by dividing and conquering. You hire people, but then you have a new problem, which is you're hiring people to do something you don't know anything about. Suddenly, everybody's running off in different directions. And so I think the hard things were really keeping up with that. The rate at which things were breaking was faster than we could fix things. And that was a really hard thing to get used to because you're used to, especially if you're kind of used to getting good grades in school and things like that. Ben Horowitz said this well. He said the average grade for running a company is like a 22 out of 100. So when you're used to getting As, it's a humbling thing. And you have to simultaneously keep two things in mind, which is, on the one hand, you really should aim for perfection and try to make things as good as they can be. And when problems arise, not tolerate them. But at the same time, you've got to recognize it's like trying to bake a cake in five minutes. There's just going to be stuff on the walls. It's going to be a little screwed up, no matter how good you are. And what you really need to do, and probably even harder, is your job as CEO changes every six months, every year, every couple of years. Just nobody tells you that. And, in fact, some of the things that made you good at the prior stage become a hindrance for the next stage. So, for example, I wrote most of the first version of Dropbox, and certainly Rosh and I did together. But there just became too much stuff to do, and I had to stop coding. Any of your codes still running in production? Yes, some. I think they've done some analysis. There's still stuff in there. And a lot of how the core product works and the protocol has been pretty stable, which has been cool. I think, although there's so much advice online about how to start a product, there's actually very little advice about how to transition to a company. So, anything else that either is particularly good advice that you heard or advice you now give to entrepreneurs who are trying to build the next Dropbox, about how to successfully transition from an engineer to someone running a large company? Yeah. So, the first thing that would have been helpful to know is, first of all, nobody's born a CEO. So, you learn it. And the challenge is you just don't know what your blind spots are. And so, you know how to build, at least in my case, I grew up programming. I knew I could make the code work. We knew we could get people on Hacker News excited about it. We knew we could make our early users happy. But if you want to bring a company to scale, there's a lot more. The chessboard is a lot bigger than just building a good product. And you have to be able to make smart and fast decisions about what markets do we go into, our business models, competition, strategy, how do you build a team, how do you run a team. That's pretty tough when you've never done any of it. You don't really have a lot of context on those things. You don't even know those are important. So, how did you learn those things? I think the first thing you need is, on the one hand, a healthy paranoia. Probably one of the most useful questions that I like to ask myself, and still do, is one year from now, two years from now, five years from now, when I look back on today, what will I wish I had been learning? Or what would I wish I had been doing? And so I think really taking it on yourself to be systematic about how do I train myself, what am I going to need to know? They say you go from coder to psychiatrist, which I found is totally true, or politician in the job. And then there are a lot of different points in between. And did you mostly figure this out yourself, or did you ask people, like, what am I going to need to be doing? What will I wish I had done in a year? A little of everything. So, reading was probably the single most valuable thing that I did. Anything you'd recommend other people read? Yeah. So I think my favorite book on management is High Alpha Management by Andy Grove, which is kind of the bible of how do you scale an organization. I mean, I have a very long list of recommendations, but The Effective Executive by Peter Drucker is really good. But basically what you're talking about is you need to have good judgment about a lot of different things. What that really is saying is how do you gain wisdom very quickly? And last book recommendation, Poor Charlie's Almanac by Charlie Munger is probably the best book on that that I've read, which is really about how do you build a bunch of mental models to sort of break down the complexity of the world and know when to use each. But reading is part of it, but then also having, you sort of think about that one year, two year, five year, having friends that are one step ahead, two steps ahead, five years ahead, and just sort of looking at the deltas between them. And so I remember I had a coffee meeting set up and Sequoia, our first venture investors, were really helpful in connecting me with other entrepreneurs. And so I remember racing out of the office, running down the Starbucks, having a seat, and start peppering them with questions. And I asked, so how do you spend your time? What's important to you? And he's like, well, it's really important that we have a great mission as a company. I'm like, okay. And he's like, and it's really important that we have great values and a great culture. And I'm just like, I'm starting to tune out because I'm like remembering which bugs I didn't fix. I'm like, did I finish that before I, you know, committed the code? And I'm like, what the hell is this guy talking about? Like, this is, none of this has anything to do with our customers getting code out the door. But then you start hearing that five or six or ten times, and you realize, okay, the only one here who's confused is me. And so, and then you realize we are going from designing, especially if you're an engineer, you're going from designing a system of code and algorithms, which is very orderly and discrete, to a system of people and things like culture, values, all kinds of other things are the programming that makes that work. I think everyone's confused when they hear that for the first time. Yeah. And they think about code. way to get entrepreneurs to internalize that earlier? I never have, so I'm curious if you've figured out a way to. It may just be something you have to live. Yeah, I think you really need that portfolio of different ways that you can train yourself. So readings one, mentorship or getting advice from people at different stages is another. I like to study just the history of business and really excellence. And so learning about, OK, well, it's one thing to know how Google was built or how Facebook was built. But then you can learn a lot by understanding, well, how does a consumer packaged goods company run? How does Swiffer, how do you come up with a Swiffer? How do you think of a competition there? Yeah, I've certainly learned the most from studying business that are not in the technology industry. And I don't think people ever do enough of that. And you want to go beyond business, too. So how would Phil Jackson, with the Bulls, the Lakers, the Knicks, so many championships, how do you build a culture on a team like that? How do governments solve big problems? And then you can also lean on your investors and the board. So for example, Condoleezza Rice is one of our board members. She's seen scale in all kinds of different environments, from running the State Department, being Secretary of State, that's an 85,000-person organization. She's Provost at Stanford, that's a 20,000-person organization, and so on. So you want to triangulate from a bunch of different sources, which helps you internalize these lessons more than if you just read a blog post about it. The most interesting meeting I had in terms of thinking about how to build YC in the last year was going to the Vatican and listening to how they talk about, I think, on 1,000-year time frames and about a billion people. And it's a very different perspective. But it was really good. If you were going to start a new company today, what do you think the biggest opportunities are? Well, I think that the whole AI and machine learning, machine intelligence is going to be transformative, especially when you zoom out. And I think things like, when paired with things like robotics, machines are going to take on a new role in our lives, which will have a bunch of really interesting positive and negative effects, which we can get into. I'm not as worried about the robots killing everyone and taking over the world. But we can talk about that later. There's a lot of good and bad shit that happens, I think. But I think it's a really exciting time. Well, in our world, we talk about Dropbox evolving from keeping files in sync to keeping teams in sync, which is a little bit of a departure. Because when we started, we had this, we're like, all right, our goal is to make it so nobody has to carry a thumb drive around again. And life would be a lot better if your stuff was in the cloud. And today, that's largely solved. Mission accomplished. Yeah, mission accomplished. But along the way, it opened our eyes to a bigger problem when we realized that, for a lot of our happiest customers, it wasn't really the storage that people were buying. It was the sharing. And they were really using Dropbox to get their team on the same page. And so that meant a shift, which we can talk about. But a couple years ago, we were like, OK, of all the things, we were sort of blessed and cursed with this original product. Because we struggled in the beginning. People are like, well, what's Dropbox? Or what's Dropbox for? And the answer, when you think about it, is, well, what's a computer for? What's a file for? So we ended up really supporting all these different use cases. But at the same time, it was very clear, even in the beginning, that the role of files in people's lives are going to change. So in the beginning, yeah, maybe you'd have text files and MP3s in your Dropbox. But in the world of iTunes and Evernote and Spotify and Netflix, there's not a file to be seen. And so you have to really think. Tech just moves quickly. And so you always have to keep evolving with the patterns and what's changing. Was this a strategic shift that you consciously made? Did you say to the whole company, some date, in all hands, we used to be a file company. And now files are dead. And we're going to do this other thing? We did expand from, I would say there was an expansion and then a contraction, which I can talk about. So we knew that the role of files was going to change. Files are never going to go away. But they were going to change. And we thought about, what place do we really occupy in people's lives? There are a couple big use cases. So one was private photo sharing. Another was collaborating with a team on files. And then the third was we had a platform. We do. We have an ecosystem of all these developers. And so we expanded to say, OK, well, we're going to really build a separate thing for photos, because that's kind of a different product. We're going to do a lot more around collaboration and so on. And then that was when we started to buy. We bought Mailbox. We started building something called Carousel, which is our photo app. Then in 2014, we stopped doing those things. How'd you decide to stop doing them? It was tough. I think what we found was, first of all, I think it's easy to make strategies that look great on paper. And when you think about your overall market, you want to hold on to as many of these use cases as possible. And so many of our users are so happy with things like sharing photos, and we could do such a better job there. But at the same time, you look at photos and collaboration, it's very different products, very different ideal business model, very different competition. Everything is different. And so we found ourselves sort of straddling these two worlds, which made it very hard, A, to build the best focused product, and B, it just made it hard for people to understand what we were doing. And as much as, oh, yeah, we were out in front of all this competition sets in, and I think there's just sort of a sense of, we're doing a lot of stuff. It's not really working, and people are just getting agitated. And then I reread a book called Only the Paranoid Survive by Andy Grove, which describes how, actually, Intel wasn't always a microprocessor company. They actually started in memory, and they were getting crushed by the Japanese. And he talked about the story of that transition from memory to microprocessors. And as I was reading it, my stomach started churning, because I'm like, oh my god, the strategic inflection point he's talking about, that's what we're in. And there's a part of the book where it says, CEOs like to keep their options open. What you really need to do when you're in the middle of one of these inflection points is put all your eggs in one basket and watch that basket, quoting Mark Twain. And so I went in the office the next week, and we're like, we're not doing carousel anymore, we're not doing mailbox anymore. Was there resistance, or did the team get behind you quickly on that? A little of both, I think. A little of both, I think. You find that when your company gets bigger, everybody knows, it's not like a secret that some of these things aren't working the way that you want them to. And so in a sense, to one set of people, it's a relief. And frankly, what took you so long, this is obvious, I told you so, it's very disappointing to the people that are working on it. It's disappointing to me. Here are two products that I really loved, and it's publicly embarrassing. That was something that changed, is that a lot of problems in your company, nobody really cares about them, except for the people in the company. But when you go on the big upswing, like the one we had, suddenly everything you do is a lot more. The peanut gallery is a lot bigger. And the press and just sort of the folks, there's a whole machine that will build you up, and then they love to tear you down. So again, even if I understand that and can put that in perspective, it's very hard for the team. But yeah, everybody loves the idea of focus, but what focus actually means is like shooting stuff you love and turning down things you know you can make work. But that's going to be part of the cyclical nature of it. There will be times when you expand and times when you contract. Speaking of the expansion, one other thing I remember, I didn't know you really well in the early days of Dropbox, but I remember being impressed by just how much you got done. Sort of like as Dropbox was really taking off and just seemed to ramp up to where everyone was using it in like a one year period. How did you manage your time? What did your days look like when you went from sort of seven users to seven million? Sure. So we, the team, I'm thinking about seven to seven million. We were probably fewer than, under 50 people. And so I think one of the, there's probably a few things that have been long misunderstood or not clearly understood about our space, which is first of all, Dropbox, part of the reason why we had so little competition for a while was Dropbox looks easy, but it's actually really hard to do. And I knew this because I wanted to just use the other products, like if any of them had worked, I wouldn't be here. But it's actually technically hard. But that said, there were a lot of competitors who built things that probably were reasonably functional, but they didn't get distribution right. And they didn't get virality right. And I had been paying attention when 2007 was kind of when the Facebook platform started to take off and a lot of the gaming. And you had these companies which were going from zero to 100 in records. New land speed records were set all the time. And a lot of that was through virality. And so there was a great, Dave McClure had a great model called Startup Metrics for Pirates, AARRR, which I won't go spend too long on it, but basically acquisition, activation, revenue retention, and referral that becomes like this was how we managed the company. Users come in, oh my god, very few of the folks who signed up, like four out of five who sign up, don't put a file in their Dropbox, don't install a client. What is going on? We actually brought people in off of Craigslist and watched them install the product. And we showed the video in real time to our whole team in the other room, or we had the person and a PM in one room, the rest of the team in the other room. We're like, hey, just sit down. Here's Dropbox. Go from here to sharing a file. Zero of the five people succeeded. Zero of the five even came close. But really paying attention to all the activation is just one example, but all the steps and the viral engine, like tuning that as much as possible, coming up with things like the referral program, which had this two-side incentive where if I tell you about Dropbox, you get free space, I get free space. That drove like 30% of our sign-ups for a while. Shared folder is inherently viral, another 20%. So half of our sign-ups were viral. And that was something that wasn't well understood before that time. And it was inspired by some of the stuff I'd saw in the late 90s, like PayPal, or maybe early 2000s. PayPal had an incentive referral bonus. I had the idea for the Dig and Reddit video based on a book called Guerrilla Marketing, which was like, how do you do marketing and get users when you have no money? And so a lot of these things came together at that time, 2007, 2008, where a lot of the dots were connected from things that I had read over the last several years. And I guess if you were less than 50 people, you didn't spend too much of your time managing the thing about the organization then. When you're like 20 people, you can just sort of manage by intuition. It's manageable because everybody fits in a room, everybody knows what everybody else is doing. But that transition to, now when you say 30, 40, 50 people was very difficult. OK, last question. I won't ask you when you're going public, but how do you think about, what's the decision framework for staying private or going public, and how do you think about that? Well, I think there's nothing that magical about it. It's primarily a financing decision. And so it really depends on, do you need capital, your employees and investors need liquidity, there's some other benefits around branding or having currency for acquisitions, so on. What's happened over the last five, 10 years is the private markets have found ways to solve most of those problems. And going public is a way to solve all of them. However, then there is, operationally, it's tough for a couple reasons. One is there's a lot of overhead with compliance and regulatory stuff, where you have a lot of people in your company spending time on things that don't really have anything to do with your customers or your products. So there really is overhead. There are other elements of discipline and so on that are good, but it is a lot of overhead. The stock market tends to be manic depressive, so they're either way more enthusiastic than they should be about your company or way less, which has a lot of impact on morale. But I think at scale, most tech companies are public, and that's the path we're charting. Great. Well, thank you very much for taking the time. Thanks for having me."
  },
  {
    "name_video": "How Pachama uses tech to tackle climate change",
    "description_video": "Diego Saez Gil is the founder of Pachama (YC W19). Pachama is building a marketplace where companies can support carbon offset projects. He discusses the genesis of the idea and how climate change is a big business problem to work on.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/6R-how-pachama-uses-tech-to-tackle-climate-change",
    "youtube_url": "https://youtube.com/watch?v=1f2vKWIVB-w",
    "mp3_file": "downloaded/How_Pachama_uses_tech_to_tackle_climate_change.mp3",
    "mp3_content": "All right, guys, welcome to the podcast. How's it going? Thank you. It's going great. So today we have Diego Saez-Gil of Pachama from the Winter 19 batch and Gustav Alströmer, who is a partner at YC. So today we're here to talk about Diego's company. Gustav, why don't you start it out? Sure. So I met Diego probably about a year and a half ago now. And our paths crossed in sort of the interest for carbon removal. I don't know if you call it fringe science anymore, fringe sort of like area, but it certainly crossed in the area of trying to solve climate change and how you can use technology to solve climate change. And it's something that we at YC have spent quite a bit of time on. Back in about a year ago, we released a carbon request for startup, carbon removal request for startup, which is a way for us to inspire people that work on new companies what to work on. And we present a bunch of ideas there of things that people can work on. Diego has a very interesting approach to his company and love to hear more. But he is, this is not his first company. So maybe before we get into Pachama, tell us about your background. You've founded a couple of different companies in the past. Maybe what's the journey, how you got here today? Sure. Thank you. And thank you for having me. Let's see, I grew up in Argentina, in the north of Argentina, always surrounded by nature, where I'm from. It's the Yungas, which is the last tip of the Amazon type rainforest in the north of Argentina. And then I had this big curiosity to travel the world. I went to see what was out there. Argentina is so far away from everything that I wanted to travel and see. So after finishing school, I got a scholarship to do a master's in Barcelona, moved from Argentina to Barcelona, took advantage to travel as a backpacker all across Europe. And then that journey led me to New York City to do an internship. And there I decided to start a company, which was kind of insane because at the time I was broke. I didn't speak good English. I didn't know anybody in the U.S. and I had no idea how to start a startup. But I did it. And the first startup was trying to solve the problem that I had at the time as a backpacker. So we built a mobile app to book hostels and bed and breakfast. And at the beginning it was really hard because I had no idea, but eventually we raised some capital and eventually we sold the company to a company called Student Universe that sold discounted flights for students. Right after that, I went to Argentina to visit my family and I lost a suitcase on the trip. And that led to the next idea, which was how come there is no suitcases that you can track? And with a friend in New York, we decided to, you know, launch a crowdfunding campaign and started BlueSmart, which is a company with which we applied to Y Combinator and got selected in winter 15. That led me to California and building a hardware company was a completely new adventure for me, really difficult. Did you have any background building hardware before? Not at all. My co-founder told me he had been to China sourcing merchandising, but I haven't ever been to China. And right after YC, we moved to Hong Kong. We opened an office there and we started going to Shenzhen every week. This company flew quite high. We raised a lot of capital thanks to YC and thanks to the attraction that we were having, you know, we're selling a lot of our products. And, you know, grew the team to over 60 people and everything was going great. Although always with a lot of challenges, like every hardware company, up until the airlines decided to ban lithium-ion batteries because the Samsung phones were getting on fire on airplanes, which is something you cannot expect as a startup to be, you know, have your products banned. What was the vision for the company? Like, what were you trying? Yeah. I mean, the vision was to use technology to make travel better. But there wasn't like this, a grand vision to improve the world, to be honest. And were you the first company to like embed a battery in a suitcase or... We were. You were. And now it's sort of like standard, every single... Yeah. A lot of, you know, other great companies came afterwards, you know, bringing innovation to luggage, which, you know, by the way, to me, the biggest lessons that I got from that startup was that you can introduce a new idea into the world and this idea can spread as a meme. And then you have a new category in the planet. A conversation in a coffee shop in New York City can turn into a multi-hundred million dollar category. And I was like, wow, okay, we have that power. Why don't we put it to good use to solve one of the, you know, biggest problems that humanity faces today? So anyways, that company ended up in this, you know, very difficult situation. We were able to sell the assets of the company, the technology and the IP, but the company didn't end in a good exit. So after that, I decided to, you know, take some time off, did a lot of soul searching, went with my two brothers to the Amazon rainforest, spent some time with some native communities there, got incredibly inspired by the power of nature and also got incredibly heartbroken seeing deforestation happening there in the border of the Amazon and civilization. Then moved here to the Santa Cruz mountains where I live now among the redwoods and from there started researching and thinking what I was going to do next. And climate change and the environmental crisis was my biggest concern. And at the same time, I had this inspiration by the forest where I had been and reading a book, I discovered or I learned the potential that reforestation and forest conservation has to capture carbon at scale in the planet and is one of the most important solutions to climate change that nobody is talking about at the time. This is two years and a half ago. And so then that led me to research, you know, how technology could enable that solution. And I decided to come back to the road, even though I was, you know, quite, you know, still, I guess, broken by the previous experience, but I was like, okay, everything I learned, I need to put it at the service of this, which I think is the biggest problem of our generation. And then I went and talked to you and you received me and I drew in a whiteboard the idea and you told me, this is a really good idea, go for it. And I can tell you what the idea is now with that introduction. But that's the background of how I got to Pachama. So tell us what Pachama does. I mean, there's a lot of people have ideas on how to solve climate change. I believe that technology will be absolutely the core of solving it. Like most big problems humanity have faced in the past, technology have somewhat helped solve. So maybe tell me about Pachama. What does it do? Sounds like a good idea to plant trees, but like, in what way do you change that? So the first question that we asked was, okay, if reforestation and forest conservation is such a big solution and such an easy solution, we know how to plant trees, why we're not doing it? And the answer to that is, okay, somebody has to pay for that. You know, we were not driving funding to do it. There is no economic incentive to do it today. And the mechanism that was created by the United Nations to create an incentive to drive solutions to climate change is carbon markets. Carbon markets work in the following way. The companies and organizations that are emitting CO2 into the atmosphere should take responsibility for those emissions and should compensate those emissions. And the way to do it is through an instrument that was created called carbon credits that are given to projects that reduce emissions or recapture carbon from the atmosphere. Now that's a market that had some you know, growth at the beginning. And then after the financial crisis kind of crash, but after the Paris agreement, the market is growing again. And according to the World Bank last year, over $80 billion went into carbon market initiatives around the world. And yet, when you look at the percentage of that funding that is going to forest conservation and restoration is less than 2%. So then the question that we ask is, okay, why that's the case? And we learned that there were two problems. Number one, if you want to certify a forest project today, let's say that you want to plant trees, you have a land and you want to, you know, do reforestation or do forest conservation, you have to do a certification process that takes two years, and it costs between 100 and $400,000 because you have to get auditors sent to your field to count trees and measure the size of the trees every certain period of time. And that is very inefficient. So as a result, there aren't that many projects. In the US, there are less than 50 projects that go certification for carbon credits. And in South America, there's less. And you know, the only projects are very large projects. In the other hand, buyers of carbon offsets, in a way stayed away from forest because of a lot of lack of credibility about the projects. You know, how do I know that someone is planting a tree? How do I know that the calculation is being correct? How do I know I'm not going to get in trouble if there is a problem in the project? Was fraud common? It's not common, but it happened sometimes. And there were people that took advantage of carbon credits because they're such an abstract concept. And there were some problems with projects in which illegal deforestation happened. Maybe, you know, not under the awareness or control of the project developers, but something that happened and were problems in the past. Was the problems related to it was hard to track things? Or was the problems related to that the system was broken? Yeah, hard to track, hard to process that information in real time. It's just, you know, sort of like a technology problem. Not an intentional problem, in the most part. So here's where we come with a technological solution to all these problems. What we're doing is two things. First, we are using the latest on remote sensing and artificial intelligence to do our verification and monitoring of how much carbon is there on a forest and how much carbon the forest is going to capture. What do you mean by remote sensing? Remote sensing includes satellite images, LIDAR data, and any form of data that can be collected remotely and then analyzed with algorithms. And then we use machine learning algorithms, and I can go later into specifics of how we do it, to analyze those data points of the forest. And you can be incredibly precise today at estimating carbon storage and carbon capture by forest. So those tools will help facilitate the certification of projects. They increase the credibility of the projects. They allow for constant monitoring and they bring a whole new transparency and efficiency to the onboarding of new projects. And then the second part of what we're doing is we are trying to connect the parts in a more direct way. Because today, companies that want to purchase carbon offsets, they generally have to go to brokers. The brokers get their credits from a trader, the trader maybe from a retailer, the retailer from a lot of middlemen along the way. And if we are going to be onboarding these projects and doing this data analysis, why don't we connect directly the projects with the buyers? So in a way, we're building a marketplace as well that allows for companies and organizations that want to offset their carbon emissions to directly access trustworthy carbon credits coming from forest restoration and conservation around the world. And your platform allows me to know exactly what forest that I am, where the carbon credits is stored? Exactly. You can enter the platform. You can see different projects around the world. You can see exactly where it's located. You can see satellite images that get updated on a frequent basis. You can see photos of the forest. You can see how everything was tested, a description of the co-benefits. Because by the way, one important thing about forest is that not only they capture carbon, but they are holders of biodiversity, wildlife, water conservation, community impacts, job generation. So it's a very holistic solution to many ecological problems. And all that is described on the way that we display the projects on our platform. So I think one thing that might be interesting to kind of give this a little context is to talk about magnitudes. So for an average, I mean, we don't have to talk about specific customers, but like for an average company, how much land are we talking? What are, how much carbon are they trying to offset? Yeah. So for, so it's a good question because there are many companies that are for the first time evaluating, you know, becoming carbon neutral of setting their emissions. And turns out that it's not that expensive. It turns out that for certain companies, for example, service companies or software companies, their emissions are mainly the electricity consumption in their offices and their travels of their employees. There is an estimation that, you know, for a company like that is about six tons per employee per year, the emission. And today, you know, prices of carbon credits range between five and $20. So it's not a lot of money to- Per ton? Per ton. Yeah. Offset an employee in all of its, so like emissions, it's 50 bucks or a hundred dollars. It could be between 50 and $150 per employee per year for a service company at that price level. And how much land is that just for context? So let's see, one hectare of land of full grown forest contains about 200 tons. Now, you know, the carbon credits get issue in terms of how much additional carbon a forest project captures. So that depends. There are different types of projects I can explain, but yeah, we have projects that, it's interesting the question, because we want to start presenting this as, you know, by offsetting your emissions, you're protecting 10 soccer fields of forest, right? Or, you know, 50 soccer fields of forest. And we have, in fact, we're working on presenting trenches so companies can choose, okay, I want to participate in this trench that is going to offset even beyond my, our footprint and focus on the protection that we're doing and not just on the carbon offsetting. Got it. So we talked a lot about tons of CO2. So that's the, typically the unit that people are using to measure carbon emissions. The world is emitting 35 or 40 gigatons a year. That's an enormous amount. Can you talk about just like the opportunity of foresting? Like how big is the, like, is this opportunity? Because I remember there's, there's a venture firm, Bill Gates, investment firm, Breakthrough Energy Ventures. They say they would only invest in things that have a minimum opportunity of, I think it's like one gigaton or one and a half gigaton or half a percent. So some, some large number, which means that everything you have to go after has to be really large. How large is the opportunity in forests? Yeah. So there was a paper published recently by a university in Switzerland that did an estimation of the potential for reforestation. And the numbers are like this. There is about 1 billion hectares in the planet that are available for forest restoration without competing with agriculture. In that land, you can plant about a trillion trees. And that trillion trees has the potential to draw down about 200 gigatons of carbon, not of CO2, of carbon. So CO2 is, you know, times 3.6. That is about two thirds of the emissions that we put in the atmosphere since the industrial revolution. So we're talking about probably the most meaningful solution. And this is discounting, not counting forest restoration, forest conservation, which is the standing forest that we have today, especially the rainforest that capture a lot of carbon, right, in Amazon, in Borneo, in Congo, that we should stop deforesting right now, because these forests continue to capture carbon over their entire lifetime. So yes, these are meaningful numbers. And the main problem that's missing is that the incentives aren't there. Is the incentives aren't, they don't exist, or they're not available to most of those landowners? Exactly. They're not available because, you know, the carbon market, you know, the flow of capital going to carbon markets is growing 50% year over year since the Paris Agreement. And we hope that we'll continue to grow as more regulations come into place. For example, all the airlines starting 2021 will have to offset their emissions. This is by regulations, right? It's called the Corsilla framework. And And we are talking about 160 million tons per year that are gonna be demanded by the market. So the demand for carbon offsets will continue to grow. And our intention is to make it easier for that funding to go to reforestation and forest conservation and in the future, other nature-based solutions because beyond forest, there is what's called blue carbon, which is restoring coral reefs and kelp forest and mangrove forests in waters. There is regenerative agriculture, which is another form of land-based carbon capture and so forth, right? So we hope that in the next few decades, hundreds of billions of dollars will go to solving climate change as we realize the importance of this and the urgency. And there will be a need for a platform that transparently, efficiently, and effectively transfer that capital to the right solutions and we hope to be that platform. Maybe we can dive in on the trust question. So there's a history of people not fully trusting carbon offsets. Why do you think that happened? And sort of like, what is the difference between a carbon offset and a carbon credit? And how do you make sure that you build and trust in your system so that we can change that narrative? Yeah, I mean, the reason people didn't trust them is because lack of transparency and lack of data, right? It was a very paper trail type of industry. And we are trying to change that. We're trying to make it a digital asset in which you can trace digitally everything from how a credit was issued, how it was calculated, how it's monitored, and how it's traded. That should happen online, like every other industry that received the internet treatment, right? So kind of like Airbnb, you can go and find every single place around the world and as a homeowner or landowner, I can figure out what the value of my land is on the carbon markets. Exactly, yeah. So the lack of trust was because of lack of transparency and data and information. And that's gonna change. And just a specific question, how do you make sure that something isn't double counted? How do you make sure that someone isn't on your platform and another platform at the same time? Yeah, well, there are these registries and the registries are, in a way, cross-accounted. But there's definitely a need for more transparency tools and more technology tools, frankly, for these registries to assure that everything is uniquely accounted. There is also the issue of the national contributions to the commitments towards the Paris Agreement in which a country can claim the carbon capture of a forest and maybe inside of that land there is a particular private project that also got carbon credits. So you have to assure that you account for that. And again, it's just about data and making the data accessible and standardized. Got it. So one follow-up question is, what's the difference between reforestation and afforestation and also one common concern people have about forest capture and carbon is that forests eventually die or eventually burn or whatever natural costs of carbon being re-emitted into the atmosphere. Reversals, yeah. Yeah. Yeah, so, okay, there are four type of forest projects and more broadly, but there is forest conservation, which is you have a standing forest and what you do is you commit not to cut it down. That's what's needed in the Amazon rainforest, for example, right? We need to pay people not to cut down the forest because there is an alternative that is cutting down the forest to do cattle ranching or to do agriculture and that's a big economic pressure on the Amazon rainforest. Secondly, there is what's called improved forest management. That's very common here in North America. These are forests in which timber logging was done and basically a commitment is to do a more regenerative type of harvesting in which you harvest every couple of decades, you replant trees, you re-enrich the forest and you can continue harvesting timber but with a more sustainable practice. Number three is reforestation and it's just planting trees in a place where there used to be a forest in the past. And afforestation is to plant trees in a place where there wasn't a forest in the past. So you had to prepare the soil, it's like basically decertifying or sort of like converting a desert into a place where a forest can exist. Way more difficult to do and we kind of don't need to go there because there's a lot of places available for restoration but at some point we could. We have an engineering capacity to geoengineering and modify environments so powerfully as we did with civilization, we could easily afforest, for example, I don't know, the Sahara Desert even. Wow. So in terms of differences between these methods, are there certain benefits to log sustainably? For instance, is a new tree giving off more or like capturing more than an old tree? It depends on the species, it depends on the climate of the region, it depends on a lot of things. But all growth forest continue to capture carbon. The Borneo forest that has millions of years continues to capture carbon. And while a forest like every living ecosystem and organism dies out and regenerates and when a tree dies out, yes, it releases some carbon, the net result is actually carbon capture. And there is a lot of data that supports that claim. That being said, wood is a very sustainable material, way more sustainable than concrete or other materials. So we should continue having tree plantations and harvesting for wood generation. And I think that doing improved forest management on timber areas is an important practice in which we are optimizing for both, for carbon capture and for wood production. So to that end, a question Gustav had written down. Sometimes are the incentives misaligned in the sense that farmers just wanna create monocultures of crops? Like, hey, here, I can generate the most lumber with this type of tree. And yeah, do they go for that? Yeah, yeah, that's been the case, definitely in agriculture and in the timber industry. And hopefully this creates an incentive not to do that. In an improved forest management, biodiversity is tested as well. So, and with data, we can, like for example, with remote sensing data, with satellite images, we can determine markers of biodiversity that then can be accounted into the system. So as a buyer of carbon, is that a choice I have to say I want to make sure that the forest that I buy to capture carbon is diverse, have biodiversity? Is that a choice I make or is that a choice that you make on your platform? Right now, the protocols that are out there to issue carbon credits have tests for biodiversity. It's one of the questions that you have to answer for. In the future, we hope to present proposals for new protocols. That's something we can talk about, in which all the available data gets accounted on the amount of credits that the project gets. And biodiversity should have a weight there. But also, yes, buyers can and they do prefer projects that protect wildlife, that have biodiversity benefits because it's not just about carbon setting, right? Got it. So your co-founder, Tomas, is a machine learning engineer from Banshee National, like a lending company. Talk to me how you guys use technology. So there's a lot of tech and the data sources that you get. Just talk me basic of the platform. Yeah, absolutely. Yes, Tomas is a machine learning engineer and we're building an amazing team on machine learning. We have four scientists with expertise on machine learning and we just hired a PhD in math that solved an unsolved geometrical problem that made his name on the math world and he's a machine learning engineer as well. And what we do is we are using a deep learning technique called convolutional neural networks that basically analyzes LIDAR data, clouds of points of the forest that were collected by urban or by drones or by satellite. And in a way, takes account of the shape of the forest and based on that, can know how much biomass is there in the forest. We train the algorithms with ground truth of plots that were measured by forest services, measuring the trees and then you train the model and the model learns to detect, given a certain shape, how much carbon is there. And we demonstrate that this is a work of Elias who is the PhD that works with us. For four years, he was working on this and he demonstrated in New England, less than 1.5% error at predicting how much carbon is there in a forest comparing by looking at LIDAR or by looking at satellite. So you train the model with LIDAR and then you apply it to satellite. I'm very curious, like how do you account for the biodiversity in the model? Because I understand, so if you're mapping like altitudes, that's one thing, but you know, just, yeah, how can you tell different types of trees? Tree concentration, for example, is a marker of biodiversity. Okay. Where there are many trees concentrated there is more wildlife, for example. I'm not an expert on that, but this is some things that I'm picking up. So you can train the algorithm also to learn where there is more biodiversity and more, you know, canopy shape also tells you species group. Okay. So we can determine whether it's conifers or non-conifers, things like that. But ultimately, you still kind of need a little bit of ground truth to know it's like, okay, in this type of environment, you know, these types of trees might be there. Yeah, yeah, yeah. What are the big technical challenges right now for you guys? So I mean, data collection, we partner with the two largest satellite companies in the world, and we're, you know, sourcing really good imagery from them. But we also, you know, benefit from collecting LiDAR data that's already out there, you know, in ground truth, you know, again, field plots, measurements. So yes, we're very hungry for data. The more data we have, the better the algorithms become. We're very excited about a NASA program called JEDI. They sent a LiDAR to the International Space Station, and they've been collecting LiDAR cloud points of forests around the planet. They're gonna be releasing this data now in November. We're gonna be the first to jump into that data. If the data's good, we can expand our model to the entire planet. Wow. So yeah, from a technical perspective on the verification and monitoring side, it's just data. But we are- And data's available equally around the world, or like- Yeah, but sometimes it sits on, you know, the forest service of a country, right? Here, the US Forest Service has been very, you know, open, sharing data with us. We obtain a lot of data from Mexico. We're in the process of obtaining data from Peru and Brazil. So yeah. Got it. So your company is less than a year old. You've scaled up pretty fast. Where are you today? Just give us sort of like roughly an idea how far along you are, and sort of like, what are the bottlenecks from growing even faster? It's a common question we ask YC companies when they're in the batch, but there's always something that prevents you from growing even faster. Yeah, I mean, we did accomplish a lot in just one year. At the same time, I feel that we should go faster. We should be accomplishing more, but that's always a sensation, I guess, for an entrepreneur. We build this model that works very well in North America. And starting to expand to South America, we partner with some of the largest forest project developers in these two regions. We onboarded over 10 forest projects in the U.S. and Brazil into our platform that we analyzed, validated, and listed on our platform. We have close over 10 customers, and we are in the process of closing some very big companies that are already purchasing our own assets and that they loved our approach. I cannot say names yet, but these are very recognizable companies that have a high standard on everything they do. And- Who generally are the buyers of this? You mentioned the compliance markets are $80 billion. Is this mostly corporations, or is it countries or individuals? Who are the buyers? Countries purchase carbon offsets at scale, but it's mainly, yeah, corporations. Corporations that are regulated in this market are energy companies, for example, transportation companies. But then there's a big and growing voluntary market, of companies, technology companies, brands that sustainability is a big part of their value proposition. And then they decide to take responsibility for their carbon emissions. Becoming carbon neutral is a thing now, and all the sustainability departments on these companies are talking about it. Maybe talk about how the volunteer and the compliance kind of fit together, because I imagine that the more volunteer the carbon offsets there is, eventually that will lead to the compliance, or like, yep, this is something that we should be doing, or- Yeah. How do corporations think about this? Is this something like, we gotta do this now because eventually it'll be compliance, we gotta get ready for it, or are they like, this is what our customers or employees are demanding? How do you, what are the big ones? Yeah. Why are they doing this? Yeah, for example, airlines are in the case that they are going to be regulated in 2021, and yet many have started already offsetting their emissions and even offering their customers to offset their trips. You know, for example, Delta and United have the option to offset your flight. It's not super easy to do it on their website. Hopefully we're gonna help them with that, but that's the case. And then, yes, here in Silicon Valley, you know, employees, customers, and investors are asking companies, what are we doing about climate change and offsetting your emissions? Of course, first you have to reduce, try to use, you know, renewable energy, and then offset what you cannot reduce. So is that what you think the future of the market is? It's just going to be companies like making bulk changes versus individuals saying like, you know, I'm gonna offset one flight at a time? I think it's gonna be everything. It's gonna be governments regulate the industries, it's gonna be voluntary companies, and it's gonna be consumers as well. I do think that consumers will have to vote with their dollars, and we'll have to also take care of, we have to all take responsibility for our footprint. At the end of the day, companies are just creating products and services that we consumers consume, right? So, yeah. Yeah, makes sense. So one thing I wanna talk about is fundraising. So after we put our request to start up, we got lots of people reaching out to YC. It was a combination of, it was founders that wanted to start companies, not that many of them, unfortunately. A lot of people wanted to work for these companies. There was like dozens of engineers at big companies that were like, which of the companies you have funded should I go and work for? We didn't have that many for software engineers at the time. And then there was investors, and who wanted to learn many of them. And then there was people from the press, and there was like, this is one of the, I think probably the request for start up that generated the most amount of press interest of anything we've ever done. Still are getting pings about this. Maybe tell us your experience on the fundraising side. So like, you went out and fundraised, you had fundraised in the past, and you kind of knew a little bit about how this went, but you're raising money for a company that's fixing climate change. It's like, what categories are like, do they put you and do you put them, the investors? And what did you learn about fundraising through the process? Yeah, I was surprised by the fact that this time was my easiest fundraise. And I was able to attract the best investors in my entrepreneurial history. And I think the reason was that smart and accomplished investors see that climate change being one of the biggest challenges of humanity is also one of the biggest opportunities of value creation for society, and therefore the opportunity to create valuable companies. I think that the vision that we described resonated with many investors. And yeah, I mean, we ended up raising almost twice as much as we wanted to raise initially from an amazing group of people. Our lead investor is Ryan Graves, the co-founder of Uber. He has experience building a global marketplace. We got investment from Chris Saka, who funded Uber at the beginning, PG invested, and we got investments from Social Capital. capital, global founder's capital, and even some small checks from funds like Accel and Atomico. And all those investors, I guess, saw on us that we have first a strong technological component on the machine learning verification, and then strong network effects on the platform, on the marketplace, and the potential to scale to be a very large platform, provided that humanity awakens to the reality of climate change and the need to act on it. So I guess what I learned from that fundraising experience is that there is a lot of interest of investors on climate change startups. Did you have to educate them about the solutions, sort of like through the fundraising, or did they come with a lot of prior knowledge? No, no, definitely. I mean, I had to share all this information that I didn't have myself at the beginning of this process, how carbon credits work, what's the potential of forests, and so forth. But they saw it quickly. And I think that... So yeah, I validated there's a lot of interest. Many of the investors I talked to keep asking me, do you have other companies working on climate change? So there is a lot of interest. You have to have a business model that is scalable. I think in that sense, YC was super useful for us on putting the Silicon Valley playbook lens into this company and avoid us to be trapped into a science project or a non-profit project. So we're a technology startup. We had to be scalable. We had to be defensible. We had to be a product that people want, make something people want. So this is funny. So it kind of boils down to the exact same thing as before. You aren't pitching this in any way differently than BlueSmart. Sure. Yeah, exactly. Yeah. Yeah. Because I think the, I don't know, the overwhelming notion is that you have to pitch something differently if you're like trying to save the planet, right? No. But you're not. You just made a good business. Well, I mean, I had to say something. To every investor that entered the company, I told them before accepting their money, look, okay, now you're convinced that this is a good business. I want to tell you, this is a long-term company. It's mission-driven. So always the mission is going to be for profits. And it's going to take time. You know, we're trying to build, you know, solve a big problem. So if you're not okay with that, don't invest. And some people didn't invest, but the majority loved that because they saw the commitment that we have. And, you know, really good companies take time and really good companies are mission-driven. So yeah. So I mentioned after the request was started from YC, we got a lot of engineers pinging us or like, what can I do? And it was mostly software engineers. I'm curious what advice you have for, I'm sure there are lots of people like this who work in a big tech company, they're data scientists, engineer, designer, product manager, and they want to work in climate change. Like what do you typically advise them when you meet them? I've met many of these people and I struggle sometimes with sort of like where to point them because the number of software companies isn't that large. Like, yeah. I mean, the number one thing I advise them is to apply to Pajama, but we're not hiring that many people yet though. Yeah. I mean, I agree with you. I wish there were more companies to point people to. I do encourage people to start their own companies. I encourage people to look for the few startups that are out there and go and help. And I think that also within big companies, you can try to find your place in an area that is working on climate change. Big companies like Google and Microsoft and Apple all have an area of focus on climate change. So go and work there, right? And learn there or contribute there. And even from governments, from nonprofit organizations, there's a lot of places in which we can contribute. Maybe a follow-up question there. So let's say I'm a software engineer and I wanted to start a company working on this. Do you have any specific areas that you think software is very needed on right now when it comes to climate change? I think that AI plus X, there is a lot of opportunities to solve climate change. I actually made a list. I'm planning on writing a blog post at some point. But just to give you a few examples, AI plus optimization of shipments, AI plus optimization of travel and air travel, AI plus safety of nuclear plants, AI plus smart cities, AI plus smart electric grid, AI plus- Because these are such complex things that humans aren't good enough to actually make decisions there. Exactly. Efficient agriculture. We should be being way smarter about how we produce the food that we produce. So I think there's a lot of software opportunities on making the use of resources in planet earth more efficient. And so related to researching ideas to potentially starting a company, you don't have deep domain expertise. You kind of got excited about this and you went off on your own. How would you suggest someone begin their own research process? How do they start reaching out to people? Where do they go? Where do they find this information? Yeah, definitely. I think that, well, the first thing I did differently in this company was I took longer on the research phase. And that was super important, to be honest. I think in the first companies it was okay to just jump into the pool because that maybe they also helped me get started. But I do think that taking about a year to just research and read books and talk to experts and discard ideas is super important. That's what happened to me this time. Experts are incredibly open to talk with people that want to contribute. Are you talking like public sector, private sector, professors? University professors, researchers at labs, even executives at companies. My experience been that people want to help. So yeah, I mean, just come up with ideas and go and talk to people. And you don't have to be an expert. That's the thing about entrepreneurship. You just have to be good at attracting resources, right? Absolutely. So I have one last question I want to ask on here. So most startups don't have to spend too much time thinking about policy and governments. There's sort of like, there's not really a priority for them. I'm sure this is something that is important for you because such a lot of this is regulated and policy and government decisions probably go in your favor in the future. There's probably more of this, not less. What do you hope to see sort of like in that angle? Yeah, I mean, definitely we are acting as if there's not going to be any change in regulation and still this is going to be a big market. Yet we do think that there should be more regulations that many of the big polluters, energy companies, transportation companies, industrial companies should have an obligation to offset their emissions. And that's going to be an incentive for them to transition out of fossil fuels, right? So yes, I'm always paying attention to the different initiatives like cap and trade markets or carbon tax initiatives in different places around the world. And my opinion is that yes, this is what happened with aerosol, right? And the ozone hole, we fix it with regulations. And also we fix it with regulations, slavery and torture and genocide, right? So things that are wrong have to have a regulatory framework to fade them out. So I do think that free markets are great, but at the same time, the role of regulations on a capitalistic society is to bring society to where everybody wants to go. Awesome. So just a couple quick questions from Twitter before we wrap up. Sure. So Guillermo asks, what are some of the most important things you've already learned about the problem space since starting the company? Yeah, well, I think that we learn a lot about the importance of all the different players that are out there in the market. For example, there are these, you know, registries that create standards and protocols. And they're super important because they've been studying this for many years. So we are going and partnering with them, trying to make them improve their protocols or put our technologies at the service of their protocols and standards. We learn, I guess, that the importance of education, you know, frankly, this is a market that's very confusing. You know, so I didn't have as part of our strategy to have a content strategy, but now I realize that content is going to be super important. We need to create more awareness and more clarity. And definitely we learn a lot about the data part. We learn about, you know, how remote sensing is exponentiating the possibilities of capturing data or ecosystems. That's something that gets me really, really excited because one vision that we have for Pajama is that we can become this kind of like a platform for understanding deeply all the ecosystems of the planet. And, you know, this idea that Buckminster Fuller had of having an operating manual for Spaceship Earth, imagine a data platform in which you can know down to the genetic composition of, you know, every organism in a forest in one platform. So these are kind of things that we geek out in terms of data and we learn a lot about the possibilities. Yeah, that's super cool. I have one more question. One more question. So Related Eye asks, can food forest grown via permaculture methods be a better way to perform agriculture? Yeah, for sure. I mean, agroforestry is a very important practice that I think we need to do more. If we are going to feed 10 billion people, we need to find more regenerative forms of agriculture. And it turns out, according to data I read, that agriculture inside of a forest can actually produce more yield than traditional, you know, monoculture agriculture. So permaculture is another, you know, practice that, you know, has enormous potential. And these are things that, by the way, can also obtain carbon credits. So we hope to help also those projects get additional income through that. Awesome. Diego, thank you so much for coming. Thank you so much for having me."
  },
  {
    "name_video": "Diane Greene's advice for founders",
    "description_video": "Diane Greene has been the co-founder and CEO of three startups, including VMWare. She talks about lessons learned that has helped her along her founder journey.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/6Q-diane-greene-s-advice-for-founders",
    "youtube_url": "https://youtube.com/watch?v=bNvUW_IBz0g",
    "mp3_file": "downloaded/Diane_Greene's_advice_for_founders.mp3",
    "mp3_content": "Hi, everyone. I guess I'm mic'd up. I can stand right here. I'm just here to introduce our next speaker, who's one of my just favorite people, Diane Greene. She is, you all I'm sure know her, so she needs no introduction. But she's the chief of Google's cloud businesses. And prior to that, amongst many of the things she did, she was the founder and CEO of VMware. So she's going to come out, say a few words, then I'm going to come out and join her and do some Q&A for her talk. So welcome, Diane. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Hi. Hi. I was trying to figure out what to do, because I like to read my notes. The lectern was too high for my 5 foot 1 self. So it's just such a total pleasure for me to be here. More than 800 female founders from all over the world. Some of you just probably, yeah. Yeah. So some of you are probably starting your careers, and many of you in the early stages of developing your companies. And I think it's just incredibly exciting. There's so much possibility sitting in this room, this one auditorium, and imagine all the interesting challenges that you're going to surmount, and all that you're going to be required to navigate. So a little bit about myself. I've been a co-founder and CEO of three startups. And the first was V Extreme in 1995, where we developed a low bandwidth streaming video technology. We could stream sort of postage sized videos across the internet. And we sold this to Microsoft in 1997 for $75 million. And that became the basis of Microsoft's movie player. My second startup was VMware. And with that, we launched the virtualization revolution. And we founded that in 1998, and we took it public in 2007. And the market cap closed that day at $19.1 billion. So my last startup to date was Bebop, which we founded in 2013. And then we sold it to Google in 2015 for $380 million. And I committed my portion of the proceeds to non-profits through a donor advice fund. OK. Thank you. OK. So before these startups, I don't usually get so much applause. You're a great audience. Before these startups, I built inside of larger companies. At Sybase, the first tech company I worked at, before that I was a naval architect, I developed asynchronous input-output software to make the database run faster. And actually, we were able to beat Oracle and Ingress and all the other database companies at the benchmarks. And yeah, it was cool. And then I went to Tandem. They actually fired my boss, who was a woman. And it was a mistake. She was running engineering, and I went to Tandem with her. And anyhow, there I helped create a hybrid architecture to run an open Unix-based world. Tandem had the best transaction processing system in the world, but it was proprietary. And then at SGI, I developed streaming video solutions. And that was part of the Time Warner Interactive television project, which was actually a precursor to the World Wide Web. And a lot of people in that group went out, Netscape was one of the companies. A lot of companies started out of that. And then as a tech investor, I've advised and put seed money into a lot of startups. And they include two companies that are now public, Cloudera and Pure Storage, and also Unity Technologies, which is the gaming developer platform, and several others. Unfortunately, my schedule's now such that I no longer have the time to provide seed money or advice to startups. But anyhow, I've learned a lot of lessons along the way. And I'm going to now look back and attempt to identify and share them with you. My first lessons were at a very young age. My mother was the latest in a pretty strong principled Midwestern school teacher lineage. And my father was a brilliant hard-driving engineer and entrepreneur. And I was the second youngest in my family, a little girl in a crowd of very competitive and dominating brothers. And we lived on a creek that fed into the Chesapeake Bay. And my father conveyed his love of the water to me. And I soon found myself taking off on long sails in my little sailing dinghy. And this was formative. I suddenly was the mistress of my world and in charge of a boat, and on my own, facing, overcoming the challenges that the sea would present to me. And later on, I would race bigger boats and windsurfers. I won the Women's National Dinghy Sailing Championships. I raced long distance to Bermuda and down both of America's coasts. And I windsurfed across the open ocean, from Maui to Molokai and back. It's actually an amazing story, but I'm not going to go into it. But more than anything, I think my connection to the sea has really helped me develop my independence and a sense of importance and value of my own vision. And to sail successfully, you need to observe with great care. You need to identify what the wind and the water are telling you, and then find a way to execute to reach whatever goal you've set, be it simply making it home to port or winning a race. Building a company is so much like racing a sailboat. You need a plan, and then the ability to re-evaluate the plan in real time as new information is acquired. Suddenly, the wind changes, or a competitor is stronger than you thought they'd be. And each mark in the race is a milestone where you need to look up and evaluate what you're doing, how you're doing. And so when you campaign a sailboat, you need to be in the moment. You need to let go of your self-doubt. And yet, you can't lose the ability to question your decisions. So most of all, when it's time to make a decision, a competitor's come upon you, or the wind shifted, you make it. The race won't wait for you. And finally, when you race a sailboat, the selection of your crew is just completely paramount. It's impossible to be an effective skipper if you don't have the right people working harmoniously in the right roles. So what does all this mean in terms when founding or running a company? At the extreme, I learned that the founders need to be solidly aligned, and that a startup maybe has a better chance of success when the number of founders is limited. Too many cooks can spoil the broth. Most of all, I learned that no one is indispensable, and it's essential to get the right mix of people, talents, and personalities. VMware was really the beginning of an industry revolution. And from that, I learned what it takes to induce the market to accept a profound innovation. It's essential to design and market a major innovation in a way that makes its adoption non-disruptive. That makes it easy to integrate with an established order, an established way of doing things, even if the innovation ultimately supplants that order. So for example, one of the things that made our sales take off, we had this virtualization layer, but we built a tool that would take a workload running in a physical machine and just magically put it in a virtual machine, and everything just ran the same. And that was a phenomenal sales tool for us. At VMware, I also was reminded not to let step backs make you stop thinking. If a puzzle can't be solved one way, there's always another. It's just a matter of navigation. We were really disappointed when we learned that VMware would not be able to sell through IBM due to IP issues. But then we turned it into an advantage where we were able to work with IBM to enlist all of their star resellers to take us to market. Finally, at VMware, I learned how essential it is to create the right corporate culture. We worked hard to foster a sense of the importance of each and every person, and the importance of each and every person, and also what their role was in the furtherance of the company's objectives, and to create an open culture that would make it easy for people to communicate, collaborate, and share ideas. And indeed, we designed our corporate campus with exactly these goals in mind, if any of you have ever been to VMware. And then Bebop also provided an interesting set of lessons. I think it may be my last startup, but you really learn every time. My original co-founder didn't stay with the company, and I was at first sort of a bit out of my element. We were attempting to re-event how enterprise applications are built so they'd be simple to use and more effective in attaining their objectives. But the basic look and feel, the design of our first attempts was just off, and we persevered. And Bebop became a powerhouse for design thinking and for tools to build enterprise applications. Tenaciousness really pays off. And now, finally, as head of Google Cloud, I'm learning that it's possible to build an enterprise startup inside a megacompany. Once again, the cultures of both the parent and the in-house startup are crucial. And we're a pretty big startup. And we serve seven apps that have over a billion active users. Anyhow, we're big. But once again, it is all about having the right people in the right roles. And finally, it's about never taking your eye off creating value for customers and partners. So the bottom line when sailing a boat or building a company is that you give it your all. You give it your all not because you're supposed to, not because that's what makes you win, but because you have respect for your goal and you enjoy the process. As a company founder, enjoy building things. You enjoy creating value. And the commitment that comes from loving what you do is what will nourish you. It will satisfy you, and it will make you unafraid of failure. You may lose this race or that one, but sailing ahead with everything you have will still be a pleasure. You may make a fortune, but the fortune will be incidental. If your goals are worthy, it's the process that will count. And that understanding will be your greatest source of strength no matter what the adversity. So thank you. And now Jessica is going to come out and ask me questions."
  },
  {
    "name_video": "Vinod Khosla on How to Build the Future",
    "description_video": "Vinod Khosla, founding CEO of Sun Microsystems and founder of Khosla Ventures, talks on the importance of hiring and picking the right people, being generous with early employee equity, and his gripes with other investors.",
    "related_categories": [
      "People",
      "Advisers",
      "Hiring",
      "Investors",
      "Stock Equity"
    ],
    "page_url": "/library/6N-vinod-khosla-on-how-to-build-the-future",
    "youtube_url": "https://youtube.com/watch?v=TYt5yuiGk9E",
    "mp3_file": "downloaded/Vinod_Khosla_on_How_to_Build_the_Future.mp3",
    "mp3_content": "My name is Sam. Today we're talking to Vinod Khosla. Vinod is the founder of Sun Microsystems and Khosla Ventures. He's been involved in the creation of dozens of billion dollar companies. And I think he's one of the most interesting thinkers that I've ever spoken to about how to build an ambitious company and team and everything else you need. So thank you for taking the time to talk to us today. Great to talk about it. I want to start with the very beginning and how to think about the idea and the mindset for a company. One thing you've said before that I really love is that there's a huge difference between a $0 million company and a $0 billion company. And maybe you could start with just explaining what you mean by that. To me, when you set out on a journey, your mindset determines who you bring on board, how you approach it, what you set up, what deals you do, or which investors you get. In a zero revenue company, if you think $0 million, you're thinking a certain way to tactically achieve a short term goal. $0 billion, you start building from day one the company and the people you'll need to build the company. One of the things people seldom realize when they're starting up, you don't ever plan what you're going to do. What you're going to do, you build a plan to make, to plan. And who helps in that planning as you plan iteratively, as you evolve your strategy and your tactics? That team, which I call the kitchen cabinet of a company, is the essence of what your company will become. So one of my favorite tweets I like tweeting out is, a company becomes the people it hires, not the plan it makes. And that's grossly underappreciated. And is the biggest difference between the $0 million and the $0 billion company the initial people you hire, in your experience? It is the initial people you hire, but also how you approach the initial tactics. My other great analogy, if you have a large vision, you're climbing Mount Everest, it's never a straight line. Nobody's climbed Everest in a straight line. You get to base camp, you get to camp one, camp two, camp three, camp four. If you get the right approach, you're obstinate about your vision, which is Mount Everest, but you're flexible about tactics as things change. As you zig and zag, when you pivot, these are all things on the way to staying with the vision. Now you can also do the same tactics without worrying about the vision. And my big beef with a lot of investors is they want revenue, they want to meet plan, as opposed to collect assets for this larger ascent to Mount Everest. So you can clearly set up base camp where you get revenue, stability, cash flow break even, the ability to raise more money in the wrong place. If your goal is to get to Everest, but you still get the revenue. You might have 20 million, 50 million, 100 million of revenue, but it doesn't help you get to Everest. Or you can take a little longer, a little harder, get to the base camp that lets you get the resources to keep the journey to your vision. There's a huge difference, and the team is the biggest difference, but there's also strategy differences. By the way, investors, in my view, matter a lot in this, because you make short-term versus long-term trade-offs. What percent of investors in Silicon Valley do you think are good long-term company builders? As I get in a lot of trouble for saying this. We're among friends, it's okay. I think 90% of investors add no value. In my assessment, 70% of investors add negative value to a company. That means they're advising a company. This is part of team building, too, for entrepreneurs. They're advising a company when they haven't earned the right to advise an entrepreneur. So some of the junior people here, when they ask me, hey, at this other firm, young people are going on boards, can I be on a board? I say, you haven't earned the right to advise an entrepreneur, so it's unfair to the entrepreneur. Just because you got an MBA and joined a venture firm doesn't mean you're qualified to advise an entrepreneur. The biggest piece of it, not the only way, is have you built a large company? Have you gone through how hard it is, how uncertain it is, how traumatic it is to go through? I mean, just this morning, I was talking to somebody about how many times we almost worried about making payroll at Sun. How many times? Or going bankrupt, plenty of times. Like more than two. Yeah, and there was a period, there was a three-month period where we almost went bankrupt, because we had a hardware problem. Monitors we were buying from Philips were breaking every 30 days. I think there was probably a month or two when the earliest I went home was at 3 AM. And the latest I was back in the office was 7 AM. It just, unless you gut-wrench, you felt that gut-wrenching decision, you can't advise an entrepreneur. I hate board members who sit in a board meeting and say, can you improve quality? And then five minutes later, can you ship faster? And five minutes later, spend less money. And they've never gone through really hard trade-offs, and how uncertain it is. If you add more people and increase your burn rate, are you going to improve or hurt your chances of getting something out? These are very uncertain, very hard calls. The biggest thing an entrepreneur deals with is which risk to take when. When you take a financial risk of running lean, when you take an engineer marketing risk of a feature poor product, when you take, which risk do you want to take? And it's like whack-a-mole. And ambiguity is so hard to deal with, but it's the essence. And frankly, it's one of the areas where entrepreneurs, when they don't think about what they actually need, pick the wrong people. So if somebody's never dealt with this decision-making under ambiguity, and they're in a big company, they're not qualified to help you. One of the things I hate about board members is when you're doing that, making these, deciding which risk you want in this stressful environment, the thing you most want as an entrepreneur is a board that you feel is calming you down, is supporting you, is not adding the stress. And most board members, while you're doing that, just tell you, you're going to die. The thing I hate the most is when an old board member of mine used to send me press clippings of competitors all the time to make a point. And you really just want someone who's like, you got to take a hard risk here. It's a tough decision. Look, these things are the things you're not qualified to advise an entrepreneur on, if you haven't been through it. There is a time when panic is the appropriate response in a company. It does happen. Yeah. One thing that I think I've noticed entrepreneurs that are working on hard, ambitious companies really struggle with is figuring out who to trust for what advice. So how do you think about that? So my big advice, and the first piece of advice I gave Joe Kraus when he was starting Excite was, the single hardest decision you'll make is whose advice to trust on what topic? So what's the answer? If you're 20 years old, do you ask your dad or your friends? Or if you have a marketing problem, do you ask somebody who's done marketing at IBM? They've never dealt with things where the market isn't established. It's incremental year to year, 5% improvement is what they're shooting for. They're not qualified to invent whole new markets, whole new approaches to markets. So those are really hard decisions, and that's where nuanced advice of which employee would be better. The funny story that's actually not known very much is Scott McNeely, when he started Sun, he started as a VP of manufacturing. They don't know that. Almost nobody knows that. At one point I said, Scott, you got to become our VP of sales. Because of certain types of behaviors, but his background was in manufacturing. And you have to make those gut calls. It's a very non-intuitive gut call, so you have to make those. But back to this issue, whose advice to trust on what topic is the single hardest decision an entrepreneur makes? It's also where the right investors can really help you. I had an argument just last week with another co-investor. In a healthcare company, they wanted this healthcare person who had never dealt with change beyond 2% a year. And I'm like, experience doesn't matter, the rate of learning matters. First principles, thinking matters. Pick for the best athlete, not the person who's the most established wide receiver who knows how to run one pattern and one pattern only. There's two things I want to follow up on, so we'll get to the athlete in a second. We'll keep running into things we want to follow up on. Yeah, we will. So I agree, it's really hard to know who's advice to trust. But a 20 year old entrepreneur comes in here, no work experience. You decide to back them. You have to give him or her advice and say, here's how to do this. What do you say? How do you know who's advice to trust, tactically? So I look at not what entrepreneurs are saying, and we always have this debate inside of them too, but how they're thinking about the problem. In first principles thinking, if you give them a brand new problem, so I'll often say, hey, if you were doing this other startup, how would you approach it? And if they have to think from scratch on a brand new problem, and by the way, this is a great interview question, that they've never dealt with, they don't have an experience with, how do they approach it? Is probably the best indicator of how fast they will learn. If I pick between lots of experience- Including learning how to trust different people's judgment? Yep, including learning who to trust and which people to trust. And so this becomes sort of this nuanced thing, I'm sure you've noticed. One of the things we look at YC stuff, in the three months that they've been at YC, what's their rate of change? If we've had multiple points of intercept, right? That may be a stronger indicator than any other single indicator. That is my number one. Right? That is my number one by far. Right? So we always say, how fast did they evolve their plan, change their plan? What's frustrating to me with other investors, they say, well, stick to your plan, or are you executing in your plan? And I'm the exact opposite, like how fast are you evolving your plan, or changing your plan, and learning? So, but building that team that can, so this brings up a related issue we should talk to, since I want to focus on people. When you hire a VP of marketing, and I've said this to you before, one question, the functional question is, can you do marketing? But that's not the most important question. If he's one of the top five people in the company, the most important question is, what are the questions he will ask? How will he make the CFO better, or the VP of Engineering better? Through the questions they ask, which then prompt this kind of thinking, which then leads to a better kitchen cabinet. The people you coalesce around your dining table, when you have a really hard, ambiguous, uncertain decision to make. And how do you evaluate that in an interview? You're interviewing a VP of marketing, you want to know if you're going to make the CFO better. How do you probe that? I'll often say, if you were, so people often say, here's what happened at my company. And I'll say, if you were CEO, and you had to make a different set of decisions, what would you do? Have them think under circumstances, or if you're doing this other startup. One of my favorite questions in startup world is, if I gave you $10 million today, what startup, three startups would you consider? And what are the reasons an investor, you wouldn't want to invest in those? Like, you suddenly get how they think about a new problem, which is what you face every day in a startup. Yeah, it really is true that I think one thing everyone underestimates when they start a startup is just how little of the problem they've already thought about, and how much more is going to reveal itself every week. So I often tell entrepreneurs, a business plan is completely irrelevant, other than to judge how somebody's thought about a problem, not what they're going to do. Speaking of that, how much do you expect a founder to have figured out early on? And how ambitious should a founder be? Like, how ambitious were you when you started Sun? How much of Sun had you figured out? How much did that vision stay true to what happened? So I'd say I was very ambitious. I'd done one other startup before that was also pretty successful, Daisy Systems. And that went on to go public in the 80s, raised $100 million, which is a huge IP on those days. So I was very ambitious. But because I was much more passionate, and passion's an important ingredient we should talk about, especially in a team. I was passionate about what I wanted to get done, not about the IRR or the returns. So I like founders who are very ambitious. Mostly because if they're not ambitious, they'll hire a team to build a $0 million company. If they're ambitious, they'll hire a team to build a $0 billion company. So among the first 15 people at Sun, 15, 20 people, we hired Eric Schmidt, who went on to run Google. I didn't know he was going to be that capable. We hired Carol Bartz, who ran Autodesk, and then Yahoo. Hired Bill Joy, who wasn't part of the initial founding team. We recruited him as a founder after the fact. We hired so many other people, guys like Tom Lyon and Bob Lyon, each of which have started billion-dollar companies. Larry Garlick, who nobody knows now, who started Remedy. Like this, Andy Bechtolsheim himself has started so many companies. There was such an incredible talent pool there. So this I really want to dig in on. There's only a small handful. By the way, I just want to take one small diversion. When I met Andy, he was in Margaret Jacks Hall at Stainford. He said, why don't you license the technology for $10,000, right? And he had licensed it to six other startups at 10,000, which in the 80s for a graduate student was a shitload of money. In fact, one of those companies, Simlink, was funded by Kleiner Perkins, and John Doerr was on the board, right? So, but they took the license. I said, Andy, I want the goose that laid the golden egg. I don't really care about the golden egg, because it will be irrelevant in a couple years. I didn't know why, but part of it was I just loved interesting people. But I gave him half the equity just to join. And then I did a sales job in selling his incredible part of being an entrepreneur into dropping his PhD. Best decision I ever made, best decision he ever made. But it was a hard sales job to convince him. I sort of say in recruiting, a no is a maybe, and a maybe is a yes. And that's sort of my job. And I get very disappointed when I can't get a yes. How long did it take you to get in from a no to a maybe to a yes? A couple of months, but Bill Joy took six months, because I also had to convince him to drop his PhD. So, two people drop their PhDs. The very best people I've ever recruited in different places in my career have all taken at least months to recruit. Yeah. It takes way longer. Because they always have something great to walk away from. Yeah. The people who don't have something great to walk away are probably the people you don't want. Absolutely, yes. And especially when you're thinking beyond this functional, then the people who do job X well, whether it's marketing or database architecture or whatever, are thinking linearly. If they're broad thinkers, which is what's key to that kitchen cabinet that helps you evolve a plan, you need people who are so full of ideas, they're always triaging down to the thing they can do. And people like that always have great opportunities, so it's hard to get them to join as an employee because they can start their own. And you chase them forever. So, this is actually what I wanted to go to next. There's a handful of companies that have been able to get those people in the early 10, 20, 30 employees that could go start their own company and that go on to later. PayPal's a famous example. Sun's another one. What did you do at Sun, and what has happened at other companies where you've seen this, where people build this phenomenal early team that goes on to be wildly successful? Well, it's always about... You know, entrepreneurship is a funny thing because vision is impractical. If you're reasonable, you won't do unreasonable things. It's just by definition, right? And so, if you have great managers, good process people, they will work against allowing the company to become great. They'll take a great idea and turn it into a good one and execute a decent idea at lower risk that's more reasonable, more sensible. And that's an okay goal to have if that's your goal. If your goal is something unreasonable, something ambitious, really visionary, something change the world, then you have to take the other approach, get this think tank of unreasonable people together, and below that, layer the reasonable people who'll micro-optimize within the macro ideas that the kitchen cabinet comes up with. How do you think about the equity that it takes to attract these kinds of people? So, I see this as a major problem nowadays. People aren't allocating equity widely enough. I think among the first three or four founders at Sun, we kept less than half of the common, which was just, the total was something like 25 to 27% for the founders, an equal or slightly larger chunk for everybody else we would hire. And then investors had a minority, but a significant minority. So, it was like 40% for investors after the A round, something like that. In retrospect, that was a very good idea. So, when last year my son started his company, I said, keep 15% for yourself instead of 45. He could have done either number. Try and hire one or two people at 15%, even though they're coming later, even though they didn't come up with the idea, but that would be incredible resources, especially magnets to attract other people or bring essential skills. Can you say what you mean by a magnet to attract other people? So, if you believe a company becomes the people it hires, then your key task becomes attracting the people. There's also using them productively, that's a management skill. But attracting people becomes who finds you attractive. And selling depends on magnets. So, Bill Joy was an incredible magnet, even back then. Right? And even though open source didn't exist the way it does today, people wanted to work with Bill and Andy. And even if Bill didn't do a day of work, he was more than worth it because he helped attract Eric Schmidt. I don't think Eric would have come work for me as a 25-year-old, other than I did have self-convincing power of why this was going to be large. We discarded, for example, the notion that, which most investors said, why don't you be a graphics add-on terminal to DECVACSIS? And that was an established, known market. There was no graphics terminal. There was a company in Utah, Evans & Sutherland, that built graphics terminals. It was easy. We wouldn't do distributed computing and nobody had heard of the term. When we released NFS, there was no distributed file system in the world. And we open-sourced it and people first said, one, who needs distributed computing? And the second question was, if it's important, why are you giving away all your intellectual property? So thinking non, the specifics don't matter. Thinking non-linearly about it is what matters and that's what the team enabled, right? And so, full circle, back to equity. As much as leaving 30% of the pool to non-founders. So Neil took 15%. He recruited in his other startup, Cura. He kept 15%, hired 15%, a co-founder for 15%, and then left the rest to hire great employees. Now, it is dependent on the area you're working in. He was working in AI. He wanted the people who were all making million dollar salaries at Google and Uber and other places as engineers. So you had to give them three, four, 5% each. And you'd normally not think about it, but if you're competing in an AI startup, you're not going to get the best talent without, and especially if this issue we talked about earlier, if somebody can do their own startup, they will. So you're not comparing them to your job, you're comparing them to them starting their own company. And so, and if you don't do that, you're including only the people who couldn't start their own company who won't help you evolve your plan. A thing that I hear a lot is, I can hire an engineer for X per basis points, so why would I ever pay 5X or 10X? And then I always say, wait, in two years, ask me again if that was the right decision. But the quality of people you can get if you're super generous with equity. I think this is the shape of things to come. I think that the- By the way, this is my single biggest beef with YC, not enough option pools, right? Not enough option pools, not enough focus on recruiting the right co-founders. And I was fortunate Neil trusted me so I could shepherd him into sort of a very different approach. I think he may have had the highest option pool in his batch. Yeah, look, I think it's great. I have found that it's harder to convince founders of this than I would have expected. Because it's not intuitive. Well, also most investors say, make the option pool as small as you can. Because neither investors nor founders wanna, they'd like to own as much as possible and it sounds really good. And until you felt it, it's hard to convince them. Or they would like to own a higher percentage, but the pie is much smaller. And if you sort of say, I'm maximizing the size of the pie first, then it doesn't matter what percentage you own. Look, I think this is the most important piece of advice that we've talked about among many important things today. I think being super generous with early employee equity and getting founder quality people is the first 10 employees. I think all the evidence is on the side of doing this and yet almost no one does. So there's like a huge edge if you're willing to do it. And absolutely, 100% agree that this ends up being the single most important thing in the first six months of a company. And it's incredibly important. In fact, I've written two pieces on. One, once you're doing a startup, how do you engineer the gene pool of a company? And there's an important part. You sort of have to have a process. I find it silly to advise people to hire the best team because everybody says that. It's not actionable. But when you follow this process, I call it gene pool engineering, you are trying to maximize your chances of success and you're minimizing the risks you're taking on by virtue of the team you're building. And that's one part of it. And that's sort of more mechanical. The other part is instead of functional hiring, hire a VP of engineering, hire a VP of marketing, hire a CFO, hire a VP of customer support, you do hiring for this nonlinear stuff. How does your VP of marketing improve the quality of your VP of engineering, make them think harder? This sort of nonlinear thinking is, and I've written a different piece called, I think the labor of love, the art of hiring, something like that on our website. That's a long piece about this. And both these were made a couple of years ago in TechCrunch also. I think the essential reading font knows my view. Even if they don't follow the advice, it'll change how they think about the problem. We will add the links to our website. One final question, one area to wrap up on. We've talked a lot about how to pick your employees, your team members. I think it's almost as important to pick your investor as well. So how do you advise founders if they're trying to build a significant company that's going to do something very disruptive, be around for decades? How should they think about their investors? So I think every piece of equity you do, the money you get is the smaller part of what you get. Advice and the right approach is the much more important part. A simple thing, there's investors who are happy with three times their money, in fact, want to sell as soon as they can and make 3x, 4x, and people who care about your vision. Or people who understand the technological approach you're taking and will be much more tolerant as things go wrong. So those are the factors I suggest people optimize for. And how do you tell? How do you know if an investor truly cares about your vision? Talk to other founders, especially founders who've gone through a large promise, large vision, and had hiccups along the way. When things go wrong along an ambitious path is when you can actually judge an investor. How they think about hiring. Look back in retrospect a couple of years later or talk to founders who can and say, what worked and what didn't? Like, those are the key questions. I think an investor is an employee who you can't fire. And that's how you should think about it. Otherwise, all the same principles apply. I get very frustrated with investors because they mostly detract from value. But most investors are negative value add to a company that's trying to be ambitious. If they're just trying to get to liquidity as soon as possible, then there's plenty of investors who do that well. Have you had founders who come pitch you and you say, that's too ambitious? I've never had that happen. I have had the following conversation. That's ambitious, that's awesome. Build a team for it. Now, what is step one, two, and three? And let's be thoughtful about how you discover the risks on the path to the vision. Because frankly, achieving a large vision is first about discovering what's hard, what the problems are, what else influences success along that path. Once you've found the problem, and which you can only discover by doing things, then you can, the only recipe I've ever seen work for making really impactful companies is both a giant vision and a good step one, two, and three. You have to have both, and neither without the other will work. By the related thing, I often tweet this. I hate pontificators. So easy to do studies, so easy to opine on things. I love doers versus pontificators. Me too. And Nassim Taleb has written Skin in the Game, but also, not so much Black Swan, but his second book after that. I don't know. So Skin in the Game is about doers versus pontificators. And then he has another book about the right kinds of asymmetric risks to take that he wrote after the Black Swan that I feel is more important than Black Swan. One thing that has just worked for me again and again in my career is I happen to like, I love doers, and I don't love talkers, and I just got lucky because I've biased the people I surround myself with so far in that direction. It's been great. Final question, what do you most, what do you hope to get done in the next 10 years? What are you most excited about doing now? So I'm 63. I actually, at 60, defined what I want to work on for 20 years. I wrote a piece called Reinventing Societal Infrastructure with Technology. It's about a 50-page document. And it was the following exercise. And I won't go into the details because we don't have enough time. I said, if I took the US GDP, what parts of the non-governmental GDP couldn't I reinvent personally with technology? And I expected I'd come up with a small part of the GDP that I was open to working on. Turns out there's no part of non-governmental US GDP that one can't innovate on in ways that are not 5%, 10% improvements, but are 100% to 1,000% improvements in resource inputs. So I sort of decided if seven billion people on the planet want the lifestyle that 700 million people, the top 10% have, and that 10% has an energy-rich lifestyle, a healthcare-rich style, a education-rich lifestyle, a transportation-rich, you get the idea. They're very rich lifestyles. Without destroying the planet, could we get seven billion people to that lifestyle of the 700 million people? Then, without destroying the planet and without needing 10x of everything, could you do it? And I could think of a way to do it in every major part personally. Only thing I'm sure is entrepreneurs. And so I subtitled this document, A Call to Entrepreneurs. It's amazing, because no part of the GDP is immune to innovation. I mean, five, six years ago, when Pat Brown said he wanted to eliminate animal husbandry, it became very clear we could change how most of this planet's usable land area is used. Most of the land on this planet. And that's Pat's mission. And I think I said yes to him in our very first meeting. We'd invest. I didn't even need to know the details. It was just a vision too big to not attempt. So hamburgers, do rocket labs, doing rockets, which we did about the same time, to my new passion, could you build buildings with 80% less material? That's why I'm so excited about 3D printed buildings. Like, there's nothing from food to building to construction to rockets to everything computation enables, from AI to, it's really exciting. And I feel like 20 years is not going to be enough. I hope I stay healthy. I hope you do too. I'm sure you will. That's a great place to leave it. I hope people can read that document and call you up. Thank you very much. Thanks, thanks Sam. This was fun."
  },
  {
    "name_video": "On starting and scaling Indian shopping site Meesho ",
    "description_video": "Vidit Aatrey is the co-founder and CEO of Meesho (YC S16), the most downloaded shopping app in India. He talks about how Meesho started and pivoted, how he thinks about building a business in India and how his role has changed.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/6M-on-starting-and-scaling-indian-shopping-site-meesho",
    "youtube_url": "https://youtube.com/watch?v=L325PVEvm7Q",
    "mp3_file": "downloaded/On_starting_and_scaling_Indian_shopping_site_Meesho_.mp3",
    "mp3_content": "This is Adora from YC. I'm excited to have Adit Atre, CEO and co-founder of Misho, which was founded in 2015, and you went through YC in 2016. So today, Misho is probably one of the hottest startups in India, if not the hottest startups. And I'm super excited to hear about, for everyone to hear about your entrepreneurial journey, your thoughts and opinions on not just Misho, but the startup ecosystem here in India. So thank you for being here. Thanks so much for inviting me. I'm super excited to be on this podcast, thank you. So let's start off with, I love the name Misho, which I believe is short for Mary's Shop, which means my shop. And it obviously alludes to what Misho is today. Maybe you can start off with giving us a quick background of what exactly is Misho, and give us an idea of how big you are today. Sure. So Misho is essentially a way for anyone, literally anyone in India, to come and start, as well as grow your social store. And it could be on any social platform, WhatsApp, Facebook, Instagram. Tomorrow it could be something else that comes up. And what has happened over the last three years is now we have close to half a million monthly active such social store owners who are making some income per month. And these people are selling across all possible categories. We started with fashion, moved to non-fashion lifestyle. Now it's food, some travel packages, cosmetics, like almost everything out there. If you want to start a store and you do not have money to start that store offline, you come and start that store on WhatsApp, Instagram, or Facebook. And we give everything that you need in the ecosystem to do so. So most of those people, before Misho existed, what were, did they even have a business? Or most of them, you've enabled them to even have a business in the first place? Yeah, so I'll just set some context here, right? So it's very, very common in India. Like 90% of total commerce happens in these small mom and pop stores. And for every small shop that you see, there are 99 other people who always wanted to start a store, but just never could get capital. India is not such a rich country. Most people do not have access to capital. So these people who never had the opportunity to start a store came onto a platform and became entrepreneurs for the first time. Because we do not need them to invest any money in working capital or setting up an offline shop. You can come here, start your shop on WhatsApp, access anything from our supply marketplace, and only when you get an order, you purchase that from the marketplace. So just taking away those barriers of entry, I would say, so almost everyone who is using our app today has become an entrepreneur because of us. They were not doing this offline, like almost everyone. So when you think about then the end consumer, the people buying the goods from the resellers and the new entrepreneurs, were they buying it from other people like them before? Or what do you think about, you know, why not just, I guess, sell directly to the people themselves? Why not the middleman in the middle, I guess? Yeah, so 90% of total commerce, this is 2019, right? And today also 90% of total commerce happens in these small mom-and-pop stores. You will see in societies, people will just put a board outside their house and start selling products. And most of these products are long tail, unbranded products where there's no pull of the product. People don't know about it. What value these people add is these unbranded products through their trust relationships, through this trust selling, they go out and push these products. They highlight what is special about it. And then people start buying, then people start recognizing this emerging brand, right? So selling unbranded categories through like a mall has never worked out in India. It has always worked through these mom-and-pop stores. So when these unbranded products have to sell online, if you see like all big destination marketplaces in India today, mostly sell brands across all categories. None of them have figured out how to sell a lot of unbranded products. But now with these guys doing similar thing, but not offline, but on these social channels, you have started to sell these unbranded products and across all categories. So we're just taking the same value add that these guys were doing offline to the social platform and giving them all the tools that they need in this new digital world. Most of these users, consumers I mean, have been buying the same kind of products from these small shops offline, right? They've not been going to malls, they've not been going to the Amazon of the world to buy these products. Got it. And is there a timing aspect here? Meaning, a lot of startups who grow really, really fast, some of the founders say it's due to luck, but luck is also due to good timing. So what are the macro trends in your favor in India that allows you to grow so fast today? We've been super lucky, right? In many ways, right? So WhatsApp started to become very, very popular about five years ago in India. So, and WhatsApp was generally the first app most people use. So a lot of these people were coming online. Then about two years ago, Jio happened. Because of Jio, a lot of these people have come online for the first time, like record number of people in India, like hundreds of millions of people in India have come online just the last two, three years. For those who don't know what Jio is, Yeah, so Jio is the new telco that has come and has drastically reduced the cost of data in India. So most people, a lot of people in India had phones, but they never accessed data because it was so expensive. But two years ago, Reliance launched Jio and now people can go online for almost no cost, right? And now these people have started to come using Facebook, WhatsApp, Google, now other apps, right? So these people are coming online for the first time. They have been on internet for just like a year or so. And because of that, and a lot of these guys in smaller cities, like tier two, tier three, or lower parts of the country, these are the people who are coming online because of Jio. And these people were buying mostly unbranded products because their monthly income is generally much lower than metros. They can't afford brands. They tend to buy more and more unbranded products. So us starting this business exactly at the time when Jio was coming big was definitely very lucky, right? UPI has become very big recently, which has taught a lot of people to start transacting online for the first time, which means people now are getting comfortable by buying products. Like about 10 years ago, everyone in India thought that no one could buy fashion online. You want to touch and feel the product, which is not the case anymore because everyone has tried it. People are okay with easy returns. And they're buying again and again with a lot of trust, especially with people you know very well. So a lot of these things have come together for us. And fortunately, we started this business at the same time. We started seeing this behavior about three years ago, and we just kept building on it. Got it. And a lot of people say in India, it's a trust deficit market. Maybe you can explain for the audience who's not from here what that means and how do you solve that problem in particular? So trust deficit is because of hundreds of reasons, right? So in India, most people do not believe in corporate companies. They don't believe in their own government. They don't believe in judicial system, court cases run for hundreds of years. Then they just never close. So most people believe that, hey, only I'm looking out for myself. So who do you believe in? You believe in your community, you believe in your friends, and you believe in someone that everyone believes in, right? So it's very, very difficult for a new merchant to come and build trust with consumers out there. What we end up using is, we leverage trust of people in your own community who come and start these social stores and then start selling to people around them, especially in unbranded products where you have no idea what will happen to this product after a month, right? So you buy, for example, some apparel and after a month, all the color goes away. And I have a lot of these doubts and this is no brand. I don't know, should I buy this or not? But when you're buying from someone in your community who you know very well, that trust deficit goes away. And this is exactly the reason why unbranded products in the offline world about a decade ago was getting sold to these small offline shops but still in your community, right? So retaining that just solves for that problem. Like India as a country is like that. Cool. And so when you talk about who your average user is in terms of the reseller, entrepreneur, what was their life before and after Meesho and kind of how do you help them get online essentially? How do you help them get used to selling goods online? Whereas before, if they were even doing it, it was totally offline and maybe in-person. Correct. So our average user, like 90% of our users are women and more than 80% of our users are tier two and tier three and below cities, right? So most of these are people with low financial incomes. A lot of these are aspirational entrepreneurs, people who want to start a business, but for a very long time. I can tell you anecdotes, right? When we started this business, we spoke to a lot of people who were doing this, like without us, which was a big pain by the way. But when you speak to them, it mattered to them so much. This lady who was saying that for the last 20 years, I go to my husband every year and ask him that please give me money so I can start my boutique or I can start my store selling products, but she never got money, right? And when she came onto a platform and we gave her everything that she needed without needing any investment on day one, she was super happy because she could fulfill that dream, that aspiration of starting that store, right? So this is my typical user. Most of these users are people with low financial incomes in smaller cities who are looking to start a business, who are looking to do something of their own, right? And most of these people, what we have seen over time, and just to give you some sense of our product, most of these people, because they've not done this business before they come onto a platform, we spend a lot in terms of how do we train these guys. So if you come onto our platform on day one, you will see a lot of content telling you what should you do on day one, day two, day three. Even if you don't do well very after that, when we put you in a mentorship program, where we connect you with some top trainers for a month and these guys will tell you how to start a business. So these people have never done it. These are all the entrepreneurs in your system too, as well. Yes, these are our top 5% of the users who want to do this because they get recognition. So it's like you started your own startup ecosystem within Misho, that's great. Exactly, so these people are helping each other out. I'll give you an example. So we have a Reddit-type community in our app, which is called Misho Community. And people come and say, hey, I'm a new user and I'm based out of this place in India and I don't know what to do to get started with this, but I really want to do this. And then you see hundreds of other users coming forward and telling them what should you do on day one. How should you get your first set of 50 customers? How should you curate and bring that value out so people start getting interested? But people start doing this, the community helps each other out. I love the stories in which you've changed, you obviously changed some people's lives. What is the best story for you? Who is the best user in terms of whether they're just doing a lot of, they've increased their income a lot or you've just changed their lives so much? So it's just never been. I'll give you some understanding about how these women are, right? So a lot of our users are women, a lot of them are housewives, like 70% of our users are housewives. A lot of these women have been looking to start a business not just to make money, right? But to also get some sort of professional identity, right? No one, it's very common in India, these women feel that no one gives them any respect. Like my husband doesn't feel that I'm adding enough, my family doesn't feel that I'm important enough. But now, when I'm known as a business woman in a community, people start recognizing me. I have a professional identity, I can also go out and say, I run my business, this is what I did last year. So that feeling is very, very important empowering, right? So most, like our most impactful stories are not just about how much money this person makes. It's a lot about what were they doing before. So we have widows who are not able to sustain, like their family, feed their kids, et cetera. There are women who are like handicapped, right? So these are educated women, but handicapped so no one ever gave them jobs. So all kinds of stories are there, right? And this is the impact which tells us, hey, people are finding value. In terms of income, our typical average user makes about 150 to $200 per month as income. My top 5, 10% does about 400, $500, right? But I don't think that number matters to us so much. It's about where were you before and how your life has changed. Most of these people are anyways, not doing this as the primary income for the family. Most of this is secondary income for the family, which is if it is 15, 20, 30% of your primary income, it's significant, right? It's getting like a raise one year earlier for the family. Yeah. Right, but a lot about how you empower me, what identity do you give me, people start giving me more respect is like much, much more important. Got it. That's very inspiring. So in terms of what's driven growth so far, obviously there's a timing piece, there's you're enabling e-commerce, you're enabling entrepreneurs to start their businesses. Is there anything else specific to what you're doing internally to help you drive this growth? So I think we keep solving some very hard problem every six months. When we started off, we were just enabling existing guys who were doing this because we saw this behavior. A lot of people in Gujarat and Karnataka were running these WhatsApp stores even before us because they had gone out, met suppliers, figured out how to do courier. They figured out how to use tools on WhatsApp, et cetera. But there were few. So in like six, seven months, we onboarded a lot of them. And then we did not know what to do. And then we changed our product completely because we had to create users. Like we have to create our resellers, none of them are doing themselves. So we changed that and suddenly so many people, like every tier two, tier three women out there became our target customer. And then the second thing that we did was how can, and which is still the North Star of the company, how do we grow income per reseller every month? Which meant growing number of categories. So we started with only ethnic fashion. Before time, we just now do everything. Now we have even set up a supply chain from China. So you can not just access supply, which exists in India, but even cross-border, right? So now you can offer better variety. You can sell even more unique things. You make more money. Then we said, hey, can we like enable, not just housewives, but other people? Then we started going out. We onboarded students. We onboarded retired folks who are trying to make pensions. We have a lot of men who are unemployed, who do not have jobs. And they are running these shops to sell these products. So it's now practically everyone. You're basically going to eventually employ all of India. Yeah, we want to. Cool. So as the trap that some startups get into, a lot of startups get into when they grow too fast is a quality issue. And I heard you say something very interesting, I don't know where, but in another interview, and you said you don't really wanna scale customer support because it's unsustainable. So I'm really curious how you balance growth and quality as you continue to grow really fast. Correct. So it's always been a cycle, right? So you grow very fast, and then you realize you've carried so much debt around, a lot of ops, a lot of manual things, and then you start focusing on how do you improve quality. And I think we see that cycle almost every six months, but both are important, right? This last year was crazy growth for us. Like we started with a number and the number we ended with, most people can't imagine how that has happened. But during that path, if we started optimizing for quality, we would have broken down as a system. And as soon as that year ended, like last two months post Diwali is generally a lean season here. We just spent all our time in fixing whatever debt we had carried. So you have to do both because if you keep, for example, if you keep scaling customer support, if you need customer support, that means there's something wrong with the product, right? So you have to go back to the drawing board and understand why are people calling me, right? And then you start optimizing for, hey, my product is broken in these places and I have to solve them out. So not just in terms of cost operations about what overhead you have, but just giving a great experience. You need to solve for these things. And at this stage, we focus on it. We have a dedicated team within the company focusing on this, but in the early stages, we had to compromise. Sometimes we just focus on growth, sometimes on just quality. Got it. Yeah, that's great. It's just taking a step back and looking at how there's a certain point, there's a certain bar in which if you dip below it, then you kind of have to pause and then go fix this stuff. Exactly. And then just keep going to the next level. That's great. All right, so you probably get this question a lot, but I'm gonna ask it anyway. What if Facebook does this? Or what if Amazon? Why wouldn't just Amazon or Flipkart or anyone just win this space? Yeah, about Facebook, I just think this is one of the so many things that are gonna happen on Facebook ecosystem because people are spending so much time there. If Facebook starts doing everything, I'm sure they'll not do what they're doing right now, right? If you look at, for example, China, like Tencent invests in so many use cases that are happening on WeChat because they can't do everything themselves. It's impossible. And it's not in their DNA as well, right? So you build a platform which does something. You do not want to go out and onboard 2 lakh. suppliers and make sure their quality is right, but that's not your business. That doesn't seem like in their day. And you can't do this every day. You start a new business because you want to capture all use cases. The way to do it is partnering with us, and we do work with them very closely. We share what our users are telling us, what can improve, how can this platform become better in terms of enabling commerce for these people in smaller cities. We do that. But I don't think it's viable, even if they start doing, it'll have to stop at some time, because this is one of the few things that are going to happen on WhatsApp. It's not the only thing that's going to happen. Yeah. In fact, makes their product more sticky. Correct. And people are doing this. And they recognize it. Like, we are creating new merchants for them. And these people are going to come back. You're making them bigger. Yeah. Stickier, yes. Cool. So I want to take a step back and go all the way back to your college years, in which I'm guessing you were starting to think about, I want to do a startup. So you and your co-founder met in college, you were classmates. Tell me a little bit about, when do you guys know you want to start a startup together? And what were your initial ideas? Yeah. So in college, practically, we did not think about doing a startup. And in college, we were set, hey, we're going to go out, get a job somewhere, chill out, have fun, whatever. But we used to work on a lot of projects together. I still remember, we worked on our college project that we do in the last year. We worked on certain things that we went out for competition. We worked together. So we knew each other very well. But that time, we're not thinking about doing startups. And it's not just us, this is 2008 to 2012. Starting startups was not a cool thing to do. That started after Flipkart became bigger about 2014-15. And after that, IIT is like, hey, everyone wants to do a startup. So it's pretty cool phase. But what happened back in 2015, like three years out of college, I was working with Inmobi and Sanjeev was working with Sony in Japan. And yeah, so he was working there. And one day, he randomly calls me and saying, hey, I'm looking to join a company in Bombay because I want to come back to India. And can you rest check that company for me? And I said, why do you want to work with them? It was a startup. If you want to work in a startup, let's do something ourselves first. If it doesn't work, then you go there. And just on that call, with no idea, nothing in mind, we agreed that, hey, we will do a startup. And from next day, we started focusing on what problems can we focus on. We created a Google spreadsheet, listing all the ideas we had, talking to people around us. But that's how it was. It's all unpredictable, uncertain, no plan around it. At that time, I was planning to do an MBA, like everything changed, right? That MBA is no longer needed. You got your MBA. Yeah, it's because I just felt like a very good friend of mine. I know I can work with Sanjeev for 100 years of my life, right? And when he's saying that he wants to work in a startup, like there was no better opportunity for me. Yeah. In some sense, the best teams are, they knew they wanted to work together, regardless of the idea. And then they just came up with the idea along the way. Correct. All right. So you guys decided to start working together. I know, I think the first idea you had was fashion year, is that true? Yeah. The first one you actually started working on. So tell me a little bit about that. How do you come up with the idea? How did you figure out like it didn't work? And then the pivot into what is, I guess, the first version of Misha that is today? Sure. So back in 2015, like doing O2O, the hyperlocal was very popular in India. Like everyone thought that, hey, almost everything will be sold on demand hyperlocally. And we thought everyone is working on problems, but no one is looking at fashion. So we said, let's build hyperlocal for fashion and we built Fashion Year. Think of it very similar to what Swiggy is for food, but just for fashion. We did that for four, five months. We learned a hard lesson. It doesn't work because in fashion fulfillment is like the third thing that is most important. The first thing is selection, which you can never have around you. But that was like the lesson that we learned. But the good thing was, right, it became a starting point. So when we built out that marketplace, we used to go to these small shops in Bangalore and we used to onboard them as suppliers. And these small shops are everywhere, like in Kormangala, where we are right now, in HSR, everywhere. And my pitch used to be that, hey, I'm going to take you online. And these guys will say, we are already online. What do you mean by that? I sell on WhatsApp. And then you understand like one level deeper, what does that mean? They're saying, I have created a WhatsApp group of all my existing customers who have ever bought from me. And every time new stock comes into my store, I take photographs of all of them and post in that group saying, hey, these are the few products left. If you want to order, you order right now. Got it. So it was like leftover. Yeah. So these guys are re-engaging with their customers on WhatsApp. And this guy was saying that I sell 30-40% of my total business every month on WhatsApp now. And my brother who's in Whitefield does much more than that. We thought that was super exciting. And then we met a lot of other small shops and we saw the same behavior. And the good thing was, no one in India knew about it. So we thought, hey, this could be the idea we should work on. And we had learned a hard lesson with what we were doing before. We learned, at that time, we were speaking to VC, they recommended hyperlocal school, you will get funded, etc. This time we realized we have to do something that we believe in ourselves. And when we had spoken to these 50-100 such suppliers offline, we were very confident that this is going to be the next big market, a lot of these SMEs are going to use WhatsApp. So we just built a tool. Think of it as mobile only. India localized version of Shopify, tailor made for doing commerce on WhatsApp, Facebook. And we built it out and we started going to all these small shops and saying, I know you sell on WhatsApp, use this tool. And I know you sell on WhatsApp, used to go to exhibition, etc. And that product started to grow very well. And with the same product, we went to YC, we raised some round, angel round. But six months, nine months down the line, everything changed. It was a tool which was free. So you're not making any money. It was growing. Retention used to be lower than what we expected. And when we used to speak to our users, we realized that about more than half of our total users were not the same segment that we intended this product to be for. It was not that offline shop, a lot of them were housewives who are running their boutiques on WhatsApp. So everyone's saying, I run my boutique on WhatsApp. It's called XYZ boutique, like with its boutique, like Adora's boutique. And they will create a logo and they're selling there. And then we understood what they were doing. Like most of these women were based out of Gujarat, which is like the big manufacturing sector in India. So it's easy to access supply in that state. So most of them were women based out of Gujarat who were going out, getting phone numbers of these suppliers, adding them on WhatsApp, getting products from them, curating and selling it to their customers. And when they get order, they collect money, give to the supplier, who will directly ship it to their customer. And they're running boutiques on WhatsApp. And we were so inspired when we met these women. If everyone in India could start a shop like this, it will be very powerful. So in some ways, it's cool that you thought people were going to use it in one way, but actually there are another set of customers that are using in another way. And that's what actually started growing. And it happened by itself, like by, I don't know, by luck, by chance, but people just came and they started using that tool to do something they never expected. What was the point in which you thought, this is it? Like, was there like a certain metric you were tracking, it was just growing really fast or there was a story where like, oh, man, this is going to be huge. So right after we discovered this, because our existing product was also working. So we created two teams within the company. So Misho was what we were doing earlier. And we created another product called Misho Supply. And we, I separated a team internally. So there is to be one room for Misho and one room for Misho Supply. And these guys were building out the tool so that everyone could do what these women were doing. That was Misho Supply. And we did this on WhatsApp. So we did not build an app this time, like Sanjeev wouldn't have let me start another website. He had already put two different apps and they were not going to be a big business anyway. So we started doing this on WhatsApp. We used to connect with these women, send them products based on whatever data we have. We created a supply marketplace on the back side, had an office in Gujarat, same chicken and egg problem. I don't know what all we did at that point in time, figuring out how do we get some supply to sell. But just on WhatsApp with no app, no website, in six months, we were doubling every month, every month. And this was still going at the same space. Retention was lower than what we expected. We thought that I could not do two businesses. I have to choose between them. And I can see this business is exploding on WhatsApp. If I build out an app, what will happen? So we just shut it down. And we renamed Misho Supply to Misho. And that became the only focus we will work on. How hard was that? Because most people have a really hard time trying to let go of this one thing that's actually not doing bad. It's actually doing fine. So it was very, very hard, but it was not as hard because I had Sanjeev. I have seen so many friends around me who were just not able to pivot because it was a hard conversation with their co-founder. And the co-founder starts not believing you because the belief that me and Sanjeev have is not because of what we are doing right now, it's because we know each other for more than 10 years. This did not matter. Right. So I said, we both understood what's happening. We said, let's take a call. And then we convinced all the team members over time, they also came on board. Actually, everyone pushed back and said, hey, you keep changing what we are doing every six months. Right. Even though that was course correction, like now if you see it back, but it was important. Just because you have a co-founder you trust blindly, it was easier. But I'm very sure if I was starting this company with anyone else, I would not have been able to do these two pivots and most likely would have been done back then. How did you announce it to... The hardest piece is probably making the decision itself. And then the other hard part is telling the whole company, hey, listen, the thing you signed up for, we're actually going to do this other thing. How did you manage that whole process? So first, because I was very clear, we did this for six months. It's not a small period. We did both for six months. After six months, I could see, hey, I know we have worked on this for the last five and a half years. Right. There is sweat that has gone into this. But this is working. Right. So you have to be logical about this. If it keeps brewing, you will make money. And the other thing that happened at that time, we were struggling to raise money. We were one of the few companies after YC who did not raise a lot of money on demo day. Right. So we're struggling to make money. Here we were making money by charging our suppliers. Here we were not. So it was very clear what we have to do. Right. By pure need. Yeah. Pure need. You have to do this. So everything was pointing to one direction. So then we knew that we have to do this. The next thing was, how do you get the consensus in the team that, hey, whatever you worked on for the last one and a half years is not going to be the core business anymore. And then when we just sat around with our team, I think they understood over time. It took, it took weeks. We used to come back and discuss the same thing again. And everyone will put forward, hey, let's give more time. Let's keep investing there. And I was saying, you need to focus on one thing. That's about belief. You can't, you can't do 100 businesses, even if you want to. Right. And over time, people came, like, came about this and everyone agreed on the same thing. And then we started focusing on it. And even then, we continue to grow very fast. Like, in just three months after we made the shift of shutting this down and just doing this, because it was growing so fast, everyone was very clear, hey, we made the right decision. Yeah, that's great. So when, when startups start becoming really big companies, the CEO's role changes a lot. And many times they get further away, the distance away from the actual user and what they actually want. So I know you do, you've told me some in private conversations, some really great things that you actually do to keep in touch with the users. So love you to share what you can about what you do there to make sure you're in touch. So our business is a unique business, right? So most people build products for themselves, that they use themselves, right? Because they felt the need themselves. In our case, we are building for a different segment, like I am not a woman, and I'm not a housewife, right? And we've always recognized this as one of the core problems since day one, you have to build for an audience, which I'm not them myself, then have to stay close to them. There's one line I tell most people, the best thing to do is build a product that solves your own problem. The second best thing to do is build a product that solves problem for someone who can't solve their own problem, right? And we realize I'm solving problems for someone else, but have to be very close to them. So since day one, every user that we used to onboard used to come to our app, I used to add them to on WhatsApp, and I say, I'm going to do customer support for you. Any problem you tell me, every time we're thinking of launching a new feature, I will check with everyone, what do they feel about it, just keep talking to them. And over time, I build relations with a lot of those folks, even now, like a good number of 100 to 50, like 100 to 100 people who are our top users are added on my WhatsApp. And if something gets delayed, they're still paying me. But because of that, I get to know what's happening on ground. You know, right away also, when stuff is wrong. It's very, very important. It's like a check and balance on the whole company, you release one bad feature, because you're not using it right now, you will not get to know about it. But my user will come forward and tell me, hey, this is broken. So that is very important. And I think as a whole company, it's not just me, as a whole company, we have built a culture, which is very, very user focused, right? Because the day you start taking assumptions, start thinking on behalf of users and say this is how it should be, you start doing mistakes. So all my management goes and sits in the call center every month for half a day and just listen to user calls, just understanding what they're facing today. And everyone comes out with something new that they never thought about. We do something. And I think one of the very few companies out there, as we do town halls for our existing employees in the company, we go out and tell them what's working well, what's not working well, what numbers did we achieve, what are we planning to do going forward, what new things we launched, right? We realized that our users who are these store owners on these social platforms are also the same part of the company as our employees. So then I started doing what we call is We Hear You every month, where I create a video and I talk about what kind of things we did last month, what kind of things we are planning to do, and what are the things that are not working well, and we work on them. It's like a town hall for our users. And it has got amazing response, like every user comes back and responds there. And with like very big answers, what needs to change, what is not changing, most people love it. Most people look forward to it, because it's like I get to know from the company, hey, what's happening? Everyone, like most of our users feel part of the company. We also do like few other things, like one of them is most of the celebration that happens in our office, we generally call most of our users in Bangalore to come and participate with us. So we are having a party after maybe a funding round, we call our users who also like have fun with us. So we get to talk to them, do like whatever they want to. Just staying with them, all of this is just to stay close to them, because if you're close to them, they'll keep telling you what are they feeling about, and then you'll not make those mistakes that most people end up doing. The first thing you talk about, staying in touch with your first 100 or so users, I actually tell a lot of founders, do what Vedit did, because that will keep you in the loop at all times. So we hear you. In hindsight, that is genius. And everyone should do that. If I ever start a startup, I'm going to be stealing that one. I'm sure. I think it's like one of the best things we have done in the last one year. And it just works amazingly well. We get to know so much feedback every month. Every person in the company knows what our users are feeling, it's just amazing. And I think everyone should do it. So in terms of your role, tell me a little bit how it has evolved over time. Obviously when you had no users, you were like on the ground being super scrappy and just like building stuff and talking to users yourself. How has that evolved over time to what you are today, which is a company of hundreds and hundreds of employees. How many employees do you have? Now we have 700. 700 employees. Yeah. So what is the difference now? So I would say until we got to product market fit, right, my whole job was just to figure out what the business model will be in the long term. So I was doing everything on the demand side. Like I got my co-founder and another very like a good friend and early member of the team who was looking at a lot on the supply side. But I was like, I have to figure out what the business model will be. doing these pivots, talking to users, just keep talking to them what's working what's not working. I did everything on the growth side, on the product side. We hired our first product manager after we did our series A and we hired a second product manager after we did our series B. So I was just doing all of that work because I knew it's my responsibility to figure this out and after we had very clear signs that hey this is scalable, this we have reached product market fit my job changed suddenly, I have to get the team so that we can manage this growth right after this. So after this my role has been just on hiring, like hiring people who believe in our culture, who believe in our values, who believe in the mission that we have. Like solving for people who are like the kind of users we have and hiring them and just making sure that if we change our direction which I don't think is right, making sure the course like doing course correction at times, making sure the direction of the company is right, motivation, motivating people at all times. So this is my work now. Do you ever miss the old days? I do, I do, like many times. I just go back, I still spend a lot of time with the product team, not so much others because I like it, like I like understanding what do people want more. So it's like once you get a habit of doing this, it's very very hard to come out of it but you know business needs it. I need to hire people so that we can sustain this. As you've grown over time through your role, what are the resources here in India that you've leveraged or elsewhere to help you do well? So I think as a CEO and as a founder, the best way to learn is always talking to other founders and I have seen every problem that I have is never the first problem. So I have built a network through our investors, through our board members who have other portfolio companies. Fortunately I have built a good connect with a lot of like founders who have built great companies such as Swiggy, Olab, others right and going to them, talking to them, hey this is what I'm facing, did you face the same thing and they would always say yes and then you understand how did they solve for it and I think this is the best way to learn, like everything else. I read a lot of books like everything that is out there related to startups, founders but all of that is not in context of what you're doing. A lot of those books are written outside India but when you go and meet these founders, you understand what's happening. Like even just within our YC circle, I spend, like we, me and Archit who's the founder at Cleotax, we take a stroll every Friday morning and we discuss what are we doing, that's all and what is working, what is not working and he will tell you what is working for him and I will go and try it out in my company and vice versa and it works fabulously well. So I think the only way you can learn as founder is speaking to other founders. Yeah, having a strong peer network is so important. Speaking of which, what's a big mistake you've made that you, now that you have, you're talking to lots of founders listening to this podcast that you hope they never ever make and yeah, what did you learn from it? I think we made the first mistake right after we decided we want to start up. So at that time, we just kept listening to VCs. On day one, we went to VC and asked them what do you want to do, right? The second thing once we started, we went to VCs looking for funding and they said if you do this and you get to this metric, then we'll fund you and we spent the next three months just getting to that milestone and then we went back to them and was like okay now, now you do this and you get to this, then we will fund you. Never ending. Yeah and then we wasted four months of our time but it was such a big lesson. After that, I've never gone to them understood what should I do because I know they don't know, right? So it's the biggest mistake most first-time founders do, right? They think, hey, they are gonna fund us. Like if you just listen to them, things are gonna work out. But it's never the case. You have to believe in what you're doing. You have to believe in the idea. You have to believe in the product. You don't have to make someone believe in something. You just do it for them. Yeah, makes sense. VCs, no matter how smart they are, they're never going to be the expert in what you're doing. That's for sure. So what is the best decision you made in the early days of Misha when looking back was super critical to your current success? I think my best decision ever was to start this company with Sanjeev. Almost like a lot of other mistakes that I've done have not been such big mistakes because I started with him. He just gave us time and we could go through that whole process of changing whatever we have changed in the business, right? Hiring people who are like us. Hiring people in our own network. Going through those highs and lows that we were never prepared for when we are doing our jobs. So I think the single best decision I've made is starting it with him. That's good. And what's one strong opinion you had about running a startup that has completely changed or reversed since you started? Aside from the VC thing. Yeah, so it's coming back to the same thing, right? So everyone that I used to go to, like a good chunk of my friends were doing startups at the time you were thinking of doing a startup. And most of them used to say, hey, if you don't solve your own problem, it's very hard, right? So on day one, when we were thinking about the model, we thought, hey, we'll build fashion for us. I don't like to go to a mall, but I still want to try it. But I start thinking about my own problem. And in all times, you may not have problems that you want to solve right now. You may not recognize them. It doesn't mean that you can't solve others. But because so many people told me, I thought I can't build a product for someone else. It has to be my own. But when we went through this whole discovery process, I think that I don't hold that opinion anymore. You can build for others. It's hard, definitely much, much harder than building a product for yourself. But in many cases, especially, I think for the next 10 years, most products that we built in India will be built for tier two, tier three audiences, right? And most of these people who will be building startups will come from metros, will come from IITs. And they will not be themselves. But you still have to solve for them. Yep. Yeah. I think it's also important if your user is not yourself, is that you care deeply about the users. Yes. And it's clear from how you talk that you do care. All right, so switching topics a little bit. I want to talk a little bit about the Indian startup ecosystem because it's been growing pretty rapidly recently. And it seems like things are starting to click, which is great. So maybe first question about that is how has the ecosystem evolved since you've started? Like what have you seen and what works and what doesn't? I think one very positive thing has happened in the ecosystem is when we started, everyone was like, tell me what are you a copy of either in US or in China? Right? And because of that, we struggled a lot in our early days, because we could not figure out a parallel for this in either or US or China. And people say, hey, all big Indian businesses so far in tech have been a copy of one of the other. You can localize it, but they are still inspired by something. But what has happened, right, over the last three years, and a lot of that has changed because again, of Reliance Jio, and with UPI, which is the new payment system in India, people are able to transact online, and people are online. So now you're building products for like the tier two, tier three, tier four, they don't behave in the same way as Western users do. So you can't get the same Western inspired product into India and make it work for them. Yep, right. So now a lot of new companies are coming up who are taking a very new approach, like first time building out for these users, understanding bottom up what their problems are, not thinking top down, this is how it should be, because this exists in the US. Yeah, yeah, makes sense. So I think this is a very big positive development for India. Aside from what you're working on, are there other big problems in India that you think founders could focus on or should focus on? Yeah, and most of this would be for the same audience, right? So all of these users, tier two, tier three, tier four users have come online in the last three years. And we have started to solve commerce for them, which is obviously the most basic need. But then people will start focusing on, can we solve housing for them, education for them, healthcare for them. I've seen the journey just started. Over the next 10 years, people will figure out everything for these guys. Because these people right now use only WhatsApp, Facebook, maybe a couple more apps, maybe Meesho and that's all. Yeah, yeah. Right. So how do you solve for where do they spend more time? How can you build and train from entertainment for them? Everything else. So I'm sure there are hundreds of possible ideas that will come for, but it will come from the same audience and people who are close to them will be able to figure out the right answers. Makes sense. Do you think it's possible? It's great that, you know, people in India are building stuff for themselves now. Makes total sense. Do you think it's possible for foreigners to come into India and start a startup here? Would you suggest it at all? I think it's definitely possible. But it's difficult. And now especially for sure, like 10 years ago, you could have just done like got Uber here or maybe something else here and that would have worked. But now if you have to go and understand nuances of someone that you don't culturally relate to, it's harder. Yep. Right. So I'm sure people can do it. And the great thing is, especially for Western audience, unlike China, people mostly build product in English. Right. And since people speak English outside, they can come and build for the same audience. But understanding how do people use it, a lot of that has to be learned out. So someone who can do it maybe can build it out. So it's harder, but not impossible. What is your best piece of advice for aspiring Indian founders? My best piece of advice for aspiring Indian founders will be just go out and stay very close to users. The only thing that has worked for us, and I think will work for a lot of people when they build out for this audience, is being super user focused. Do not listen to anyone except what your user says. Stay close to them always. Do not assume things for them. Challenge everything that exists as a default right now as what status quo is. Is the UX the same? Do you build it out in English or do you build it out in vernacular languages? Or you, maybe the journey, user journey will be very different. Maybe you have to let go of saying, hey, I will not have a call center. Maybe these guys need to speak to someone to get the problem solved. Like you have to challenge all notions that are good and bad out there. Because a lot of these users think in very different ways. We have seen if you speak to a user on phone, suddenly the trust level goes up. Because they think they're speaking to a person, not a company. And they trust a person more than a company. I'm saying you will have to challenge a lot of ways of how startups are built, of how products are built. But if you stay very close to users, if you're super user focused, people will figure out answers. And there need to be a lot of problems solved for these audiences. That makes a lot of sense. All right, so I want to finish off with a lightning round, which is like five quick questions. So one, after Misho, what is the most exciting startup in India? It's hard. I would say ShareChat, right? It's ShareChat because they're one of the few other companies who have built a product for India, right? Building out for the tier 2, tier 3. Like a lot of people are coming and spending all their time on ShareChat. Yeah, for the audience, what is what is ShareChat? So ShareChat is a vernacular social network in India, built for smaller towns and cities. And it's where people come and go through content in their own language, written by people around them. There's so many languages in India. Do you know how many? Yeah, there are a lot. Too many. Yeah, so it is said that a dialect at least changes every two kilometers in India, right? So it's insane. Yep, cool. So you went to IIT Delhi. So one, why is Delhi the best IIT? I think being in the capital obvious helps. And if you see most of Unicorn founders in India are from IIT Delhi, you look at Flipkart, Zomato and a lot more, right? It's always been and I'm proud of it. If you ask me why did I start this company, I was super inspired by what Flipkart founders did. Right? And I said if they can do it, we can do it as well. Yeah. And that's what inspires and a lot of IIT Delhi founders go out and start companies. So I'm sure people took this because people were close to Apple. That is definitely there. Sort of becoming like a Stanford equivalent. Yeah, for sure. What's the best IIT after Delhi? I don't think there's any. But if I have to pick a name, because a lot of my friends, very close friends come from IIT Kharagpur, I would say. Okay, fair. What's a must-read book everyone should read and why? There's a book that I read every year and again and again. It's the hard thing about hard things, right? Because I just feel for a founder. Ben Horowitz. Yeah. Because you go back and a lot of situations you face, it's just written in that book. And it's written, it's not saying, hey, this is good and this is bad, but it's a very neutral perspective. This happens and sometimes you have to take calls, right? A lot of things I've done enabling me to take the right decisions. I saw many times this framework that exists in that book. So I've read it, I think, four times in the last four years. I just go back and revise everything. Yeah, that's my favorite. When people ask me what books I read related to startups, that and Founders at Work by Jessica Livingston are the only two books. And I remember reading it during a rough patch, during my startup. And I was like, thank you. I'm not the only one. All right, what's a startup idea you'd be working on if Misha didn't happen? I don't know. But as I said, if I do a startup today, I will do it for the tier 2 and tier 3 audience. I will not build it for the metro audience. Makes sense. All right, last question. In a hundred years from now, what do you hope Misha is? I think a hundred years is a long time. Like business change, tech will change. I don't know if it'll be mobile, it'll be something else, right? So a hundred years is a very, very long time for technology. But as an organization, I think one thing that should stay until then has to be that, hey, we should stay user focused. And I think if that framework is there, if the team continues to believe in that even a hundred years from now, I think we will stay for a hundred years and we'll build products which will be very scalable, which will impact lives in ways that most people can't imagine. But I think it'll be a company which will still be user focused. Could be doing something else with new technologies. I don't know. That makes sense. That's a great answer. Cool. Thank you so much. Awesome. Thank you so much for having me. Yes, cool."
  },
  {
    "name_video": "On starting and scaling construction startup PlanGrid",
    "description_video": "Tracy Young, CEO & co-founder of PlanGrid (YC W12), talks about her journey as a founder and lessons she's learned from scaling PlanGrid to 400+ people.",
    "related_categories": [
      "Founder Stories",
      "Women Founders"
    ],
    "page_url": "/library/6L-on-starting-and-scaling-construction-startup-plangrid",
    "youtube_url": "https://youtube.com/watch?v=QzUQiIMtHSE",
    "mp3_file": "downloaded/On_starting_and_scaling_construction_startup_PlanGrid.mp3",
    "mp3_content": "All right Tracy Young welcome to the podcast. I feel so much the spaces that we love and I wanted to be a part of that building process. And so your first job out of school was a construction engineer? Yeah I was a construction engineer. I had muddy boots, hard hats, safety vests and one of the first things you're tasked with as a rookie construction engineer on a project is QAQC of the job site. Very much like. Quality control. Quality control. And you basically take the specifications and the blueprints and you go out on site and then you check it. And so that's where PlanGrid's idea came from. Two of us were construction engineers the founders of PlanGrid and three of us were incredibly talented software developers. Okay. And how did you actually end up picking this idea? Because I've heard several interviews with you and you talked about like batting around ideas with your co-founder for years before. Yeah so my co-founder Ryan Sutton G I mean he just has so many ideas. He knows so much about the world and he's just like entrepreneur mindset. Can you share any of the other ideas that had come up? I know it's so funny. We were trying to think of all the weird ideas he had come up with. I mean certainly he had pitched wanting to start a construction company for several years as we were going through construction engineering program. The one that comes to mind is Cat Roulette. Like we would adopt all these cats put cameras on it and then you would you know if you wanted to just see a live webcam of cats you would just like tip them and you could feed them and you could play with them. Sign me up. Yeah. So we didn't end up building that. Okay and so what was like because you know tons of these people right? They're always like pitching startup ideas to their friends. Obviously this one has like more like you know product founder fit. But why what was I know the iPad was coming out right around the time you guys were starting but what convinced you like okay this is the thing that I'm gonna commit to building? We just started off as a fun project. PlanGrid at least for me I had no idea that we could build a business out of it and certainly not one that you know would have a 900 million dollar outcome. It was just a fun project and we started building it. I think when we realized it would become it was actually it could be a business was when we sold our first million dollars. It was like whoa we did this without a sales team. How long did it take to do that? I want to say two years. So how did you can you talk a little bit about how did you know you know that the co-founding team was the right team that you wanted to build something with longer? We were all friends. We liked hanging out with each other. We'd built you know some of us had worked together. Two of us were dating now married with a kid. Three of us had gone to college together and so we had done projects together. We'd just known each other for a while. But the story of adding your boyfriend at the time is kind of funny right? Because like you were my understanding is that you were kind of like shopping around for a technical co-founder. Oh we went through so that you know the idea of like digitizing workflows for the construction industry is it's a super simple concept right? Take the blueprints, take the specifications, throw them in the cloud and make them available on mobile devices which wasn't possible in 2011. So Ryan had pitched me this idea and we actually just opened up some blueprints on the first generation iPad on like whatever it was Acrobat Air at the time. And this box comes up and it says out of memory because blueprints are incredibly you know they're high resolutions. They're 10,000 pixels by 10,000 pixels and the first generation iPad couldn't handle it. And there's this moment where Ryan's just like gasping and he's like we should build this. It was like this is actually a really good idea. It would be super helpful. And we would go through this period of what Ryan calls the saddest story in Silicon Valley which is we have an idea and we have no technical co-founders to build it. Now YC knows this problem well. The saddest story of Silicon Valley. And so we would go to our friends who were you know computer scientists, programmers and we would pitch them this idea and they would all say this is a good idea. Our co-founder Antoine who was a high-frequency trading engineer in Chicago at the time. He said this is a fantastic idea. You guys should learn how to program. And we didn't. And so I ended up telling Ralph one afternoon. Actually we were having dinner and it's at this point of our relationship where it's going steady and we're sharing Google calendars. And he sees this event, this recurring event on Thursday night with Ryan that says peanuts. He's like why are you meeting with Ryan every Thursday night for a few hours? Subject peanuts. And it's like it's funny you should ask. There's this idea that we have and he is so offended. He's like do you even know what I do? I'm a full stack engineer and Ralph is very confident. He's actually quite talented. It's like I'm the best engineer I know. I write iOS and Android apps on the side. I'm a rendering engineer at Pixar Animation and he's like why have you not told me about this before? It's really funny. So he sold himself to you. He did. Was your mentality to just go around and make projects and see what happens or had you been set on being an entrepreneur or did you just fall into it? How did that happen? No I actually still see my, whatever it is, seven, eight years at PlanGrid and as PlanGrid CEO I still see myself as an engineer, as a builder. It's just something I like doing. Yeah because you mentioned it earlier but the product started selling itself, right? Yes, I mean we worked at it, right? We actually had to tell the story, had to show it off. But yes, we had early organic adoption and we're very thankful for that. Because there were a bunch of questions that we saw on Twitter about that exactly. How did you get into, I mean, so in the construction industry, especially in 2010, not necessarily digital native people. Probably don't have iPads, right, on the construction site. How did you make your first money? Well our first 20 users were people we had worked on construction projects with and then people we had gone to university with and we would just ask them to try out our software and give us feedback. And then at some point they would start using the word love. We'd call them every week, I'd say, hey it's Tracy, just checking in. How's the new update going? Did you load it? And of course I could tell if they did or not. Hey go download the new update. Try out this new feature. And they would give us feedback over the months and this was during YC. And at some point people would start using the word like no, this is great, I love it. And it's like, okay, great. And that's like note to solve. It's like, all right, someone's gonna pay for this. Very soon that beta tag is coming off. And what did the product actually look like at that point? Because we have so many people that come on the podcast and oftentimes they're like you. Like they have maybe a successful outcome or at least a product that you know. What was it? Gosh, it was so simple. For us what worked out is, you have to understand people, we so fully understood our users. Superintendents, foremans, electricians, carpenters. They have real work to do. And every minute on the job site is money and every minute counts. And so every minute they're trying to find information means they're not doing their real work, which is building. On top of that, this is a class of users who have just never used software to do their jobs before. So how do you design and build software for people who don't even know how to use a computer? And simplicity was revolutionary for us. We kept it super simple. We made sure that if we could build this feature in two buttons, let's make sure we don't do it in five. Or if we see people tapping in to our app and it's confusing to them, that was a moment we would change things. Because it was all about how fast can they access their information. And for an industry that doesn't historically use software, there is a certain amount of education that we have to do. It's not like, I don't know, the head of HR at some Fortune 500 company, just switching out their HR payroll system where they know what they want and it's just take this thing and then replace it. For us, we had to even convince them like, hey, these are mobile devices, you should invest in this. Not just for our software, but for everything else to run your project and run your business. And so not only do we have to educate them on the devices, especially in 2012, 2013, we had to educate them on everything else that goes with it. And so I think YC has this motto of do unscalable things for your customers. And we certainly probably still do that today. So let's walk through it actually step by step. So give me an example of an early customer that you didn't know that you basically had a cold call or maybe you got an intro, but you had to start from zero. We would meet them, anyone who saw PlanGrid and was building off of paper understood the problem that we were trying to solve. And it's like, yeah, that's nice, but I don't have mobile devices. And so really trying to find the friction point of why are they not adopting the software, especially when you've built something that they actually want. And so for us, we had to remove the friction and the barrier of them not having the hardware to support the software. So we, in 2012, we were giving out iPads away for free. Well, we actually, no, that's not true. We were loaning it out to them. And then eventually we would just basically charge them enough money to cover the hardware costs. And then did you sort of have to sit down with each one of them and walk them through? Yeah, going to the app store, typing in their passwords. Download it, set up their account, all that stuff. Exactly, because we knew that it wasn't gonna happen because there's so many non-literal fires to put out on a job site every single day that we knew that we just had to sit there with them and do the work with them until they got their project into PlanGrid and start collaborating on it. Yeah, because it's interesting because many of these other software products, like GitHub, go with this bottoms-up method. Did you ever entertain that idea? Or was it always like, we need to get this foreman or whatever, I don't know the hierarchy, but like a certain level of person and then go down from there? If I understand your question correctly, I think we did go bottoms-up. So we went directly into the field, which is normally not where software is sold because construction software has existed for 30-some years. Okay, I thought you were going up to people who are managing. Yeah, so construction software has existed for decades, but the hardware didn't exist to bring it out into the field where 98% of construction happens. And if you're writing software for the construction industry in the 1980s, you were writing it for people in the office, the enterprise buyers, CIOs, VP of operations, et cetera. And then they would deploy it, and maybe there's kind of low adoption in the field, especially if mobile devices didn't exist, because you'd have to go back to your office trailer and then log into a computer and use the software. We purposely, consciously designed PlanGrid in a way where it would be valuable to everyone in the construction industry. One, because we wanted to maximize the potential TAM. We wanted to make sure that it would be valuable for a project executive and a project engineer, as well as an electrician and a carpenter. But it wouldn't be like customized versions for these different profiles. It would be one product that would satisfy all the profiles, as well as one product that would be valuable for any type of construction projects, whether it's residential or commercial or a road or a bridge. But what you're describing is now like a giant enterprise product, right? So how do you go about product development in the early days? It was a simplicity. We asked ourselves, what is the one thing everyone needs to do, which is access the construction information. And the first thing we did, we just provide access on a mobile device, put in the cloud and make it available on an iPad. And then we would later release it on Android and Windows and et cetera. And so in terms of product development, were there any, so that's obviously a huge breakthrough, right? Like early days, you load this file on the iPad, it crashes. And so that's amazing. You get people with that. Were there any other product breakthroughs that led a lot of growth or a lot of sales for you guys later down the line? Yeah, I'll talk about some of my favorite features inside PlanGrid. Sometimes you wanna look at your equipment drawings, just different equipments in the room. And then you also wanna look at the electrical drawings just to make sure you have an outlet to plug the equipment into, right? Or maybe it's medical equipment, at which point it needs med gases and plumbing, et cetera. So what you're trying to do is look at the same room, but look at different slices of it, of information. And sometimes you just wanna overlay it. And so we, I don't know, ages ago, released a feature where you're able to just overlay sheets on top of each other and then see the diffs. Or it could be an old version and a new version if you guys are following. And you can see what changed from this version to the next and then just highlight in red. So that's one of my favorite features. Another feature we released is a full sheet search. Believe it or not, we are the only system out there for construction that allows you to search for any word on the sheets. And it'll bring up- Yeah. I wouldn't think of that. So you can imagine it's like, and there's always like a certain thing, like magnetic door hold openers. You know, sometimes you open up a door and then it slowly like closes, it's holding. They only occur on maybe like five sheets out of 5,000. And so either you have it memorized or you're searching through sheets all the time. So with PlanGrid, you can search for the word magnetic and then it'll pull up the five sheets you're looking for, which was not possible before. Certainly not when I was in the construction industry. Right, and so this would be useful for someone like doing inventory and like ordering? Just looking up information. Yeah, just figuring out how to build it, planning, ordering, yeah, exactly. Doing estimates, it's super useful. I mean, one of the early features we released was version control. That felt revolutionary. Well, that's like, my understanding, Ralph was working on that a little bit at Pixar, right? Because that's, as someone personally, who like does a bunch of video graphics. I don't remember which of my amazing founders built it, but yes, it's our technical team that built it. For PlanGrid engineering, it wasn't just about providing access, right? I think I like sold it short. It wasn't just about providing access of the information, it was how do we take technology that exists in the world and apply it to the construction industry and specifically on the construction record set? So, machine learning is a thing, we were doing it before it was cool. And we could search for unique words, like the first floor floor plan, which could change 50 times over the course of two years. And we could version control them because we could read them. So it's like A101, first floor floor plan. The next time someone uploads A101, first floor floor plan, we know that and we would say, hey, this already exists. Are you uploading a new version? We're gonna version control it for you. So you're not searching through, it was a sheet-based system, it wasn't a file-based system. Right, which becomes super important when you're printing out these layouts for people and then they take them into a building and then they're operating off of an old plan. Exactly, which is actually probably the cause of a lot of, I mean, there's been studies on this. It's like, it costs the US construction industry $20 billion of waste every year. Because they have to tear it down and rebuild? Yeah, yeah. Wow. That's wild. So thinking back to your time at YC, is there any specific advice you got from any of the partners or anything you learned during that time that's stuck with you today? Oh, you know, I feel like all of the speakers, including that came through dinner, one of their advices or their lessons was like not firing people fast enough. And it would not only, you know, not only did you have the wrong person in that role, but it would completely, their blast radius is too big. It's always someone of leadership. It would affect everyone around them, right? Because when someone's not working out, everyone else knows and then, you know, the CEO knows. It's tough advice to process at the time because you didn't have any employees. No. But yet. But it's certainly, we heard that so many times. I mean, I think like almost every single speaker talked about it, I'm assuming today as well. And so it would take us years before we were able to give the right feedback. Because when someone isn't working out as a leader, as a manager, you're also responsible for this. You put the wrong person in the role, and I say you as in like me. And then they remain in the wrong role because you're unable to help them grow or get better or give them feedback so that they even know they're doing the job wrong or not performing well enough for the company. And then they're also there because you're keeping them there. So it's just bad on all levels. And so my advice would be, yeah, right people, right people on the bus, wrong people off the bus as soon as possible. So how do you do that? I think one is like, it shouldn't be a surprise. I've certainly made this mistake many times and I like still to this day feel this like, it still hurts me at a deep level that I fired someone and it was a complete surprise to them. Like that's awful. So I would say the moment that we figure out someone isn't working out, time box it. It's like, oh, but there's always some excuse, right? But I just don't have time, they're like pretty good, they're performing, it's like net, net, is it positive or negative? If it's negative, they need to be out of there and time box it, we're gonna let them know this isn't working out. And you say some words like, this is the expectations for this role. You're not meeting the expectations. I think this is what you need to do to fix it. If you don't do this, I will have to ask you to leave in three months from now. And that is what you owe your team member. Right. So now, how many people is PlanGrid right now? PlanGrid is 450 people and growing. We are now part of Autodesk's construction solutions team and we are 1,200 people all together. So that includes PlanGrid. Oh, okay, and then the other products of Autodesk. And then, I don't know, 10,000 other people in the design manufacturing side. So related to firing people is hiring people. Now that you've hired 400 plus, well, not personally, but PlanGrid in general, what are the most important things you look for so you don't have to fire someone? So early on, when let's say we were sub 50 people, what we were looking for were people who had high pain tolerances and people who could be generalists because we had to, there's just too much work to do. And so how do you do all the work as five people? Well, those five people have to wear multiple hats and they had to not complain about it. There's work like taking out the garbage because you probably don't have an office manager or facilities team and then also code. And so those would be the two traits that I would look for. Sub 50 or at any size? Just when you're small like that and everyone has to wear multiple hats. At some point, let's say past 50 people and certainly past 100, people just have to start specializing. One person has to be in charge of that one thing or else it gets too chaotic and complicated and you don't really know what people are working on. You wanna just delineate work and segment it out that way. The other thing I look for as, so later stage and later stage startup, I'm counting as I'm drawing the line at 50 people. And especially looking for leaders, I would look for people who are just authentic. If there's ever a moment where you're in an interview and it feels like someone's bullshitting you, they're probably bullshitting you. And it's like, do you really wanna work with someone who's bullshitting you? Probably not. My impression is that executives get very good at interviewing. They do get, but you can also, you can just sense it. Like is this person, like why is this person trying to show off to me? What is the motivation here? And if you can understand that and it's acceptable to you, then fine. Or are they making themselves sound better than they actually are? And this is where reference checking helps. Doing lots of reference checks. Looking for someone who's authentic and then the other good indicator for success for that role is have they done it before and have they done it successfully? That's a clear metric. That's a great one. But like authentic, pain tolerance, it's more easy for bias to slip in, right? Someone's like, oh, you know, Kat. Like I interview with Kat and Kat's like, ah, Craig seems authentic, but then someone else is like, Craig's totally bullshitting me. So like how do you make that concrete in an interview process? I think it's much easier later on because you just have more team members and more eyes and more bullshit meters going off or not going off. And I think it's easier to just be like, oh, I'm gonna do this, I'm gonna do that. And then you can just be like, And early on, I mean early on like who wants to join our little shit startup, right? Like what is Plan Grid? What do you mean you are writing software for the construction industry? And it's just basically the first 10 people were people we had worked with before who are our friends. Or you know fresh out of college and it was the only job they could get. And so I don't think we certainly didn't have that luxury early on to try to filter people that way. Ryan, my co-founder's test was like, I mean if we did have the luxury of having an option to like great candidates, I think his like test was who would I rather be stuck on a cross-country train with? All right. Train specifically. I think it was a train or like car, like a long car ride. Who would I rather be stuck with? And that's how we made decisions. Yeah, I think people have different ratios of like how much you get along with versus how competent they are. This is everything given equal and you have to choose. Oh yeah, yeah, yeah. But and then pain tolerance too, just like because so many people listening are looking for like concrete things that can roll out. Yeah, yeah, yeah. So you know we would put ourselves in their shoes. Two people come to mind. Taylor who was canvassing. You know going door to door canvassing and getting no's and like you know cursed at and doors shut. Like you know probably high pain tolerance. And spoke of it you know passionately, right? Saman was a literally a door to door pencil salesman. Wow. What? For like staples or something. In America. He now leads our BD team. In like modern times, okay. Yeah, yeah. In modern times, this is I don't know when we met him, 2014, 2015 maybe. Whoa. And he was selling pencils. And I was like you know what? I think you're gonna do great making phone calls to the construction industry. You know like high pain tolerance. That's what I mean. You can tell by their backgrounds. Okay, yeah. And then someone who went through all of that but still speaks very positively. You know looking for like you can teach, we can teach a lot of things but teaching someone to have like a positive. Attitude. Attitude. You can't teach that. You either have it or you don't and like when we spend so many hours in a day at work and especially when there's always problems and it doesn't always feel good. Having those positive people is like really nice actually. Yeah. Especially when they're you know doing just as much work as everyone. Much you know who wants to be around negative people? Let's face it. No one. But the negative people exist. For sure. And I don't know. Feed them some sugar. That's not good advice. I don't know. I guess I'm just saying if you have the option like weigh a positive person a bit higher. Yeah, well especially in the early days right? When they're like foundational and can influence the other people you hire. Yeah. So to sidetrack a little bit and talk about current events which I almost never do. Did you see all the backlash Tim Cook got at the end of the WWDC? No, I didn't follow this. He was thanking everyone for working really hard and like working nights and weekends to roll out everything before WWDC this week. People push back because they're like well this is like not fair. You know this massive company promoting a work life balance that might not be actually stable or maybe good for the world. I have my own opinions there. But like how do you feel about creating work life balance at a high paced startup rolling out important products? I feel like it's just what gets elevated right? I'm sure people at Apple, his teammates actually appreciated that he took the time out to thank them. Because they probably did work really hard. And so I don't think we get to see that side of this conversation either. But I do understand your question here. How do I think about work life balance? It's all about the outcomes that we create. It's all about the output in terms of like what we are able to create together. It's less about the hours. Although I will say as a startup it sure seems like it's correlated. If everyone is like heads down working and you look up and it's like wow we made progress. And sometimes a lot of the problems is just brute force, man handling, woman handling these problems and this work to get it done. And so I guess that's my thoughts there. Certainly like especially now I mean we have so many. It's funny because you know when we were like in our mid 20s early plan grid that seemed like the only people that wanted to work for us were people around our age. And so as the years gone by you know myself included there's just more gray hairs in the building. And so what that also means is there are people with children and grandchildren that work for our company now. And like yeah they are probably way more important than me. Yeah, than your job. Yeah, yeah, yeah, sure. And well because I'm on Tim Cook's side because I'm like listen the reason why they're so important and the reason why all this matters is like people do put in that work. And I care a lot about it and I think that's great. It's important to acknowledge that. Yeah, absolutely. I like being thanked for when I work hard, you know? Right, yeah. Right, like we can pretend. And so like so what you've done now is he's never gonna say it again but people are still gonna work. And so it's just like it's not realistic. So someone did send a question related to this. So Freddy Fernandez asked how do you track the wellness levels of your team or do you? I don't think we do. You know, our office managers and our facilities manager, they and our HR team, they do a really good job of like taking care of the team. I remember, I do remember a funny story. I remember early days. I've been vegan for a long time now. And I'm also a little bit hippie. Like I wanna eat only all organic foods and like low sugar diet. And so Cokes would show up or Donuts would show up and early on I'm like what is this? You guys can't eat this shit. It's bad for you. Yeah, yeah, yeah. You know, now I'm less crazy about it just because there's so many people. It's like I don't even know who brought in the Donuts this day but it came from a good place, right? Yeah. I'm a mature Tracy. At what point did it become, you know, you have a team now whose job it is to take care of the team versus like at what point did it transition away from your direct responsibility? Oh gosh, I don't know. It's such a blur and a daze, you know, like seven, eight years at PlanGrid going from five co-founders to 450 people and now a lot of revenue. I wanna say 150 was when everything broke, right? Done something about Dunbar's number and everything goes to complete chaos. I'm gonna say if I were to best guess, probably about 150 people was when we had like an office manager taking care of all this stuff. Yeah. Maybe before that, I don't remember. So I've had the pleasure of kind of seeing you since, I think I met you initially in 2013. So I've kind of gotten to see you as a person as your company's been scaling. And so one question I have is what are the things that you've done to take care of yourself and your own, you know, you and Ralph, your family as PlanGrid's gotten bigger and bigger? Yeah. Other than eating very healthily. What were the things I started doing? I started doing yoga weekly. That was really helpful. As part of that, I also meditate. That was really important. It was life-changing actually for me. Just being able to quiet my mind down and then just have a reset and be able to look at things in a different perspective. Of course, I still am very terrible at meditation. I mean, it's really hard to quiet our very busy human minds and I'm vegetarian vegan throughout PlanGrid. I was vegetarian when I was pregnant. I was also taking a lot of vitamins at that point and that seems to help. I drink a ton of water, I drink a ton of teas. So I think between yoga, meditation, eating well and that's a plant-based diet for me, taking vitamins and then probably not drinking so much. Yeah. Yeah. Other things. What about in terms of, we can talk about this as much or as little as you want, maintaining a relationship with a co-founder? Yeah. Like that's like. Yeah. We get this question a lot actually. Surprisingly. Maybe not surprisingly. I'm very, very lucky to have a partner like Ralph. This company would not be what it is today and I certainly wouldn't be the human I am today without Ralph in my life. And I'm sure he would say the same. But it is complicated. So I would say if you had the choice, like you just wouldn't risk your relationship in that way. But for us it works, right? It's been eight years, we are still married, we have a child together, we will likely have more children together. A clear delineation of responsibilities is important here. I'm CEO, he was CTO forever and he would take on various interim VP roles for our team, which I'm thankful for. When it came to technical decisions, it was like I trusted him completely. And when it came to business decisions and just leading the team, he gave me, I was CEO of course, I don't know if, I'm sure at some point he didn't want me to have the authority, but they wanted me to be CEO and I was gonna lead the team. And so that's helpful. When it's like a co-leading situation, I think that's where it gets complicated. And then what about at home? Just like, does it all flow into one thing? Oh, we also have rules, you know, it's like after eight o'clock, let's not talk about work, but we broke that rule all the time. We still continue to break that rule. Okay, okay. And so, yeah, you mentioned this, but you're also a mom now. What was that process like when you're managing this giant company? Giving birth. Well, yeah, that process is fascinating to me. We don't have to talk about that. Yeah, but you talked about like fundraising, all this stuff, like taking time off. Last year, so my baby is gonna be a year old next week. Last year was nuts. It's a blur for sure. And mostly because I was sleep deprived, you know, like all new parents. God, what does your question just tell you about it? It's a blur, I don't remember. Like, you know, you're managing this big thing, but you're also going through this like huge life experience. Like how do you, I don't know. Yeah, I get, there was a woman once who asked me, she was like, hey, can you, she was pregnant and she was thinking about raising her series A. And she was like, do you know anyone who's ever been pregnant and raised a series A? And I really struggled, right? I was like, I don't know. I can introduce you to some, you know, I can figure it out. But I guess, yeah. Is there any advice for women who are founders of companies or thinking about starting a company and like balancing that, having a kid and also taking care of this other kid, which is your company? So I think first off, it's totally possible, right? I was leading our team. I don't know, you know, however much revenue we signed us up for that year and hitting our targets, leading a team of over 400 people, parallel pathing conversations with our now employers, Autodesk, as well as a series C. It's total, and then also, you know, obviously the getting pregnant and like growing a kid and then giving birth and then nursing it. You can do all of that. I'm living proof that you can do all of it. And what do I wanna share here? I mean, I'm just a little bit crazy. So it's like, I don't know if this is good advice. What I do want, I do want people to know that it's possible. You just find a way to do it. I remember at some point last year, like during all this, Ralph, he's like, hey, I found your theme song and we're driving home and I've had a pretty hard day, pregnant, of course. with my hard day and he turns on Drake's Non-Stop. I don't know if you know that song. That was my theme song so it's a lot like that. Okay, let's check it out. Cool, all right. Let's talk about some other stuff. In terms of scaling the company, someone asked a question about, what's your big plan to scale from is that a public metric, how many projects? I think so. How do we get to every single job site in the world? International is going to be key here and so we're certainly putting a lot of our energy and efforts and resources on our international strategy and investing in our international team and countrifying our product so it's ready for those markets. That's it. Is Autodesk international? Yes. This is also one of the reasons why I made this decision is that they have an incredible user customer base in international markets. They figured it out and now we're bringing PlanGrid to them. Another scaling question. Holly asks, what has been your single largest influence in helping you scale? I'm obviously a first time CEO, although now I have some experience, seven years of it. Figuring out where I'm weak on, which was all over the place, finding leaders who had done it before and surrounding myself with experience and people who had scaled to where we wanted to be three years from now. Incredibly thankful to have the leadership team how did I close them? Selling my ass off. Selling the vision, selling the idea that their stock would be worth so much. Selling myself as an amazing leader that they definitely wanted to work with. Putting and shining on my selling shoes. I think also just being authentic. Helping them understand why I was doing what I was doing, why I was passionate about it and why I would be a good human being for them to work with and call their colleague. I think that helps. We just had a hiring conference last week and I'm just thinking about it. How often do you meet an executive that on paper you thought would be really good and this is their job? It's hard to know. We certainly had misses and these are people who had done it before and I think where we got it wrong was when they did do it before was scale. They were either at a company that was way bigger and they just had never seen a startup of this size because it's painful at this size. We have like 50 recruiters helping you recruit. We have a much smaller recruiting team, etc. That's when we got it wrong was when we got the wrong match in terms of scale. And then personally in terms of you when you were scaling, what skills did you really have to work on the most to make it work? This entire journey is hard and it's hard in a way where it's hard to explain. You guys work with enough founders and you guys are previous founders yourselves. It's lonely also. You're constantly operating in the unknown with not enough resources and there's all this pressure and there's more pressure if you have any success at all. And then on top of that, life goes on. Our co-founder died during this journey and our co-founders have seen deaths in their families as well over the years. And so it's hard on so many levels and I think our ability to manage our own emotions is actually a big key to just surviving the next day. Can we just keep our shit together? However you make that happen. Did you have a different personality type before you started meditating? Because you're a pretty chilled person, it seems like. Thanks for thinking I'm a pretty chilled person. I was like, wow, chill. Please spread that rumor. What's your reputation, high, strong? You have an intensity, certainly. Intense. Maybe it's like a duck though. You're doing this under the water Yeah. An external calm. Thank you for that. How did you cultivate that? Because we're all emotional maybe to certain different degrees but what do you do? I think it's just my personality but certainly when I'm really stressful and things are going bad how do I make it seem like I'm still confident about the direction of the company? It certainly doesn't come naturally and I'm not saying that I'm faking it or by any means of that. I think being confident and knowing that Plangrid was the right product for our customers I believe that in 2011 I believe that today even more so. And then also believing that our team was a team to bring this product to our customers. We just love builders. We come from building backgrounds. A lot of our team members have family members in construction and we care so much about this industry and the people in it. That's what helped us be calm in those instances when things are going really bad. When something's all-consuming but you have a larger mission. You have to stay positive. What does that boil down to? Maybe passion and love for what you're doing? Picking the right thing? Because things are going to go bad all the time and it's going to feel bad all the time. And when it's not feeling bad and it's feeling pretty good it's probably because something really bad is happening right now People start companies and then realize that the customer they're working with they don't really want to work with that customer or solve problems for that customer but that seemed to be the North Star for you. You really understood that you're a customer. You were passionate about helping them solve their problems. That I think has really helped. So now that you've been doing Plangrid for quite a while now do you think there's a category of stuff that a lot of startups get wrong when you look around? Oh wow, that's a really good question. So we talked about firing. We talked about managing people so that when you do fire them they know it. What are other things that startups get wrong? I think that for founders, certainly for me at some point I wanted to just, you know, things aren't going right and I so desperately wanted them to fix itself but I was working on the wrong things. My life was filled with all these meetings and all these conversations and all this work that wasn't actually moving the startup in a better direction. And so I think prioritization is what all people get wrong. But that can be corrected, right? By really taking an honest look at what we are working on and is this the right thing or are we thinking bigger for the company and the people who work in it? Are we thinking bigger for our customers? And then also to not lie to ourselves. I think that's something we got wrong as well. When things were going right and can we push ourselves harder? No. Whatever the reasons is, I think this is true for our own personal lives as well. Just to make sure we're looking at things honestly. You're nodding. Don't lie to yourself. Many people have different methods of achieving that mirror. Did you have a coach? He had a coach named Strat. He was important in my growth as well. One of the most important things he taught me was to... It's funny. He told me that for someone who doesn't have very much ego you have a lot of negative ego. And I was like, what the hell does that mean? I don't know if it's just my personality I felt so guilty about the mistakes that we were making. Instead of focusing on making it better acknowledging the mistake and then changing it. I would just beat myself down. It's completely crazy. I remember before every board meeting I would just have this thought that goes through my mind and I told you this Kat where I thought I was going to get fired from my board. I was constantly letting that slip to my board director Carol before a board meeting. I was like, are you guys going to fire me? And she laughs. This loud cackle almost. Are you fucking out of your mind? Wow. The business was doing well. The team I think loved me almost the entire time. We weren't making that many mistakes. That was a thought that went through right before every board meeting. That thought would cross my head. No, but it's so hard because you just get trapped in this stuff in your mind. You don't even realize you think everyone thinks the same way as you. That's where meditation helps. Just clean out a little bit of that clutter and burn it. I know Kat you had a bunch of other questions. They were sprinkled throughout. I think we've hit most of them. This is actually from Holly. She wants to know are there any books that you'd recommend that have really helped you along the way? Or even what's the most recent book you've read that has been illuminating? The most recent book I've read is Melinda Gates' Moment of Lift. I highly recommend it. I loved it. I was crying the entire book. So if you're into books like that of just stories that will break your heart and then also just give you hope for the world, I highly recommend it. Throughout the years I read a lot of self-help books actually. What is it? Chicken Soup for the Soul, but not actually that brand. It's just like Zen, Buddhist, that type of books. I don't know. I'm just into them, but I think that's a preference. That gets you pumped up? No, it doesn't get me pumped up. I read a lot of poetry as well. I don't know if that's helpful. No, it is. I think that's just a matter of preference. What kind of meditation do you do? Do you have a mantra and stuff? What's your deal? What do I do? I sit for 10 minutes only each day and much harder with a baby now. That makes me feel better because I feel like everyone tells you you're supposed to get way past the 10 minutes and I've never been able to do that. It just becomes this competitive thing, which seems to totally defeat the purpose. Maybe, last question, but is there anything, if you could go back in time to 2012, Tracy, what would you tell yourself? What do you wish you'd known when you were first starting out? To learn to be more authentic earlier. I think for a long time I wanted to. I worked in construction and I so desperately wanted to be like every other construction person. I would even smoke cigarettes just so I could be in the construction smoker circle and be the group. It was so not me. I mean, I went as far as chewing tobacco once and it's completely disgusting. Smoking is disgusting too. But that was what everyone was doing. I learned to have a potty mouth because I learned that in construction. I learned that language and it's been incredibly hard to get rid of it. We're almost going to go through, I think, a whole podcast without me cursing. Wow. That's incorrect. You've definitely cursed already, but it's cool. I do it all the time too. For a long time I wanted to be a good CEO and good founder. I thought it looked a certain way. It made me really unhappy. At some point, I don't even know when it happened, but it happened slowly. We change without knowing that we change. I just became more and more and more of myself. The last few years have been the happiest for me. They've been hard. It's like, have any success at all? It ain't going to get easier. I've just been a happier person because I am who I am mostly on the outside as I am on the inside. I'm now myself. I'm doing things my own way now. I'm still working on that. I don't remember when. Maybe I saw it modeled for me. There are people that I respect and love. It's like, you know what? I like them because there's no bullshit here. There's no mask here. Very wise advice. Thanks for coming in. Thank you. That's great advice."
  },
  {
    "name_video": "On starting and scaling recruiting software startup Lever ",
    "description_video": "Sarah Nahm, CEO & co-founder of Lever (YC S12), discusses her journey to becoming a founder, the decision to leave Google to build Lever, initial challenges of the startup, and lessons learned along the way about hiring and diversity.",
    "related_categories": [
      "Founder Stories",
      "Women Founders"
    ],
    "page_url": "/library/6I-on-starting-and-scaling-recruiting-software-startup-lever",
    "youtube_url": "https://youtube.com/watch?v=UKVmfinc8qE",
    "mp3_file": "downloaded/On_starting_and_scaling_recruiting_software_startup_Lever_.mp3",
    "mp3_content": "Sarah and Holly, welcome to the podcast. You know, a different thing when I grew up, every three months I was dabbling in anything, I was dabbling in everything, but probably one thing I spent a lot of time on was social justice. I volunteered at Civil Rights Institute because all the amazing people that were a part of the Civil Rights Movement, they're obviously still around and they're still doing amazing work. And that just was something that so defined my experience of growing up in Alabama. And when I came out to Stanford for school, for college, I was the first person from my high school to go like west of the Mississippi River for college in like years and had no idea what I wanted to do or who I wanted to become. And, you know, I think that that period at Stanford was a really interesting one. Like pre-med was still the number one major, which has since changed, I think, to CS. And it wasn't super obvious that, you know, you as an undergraduate could be a founder. And my freshman class at Stanford was the first class to start with Facebook. And I think that that really changed so much in Silicon Valley where young people now were seen as people that could innovate and that could bring kind of game-changing ideas to market. And I remember so many kind of moments where the people around me were stepping into, you know, taking the leap, like stepping into these kinds of roles and positions where they were just going for it. And I think subconsciously that influenced me. But consciously it did not. I studied design and I always thought I was just going to go into design consulting. You know? So you're gonna like take a job at IDEO. 100%. And see what happens. Exactly, yeah. And I loved it. I mean, I was like drinking the Kool-Aid, mixing the Kool-Aid, distributing the Kool-Aid to everybody else, but design thinking was... Post-its. Oh yes. More post-its. Oh my God, all the post-its. It's gonna solve everything. I mean, I gotta admit, it's still a huge part of how I see the world. It's still a huge part of how, like what I bring to my company. So I totally thought that's what I was gonna do. And then you ended up at Google. Yeah, total surprise to me. With your first job at Stanford. Yeah, yeah. Okay. Yeah, and I was very unfocused in my job search. I think the only way I even ended up, quote unquote, applying to Google is like, I was dropping off some form for a friend at Stanford's Career Development Center. And there was somebody there who worked there, was like, oh, are you gonna sign up for the Google interviews? Oh, that's really fast. Did you sign up? I know. A part of me is sort of like, look, total privilege check, because it's not like, it's not normal, so to speak, for there to be a clipboard with a pencil dangling from it, or for you to sign your name up for like an amazing kind of career opportunity. But that was right in front of me. And it was- So did you know what you were signing up for? Like, did you do design or? Oh, no, not at all. I think I just kind of like went into it and was curious and was engaged. And I think I was one of those annoying ones who couldn't make up my mind. And I just had this like outstanding offer for like months, like literally nine months before I officially kind of made the decision. And then I think even then I didn't know what I would do until my first day of work. That's a whole story. Well, because you were in that program where you transfer around, right? Exactly, yeah, the associates program. But it was super funny because I showed up to the new higher orientation, and you get your laptop and all the things. And then they have this moment where you're all sitting around in the main cafeteria at Charlie's, and you're supposed to get picked up by your manager. I'm just sitting, I'm just imagining. I know, so I'm waiting, find out like what I'm doing. And I'm still sitting there kind of at the end when everybody's all like set because my first job out of college was total kind of like came out of left field thing. I ended up being a speech writer, which I never saw coming. And it was a job that nobody had had before for specifically supporting Merce Meyer. So she was a little tied up, so she couldn't come get me at Charlie's. But I think in a weird way, that was probably my crash course in a lot of what it is to be a founder because had to kind of create something from nothing and figure out what I was doing and be really bad at it for a while. And I think also in hindsight, so many lessons learned about leadership and strategy and just getting to be a fly on the wall to conversations way, way, way above my pay grade and out of my element, really amazing experience. And I think like, to this day, super grateful for it. I obviously, I spent time on other things at Google too. Notably, I spent a lot of time on the Chrome team, which was just incredible, incredible people. Sundar was like leading that initiative at the time. That was amazing. My direct boss is like this amazing kind of like growth guy, marketing guy, creative guy, who would go on to be the head of marketing at Instagram. So yeah, like just some amazing people around me. Yeah, and- I've got to ask though, when you speech write, do you use Post-its? Oh, 100%. Oh, that's impressive. Yeah, I also take it the other way around, which is when I design mocks, I use Keynote, prototyping tool. Yeah, so- Oh, I like that. You like reverse it. I think there's so many insights from a design kind of practice that I think are super applicable to being a founder, to being a CEO. For a while, I was actually really sad because I was spending less and less time on product. And for someone who loves product, that was actually really hard. Like I felt like the sense of loss, but then I sort of started reframing a lot of the work that I was doing as a founder around, I still work on a product, the product is this company, and I still have to do user research. It's just that my users are my employees and my customers. And that same process for generating a clear strategy around user needs was just as needed, if not more so, in that product. Here comes the design thinking coming back. Yeah, I know. So I really got to say that to me, I think more designers should be founders. I think that that skillset is so, so relevant to the work it takes to actually get a lot of people together to work in a system and to create value from scratch. So definitely I think there's some amazing designer founders out there, but a part of me wishes that there are way more. Yeah, there could be way more. So to me, it's not obvious. Obviously, you jumped around at Google, but it's not obvious as to how a speech writer goes on to found Lever. Yeah, not really obvious to me either. Right, which is probably fair for most people in the world. But was there a point when you were at Google where you thought to yourself, you know what, I'm gonna go be a founder? How did you decide, why did you leave? How did you decide to start Lever? How'd that go? Yeah, I mean, I think like so many founders, a path is nonlinear. I think you read in mainstream media about these lightning strike moments that suddenly happen. I mean, I think that's all just media, right? And the personal experience of founding a company, first of all, it's a period of time. It's not a strike of lightning. I think that even leaving Google, I didn't leave to start a company. I think I left to just grow and experience more things and ended up pursuing a lot of different stuff, things ranging from just like personal projects to obviously working with several early stage teams. And I think personally, a lot of what I was really doing in the time that was on the path to founding a company was experiencing working with a lot of different types of people. Yeah, and so you could say that my co-founders and I were like almost trying out working with each other for a while before we like actually officially went for it. So I think that's a huge part of it. And I credit the fit to my co-founders for a lot of the success that we've had as a company. So in a weird way, like I don't think I was doing it consciously at the time, but like making sure that you're finding the right people is like probably the hardest to predict, but most important part of like that super, super early stage. Was it very, it seems like you found the people and you were working together, but the idea wasn't quite there. I mean, and Google was probably still on this rocket ship when you decided to leave or doing really well. Like what was the most difficult thing to overcome? So let's just say, I'm gonna be on this, like what was the thing that A, propelled you forward and then what was the most difficult thing in getting you to leave? Yeah. I mean, it's cushy there. Oh, sure. I mean, first of all, I just have to say like huge privilege check, like having been at Stanford, having been at Google, like I think that it's not lost on me that there's like a lot of opportunity open to you. And I think at the time I knew that, I knew that, you know, in a way there was no good and bad choice spectrum. It was like all shades of good. And I think like a lot of people, I just like knew that I had an opportunity just in my life overall to take risks and try things out and really like grow my sphere of experience and took that, which, you know, I think people who have it, like should embrace it. And then people who don't have it, I mean, I don't think should beat themselves up about, you know, like having to think a little bit harder on taking the leap. So in terms of like, you know, leaving Google, that was easy. I think in a way it always kind of like felt like there was just more to experience. Starting Lever was harder. And that's because, yeah, I mean, you know, so for one, he just didn't know exactly what we were gonna do at first. I think very few teams know exactly what they're gonna do. And probably the biggest thing to truly getting started was, you know, again, people, believing in the people that you're working with, believing the people around you. And then secondly, you know, I think believing in a change that's happening in the world. And, you know, I think distant third to that is believing that you have what it takes to like bring some value that speaks to that change, right? That reacts to that change. So the change that we were really believing in that, you know, I think has really played out ever since was, you know, the world was, this is like 2012 when, you know, the founders of Lever kind of all got together. And we just saw that the world was quickly becoming a world where revenue, competitive differentiation, innovation was all driven by talent. You know, like you look at what was limiting the growth of companies. It was that they couldn't hire enough engineers. They couldn't hire enough salespeople. You think about what was causing like some companies to win over others. It was because there was like some sort of like 10X talent thing happening that led to some sort of leapfrog in what they're bringing to market or, you know, some sort of like better marketing strategy. So essentially what was happening is just like kind of software was eating the world, knowledge work was eating the world. Like as kind of technology and digital transformation was playing out in every single industry, even the most blue of blue collar work manufacturing was transforming into something that looked a lot more like knowledge work. You know, like you don't need just undifferentiated assembly line workers. You needed people who could program like a robotic arm or, you know, like rethink manufacturing process, right? So that was happening in every single industry. And it was really transforming how organizations had to think about people and HR and hiring because kind of gone were the days of, you know, my parents' generation where you like join a company and you work your way up the career ladder. Like my dad has had very few employers his whole career. He like stays with them for decades, right? And nowadays, like millennials, Gen Z, they're entering the workforce and like people are staying at jobs for like three, four, five years in Silicon Valley, maybe even less. I think it's 18 months or something right now. It's like, yeah. So did you guys feel that, was there a unique insight in the beginning or were you just like, we're going to go, we see this change happening and we're just going to build a newer, better version? How did you approach product in the beginning? Oh my gosh. Well, like, first of all, the beginning, that blurry period, that probably lasted two and a half years. So, you know, I would say, you know, we were super engaged in making sure we were defining the problem and I think like in a way, probably different from other companies, we didn't rush too quickly to solutions. Well, I should say we actually did. And then we've always been kind of at the end of the day, driven by our users and our customers and making sure that we're being honest to them and like holding ourselves accountable to them. Like you can think that you're delivering this game changing such and such platform, something, something, but like what your customers say about you or what they say to their friends when they're talking about your software. I mean, that's ultimately who you are, right? So I would actually say that first we built an entire thing and actually had to kind of come to terms with, you know, what our customer feedback kind of was and we had built just something incremental and we had built something that was just like a better version of what was there before. So then we threw it out. And I think went back to the core fundamentals. So, you know, you kind of ask like, did we know what we were building? I think that while we didn't know literally what product or what solution we were going to bring to market from the beginning, what we did know was how we were gonna hold ourselves accountable and that was through listening to our customers. Though you were in the startup game, which implies VC, which implies pitching VC. So how was that process? Even your industry wasn't really as much of a thing as it is now, seven years later. What was that process like? Did you fundraise in 2012? You're in the winter batch, right? So we did our first meaningful round of fundraising, series A, in October of 2014. So I would definitely say 2012 to 2014 was that process of us figuring out what problem we were solving, how to achieve product market fit, how to build that traction that you want to show. And I think in that period, we also discovered a lot about ourselves as a team. In that period, just for me personally, I went from being an individually contributing designer to literally kind of on the eve of our series A. We had signed a term sheet, but we hadn't closed the round. Kind of we as a team collectively agreed I should be CEO. So you figure out a lot in that period. And if you're not confronting those hard things about who are we and what are we here to do, who am I and what am I doing? I think that you can put it off for just so long before it actually starts to intersect with what you can achieve as a company, as a team. So when I think of those early days, yeah, all fronts we were figuring out who we were. And it's some of the most fun and terrifying chapters we've ever had at Lever. Yeah, those are stressful years. So now we're way further down the timeline and you do have kind of unique positions on recruiting, culture, and diversity. Back then, I assume you were just, again, figuring stuff out, right? A lot of our listeners are early founders and they are competing against Facebook and Google, I was going to call it the goog, Facebook and Google and every big tech company, right? How do you differentiate as a small startup and land the top talent? Yeah, it's so true. It's a global talent market. And I think that it's competitive in so many ways. And every startup, I think, does have this experience of there's well-resourced recruiting machines that are kind of out there. And on the flip side, early stage, startups have such a unique opportunity to offer. I think advice for startups is to spend a lot of time thinking about what truly is your value prop, actually figuring out how you're going to approach hiring and what is the way that you can almost use your culture and offense with it, because that's like, you can so kind of run circles around a lot of the competition by bringing that experience of what it's like to work at your company into the candidate experience. So yeah, I think that there's so many kind of like hand-to-hand combat tactics that startups can employ that gives them, frankly, a much better shot at recruiting the most talented people than these sort of large environments. Can you give us an example that you guys did at Lover? Oh my gosh, yeah, a hundred percent. I think the first thing is proactive recruiting. So any startup out there that's just posting a job and waiting for great people to apply. Yeah, shame, shame to all of you. Hiring is the strategy when you're a startup. There's a period at which you can be the best founder on the planet and you will be holding your own company back if you haven't figured out how to truly prioritize hiring, how to truly invest in it, and how to do it damn well. Can we swear on this podcast? You can swear as much as you fucking want, yeah. How did you guys proactively do it? I mean, you're usually so stretched thin when you're starting out. Yeah, no, so this is actually a concrete thing. Proactive recruitment, I think it's going outbound, right? In the same way you wouldn't just throw up a website and wait for customers to come find you, you've got to actually reach out to people. And so the first thing that everybody tells you is reach out to your network. You'll tap that out at some point. You should still do it, still do it, but you'll tap that out at some point. And then I think what you have to start doing is getting really confident reaching out to people that you believe are going to be strong fits at your company that you're finding, not just on LinkedIn, though you should, and then you'll tap it out. Get creative, look at meetups, look at Eventbrite, look at GitHub, GitHub's a great place to find people if you actually know what your technology value prop is. What's been the most surprising source for you guys? Something you just didn't expect, you're like, wow, I would not have expected to find a great candidate here, or several great candidates. Oh, that's cool. Honestly, we have so many amazing and unique hiring stories in our company. Our team, so my engineering org has largely been built up by my co-founder, Nate Smith, who we are a recruiting software company, so we think a lot about hiring. 81% of his team was proactively sourced. And I would say that you can genuinely find people and connect with people anywhere. And I think the other thing that's been remarkable about our hiring strategy has been so many people that we actually hire, we actually met them and nurtured those relationships. So you actually several times interacted. Oh, two to three years, wow. Yeah, it comes back around, you're investing in, I don't want to call it a database of talent. It's like you're investing in relationships and you may not see returns from those immediately, but those are gonna be the people that actually, when it is their right time, like when they're ready to make their next move, they're already gonna be familiar with your team, with your culture, with your mission. They actually get hired, we have the data to prove this, like 35% faster than people who are meeting you for the first time. So people, I think, are familiar with the cliche that as a founder, you should be spending 50% of your time on hiring. I'm just like, it's a cliche because it's true. And I think hiring just takes so many forms. And I think one thing is obviously go out and meet people, no expectations, no strings attached, let's meet. Second thing you can do is encourage people on your team to do the same. And that's really tough. I think actually, for whatever reason, people feel awkward pitching their friends about job opportunities. Can't imagine why. Can't imagine why that would be awkward. Here, you can make some money, great opportunity. Well, I'm being a little facetious because yeah, it is a little awkward. It's awkward to sell something like that because it's so important. But then on the flip side, everybody has so much passion about why they joined. And everybody does feel really strongly about the startup they're working for. And I think actually as a founder, one of the most impactful things you can do is help your team find its authentic voice about why they give so much of a damn about your company's mission and why they joined and what it's done for them and what they've learned and how they've grown. And you don't have to say anything about the other person. Just telling your authentic story is an incredible, incredible thing. And so I would say that if any founder out there right now is trying to do a lot of hiring, go book a team offsite where you actually help people come up with their authentic story for why they are so committed to this company and just watch it transform the conversations that they're having. Build some email campaigns, if you will, even. So related to this, you talked about motivation fit at the YC hiring event a couple weeks ago, which basically describes like, is this person's goal in their career and in like the near term at least aligned with where your company is at and their impact that they're gonna have. How do you suss out someone's motivation when you're, you know, it's like kind of crude to talk about it, but like building this like two, three year database of people you meet like having coffees with or whatever. How do you figure out their motivation? Yeah, great question. You know, I think the simple answer is really just ask. And the more complex answer is of course, get really good at listening. So the simple kind of way it's, you know, I think if you ask people, what, you know, are, where are you taking your career? You know, what have you done in your past career decisions that have been most meaningful to you? What is it that you're doing at your current job that you'd like to do more of? What are the things you're not getting to do at your current job that you hope you get to do in your next one? All those are ways to like get some of the facts. But I think fundamentally, to me like, you know, at Lever our first stage of our hiring process, it's not phone screen. It's not something like that's just screening. It's motivation fit. Like literally that's what the name of the stage is. Because I think it's like, it is kind of at the root of your best hires and it's also at the root of your worst hires if you don't get it right. So, you know, I think that what I'm listening for when I'm asking people these questions, it's usually to suss out, you know, is this the right stage for people? Is kind of famously, you know, the huge factor of the experience of being at an early stage startup and finding people that thrive with ambiguity or finding people that really love, you know, the diversity of problems that you're gonna be solving. You gotta make sure to have an ear to listen for when people are really actually ready for that, when they're excited about that. I think another thing to listen for is, when people are sort of looking to say, take a big impactful role at a company, because everybody's gonna say they're looking for impact, right? So when somebody says they're looking for impact, really, do they know what that means for them? Is it generalities or do they actually have something that's really like revealing that self-awareness of what for them is like in it from their personal seat of experience? And I think that the more specific someone's gotten about their own career, the more maturity they bring to the role, the kind of more they can probably up-level your team. So yeah, I think like simple answer, ask, just ask. And then complex answer is like, really learn how to listen to how people, you know, express like their thoughts about themselves at work and what they're looking to get out of it and what they're looking to do next and what they're looking for in a team. I certainly have a tactical question at this point. They used to train a lot of interviewing around like, tell me about a time when X, Y, and Z. Oh, yeah. How do you, like, do you still feel like those can help suss out those questions? Like to test for, you know, commitment or something like that? Yeah, so getting concrete, you know, concrete examples, concrete situations, as opposed to abstract, like brain teasers, I, you know, would summarize that as behavioral interviewing. And I'm a big fan of behavioral interviewing, especially for early stage startups. And here's why. You know, I think that you as a founder are hiring for a lot of roles. You've never actually had personal experience doing those jobs. And beyond that, yeah, beyond that, nobody else at your company may have ever done that job. So you're operating on a lot of theory at this point. And one way you can really like de-risk hiring and also not be too clever about how you're gonna like interview somebody is by actually just methodically asking them about their own career. And I think what you can get really good at hearing in their story as a founder is, you know, what are their patterns of success? What are maybe their patterns of failure? And just kind of like, you know your company really well. So you know whether your company has like the contours for this person to be successful. And, you know, I therefore am a huge fan of, you know, we do a step in our process that we call career trajectory. And it's basically a behavioral interviewing interview where you go in and you just kind of start at, you know, college and then go step by step by step through people's career and allow them to tell you about it. And it's kind of basic, but it's so impactful. And, you know, if anybody is really curious about looking into that, we kind of modified a version of top grading, which you can Google and find a lot of information about. But yeah, I think it's actually great to just give people the space to tell you about how they've kind of grown in their careers. You learn a lot about someone that way. In the context of remote work, do you have specific advice around finding out someone's kind of working style, their dynamic? I think what's a common one I hear is, have they worked remotely before? That's a good one right there. But are there other pieces of advice you have there? Oh my gosh. I think this is where a lot of innovation is happening right now in hiring. People are sort of putting two to two together. Oh, it's a global hiring market. And then also thinking about like, what would it mean if we actually just tapped in really meaningfully to like that global hiring market with hiring anywhere? It's tough. You know, I think that there are clear benefits. I think obviously you get some advantages around, you know, beating the market, so to speak, and tapping into like a lot more, like, you know, rare opportunities and a lot of kind of like immediately upon hiring someone. It's kind of like winning the game, you know? But then on the flip side, you've got to build a culture that can support remote work as a first class citizen. And I think there's some people that really nail it and they think about the details. They think about how meetings work. They think about how information's transferred. They think about tribal knowledge and how you're going to actually create like, you know, systems for information to flow freely. Whereas if you're all co-located in the same office, you kind of get it for free. So, you know, Lever actually didn't really embark on remote work until you're pretty late as a company. And that was for people that had already worked in our company for a while. And then like for maybe personal reasons or whatever needed to move. And I would say that we're just getting started with a second office. We're now starting to actually meaningfully do some experimentation with our team composition. But we had kind of the other side of it where we stayed together as long as possible. And I think that was pretty intentional. And I think it, I will say, connected to us being able to build a really strong culture together. It allowed us to, I think, really quickly, you know, I guess like spread a lot of best practices and it led to us certainly like sharing a lot of the load of skilling the team really effortlessly. So, you know, again, pros, cons. I would also say that we had to get real good at hiring in a tight talent market here in the Bay Area to be able to do that. So I definitely think it's a really huge talent strategy question that any founder that's building a team right now has to ask themselves. What trade-offs do we want to make? And go eyes wide open into like how, if you're gonna, you know, accelerate hiring by like really casting a wide net, hiring remote, okay, how are we going to prepare our culture for that? Another thing you mentioned in your talk was how you write job postings, which I really like. I just kind of like broke down a few of my favorite points. You described it as basically just describing the impact that you'll have at that job. Can you elaborate? Absolutely. Well, I can tell you kind of the story. So we, just after we raised our series A, big moment for us, right? Like we started talking about what we were gonna do next. We started really strategizing about it and something that we knew we would be doing that we hadn't really done up until that point was hiring a lot of people, right? Like we had been a really tight, small team, you know, for a long time. And here we were about to, you know, double the team in a matter of months. So being a recruiting software company, we were like, okay, well, we know a lot about recruiting. We know we really want to invest in like building a great recruiting process. So we decided to take, you know, an offsite. We all loaded ourselves into a van, the company was small enough that we fit in a van and went to like Tahoe or something like that for a few days to actually really design how we were gonna hire and what our hiring culture was gonna be like and how were we gonna design our candidate experience. And by the way, I'd recommend anybody who's about to do a huge amount of growth to do some variant of this. And, you know, one of the things that we kind of asked ourselves was like, well, like when we start hiring for a role, how are we gonna know what jobs we need? So we actually like developed this little exercise, like it's literally a Google Doc that has like text boxes and stuff we made that laid out, okay, like what would, you know, someone with this job need to achieve in one, three, six, 12 months, right? And specifically we tried to make them not like tasks or like, you know, start doing blah, but impact, results, outcomes, right? Like, well, ideally they'd like improve web conversion from this to this or they, you know, actually like nailing the results of success, right? So we patted ourselves on the back, this was a great way to define a lot of like jobs to be done like now we had carved out all these like amazing, you know, I think you're hiring a lot of generalists, you're hiring a lot of athletes at that time. So here we had this great way to define like our work and we thought we were like really proud of ourselves. So we actually were able to go out and like start hiring with confidence, interviewing with confidence and we got all these amazing people in the door and like when they got pretty late stage, we'd be like, oh yeah, like here, let's share this internal doc that we have with you. And people would just light up when they saw this, oh my gosh, this is so clarifying, it's so amazing. And then it took us an embarrassingly long time, like probably six months to like be like, hey, why do we even write these like boring job descriptions? Why don't we just take these impact descriptions that candidates and people that end up actually joining the company like find way more interesting and frankly like accurate and you know, all sorts of other adjectives, like find way better. Why don't we just use that as the way that we talk about the jobs that we have? And ergo. Yeah, yeah, yeah. And so do you find yourself, do you still list required skills for instance? So say, you know, I'm looking at to apply for a job at Lever and it's like, you're gonna, you know, increase X, Y, and Z and I'm like, I'm on it. And then you read the application, and you're like, this person has no. of their required skills to actually do that. like the top 10 percentile of the talent market interested in your opportunities. It's also been a huge driver for us of diversifying the people that are self-selecting into applying because by having this lengthy list of skills and requirements, I mean, you're basically broadcasting to the world assumptions about what kind of people should apply. And I think the beauty of impact descriptions is you are putting out kind of like a statement about what you're looking for, and it welcomes people from non-traditional backgrounds, like kind of tech outsiders, so to speak. From your book club. Yeah. To throw their hat in the ring. And so I would say, therefore, that it's not just more effective. You're actually getting the top talent interested, and those are the people that you want to hire, right? It's also, I think, more inclusive, and it's really, I think, more clarifying also. So like teams do hiring, and I think getting everybody aligned on what you're looking for as a founder, huge accelerator to being able to really scale hiring, to do it with confidence, to get lots of people who are all contributing to all be on the same page. Yeah, I mean, it's related. YC has the same thing. A lot of people from non-traditional tech backgrounds who might be into tech look for reasons to disqualify themselves, and they're like, oh, I didn't go to Stanford and drop out. I didn't go to MIT or whatever, and like. Maybe you should redo the YC application as an impact description. Yeah, it's not a bad angle. So related to inclusion, Ava Zhang sent you in a question. She writes, what's the biggest roadblock you faced in trying to make hiring more inclusive to diverse candidates? Wow, there's so many things going through my brain as I'm thinking about this. I mean, so there's a few levels. For one, we as a recruiting software company, we're trying to actually scale out how all of our customers, how the entire industry can make hiring more inclusive. So we've got things that we're doing on a product level that I think answer Ava's questions. And then of course, we are a company that's going through a lot of scale that is trying to figure out our own culture and how to be more inclusive internally. So there's also like that side of it. So in terms of roadblock of making hiring more inclusive for the world, gosh, there's so much to be done there. And there's so much to be done there completely outside of software. So I think the biggest roadblock is sometimes you're sort of caught up in this tension where people would love for software to solve the problem. And you as a software, as a technologist, you have an opportunity to move the needle that way. But also I think it's really important when we're talking about a more equitable world that people do have to change. And so the biggest roadblock probably is when people maybe hope that the problem can be solved easily without confronting kind of like these questions of what are we as people doing? And I think it's an opportunity for companies like Lever to actually drive a richer conversation around that and to make people maybe more aware that there's things that they can do. And I think in particular with things around diversity and inclusion, there really is that will. I feel that year over year, more and more people care, more and more companies from more and more verticals and stages are all coming forward and saying this is something that they want to invest in that they can't ignore. And if anything, this isn't a roadblock, but maybe something that would remove roadblocks. I think people need more success stories out there because they're happening. And I think we see a lot of news reported on all the bad. It'd be great for the stories about what is working and like what is taking off to be out there. In terms of like what we have done to make our hiring more inclusive. Oh my gosh, I think we're constantly running experiments. I am really happy to say that diversity inclusion has been something that the team at Lever has made a huge part of our culture from like day one. And it's not because we were diverse from day one. For two, two and a half years, I was the only woman at Lever. And it took us a long time also to diversify in other dimensions like race and ethnicity or having parents and people with different like family situations, having people with different backgrounds, all those different facets like also came kind of later. But we always cared. And I think we always had a vision for like what the culture could be. And I would say like probably the biggest roadblock people face to making their own teams and hiring more inclusive is thinking that it's about demographics and thinking that they have to reflect the demographics of diversity before they're allowed to make their culture more diverse or inclusive. And I actually give a lot of people advice like, look, before you're about to do a big investment into diversity in your recruiting and making kind of your hiring more diverse, I actually think it's really critical to start by making sure your culture is inclusive. Because what's the point of like hiring all this quote diverse talent if when they get there, they're not ready to succeed? Yeah, yeah. So yeah, number one roadblock when founders think that because maybe they're like in a majority, they don't have a credible ability to lead their company to, you know, have a strong DNI culture. Well, I mean, it's what we were talking about before we started recording. Like now founders are not only tasked with leading the company, thinking of a great product, hitting product market fit, doing all this other stuff. Now they're in charge of like being clued in completely with whatever's going on, whatever social issue. So let's like spell this out a little bit more. Like inclusion, what does that mean at a company that's five people? What's an example? How do I do that? Oh my gosh. Well, I can definitely tell you how the conversation got sparked meaningfully at Lever. And it was, who does the dishes? Oh, interesting. Did they all look at you? Hopefully not. Well, I wasn't the only one, but I was one of them. But like a very obvious kind of group of people did the dishes. And a very obvious group of people did not do the dishes. And you know, I think it was really like everybody knew, it wasn't like surprise, like everybody knew. And it was not something we'd ever entered into the domain of like something that we realized was the surface area of our culture. And at some point, I can't remember how this came up, but somebody shared an article about how like findings, research shows that disproportionately women do office chores. And like basically when sharing that article, like also pointed out like, hey, that was happening here. And what did we wanna do about it? And literally, I can't remember if it was the next day or maybe like two or three days later, we just decided to do something about it. We built a Slack bot that assigned a rotational dish duty and it would just tell you in the morning, today's your dish duty day. And then we just like made it completely equitable. And people didn't shirk their duties. Well, that's a whole other question. But no, actually for a long time, even when like, you know, I think it was until like, we were like actually a like significantly, like maybe a hundred person company. And then we actually had like, maybe somebody who's like facilities team that was like taking care of it. Like we did this for a long time, rotational dish duty. It became part of the culture. It became something that people would talk about on like tours for candidates. Like, yeah, it was something that actually, I think was us doing something about it. And, you know, a more kind of at scale answer, you know, if that's like the five person company version, you know, we one year, you know, launched our vacation calendar. Like here's our official lever office, like, you know, like vacation schedule and holiday schedule. And, you know, we shipped it, we moved on, blah, blah. And then we found out later, like maybe a day or two later that there was a lot of like critical feedback from the team about our decisions about which holidays we had chosen to recognize and not recognize. And specifically we hadn't chosen to recognize Martin Luther King Day because we had recognized like President's Day or something like the same month. And, you know, from the people teams perspective, they were just trying to like their heuristic was let's just balance out the holidays like as evenly as possible throughout the year. But we realized in that moment that our holiday schedule was surface area to our culture. So I think like in thinking about making your culture more inclusive, A, it's really about like, what are you choosing to make your cultural surface area? What are you choosing to say? Like this is part of it and this is not. And that's like one decision a founder has to make. And then secondly, it'll change over time. Like literally there were, you know, at one point our holiday schedule was not part of the culture and then it was, right? And I think that's like, and dish duty was not and then it was. And that's just a dynamic part of culture. But I think the important part about being conscious about building inclusion into your culture is that dialogue. What a founder can be responsible for is that anytime something comes up, cause it'll come up, right? It'll just come out of nowhere. Is to make sure that you're the kind of company where people are able to bring it up and where you're able to sort of like give it back to the team, like, okay, what do we want to do about this? And where people take action. I think that's actually at the heart of getting, you know, this really murky world of how do you be a socially responsible founder? You're not gonna know, but what you have to do is build that, like I think capability inside your company to question yourself and to have a dialogue and then to take action. And that's, I think at the heart of like what early stage founders in particular have a real advantage on. Versus these companies that are trying to add this on later. You have so much ability to shape how your culture talks about itself and how like employees are shaping that conversation. Oh, it's really funny. I've actually visited the lover offices and I noticed in the kitchen, they have one which I'm super appreciative for. They have a bunch of like cups and then there's this one lower shelf that says, please leave for the vertically challenge. I was like, ah, this is so great. This is so including. I know. Thank you. Yeah. I mean, you'd be surprised. Like obviously the diversity inclusion conversation is so driven by certain kinds of categorizations. But you know, one of the most profound shifts for us when it comes to diversity was to talk about how we didn't want to buy into the idea of technical and non-technical people. Oh, interesting. Yeah. Can you tell us a little bit more about that? Absolutely. Like, you know, I think Silicon Valley has actually this deeply ingrained stereotyping around technical people. And like, for the most part, I think that's a seat of privilege. Like if you are an engineer, if you've got like coding chops, if you're a hacker, like there's all these kinds of attributes about you maybe being like a more worthy or valuable or like higher potential founder, right? Or employee, right? Like I think there is even some companies where like the technical parts of the company get free lunch and then the non-technical parts of the company do not, right? Yeah. And of course, like with hiring being as tough as it is for like software engineering roles, data scientist roles, I think that like there's this value placed on these people that, you know, I think frankly, a lot of people buy into, right? Like a lot of the people that are not on that side of the spectrum, like the quote non-technical people have almost like kind of internalized a self-handicapping about it. And we actually for a while recognized that not only was that kind of against like some of our cultural beliefs, but also it was holding us back. We needed our quote non-technical people to embrace and adopt like designing systems that were as sort of like sophisticated, scalable and have that sort of engineering mindset about their work. And then we also needed our technical people to understand our customers, understand the value proposition, to like really embrace some of the qualitative aspects that we as a B2B software company really needed them to like actually really, really get our customer and why we were doing some things and get our go-to-market motion and our sales pitch and why we were doing these things like on a deeper level. And so we just realized that that stereotype wasn't serving us. That's a great insight. Yeah. Yeah, I've met many technical people with no product sense. So like the opposite can be true. Yeah, yeah. No, I mean, I'm guilty of it too, right? Like I sort of embrace the idea in hindsight in a weird way that I was like proudly our non-technical founder, but fuck, I have a like BS in mechanical engineering from Stanford. So it's sort of like what, you know, like it just was like confusing. And so we actually, yeah, we ran a training of like I'm technical and so are you. That we just like had a few like brown bag lunch kind of seminars. One of our early employees, shout out to Jennifer Kim. She runs a blog inclusion at work. Check it out. You know, helped us kind of build and we just like ran a bunch of people through it and like tried to like, you know, spread this empowerment, I think that, yeah. Like I think again, just like my missive of like there should be more designer founders. I think like there's a lot of people out there that are limiting their own potential by not thinking that, you know, they can access any part of what it takes to get creative and solve problems. Yeah, I couldn't agree more. So related to all of this is like, as you said before, having the conversation about it. I think people are often terrified to have the conversation about this at work because they're like, I don't know what I'm supposed to say. I don't know what I'm not supposed to say. I might know what like the prevailing thing to say is, but maybe that's not how I feel or I'm just curious. Like how do you set up a culture that like allows those conversations? Is it just like with your manager directly? Like how does that happen? Oh gosh, it's like layers of an onion. You know, I wouldn't even say levers solve this problem, but I'll just enumerate some of the things that we do to help. We do everything from the super structured to, you know, the super just human skilled. So, you know, we have a new hire onboarding that we call Ramp Camp. And it's this week kind of where you get onboarded to the full 360 of the company. It doesn't matter if you're a salesperson, engineer, we onboard everybody to every part of what makes the business successful. And one of the sessions is on diversity inclusion. So like literally your first week at Lever, you're hearing us talk about it. You're hearing us talk about where we're at with it. You're receiving an explicit invitation to be a part of it. Other structural things that we do, we have a lot of employee resource groups. So these are like, of course, you know, a lot of companies have them. We have leverettes for the women at Lever. Yeah, so we have a bunch of them. 65% of our employees are a member of one of these groups. And we actually not only have them and sort of like obviously support them, we actually ask them to help us build policies. Like the Lever Parents ERG was a group that we, my VP of people went to and asked, like, hey, we're trying to revise and improve our parental leave policy. Can you actually help? And like using these groups to inform real decisions is kind of the next level. We also do kind of programmatically a lot with our management groups or our management layers. So we actually are, I'm a big believer in coaching. We do a group coaching program. So every twice a year, every six months, we do like a six month program that we run all our managers through, some who are promoted internally, some that we hire to be intentional about our management culture. And I think that they can be such great advocates in terms of like spreading great practices that do make work more inclusive. And, you know, if you're not already engaging your management team on D&I, like, you know, hello, that's really impactful. So that's some of the things that we do. the structural stuff. And then some of the things that are just more human. Oh, gosh, well, here's a funny example. So we really encourage people to engage with each other, solve problems like with each other. But you know, sometimes having difficult conversations, like you're kind of navigating these murky waters of, you know, you don't want to kind of go over the net and like accuse someone of something, but maybe you're trying to surface or highlight a difference in point of view or assumptions or background. And what we didn't want is for people to resort to stereotypes. Yeah, well, you're like, you know, an introvert, and I'm an extrovert, and so blah, blah, blah, or you're salesperson, and I'm an engineer. And so therefore, blah, blah, blah. So one thing that we also built into ramp camp is we have all the new hires kind of take one of these, like assessments, and like the output of one of these is like a color. So color one. Yeah. So number one, the color Yeah, there's even an animal one. Oh, yeah. Oh, yes. Well, we are also big fans of spirit animals. But yeah, so, you know, now everybody has the shared language about how to talk about difference that isn't about like, how you were born or, you know, socioeconomic background or anything like that. And I think that that's really empowering for people. So now we even celebrate it. And I think it's become a way we can celebrate difference. So at the end of ramp camp, obviously, you kind of complete it. And then we actually do a happy hour for that month's ramp camp class. And so they come in, come and exit kind of their last session of the day where they get their colors and enter, you know, commons, our commons area where we have this the whole company's like clapping. And, you know, we kick off this happy hour to celebrate their first week. And the sort of like, it's the colors reveal is that the happy hours. And so all the new hires are wearing lays that correspond to their colors. So everybody's like, Oh, green, or you're like, so, you know, I think that, you know, whether you're doing it kind of in these structural ways, or you're just giving people like tools to work in our personally, it's huge. It's huge. Yeah. I like how you created a common language and then kind of celebrated and said, like, it's okay to to kind of talk about it. We're kind of huge dorks. I love it. I know, like, so we call ourselves leverage. And yeah, we are such I mean, I love us, obviously horribly biased. But yeah, we're kind of like goobers in that way. That's awesome. That's great. Yeah, no, it's so much of it is just like, I mean, like comedy, even like, it's just intention, right? It's like coming from a good place. You're like, okay, like, we can work with this. Yeah. Yeah. And you know what, like, so many of those ideas I just described, bottoms up. Yeah. It's not like I'm some like architect of all things, diversity, inclusion, lever, quite the opposite, actually, I credit, like the team collectively, as really being the drivers of this. And I think that's the opportunity that the early stage founders out there really have, is if you do get this into your culture, what you get long term is this, you know, collective ownership over over, you know, everything cultural, but certainly diversity, inclusion as part of that, that if you can get that seed planted, it just like is a little bit self reinforcing. And so I really that it sets you up for scale. Yeah, yeah. It pays in dividends later. Yeah. And anybody new comes in, well, like get ramped up into this color, and they would just know, you know, you'd love the colors. You're like, I want to do my color. Amazing. Okay, so just wrapping up, YC, we have a batch going on right now. All most of these companies are quite early. What's your advice to the companies in the batch to make the most out of it? You know, I think that the number one thing I would say is, you know, your, your culture is your people. It's who you hire, it's who you fire, it's also who you're recognizing who you're promoting, who you're rewarding, and how you do all those things. And you probably feel like you have a million things going on, and everything's on fire, and you have so many things to get done in a given week. But the secret to solving all these problems is through really, really getting great at building your team. And so like, I found this to be true. I work with thousands of companies at every stage of growth with hiring. I think like, you have to get great at talent, you have to get great at hiring. And I think that if you can really embrace that as a true part of being, you know, an authentic founder, you know, I think you will attract the right people that will run with all those things that you got to do in a given week. And it is the shortest path to building a strong culture. It's the shortest path to building your results. So you know, get embrace that a founder's number one job is recruiting. That's excellent advice. All right. Thanks for coming in. Thanks. Thank you. Transcribed by https://otter.ai"
  },
  {
    "name_video": "On starting and scaling meal kit company Gobble",
    "description_video": "Ooshma Garg, the founder and CEO of dinner kit delivery service Gobble (YC W14), details her company's complicated years-long path to what might look from the outside like simple success, and described how building a startup is like a daily game of Snakes and Ladders that can take you two steps forward, and then two steps back. She also gave her best advice for other entrepreneurs.",
    "related_categories": [
      "Founder Stories",
      "Women Founders"
    ],
    "page_url": "/library/69-on-starting-and-scaling-meal-kit-company-gobble",
    "youtube_url": "https://youtube.com/watch?v=A21qyXsAfME",
    "mp3_file": "downloaded/On_starting_and_scaling_meal_kit_company_Gobble.mp3",
    "mp3_content": "Hey, everyone. How's it going? Are you excited to be here? Let's have some fun. My name is Ushma. I'm the founder and CEO of Gobble. Gobble helps anyone cook dinner in just ten minutes. We're the inventors of the ten-minute, one-pan dinner kit. On the screen right now you can see one of my favorite tweets. After we finally raised Series A, Paul Graham tweeted, Ushma Garg does not give up. I think that's why I'm here today. I live an hour away, but it took me five and a half years to get here. I could tell you our whole story with this graph in three seconds. This is a Stripe revenue data dump of Gobble over the last five years. You might be wondering what happens right here. Doesn't it look like we had no idea what we were doing and then all of a sudden we just figured it all out? That's not the case. In order to understand what happens at the promised land, you have to know what happens in the beginning and the middle and all along the way. What you're seeing up there is actually the words from the startup curve that Paul Graham coined. He talks about how most startups have a launch that's very exciting. They fall into this trough of sorrow, which is oftentimes a multiyear slog. Then you have these wiggles of I like to call them hope, but maybe they're wiggles of false hope. And then if you're lucky and you have the stamina, maybe you get to the promised land. That was our story, and like Jessica said, it's not so uncommon. In 2010, Brian Chesky of Airbnb gave a talk at startup school. His graph from 2008 to 2010 looked similar to our graph. It was a launch, a trough, and wiggles of hope. Now that whole area of the graph looks smooth. When you look at a startup, it looks like there's nothing and then something. But what's important to know is how it really is day to day, and to me, it feels a lot like a game of snakes and ladders. That's what Gobble is like. Oftentimes it's two steps forward, four steps back, and other days it's all about forward. Today, I'm going to tell you about some of our early snakes and ladders and some of the lessons I learned from both and some big lessons at the very end. Gobble started when I had another startup company. I was at Stanford and running a group called Stanford Women in Business, and I was helping women get jobs in banks, consulting firms, and ultimately law firms. As you all know, startups are a 24-7 commitment. I was working for 16 to 18 hours a day, and I was eating nothing but takeout and Starbucks. I ate alone at my desk and alone in my car, and I oftentimes ate in my car more than at my apartment. Eating takeout is very unhealthy, and it's very lonely. I was beginning to get very unhappy. This is even more personal to me because I grew up with an upbringing of home-cooked food. I would come home from track practice, and my dad would be in the kitchen singing and cooking a traditional North Indian nutritious and colorful meal, and our family had this great tradition of eating together every single night. For me to do this as an adult, I would have to cook for two hours at night after coming home from my startup work. It just didn't feel possible. My parents actually offered to move here from Dallas. They're sitting here today. And I didn't really... Thank you. I didn't really want them to move here. I wanted to be independent. Sorry. So I had to solve this problem another way. I posted an ad on Craigslist seeing if any chef would make me a home-cooked meal for $8. I got 70 responses in 24 hours. I thought, wow, there are so many people in the Bay Area that are proud of their food and want to earn a living from it. I ended up asking my friends who wants some free food. We started meeting chefs, and their interview was to cook us a free dinner. Exactly. So in the beginning, I thought, this is an amazing dinner hack. But what started out really fun and amazing and funny became a very serious opportunity very quickly. These chefs were driving from Fremont or San Jose or San Francisco to my office in Palo Alto, and they were putting their culture, their pride, and their heart on a plate. And who was I to judge all of that effort and work? I know what you're thinking. We did get food poisoning. Twice. There are some risks in the prototype phase of your startup. We ended up choosing our favorite chefs, and I learned that in order to get food for myself, I had to get food for others, too, and make this worthwhile. So in solving the problem for myself, I made a calendar of chefs and what they would cook each day. I emailed my friends and asked them if they wanted to order dinner that day. This business that was starting, that I was first just solving a problem for myself and later evolved organically into a business, was just prototyped with email, PayPal, and me and my car. There was no tech, and all of a sudden, we were figuring out the supply and demand, and a business was forming. I was the delivery driver. I was driving dinner to all of my friends and then eating it myself. I thought to myself, this is really fun. I was having a lot of fun, and what I was doing was feeding my soul and my heart, because I was giving people home-cooked food, which is what love means to me and how I grew up. I wanted to take this further, and people were starting to order every day. Most people advised me that I should find a technical cofounder. I'm a mechanical engineer, but I had no experience with software. I started looking for a cofounder, meeting friends of friends, going on coffee dates, and no one was as passionate about the idea as I was, or they weren't willing to quit their job, or we just didn't connect in a deep way. And this idea was happening. It felt amazing. It was already moving, so I thought, screw it. I'm just going to do it anyway. Lucky for me, the investors felt the same way. I had the passion, there was a market, there was a proof of concept, and there was a mission, and I had already built a previous start-up company, and so my fear of not having a technical cofounder actually was not a fear, and knowing that, we were able to raise our seed round. It felt amazing. It was actually pretty great, and we got a new office, I started hiring people. Gobble was off to a phenomenal, almost dreamlike start. I hired our first engineer, and we were months away from launch. We were building our website, getting customers to pre-sign up, and all of a sudden, our first engineer quits. Just weeks before our launch. I was walking to our local Starbucks, and I saw him sitting there with someone, looking at me. He turned pale. I knew something was wrong. I walked back to our office, and sure enough, a few minutes later, he walked in and said, this is too much pressure. I can't handle it anymore. I quit. At that point, I didn't know what to do. I felt like I had failed all of our investors. I didn't know the code base. Where would I find the next person or the next engineer? What was I going to do? Would our launch be delayed? How would I look? That was our first big snake, and a very dark day for Gobble. As it turns out, the next day, I spoke with a few investors that I trusted, and they introduced me to some Rails consultants. It took a few days, but I was able to beg someone to come to our office, meet our former engineer, and learn the code base. That person helped me on contract for a little bit, and ultimately, we were able to hire some great engineers, and my favorite engineers today, but it delayed our launch, and it was a really big, hard hit that we had to get through in order for Gobble to survive. Ultimately, we were able to launch our first product, which was a Gobble marketplace. We were in tech crunch. Our investors were really happy. I sent out a great update, and it looked like we were getting our footing back, and I was really, really excited. What I didn't know is that we were standing on a cliff of a year-long or multi-year-long trough of sorrow that was ahead. Just because you launch doesn't mean you're going to get customers. Surprise, surprise. After those first couple days of the honeymoon phase of a launch, I had to fight tooth and nail for every customer and for growth every week. I put coupons in Palo Alto coffee shops, I went to mom's events and pitched our company, and every time somebody signed up, I personally emailed them, followed up, and gave them a promo code to order again. It was all very manual and very pounding the pavement. After a few months of this, we had some small numbers, but we showed some promise and growth, and one of our investors suggested that we try to raise series A. He actually wanted to lead the round and had a lot of experience investing in Silicon Valley. I structured our process around this investor. I was so excited by the opportunity to work with him. I spent a long time preparing our deck, and I only met with a few people that he recommended and thought that everything would be a done deal. As it turns out, we met with their firm first, and after the partner meeting, I wasn't able to get the sway of all the partners, and he wasn't able to get the sway of all the partners. The whole deal had unraveled. It felt like we were back to square one. I felt like a fool. I did so many things wrong in retrospect. I didn't meet many different investors. I met five, not 40. I thought that a deal was done before it was done. Next time, I would know that the deal isn't done until the money is in the bank. Most of all, I shared my whole process with someone when I needed to run that process. There were so many lessons learned at this point, but at the time, I felt crushed, and I felt foolish. We had some money in the bank, and I decided that this wasn't the end. I was going to take whatever money we had left and keep going and stretch it out. I started meeting with customers again and seeing how we could ramp up the growth in an organic way. What did they want? What was wrong with our product? At the time, they had to order in the morning, and we would deliver food in the evening. What people said they wanted was that they wanted to order right away. They're really busy, so they may forget to order in the morning. They wanted to order on demand. Back in 2012, when no other on-demand companies were around, we started a version of an on-demand company called Gobble Instant. This was a total flop. It failed hardcore. We got nothing. Our target market was families, and they mostly lived in suburbs, and we were in the peninsula. On-demand didn't work for us. Even though we were allowing them to order last minute, it would take us 30 minutes to get from Los Gatos to Los Altos. The food was wilting on the way. We weren't making any money. We were losing money on orders, so we tried out this idea, but, really, we remained in the trough of sorrow. Some of our investors were losing confidence in us. We had tried two different versions of Gobble over a couple years, and we weren't getting anywhere. One of them even suggested that we sell the company to a clothing start-up and go through an acqui-hire. The reason I didn't do that is because our mission was still alive and well. Busy people still were not eating home-cooked food, and they still weren't happy at dinner time. What I did at this point is I laid on a couch in our office, and I surrounded myself with blank sheets of paper. I stopped listening to our investors or to other people, and I started listening to myself. I thought about what are all the insights that I've learned thus far, and what do my instincts tell me? That's when I came up with some really bespoke ideas that made a big difference. In the case of dinner, people eat dinner every day. Their tastes don't vary that much, and they usually eat around the same time. So I really thought that dinner should be a subscription. I just wasn't so audacious or confident to do that from day one, but my heart always told me that the best company would be able to solve this for someone every single day, because you go through this behaviour every single day. And the way to do that is really exciting because it's through technology. The way Netflix and Pandora understand your tastes for movies and for music, I knew somebody could do for food and for taste, and I wanted to be that company. So I came up with this idea for a personalised dinner subscription, and we launched the service as our next product. Again, not always with the support of all of our investors. The good news is that this idea worked. It was showing in the numbers, and we were climbing ladders of success. We were making five times the revenue than we did with any other version of Gobble, and the technology was working. I decided to raise Series A again. We had made a lot of progress. We had a defensible technology. It's time to go. But at this point, a lot of other food start-ups had come up in the space, and it was very competitive. So this time when I was raising money, the space was heating up, and I got a lot of pushback because investors had already made their bets, or they just wanted to see how it would play out, and they said that this is a competitive space, it's early, so we're going to wait. We failed again at raising Series A, and we were back to square one again. This time, the fall was a lot further, and it was a lot harder, because I had no money left. I was running out of money, but I had this product that was working, and that people liked, and that was solving a problem, and I wanted to keep working on it. Even our current investors weren't willing to give us money at that point. We were too old of a company. They didn't have space in the fund. It was November and December. Thanksgiving and Christmas were tanking our numbers, so everything was down and to the right. One of my friends suggested, hey, YC is starting in January. Why don't you try joining Y Combinator? At first, I thought, what? We've already raised seed money, we've already launched a product, we already have a team. We already have X valuation. Why would I join a start-up incubator? My decision then was to either join YC or to die. When you look at it that way, you put your pride aside, and you keep the company alive. So we joined Y Combinator, and it was one of the best decisions I ever made. Just so you know how bad it was, this is a screenshot of our bank account before we got the Y Combinator money. made the last full payroll that I could make. Nobody knew this but me. Starting and running a company as a founder is a very lonely experience. Sometimes you you feel responsible for everyone's future and only you know what the reality of the the low times can be. YC was a lifeline at that point and without Y Combinator we wouldn't be alive today. After we joined Y Combinator though it was ladders ladders and ladders for some time. It was really great. YC helped us get back to the basics. Even when you have a product and when you have a team for founders to focus on the basics is amazing at any point at any time in your company. We had innovated on the food and we started we've innovated on the technology, sorry, and we started meeting with our customers and learning that next we had to innovate on the food. We needed consistent quality, consistent portion sizes, so we got our own commercial kitchen and ultimately I hired an executive chef. These were two really key moves for us. Our executive chef is Thomas Ricci. He's the tall and debonair gentleman on my right and Chris Woodford is our lead engineer who's on my left. The reason I show them is because they're 10x hires. The three of us had years of experience in our fields and we came together to visit customers and we all went to customers houses together. It was kind of awkward because we were standing in the corner of their house while they were cooking or talking to their spouse or kids were on their legs and then they were eating and we were watching them eat but that's what you have to do. The interesting thing that we saw is that when people were microwaving our food we had great quality and we had great portions and we had great sourcing but they would cringe when they microwaved the food. Microwaving was not a great experience for adults to feed their loved ones. We were learning a lot and while we were learning news came out about the food industry and this is what they said about Gobble. Gobble was puttering about on the peninsula with its paltry funding and ever-evolving business model. How many of you have had something negative said about you in public? This was probably one of the worst public things said about me. Hats off to the writer because she put a knife right in my heart and twisted it. It was a very well done insult. We were making a lot of progress and I didn't let this phase the team. I said let's put it in a box. We are the underdog. No one knows what we're up to and we're about to come out like a storm. And that's what we did. We talked to our customers after they would microwave and eat those meals and we learned from them that they really wanted to cook but they didn't have the time. Now that we had a kitchen and a phenomenal executive chef in Thomas I started spending time with him and he would say well why don't you cook? What's wrong with it? And I said I don't want to chop everything and I don't want to spend hours doing this. And he taught me about the restaurant concept of mise en place which is where the prep cooks and the sous chefs chop the vegetables, make the sauces, marinate the meats so that the executive chefs can then finish off the meal and serve it to the customers. We ended up applying that concept to families. We started by testing it with me in our kitchen and then this is me giving a TaskRabbit some of our very first dinner kits to take to friends in Palo Alto and try out this idea and see if it was easy for them to cook and if they felt good. Sure enough it was. Our social media blew up, the word of mouth blew up, the pride and the smiles blew up and the growth blew up. We had hit the promised land. After a few months of working on our product and seeing this organic growth, by the way that that promised land and revenue, we still today don't have one marketing hire inside the company. All of that is what product market fit looks like and it's really exciting and energizing to see that after four years of not having any of it. We were able to raise Series A from Trinity Ventures and Andreessen Horowitz. This was towards the end of 2015, last year. What's interesting though is that both of those firms had said no to me when I tried to raise Series A those other two times. The lesson there is that it's important to accept rejection with grace. Understanding that startups are a marathon and a long game and the same people you may not work with right now you might work with in the future. Here we are today. This is a photo from Gobble Thanksgiving. We're a hundred twenty people strong and we're delivering thousands of dinner kits every day to families across seven states on the West Coast. There's still work to be done and there's still challenges ahead. What I wanted to tell you from Gobble's startup game of snakes and ladders is that there's lots of snakes in the beginning and there's lots of things that will take you back or take you down but as you get through them and you have grit and perseverance and you believe in your mission those future snakes aren't snakes anymore. They're just obstacles that you can isolate and then work around. Also the game doesn't really end. It just gets harder. So now after raising this money we want to expand across the country. We want to expand our defensibility and there's a whole new level to play. People ask me oh my gosh there's ups and downs every single day. How do you get through all of this? If only if only it were that easy. I have three takeaways for you. The first is grit. How I think about grit is it's this thing that comes from your core. It's this place inside of you when no one believes in you that tells you whether you should keep going or what to do. Another way to think about it is that you should compete with yourself and not with others. You're the only person in your life every single day and every minute. Staying the path, playing the long game and trying to make yourself better and your company better and not looking at the other flashy companies that are around right now or maybe dying the next day but staying your course and listening to your grit and your core is very important. The next piece is to run experiments. Use your head. With this we launched four different full versions of Gobble to get to where we are today. A company is not just a product. It's not just your current release. A company is solving a problem, is a mission and if the mission is alive you should keep working on it. That's what I want to end with which is that our mission is to create love through food and all along the way I knew that that moment with your family and that moment of a home-cooked meal was not being felt by millions of families and we stayed the course and now it is being felt because of our invention. An easy way to remember this is to be a gem. Running a startup and being a successful founder is a full-body experience. Make yourself a gem, have grit from your core, run experiments from your head and believe your mission in your heart and you will be successful. Thank you."
  },
  {
    "name_video": "Product and design process for remote teams",
    "description_video": "Mike Knoop, co-founder and head of product of Zapier (YC S12), talks about how to jumpstart a SaaS ecosystem, the decision to go fully remote and how to manage a remote team.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/68-product-and-design-process-for-remote-teams",
    "youtube_url": "https://youtube.com/watch?v=zF84IMiSP7I",
    "mp3_file": "downloaded/Product_and_design_process_for_remote_teams.mp3",
    "mp3_content": "Hey guys, welcome to the podcast. How's it going? Good. Great. Cool. Kevin, welcome back. For people who don't know you, what do you do? I'm a partner at Y Combinator. I founded a company called Wufoo back in 2006. I was in the second batch at YC, and that company, appropriately, was a no-office company. We were all remote all the way back then. Huh, that's relevant to today, isn't it? Some early inspiration for us. Wow. What are the odds? All right, Mike, so what do you do? Yeah. Hi, I'm Mike. I am a co-founder at Zapier. I'm their chief product officer, and I originally started out as a front-end engineer and a product designer, so I have a very deep appreciation for those areas, and I think has kind of how I came to run some of the design team today, and I've thought a lot about scaling design teams over the last seven or eight years. And what does Zapier do? Zapier is a piece of software that helps you automate your tasks at work, helps you be more productive. So if you use multiple tools for your job, and you're trying to, like you're manually copying and pasting data from one tool to the other all day as part of a task you do, you can use Zapier to automate that and have it done automatically in the background. So an example would be like if you are a, let's say, a project manager, and you've got a team that works out of GitHub, and you wanted to send some notifications into Slack or into Jira, whenever those issues get closed, you could set that up, just as one example. Cool. And how did you guys meet? Because you've known each other for a while. Kevin and I? Yeah. Yeah. I came over to the place that you guys were working when you guys were doing YC, and we just like talked for a couple hours, but it was a really interesting conversation. Basically I told you, I was like, this is what we did at Wufoo, and I was like, you should basically just do kind of a lot of the same things in regards to like... Specifically, yeah. Think about remote work, that you're going to be doing this for a really long time. And then integrations was kind of like patching a bunch of things together to a form builder was like a feature at Wufoo. But to me, I saw what they were doing was like turning that into an actual business. And so a lot of my insights were like, this is what works for us. It's really powerful, and I totally get why every other company would kind of be interested in Zapier. Yeah. You're definitely one of the people who saw the early, I think, vision of what Zapier could be. And I think that software is such a good use case because the data never ends in a form. You want to do something with it. Usually it's once someone submits a form, I want to go put it in my CRM or qualify that lead or put them in an email list somewhere. It's actually interesting that like, I think the life cycle of people like getting their business online, it's like you start off with like, I need like a presence. It's like, how do I get my stuff out there? And so use like website builders, like by default become really big. We didn't realize this when we started, but we understood this later on was that like, so then people need to figure out like, how do I collect data from all these people that are coming to us? And so form building, contact forms, et cetera, like all of that became really relevant in surveys. And then the next thing is like, oh, now I have all this new data. What do I do with it? And that's like, Zapier is like the next step. So these are like the three like stages of every company of like, oh, this is what I need. And they have just giant markets. I remember early days at Wufoo, people would talk to us about like, so what's your TAM? What's like your total addressable market? We literally were just like, I'm not doing that because it'd be like everyone that ever has a website, everyone who needs to collect data, like, do you want me to calculate that? I have no idea. Yeah. I sometimes think those exercises while useful or sometimes like little misleading. It's misleading when your market is so ridiculously large. Yeah. When you're thinking about like a consumer adoption, you know, you don't ask Facebook, what's your TAM, right? Right. And for us, when we think about this opportunity, certainly when we got started, you know, our ambitions were, hey, can we build like a cool piece of software and support ourselves? But over the years, I think we realized, whoa, we've like tapped into something that almost every person who uses apps and software to get their job done should be using something like Zapier. There's this like huge explosion in SAF software in the industry that is like the barrier to entry to creating software is so low and distributing software is so low that you get these niche tools and more and more folks are using these new tools and bring them into the workplace. So something almost out of necessity has to exist like Zapier in order to be able to make those tools play well together. And a lot of times, just because of the dynamics of the explosion and how many tools there are, there's no one player in that marketplace that's going to be incentivized to go build thousands of integrations with everyone else. Yeah. But at this point. Customers want it. Yeah. I mean, at this point, surely you do have to be thinking more specifically about personas and like growing out individual markets, right? So how do you approach it now that you have so many users? Yeah. Honestly, to date, it's still a very horizontal strategy. We have mostly focused over the last seven years about getting more and more apps on Zapier and getting the tools people want on Zapier. I think that's been one of the things that actually surprised me was how much growth we've been able to get out of like the initial, I guess, decision back in 2012 to build an open platform. Looking back, that was definitely one of the like better decisions I think we made in the early days. We built the first 50 or 60 apps on Zapier ourself, Brian Wade and I, just to like bootstrap that engine. And when we launched in 2012, I remember we had live chat, I think, Olark on the site at the time. And we got literally, we launched in TechCrunch and had three days straight where all the chat messages we're answering was just people asking for apps that we didn't support. And I had never even heard of. And it opened my eyes and opened, I think, all of our eyes that if we're going to get this thing to scale, we have to figure out a way to get those apps on Zapier. And we just can't do it with three people. So it was almost out of necessity. We don't have money to hire. We can't build these ourselves. So we have to get, figure out a way that partners can build those things on Zapier. And at that point, we had enough inertia and momentum from the launch and from early users that were really excited about the product and that carried us. How do you jumpstart that? Because I think that's like everyone, especially I remember back then, people were talking about the platform. You've got to be a platform. Like how can you be like Salesforce? And the thing is, jumpstarting that is difficult. Like just because you put up an API and tell people like, hey, if you go and do this, then you're going to get benefit. Like how did you guys in the early days get people to be like, I will program against your thing so that I can be part of your ecosystem when it was very, very small. It is interesting how every, every SaaS company, every software company eventually get big enough and you want to be a platform. I think I'd always, I'd heard the heuristic of like, once you get big enough where you could carve off 1% of your revenue and that could be its own standalone business. Like you've kind of reached a critical mass that you could actually build a platform that has legs and can sustain itself. For us in the early days, obviously we didn't have that. I think the thing that we leaned on really heavily was the value proposition to some of our partners building on Zapier. It wasn't just, most of the time these platforms plays, one of the big mechanics you see people building on platforms is for distribution. Like I might go want to be in the Salesforce app exchange because that way more Salesforce customers can learn about the fact that I exist and might discover me. For us, we didn't have that. We didn't have a big user base in the beginning. The value we gave to partners was around retention. If they built, they integrated with Zapier, they got access to 50, 60 at the time, integrations that were maintained and scaled and were adding more to it and they got it for free. So it allows them to go say to their customers who are asking for these integrations, no longer do they have to say, hey, sorry, no, we'll put that on our to-do list or our feature backlog and we all know how that goes. They could start saying, hey, yes, you can do that with our product. Go check out Zapier. Here's a link. It was a way for them to say yes to customer requests. Like there's actually a way for you to do this. There was value to them beyond just user acquisition that incentivized them in the early days to build on Zapier. Did it end up being that a lot of people on the front lines recommending you were then support people? Because for us, in our company, customer support was where all these feature requests would come in. And so did it end up being, I mean, I would imagine a lot of them were like, hey, here's the stopgap. Here's how I satisfy you. That was very common. We would get listed a lot in help docs, help documentation. That's also another avenue where we get mentioned a lot, where Zapier basically helps them close a deal with a customer that they're trying to upsell or convert into a paid plan. Was that like the start of your dominance in SEO stuff? Is like, oh, we get people sort of linking to us? That was actually earlier. We built our app directory before we built the product. Before we launched in TechCrunch, that whole story was, we had been working on Zapier for about five months, I think, at that point. The very first thing we did when we sat down was we built our app directory, which was landing pages. And we used that to try and gauge what people wanted us to build. We were building these manually. We had a very big opportunity cost on our time. So in the beginning, how many apps did you guys integrate and do before you actually had people integrating and doing the work for you? It was like 50 or 60. Yeah, they get 50 or 60. But we had landing pages for, I think, a few hundred at that point. We had email collection on the pages and classic lean startup of just trying to understand and gauge the market demand for this thing before you go invest the time to build it. But on launch, you had 50? I think so. Yeah. Because that was a startup weekend project, initially? Yeah. That's where I met Wade at, actually. I'd known Brian for about a year before we started Zapier. But yeah, I met Wade the first time. I was actually going to pitch a different idea at that startup weekend, not even worth talking about at this point. As soon as I heard Brian pitch the idea for what was called API Mixer at the time, my eyes lit up and I was like, that's what I'm working on this weekend. So during that weekend, we prototyped out actually what Zapier is. The core mechanics of mapping data between apps all came out of that weekend. I think we built PayPal and HiRise and Twitter, I think, were the first three apps. How did you pick those? It was more we sat down and said, what would be a cool use case that we could demonstrate this prototype with? During the final demo during startup weekend, the mechanics of the weekend is you work for a weekend and then you present to the rest of the crew on Sunday night. During the demo, we said, hey, wouldn't it be fun if we get up on stage and have people actually tweet something live and then have people pay us something on PayPal? Then you could actually see the prototype of Zapier run and pull that data into HiRise. The idea was like, oh, we could aggregate if someone pays you on PayPal and they're tweeting at you, you'd like to know that in your CRM so that you could pay special attention when you're contacting them. So it kind of came out of a single use case and we worked backwards from that. So at what point do you end up doing YC? We applied actually twice to YC. We got the email rejection the first time. We applied basically with the prototype from startup weekend. So we had no customers, no traction. Basically just three dudes from Missouri. It was a hackathon project. So totally useful exercise, I think. But it definitely lit a fire under us, I think, as far as like what was useful about filling out the question. I'm going to show these people wrong. Did something change while filling out the application? It was helpful to think through what we didn't have yet, I think, for that first time. It made us realize some of the things around traction that we were like, there was a big delta. And still like optimistic with the prototype. But yeah, once we got the email rejection, at that point, we had enough hints of success. We were like, we're going to keep working on this. It gave us actually more motivation, I think, to keep burning 40 hours and nights and weekends a week for the next few months. And then the second time we applied, by that point, we had had hundreds of conversations and chat logs and messages from actually a lot of folks in the YC network were even using the product. It was invite only at that point. We were having folks pay. We had our first 10 people pay us $100 to validate it. And we turned down the price to, I think, $5. We had a few hundred people who'd paid us that amount of money, just a lot more social proof and validation that like, hey, this is a problem that a lot of people care about and could be useful. And so at that point, had you guys committed to being a fully remote company when you went through YC? Did you even have employees? No, just the three of us. And we hadn't. Zapier had been, I mentioned, we'd been doing nights and weekends for that four or five months in early 2012. You guys still had like jobs. Yeah. Brian and Wade had full time jobs. I was a full time student, actually, a grad student. I get the one star of dropping out to start Zapier. But yeah, after our full time jobs were over, 5 o'clock, we would go either back to our own apartments and work separately. Or we had one of our bosses let us run to use one of his offices to co-work out of in the evenings. And we'd go put in work until midnight, 1 AM every night, working on Zapier, basically. So it's kind of two full time jobs for the first few months. Yeah. And so demo day happens, and then where do you go? What do you do? Yeah. So obviously, YC, one of the things is moving out to California. So that was really, I think, one of the big values of YC for us was the forcing function to go commit all in, right? No longer is it a side project. This is actually the full time. Now we could... Did you not fully believe in it by then? Or is it like, you thought, this is an interesting hobby? Yeah. I think, you know, thinking back to that time, it was... Think about our ambitions, right? It was like, hey, we wanted to get this to a point where we could support ourselves, be our own bosses, control our own schedule. And it hadn't got to the point where we could supplant our full time income. So it was kind of out of necessity that we were running the company, building it that way. But once we got to YC, you know, you get a little bit of initial capital. We got an apartment in Sunnyvale, and that kind of allowed us to focus full time on it. So demo day, we actually leading up to demo day, I remember one of the problems, early problems we ran into that summer was all three of us would wake up in the morning and we were all doing customer support. We had a shared Gmail inbox, like, or not even that, an email would get copied into all three of our inboxes. In order to do support, we would have to sit next to each other so we wouldn't answer the same email. Wow. And we would be spending, you know, until noon each morning, just like answering support tickets and trying to help people get set up with the product. And that was chewing up a lot of development and forward progress time. So the very first hire we looked at was someone to help us out with support. And we had no network in the Bay Area. We didn't, you know, we just moved out three months ago. We didn't know anyone else. Our networks were from kind of like our college networks and from past jobs. And when we started looking at the folks we thought might be a good fit for that, the one person who came to mind was one of Wade's, I think, college roommates, and he lived in Chicago at the time. And we knew we couldn't convince him to move to the Bay Area, but we didn't want to. And we thought back to like, hey, we were kind of doing Zapier remotely before start weekend or before YC, like what's we could give that a try. And this coincided with the exact time after YC where I was, my wife, girlfriend at the time was finishing law school back in Missouri. So I was flying back and forth every two weeks back to back to Missouri and then back out to California to work Brian Wade. So kind of this perfect storm of like situation where it was like, well, we have some confidence that we can do this remotely because we had been doing it before. And the people we want to hire want to be remote. And I had to be remote for part part of the time. So like, let's just give it a go. So it's very much an experiment in the early days just to think like, hey, this was working. Let's see if it can continue to work. And did you have any kind of plan or structure or were you just like, well, let's just see what happens and make it work? You know, more inspiration than plan, I'd say. Like you look at folks like Basecamp at the time, WUFU at the time, like we had seen at least small organizations that had been successful at building fully distributed remote workforces. So I think there was more inspiration than anything. A lot of times for a lot of people, they feel like the company isn't real until like there's an office. There's like a lot of ego thing. And so I think that's the kind of thing that's amazing about remote teams that actually get really big. It's like somehow they don't have something that's tied to like the thing, the thing I need to show off. They're comfortable with saying like, I got no place to show you. I work from my home. And so like, is that an, like, did you guys even struggle at all about that? It was like, how are we going to be a real serious company without this? It didn't hurt any, it didn't like hurt any efforts in terms of scaling the organization. It's certainly even, it's funny how much, how pervasive that like idea is, because even I remember probably last year or the year before, we'd still have people joining the organization who'd comment like, yeah, do my parents want to know if I'm working at a real company right now? And it's like, well, yeah, we have, you know, 100, 150 million in ARR, like, yeah, we're a real company. But yeah, it's still one of the reasons why I like some of the PR things that we do actually useful because we can send those to friends and family and say, hey, look, this isn't just like a side show. Like this is a real thing. How did you not get caught into that trap? That's the thing is like, it has to come from the founders, obviously. How did we believe that it was not a side project? Why is it that you never felt like you needed to have an office? No, it's just like peer pressure around startup norms. Exactly. Like, why did you not succumb to that? Because that's often what I see a lot of people do is that like, I'm spending this money because I think this is what it looks like to normalize me. Because this is actually very, especially at that time, it was very radical to be like, I'm not going to have an office. Yeah. When we were talking to like investors and whatnot through YC, lots of raised eyebrows, we'd get folks turning us away. specifically because of that. Even some of the folks who did, we went forward with like still would be like, hey, when are you gonna mature as an organization and get an office and start hiring locally, right? Now, do you see a very different opinion in VCs? So which is fun to see that mindset shift. But how did we resist? I mean, in those early couple of first years between 2012, 2014, it was largely driven out of, I guess, kind of like the scrappy nature of the organization. Like it was out of necessity because we weren't profitable yet. We'd only raised a small amount of money to like help give us a backstop to be able to scale a little bit faster than we otherwise would have. And the networks of folks who wanted to hire were remote. It was probably around eight or nine people into the organization when it stopped being an experiment. I do remember specifically having that conversation with like Brian Wade around like, hey, this is working. Like this doesn't, and it was probably, I think, right after our first company retreat where we went up to Washington and had like seven of us, where it felt like, yeah, this isn't just like an experiment and like an easy way to get better recruiting. Like this is actually a better way to like run the company. For us, definitely it started off with cost. We're like, oh, we can't afford an office. But later on as things were working, we were just like, if you have this frugal mentality, we're like, there's nothing about the office and wanting to have a commute that made any extra sense. And we also had relocated from California to Florida. So it wasn't like, oh yeah, our office in Florida was going to be the driving thing for anyone. And so for us, it really just was like, I think profitability was the biggest thing for us. Like we were making money. And so if someone had some criticism against like, oh, why are you doing it this way? I was like, I'm making tons of money. So I don't really care what you have to say about this. Does WUVU still have the best exit to investment ratio? The ratio, yes. In terms of like how much percentage of the company that YC owned or any of my angel investors to the output. And I think we're still in like top 10 biggest exits for YC still. Still? Because of how much equity that was owned. Because we didn't raise any money. You raised what? We raised $118,000. YC was $18,000 then. And we raised money from two angels, PB and PG. And it was $50,000 each. And that was it. I was just thinking, you know, I think logistics and practicality was one reason why remote was like, we believed in it so much. The other reason I think is actually a little bit more tied to like Brian and Wade and how we like to work. In the early days, like I think it goes back to this, that nights and weekends. Like part of the reason inhibition of wanting to like start Zapper in the first place was we kind of wanted to own our own schedule and like set our own goals and not be beholden to like a giant organization telling us what to do. We wanted to be very autonomous. And one of like, that is a company value. Our number one value is default action. And that permeates all the way from the very beginning where we wanted to like, we wanted to build Zapier as a company that we would wanna work at. And if I'm gonna go work at like a big company, I would want that like level of autonomy and no one telling me that I have to be in the office at 8.30 in the morning every day and like control my own schedule and be able to like just go know, go identify good things to work on and do them. So as someone now who's hiring these people, do you have to filter out people who think that they want that autonomy, who think that they might wanna be working alone from people who actually do? And is there a good way to do that? Like how do you get the sense that people are really gonna- Like is your company full of like libertarians who care about freedom or is it a company full of introverts? I imagine it's not one or the other, but it's one of these things where it's like- I do think we probably attract folks that enjoy working alone more, not exclusively. We do have quite a few folks who are extroverted in the organization who've like been successful and found ways to make it work. One of the things I tell everyone who's going through the interview process is your work can't be your family at Zapier or any distributed remote company. Like in the past, it's very easy to lean on your work as that like social connection. It's a very rare, healthy mindset. And if you're gonna make it work at Zapier, you have to find a social network that's like outside the company. You'll get a little bit of it because we do two company retreats. You'll see their faces and names all day in Slack. But whether it's like side projects or hobbies or like close friends or religion or family or whatever it is, like you definitely wanna have one of those networks that's outside the work environment. Related to this, like what are other major characters that you look for that you know this person's gonna be appropriate for remote work? Past experience with remote is pretty good, is a pretty good signal because they know what they're getting into. Now with that said, we've had quite a few folks who haven't had past remote experience and they've been very successful, but there is like a learning curve attached to it. I think the biggest, one of the biggest things I look for in interviewing that tells me whether someone's gonna be effective or not is like how much they can uphold that first value of like defaulting to action. Do they have past experiences where they did not take a consensus driven approach and instead said, hey, this is the right thing to do and I believe that this is the right thing to do and went and caused some kind of action in their previous company or organization because they thought it was the right. But that sounds like a quality that's not just for remote workers. Sounds like you just want that period for any company. That is one of the probably most surprising things I have discovered or observed scaling a 200 person remote company to date is that the types of things you have to do in order to be a successful remote company make you just a generally better company. They are not unique to remote. However, you do have to figure them out earlier. And I think that is where a lot of the interesting, when people ask like, how do you run a remote company? I think that's really where it is because we've had to invest really early on in what's our decision making frameworks? How do we communicate as an organization? What are our processes? You have to get really explicit about your processes in order to be successful and in order for folks to have the information that they need to be able to default to action and be able to know how to operate in this organization. So you mentioned this, I heard this in another podcast about like overlapping time zones and making sure you don't unblock or block and unblock people. Nina Mehta, who I know, hey Nina, asked a question on Twitter related to this. And that is, what's the best way to share work and knowledge across designers working on different parts of the product without distracting from focused working time? There's an interesting underlying, I guess, assumption here or observation I could say about this, which is one of the benefits of remote work, apart, like one of the number one benefits is of course from recruiting. You get to hire the best people anywhere in the world. A secondary benefit that I think isn't as obvious is that when you're actually doing your job, like the best work gets done not when you're like sitting next to someone and like collaborating all day. Like you have to get into deep work, even for a role like product design, which is very collaborative by nature, you still have to like have chunks of time, like four hours at a time to go really deep and explore a lot of iterations, a lot of different ideas. And I think this is where like the process part of the organization gets so explicit is, all right, in a co-located company, in an office, you don't probably have a lot of explicit direction or like process laid out as far as when you're spending deep time versus when you're collaborating and coordinating with your coworkers, because I can just tap you on the shoulder, Kevin, and like ask you what you think of the work I just did. Whereas in a remote team, we just have to be so much more explicit about what are the processes, individual people, individual teams follow when they want to communicate. What were some mistakes you guys made in the early days? You said you have to figure this out earlier. Did you guys make any mistakes? I think one of the things that we figured out in the early days was when to be intentional about, how to be, sounds generic, how to communicate, when to raise the bandwidth on communication. There is a, when you're in a co-located organization, a company, like I'm working in person with you, the default communication mode is, I'm gonna get your attention, and then I'm going to have a conversation with you. And I have full, I have the full range of bandwidth, right? I can use body language, I can use my, I can stand up, I can use tone. It's like full bandwidth between us, but I've got 100% distracted you. Like you, I have your full attention. Now, so it's like, we're taking two people's times up for this. In a remote organization, the default is 100% the opposite of the spectrum, which is people don't communicate at all. Like if you're, they're using a Slack channel, and that's like your main office, which is how we operate today. If two folks are on a team together, the default is kind of like, you don't say anything. It's a, it's like just a blinking text cursor, right? And we have to be, we had to figure out when are the right moments, and how do we teach the organization, like when to move up that bandwidth chain, to move from not talking at all, because deep work is important, to text is acceptable, it's like Slack or email or something like that, to when to move that to a video call. So like, when should I raise the bandwidth from like typing this thing out, to jumping on a video call, and then finally- Would you guys like write these rules down? There, there's some like transition moments to look out for, I'd say, and those are the things that are like written down and shared with the company. So a good example of one that a lot of folks would be familiar with is like the Slack, many people are typing message that pops up. So if you like, one of the things I tell a lot of our teammates, if you see that, that's probably a really good signal that you should be like jumping on a video call at that point, instead of wasting, or not wasting, but instead of spending, you know, 10 man hours in Slack debating about this for an hour for across 10 people, just get on a Zoom call and hash it out for 10, 15 minutes, and then summarize the decision back into the team chat tool that you're using. And it cuts down. So it's like, that's kind of, that's what I mean by identifying the moments that it's important to like increase the bandwidth up to- We had a rule when we were doing remote working, where we knew that this was like really painful. And what we hated was long discussions happening for too long and breaking this sort of like deep work or like maker schedule. And so for us, we changed the rule to be like, if you're discussing something for like 15 minutes, at that 15 minute mark, just, you got to stop and go on to whatever the next thing you have to do, like to get to like what you say is default action. And when we said like all discussions that have been paused, we set a time for this. And we set it at like at the end of the week on Friday when the team meets together. It ended up being like 90% of the time, once they slept on it, they didn't even have to have a discussion. They just magically figure something out or how to compromise or realize something wasn't a big deal. And so usually by the time we get to Friday, not many things were ever brought up. Only the most important things surfaced at that point. Exactly. And so I think it was like, I like this idea that what you're trying to default to is respecting someone else's time. And that the only time you start respecting is when you like need to make it really, really efficient. But then what about on the other hand, where you're like, say you're stuck on a certain design problem, programming problem, whatever it might be. At what point do you say like, okay, I'm gonna break both of your focuses and take your attention full on to solve this problem or try to solve it? Yeah, that is a, I mean, it's a good question. The reality is even if I wanted to get your full attention, there's no guarantee you're gonna be able to get it in a remote company, right? Like I may not have a path where I can go over and tap you on a shoulder. I might be able to DM you in Slack. I might be able to send you a calendar invite and hope to get 10 minutes on your calendar this afternoon. But a lot of times you don't have like, you don't have the same guarantee of being able to get someone's attention that you do in a co-located. And I think that's actually good because it protects the attention of the person who would otherwise get distracted. And the thing, like some of the social, I guess, norms of the organization of how we like address that is, one is in Slack, if you tag somebody in a message, like at tag them specifically, it's kind of the social norm to acknowledge that within 24 hours. So we have some expectations like that. And the reason we had set 24 hours is because we have folks all across the world. The sun never sets on Zapier, I like to say. So yeah, we have some of these social expectations where there is gonna be some asynchronicity in how the organization works and operates. And it's one of the reasons why I think hiring for default action is so important is if you get blocked in whatever your primary task is and you're waiting on someone else in the org, you have to have the bone to go figure out what are other smart things that I can work on that are gonna contribute value to the goals and how do I better serve our customers here? If you're the type of person who like, as soon as I get blocked, I'm just gonna sit here until I'm told what to do next, you're not gonna be successful at Zapier or I'd argue most remote companies. So how big is Zapier right now? Like how many employees? 200, we just crossed 200. And then your primary responsibility is all the design work that's done at Zapier. I spend a lot of time with our, like helping our product teams figure out what to work on next. And I love spending time with our design and engineering teams. How big is the product and design team at Zapier? We've got about seven or eight product managers, a similar number of product designers, and then an engineering org that's about 50 folks attached to that. So from my experience, I know like how much collaboration is necessary, like especially at the start of like building out new products and sort of like thinking through them and then also designing them. And then also part of like the design culture is like critiques. And so to me, that was one of the things that was like really difficult. Luckily, Rufy was like, I was the only designer, we never grew to beyond 10 people. So- It's easy to communicate with yourself. Exactly. So we never ran into that problem. So I'm really curious, like what did you, what's done differently for your design team and product teams to make that sort of work? Yeah, I think that one of the most important relationships in the organization is the relationship between product managers and product designers. I don't think I'm saying anything new or novel here by saying that, but it's certainly true for us, which is when we are thinking about staffing and hiring a team, we're making sure that those two folks are like intentionally building rapport, they're spending a lot of time together and they have a very strong shared ownership over the goals that they're working towards. And- How do you do that remote work wise? That's the thing that's difficult, especially when you're trying to respect everyone's bandwidth. Yeah, in the earlier days when we had started scaling, which we'd started kind of scaling these teams maybe about a year or two ago, it was, I'll admit it was more ad hoc. Like we were figuring out this process still. These days with 200, we've been a lot more, we just have, similar to what I was talking about before, we have to just get a lot more explicit with processes. We started using OKRs as like an alignment mechanism and like a designer and a PM and an engineer all own and share an OKR. A lot of companies can have weird definitions of OKRs. Like how do you guys define OKRs? Like an objective that that team is trying to accomplish. Like, hey, we want to increase how many users are able to set up a zap by 10% this quarter or something like that. And that's something that a PM, an engineering manager and a product designer would have shared ownership over. That gives a lot of focus to that team and it also gives the, it kind of helps elevate everyone's role to be thinking about like the impact on the customer first. I think what the thing I've noticed that happens in scaling Zapier is there's a tendency for engineering and PM design to kind of specialize in their own areas. And like they have their own unique things they're thinking about all the time, right? Engineer might be thinking all day about the user experience. And engineering is thinking all day about estimates and delivery and refactoring and code quality. PM is thinking about business impact. And if you don't give them some kind of, if there isn't some kind of shared system for how they should value the things that are prioritizing, you get a lot of us versus them mentality that kind of creeps into the organization. Where it's like, well, why won't the designer do this? Or why won't the engineer do this? So you give teams OKRs versus individuals? Yes. Gotcha. Yeah, this is something we're new, we're starting to do, but so far it's been pretty fruitful in building that like alignment across teams. And so how is the team checking in on each other? Is it like a standup type thing every day? Yeah, every team does a little different actually. So there's a lot of, one of the things about Zapier, that it's cool to see is a lot of teams experiment with some of the processes. So you give a lot of autonomy to different teams to try a bunch of stuff. Yes, we do. And OKRs are kind of our framework for how we pull, how we make that not chaotic, if that makes sense. I like to think about there's, like the things that are important to be consistent across teams are the interfaces. Like you need to make sure that the interface between teams is consistent so that both teams know how are you- Can you be specific? What does that mean? How am I dependent on you? Or what is the API layer if it's two product teams that are building in the same area of the product? Or if it's design, what's the like ownership between, where's that handoff? Like what's the scope role, scope of ownership between two teams? So it's like, or to be another layer might be like, we use JIRA for doing a lot of our issue tracking and project management. And it's, there is some level of consistency that is important to have across all of our product teams using our project management software so that we can build some observability into. to the product development process across the whole company. So we can get a sense of where are we doing well, where are we not doing well, identifying issues where we might be over-investing in feature work, or under-investing in feature work, or tech debt, and things like that. So there's some level of consistency that's important, but we do generally get to sign them, or do people have a draft? They are picked, and we hire into them, I guess. So we'll create a lane at the leadership level of the organization, like, hey, here's a new opportunity we want to go after, here's a new area of the product that we aren't addressing, or part of the conversion funnel that we want to improve, Is there a team that someone's on that kind of stay with that team all the way through the life of Zapier? Mostly. They're long-running teams, I'll say that. Our earliest product team is only a year and a half, two years old. And some of those folks have shifted. We've had folks restaff from one team to another, where there was another part of the product they wanted to work on, and this person's a really senior-level experience at engineering. We've just brought in more of a staff-level or associate-level engineer. We want to get them to work together. Yeah, annual and monthly tends to be the two extremes. Annual, just to know, what are we working towards over the course of the year? What is our team trying to accomplish over the course of 2019? And then monthly check-ins against that, where they break those down. How does that workflow actually go down? This is still new to the organization, so I feel like I need to give the coffeehead that we're learning a lot still with this. We've been practicing with OKRs in 2018, which gave us enough confidence that, hey, this is actually a very effective tool for us to help align and allow all these different teams and people in the organization to be autonomous and default to action in the ways that they want. We wanted to start rolling it out to all the individual teams this year for 2019. Practically speaking, I think the best version of this, and this is aspirational, like we're quite there yet, is you've got some high-level direction being set by the leadership of the organization. What are we trying to accomplish? In Zapier's case, we're trying to build a piece of productivity software that anyone can use. How do we get Zapier adopted by tens of millions of people someday? You've got this high-level direction and strategy being set. There's a lot of work that is happening that needs to figure out, where is that aligned and how does that bubble up? There's a meet-in-the-middle approach where you want the work that's happening, 50% of it to be top-down driven, and I think 50% of it being bottom-up. In reality, exec team leadership is never going to have perfect insight into all the pieces of work that happen across the organization. Something like OKRs is particularly useful for us to define every piece of work you're doing. I think it's largely useful for helping you prioritize and make hard trade-offs and have discussions. This is one of the things that's great about writing down our process documentation in Zapier, writing down our decision-making processes, is when it's written down, you have something to debate about. I can go to you and say, hey, can we debate whether this is the right thing we should be spending our time on? It's so much easier to do that when there's an artifact that you're talking about, as opposed to a group of people with different ideas in their head about what is important to have it. It just removes this layer of conflict in the organization. Also, discussions can drift when it's not tied to the artifact. What other tools do you guys use? You use OKRs. But I remember in the early days talking to you guys, you guys built a lot of tools for yourself. I'm just wondering, right now, what's the most helpful tools that you guys are using, either that you've built yourself or that you're using from other companies? I actually built this one in the early days. We use Slack as our company office, for better or for worse. This is where folks usually log into in the morning. This is where work gets talked about. But one of the trouble with that, especially as we scaled, and any remote company or any team that uses Slack will be able to tell you this, it gets an overwhelming amount of noise in Slack. You are free to leave channels. In fact, we encourage it. That is fascinating. There's a feature in Slack where you can turn off the leave join notifications, and we turn that off. Because we wanted to give folks the social comfort to be able to leave channels without feeling awkward. That's how to be effective at using Slack. We set that expectation of that's how we use that tool. One of the things that was missing that I saw was, what is our more thoughtful, to use the Daniel Kahneman idea, slow thinking version of Slack? Slack is where work gets talked about. Where does our final work get talked about? Where are final reports getting shown to the organization? How do the right people get notified that I have something I need you to read and make a decision on or think about? This is where in the early days I actually got inspired by Nick Francis over at Help Scout. They were using a tool, another remote team called P2. It was a plugin for WordPress. It was kind of like a Twitter feed. Automatic was using this internally, and that's how they run there. We used it at Zapier for a good six months, and it was pretty good. It started breaking, and we wanted to customize it. As your company gets bigger, you're going to run into these new bottlenecks, and you can start layering in and customizing the tool instead of having to go throw the tool away and pull a new one in and relearn it. In the early days, P2 started breaking for us. It didn't tie into our auth system was funny enough the reason why I wanted to rebuild it. I built a version internally called Async, which is just an internal blog. One of the cadences we have in Zapier is every week we ask everyone to write a Friday update for what they worked on. This is kind of the heartbeat of the organization. It goes up on Async. You get to read everybody's Friday updates. You get to know every decision that's made, everything people are learning, all the work that's happening. You get to read all the information. You start to run into the same problems even Slack does where it's information overload. Because we own the tool, we can tweak it and tailor it to how we want to run the organization, how we make decisions, and how we want communication to work. We started building a default feed view where it was a curation layer in terms of who are your immediate direct reports, who are the folks you need to follow. You can create custom feed views to build the curation. We work with managers to onboard new employees to set up their views in the right way so that it's curated so that they get just the information they need. Does email have a specific role or is it kind of a catch-all for you? We don't send any internal email. Really? That's like my fantasy. Of course, we do email support. Basically, if there's any internal to external communication. When we're talking with our partners or with customers, obviously that happens over email. Internally, there is no email. We also use Quip for long-form documentation. It's a collaborative wiki, kind of Google Docs mixed with the wiki. And that's more for documentation? Yes. Documenting processes, hiring rubrics, things that need to live a little bit longer in the organization. Both Async and Slack are feed views that roll off. One thing people were surprised about with us at Wufoo was how much time we spent development-wise on internal tools. 30 to 40% of our development time was us building stuff for ourselves. It's why we were able to grow and only be at a 10-person company for so long. What is that ratio for you guys? Do you have special internal tools teams that Facebook is famous for? We did last year. We had invested in a tools museum which was helping scaling some of the Async software that we were talking about. I've been the internal tools manager for the last six months. We actually built our own OKR software into Async. One of the beautiful parts of it is when you're updating your OKR, it's got annotations that tie into the posts you're writing. We've got this nice long-running graph of, here's this metric I'm moving over the year. But right now it's kind of just organic, like teams make their own stuff. It does tend to be a little more organic. I'll say in the early days, I think we invested more time in internal tools and it's something I'd love to spend more time on. I remember this for us. A lot of our internal tools ended up being YC companies down the line in the future. More recently, most of the internal things that get built in Zapier today are apps on Zapier. We have a lot of folks in our engineering team and even more broadly on a support team and product team where we'll build features into Zapier by building an app on Zapier. This is kind of where some of the innovation of Zapier comes from. Quite a few of the most popular apps on Zapier were built by one engineer and a side project at a retreat hackathon. Just for fun, because it was like, hey, we're going to add this little bit of functionality to the product that doesn't exist. That's actually the biggest criticism for lots of corporate hackathons. People spend all weekend, get really excited, and they never make it to the light of day. We tried pretty hard to pick our hackathon projects and we curated them in a way that we thought that there was some value for customers in some format or would help customers in some way. What are the other things you guys do to keep employee and founder morale high across a remote team? Probably the biggest thing we do is we do two company retreats a year. Even though we're 100% remote, there is still a lot of value for getting in person. We don't discount that. You get to build relationships with folks and it allows you to assume best intent the rest of the year. When you're in Slack and you're working on that tense project and someone writes a message that might be a little more curt than it should have been, it's like, oh, I can hear their voice in my head. I know who that is. I understand who that is. I'm not going to jump off and assume that they were trying to be mean to me or something like that. There are issues that I think can happen when you are primarily using text-based communication tools, where you do lose a lot of that tone. You have to try really hard to use tone and that's one of the first things that can easily get lost when you're in tense moments. There is a lot of value for building in-person relationships still. We do two company retreats a year where we fly the whole company into usually some cool resort or hotel or place around the US or Canada. What do you guys do during that time? Is it just hanging out? Or I mentioned there's some structure. Yeah, we've tried a few formats. I mentioned the hackathon. We've traditionally done a hackathon most of the week and then we would have a couple days set up for teams to break out in their own individual silos. One of the things we do a lot is we run a lot of company surveys and we try to evolve and iterate how we run the company. What does it mean you do a lot? How often? Anytime we're doing a company-wide thing, there's probably going to be a survey sent out to get feedback so we can improve it for next time. Over email? There is an email, though, too. I'll admit that. You're not there yet. I still do keep my Gmail tab open. Every company retreat, there's a survey. We send out two company surveys a year. I ran a product all company survey last year, so we do a lot of that. It's way better to do it this way. This last time, the thing we experimented with was we added unstructured time. We had always planned every hour of every retreat to date. It's interesting that you didn't think about it earlier. We're in a remote mindset, which is design the process. I think some of our managers feel responsible to make sure their teams are taken care of and people know what they're doing and what they should be spending time on. From a management perspective, we were over planning all the hours. One of the things that that prevents is cross-team communication. What if one person from the data team and one person from support and one engineer had this cool topic that they talked about at maybe one of our unconference sessions and they wanted to go hack on an idea? There was no time for that to happen in the past format, because it was completely top-down planned. So we added these two afternoon sessions of unstructured time where we set the expectation that, hey, it's still a workday, but figure out how to best utilize this time with your team and your peers. Mostly through feedback at this point, I was anxious about it going in. We added this process in because of feedback we got before. I was still anxious that folks would not take advantage of it. I was worried that they would just default to what they would do if they weren't at the retreat. Yeah, work on my roadmap or work on support tickets in isolation. But we want to take advantage of the fact we're here. I overemphasized in almost all my conversations with the team leading up to the retreat to take advantage of the time. When I walked around and just observed the different groups of people that were coordinating in those afternoon sessions, I was surprised at how many people took advantage of the time. Given my anxiety, I guess, that it was not going to be. I think it shouldn't be surprising. When you're hiring a bunch of people who are default action, self-driven, etc., and then you bring them all together, they're going to do the right thing. It certainly worked out well, and I will continue to do something like that in future retreats. You guys have an interface that has to bridge hundreds and hundreds of apps together, and hundreds of different types of features together. It's so complex. I'm trying to think of doing that without people really close and diving deep on the problem. How does that work for you guys? What belief or experience do you have, Kevin, that says, I have to be sitting next to you in order to solve a problem like that? I think it's one of those things where, for design in particular, it's hard to point, circle, resketch, etc. There's some things that on pen and paper, in person, I can show. It's slower and more inefficient. I'm just wondering, is there things that you could do to compensate? You think about it differently. a lot of times with the team has been like the nine box design exercises. What's that? Fold your paper into like nine boxes and you have like two minutes to sketch nine different ideas of a solution and then you have everyone present their nine ideas and then you do like a remix usually for like a longer five minute session and you come out with a lot of just divergent ideas in a short amount of time and the time compression on being able to come up with an individual idea to like force folks not to get too deep in the thinking just like go wide instead of deep. I've run these over zoom calls where I'll literally ask. I did this with the entire company last year where a little while ago where I asked was like maybe the point 70 or 80 people everyone bring paper bring Sharpie and I gave the problem statement up front and everyone's like just on a zoom call with their video on like sitting at their table right now drawing on their paper and they'd hold it up and they talk about it and I had them take a picture and post in the slack channel. So there was like a fidelity version that they could see and they're holding it up and pointing to it. I actually see how that's stronger than normal design collaboration and when everyone's in a room, there's a pressure of like, oh, I can't I don't want to look bad or like if I'm trying to sketch and figure something out like it feels uncomfortable to do so in front of a bunch of other people so I can see how like having everyone separated it's like oh you're working in your own kind of say it feels a little bit more safer to be daring. Yeah, and there's like there were instances where I remember still having to like encourage folks like hey show it even if you think it's like bad because that's some of some of the things you think are weird ideas often end up leading to the right idea even if they're initially like weird will just trigger like a different way of thinking about a problem that hasn't been thought of before but we've so another process we have in addition to like doing kind of team exercises like this one of our more go-to processes that we've has been working really well for us the last last year was we were doing a a Tuesday Thursday essentially design review across several product teams so we would invite several product managers several product designers and the Tuesday Thursday cadence was how we built in that feedback we process where it's like okay I want to show something the team and get feedback on it get critique and then it's instead of only doing one a week where you'd have to wait a whole nother cycle there's a forcing function to turn around and iterate and go deep 48 hours to then turn around and show it back on Thursday that's and show it again so it's it's kind of like a bit of a mix where you still get that deep work in between the two review check ins but it's still on a zoom call well one of the things I like to ask people to do on zoom calls especially in design collaboration sessions is like don't mute yourself zapier is built up this interesting norms around like what what is zoom etiquette right like how to when done with yourself when to like jump on video all that kind of stuff so we kind of I have to like intentionally ask folks to like break that habit and say okay for this please don't give me a mute so to encourage folks just jump in right I want folks to feel comfortable not waiting to give their feedback but just like to generate a little bit more like randomness in that conversation I think this is probably one of the things that is very interesting about remote and you there's a question someone asked around like how do you be innovative as a remote company or how do you and there's some amount of like randomness that you I think is probably desirable in an organization certainly you don't want it to be fifty or a hundred percent random right you you want some low level of like randomness in terms of people talking to each other or what's being shared yeah I think they're kind of alluding to like serendipitous chance encounters right weird like you know water cooler conversation yeah one of the things we do is process we it's called a pair buddies we're actually three people in these now I've gotten big enough where we have a bot that randomly just picks people that are in a slack channel and says hey two people should there's three folks now should like here's 30 minutes to chat okay and the idea is like you don't know agenda just like a 30 minute call over share whatever you're working on and talk talk through some of those ideas I actually think this idea is interesting I actually think a lot of companies or organizations group over optimize for serendipity like they're like what about that chance one but to me like serendipity like we were like some random thing happened all of a sudden we have a great idea like that's like hitting the lotto and to me optimizing for the lotto is very weird 99% of the company is like we have a whole list of shit that we have to get done and so to me it's like optimizing for that should always be the first priority not for the off chance of these other chance encounters I'm always wondering like what is the right ratio because I think there is some I think back to our hackathons right where this is a totally individual driven thing and we had great things that got built that no one would have like top-down plan to go build and surprised us like in terms of how popular it became but I think it works out better when you build up a kind of pressure and then it needs like a release yeah like we're all of a sudden it's like oh this is my opportunity right versus like yeah well not forcing it just like oh let's like have it all together and then maybe something will sort of bubble up I mean to me like a lot of it ends up getting solved by just knowing what other people are working on which is a problem across every company I've ever worked at before it's like I have no idea what Kevin's done in the past two weeks right like I know Kevin's done been on the podcast very secretive yeah I know Kevin's like crushing email but what is he actually been doing we we don't have that problem we have the other other problem which is like I have too much I have too many opportunities to learn whether people working on it's like how do I carry it down to like all right who are the people I need to know about what's working on so that I can do my job effectively so kind of wrapping up I'm curious about like if I were to be starting out a remote company what's the framework you would offer to say like okay you should do X Y and Z things and set yourself up for success to really get the most out of this I think it is one of the reasons why it is so hard to add remote onto an existing company is because remote well when you see folks talk about it and ask questions about it's always very process and tools based I think the honest answer is that it's more of a cultural change than it is a process and tools thing so folks that are starting out actually I think are at an advantage in this fact because there is no culture yet like it is you or it is your you know co-founders or whatever and you have the chance to like set up the culture in a way that encourages things that are going to work in a remote organization so again thinking through things like defaulting to action and encouraging empowering autonomy and how are we going to make decisions and thinking through some of those things in the early days being explicit about writing down and sharing all the work that you do and building it a habit into the organization to write down everything that's done and share that with colleagues as opposed to relying on context sharing over like a zoom call that's a ephemeral and can get lost that those are like the cultural habits and norms that are a lot harder to change in the future because you need everybody doing and I think there's a structural advantage for folks that are 100% distributed that everyone's in an equal boat they're all in the same boat right I'm all in my home office if other people aren't doing that thing then I I'm not going to be successful or happy in my my own job so you can take advantage of that in the early days by like it's a lot easier to set those that initial culture upwards like okay we we do want folks to be individually empowered to make decisions we want to hire folks that have like demonstrated this ability in the past we want folks that are good at written communication that like over communicate even like one of the things I often tell new engineers that are joining zapier and product designers is I have to encourage over communication a lot again coming back to the default no one talks like it is more important and it feels awkward at first to like be just sharing a status update with like an empty slack channel or a slack channel where you're not expecting a reply like that takes that's a habit to build where it's like you have to realize how useful that is to the person on the other end where hey I might get blocked on something that status update gave four hours ago helps give me some context on something that I'm should be doing or how to solve a problem in a certain way that otherwise would get blocked on you know request response cycle from them and especially across time zones that stuff so yeah being just setting up the right values around like autonomy and written communication are probably the two most important you guys wrote a book about this right kind of we did yeah it's a e-book on running a remote company it's a couple I think it's a couple years out of date from a process standpoint but it gets like the cultural what's the biggest right there what's the biggest thing you wish you could update in the book so like one I mean biggest thing probably how we've scaled async would be what I would go back and like to add to it in there like the book was written at a time where we didn't we had enough people that could somewhat reasonably consume all the context that was published there on a on a monthly base or on like a daily basis or weekly basis that's not true anymore like we've had to be a lot more and thoughtful and intentional about what are the is it a push first pull kind of mechanism what's the deep what's the kind of algorithm that powers the default feed view that shows content that everybody should be reading in the organization on a weekly basis and then what are like thought leaders and other people in this space that you guys follow for and like inspiration that other people should definitely check out yeah there's several folks that are bigger than us that have run remote organizations it's kind of a little bit of rare air once you get beyond like 50 people though or even 20 people fully remote folks like get lab is bigger than us envision is another organization that's largely remote automatic is another early one that we looked up to I think the biggest thing again we took away from those was not from not a process standpoint or even a cultural value standpoint it was hey it exists this is not impossible right like someone has proved that it is possible we are not having to trailblaze the fact that like it is possible to have a company with that many people that's fully remote now they haven't slightly I'm all those organizations have slightly different value mechanisms that we do so like that's what we're gonna figure out as we scale is all right how does that how do we apply that size of the organization to where we're at but yeah that's the biggest takeaway I would say is like remote is possible there's very large organizations that are doing it so you're in good company if you decide to build a fully remote company that's a great place to wrap it up all right thank you thanks great thanks Mike"
  },
  {
    "name_video": "User you don't want",
    "description_video": "Many startups will take every user they can get in the beginning. But this may cause all sorts of problems. Some of them will try to hijack your product to solve a problem you didn't intend to solve. By and large, these hijackers are users you don't want. Learn how to identify and avoid this.",
    "related_categories": [
      "Product",
      "Building Product",
      "Customers",
      "Feature Prioritization",
      "Talking to Users"
    ],
    "page_url": "/library/67-user-you-don-t-want",
    "youtube_url": "https://youtube.com/watch?v=BSYExUUrmD4",
    "mp3_file": "downloaded/User_you_don't_want.mp3",
    "mp3_content": "Users you don't want. This one was contagious. Yeah, this was fun. Yeah, let's bring it back All right, when you're just getting started many startups will take every user they can get They have a strong idea of a problem and they want to attract as many users with that problem as possible Unfortunately when you open up the barn doors, you get all sorts of people with all sorts of problems Some of them will try to hijack your product to solve a problem You didn't intend to solve by and large these hijackers hijackers are users. You do not want When is this happen to you I Mean Justin TV was by definition hijacked Yeah Like we built a product to allow people to live stream their lives and within a year It was being used to stream copy and content around the world Absolutely And and and what's interesting is that I'm a little afraid of my phrasing here I Wish I didn't say that these hijack users are not are not users you want because it turns out that like Sometimes they are yeah, it turns out that like, you know The reason why we even had an inkling to do twitch was because some percentage of the hijacked users were video gamers And like it turns out that that could have been a much bigger community if we if we helped it and then eventually became one so This kind of like users using your product for a whole variety of things I like to think about it more like on a spectrum. Mm-hmm. Like there's the user who's using your product as intended Yeah, great makes you feel good. Maybe there's a business there. Maybe there is right? There's the user who's using your product in Interesting ways with potential. Yeah, right Study those users those users are very important video gamers and Justin TV. There are users who are using your product With ways that it's extremely clear to you that there isn't long-term value Even if there is short-term value, right? I'd argue that those were the copper and streamers on Justin TV There was short-term value because we could monetize with ads and so on so but long-term we weren't really creating value Yeah, and then they're like hijack users. I'd argue like those are users who are using your product and They're creating no value and they're probably actively do you like decreasing your value? They're there. They're harming your network, right? And like for us, you know, that would be people like Some people streamed like pretty horrible things on Justin TV, right? I'm like that was that was not good. And so What's interesting is that now when I talk to startups at YC? They Don't know how to recognize these hijack users and just kick them out Mm-hmm, and like they kind of like no one no one talks about these people. They always talk about like everyone before them Yeah, right which like those are users that have some value and I'm talking about the hijack users and it's like If you can identify the hijack users, you need to kick them out. Like they're actually Going to hurt you more than they're gonna help you And so I think this is important and I think that like it's not that the hijack users have like bad intentions even No, they can some do but some it's just they want to use your product to do what they want to do and That is literally going to hurt your business. There are some things that like if people do on your platform, it hurts your business How would you how would you classify? Someone who just takes up all the customer support time It Depends on how much revenue they're generating Yeah, right like I'd argue that if they are generating enough revenue to justify that support time great Yeah, if you have a free product So much so much probably right, especially if you're not learning if they're taking up a bunch of your support time But you're learning and like you're actually improving your product because of it great But like for example, like let's say I'll create like a hypothetical example top of my head, right? Imagine that I'm in the beginning of Airbnb Someone wanted to use Airbnb to host like drug parties Right, like a legal drug parties like crack parties And they thought of these Airbnbs is like mobile crack den right Well, let's think about this for a second like so on one hand right well they are paying Yeah, they're paying for the big apartment they're paying for the nice places, right? Yeah, they're they got money, right Interesting the other hand they're probably destroying those apart Doing something highly legal. Yeah getting the police called on them like dead headed out, right and it's like These are hijack users. Like these are not the types of people you want and like You can be a hijack user and there's still some positive Yeah, but it's just a gift. There's like way too much negative. It's not worth the positive, you know And that's actually where I see a lot. I actually see it a lot where it's like the hijack users paying So you feel bad because when the hijack shoes is not paying usually you feel less bad kicking around here Yeah, when they're paying you're like well, but they're paying right and and you and it's like no You still kick him out. Yeah, especially in the context of like you have these metrics you want to hit and you know Yeah, right, oh my god like like this is real this is stuff it's like Shut it down. Yeah Yeah, and you end it in a nice clean way by saying by focusing on solving one problem really well You're betting on making a small amount of people very happy If you let any user that walks in the door the product roadmap You're going to end up doing shitty job at so half solving a lot of problems. Yeah, I mean to be clear with this ending My whole goal is that like like I said, there's like this spectrum of potentially useful users Yeah, my whole goal is like don't let the hijack users steer your product roadmap totally like the it's really Totally, okay If you want to explore some of those use cases that are not the use case that you thought That are still use cases that like could could be good for you Huh, then it's a totally okay to explore to experiment so and so forth But it's like don't let your app like don't let the crack den guys on Airbnb Control the product roadmap for Airbnb right and suggest the features that they want like right now not where you want to go I mean, this is sort of the mentality It's like at the end of the day you have to have some opinion about your product Yeah, you can't just be like, I don't know like the markets gonna take it wherever the customers take it wherever Yes, it's in really hard to build product without some opinion. Yeah You"
  },
  {
    "name_video": "How to cold email investors",
    "description_video": "The best way to communicate with investors over cold email is simple: make it short. Your goal is to get a reply. Here are a few components to also include and consider to optimize for this.",
    "related_categories": [
      "Fundraising",
      "Investors"
    ],
    "page_url": "/library/65-how-to-cold-email-investors",
    "youtube_url": "https://youtube.com/watch?v=A3MmYbH1hbs",
    "mp3_file": "downloaded/How_to_cold_email_investors.mp3",
    "mp3_content": "Founders often ask me how to cold email an investor when they're interested in raising money and I receive Tons of cold emails from founders and I try to actually reply to all of them Here are some tips on some things you should and shouldn't do when cold emailing an investor First the do's make it short If you send me a wall of text if you send me an email that takes two to five minutes to read It's really hard for me to read it in the normal course of me doing my work And so oftentimes I'll start it save it for later And then it's not clear when I'll get back to it If you can make your email something that I can read in 60 seconds or less You can pretty much guarantee that I'll read it and that's the most important thing You need you need not to sell me on writing a check and investing in your company You need me to just read What you're working on and understand what you're working on enough to want to reply back The second thing that's important is that in that short email there's some things that I'm really interested in knowing The problem that you're trying to solve What your solution is have you launched or do you have any growth at all? How big do you think the market could be? Do you have co-founders and do you have the ability to write code? and do you know something about the problem or the market or your opportunity that you feel like is controversial that other people don't know or wouldn't agree with Those are the things that I'm most interested in understanding. I am NOT Interested in a long history of how you came up with the idea What I don't need is a story or a narrative in the beginning What I first need is just raw facts It's even more important that you don't use jargon One of the things we say at YC all the time is there's a difference between a customer pitch and an investor pitch When talking to a customer or user they know the jargon of your industry When talking to investor you have no idea whether they know So make sure using simple language language that you can use with any friend that you have regardless of whether they're in your industry The next thing is send your email from a company email address And an email address that has your name in it. You'd be surprised at how many emails I get from Oftentimes really weirdly formatted personal email addresses So I can't tell what the person's name is or like an info at email address Which just I don't know what it is, but it's just kind of weird to like get an email from a person Talking about their company not from their company email address. It just it sets things off the wrong way Also, most investors using some type of tool that gives them information about the person who's emailing them You know reported or superhuman or so and so forth And if you don't send email from your actual email address you use I don't get to see that information The next is that it's fine to attach a deck to your email, but it is not required What I will tell you though is that there are extremely common formats For decks that investors in Silicon Valley are used to Please do not attach a deck that lives outside of that format If you have any question about what that format is just Google search Airbnb's Fundraising deck and that'll give you a basic look of what a deck looks like What's interesting and what I've learned is that in different industries decks look completely different So if you're from finance or from marketing or from any other number of industries There's a style of deck you might be used to that could be completely different from what startups normally pitch with So just copy the template from a successful startups deck Don't roll with what you're used to in another industry The last thing is track opens if you're emailing investors track the open rate and Make sure that people are actually seeing your email Now here are the don'ts Some of the don'ts are the opposite of the do's don't make it long I'm saying this over and over again because the most important thing you want is a reply The most important thing you want is the beginning of an email back and forth Oftentimes founders trying to shoot for too much in that initial email exchange. They want a meeting. They want a phone call They want an investment and in reality what you want is a conversation Once we're in a back-and-forth That's when I can ask questions. I can learn more about your business. I can learn more about you We can kind of go back and forth and kind of develop a relationship so make sure you're not making the email so long and so thick and so jargony that I'm just like It's too much of a burden in the moment for me to reply We're really looking for is that like I check my email all the time every day like Can I see your email be interested and reply all within the same? Let's say 60 to 120 seconds. That's what you're looking for. And if you have any Confusion about how long your email is write it and then read it to yourself and record yourself reading it pretty simple, but it works Next is that don't immediately request a In-person meeting many investors have very different styles of how they like to do their first engagement and Reality if you say something interesting the investor is going to want more information The best was going to want to continue the conversation if you are perceived as just pushing for an internal in-person meeting the it's more often than investors going to think oh, well, I Don't want my arm to be twisted in a meeting where I don't know whether it's going to be high-quality meeting And so I feel a little uncomfortable The next is don't send multiple follow-ups quickly You can trust that if your email is short and you have read receipts track opens You know whether someone's read the email or not And once they've read the email they have made the choice on whether to reply to you now or apply to you later And so you don't need to hit them over the head with multiple emails And then the last thing and the most important thing is you don't This is a double negative. Don't not describe what your company does You'd be so Shocked and how many emails I get Basically saying Michael I'm coming to town I'd love to meet in person for an hour and so I can tell you what I'm working on That's the exact wrong order of operations what you want to do is you want to say Michael I'm working on this really interesting thing Bam Bam Bam Bam Bam and then get me to reply back to you Right, that is the right order, right? You want me to be the one seeking more information for you? You want to kind of put something enticing out there and have me come to you? That's what gives you leverage as opposed to saying to me Michael The only way you're ever gonna learn what I'm working on is to meet me for an hour for lunch Well, you know now that bar is a lot higher for you to get that meeting So that is some advice on how to cold email an investor. Thank you You"
  },
  {
    "name_video": "What makes great founders stand out?",
    "description_video": "It's a short list: Good communication. Great execution. And motivation. Being relentlessly resource creates formidability. Here's why.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology",
      "Motivation"
    ],
    "page_url": "/library/64-what-makes-great-founders-stand-out",
    "youtube_url": "https://youtube.com/watch?v=ZtfTOuSHGg8",
    "mp3_file": "downloaded/What_makes_great_founders_stand_out?.mp3",
    "mp3_content": "One of the questions I get often during the batch of YC is what separates out a top 10% founder versus everyone else When I started at YC, I didn't really have enough context to know As a founder of my own company, of course, I had my own friends, but that was a relatively small sample size Over the last 13 batches. I've gotten to interact with about over 2,500 founders and so I've been able to get Slightly stronger opinion about what makes great founders stand out The first thing that I'll say is great founders execute and I'll be really specific about what that means When I do office hours with the great founder and they say they're going to do something two weeks later They've done it and they've learned something And they do that Consistently they have the consistent ability to say what they want to do Do it and then learn from that that doesn't mean that what they wanted to do is correct It doesn't mean they want to continue down that direction But they never get stuck in the execution step They never say I want to do this and then come back two weeks later and say oh we couldn't do it They always figure out a way to get some version of it done and then learn from it The second thing and really derives from the first is formidability They're formidable one of the things that happens when somebody says they're gonna do something and then does it over and over and over again is that you learn that that person gets shit done and It's pretty intimidating to work with someone who's constantly getting things done not intimidating in a bad way but intimidating in a way where they demand respect because they get shit done and So when you talk to them you treat them with more respect you treat their goals with more respect because you think they're more likely to accomplish them and You treat their task with more respect because you know, they're going to do them So the ability to execute creates formidability formidability is extremely important The last one and one that I didn't understand until doing many many YC interviews is communication I used to think that you could just execute well and not have to be able to communicate but the problem is that startups really require Good communication communication with your users Communication with potential investors with your co-founders with potential employees in effect A founder always has to be talking about their business and getting people excited about it The number one mistake I see founders making is they can't actually explain what their business does the best founders Can in one or two sentences explain exactly what their business does and they can explain it to a customer They can explain it to an investor. They can explain it to their mother They could explain it to anyone of any level of knowledge about their industry and they can do it without stumbling and I think that's Ridiculously important because in order for you to get advice investment to convince someone to join your company They first have to understand what you do and you would be surprised how many founders Can't clearly explain what they do well enough so that they can start selling you on how you can help them or join them So once again, the three most important things I see That separate out top 10% founders from everyone else is first ability to execute Second the resulting formidability you've got to respect them more And third their ability to clearly communicate what they're working on now if I were to add a fourth bonus one It would be And this is a little bit strange but internal motivation Another way of saying it is that they don't get too discouraged when things go wrong. They stay motivated Startup is a game where you're going to fail all the time. You're gonna make bad decisions all the time you're gonna have strong hypothesis that turns out to be wrong and There's a type of person who doesn't get discouraged even if they make the wrong move five times or five times in a row They stay passionate about the problem. They stay passionate about trying to find a solution and they keep on executing moving forward being motivated in In the face of Defeat or failure is an extremely important thing for a startup founder to be able to do so I said three, but I cheated it's for execution the formidability communication and motivation Those are the things that look and then make top 10% startups Startup founders stand out One thing I didn't say was idea it is Usually very hard to tell whether in a very early stage company has a good idea It's very hard. And so I never use idea to separate out Great founders from anyone else because I'm not the arbiter of what a good idea is and I don't have perfect experience in every problem so whenever I kind of Overthink. Oh, it's just a good idea or not. I can get stuck in my own head and I can also Pretend that I know more than I do. So try not to focus on idea. Cheers"
  },
  {
    "name_video": "Why fundraising is different in Silicon Valley",
    "description_video": "Investors are not spread evenly around the world; they are concentrated in Sillicon Valley. Each has much more likely passed on a big deal and it will make them pause each time moving forward. This means there's a different, more positive mentality to funding startups.",
    "related_categories": [
      "Fundraising"
    ],
    "page_url": "/library/63-why-fundraising-is-different-in-silicon-valley",
    "youtube_url": "https://youtube.com/watch?v=oAEZoAp2_zY",
    "mp3_file": "downloaded/Why_fundraising_is_different_in_Silicon_Valley.mp3",
    "mp3_content": "The other day I did office hours with a YC company and they were very concerned about fundraising because they had tried really hard to fundraise in their local community. They grew up in North Carolina and it was impossible for them to raise any money. So they said to me, Michael, how do I make sure that we can actually raise money out here in Silicon Valley? And they were so concerned to the point that they were overcorrecting based on the feedback that they got from their angel investors in the local community. The feedback that I gave him is that unfortunately investors are not spread evenly around the country or around the world. And there's something interesting about investors in the Bay Area that's different from investors in other locations typically. In the Bay Area, if you're an early stage investor for long enough, you will have said no to a number of companies who have gone on to be very successful. That gives you pause every time you meet with a new company. That lets you think, hmm, this company might be a good one. I should pay extra special attention. I should really dig in. I should really learn a lot before I make a decision. Unfortunately in many other parts of the country and the world, if you're an angel investor, you don't see as many deals and you don't see as many good deals. So it might be the case that almost every time you've said no, you've been right. So think about this dichotomy. If you're in the Bay Area for long enough as an investor, you've said no a bunch of times and you've been wrong. If you're outside of the Bay Area, it's much more likely that every time you've said no, you've been correct. So the mentality of the investor is completely different. The result is that the investor in the Bay Area or any really active startup community is much more likely to not dismiss an idea out of hand. They're much more likely to give you the benefit of the doubt on your idea and dig into how you plan to execute, how you plan to monetize, and how big the idea can get. Whereas I notice it's far more common outside of strong startup communities for the investor to try to debate whether or not the idea is a good idea. What I've noticed looking at literally hundreds and hundreds of thousands of YC applications is that my ability to figure out what ideas are good or not is much less sharp than my ability to figure out is this team executing. And so I much rather use the is this team executing bar to choose companies than the idea bar. So this is a long way of saying if you have been discouraged fundraising in your local startup community, that doesn't necessarily mean you've got a bad idea. That doesn't necessarily mean you should quit. Maybe you should consider trying to do that same fundraise in the Bay Area or in a larger startup community with investors who might be a little bit more afraid to say no without digging deep into what you're working on."
  },
  {
    "name_video": "How to build product as a small startup",
    "description_video": "Founders tend to debate more than build and iterate and get stuck. Here's a process to try to get product out of the door quickly.",
    "related_categories": [
      "Product",
      "Building Product",
      "Founder Psychology",
      "Decision Making",
      "Feature Prioritization",
      "Growth",
      "KPI",
      "Management"
    ],
    "page_url": "/library/62-how-to-build-product-as-a-small-startup",
    "youtube_url": "https://youtube.com/watch?v=kzVvjKLdAbk",
    "mp3_file": "downloaded/How_to_build_product_as_a_small_startup.mp3",
    "mp3_content": "A lot of the problems that I faced in the early stages of my companies were because I didn't have a process to get product out of the door. Instead, me and my co-founders would have long debates, which would often turn into arguments, we wouldn't write clear specs, we wouldn't hit our deadlines, and we would get very discouraged. Over time, I realized that very few people actually teach you how to get product out the door. They tell you it's important to push, but they don't really explain how. So here's the process that we came up with at my last company to try to get product out of the door quickly. Needless to say, you don't have to copy this process exactly. In fact, you don't have to copy any part of this process. But what I'll tell you is that one of the more formal first processes that most good startups have is some process for getting product out of the door. Okay, so this is what we did. First, we figured out that we wanted to release our product once every two weeks. We had an iOS app, it required getting approval from Apple, which took some time, so a two-week product development cycle made the most sense. Second, we dedicated someone in charge of product. That was me. To be clear, in charge of product doesn't mean they get to decide what's being built. What it meant was that they were responsible for making sure that we met the goals of our development cycle and that we got product out the door. Third, we established what our KPIs were. Our KPIs in that company, the first one was new content created, the second one was new users, and the third one was retained users. The next step was that whoever headed up product would create a theme for this product development cycle based on the KPI we were attacking. So let's say this week we're attacking, how do you retain users? We would bring all people in the company together, which at this point was tiny, it was like four or five people, and we'd have a brainstorming session. What we told everyone was that the product development cycle would start with a product meeting and it'd be the only formal meeting we'd have. But it had to go as long as it took for us to come to conclusions. So only one meeting, but we have to get to a conclusion on what we're going to build. So at the beginning of the meeting, what we did was we had a big whiteboard, and the whiteboard had three different categories on it. New features, bugs, and tests that we wanted to run. Then we went around the circle and everyone came up with whatever ideas they thought would move our KPI, remember, would move user retention. Every single idea was written on the board. No idea was debated. It was not the time to shoot people's ideas down. If you had a question about what the idea was, someone could clarify it more, but otherwise people would say it, be written on the board. Of course, it was written in one of these categories. Is this a new feature or an iteration existing feature? Is this a bug or is this a test? The cool thing about putting bugs on that list is that oftentimes bugs are the things that are preventing you from growing or preventing you from retaining users. And oftentimes they're kind of put in this weird maintenance category and they don't get done. With us, bugs were actually put directly in the product development cycle. Awesome. So once that brainstorming was done, you had a whiteboard full of features. Full of things that we could do. The next step in our process was called easy, medium, hard. So we had a variety of people in our team, some more technical than others. And sometimes it was hard for people to understand how easy or hard their idea was to actually build. So you go through a process of easy, medium, hard, that's headed by whoever's leading tech at the company, where they basically grade the ideas based on whether this could be done in a couple hours, whether it would take half a day, whether it take multiple days. Easy, medium, hard. Now, once you see all the ideas on the board, first of all, you feel included in the process. So every person in the company feels like they've been involved in the process of coming up with what we're going to work on in these two weeks. Second, once you see other people's ideas, you start thinking, hmm, maybe some of them are better than mine. Maybe I want to back some of these other ideas instead of my own. And then third, once you see easy, medium, hard, that's when things get really fun. Because suddenly you realize that maybe one of the best ideas on the board is an easy idea that's fast to build. And maybe the idea that you were pushing was a medium or hard idea that's slow. So suddenly you have this kind of objective framework to look at what's going on and to figure out what to build, as opposed to just arguing based on what you believe or what's in your head. Then the next step in our process is what was called pick the hards first. With a small team, you could probably do one or two hard tasks during a two-week period of time. So it's easier to debate just the hard ideas because once you see those medium and easy ideas that might be more effective, a lot of the hard ideas fall by the wayside. Once you've picked the hard ideas that you want to work on, then you pick the mediums, then you pick the easies. You write those in a list and the very, very next step while everyone is in the room is to spec those ideas out. What you need to do is basically write up exactly what you want to build around that idea and exactly who's going to be responsible for what part. You do that in the room so that there's no confusion about what's going to be built. And then you put that spec in whatever product management system or software that you're using so that everyone can be looking at the same document and everyone is building the same thing. Then once the meeting's over, you shut up and get to work. You don't continue to debate. If your idea didn't get built, that's fine. Suck it up. There's going to be another product meeting in another week or two where you can bring your idea up again. Even better, maybe you can go into your analytics system and find more evidence for why your idea should be built. Either way, because you know that another product development cycle is coming up soon, you don't have to hold on to the baggage of not having your idea being picked. As the product person, especially a product person who isn't an engineer, it's even more important to shut up. Don't change the spec. Don't change what people are working on. You have this fixed period of time. And the most important thing is to get product out the door into customers' hands and then learn from them. And if you have confidence the development cycle is working well, you'll know that even if this cycle doesn't produce the results you want, the next cycle will or the one after. For us specifically, doing a mobile company, the last part of our product development cycle was testing. It's kind of hard to push bug fixes out on mobile apps. It takes some time. You have to go through Apple approval. So you have to be a little bit more careful about testing. For us, testing was a full-team job because everyone hated it. So what we did was we had a long list of things to test that was historical. And then every time we did a new release, we added things to that list. And then we had a saying, everyone tests. As a result, all the engineers and everyone else in the company, we all tested everything in that list. Once we found bugs, we wrote them down. We tried to figure out how to repeat them. And then only after all the testing was done would the bug fixing be done. As a result, everyone sucked up the painful part of testing together. So this was a product development cycle that we created. It worked very well for us. I don't know whether it'll work well for you, but I can recommend that you create some sort of cycle with some sort of cadence as soon as possible. Thank you. Thank you."
  },
  {
    "name_video": "Order of operations for starting a startup",
    "description_video": "When and how should you start a startup? This guide will help you walk the path from nothing to a launched minimal viable product (MVP).",
    "related_categories": [
      "Becoming a Founder",
      "College Students",
      "Product",
      "MVP",
      "Startup Ideas"
    ],
    "page_url": "/library/61-order-of-operations-for-starting-a-startup",
    "youtube_url": "https://youtube.com/watch?v=5fmDKGV0TnQ",
    "mp3_file": "downloaded/Order_of_operations_for_starting_a_startup.mp3",
    "mp3_content": "One order of operations for starting a startup. More often than not, when I talk to a talented technical person who's thinking about becoming a founder, they're number one blockers that they don't have an idea. At some point during their formative years, they learn that every great startup started with a great idea, and if the idea isn't amazing, usually as judged by peers, parents, or other people with little startup experience, the startup will fail. I think I've read that before. I wrote this because this is the number one excuse I hear from people who want to start a startup. And it's so interesting to me. I think that there are all of these old entrepreneurial rules and business best practices that I think that people just want to apply hand in glove to a new industry. I think tech startups might be a little different. And so interestingly enough, I don't even think people are really taught how to find ideas. I feel as though people are sitting there saying, I don't have an idea, and they don't even really understand a process by which to get one. They think they think that it's supposed to happen organically. It's almost like out of the cartoons what I wanted to do with this essay was give people a framework that they could try to use to come up with an idea. So instead of this being a passive process, it can be an active process. I think one of the things that might be hard for people to see is now being in this world for so long, I have a lot of friends who wanted to do a startup and didn't know what they wanted to do, so you break it out into one, two, three, four, several steps. I'm going to outline it and then we can explain. So the order of operations. Here's where I'd start. Is there any particular problem that you're passionate about? The next step. Once you decide on a problem, find some friends and brainstorm potential solutions and the way to turn it into a fire is to work together and build and launch an MVP. That's basically it. It's not that complex. It's hard, but it's not that complex. No, it's not. So let's start at the beginning. Particular passion. I'll give you the conversation that I had with a founder. I was at a conference over the weekend called Afrotech and there were a bunch of young people who wanted to start companies there. This woman walked up to me and she said, I have an idea. I'm doing a startup that helps other startups. I call this a meta startup. This is a startup that I don't like because in some ways I think it's like a cop-out. But I haven't really done a startup myself. It's not great. So I dug in. What's a problem that you have? It was interesting. The woman was a mother and she said, one of the problems I have is that there are a lot of places where I don't know if I can use my stroller with my baby or if it's hard to get around or if I'm walking on the street. Does it have the proper sidewalks and so on and so forth. So I'd love some type of product that would tell me what path I should take that's stroller friendly. And I said to her, we're getting somewhere. Now we're not in this meta idea. Now we're actually solving a problem directly. But I asked her, how frequent is this problem? And she said, well actually, when I'm in an area that I know, then I know where to walk, I know how to do it. It's not that frequent. And how intense is this problem? It's like, well, you know, if I have to go over a curb or something, it's pain, but it's not intense. And I was like, you know what? A lot of people have that problem. That's a big problem. And I felt my douchebag investor go up. It's like, yes, you should do that. That is a problem. Even if you have solved that problem, you're going to be wildly successful. There are gajillions of people who have that problem. I somehow condensed all of the startup advice that she'd been given and everything she read to go to this wrong place when I just asked her, what's the problem in your life? And she almost immediately got to a place that could create real value. Now how should she solve that problem? Okay, yes, that's another question. But damn, it's a personal problem she has And at least if it's helping her, she knows it's halfway decent. So that I got to a really exciting place by just digging into what sucks for you. I think everyone can do that exercise. And I think that exercise can be informed by your work life or your personal life. So many startups I see were created because they were doing something at work So it can apply either way. And this is a very easy way to get people to pay you. Whereas doing things like strapping a webcam to your head, not as obvious of a problem. Pretty non-obvious. So once you find a problem, find some friends and brainstorm potential solutions to the problem. You don't need to skip to a solution too early. Whatever solution I come up with is probably going to be wrong. So what my solution really is, is a first hypothesis. And basically it's like, imagine I'm trying to I don't know, like redo some famous science experiment. Like I'm trying to figure out the speed of gravity or something. I first have to start with a hypothesis, then test, and then repeat, repeat, repeat and plug to my answer. I don't need to know the answer up front. Like that's not the goal. If you have a big enough problem, trust that if you come up with anything resembling an answer in a reasonable period of time, years, you have a big business. So instead of thinking, okay let me come up with an idea how to solve it, I think the more important thing is to start talking to other people about it. One of the top three is to have some co-founders. And it's really helpful to figure out who are the types of people who you can talk to about something and you riff well. There's some type of people you brainstorm with and I say, Craig, wouldn't it be cool if the sky is red? And Craig says, no. And that's the end of the brainstorm. As opposed to like, wouldn't it be cool if the sky was red? And Craig says, you know, we can't make the sky red but what happens if we tint all the windows in the house red so you can make it look like the sky's red? So you want to start having those conversations with people that you like. People, if you're not technical, people who are technical. People who you just respect their intelligence. And together you start coming up with an idea. And what's cool about that is that if you come up with that idea together everyone you've been talking to feels some ownership of the idea. And that helps kind of light that flame. Yeah, it's dangerous to be married to a solution. That is a real problem. Alright, so at this point, the most important thing is to turn that spark into a fire Boom, so biggest mistake that people make at this point is to think that the things they need to do is like, now I feel like some weird phantom MBA starts whispering in their ear. And it's like, you need to incorporate, you need to raise money, you need to da-da-da-da. It's like, kick that person out. That's not what you need to do. Can you just build a simple V1 of the product? Give it a try. The way to get that team even more excited is to try something. And oftentimes I see people kind of get lost in that legal or that fundraising world and never even got to give their thing a try. You don't need bank accounts to give something a try. You don't need an incorporation to give something a try for the most part. The way that you can really get that team solidified is just to get some kind of MVP and get one customer, two customers. This is one, the final test on like, hey, can we work together well? And two, man, it amps up the excitement a lot. And so that when you have to go through some of the bullshit of incorporation and stuff or fundraising, the excitement level's high. It's good to like to talk to you and if you just have an idea. Especially people who are on the fence about working with you. All of these things that you're saying, these are all excuses you create because it's easier than working on the actual problem. Well, yes, for some people. But I also think for some people some people are being, I don't know, some people are kind of being disingenuous in this process. But I think other people actually think, oh no, the right thing to do is actually to come up with an idea, fundraise, outsource an MVP, and then hire a team. Some people think that's the right thing to do. And it's like, the harder, that's a harder path. You don't have to do that. All right, so then you wrap this essay up with a couple things. The two failed orders of operations. Well, these are two of many, I suppose. So one, come up with an idea and then pitch to investors. Two, I have an idea but can't write code and none of my co-founders can either. Yeah, so we're in a time where there are a lot of startups. Unfortunately, people that you're pitching, if they're good, they're getting pitched by a lot of people. So you need to bring some real fire to that meeting. And a good deck is no longer good enough. I would argue that back in the day, like in the 90s, it was so expensive to get software made and host it online and get users that a good deck, or actually back then it was like a 100-page business plan, that's all you could get. That's all you could do without money. We're not there now. And so you're not bringing the fire if you just bring in an idea. Now some people can raise on just an idea, right? And if you're one of those lucky people, it's great. But I don't know, I'd rather be good than lucky. In terms of no technical co-founders, I'm surprised by this. I talked to a friend the other day who is thinking about starting something and doesn't have a technical co-founder yet. And even she was a little concerned about getting one, even though she's kind of been in the tech startup world. And I had to encourage her, I had to tell her, no, you can, you can do this. Not only is this not going to be that hard, it's easier than outsourcing it. The one thing that I see a lot is that I see people who can raise a little bit of money, go down the outsourcing route, and believe that they are progressing. They believe that the thing is moving forward. And what they don't realize is that, for the most part, they're going to need to iterate anything that's created by those outsourcers over and over and over and over again. And it gets pretty expensive pretty fast. And so the thing that I see so constantly is outsourcing, iterating with that outsourcer until you run out of money. You haven't figured things out yet. And so you have to go to an investor and say, well, I don't have anything, I need more money. And that's death. And what's so sad about that death is that often you don't realize it until the very end, and after you spent money. And sometimes it's people's own money. They do their savings, they hand their savings to these people. And I don't think the outsourcing folks are bad or morally wrong. I just think that people should take the hustle that they have and apply it to the number one problem. It just turns out that getting a technical co-founder to push back, if you had someone outsource something and then that got you a couple customers and then you found a co-founder, that's a great outcome. Well, it's interesting because I think that a lot of people go into the outsourcing route with that intention. But the thing that they don't realize is that they didn't feel comfortable going and finding a technical co-founder now. And they don't have any traction, and they don't have a product. Most likely the outcome is the outsourcer will give them a shitty product, a shitty V1. They won't have any users then. And now they'll go after a technical co-founder with a shitty product and no users and less money. And they want to give the co-founder 10%. They're not actually in a better position. There are people who do go from a contractor to a big company, but I would argue it's a harder path. And it's a path that's much more likely to lose you a lot of money. Thank you."
  },
  {
    "name_video": "Should I start a startup?",
    "description_video": "Are you cut out to be a startup founder? Here are some questions to ask yourself.",
    "related_categories": [
      "Becoming a Founder",
      "College Students"
    ],
    "page_url": "/library/60-should-i-start-a-startup",
    "youtube_url": "https://youtube.com/watch?v=qh8sHetf-Nk",
    "mp3_file": "downloaded/Should_I_start_a_startup?.mp3",
    "mp3_content": "All right, Michael Seibel, so today we're going to do something different and talk about a few of the essays you've worked on in the past. I think these are maybe the past two years. So the first one is, why should I start a startup? You start this essay by saying, a lot of people ask themselves this question. They often mull over one or more of the following facts. One, the vast majority of startups are not successful. Two, for talented technical people, it's relatively easy to get a job and make a large salary. And three, large companies offer opportunities to work on very difficult problems that only often occur at scale. My answer to why you should start a startup is simple. There's a certain type of person who only works at their peak capacity when there is no predictable path to follow. The odds of success are low and they have to take personal responsibility for failure, the opposite of most jobs at a large company. Why did you write this essay? There are two reasons. One, I talk to a lot of smart technical people who I think sometimes feel like they should start a startup, but they're conflicted because they either don't know if they have a good idea, don't have an idea, don't have a team. What should my real career path be? When I first started giving people advice, I think that I really assumed that because you could start a startup, you should start a startup. If you have the money to afford, if you have the time, if you have the ability, you should be doing it. I quickly realized working at YC, that's a bad idea. I think what I quickly realized is that there's probably three sets of people. There's probably the set of people who the only thing they can really do is work in a radically entrepreneurial job. Literally, they will not enjoy their life inside of a big company, inside a big bureaucracy. Back in the day, those are the kinds of people who would start small businesses. There's that type of people, and they're relatively few and far between. I wouldn't be surprised if that's only 1% of the population. The second group of people are the people who are on the fence. They want to be really challenged by work, but they can easily apply themselves in either a small world or in a big company world. I think those people are the ones where they have some choices to make. I think a lot of people confuse themselves for this group, when in reality this group is also probably pretty small. And then there's the last group. I think it's a really small group who can actually be equally capable in either role, as a founder or as a really effective person inside of a big company. I think you do see this. Founders who get acquired, who are actually really functional inside of big companies and vice versa, exactly go out and start companies and they do well. They are going to operate best within a large company. The mindset of this type of person, at least from what I've seen, is they want a system to optimize. They want an existing system, an existing path, an existing set of rules that they can operate and play by. Kindergarten through 12 has this, even college has this. Someone else defines what's an A and what's an F and then I optimize. I don't think that there's any moral judgment to be passed. I think that if most people didn't feel that way, the world wouldn't work. But there's a smog of people who feel like, so I think that when someone's thinking about whether they should start a startup, they should really be intellectually honest with themselves about which of these groups they're in. And anyone who's trying to guilt trip them into one group or another, it goes both ways. I, in the past, would guilt trip people to be a founder. You have to go deep and really understand. No, I haven't. I read it in college, so it's been a while. A lot of people who are, you could say, craftsmen, often think that they want to become entrepreneurs but they don't realize that as soon as they enter the entrepreneurial realm, most of their job is no longer there. I think this is a common thing and it's why these indie hackers are so, people love them so much. And even more so, what's so sad is that as a founder, almost by definition, you have to keep on doing things that you suck at and be totally okay with it. It's rare that the founder who's really good at something can delegate so well that the thing they love is still the thing they do forever. You get to this at the end. We've had some time since you wrote this one. How do you decide if you're in that 2% of people? I can answer this for myself better. The questions that I asked myself was, where am I at my best? And where do I feel like I'm organically applying effort? I'm 100% self-motivated. I have enough life experience to know. And certainly anyone who's 30 or 30 plus definitely has enough life experience to know. In what types of situations am I just naturally, extremely motivated? The other kind of question I'd ask, which is an extension of this, is if I think about the moments where I outperformed. I delivered the best results. I did the best. Where does that happen? When I think about those moments for myself, they never really happened in the truly structured things. Super honestly, when do you really kick it into high gear? That's when you can start asking this question of yourself, who should I be and what career track should I take? One tricky bit here is you have to be really careful about taking advice from biased people. When I was giving founders this advice originally, I was so biased. I was like, well, I'm at YC. I want you to be a founder. Previously giving advice was very self-serving. I think that a lot of young people are looking for advice givers and are not doing a good job of identifying bias. They are generally believing the information that they get from either their peers or from companies that they work at. They don't realize those people are biased. The most prestigious jobs are jobs at Facebook and Google. That prestige has actually very little to do with any facts. It actually reminds me of when I was in high school and the crew that I was in, the job everyone wanted to do was be a lawyer. But then if you ask people, do you actually want to do the work of a lawyer? You're describing Model UN. Similarly, when I talk to my brother and I go to MIT, I meet all these people who have created this imaginary world where when they get to go to Google, they're going to be on the machine learning team and they're going to have high impact from day one. When you're on the other side, that's often very rarely the case. What I would encourage people to do, having been an offender myself, is to just really look for the bias in the person who's presenting you with options and advice. Understand that Google is operating a machine that allows people to work on the hardest tasks. But the other purpose is to get people who are smart and talented so that they're not working for Google's competitors. The last purpose is to get people who are smart and talented so they're not creating companies that will compete with Google. I'm totally offender of this as well. They seek people for advice until the person gives them advice that corroborates with what they want to hear. Sometimes it feels like you've got to do some living. You can only listen to advice for so long. I think that in school, especially K-12, a lot of peer advice is very helpful. I learned how to apply to a good school from my peers. My parents hadn't done it in years. I learned which classes to take, which teachers were good. With career advice, they almost are horrible. I think it's so hard to go from a situation where someone goes from a good source of information to a bad source of information so fast. But that's what happens in college. All the way up through college. And then college, it goes from one track to 1,000 tracks. And your peers don't even know anything about any of the 1,000 tracks. But your whole old system is still there. Your old system of relying on that is still there. That's the cool thing. They are actually relying on you having poor sources of information. Everything that a big company does to attract a college kid is 100% orchestrated. There's an information gap there. It's fine. You can go and have fun at these jobs. You can go and feel purposeful. This is kind of harsh. I don't know if it's 100% accurate, but these are the known outcomes based on all the inputs you just gave me. You should go work at this company. And I wouldn't say average. I would say wants to put you in a box. Or more importantly, for some people, that's not how you get their best. What's so weird is we're not talking about do you see a good business opportunity? Do you have this burning problem? It's going to be frustrating, and you're not going to understand the risk-reward. From a pure money-making perspective, it's probably better to take the job at Google. But from a will-I-enjoy-my-life perspective, you can see how it works."
  },
  {
    "name_video": "The real product-market fit",
    "description_video": "Founders often believe they've found product/market fit when they haven't. This is a huge problem because they start hiring people, increasing burn, and optimizing their product before they've actually discovered what needs to be built. Here's a way to understand when you've really found product/market fit.",
    "related_categories": [
      "Product",
      "Product Market Fit"
    ],
    "page_url": "/library/5z-the-real-product-market-fit",
    "youtube_url": "https://youtube.com/watch?v=FBOLk9s9Ci4",
    "mp3_file": "downloaded/The_real_product-market_fit.mp3",
    "mp3_content": "The real product market fit. Not that the other ones aren't great. I often talk to founders who believe they've found product market fit when they haven't. This is a huge problem because they start hiring people, increasing burn, and optimizing their product before they've actually discovered what needs to be built. To start, read Marc Andreessen's On Product Market Fit for Startups. It has been the single most influential post for me as an entrepreneur, and it was the first time I ever read the term. Here's how he defines the term. The customers are buying the product just as fast as you can make it, or usage is growing just as fast as you can add more servers. Money from customers is piling up in your company checking account. Customers support staff as fast as you can. Why do most people think they're there when they're not? One, it's intellectually convenient, too. I think that a lot of founders are really excited at the prospect of company building. They think that company building is what creates success. They have a great culture, and getting an office, and having management, and so on and so forth. They are not real with themselves that the real challenge is to solve the problem. And the company building happens for the most part after you figure out how to solve the problem, not before. I hear this term product market fit so often. I have to tell you, 98% of the time it's used incorrectly. What's so frustrating is that people almost act like it's an undefined or flexibly defined term, and it's totally not. It's like saying that green, blue, yellow, we could call all of those orange. It's okay, we'll just call them orange. It's your interpretation of it. Do you want to mean something else? It's weird because it sounds so close, but it's not. I built the thing that customers want. It turns out the only way you know you've built something that customers want is because they're using it in an explosive and destructive way. People want to separate these two concepts. You can see intellectually why. It's just so much easier to be able to look at your thing and say, this is what customers want and not have to really have any customers. It's easier to say that. There aren't that many customers, I think the awful reality is the vast majority of founders, the vast majority of YC founders even, never find product market fit, ever. I argue that more acquisitions than you might know once you find product market fit, I almost say it's like it's your company to fuck up. It's almost like this is going to work unless you screw it up. Whereas pre-product market fit, there's all this stuff you need to do to even see if there can be something there and you really don't know. With product market fit, you can actually do great and never have anything. When I go from zero customers to one customer, I think that Mark does a good job of defining it because it's experiential. He's like, is the growth killing you? If I were to extract what the meaning of this sentence is, is the growth almost killing you and is it profitable? People always want to forget the second one, money is piling up in the check account. They're scaling negative margins. They're saying, hey Craig, how about you pay 75 cents and I give you a dollar worth of value? Craig would make that trade 17 times an hour. I love that the PV quote where it's like they figure it out before you. The customer is a nose for those types of deals. If you have the problem, you really understand the value of the solution. What's funny to me is that oftentimes founders will want to try to reduce this. I get this question so often. Or should I optimize for profitability? My answer is always the same, yes. What makes you think that building a successful company is a single variable problem? How could that be the case? That's not the case. One of the things we try to talk to people, often if you're charging a customer, we try to talk to you about revenue. The reason why is that in many cases, what percentage of your revenue are you losing every month? You really want to know how much does it cost you to get that revenue? You really want to know how satisfied are your customers? You need to know those other stats to really know. I talk about pre-product market fit as just being in the suck. Unfortunately, I think that every startup, I almost imagine, this isn't the case, but I almost imagine that there's a predetermined amount of time you have to live there until you figure out how to get out. A lot of founders just want to cheat. Do something that's going to be unprofitable so I can pretend to be out of here. You have to be so passionate about the people you're working with and or the problem that you're solving that you are comfortable failing at it for a while. Four months, got 16 million downloads, got one eighth of every single person on Facebook to watch at least one video on our platform over the course of three to four months. Wouldn't that be almost the definition of product market fit? Absolutely not. For our product, one, we had no monetization. Two, more importantly, we had horrible retention. Absolutely horrible retention. If you came and downloaded the app, five more videos that week, very low. It was interesting because we had an exit, we had tons of growth, we for a while were top five in the app store, yet not product market fit. If you look back at Justin.TV, let's think, 10. We started in 2006. We made $8 million in revenue, $1 million in profit with approximately 30 million monthly viewers on the product. Yeah, it is hard. The reason why, for the Justin.TV case, was that we didn't have a repeatable engine to create growth. That 300 million monthly uniques, we couldn't make that number go up. We weren't able to reliably monetize that over time. It's funny because I can't imagine how many pitches that I gave trying to present that as a good business, when in my heart I knew it wasn't a good business. It wasn't until we actually found Twitch and found gamers that both spit out more users and more money and retention. What was so interesting is that we'd solved all the technology problems at Justin.TV. Clearly the market does not care what you have behind the hood. No, no, no. Let's be clear, necessary but not sufficient. Uber could have done it without that stuff, but it was not sufficient at all. It took six years for us to have a hint that that's what the customer base was. How long did that go for before? Not very long. We had people, we had all the technology we needed, we had money because we were running profitably. The table was set and then bam, the food arrived. Everyone was seated, the table was set, bam, the food arrived and the meal happened. We were waiting at the table for six years. No one cared. No, I don't think it would have worked in 2006. Silly little things matter. One of them was webcams. Webcams went from being something you had to buy extra and little things like that can change things. Had we been talking to our users more, we could have gotten there sooner. I think we could have gotten there by 2008, 2009, but we didn't die. Learning when you should have quit, maybe. Some people hold on to things. On the flip side though, some companies take a long time. There are some peers of ours who now are really doing well, more than we did. If you're willing to put in the time and grind it out, every year you don't not die, your chances of being successful go up. Thank you."
  },
  {
    "name_video": "Creating good company culture (and sticking to it) ",
    "description_video": "Kathryn Minshew, the co-founder of the job search and career advice platform The Muse (YC W12), shares four key pieces of advice she's learned as a founder so far, including being painfully honest about the state of your startup, how crucial it is to construct a positive company culture, and staying motivated by remembering your roots.",
    "related_categories": [
      "Founder Stories",
      "Women Founders"
    ],
    "page_url": "/library/5p-creating-good-company-culture-and-sticking-to-it",
    "youtube_url": "https://youtube.com/watch?v=Cmd5yOjnOqo",
    "mp3_file": "downloaded/Creating_good_company_culture_(and_sticking_to_it)_.mp3",
    "mp3_content": "Hi, everybody. Thank you so much. I'm so excited to be here. My name is Catherine Minchieu, and I've spent the last four and a half years building a company called The Muse. We provide expert advice for every career decision, and you can think of us a little bit like a marketplace with 50 million millennials on one side and 500 companies on the other. For individuals, we help people find a new job, find an answer to their career problem or question, and also just find a way to learn a new professional skill or sometimes just get a supportive ear. And for companies, we create a really, really great way for them to hire and retain talent. But I don't want to talk too much about The Muse today. I want to talk a little bit about what I've learned over the past four and a half years, and in particular, some of the, let's say, misperceptions or outright bullshit that I think exists sometimes in the tech startup world and in Silicon Valley. After sort of coming through Y Combinator, actually standing on this stage two years ago, there are so many things that I wish I'd known, so many things that I think would have smoothed the path or made me even more excited. So I want to kick into the four big things that I'll talk through today, the lessons I learned in terms of keeping your focus and building a company that lasts. So starting with the first is that people love to say it doesn't get easier. This is something that I think I heard a thousand times in the early days, and the truth is, the beginning of The Muse's existence was really, really hard. I was cold emailing 800 different student groups trying to get our first 5,000, 20,000, 100,000 users. When we graduated from YC, I went out and pitched over 150 VC firms and got 148 no's in six months. Now that takes a toll, and yet every day I was kind of fighting for my life in hand-to-hand combat trying to make something of the company, trying to essentially avert startup death, and people kept coming and telling me, oh, you think it's so hard now? Just wait. It doesn't get any easier. But guess what? Sometimes it actually kind of does. I think that it's true that it never, ever, ever gets easy. In fact, it's really hard as you get bigger. As Usham was saying, the responsibility goes up. The stress can get bigger. The decisions you're making have bigger and bigger consequences. But at the same time, the risk of death is not quite so imminent for most people and most companies. Now, for example, if there's a big challenge to The Muse, I have a team of executives, smart people that I've hired and recruited to the company with my co-founder that we can rely on to help solve a problem with us. For example, if one of those people then has to leave for a medical reason, or God forbid they take a new job, it's a bummer, it's really disappointing, but it doesn't necessarily kill you. And so I think for me, just realizing that, yes, the challenges keep going, and yes, it's always going to be hard, but it does in some ways, I think, get a little bit easier, was really motivating to realize early on. And as I like to joke with the current team, everything we've built so far was really built on a foundation of blood, sweat, tears, and ramen. And now, sometimes, I eat in restaurants. So I think that's kind of the first big point. But it does bring me straight to the second lesson, which is focus. And in fact, as the risk of imminent startup death goes down, the challenge of figuring out whether you're focusing on the right things goes up. Focus is so hard because there's so many things competing for your time and attention. And in the next 10 minutes, I couldn't possibly begin to tell each one of you how to decide what's the most important thing to focus on. But I do think it's important to look at focus by the stage of your company and constantly assess what are the biggest things preventing me from growing and the biggest risks that could ultimately kill us. For us, two stories from the Muse's early days that were really instructive. One was that when the Muse was really small, we focused a lot on our user base, growing our user base, creating a product that people absolutely loved. And yet, there was one point at the end of 2013 where we realized that we had been so focused on the fact that our users were emailing us, telling us, the Muse changed my life, I absolutely love your product, this is the best thing I've ever seen, that we actually hadn't really been spending enough attention on the fact that our overall growth had slowed, our revenue line had slowed, and suddenly we were getting uncomfortably close to having to fundraise again, and even though people loved our company and they were telling us every day, none of the numbers were moving in the right direction. And we had to have a really tough moment as a company where we looked at what was going on and we said, if we don't start focusing on the things that matter, on moving our growth, on figuring out revenue, we're going to be the most loved startup that nobody ever gets to use anymore because it's dead. I think figuring out that core and understanding that just because growing your user base and creating something that your users want is consistently going to be important throughout the life of your startup, and it may be the most number one important thing for a period of time, doesn't mean that will always be the most important thing, and for us, it was time to shift into hiring a sales leader, figuring out our pricing and our revenue model, and yes, continuing to build that great user experience, but also putting the company around it that would allow us to deliver that going forward. The other example was actually from Y Combinator. When my co-founder and I got into Y Combinator, we were so, so excited that we instantly started dreaming up the best possible version of our first product. We knew we wanted to create a photo and video company profile that would let people see behind the scenes of companies, let them get a little bit of an inside view, and yet, because we were so excited and so ready to sort of jump out of the gate with this amazing product, we initially proposed something that had all of these bells and whistles. It had badges, it pulled in data from all of these different sources. It was going to be incredible and beautiful and incredibly, incredibly difficult to build, and the very first meeting we had with one of the YC partners, we walked in, and we started excitedly scribbling it on the whiteboard, and he cut into us after just a couple of minutes and said, you'll never get this out the door. Just fucking launch already, and that was an important moment for us, that, again, in that particular moment, it wasn't about focusing on the perfect product or the absolute perfect expression of our massive vision, but it was about getting something out the door, getting it into the market, and focusing on getting feedback and iterating. Now, once you have figured out sort of the early version of your product, you're starting to focus on the right things, I think one of the next big important things that a lot of people miss out on, and that I think has taken up a lot more of my time than I realised I would two years or more ago, is culture. So people like to joke about culture, it's having a moment in the valley right now, everyone's talking about is culture important, when is it important, what does it look like, how do you invest in it? And I think that, for an early-stage company, it can be really tempting to relegate culture to that sort of back pile, because, like I was talking about earlier, culture is probably never going to be the number one imminent risk of death to your start-up, and yet, if you want to build a business that lasts, I think it's one of the most important things to think about when you're two people, when you're ten people, when you're 25, and more. The Muse grew from about 12 people two years ago, when I was up on this stage, to over 80 now, and I've learned a lot of lessons in the interim. Ultimately, I think culture can be broken down into two pieces, how you hire and attract people, and then how you behave once people are there. On the hiring front, when we were about 25 people, we actually set out and wrote down a list of our six core values at the Muse, and for us, every single time we interview someone, they're tested against all six of those values to make sure that we're not using I think there's a sort of fake culture screen which is, would I want to get a beer with this person? I think that can be overly simplistic. You can actually miss out on incredible candidates who are just different from you by applying that, but for us, it's do they stack up against this list of values that we think are important for the long-term future of the Muse? One of the most sort of well-known of those, you might have seen it on our job descriptions, is no assholes. People love to joke about that. They're like, yeah, yeah, yeah, you say that, but a lot of companies say that, and that's true. Ultimately, culture is tough choices. Culture is needing that hire, looking for that one person who's going to solve the biggest problem for your company's existence, and finally finding someone who has every skill you need, who has a pedigree and a background that will make your investors swoon, and that kind of might be a jerk, and deciding not to hire them, and keep leading, and keep looking because you realise that the impact of one really bad person is far more important than their behaviour, and that toxic behaviour speds to the rest of your team. I also think once you have people in, it's important to be honest and authentic about what your core values actually are, and what your culture is. Notice I don't say culture is what you say it is. I think a lot of people love to put culture up on a wall, but culture is how you behave when no-one is watching. Culture is how the founders behave, how the executives behave, and it's really important, I think, to not, I guess, to be open with who you are, and not to be hypocritical. One of the worst examples that I always cite of anti-culture was a friend of mine who was working for a company that had free lunch every Friday, and it was very, very fancy steak, tuna tartare, sushi, et cetera. When the recession hit in 2008-2009, the food slowly started getting less and less good until for a series of weeks, they were serving hot dogs every week. Somebody raised their hand at all hands and said, I noticed that we've been having a lot of hot dogs. How is the company doing? Are we cutting back? Are we being a bit more thrifty? The head of the office looked right at that person and said, no, no, no, we're doing fine. It's Americana-themed. That's bullshit, and everybody knows it, and I think when you treat your employees like kids, they're going to behave as such, versus being open and honest, even if the answer is, you know what, we're still doing all right, but the economy's tough, so we're going to be a little bit more careful about things. And I think this segue on culture, or this focus on culture also leads to one of my next points, which is around transparency. At The Muse, we think it's really important to be transparent, so we do this in a lot of ways, again, thinking about living out our culture and not just talking about it. One of them is that we share board decks with the entire company at all hands after every board meeting. Another is that we actually ran everyone through our full company budget in some pretty exhaustive detail. And the reason we did this was tied, actually, to another thing that we really value, which is scrappiness. One of the things that people love to say is, don't raise too much money, because you will spend it frivolously. I think this is both true and not true. It's true to a point. I mean, we went out to raise $5 to $6 million for our Series A in April, and we came back with $10. That extra capital has been so useful, and ultimately, we are the arbiters of what we spend on, so we can spend less or spend more based on how we think it fits in with the overall company priorities. I think when people say, if you raise more, you will spend it, to me, that takes away the agency from the founders, from the leadership, and I think that's a little bit silly. Instead, what we did was we said, all right, scrappiness is important to us, and yet we just raised $10 million, which to a cash-strapped company that didn't spend $10 without looking at ROI previously, that seems like a lot of money. One of my employees' moms actually called him and said, I heard the news, that's so amazing. How much of the $10 million is yours? Unfortunately, it doesn't work that way, even for founders. And so for us, it was about how do we communicate to our company what we're using this money for and still keep that scrappy ethos? And so what we decided to do was actually spend, we set a 20-slide PowerPoint deck where we laid out every single line in our budget. We talked about how much are we spending, we actually talked about how much are we spending this year in total, how much will we bring in in cash from revenue, how much are we burning of the 10, what does that look like, how much of that money is on payroll, on health insurance, on office supplies, marketing expenses, how does that break down? And what was so interesting is that we were able to have an open conversation at the company about the tradeoffs. Why aren't we going to start providing free lunch for everybody? Why are we deciding to spend that money on something else? We surveyed people and understood what benefits were most important so we could put our money where it really counted. And ultimately, I think one of the most exciting things for me about that was having some of my executives come up afterwards and say, you know, I asked for this much in the budget, but actually, I think I can do what I need on this. And this would be nice to have, but don't even worry about these things. People were sort of self-editing their requests because they bought in to where we were going and why it was so important for us to stay thrifty, stay scrappy, and stay lean. So to sum this up, say no to ball pits. I think that there's a lot of these sort of startup lore things, and frankly, I think if you need something like this to recruit, you probably have other problems. And that sort of sides into my last point, which is how do you stay motivated and excited for the long haul? This is me at Y Combinator demo day almost exactly four years ago. We presented in March of 2012. This was before my presentation, and I was absolutely terrified out of my mind. It was a two and a half minute presentation in front of 500 investors, and I felt like it was a make or break moment, that everything we'd done so far was riding on this talk. And firstly, that was and wasn't true. We actually only got, I think, one investor out of demo day. The rest of our capital came from people I met afterwards and other conversations I had. It would have been great to go up on stage, pitch, and have people throwing checks at me, but it didn't happen, and we ended up being just fine. And the second thing is, as I was sitting there sort of hyperventilating a little bit and thinking about how I was going to get through that moment, somebody said something which has really resonated with me ever since, which was, remember why you started. All of you are in this audience because you started a company or you're thinking about starting a company, and I want you to think about why. What brought that on? For many people, it's that there's a problem or an idea that just won't let you go. For me, it was the experience of being in a job that I didn't love, and going online to look for a new job, and spending time on, I mean, you name it, all of the big job search sites and thinking, this is the best there is? This is really what millions of people have to use to figure out the place where they're going to spend 40, 50, 60 or more hours a week. I'm almost offended by how bad that experience is, and whenever I get down or frustrated or when it's four and a half years in, and it's been a long time, and the late nights seem to kind of keep going, I think for me, it's remembering why things got started and then also reaching out to other people who have that problem whose lives we're making a difference in, reading the user emails that we get or talking to somebody who found their job on the site, because, ultimately, being a start-up can be one part, one of the most meaningful experiences of your life, and one part a total slog, but I think when you remember why you got into it, you keep your focus on building for the long haul, ultimately, that's where the magic can really happen. So, thank you. "
  },
  {
    "name_video": "Why you should or should not work at a startup",
    "description_video": "Justin Kan, co-founder of Twitch and former YC partner, discusses why you should, but also why you shouldn't join a startup.",
    "related_categories": [
      "Working at a Startup"
    ],
    "page_url": "/library/5n-why-you-should-or-should-not-work-at-a-startup",
    "youtube_url": "https://youtube.com/watch?v=YzyatiQrQlQ",
    "mp3_file": "downloaded/Why_you_should_or_should_not_work_at_a_startup.mp3",
    "mp3_content": "In a moment, I'm going to introduce our first keynote speaker, Justin Kahn. Justin is the founder of three YC companies. He is now running a company called Atrium, which you're going to hear about later this afternoon. But before that, he was the founder of Justin.TV, and he actually presented up here on this stage eight years ago, back when he was running Justin.TV. And he's going to tell you some really awesome stories from what happened back then and talk about why you should or should not work for a startup. So please welcome Justin Kahn. Thank you, Jared, for giving away my talk. It's me, Justin Kahn. I am YC's remedial student. I had lost track, actually, of the number of times I'd been through YC until Jared reminded me. Three times, actually, four, at least. And some of those companies worked, some of them didn't. And my newest company, which went through YC in the last batch in winter 2018, is called Atrium. And one of my team members will be up to tell you about that later. But what I want to talk about today, and it was supposed to be a surprise twist but no longer is, why you should but also why you shouldn't join a startup. And I'm going to start with why you shouldn't join. Okay. There's a couple reasons. And my goal here is just to give you the most unfiltered, raw feelings that I have to help you make an informed decision. But there's lots of good reasons why you shouldn't join a startup. Number one, the management at startups generally really sucks. I wish I was joking. But no, it's true. I used to joke that there were YC companies. There were two kinds of YC companies. There were the rocket ships with bad management, and then there were the other companies with bad management. And as kind of a corollary to that, it is likely that if you join a startup, especially in early stage one, you won't necessarily get enough mentorship or direction on what you're doing unless you really actively force people to give it to you. Second reason. You are likely to not actually get rich joining a startup. It's statistically improbable that if you think you're going to join a startup and then be set for life, that is unlikely to happen. So that would not be a good reason to join. I'm sorry I ever told you different. And then the third reason, which I think is a new reason in Silicon Valley, actually, is as Silicon Valley has matured in the last ten years since Jared and I have gotten here, one of the things that I think has changed is people, you know, originally when I got here, I think people just wanted to work on interesting shit, and it was a much smaller number of people. Now I think that there's a lot of people who come to Silicon Valley because it's a great career and there's a great trajectory and there's stability. And if you want, like, those things, you should not join a startup. I've noticed more and more people, even people I've recruited more recently, coming in and saying, you know, what's the career pathing here? What's the five-year plan? And I'm like, we don't have five years of money. So if you want stability, I think you should go join Facebook. Maybe not today, but next week. Next week. All right. All right. So now on to what you really came for, which is why you should join a startup. And when I was writing this in the parking lot five minutes ago, I identified three reasons. All right. Number one. You will get access to jobs that you're completely unqualified for. And you might not be able to do. So my example actually comes from that very first work for a startup. Eight years ago, you know, I was on stage talking about Justin.TV, and we actually recruited someone from that. And his name was Guillaume. He was from France, programmer. And actually, he came to work for a startup and got two offers from two different companies. One was Justin.TV, and one was actually Scribd, Jared's company. And I sat down with Guillaume, I remember, in a coffee shop after work for a startup. And he said, oh, I have this offer from Scribd. And I said, what was it? He told me. I was like, I'll pay you $10,000 more right now to sign this instant. And so he accepted. Sorry, Jared. He accepted, and he joined Justin.TV. And within a year, he was running our entire Rails backend for a site that was, like, a top 100 site. And I think a top 10 to 20 Rails site at the time was, like, in 2010. So the bar was a lot lower. And that was a job he was, like, completely unqualified for, and he would never have gotten the opportunity to do if he didn't join a startup where we didn't really have anyone else to do it. And he went on, actually, this is a pretty cool story. We spun out a company called SocialCam a couple years later. He went on to be the cofounder of that company as we spun it out at Justin.TV, went through YC, and got an even greater scale challenge when they scaled to, like, from 0 to 128 million users in, like, two months. And so, you know, just the rate of learning for him was, like, pretty incredible. And he's gone on to now he's a cofounder at a company called TripleByte that does recruiting for YC companies and others. Okay. So that's number one. You are going to get access to jobs you are not qualified for. Number two is joining a startup is a really good gateway to starting your own startup, if that's a goal of yours. In the second work for a startup, we in 2012, I came back with another company called Exec. And I recruited someone else, actually. Someone really talented. His name was Finn Barr. And he was an engineer at Groupon at the time. And I think he really wanted to break into startups with the idea of eventually starting his own. And I think one of the things that's really important is to just put yourself in positions where you're around people who want to do the things that you want to do. People who are like the person that you want to become. One of my cofounders of Twitch, his name is Emmett, always told me that, you know, you are the average of your five closest friends. And he wasn't talking about just me. He was talking about everybody in general. And I really think that's the case. So, Finn Barr went on. He was, like, you know, working at Exec. That company didn't work out super good. But he ended up meeting a cofounder there and starting a startup, which was a horrible idea. It was a terrible idea. I told him not to do it at the time. But he ended up getting a start, right? He was, like, he became a founder. That didn't work out. He ended up joining YC for, I think, just over a year. And then started a new startup that just went through YC and is off to the races and doing super good. I won't give away that. It's called Shogun. You should check it out and probably work there. Okay. So, starting your own startup. That's the second reason. The third thing is to maximize your I should slow down. I still have a lot of time. Sorry. The third thing is to maximize your own speed of learning. I think this is actually the most important reason why you should join a startup. And I have kind of two examples of people who did that working with me. And they are both the two cofounders of Cruise. And I think that they're cool examples because one is kind of maximizing learning on the way up and the other on the way down. And I'll explain what that means. So, the first cofounder of Cruise, his name is Kyle Vogt. We recruited him at Justin.TV in the early days to he was an MIT student. And we had found him and he was like kind of this person that we thought we needed because he was a hardware hacker and we thought we were going to build a hardware company. And so, we convinced him to come out from MIT for his like that month-long break during January. And we bought him a one-way ticket and we were like just work for a month. And then we never bought him a ticket back. And Kyle basically became our VP engineering. And he became a cofounder, actually, in the VP engineering. And Kyle's an amazing hacker. He's always has been. Very amazing tinkerer. And one of those people with a can-do attitude is just going to if you're like, hey, let's build this thing, he's going to go figure out how to build it. But he didn't know jack shit about scaling systems or building, you know, scalable system architectures. And so, that was like the job that was available, though, as soon as we stopped, we figured out that we should not build hardware. And so, that's the job we kind of assigned him. And he had to figure it out really like on the fly. And so, he ended up, you know, packing this live video system. There was nothing kind of there was like no precedent, right? We basically built this scalable dynamic live video system that he engineered and architected mostly badly at first, actually. And it would go down all the time. We ended up there was this one kind of funny story where, you know, we had no idea about like we did no idea how to build reliable systems. And so, every time it would go down, we would like call him, which was like every like 36 to 48 hours. And so, he could like never go on vacation, which is like not really acceptable to him. So, it was just like one time he was just like I'm going goodbye, basically. And we're like, no, what's going to happen if you're like not around? He ends up he went to Tahoe or something like that. We ended up, of course, like clockwork, after, you know, 36 hours, the site went down. We had no we're calling him on the phone at like 10 times. It's a live video site. So, if it doesn't work, it doesn't have any value, right? Like just right then. So, we started calling him and he didn't pick up. Luckily, he had left the address. We ended up having to order a pizza to go to his house to read a message to him like a pizza delivery driver, read the message like, answer your phone, the website is down. So, like that was like our concept of like a pager system at the time, right? So, really figuring everything out, you know, one step at a time kind of inventing everything from scratch. The end of the story is he eventually architected this live video system that by the time Twitch sold to Amazon in 2014 was the fourth largest bandwidth consumer in North America, 15 points of presence around the world, did 90 petabytes of data transfer a month. And so, you know, I mean, his rate of learning was incredible as a software architect and obviously kind of went on and took a lot of that to Cruise, which is also an incredible story. The other cofounder of Cruise was my brother, Daniel, who met Kyle actually as an intern at Justin TV when he was a college student. We recruited him. Not really recruited. It was more like nepotism. I'm sorry. I hope he's not watching right now. I'm just that's fucked up, that's fucked up to say. So no, he also had a crash course in startups over the next couple of years. Didn't work for me for very long, but when he did work for me, he recruited these guys to the site. I remember Justin TV when we were doing like the kind of live streaming site, he recruited this unknown band, it was called the Jonas Brothers, and they ended up like crashing our site. I mean, they were part of the reason that Kyle hated his life, ended up crashing the site over and over again. But the cool thing was he joined as this intern, he got to like, you know, interact and kind of like make a deal with like what was basically like became the number one kind of teen band at the time in 2007. And then later on, you know, he joined me as a cofounder when I started this other company exec in 2012. And the cool thing, you know, I mentioned that, you know, Kyle's kind of the example of like how you might learn at a startup as the startup's growing and on the way up. I think Daniel's a perfect example of how you will also learn and maximize your learning if the startup is completely and horribly failing. Because we in 2013, by the time we had worked on exec for a couple years, we realized that the home cleaning business is not a great business, I'd recommend you don't join a home cleaning startup. And he, we ended up trying to sell it. And this is a great story. This is my last story. This is a great story. So we were trying to sell it. We ended up negotiating a deal with a company called Handy that's in the East Coast and against all odds has survived in this industry. And we negotiated the deal and like it was taking forever. There was like tons of lawyers. It was dragging and dragging and dragging. And I was so burned out. I was just like, I'm going on vacation, Daniel, you have to deal with it. It's not a very responsible thing to do, but. And so he ended up having to be the one who closed this deal over the next like month while I was in Thailand. I mean, I was like kind of doing stuff on the phone, but he was mostly like running this deal for not a lot of money, you know, just a bit of stock from Handy. And he ended up like it was like a horrible experience. He learned all about like negotiating, you know, from and when you want to have leverage in a deal when you, you know, when you should like all the things, all the different minutia of negotiating a deal. And he learned on this very small, horrible deal, which we were mostly trying to offload because we were so burned out. We want to get out of the business. Two years later, fast forward two years, he had become a co-founder of Cruise. Cruise had built an amazing technology team that was executing super well. And you know, you guys know the end of the story. They ended up selling to GM for a billion dollars. And he applied. The cool thing, I think, is that Daniel applied all of those horrible lessons he learned from like trying to negotiate this shitty, piddling deal for our company to his next company. And ended up, you know, they sold it for over a billion dollars. So you're going to learn something. Whether the company succeeds or fails, you'll probably walk away with something valuable. The last thing I'll say is that the way I think about it is the way I think I think about growing and like your, your, your speed of learning, maximizing your speed of learning is from a quote that our YC partner, Paul Buheit, had generally said, I think he says it to every batch, which is that, you know, it's not your Y intercept, but it's your slope that's important. And so I think you want to, you know, the way I've always thought about it is how do I figure out ways that I can put myself in the position to maximize my own personal rate of growth and rate of learning. And I suggest that you do the same, regardless of whether that's at a startup or not. All right. Best of luck. "
  },
  {
    "name_video": "How not to fail",
    "description_video": "Jessica Livingston has seen over 1000 companies go through YC and shares her learnings about what it takes to succeed as a founder. She emphasizes the importance of avoiding distraction and making something people want.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/5l-how-not-to-fail",
    "youtube_url": "https://youtube.com/watch?v=a2B4cVFIVpg",
    "mp3_file": "downloaded/How_not_to_fail.mp3",
    "mp3_content": "Oh, hi, everyone. One thing, I think I'm missing the clicker. Should I have brought the clicker out? Thank you. All right. Sorry. Welcome, everyone. I am so, so happy to see you all today. I'm so happy to be here. Thank you for traveling all this way, for those of you that traveled. I just have a question, because I'm personally curious. Can you raise your hand, and I'll try to see you in the light. How many of you, is this your first female founders conference? Oh, my God. Oh, this is so exciting. Okay. Oh, wow. And then how many of you have actually started a startup and are working on one right now? Oh, my God. Oh, geez. Okay. That's a lot. This is very exciting. All right. Well, let's get started, then. I want to start off today with some this is, by the way, the Twitter thing, and share the live feed for people who can't be there. I want to start off today with some personal news. After working on Y Combinator for 11 years, I'm going on a sabbatical for the next year. Which is exciting. I want to focus on some projects, and to be honest, I'm a little bit tired. YC is my favorite thing in the world, but it's also all-consuming, and it's hard to work on something all-consuming for 11 years without a break, including maternity leave, which was my fault. I also want to spend more time with my sons. They're 7 and 4 now, and I'm not going to be able to get these years back. So pretty much right after this conference, I'm going to go on sabbatical. Thank you. And that brings me to the topic of my talk. I'm going to tell you what I want you to remember while I'm away, and I was thinking about what I wanted YC founders to remember while I was away, and I realized that everything I wanted to tell them was just as applicable to you all, so I'm going to give you the exact same advice that I'd give YC founders. Okay. Make something people want. This is why Combinator's motto. And after 11 years and more than 1,000 startups, I know we picked the right one. Nothing else you do will matter if you're not making something people want. You can be the best spokesperson, the best fundraiser, the best programmer, but if you aren't building a product that satisfies a real need, you'll never succeed. And my advice to those of you who are still looking for an idea is to solve a problem that you yourself have. Then you'll at least know it's something that at least one person really wants. And when you're part of the target market, you'll have insights about it that you wouldn't otherwise. But you should graduate from making something just for yourself and make something for other people as fast as you can. And to know what they want, you have to understand them. Do they like what you've made so far? If not, why not? Talk to your users as much as you can, even if that means doing things that don't scale early on. I don't know a single case of a startup that felt like they spent too much time talking to users. And be open to adjusting your ideas. Because good ideas evolve. The most famous example of this type of evolution within the YC community is probably Airbnb. They started off making or having airbeds on floors for conferences. And then airbeds on floors but without conferences. And then actual bedrooms and then whole places. And that final step happened, believe it or not, because Barry Manilow went on tour. His drummer was an early Airbnb host. And that was back in the days when the hosts were expected to be there. One day he told the Airbnbs that Barry was going on tour and could he rent out his whole place while he was away. And the Airbnbs, like, really had to think about if that was okay. They were still airbed and breakfast back then. Not Airbnb. So, like, guests had to get breakfast. But in the end, they said yes. And this type of stay is now most of Airbnb's business. Your users are your guidepost. And the way you stay on the right path in the early stages of a startup is to build stuff and talk to users. And nothing else. One of the most conspicuous patterns we've seen among the thousand startups we've funded is that the most successful founders are always totally focused on their product and their users. To the point of being fanatical. The best founders don't have time to get caught up in other things. This is a list of things that I see easily distract founders. And these are the equivalent. They're like the startup equivalent of wolves in sheep's clothing. Notice that this list implies you shouldn't be here. Here I am up on stage at a conference telling you that you shouldn't go to conferences. And honestly, as a rule, you shouldn't. And that's why we try so hard to make this conference good. Because we know that it has to be more useful to you than spending the same time building things and talking to users. And that's a really high bar. I want to talk a little bit more about the last point. Worrying about being a woman in tech. Since it's the only one on this list that's specific to this audience. There are some real obstacles women face as startup founders. But there's just so much talk and noise on this topic that I worry it will scare potential founders away. Also it's hard to sift through everything and know what's accurate and what's not. The conversation around this topic is too often driven by people who are not actually building things themselves. And as with any other topic, the amount of attention the press devotes to this issue is not determined by the size of the problem, but by its potential to generate page views. Controversy generates page views. So they write about controversy. You don't hear as much about the female founders, and there are a lot of them, who are quietly and successfully building their companies. I don't give a shit about page views. What I care about is how I can help support female founders. The way I do it is to encourage women to start startups and to help them succeed once they do. So while I'll tell you that it is going to be harder for you as a woman, it's not going to be so much harder that it will make the difference between success and failure. If you want to start a startup, go ahead and do it, and don't let yourself be intimidated or distracted by all the noise, all the news articles and the Twitter controversy about how it's harder for you as a woman. That's not only the best plan for you personally, but it's also the best way to fix these problems. If you do the first things that I told you, make something people want and focus, you'll get growth as a result. And that means you can use growth as a test of whether you're doing those two things. If you have a good growth rate, which in a startup means 10% per month, you're on the right track. And if you don't, you're missing at least one of the two ingredients that I mentioned. You're either making the wrong thing or not focusing enough. There's a famous sentence we often quote at Y Combinator, you make what you measure. Pick a number you want to grow and focus on that. The best metric to choose is good old-fashioned revenue. There's no better test of whether you're really making something people want. Focusing on growth also prevents you from being in denial, which is a big danger for startup founders. For some reason, a lot of the problems you face in a startup tend to provoke denial. Maybe it's simply because these problems are hard. Founders who are making the wrong thing are often in denial about it. Founders who are wasting their time on inessential stuff are often in denial about it. Denial is the silent killer of startups. But if you hold yourself to growth targets, you can't remain in denial. The numbers, good or bad, are staring you in the face. Unless of course you're in denial about the need to hold yourself to growth targets. And that, believe it or not, happens all the time. We constantly hear founders saying, we're not focusing on growth right now. And there are times when that's the right thing to do. But I don't even need to tell you how things usually work out when we hear that from founders. Growth isn't enough, though. You can have a good growth rate and still die if you run out of money and can't raise more. The critical question is whether you're what we call default alive or default dead. Default alive means if your expenses stay the same and your revenue continues to grow at the rate it's been growing, you get to break even before you run out of money. Default dead means you don't. Paul wrote an essay about it at that URL. I strongly recommend you read that. We now ask all YC founders to begin their investor updates to us by saying which of the two they are. As well as telling us how the startup is doing. It's a good way to yank the founders out of denial. Because being about to run out of money is another one of those dangerous problems founders are often in denial about. You'd be amazed at how many founders don't even know whether they're default alive or default dead. Why do startups run out of money? By spending too much. Since the main expense in startups is salaries, spending too much equals hiring too many people. Overhiring is the big mistake in the second phase of a startup as making something no one wants is in the first phase. I know how dangerous overhiring is. Because YC startups constantly make this mistake. Despite us constantly warning them against it. The problem with overhiring is it gives you less margin for error. The faster you're burning through the money you have in the bank, the less time you have to make it to profitability. But startups, both because they're usually run by inexperienced founders and doing something novel, they take longer to get right than you expect. And that's a deadly combination. Because when you start to run out of money before you have things working right, you have to raise more during a phase when the company is an ugly duckling. And even if you're on the right track, you look bad now. And investors don't like startups like that. So after you raise money, be very conservative how you spend it. Hire for the pessimistic case. Assume it will take you longer than expected to get things working. If there's one thing you can foresee in a startup, it's unforeseen problems. I constantly see startups die, even though they're on the right track. Simply because they hired too fast. The reason startups get so slammed when they have to raise money as an ugly duckling is that later rounds of fundraising get much harder. Investors who had a fairly easy time raising a seed round think it will be just as easy to raise a Series A. It's not. We often get emails from startups saying, we're running out of money, so we're going to raise a Series A now. As if it were like making a second trip to the ATM. And when we ask how they're doing, the answer is usually a combination of slow growth and high expenses. And we have to tell them there's no hope of raising a Series A, and they'll have to make drastic changes even to survive. Series A investors have a totally different attitude from seed investors. And this is important. Seed investors are looking for promise. Series A investors are looking for performance. They know that all the returns in venture investing are concentrated in the big winners. So they want to invest in you only if you're clearly on the path to being a big winner. They'll pay high prices if you are. But if you aren't, they won't invest at all. So even if you're on the right path, but still in the middle of converting promise to performance, they still won't invest. To them, there's not much difference between a startup halfway along the right path and a startup on the wrong path. If they don't see sufficient progress, they don't care why. So I've made startups seem pretty scary so far. I'm really sorry. I can't help myself. I've just seen so much. The good news is that this is a pretty complete list. If you avoid all the mistakes I warn you about here, you'll be in really good shape. If you start by making something people actually want, focus on making users really happy, make sure you have a good growth rate and don't overhire, you'll be in a very happy position. You'll be master of your own fate in a way that very few people ever get to be. We host this conference for two reasons. One is to inspire more women to start startups. And two is to try to help women who already have become more successful. But I have a more specific goal than that. I want there not just to be more female founders. I want there to be more female founders of the big winners. The unicorns. These are the founders who make the most effective role models. And role models are what we need most if we want to encourage more women to take the leap and start their own companies. And you know where most of the founders of the big winners are going to come from? From this room. Seriously. After funding over 1,000 startups at Y Combinator, I know what it takes to start these successful companies. And from meeting the people who have come to past female founders conferences, I know there are a lot of you in this room who have what it takes. Imagine the future we'll have if you go ahead and do it. Thank you. "
  },
  {
    "name_video": "Jeff Dean on building intelligent systems with large scale deep learning",
    "description_video": "Jeff Dean is a Google Senior Fellow in the Research Group, where he leads the Google Brain project. He discusses state of the art machine learning research, state of Tensorflow, real-world applications he's excited about, and more.",
    "related_categories": [
      "Technical",
      "Artificial Intelligence",
      "Engineering"
    ],
    "page_url": "/library/5j-jeff-dean-on-how-to-build-intelligent-systems-with-large-scale-deep-learning",
    "youtube_url": "https://youtube.com/watch?v=HcStlHGpjN8",
    "mp3_file": "downloaded/Jeff_Dean_on_building_intelligent_systems_with_large_scale_deep_learning.mp3",
    "mp3_content": "So I'm going to tell you a very not super deep into any one topic, but very broad brush sense of the kinds of things we've been using deep learning for, the kinds of systems we've built around making deep learning faster. And this is joint work with many, many, many people at Google, so this is not purely my work. But most of it is from the Google Brain Team, which I lead. And so the Brain Team's mission is basically make machines intelligent, and then use that new capability to improve people's lives in a number of different ways. And the way we do this is we conduct long-term research, kind of independent of any particular application. Oh, sorry. I'm probably supposed to stand in one place. Independent of any particular application, we build an open-source systems that help us with our research and deploying of machine learning models, like TensorFlow. We collaborate across Google and all of Alphabet in getting machine learning systems and research that we've done into real Google products. So we've done a lot of work in Google Search, Gmail, Photos, Speech Recognition, Translate, and many other places. We also bring in a lot of people into our group through internships and a new residency program that we started last year for people who want to learn how to do deep learning research. And that's been a pretty successful program as well. So the main research areas that our group is working in are these. I'm going to focus mostly on these today, actually a little bit of perception, too. So in January, I put out a blog post that kind of just highlighted some of the work our group has done over 2016. And in putting that together, I kind of realized we were doing a lot of different things. So the nice thing about this is each one of these blue links is a link to something kind of interesting and substantial, like a research paper or a product launch using machine learning or some new TensorFlow features we've added. So I won't go through that all now, but you can go find that blog post and learn more about some of the stuff we've been up to. OK, so why are we here? You probably already all know this, given that you're working on AI-related companies, as I understand it. But the field of deep learning and neural networks in particular are really causing a shift in how we think about approaching a lot of problems. And I think it's really changing the kinds of machine learning approaches that we use. In the 80s and 90s, it was the case that neural nets seemed interesting and appealing, but they weren't the best solution at the time for a lot of problems that we cared about, because they just didn't quite have enough training data, enough computational capabilities. And so people used other methods or developed kind of shallower machine learning methods with much more hand engineering features. And if you fast forward to now, what's happened is we've got much, much more compute. I actually did an undergrad thesis in 1990 on parallel training of neural nets, because I liked the appealing attraction of the neural net model. And I thought if we could just get a bunch more compute by parallelizing over a 64-processor hypercube machine, that it would all be even better. It turned out what we needed was like 100,000 times as much compute, not 60 times. But if you fast forward to today, we actually have that. And so what's happened is we now actually have the case where neural nets are the best solution for an awful lot of problems and a growing set of problems where we either previously didn't really know how to solve the problem or where we could solve it, but now we can solve it better with neural nets. So the talk is really meant to orient you across a whole bunch of different problems where this is the case. So growing use of deep learning. So really, our group started in order to investigate the hypothesis that large amounts of compute could actually solve interesting problems using neural nets. And so when we first started, we were sort of the vanguard of people using neural nets at Google. We did a bunch of work on unsupervised learning at a really large scale using, at that time, we didn't even have GPUs in our data centers. So we just used 16,000 CPU cores. And we did kind of interesting things with unsupervised learning there. But gradually, we kind of built tools that enabled people to apply machine learning and deep learning in particular to a lot of problems. And you can see the growth rate of this is directories containing model description files either from our first generation system and starting in about 2015, our second generation system, TensorFlow. And we've deployed machine learning in collaboration with lots of teams. Other teams have also been independently just picking up this idea of deep learning and using it in lots and lots of places in Google products. And that's why you see that growth rate. And it's continuing to go up. One of the things we focus on a lot is, how can we reduce experimental turnaround time for our machine learning experiments? And because there's a very different qualitative feel to doing science and research in a domain where an experiment takes a month versus doing it in a domain where minutes or hours you get an answer. And then you can figure out what the next set of experiments are that you want to run. So a lot of our focus is on scaling machine learning models and scaling the underlying infrastructure and systems so that we can actually, for some problems, approach minutes or hours rather than weeks or months. So part of that has been building the right tools. So TensorFlow is kind of our second generation system that we built for tackling deep learning problems and machine learning problems. The first one we did in open source. The second one we said we should really fix some of the design problems we saw in our first system, keep the good features about it, and then design this from the start to be an open source platform so that people all over the world, not just at Google, can benefit from this and can help build a community that can all contribute to and improve the system. Zack Stone here is our TensorFlow product manager extraordinaire and has been doing a great job of building the community both inside Google and outside. So the goals of TensorFlow that we want to establish this common platform for expressing all kinds of machine learning ideas, so something that can be used for deep learning, can be used for other kinds of machine learning, that can be used for tackling perception problems and language understanding problems. And if you have a crazy new machine learning research idea that doesn't really fit into what people have done before, we want it to be at least expressible relatively easily in TensorFlow. And then we want to make that platform really great for research, but we also want to be able to take something you've developed in TensorFlow maybe experimentally, and then if you now want to deploy that in a production setting, run it at a data center, run it at scale, run it on a phone, all these kinds of things, we want that to be something you can do in the TensorFlow framework. And by open sourcing it, we make it available to everyone. So how has this been going? Well, so this is a comparison of GitHub stars, which is one metric of popularity or interest in different source code repositories on GitHub. And I show you a comparison of TensorFlow with a bunch of other open source machine learning packages, many of which have been around for many more years than TensorFlow. TensorFlow is this brown line going up fairly steeply. So this has been pretty good. I think the reception for what TensorFlow does, which is enable flexible research, but also this kind of production readiness and being able to run in lots of places, is pretty appealing. And if you look at the other open source packages, which we did when we were starting to work on TensorFlow, many of them have two of the three attributes that we care about, being able to be really flexible, scalable, and run on any platform. And they all have different emphases, but we wanted something that satisfied all three of those. So that's kind of cool. We've been focusing a fair amount on speed. I think when we first released TensorFlow, we released a bunch of really nice tutorials that showed how to do different things with TensorFlow. But one of the mistakes we made was we released code that was meant to be expository and clear, and not necessarily the highest performance way you would write that. But often, then, people would take that as the way you should write a high performance TensorFlow model, and that wasn't necessarily the case. So we're now adapting and trying to put out things that are both the best way from a clarity standpoint, but also are high performance. That's been a bit of a TensorFlow got, I think, a bit of a bad rap. But actually, our performance is quite good. So we've been doing a bunch of benchmarking and producing reproducible benchmark results to show that our scaling is quite good. So this is single machine scaling, nearly linear speed up for a bunch of different image models on up to eight GPU cards, pretty close to linear speed up for 64 GPU cards for a bunch of different kinds of problems. So if you hear TensorFlow is slow, don't believe it. We also support lots of different platforms. And I think this is important, because often you want to train a model on a large data set in a data center, but then deploy that on a phone. And so we run on iOS and Android and Raspberry Pis, but also CPUs. And if you have a GPU card or eight GPU cards, we're happy to use that. We also run on our custom machine learning accelerators that I'll talk about in a minute. But really, we want to run on everything. So there's a bunch of other device manufacturers that are developing funky mobile ML accelerators, or Qualcomm has a DSP. And they're all working to make sure that TensorFlow runs well on those devices. We also want to be agnostic of language that people want, because you want to be able to run machine learning where it makes sense, and different people have different sort of language environments. The most fully developed system is obviously Python, but the C++ front end works pretty well for production use. And then a bunch of other people, external community members, have added a variety of other kind of not fully fleshed out, but reasonable support for some of these other languages. We have a pretty broad usage base. So like a year ago, we had a, almost a year ago, we had a meeting at Google of people using TensorFlow. And it was pretty impressive. We had people from most of these companies in the room, which I think normally they don't all get in a room together. Places like Apple was actually there as well, NVIDIA, Qualcomm, Uber, Google, Snapchat, Intel, many, many other places. So in terms of stars, I showed you the graph related to machine learning platforms. This is the top repositories on GitHub overall. And we're up to number six, which is pretty good. And all the other ones are either JavaScript or a list of programming books. This is a visualization of where people are interested in different GitHub repositories, which is kind of cool. Machine learning is done all over the world. So one of the things that's happened as that growth in interest has happened is there's been a pretty broad set of external to Google contributors. And so there's really, I think we're up to almost 1,000 non-Google contributors across the world doing all kinds of different things for adding features or fixing bugs or improving the system in various ways, which has been really nice. Oh, and I think it's kind of nice that there's growing use in machine learning classes of TensorFlow as a way of illustrating machine learning concepts. So at really good machine learning universities like Toronto, Berkeley, Stanford, and other places, they're starting to use that as the core of their curriculum. OK, so now I'm going to switch gears a bit and talk about some sort of more product-oriented applications of deep learning at Google. Google Photos is a good example. Computer vision now works. And one thing you could do is make a photos product around the idea that you can actually understand what's in people's photos, and that's been going really well. As a lesson for you who are starting companies often in applied domains, I think it's really important to be able to look at the machine learning work that is happening in the world and realize that often you can reuse many of the same ideas from one domain, and just by pointing it at kind of different data sets, get completely different interesting product features. So if you, for example, use the same basic model structure, train it on different data, and you get something different. One general model trend is give it an image, predict interesting pixels. So there's a bunch of ways you could do that. But if you have a model structure that does that, my summer intern from a few years ago, Matt Zehler, who actually went off to found Clarify, which is a computer vision company, we were working in collaboration with the Street View team on identifying text in Street View images. And so to do that, you can have training data where people have circled or drawn boxes around text, and you just try to predict the heat map of which pixels contain text in a Street View image. And so this works reasonably well. And then you can run an OCR model on those pixels and actually read the text. And it works across lots of different font sizes and colors and whether it's close or far from the camera. And so then some people in the Maps team decided they would build this thing that would help you identify whether your rooftop has solar energy potential and how much energy you could generate by installing solar panels. And so obviously, one of the first things you have to do is find rooftops. And that's exactly the same model, but just with different training data where you now have circles around rooftops. And then there's a bunch of other work to estimate the angle of the rooftop from the imagery or multiple views of the same house, and then some stuff to predict what is the solar energy potential for that. And another area where we've applied this is in the medical domain. So the same basic model, we want to be able to, say, take a medical imaging problem. One of the first ones we've been tackling is ophthalmology problems, and in particular, taking a retinal image like this and deciding whether or not this has symptoms of a degenerative disease called diabetic retinopathy. And so this is, again, the same kind of problem. You want to identify parts of the eye that seem to be diseased in some way. And then you also have a whole image classification problem of, does this eye show symptoms at the level of 1, 2, 3, 4, or 5? And it turns out you can do this. So some people in our group have done a really nice medical study showing that if you collect 150,000 ophthalmology images and then you get each one labeled by seven ophthalmologists because if you ask two ophthalmologists to grade the same image 1, 2, 3, 4, or 5, they agree 60% of the time, which is slightly terrifying. If you ask the same ophthalmologist to grade the same image a few hours later, they agree with themselves 65% of the time. And that's mildly terrifying. So we had to get every image labeled by seven ophthalmologists to reduce the variance in the score and say, oh, five people think it's a 2, so it's probably more like a 2 than a 3. But in any case, the punchline of this paper is we now have a model that performs on par slightly better than the median of eight US board-certified ophthalmologists, which is cool because there's a bunch of places in the world, especially in India and other countries, where there are. are many people at risk and there just aren't enough ophthalmologists. So we're actually doing clinical trials in India. We've licensed this to our Verily subsidiary who's licensed it to a camera, an ophthalmology camera manufacturer who's going to be integrating this into the actual ophthalmology camera. Another area where being able to see is pretty useful is robotics. If you're trying to build robots, just being able to perceive the world around you clearly makes things a lot better. So we've been doing a bunch of experiments both with real robots and also with simulated robotic environments and also with trying to do imitation learning from people performing actions and then trying to get robots to do it. So we set up what we call an arm farm. Oops, maybe I'm not on the internet. Well, anyway, it's not that exciting except that we have a bunch of robots trying to grasp things and they can essentially learn to grasp, learn on their own whether they're grasping something successfully by just having a bin of things in front of them and they just try to pick something up. And if they fail, their gripper closes all the way. If they succeed, then they don't close their gripper all the way and they can actually see from the camera that they've managed to pick something up. And so they can practice picking things up and we can pool all the sensor data from all the robots that are doing this to retrain a model every night for grasping so that the next day's grasping attempts are better and better. And by having lots of robots do this, you actually get a lot of parallel experience, much more than you can get on a single robotic arm. And so we have a data set that we've actually released publicly of about 800,000 grasp attempts versus about 30,000 grasp attempts, which was kind of the big public data set in the past. And surprisingly, 800,000 grasp attempts gives you a much better grasping mechanism and model than 30,000. Not surprising. We've also been trying to, this is me awkwardly looking at a robot on a screen that you can't see doing some actions. I'm trying to like mimic the robotic nature of it. And then we have a video of me doing that. And then we're just trying to learn from the videos to transfer that action to the real robots. And that's working reasonably well. Here's another example. And we're doing that first via simulator. And then we're taking that simulator and then trying to transfer those activities to a real robot. And that works reasonably well as well. Another place that I'm pretty excited about deep learning is in lots and lots of scientific domains, you often have the case where you have a simulator of some really complex phenomena. And that's often a sort of HPC style application and very computationally expensive. But it kind of gives you insight into whatever scientific processes are going on. And that allows you to kind of iterate in a computational science methodology. But often those computations are pretty expensive. And so one of the things we've been working on, and this is just one example, we have a lot of different fields of science where we've seen this to be true, is you can use those simulators as training data for a null net. So quantum chemists have a problem where they take in a configuration of molecules and they run a bunch of time steps. And then at the end they get some information about how the ultimate configuration of those molecules turns out. And from that they get a few properties about those molecules. Like is it toxic? Did it bind with something else? You know, a handful of these things. So it turns out that's the data that if you use that as input you run this really expensive simulator for an hour and then you get these 13 numbers out. That turns out to be great training data for a neural net. And so you can train a neural net to do exactly that same task, or to approximate that task, approximate the entire simulator. And you can essentially, the punchline is the bottom there, you essentially get indistinguishable accuracy from using the real simulator but it's 300,000 times faster. And that has a lot of implications for how you might do quantum chemistry. If you suddenly have something that's 300,000 times faster you might like run a hundred million things through your simulator, neural net based simulator, and figure out what's going on. Look, you know, to identify a bunch of candidates that you might want to look into in more detail. So that's exciting. Another place where these kinds of pixel-to-pixel models come in is some people in Google have done a model that tries to predict depth from an input image. And we have some training data where we have the true depth given the camera viewpoint and where things are in the room or in the world. And then we try to train a model to do predicted depth from just the raw pixels of that image. So that's a pixel-to-pixel learning problem and you can imagine a lot of pixel-to-pixel learning problems. And indeed, you know, one application in cameras is you want to predict depth in a portrait and then you can do kind of funky cool effects like identify the person in the foreground and turn the background black and white or like make it all fuzzy and artsy in the background, which is kind of cool. But it turns out you can also take microscope images as the raw microscope images input and then the chemically stained microscope image as the target for your model. And so, for example, that's often how people see, you know, cell bodies and cell boundaries is you apply different kinds of stains to the cells and then you can make them show up on a microscope better and you can see what's going on. Well it turns out, so this animation, that's the input, that's the ground truth, and that's the predicted output of a neural net that's trained to sort of virtually stain something without actually staining it. And this is important because it turns out when you actually stain something that kills the cells, so you don't get any temporal information about what's going on in the cells, they essentially die when you apply the stain. But here you can virtually stain something but then follow them longitudinally in time and see how cell processes kind of continue to happen without actually staining them. You can also stain for things that you can't actually really necessarily develop a true chemical stain. So if you have someone label which things are axons and which things are dendrites and neural tissue, you can have a microscope viewer that highlights axons and dendrites in different colors and cell bodies, even if that's kind of not something that you can chemically do with a real stain. One of the areas we've been doing a lot of work is in language understanding models. And so this started out as research in our group to do essentially sequence-to-sequence learning. So you have some input sequence and conditioned on that input sequence you want to predict an output sequence. So this turns out to be useful for actually a whole bunch of different problems, but one of them is translation. So if you have a bunch of sentence pairs, one in French and the corresponding meaning sentence in English, then you can use a sequence-to-sequence model to take the input sentence one word at a time, or even like one character at a time, and then when you hit a special end of French token, then you essentially start spitting out the corresponding English meaning, English translation of that French sentence. And so that works like this, and you have training data that is like that, and you just try to predict the next word from that training data using a recurrent neural net. And that turns out to work reasonably well. And then you're actually trying to find the most probable sequence, not the sequence with the most probable individual terms. And so you do a little beam search where you kind of keep a window of candidates, and you sort of search over possible vocabulary items until you are happy and found a likely output sequence, and that's how you do translation. So one application of this is in Gmail. We added a feature called Smart Reply, where essentially we get an incoming email. So this is one sent to my colleague Greg Corrado from his brother. Hi, we wanted to invite you to join us for Thanksgiving dinner. Please bring your favorite dish. RSVP by next week. So to reduce the computational cost, we have a small feed-forward neural net that says, is this the kind of thing where a small short reply would make sense? And if yes, then we're going to activate a sequence-to-sequence model, and we're going to do a much more computationally expensive thing with that message as input, and then we're going to try to predict plausible replies. And so this system produces three. It says, count us in, we'll be there, or sorry, we won't be able to make it. And so this is a nice application of sequence-to-sequence models, and if you squint in the world, you'll find lots of applications of these. And so turns out Smart Reply, in April 2009, there was an April Fool's joke that Google put out saying, ha ha, we're going to reply to your email automatically. But then in November 2015, we launched this as a real product, and in just three months, 10% of mobile inbox replies are generated by these Smart Replies. So that's kind of cool. But obviously one of the real potential applications of this was Translate, which is what we were doing, demonstrating that this research was effective on a large by academic standards, but smallish public data set of translation data called WMT. So when we looked to work on applying this to the real Google Translate product, we actually had 100x to 1,000x as much training data. And so scaling this up was actually pretty challenging, and we wanted to make the model a lot higher quality, but we did a nice, fairly detailed write-up of the engineering behind that in this many, many author paper. And so this is kind of the structure of the model that we came up with. It has a very deep LSTM stack, each of which runs on a different GPU. There's an attention module, so that rather than just having a single state that's updated by the recurrent model, you keep track of all the states, and then you learn to pay attention to different parts of the input data when you're generating different parts of the output sequence. So you're about to generate, you know, the next word, and you look back at the word hello and the input sentence, and so on. And so this thing runs on one replica of this model, runs on a machine with eight GPU cards with different pieces of it in different places, and then we run a lot of copies of this model to do data parallelism across the large training data, and we share the parameters. So this is a technique we've been using for quite a while that we originally published in 2012 about what we call at that time a parameter server, and then using many parallel data, data parallel copies to process different input data, all trying to update those shared parameters by applying gradients to those parameters. And this allows you to scale training quite quickly, so you can have, you know, 50 replicas of this kind of setup, or 20. I think in this case we were using about 16, so we're using 100 GPU cards to train a model. And the really good news is the blue line here is the old phrase based machine translation system that didn't really have much machine learning in it, any machine learning in it. It had large statistical models for lots of different sub pieces of the problem, so it had a target language model that told you how often every five word sequence in English occurred. It had an alignment model that says how words in English and French sentences align. It had a phrase table and a dictionary of plausible English and French phrases and sentences. And it was like 500,000 lines of code to glue this whole thing together, and that's the blue line. And what we're showing is the quality of translations generated by that system as judged by humans. And the green line has a substantial jump in quality for basically nearly every language pair jumps up very substantially. It doesn't look like much, but those are really big jumps in quality. And the other nice thing is that system is 500 lines of TensorFlow code instead of 500,000 lines of GUI code with like lots of handwritten logic. And the yellow line on top is human, bilingual human, not professional translator, but someone who speaks both those languages, translations as judged by other humans. And so you can see that for some language pairs we're actually getting quite close to that human level quality for translation, which is pretty exciting. And when we were trying to kind of roll this out slowly across lots of different language pairs, and so we launched it in the dead of night in Japan, and all of a sudden all of Japan or many people in Japan noticed that suddenly English to Japanese translation was actually usable in quality as opposed to before when it was kind of supported but not usable, as one of the people on our translate team referred to it. And so this professor at a Japanese university decided he would do this experiment translating the first paragraph of Hemingway's The Snows of Kilimanjaro to Japanese and then back and see what the quality looked like. And so if we focus on the last sentence, the old phrase-based system says, whether the leopard had what the demand at that altitude, there is no that nobody explained. So I think there's a leopard involved, but other than that I really can't understand that. And the neural machine translation just generates much more natural sounding translation, so no one can explain what leopard was seeking at that altitude. And the only mistake it made was it left out the word the. So you can see how this transforms it from like really not usable to like actually pretty good. Another area we're doing a lot of research in is this notion of automating solution of machine learning problems, what we call learn-to-learn. And the idea here is that the current way you solve a machine learning problem, probably many of you and your companies are solving machine learning problems, you have data, you have some way of doing lots of compute, a bunch of GPU cards or something, and then you have a human machine learning expert saying, okay I'm gonna try this kind of model, I'm gonna use this learning rate, and I'm gonna do transfer learning from this data set, and then you hopefully get a solution. What we'd like to turn that into is you have data and maybe use a hundred times as much compute, but you don't need a human machine learning expert. And if we could do that, that would be really really good, because if you think about what's happening in the world, you know there's probably 10 million organizations in the world that should be using machine learning and actually have probably data in electronic form that would be suitable for machine learning, but there's, you know, order a thousand organizations that have really hired machine learning experts in the world to actually tackle some of these problems. So we're trying lots of different efforts in this area, and I'll talk about two of them. One is a way of designing neural architectures automatically, and the other is a way of learning optimizers automatically. So architecture search, the idea is we want to have a model generating model. So the same way a human machine learning expert says I'm gonna try this kind of model, we're gonna have a model generating model that's gonna spit out models for this problem to tackle a particular problem. And so the way this will work is we're gonna generate 10 model architectures, we're gonna train each of them for a few hours, and then we're gonna use the loss of the generated models as a reinforcement learning signal for the model generating model. And this is sort of just on the realm of feasible for small problems today. But it actually works for small problems. So here is an example of a model architecture I came up with. And you'll see it looks sort of not like something a human would have designed. The wiring is kind of crazy. And this is CIFAR-10, which is a very small color image problem with 10 different classes. Got pictures of horses and planes and cars. Not that many classes, but it's been pretty well studied in machine learning literature. And the error rate, like all machine learning image problems, has been dropping over the years. But everything above these last four lines is a human-generated machine learning expert model that someone came up with a new thing and published and beat the previous state of the art. And so this is the current state of the art. And this neural architecture search, basically, with that architecture, got very, very close to that state of the art without any human knowledge of the underlying architecture. We also tried it on a language modeling task. And the traditional way you do this for recurrent models is you use an LSTM cell whose structure is shown there. That's kind of the default thing you're going to do if you're going to use any sequence data. And we just gave the architecture search the underlying primitives of an LSTM cell and said, go to it. Find us some way of dealing with sequential data. And that's the cell it came up with. It looks somewhat different. But in this case, it actually beat the state of the art by a pretty substantial margin for this language modeling task. And the other interesting thing is we then took that cell and used it on a completely different sequential task in medical records future prediction task. And it performed better than an LSTM cell in that domain as well. So learning the optimizer rule is similar. We're going to have symbolic expressions and give the model, the optimizer expression learning model, access to the raw primitives that you might consider using in a neural optimizer update rule, things like, here's the gradient. Here's the running average of the recent gradients. Here's the momentum term. And so the top four lines here are human designed update rules that people traditionally use. And they've been designed over the last decade or few decades in the case of SGD and are generally what people use. Adam is a pretty good choice these days. And often SGD with momentum, which is the second line, is the best choice. And what you see is that this thing came up with 15 or something completely different expressions than what we've explored. And they're almost all better than all of the human designed ones. And so that's kind of encouraging. That's going to appear in ICML in a month or two. And we also took one of the most promising ones of those. And we then transferred it to a different problem where we hadn't the problem we didn't design the optimizer on. And we used this other optimizer and found that it gave better training perplexity. Lower is better for perplexity. And better blue score, which higher is better for that metric, than Adam, which was the best optimizer we'd found before. So I think this whole notion of learning to learn is going to be pretty powerful. Because a lot of what machine learning experts do when they sit down to solve a problem is actually they run lots of experiments. And right now, a human can't run that many experiments. It's just a lot of cognitive load to run 50 experiments or 100 experiments. And this thing can run 12,000 experiments in a weekend. And many of them suck, but many of them don't. So the other thing that's interesting is that a lot of what's happened is we've been able to solve lots of problems because we have a lot of data and because we've been able to scale the amount of compute we throw at different problems. And so really, one of the nice properties of deep learning is really transforming how we think about designing computers these days. So deep learning has two really nice properties. So one is that it's perfectly tolerant of very reduced precision arithmetic. So one significant digit kind of thing. You don't need double precision, certainly. You don't need single precision floating point. And the other property it has is it's generally made up, all the algorithms I've showed you are made up of a handful of specific operations kind of cobbled together in different ways. And so that really leads to an opportunity where if you can build custom machine learning hardware targeted at doing very reduced precision linear algebra, then you can all of a sudden unlock huge amounts of compute relative to CPUs or GPUs, which are not really targeted at doing these kinds of things. And so we've been doing custom machine learning accelerators for a while. We've had a first generation one that was targeted at speeding up inference, so not training, but inference when you're actually running a trained model in the context of a product. We had our first version deployed in our data center for two and a half years or something. And we just revealed this system, which is designed for both training and inference at Google I-O. And this is a board. One of the things we felt was important was to design not just a chip for training, but also an entire system, because you're unlikely to get enough compute for large problems on a single chip. So we designed a really high performance chip. And we also designed them to be hooked together. So this is what we call a pod, which is 64 of these boards, each of which has four chips. So 256 chips, and that's 11 and 1 half petaflops of compute. And we're going to have lots and lots of these in our data centers, which is pretty exciting, because I think we'll be able to tackle much bigger problems. It's going to bring a lot more compute for some of the learn-to-learn approaches. And normally, programming a supercomputer is kind of annoying. So we decided we would make these programmable via TensorFlow, so you essentially can express a model with a new interface that we're adding to TensorFlow 1.2 called estimators. And then the same program will run with minor modifications on CPUs, GPUs, or on TPUs. And that's going to be available through Google Cloud. You can get a thing called a Cloud TPU later this year, which is going to be a virtual machine with 180-teraflop TPU version 2 device attached. And it'll run TensorFlow programs super fast, we hope. We're also making 1,000 of these devices available for free to researchers around the world who are doing interesting work and want more compute and are committed to actually publishing the results of that work openly, and also hopefully giving us feedback about what's working well on these TPU devices and what's not. And ideally, open sourcing code associated with those models, but we're not sure that's going to be a hard requirement, but it's a desire on our part to help sort of speed up the whole science and machine learning research ecosystem. And so you can sign up there if you're interested in any of these things. Google Cloud is also producing higher-level APIs that are more managed services or pre-trained models that you can just use without necessarily being a machine learning expert. So if you have photographs, you can run them through the Vision API, and it will read all the text in it and find all the faces and tell you what kinds of objects are in it and do all kinds of good stuff. And the Translation API has really nice, high-quality translations that might be useful, lots of things. One final closing thing, we've also been experimenting with machine learning for doing higher-performance machine learning models. And so in this case, what we've been doing is a similar kind of reinforcement learning where we're going to take an abstract TensorFlow graph, and we have a bunch of computational devices that we want to run that on, say, four GPU cards. And we say to the RL algorithm, we want you to find the placement of TensorFlow operations onto devices that makes that model run as fast as possible. And the current way people do this is they say, OK, I have four GPU cards. I'm going to run this part of my graph on GPU card one, this part on GPU card two. And that's OK, but it's kind of annoying because it's not something that humans really want to think about. And so we're actually able to come up with pretty exotic placements. So each color there is a different GPU card. And this is, on the left, you see a sequence prediction model unrolled in time. So different time steps are on different GPU cards, which is not kind of counterintuitive to what a human expert would do. And this is a image model. But the punchline is they're basically 20% faster than the human expert placement that people came up with. OK, so now we're here. And we think there's a big opportunity with more compute to actually accelerate a lot of the use of machine learning and the sort of different applications and societal benefits that you can actually get from it. So I'm pretty excited about that. And example queries of the future. Actually, the upper left one we can already answer. Describe this video in Spanish. I didn't show you, but we can actually caption and generate sentences about images. It's probably not that long before we'll be able to describe a human video. Find me documents related to reinforcement learning robotics and summarize them in German. That's a pretty complicated request. But imagine that's the kind of thing you would give to an undergraduate as like a semester project, and then please come back with a report for me. But imagine if we could actually do that, how much more productive everyone would be. It'd be pretty amazing. And then robotics, I think, is at an inflection point where, through machine learning for control, we're going to have robots that can actually operate in messy environments like this one or the kitchen over there and actually know how to manipulate things in a safe way interacting with humans. So that's going to be exciting, too. So you already know this, but deep neural nets are making big changes, and you should pay attention. You can find more info about our work at g.co slash brain. And that's all I have. You could join our team, but you're already starting companies. Thank you. Before we get to questions, I have a poll that Zach requested me to do, and I'm curious, too. How many of you are using deep learning models in what you're doing? OK. How many of you are using CAFE? How many of you are using PyTorch? OK, a half-hearted PyTorch. How many are using Theano? Keras, OK. And TensorFlow? OK, cool. That's good to know. You have stars in your reality. Excellent, yes, yes. It's roughly in proportion, in fact. Cool. Anything to add, Zach? OK, any questions? Yeah. Oh, well. Can I just grab it? Sure. When you talk about the learning to learn stuff and the neural net models designing other neural net models, for example, when the neural net model designed a model that performed better on C4.10 than other models, do you look at those models and say, oh, I understand why that performed better? Or is it the case that it just did something wacky, and you don't understand really why it works better? I mean, I think it depends. Sometimes you just want the most accurate end model for the problem you care about, and that's fine. Sometimes you're trying to come up with a model, and you want to understand why it's more accurate, so that you can then drive further human-oriented machine learning research. So I think it depends. The symbolic expressions for the optimizer update rule, those are actually pretty interpretable. So if I go back to the, it's actually pretty interesting, right? If you look here, there's this sub-expression, e to the sine of the gradient times the sine of the momentum, that seems to reoccur in a lot of these different optimizers that it's learned. And that sort of makes sense. Basically, if the sine is the same as the direction you've been going, then speed up. And if it's different, then slow way down, right? And that's kind of a good intuition to have. And you can see that the reinforcement learning wanted to do that in five of these things. So in some sense, depending on what problem you set up in the learn-to-learn framework, you can actually come up with human insights about, oh, well, that makes sense from the experiments it's run. But here, you can kind of investigate that cell and understand, if you actually look, it's doing a bunch of ads at the bottom. But it's also doing an element-wise multiply for the input data for one of the paths through the cell, which is kind of different than the LSTM cell is doing. And so that might be sort of insight into why it's doing that. If you look here, I think that architecture is kind of crazy. But we do know from ResNetwork that these skip connections make a lot of sense. And so this is just kind of like crazy skip connections in lots of places. Well, yeah, then I guess maybe a follow-up question is, do you think this is going to be a tool for humans to build better nets? Or this is going to be how nets are built in the future as with other nets? Could be both. But I will say that this system can run 12,000 experiments in a weekend. And humans are not that good at that. So with all that compute you were showing, it strikes me that you might run out of human trainable data. Is that stuff really for the reinforcement learning, where you can run 12,000 experiments in a weekend? Or do you have enough human-labeled data to satisfy that amount of computation? When we were training our translation models for one language pair, we were using hundreds of GPUs for a week. And for that problem, we actually have enough training data that we could only get through one-sixth of that data once. So we know that if we could get through all of it, the quality would be way better, right? Because that's just a general rule of machine learning. If you could get through all your data, probably it would be better than not. And if you could even go through it a few times, that would probably be even better. So we think there are plenty of problems where there's enough labeled data in the world that you want to tackle a single problem and train a single model on something like that. But it's also going to be pretty good for small model exploration, where you try 10,000 different things, and they each take an hour to run on some subset of the chip. So it just depends on the problem. The architecture search is kind of tenable with not current generation, but one generation ago GPUs for things like CIFAR-10, because you run that for an hour, and you get an answer for one of the experiments, and you run 12,000 of those. So 700 GPUs over a weekend. We know there's a bunch of algorithmic improvements we could do that would drop that by a factor of 10. But it's kind of just on the boundary of practical for tiny problems. And making it practical for real problems at scale, I think is going to be really, really cool. Maybe a follow-up question to that. So you had that slide on there where you have person, data, compute. Person's gone. With data, do you see anything in the near term in which you could have really powerful models on much smaller data sets than a company like Google would have access to? Yeah. I mean, I think the right way to tackle that is right now, the way we as a community tackle machine learning problems is we say, OK, we're going to train a model to do this. And we might say, gee, we don't have much data for this problem. We're going to do transfer learning from ImageNet, and then I have it. I have my 5,000 flower images and I'm gonna do transfer learning and fine tuning on that. But that's really kind of lame, right? Like if we want to build real systems, real intelligent systems, we want a model that knows how to do 1,000 things, 10,000 things. And then when the 10,001st thing comes along, we want it to build on its knowledge for how to solve those 10,000 things so that it can solve the 10,001st thing with much less data, with many fewer examples, with building on the representations it's already learned. So if we can build a single giant model that can do thousands of things, that's gonna improve the data efficiency problem a lot and also the time to, the wall time to actually being able to master a new task problem as well. So I think that's the way we're gonna get to, you know, more data efficient, more flexible things. Because the problem with the current approach is we train a model to do one thing and then it can't do anything else, right? Which is pretty lame. Yeah. What do your best engineers do while they're waiting for models to learn? Well, they often start up other experiments and hit reload on the visualizer. They write code. They think of ideas at a whiteboard. They do lots of things. But, you know, getting that cycle iteration time down from, you know, days or weeks to hours really just qualitatively changes your workflow. And so I think we're really shooting for making that time to result as low as possible. And then they won't have, you know, people will not have these week-long things where they're, you know, gosh, I hope my experiment works. So what would you attribute the gap in translation quality to between languages? Is it just amount of data behind each one? I think some language pairs, the translations are more natural because they're more related kinds of language families. And the alignment is maybe similar as opposed to a very different word order and very different character sets, for example. But I think ultimately we will get higher accuracy models by, you know, using a pod to train a really big model and get through all the data once. I suspect we could probably exceed human quality translations for some language pairs, you know, if we could get through all the data once, maybe with maybe a slightly bigger model. And the analogy is, you know, even the best human translator is only gonna see so many words in their life. And if your translation system can train on a lot more data and see more of them, even though it's probably not as intelligent and flexible at getting its maximal information from each word that it sees, it's maybe at some point gonna do better. Yeah. Do you find that you can kind of brute force the network architecture by drawing certain types of data versus others? And what's the variance between like different sorts of tasks? So to be honest, we haven't experimented with a broad enough set of tasks to really make conclusions here. I suspect that there may be tasks. I think probably for any supervised task, that's like where you have a crisply defined input and output and you have enough training data, you know, it'll probably work. It's a question of how much compute you need to apply. We have a lot of ideas around, you know, making the algorithmic search more efficient by cutting off experiments that are obviously dead early rather than running to conclusion, doing lots of things like that. I think the architecture search itself, right now we train a bespoke model generating model for each problem we're trying to solve. And so obviously, you would wanna train a model generating model that solves many problems. And then you'll be able to get in a better state of good architectures for a new problem because of seeing similar problems. And you're like, oh yeah, like lots of convolutions and 12 layers is a good place to start or something. How does the kind of internal development cycle look like for optimizing the machine learning models? Like how often do you retrain? How often do you play with a different set of hyperparameters? For the learn to learn models in particular? No, but for example, for all the pre-trained APIs you provide like the Vision API, how frequently do you kind of do the retraining and stuff? Right. It varies depending on the domain. Like some domains like Vision are pretty stable. Like you don't need to retrain every hour. But other domains like for some of our internal problems like predicting, maybe you're trying to predict what ads are relevant. That set changes fairly rapidly. Like there's a new chocolate festival on Long Island tomorrow that wasn't there yesterday. And now you actually want to know that that's important. So some things have a very stable distribution, some don't. It really just varies a lot depending on the problem. Certainly it's easier for things like Speech or Vision where just the basic perception is what you're trying to do and the distribution is pretty stable. And if you have a changing distribution that just introduces lots of annoying production issues because now you have to retrain and you need to sort of somehow integrate new data so that you can learn new concepts and new correlations relatively quickly so that you can then produce good outputs. Yeah. You mentioned sort of fast iteration being really important for developing this stuff. How much of the process sort of now and like the cutting edge neural net development is still trial and error? And how much of it is like I'm gonna insert this and I know what's gonna happen? I mean, I think a lot of machine learning research is empirical these days, right? You have an idea, you think it'll work, but you need to implement it, try it on interesting problems, explore the set of hyperparameters or whatever that will make the idea go from not working to hopefully working. And so it's often the case that you need to do this kind of empirical stuff. I mean, there's some ideas that you have a lot of intuition, like, oh yeah, that's definitely gonna work even beforehand because it's sort of putting together two things that did work with a third thing that also did work and it seems pretty obvious that combining them is gonna work as well. But other things, it's hard to build the intuition. I know a while ago, you guys had done some really great work on helping visualize what a convolutional neural network doing image classification was doing. So like the interpretability of models seemed to be like a focus for a bit. And then there's a point where you kind of cross that and it's like the learn to learn stuff you just can't interpret. And maybe this is kind of what you were asking, but how important is that for delivering production models to humans who maybe are not machine learning experts that need to work alongside a robot classifier? It's really important in some domains and not important in others. And we actually have a pretty big focus. I have a much longer talk or a set of slides. I select a subset among. We were doing a bunch of work in sort of understanding and visualizing and building interpretability for models that I didn't talk about. But it is an important area. The main areas where I think it's really important are in healthcare. Like if you tell someone, you're providing advice to a physician, you say, patient needs a heart valve replacement. They're gonna wanna know why are you saying this, right? And so if you can go back and highlight a part of a medical note that says, a year and a half ago, a patient was complaining about like their heart felt like it skipped a beat every so often or something. That's gonna give much more smooth interactions between a machine learning system and a human and let them kind of each do play to their strengths. Whereas if you just give a black box prediction, that's often not as useful in some domains. But some things like image classification, I just want the most accurate image possible, classification possible. Yeah. Okay. What caused you to originally start focusing on machine learning six years ago? And is there anything to be learned from that in terms of finding other areas that may have an explosive growth in the future? So the thing that caused me to start doing this is I heard, I kind of like to keep a pulse on different areas of computer science. And I started to see neural nets being successful in some domains just by like reading abstracts of things. And I had this bug in the back of my head from my undergrad thesis, that neural nets were actually the right abstraction. And so I kind of heard inklings, I chatted with Andrew Ng, who was consulting at Google one day a week. And he said, oh yeah, neural nets are, I'm like, what are you working on at Stanford? And he's like, oh, neural nets are kind of interesting again and I'm like, oh, cool, really? I used to do work on that. And I kind of, he and I started talking and I just felt like if the problem for neural nets was scale, like back from my experience where more compute seemed like the right answer but wasn't then, but now we actually have a lot more data. We have much more compute in a single processor. But if we could throw lots of processors at this problem, then perhaps scale would let us solve problems that we couldn't before. And so I kind of had this inkling that neural nets were a great abstraction from 20 years before and felt like it would be fun to go see if we could make them scale. Yeah. Yeah, can you talk a little bit about what you think the development of the larger field of AI would be in the coming years, especially in terms of like developing particularly like real reasoning systems because the neural nets of today are not necessarily reasoning most of them. Right, I mean, I think there's probably a lot of algorithmic things that we're gonna need but I do think one of the major problems and why we don't have systems that appear to reason is because of this problem of training neural nets to do one thing, right? If you had a lot more compute and you had a model that could do tens of thousands of things and you had some algorithmic constructs where you sat there and cogitated for a while and built sort of plausible scenarios and explored them with computation and then eventually came back with an answer for this new thing, that might appear to be more like reasoning because you're building on all this other groundwork of knowledge that you've learned from solving 10,000 other things. And I think that's what humans do, right? We learn to do a new task or to reason through something by building on our experience that we've already accumulated from perception and building up that kind of low-level thing around the world but also from bringing concepts together from math and science through our education and being able to reason through something. So I think a lot of it is that we don't have these massively multitask models being trained today. Do you feel like there's like a lack of some sort of persistent knowledge store that we're missing from the current? Because it feels like the human brain kind of has that, right? Right, I didn't put in this talk but I think one of the real problems that we have is we kind of have a model and we densely activate the entire model for everything we do. I think what we actually want is a model that's very, very big, like think 100 trillion parameters, but where for any given thing, you activate only a tiny fraction of it, 1% of it, 5% of it. Your brain works this way. And that seems like, and you have to be able to, the way you store stuff is just by having a lot of parameters. Yeah? So on that note of having some sort of network that can do like 10,000 things rather than just one, I noticed you haven't brought up D-MIME, like differential neural computing or like memory-augmented networks, so can you talk a little bit about that? Sure, I mean, I think memory networks are kind of an interesting emerging area where you have this kind of local state that you can update and mutate in the process of accomplishing some sort of task. So far, I think those have been applied to relatively modest-sized problems. They may be part of the solution, part of something that we would want, like short-term working memory as you're looking through a set of possible solutions to some problem. I think they're definitely an interesting area. I think combining that with a model that does 10,000 things or a million things might get us pretty far. As we automate more and more of 5% parameters search and architecture search, where do you see the role of data scientists or ML experts going? Well, I think one of the nice things about architecture search is it actually combines really well with machine learning researchers. So if someone comes up with a new, interesting thing, you can put that in the search space of these automated learning-to-learn systems pretty easily, and then all of a sudden, you now have the access to this hybrid, best-of-both-worlds, very primitive things, but also these hand-designed things that humans have come up with that seem effective, and use that as the search space. So it's not like machine learning researchers will not have anything to do. And I think there's a ton of work in figuring out what are interesting problems where machine learning can actually make a difference and which ones are worth solving and how do we solve them. Maybe a good time for this question. In your opinion, what's the coolest thing neural nets are being applied to right now? I'm really excited about healthcare. I think the ability of neural nets to ingest a lot of data and then make interesting predictions in a smooth way so that you can take a patient in a particular state and say, okay, here are the five most likely diagnoses for this patient, because I've seen a million other patients and I know these 17 seem to have similar conditions. I think that's one that will have a really big societal impact. It's fraught with lots of rollout issues because it's a heavily regulated environment, there's all kinds of privacy issues, but ultimately, I think making better healthcare decisions is going to be pretty big. The coolest things, I really like all the art generation kind of things, those are fun. The ability of neural nets to write a sentence about an image. I was kind of surprised that happened that early. I would have said, before that work, some of which was done in our group, I would have said, we're good at saying that's a lion, I don't think we can say that's a lion sleeping on a rock with a pretty yellow mane or whatever it is. And that's pretty cool. Okay. Okay, thank you very much. Sure, thank you. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "On starting and scaling one of the biggest iOS apps",
    "description_video": "David Lieb, founder of Bump (YC S09) and former head of Google Photos, talks about his journey as a founder and how Bump became one of the biggest apps on the App Store. He discusses how Bump pivoted from contact sharing to photo app, and his transition to scaling today's biggest photo app, Google Photos.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/5f-on-starting-and-scaling-one-of-the-biggest-ios-apps",
    "youtube_url": "https://youtube.com/watch?v=fDcW_qb-uew",
    "mp3_file": "downloaded/On_starting_and_scaling_one_of_the_biggest_iOS_apps.mp3",
    "mp3_content": "Welcome to the podcast, guys. Hey, thanks. Thank you so much. So today we have David Lieb. He is a product director at Google, specifically for Google Photos. What some people might not know is you are also the co-founder of Bump. And Bump was one of the biggest apps on the App Store for the first years of the iPhone. How did that happen? Yeah, totally random. So we, I was in business school. I had been an engineer, and I kind of went to the dark side and went to business school in the fall of 2008. This was right when the iPhone had come out a year earlier. They had just opened up the App Store to third party developers that summer. So I showed up to business school and I like met a couple people in the computer science department who had built like apps over the summer. And this one guy I met, he had built an app that looked for open Wi Fi networks. And it just like told you which ones were open and which ones had a had like a pay or whatever it's called a password. And he made $200,000 that summer selling that app. I was like, Okay, we should we should build an app here. And at the same time, I was in business school, and I was meeting all my new business school classmates. And we were doing that thing that like we still honestly do today, which was, hey, tell me your phone number, I'll type it in, then I'll call your phone, you dismiss the call. And then you asked me how to spell my name. And I've done that. Like one day, I did that 10 times. And I was like, Okay, somebody should solve this. And ooh, there's apps now, I could probably solve it. So I emailed a guy I met, I didn't really even work with him directly. But I had met at my previous job at Texas Instruments. And I said, Hey, Andy, like any interest in building an iPhone app? And at the time, he was like, I think Android is going to be bigger. And I said, Let's start with iPhone, I think it'll get there sooner. And so we just started hacking away and trying to build this app to make it easier to share your phone number with people that you met. It was a total side project. I was like a full time business school student, he was doing his own thing. He was in California. We just kind of worked on it. For a while we met I met my third co founder, Jake mince, at business school. He was also just a random classmate of mine we met, we both had worked at Texas Instruments. So we like started to talk about that. And we brought him on board. And the three of us just kind of did the whole thing ourselves in our spare time. And we put it onto the App Store. And people started using it. And we were like, Oh, and this was in 2008 to the night we launched March 27 2009 was when it got out to the guy. And at that time, it was very non obvious that apps are going to be big. I remember watching the after first like fart apps. You know, like, silly, trivial things. And I think a lot of people viewed bump as a silly, trivial thing, too, right? It was like this kind of novelty of the iPhone, like, Oh, yeah, it's got an accelerometer, you can bump your phone together, it does something. But that actually was like the engine that made it grow. So like, we launched it in March, we got a few people started using it, it was growing slowly. But then because of that, like novelty, and the fact that the iPhone was a thing in the news around that time, every reporter wanted to talk about the coolest apps on the iPhone. And so I remember I met one reporter from the Chicago Tribune at like a random business school conference. And I emailed him and I'm like, Hey, I've got this cool app, you might want to write about it. And he wrote about it. And then I did this little hack where I took his article and I forwarded it to like the next highest person on the like journalism rank. And I think I mailed it to David Pogue at the New York Times. I was like, Hey, the Chicago Tribune's got this already, but you could still write about it. And then he wrote about it. And then I took that and I like went up the notch. And eventually, it just got pretty popular. And I think we were, we were like the maybe on the like 200 on the top app chart at the time that the billionth app was going to be downloaded from the app store. And because we were the top 200 app, we were getting a lot of downloads that day. So the probability of us being the billionth download was like 2%, I think, on the day that it happened. And it was us. And so I got a call in Chicago, I was in Chicago, I got a call from the woman who runs all of developer relations from Apple. And she's like, Hey, good morning. You were the billionth app downloaded yesterday. We'd like to, you know, tell the world about it. But I wanted to call you to make sure that your servers are going to be able to handle it. And I was like, Oh, yeah, let me let me call you back. So I call Andy, I'm like, Andy, are we gonna be able to do this? He's like, I don't know. And I said, Okay, that sounds like a yes. So we just we said, Yeah, go for it. And, and that then put us on the map. Like that was the thing that got us globally, like everybody heard about us. Apple promoting you or what happened? Yeah, I mean, Apple, like, did a marketing, a little effort, a little marketing effort around it. But then later, like after we joined YC that summer, they actually put us into an international TV commercial that this was the like, there's an app for it campaign, people might remember. And we were part of that. And we didn't really know we were going to be a part of it. The way Apple works is they're very secretive. They say like, would you please sign this waiver that says we can use your brand in various things? And I'm like, Okay, sure. And yeah, one day during YC, our search, we were looking at our graphs, and our servers just went, like, it like was a factor of 1000 in 10 minutes. And we were like, what's going on, there must be a bug. And then our friends started pinging us saying, Hey, wait, I just saw you during Dancing with the Stars. And I'm like, Oh, wow. And that's the point where our servers like totally melted down, everything broke. And this was the first moment where I realized the value of the YC network. I sent an email out to, you know, YC founders. And I said, Hey, does anybody know how to, I think we were using Apache, there's like an Apache web server in our stack at the time. And I said, Does anybody like, is anybody an expert at this? They came over to our office and just sat in our desks. And they said, like, step away from the keyboards, we'll fix it. And they just totally fixed it for us. And so that was the first moment where I was like, Oh, YC is really valuable. I didn't like, I remember when I was talking to Paul Graham about how we should do this. And he said, I won't be able to explain it a priori why it's really valuable. But I guarantee you'll see that it's very valuable. And that was the first moment where I was like, Yep, he was right. I'm curious about how you got into YC. So like, did you know about it before? How was the interview like? Yeah. No, we didn't know anything about it. Honestly. Jake and I were in business school, we were trying to like learn about tech, because we were like everybody in business school, you're supposed to go get an internship for the summer. And so we were like, Oh, where should we get our internships? So we were like reading TechCrunch a bunch. And we like kept seeing this thing called Y Combinator. And I was like, What is that? And it turns out we knew a couple people who had gone through it already. And so we went and talked to those people. I knew Sivraj, who had done Watt Vision, I think was his first one. And like, I went and talked to him. And he's like, Yeah, you should totally do it. And so we ended up applying and got in the interview process was fascinating to me as an outsider in this world. Who's interviewing you? Our interview was PG, Jessica, Robert Morris, and Trevor. Trevor. Yeah, four of them. I can only imagine what were their responses when you're like, Okay, so this is an app that you share your contact information. It was fascinating. We walked in, and we sat down and literally before I could open my mouth, Paul said, Give us your phones. We want to try it. And I was like, Okay, hand our phones over to him. And they just start playing around like, RTM was like, Oh, I'm gonna try to hack it and break it. Like, let's all bump at the same time and see if we can break it. Right. And then, and I do distinctly remember Jessica being like, So how do you guys know each other? Like, tell me about that. And like, that was the moment where I was like, Oh, okay. She's interested in understanding like how the founders know each other, what our backgrounds are, like, what type of people are we? Whereas like, Trevor and Robert were just like hacking away at the tech, right? Nerding out. So it was a fascinating moment. And the most surprising sentence that was spoken in our interview was, at some point, PG just kind of like detached and like put his head down, and was kind of just thinking and he said, How does this become bigger than Google? And I was like, Dude, are you crazy? But that just showed that like, how he thinks that like, you can take something that seems so frivolous at the beginning and turn it into something potentially that would be really big. So that was it was cool. That's so cool. And so we're, did you establish a metric early on during YC? Like, what was your goal before demo day? We were really anchored on how many people used it and how many times they used it. That's like the main thing that we were focused on. In hindsight, that probably was not the right thing to be focused on. But I think, especially for us as total newbies to this space, we didn't know anything better. And so this was actually one of the big learnings that we had at Bump that we grew like crazy. Like we got up to 150 million downloads of our app. And I think at the peak we were at like 10 million monthly active users. So it was like a very big property, especially 10 years ago on the internet. That was like really big. But the thing we were looking at was like how many people use it and how many bumps were happening per day and per month. And what we weren't tracking as precisely as we should have was do the people who use it today, like when do they keep using it? How frequently do they use it? And what is the retention curve? So I remember we were raising money and all the VCs would ask like, what's your cohort retention curve look like? And I would be like, oh, it's good. And then I'd go and like Google cohort retention curve. Like, what is that? And I was trying to learn like, what is this metric that people keep talking about? And in hindsight, now I realize it's like the single most important thing. And with Bump, the actual dynamic was that our long-term cohort retention was really good, actually, if you measured it on a wide enough time period. Basically, people kept it on their phone and they would definitely use it at some point in the future. The problem was the frequency of use was very long. And so we thought that we were going to be able to build a business off of a large user base using this product. But if your large user base uses your product infrequently, you have to figure out a way to extract a lot of value each time they use it. And for Bump, the value was marginal. It was like, yeah, it's nice. It's convenient. I could solve my problem in another way. And it's not that hard. So ultimately, that was the thing that kind of killed it as a business for us. But surely you tried things, right? Like what you try to push into before you ultimately decided to do something with Photos? Yeah. We thought about a bunch of ideas like, should we just charge for the app? Or should we have a freemium model where there's certain feature set that you would get if you would pay? We tried like in-app purchases for different stickers and things like that. We tested all these things as like tiny 1% tests. We tried ads in the product also as a little test. And we basically concluded we could basically get like maybe $1 for every user of the product per year on average. And then we realized like, oh, we've got 10 million monthly active users. That's a nice business, but it's not a business that you go raise huge amounts of VC funding to go build. So that was the point. I think this was in like beginning of 2012, maybe, where we realized, oh, hmm, we need a better plan. Because our plan all to that point was just grow, grow, grow, grow. Facebook did it. Twitter's doing it. We'll just do it too. And it'll be great. And I think we didn't understand the fundamental differences between our business and those businesses. What made the product grow? Like what made Bump be so big? It was 100% word of mouth distribution. So we spent no money on customer acquisition, no money on marketing. I used to tell this story that the amount of money we ever spent on marketing, I think was like $42. And it was for me to buy a videotape to put into a borrowed camcorder and a black piece of felt to put behind so I can make the demo video for Bump in my apartment. That was it. But yeah, it was all word of mouth. People who got the app thought it was cool enough that they wanted to be like, hey, Gustav, try it. Like, I want to show you this cool app I just downloaded. And what we thought was going to be an inhibitor to growth, which is this chicken and egg problem, like you can't use it unless I have it, actually turned out to be the driving force behind our distribution. Because it was like novel and cool enough that people were willing to like take that investment to say, oh, just download it. I'll wait. And, you know, that worked. And you thought about product market fit quite a bit. You mentioned that in one of the talks you did at YC. So we'll come to Flock in a second, but there's three different products you worked on the last couple of years. And when you think about the word product market fit in terms of Bump, how do you analyze that today after the fact? Yeah, product market fit, it's a very subjective concept. I don't think you can really measure it because you can have very great product market fit with some customer base. But as you try to expand your customer base, you might find like, oh yeah, there's not product market fit for these other people over here. And so saying that like you've reached product market fit, I think is really like, it's a staged question. And ultimately, like, if you want to be huge in a consumer space, you've got to get to a large group of people. And the question is, do you have product market fit for that large group of people? Even with Google Photos today, like my answer would be, we certainly have product market fit for a large group of people in the world. But there's another group of people who use our product that I wouldn't say is product market fit necessarily. There's a whole lot more things that we need to understand and build for that. When you get to like a billion or more users, there's the next person who joins your product, like, they're very different than the first person who joined your product. And so you've got to really understand that. Got it. So after Bump, you guys tried another product. So Flock came around. Tell us about that. Yeah. So we built Bump to share the contact sharing problem. And people started using it for that. Apple eventually added an API to access photos on the phone. And we thought, OK, let's just add that. Let's see what happens. It's pretty cheap to do. So we added that feature and people started using that. And it turned out that turned into the biggest single use case of Bump, sharing photos. And so one day in, I guess, beginning of 2012, when I was looking at our dashboards and I'm like, I think it's not going to keep growing. What are we going to do? I thought back to the advice that I heard PG give us back in YC, which was when you're stuck, go talk to your users. They will always tell you what they want. So I said, OK, guys, give me a list of the top 100 users of Bump in the world. I'm going to try to go have phone calls with them. So Jake and I, that day, went into a conference room and just tried to call as many of those people on the phone as we could. And we said, hey, we're the founders of Bump. We just wanted to hear what you think of it. Why do you use it? That sort of thing. And what we heard was basically most of those people said, oh, I don't use it for contact sharing. I use it to share photos with my husband. And we're like, wait, what? You can just email the photos to your husband. Why do you do it? And these people would tell us, well, it's just easier and they get the full resolution file and I don't have to worry about attachments and emails bouncing. It's just easy. And we thought, oh. And that then led us to, OK, so there's clearly a problem in the photo sharing space amongst your friends or family. But the product we built is kind of the most hard product to use to solve that problem, because both people have to download this app. You have to stop what you're doing and both decide, OK, we're going to do this Bump thing now. You have to physically touch each other. When you're building product, you try to minimize friction of using your product. And with Bump, it was almost like we maximized the friction. So we were like, OK, let's try to build a product that minimizes the friction rather than maximizes it. And so that led us to this product called Flock that we built and launched. It was really a very convenient turn of events, where at the same time that Jake and I were sitting in that conference room, roughly, having that learning or that insight, our engineering team was developing the Bump algorithm, which was really like a pattern-matching early type of AI system that would use a bunch of signals to predict whether you bumped with another phone, because it was all server-based. There was no... Right, there was no NFC. Yeah, exactly. So it was all kind of like a magic trick. But our engineers said, Dave, I can tell you who's going to bump with whom tomorrow. And I'm like, how can you do that? And the answer was, they would go look at where and when people took photos on their phone. So they'd look at the metadata of their camera roll. And they could say, I'm pretty sure Gustav's going to bump with Craig tomorrow. There's an 80% probability that they do. And I'm like, no way. And what they did is they figured out that today, you two were at the YC office and you took a photo at the same time. And they're like, probably you're going to bump those photos to each other. And so that was the key insight on the tech side that allowed us to kind of marry those two insights and create this product, Flock. So Flock looked at your Facebook friends and figured out when you took a photo at the same time as when your other friend was there. And then it basically did a suggested sharing prompt to you to say, hey, it looks like you might want to share this photo. And just press this one button, and we'll share the photo to the other person. And we built that app. We used it ourselves. We used it with our friends and family before we launched. And we realized, like, wow, this is really great. Like, it just makes my life so much easier. I'm getting all these photos from my friends that I was never going to get otherwise. And then we launched it, and nobody downloaded it. And we were like, oh, shucks. This is terrible. And what we didn't really understand, which we learned through this experience, was this. It's a Chris Dixon blog post, which is the, like, come for the tool, stay for the network idea, which is that the first users of your product have to have some core utility that makes it useful for them, even when no one else in the world has the product. And with Flock, it was like, I download Flock, and it says, great, go convince your friends to download this app so that you can get some value out of it. And 99% of people were like, cool, home screen. And they never used it again. So that was the key insight there. And what we learned was that if we wanted to solve this, like, automated photo sharing problem, we had to upstream ourselves and get one stack, one step higher in the stack and actually be the camera roll. And if we were the camera roll, then everybody's going to be using the product anyway. And then all this sharing stuff would actually work. Uh, and so that led us to the third product that we built. Well, what gave you that insight though, that you needed to go upstream? Basically, none of our friends were using it. And we asked them, we're like, so just user conversation. I would like talk to, you know, like a lot of the YC network, I'd go talk to him. I'm like, Hey, I see that. Like I looked in our logs, I see that you downloaded the app, but you're not using it. Like how come? And people would say, you know, and you have to interpret what they say, but they would say like, Oh, you know, none of my friends have it yet. So once they get it, then it's going to be awesome. Gotcha. And that led us to see like, okay, but you're not, you're not driving your friend to get it. Whereas in bump, you were driving your friend to get it. What's the difference? And the difference was this novelty factor of like, it's this cool thing that you want to show off for flock. The world had moved a little bit. There were a lot of photo sharing apps. People felt this like burden to convince their friend, like, Hey, I want you to download another photo sharing app. It'll be really cool. And there's something about the physical virality, the physical bumping that people see there are some apps that you sort of like Pokemon go, you run around the street, like holding up your phone. Like people are going to take notice, but that's not really the case with most apps. You just look at your phone and no, I have no idea what you're doing. Yeah, exactly. The physical nature of bump, I think made a big difference. I remember the first time I saw someone in the wild do like bump that wasn't my friend. And it was like a really visceral feeling. I'm like, what is, Oh, they just use bump. So I think that was a big part of it as well. And this was a kind of a magical time, a critical time for photo sharing. Like 2012 Instagram was like a year in, uh, could you color head had just, yeah. Could you anticipate at the time where photo sharing was going to go? Like it's very easy in hindsight to always say, Oh yeah, of course. I knew it was going to be a billion, $2 billion thing. But I like to think that we intellectually understood it, but I don't think we did. I think we more emotionally understood it or personally understood it. And I think we really use this technique that PG talks about, which is if you want to come up with great startup ideas, just try to live at the edge of the future. Like be the, the power user of whatever thing you're interested in. And then things will just be obvious to you. And you won't even like intellectually understand them. You'll just be like, this is useful and cool. I'm going to go build it. I think that's what happened to us. Yeah. We were like, in hindsight, looking back, it's now obvious to me, but like growing up, I was always the person in my family that would like organize the photos and like make sure the photos were taken. I was the person who would always ask my parents like, Hey, can we do a slideshow night? And like, you tell me like who these people in these photos were. So looking backwards is obvious that I was interested in this space. But at the time we were all using iPhones pretty a lot and we were taking a bunch of photos. We were seeing these problems of like, Oh, my iPhone's almost full. I better offload it to my Mac and we were doing the cable connection. But normal people were just like, yeah, my phone's getting full. I'm going to delete some photos. And we were like, Oh, that's unfortunate. You shouldn't have to do that. And I think that kind of led us from flock. It made us realize there were, there was this whole other set of problems when it comes to photos that nobody was really solving yet. And we were personally experienced them. And so that combined with the failure of flock and the success of it for people who did get it made us realize we should build this third product. So the third product we built was this product we called photo roll. It was really like a better photo gallery app. This was right on the heels of when inbox launched. I don't know if people remember this, but it was like a better email client. And so we were going to try to pull an inbox and build a better photo product and, and just, you know, distribute it on the app store and people could download it and replace their default app with it. And we, we built a prototype of it. Like we had, I was using it on my phone and it was really great. And it had flock built into it on the side. And so that made it so that people could just download this better photo gallery app. And then all of a sudden as, as their friends started to get it, it just started to light up for this photo sharing behavior. Um, unfortunately we had this great insight, like kind of at the end of our runway from our $20 million that we had raised. And, uh, we realized, okay, this photo product is a winner if we can figure out a way to like have a long runway and build it. Um, but Ooh, we're going to have to go raise a series C on bump to try to do it. And we're not, we're not even raising that money to go work on this 150 million user product that we've got. And it was just a very, like we looked at it and we said, I wouldn't invest in that. Got it. Let's talk about fundraising a little bit. We haven't mentioned that at all. So after you guys raised from some of the absolute top VCs in the world, uh, talk to us how that went and sort of like how it feels like from the outside, like from the inside, like obviously everyone thinks that, wow, you must be the most successful company ever out of YC. How does that feel? Yeah, we were very fortunate. We raised from Sequoia for our series A our bridge round before that was Ron Conway. And then our series B was Mark Andreessen and Andreessen Horowitz. So we had the cream of the crop in terms of investors. It was, it felt really great. Um, and I think we were ignorant to, to the, to the truths of the world about like, were we actually going to be a really successful company or not? We didn't know. And, and honestly, I don't think any of the investors knew at the beginning. What we saw was mobile is this huge wave that we all knew was going to be really big. And bump was the most popular app on mobile. So like, and it solved some of these core problems that we all believed would be real. So I think that was the investment thesis. That's like, that was our kind of like investment thesis for dropping out of business school and doing this is it's working. Mobile is going to be big. We got to give it a shot. And I think that was the same way that we looked at it. How was the fundraising experience like? It was very easy. Like I feel, I feel guilty saying it, but it was super easy. Um, you know, in YC, I think we got to like either I think it was either 4 or 8 million users during YC, which at the time was just unheard of. Uh, so everybody wanted to invest and we met Sequoia folks and we thought, Oh, they're, they're pretty good. Right. Um, and then we raised that round and then I think it was six months later, Mark emailed me and he's like, Hey, I want to invest. I'm like, Mark, I just raised my series. Hey, like I've got $2 million left. Like what are you talking about? And he said, I think it's going to be big. I want to invest. And so we took the meeting and I think we delayed it like another six months. But then we raised 17 million from them. And it was again, on this thesis that we don't know where this is going to go, but it's going to go somewhere very interesting. So let's just plow ahead. Um, in hindsight, I wish I had raised a little bit less money in that series B because it would have forced us to have some of these existential questions or discussions a little bit earlier. Like, because we had so much runway, we could just say like, well, we'll figure it out. And we just kind of kept going for maybe an extra year in there. So that's the question comes up with founders a lot that I am talking to. So if they're doing really well at fundraising and they're like, well, there's more investors want to give me another $3 million now, should I take it with that extra dilution? And my advice is typically, well, if you have discipline and you can put half of the money in a different bank accounting, don't touch it for 12, 18 months, then you should take it. But most people actually don't have that discipline. It's true. And investors want you to use the money. Like no investor wants to say like, Oh yeah, I've moved some capital from my LP account into a different bank account, but it's just going to sit there. Don't worry. It's earning 1% interest. Like nobody wants to hear that. Um, so it's very difficult to do that. What I would, the advice I give entrepreneurs is raise more money if you know how you're going to use that money today. Like if you have no idea how you're going to raise it, you're just like, I need some more money. Um, you should only do that if you already have a very proven business model and there's risks that you want to mitigate, right? Like I'm an investor in Flexport, they just raised a big round. And I think, um, I doubt he knows exactly how he's going to use that money today, but he knows like I've got a thing that's working. There's existential risks that I want to mitigate. And so you raise that round. Uh, but at the early stage, yeah, I'm very skeptical of raising money when you don't know why you need it. So in retrospect, do you think you could have like pulled it out of the tailspin and turned a profitable product out of all the work you put in? Oh, I think we totally could have made bump profitable. I don't, I just didn't know at the scale. Yeah. Like I don't think we could have made it profitable at the scale that, you know, a Sequoia or an entries in Horowitz needs it to be. Okay. So had we not raised VC funding, I think it would have been a great business. We would have, we would have made a freemium model where like 1% of users bought the app for a dollar or something like that. And it would have been great. Right. But then it's also tricky going in thinking about raising series C for a product that also might not be profitable at all. Right. Yeah. So we looked at photo roll and we were like, people are going to love this. It's going to be big. If we could get it to be like distributed or part of an operating system, like either Apple or Google, um, we think it would be pretty big. And, but then we were like, and that would cost a lot of money if we were going to do it. Cause we wanted to store all the photos in the cloud. And so we like did the math and we're like, okay, storing all the photos of the world is going to be expensive. And so we kind of decided to do this right. You've got to do it in a big environment where you can have very longterm horizons. And so when we were getting acquired, we had a number of options. And with Google, it really just clicked in terms of like how we would fit into the mission of the company. Like the mission of Google is to organize the world's information, make it universally accessible and useful. And for photos, now Google photos, our, our mission was store all your photos, be a home for your photos, make them as useful as possible to you, and then get them to the people that want them, which is like exactly mirroring the Google mission. So that, that felt really well, really good. Uh, the, the DNA or the cultures of the companies were very much aligned. Like we were at bump, we were kind of like nerdy, quirky, uh, people and we were like into physics and into math and that sort of thing. And at Google we felt at home, uh, compared to, you know, when we would talk to Facebook or talk to Apple, the DNA fit just wasn't quite as good, I think. So that was another reason that Google was there. Do you join the Android team? Was there a photos team do you join? It was a photo app, Picasa back in the days, right? So yeah, Google has been on the photos trajectory for a while. Beginning with, with Picasa, there was an acquisition, I think it was in 2005 to acquire Picasa. Um, and then Picasa turned into Picasa web. And then when Google plus launched, it got rolled into Google plus. And so we showed up in the fall of 2013 and Google was full speed ahead on Google plus and they were starting to build more and more photo related features into Google plus with the goal of getting you to share them on the social network. Um, we, our conversation with Google began with the Android team and it was in the context of like the gallery app on Android could be a lot better and smarter. And here's a, here's an app that could do it. And so the acquisition was really to take photo role and turn it into something that would be useful at the Google scale. Um, and it was really convenient. We joined Google and we like started to ask around about who's working on what. And we actually were now moved over as part of this photos team inside of Google plus. And I showed up and I'm like, Hey, I've got this idea that I think is going to work around building a photo gallery app, like a private photo management tool that allowed you to share and had this cool like AI stuff in it. And I was kind of like, but I don't have any AI, like we're just, we're just like posers here. And we showed up and we looked around and we're like, Oh wow, they've got like this huge team working on face, uh, face recognition, face grouping technology. They've got this other huge team working on understanding the content of images and being able to search images. They got this other team around scalably backing up photos at like a huge scale. And I just saw this and I'm like, Oh, this is a, this is going to be good. It's a perfect fit. And, and what I think we brought to the table as, as photo role was this insight around like how do people think about their photos? What is the right design of a product? Um, how do you build these sorts of features in a way that would, would fit into their lives really well. And so the combination of those two things turned into Google photos and uh, and that, that that vision of actually uploading every single photo for every single album is actually there right now. That's what you do. Yeah, we do. Yeah. We, uh, we upload a lot of photos every day. What, what was the insight that led you to create? I understand the sharing between people, the facial recognition. That's awesome. Searching is so cool. What was the insight that led you to start doing the animations and stuff like that? Yeah. Um, so a lot of that stuff was actually already being done inside of Google plus and they did it to try to give you something interesting that would be post worthy that would make you want to post it on G plus. Um, the, the process that we took when we, when we were designing Google photos, um, was to use this technique that I like to use a lot, which is, um, pretend that there's a human being doing the thing that your product is going to do and pretend that human being like doesn't have to sleep, is really smart, has access to all the computing power and brain power in the world. What could that human being do for you? And so we were talking about this this morning, but, um, for, for photos, I thought, okay, if my co-founder Andy was my photo assistant and all he did all day long was like, help me with my photos. What would he do? Um, and we just started brainstorming, like what were the things he would do that would be useful to me? Things were like, make sure that he backed up a copy of every photo. So if I lost my phone, I didn't lose my photos. Cool. Uh, he would look at all the photos and he would know who's important to me in my life. He'd know who's my mom, who's my dad, who's my sister, who's my girlfriend. And he would like write on the back of each of those photos metaphorically like this one contains mom and dad, this one contains Jenna, this one. And then we were like, well, what else could he do? And then I'd say, Oh, I kind of asked him to go learn like final cut pro. And I'd want him to make me like cool montage movies of my life. When there's something interesting, I'd want him to like remind me when it's like the one year anniversary of something cool that happened in my life or something meaningful. I'd want him to like go edit my photos. If I have a photo that's like too dark or messed up, I'd want him to edit it. If I have photos that are like blurry or crappy, I'd want him to suggest that I get rid of those. And so we just made this laundry list of things that would actually be really useful to me, but no one was doing because we didn't have that Andy doing it for me. And that was the insight that kind of led us to how we designed Google photos, which was, it's your home for your photos, but then it's basically like this really helpful assistant that would just do all this other stuff for you. Um, and that, that persists to this day. And it's, it's working very well. That model. What's your day to day to look like today when you come into work at Google, like how's it like to, to run one of the 17 billion billion user apps in the world? Right. Um, it's great. Uh, it's very diverse. Like how I spend my time is very diverse. I would say, um, I'll just, I'll answer it on a monthly basis rather than a daily basis, just because every day is very different. Um, on a monthly basis, I think I spend, um, you know, a quarter of my time, maybe thinking about the strategy aspects, like where should we take the team? Where should we take the product? What is changing about the world or our user base that we need to understand and kind of move in one direction or another? Um, maybe another quarter is like working with our team and helping our team, whether that be like developing managers on our team, figuring out how to structure the team, which leaders should we put in charge of which things that's like another quarter. Um, another quarter, which is like probably my most pleasurable quarter is like actually working with people on our team directly to think about what we should do with the product, like thinking about, okay, what should we change for our sharing model? Like how can we make it better? Um, or you know, one that I'm working on right now is this like photo assistant capability that we have. Like what's the next step? How do we like do something more with that? That's like another quarter. Um, and then the last quarter is like stuff that you've got to do if you're running a team. Um, and it's, you know, help people with their, with feedback. How do they get better as a, as a team? How do they get better as an individual? Kind of the, the stuff that you don't think about when you're a startup with 10 people, but when you're a company with hundreds of people, you're like, okay, I need to come up with a good system where we can give feedback to people on our team. We can help develop them. We can make them better. So this was the next thing I wanted to talk to you about. How do you think about your work now coming from, you know, basically three people to a small startup to now a very big team. Like obviously like the management strategies are different. Uh, how you spend your time is different, but like how do you actually feel about it? It's very different. People ask me this question all the time. They're like, what was it like? Like what was the culture shock like going from a startup to a big company? And I think I might be lucky, but I doesn't feel like that at all to me. It feels like our startup acquired a multi hundred person team. It really does. Um, and it, it, it, I think it just says it speaks volumes to the fact that our DNA match with Google was really good and that when we joined, we, we eventually were given the autonomy and authority to actually like chart the path for this product. And that was a rocky road, but like eventually we got there. Um, so yeah, I think that's how it feels to me. And it's really, it's a luxury. It feels great. Um, and this is actually after, after kind of having that insight at Google, when I invest in companies, this is a question I explicitly asked them is if you could go acquire a big company with the purpose of furthering your vision, which big company would you acquire? And hearing the answer to that question helps me understand a their ambition and B, how do they think about where they want to take this thing longterm? And so I often ask this question and they're like, wait, we don't have any money. We can't acquire a company. What are you talking about? I'm like, no, no, it's a thought experiment. Just tell me. And I think it's really fascinating to hear those answers. So one thing I'm curious about, so, um, I would argue that Google photos is like one of the magical AI experiences where like you actually take a great product and you add machine learning and AI and make it magical. And there are lots of startups that come to YC and apply with ideas that relates to AI. But how do you think about, like how would you advise them to say I have this product and they have this like machine learning, um, capability that I'm adding to it. Like what do you typically. When you see those companies, what do you ask them and what do you advise them? I think the thing that really worked about Google Photos is it was one of the first examples of AI solving real problems that people could resonate with. A lot of the AI stuff I see does not do that. And you're like, how does the AI actually uniquely make this better? So in thinking about how you could apply AI, I kind of think about it in two different vectors. One vector is, is there a thing that human beings can do, either with skill or time or resources, that they don't do at scale today, but we could bring a computer in to do that job? That's kind of like what Google Photos, that's our approach in many ways. And I think there's a lot of problems that could be solved in the world that today you could solve easily with a good human being, but you just don't have that many good human beings at the right price to do that. So that's one vector that I love to see and that one I fully believe in. The other vector is problems that human beings cannot solve today. Things like, how do you optimize the power usage of a data center? Like, a human being could never solve that problem. It's way too, it's beyond our brains. That's the other vector where AI can do really fascinating things. And I think that one is a lot harder to know a priori whether it's going to work or not. And so those ones are riskier bets, but in many cases they're much bigger payoffs if you can get it right. So that's how I think about it. So my advice to people who are like an AI startup is tell me which of those two are you? Like, are you trying to solve this unsolvable human problem or are you just trying to scale a very solvable human problem to a whole lot of people or at a much cheaper price? And when you're doing that, what are the things you're going to go build? Like, what is the solution that you're going to try to show to your users? And if your answer is something that the solution, even though the AI tech is super cool, if the solution is like, yeah, that's nice, but whatever, then it's not going to work. Right. And so it seems like this attention to the user and attention to product is like a core belief of yours but it's not about the technology. Absolutely. And this was a thing that I noticed at Google when I joined. And I think since that period, like in the five years that have passed, Google has really made a transformation to focus much more on the user. But at the time, there was still a lot of like cool tech being developed and everybody at Google is a technologist and they're like, oh yeah, this is really cool. But they weren't asking the question as much about, well, how does it solve a user problem? And is it really a core user problem that we should solve? And so I think, as Sundar has taken over at Google, he's really tried to focus the company on the user and how can we be helpful to users. And I think that has just really played out in the form of Google Photos. Is it different to talking to users at scale when you run a billion user app versus when you run a startup? How is that different? Yeah, I've got a tab open in my Chrome browser for each of our platforms for iOS, Android, and web that is the raw stream of feedback that you can send in the app. And like every day we get like thousands of reports. And so I can't even read them all anymore. Whereas at the startup, I could read every single email. In fact, at Bump, until I think through the acquisition, I was the only customer support person. Like I wrote back to every single email. And I blocked like an hour or an hour and a half every day doing it. And it was kind of one of these things that like can't scale and was probably a bad use of my time at some point. But it taught me that like you listen to people and generally they will tell you what you should do. You just need to understand how to interpret what they're saying. It's a great practice. I think it's something we should recommend all early startups to do because it gives you this direct connection with the users. Yeah, one thing we did at Bump, which I really enjoyed, is we would take our team and go to bars and do user testing and like talk to people. And one reason we did it at bars is that people are like in a more social environment. So like bumping was something that you would actually do there, whereas like managing your photos maybe is harder to find the moment when people are in that mode. But the other thing is when people have a couple drinks, they like actually tell you what they think. Whereas when you bring someone into a lab and like set them down behind the mirrored glass, they know they're being studied and so they behave differently. And so this is a thing that I think is challenging at scale is how do you do that? You can't just like tell Google employees like, yeah, go to bars and ask people what they think. It's not gonna work. So, you know, I would say it's an area that in general could probably be improved is how do you create these learnings and this empathy with users at scale for a team that's large and for a user base that's very large. Right, I mean, so do you have like a system that's just parsing the text and looking for keywords? We do, yeah. We have some AI systems that like read the feedback, try to cluster it into different clusters and then some humans look at that and try to understand if there's interesting insights. We've got a user research team that goes out into the world and asks people, we do trips. Like a couple summers ago, I spent two weeks in India, just living in India, trying to understand what about Indian people is different than what is about, you know, people in Mountain View. Yeah, there's a lot of differences. So we try to do stuff like that. We bring people into our office also, but again, like that has its own challenges in terms of knowing that you're being tested. But yeah, we try to do as much of this as possible. And I think I honestly, I put a lot of weight into what intuition you can build by just talking to your users. I think we overlook the fact that we've got the best computing platform that has ever been built and it's our brains and we can use it to give it inputs and then let it do its magic and pattern match and then output our intuition. And I think that is really what your gut is. And it really is like a sophisticated machine learning system that we should actually utilize. So I'm a big believer in building what you think is right. Yeah, absolutely. So a question from Twitter related to products. Lamide Akamolafe, hopefully I got that right, asks, what did David focus on too much that he thinks was a mistake now when you were a rookie product lead? Oh, great question. What did we focus on too much? One thing at Bump that we focused on a lot was like how good the system was, like how performant was it? Measuring, we obsessed over like microseconds here and milliseconds there. And I love that culture and it's a culture that we try to really push on Google Photos as well. But I think if you focus on that a little too much early on, you might be missing the much bigger picture, which is like, even if you made it like super awesome, people aren't gonna care. And I think that is an insight that is hard to really have when you're in the moment, in the details, your system is running and you're like, crap, it's really slow right now. All the users are complaining. It's so easy to just be like, great, let's go fix that. And it's very hard to pull back and say, maybe that's not the problem we should be fixing. Maybe there's some other problem that we need to understand. And I think that is the trap that a lot of companies fall into. This is the Sam Altman, it's like one of my favorite quotes from Sam is, I think it's like, he says, the meta problem that kills most startups is working on the wrong thing. It's not like screwing up whatever you're working on. It's not your competitors. It's that you were just focused on the wrong thing. And I think that in the product world, it's this trap that you can fall in, which is like, oh, this is not as good as it could be. We should make it better. Where even if you made it perfect, it doesn't matter. And actually you needed to work on this other thing. So that's probably my number one advice. And so now that you're working on it at large scale, like these product insights, what degree of buy-in do you have to feel before you ship it out to a billion people? Like when you're testing some new thing? Yeah, great question. We do a number of things to get confidence in some product that we're gonna build or some feature that we're gonna build. The first thing we do is use it ourselves. And if we think it's not working, then it's very likely it's not going to work in the market. And this is a luxury that we have because we build Google Photos. It's a product that we're building for ourselves and for a lot of other people who are not like us, but we are at least somewhat representative of the user base compared to if we were building a product for kids that are under eight years old. I personally don't have a ton of intuition about that, and I wouldn't be able to know innately whether this is gonna work or not. So that's a whole lot more challenging problem. And I have so much respect for people who can solve problems where they are not the user. For us, we are the user. So the first step is, do we like it? And often, I challenge our team where we've done experiments, we've run stuff, we were about to launch something, and I just ask the team, I'm like, what do you guys think about it? Do you like it? Do you use it? What's your most annoying part of this product? And often they're like, well, I'm not the target user, but this is kind of annoying to me. And I'm like, we should get that right. Like, come on. So that's number one. Number two is we do a bunch of testing with users before we actually launch, even in an experiment. We like make prototypes, we bring it out to people. And you can learn a lot of usability things, like whether the actual flows will work, but you can't really test, do they care, by doing those sorts of tests. We also do experiments. We roll things out to 1%. We've got like a, I won't talk about it, but we've got a pretty big product in experiment right now that we're excited about, and we're watching how people are using it. We're trying to keep it on the download. That's another thing that we do, and we learn a lot from that. And I think the combination of all these things gives us confidence that, yep, this is a thing that we at least have high enough confidence that we should roll it out and see what happens. Yeah, go ahead. So, Lamere Akomolafe is asking you, did you make any early mistakes when you joined Google? So like, ask directly, what kind of, this is a new, large organization to you, like what kind of mistakes were you doing? Bosses would certainly say yes. Yeah. I think, let's see. There are two problems, and they're wrapped together. The meta problem that I made, or the meta mistake I made, was I really believed in this vision for what we could build in the photo space, so much that I was just determined to solve it. And I think the skill that I needed to develop inside of a big company, which was very different than what I had at the startup, was I now had like three or four bosses above me that I needed to convince. And at the startup, I just had to like have a board meeting and say, hey Mark, I'm gonna do this. And he's like, cool, do it. Whereas here, it was like, hey, I gotta convince this person. And then I've gotta use their support to garner support from this other group of people. And then I've gotta take that and create support from the CEO, right? And it's a very different process, and I was not very adept at doing that. And I just kind of, I used the modality of being the startup founder, and just saying like, we need to do this, come on everybody, let's go, and I'm gonna convince you. And whereas at Google, I needed to be much more delicate, and I don't think I did a great job of that. One of the sub-components of that was how can you do that at a big company? And I have learned now is you can really get a lot of support at the grassroots level. So when I ran into these problems going up the stack at Google, I kind of retrenched and said, great, let me go talk to the people on the ground actually talking to customers, actually building the product, as opposed to the people managing big teams doing it. And when I would go talk to those people, a lot of them said like, oh yeah, I get it, let's do it. This makes a lot of sense. And by building some support there, we could then go en masse to the leader and say, hey, we all think it's right. Here's all the perspectives, here's all the diverse opinions, this is what we think we should do. And that is a much better sell at a company. Especially if you can have evidence in the market in some way that like, this stuff is working, this other stuff is not working. Let's look at it objectively and decide what we should do. In five or 10 years, do you see yourself working for a large company or a startup? Yeah, that's a great question. I love startups, I love the rawness of startups, the purity, they're like, every problem you face is like, there's no layers of abstraction, you're just in it and you're seeing the true problem. I love that. It's a thing I try to keep doing at Google. The challenge, I guess, is when I look at what I could go start next, whether I wanna join a startup or start a new startup, I kind of have the luxury of thinking about it in two dimensions. One is, what reach will I have? How many people in the world can I affect with this thing I wanna build? And the other dimension is, to what degree can I affect their lives in a positive way? And looking at Google Photos, it's like, we have a path to affect billions of users, like the majority of people on the planet, we have a path to get there. That's pretty amazing, not many products can do that. And then on the importance or depth of the experience, I believe there's not a lot of things more valuable to you than the record of your life, your memories. Maybe the only things on top of that are being alive, like your health, and maybe connections in the moment to the people around you. Otherwise, it's one of the most essential parts of the human experience. So, I look at that and I'm like, I think this is probably the most impactful thing I can be doing right now. I actually give that advice when companies ask me, hey, I got this acquisition offer from this large company. I always try to put all the financial stuff aside and sort of everything else aside. The main question to me is always, can you execute your vision towards a much larger audience in a better way inside this company or not? And if you really believe that being part of this other large company is the way for you to get to your users and execute your vision, then that is the most important question to answer. Yeah, and a corollary is, if you don't have that alignment, and you do go to that company, it's going to be a disaster. Yeah. And I think that's a thing. And statistically, most acquisitions don't turn out well. And it's fascinating. You make this big decision for your company that we're gonna go get acquired by blank. But then if you look at how many minutes or hours did I spend with the people I will be spending my entire work life with, it's usually really, really small. Like, laughably small. And most of the discussions are on the financial outcome. It's not actually about the product outcome. That should be where most of it. So a lot of the challenges I faced when I got to Google were misalignments of vision around what Google should do in the photo space. And I wish we had had those conversations beforehand. The problem is, the conversations need to be with these senior level people at Google, and they don't have time to spend an entire weekend spitballing with me about some random startup entrepreneur, the future of what we should do. It might or might not get acquired. They might acquire, right, yeah. So it's this asymmetric problem. And now that I'm on the other side at Google, I try to empathize with my former self. And we've done acquisitions at Photos, and I try to just spend a lot of time with people, make sure that we're aligned on what we want to build. Because inevitably, when you join, something's going to change. And you're gonna have to tweak your plan in some way. And if you don't have that fundamental alignment, it's gonna be a disaster. So that's another thing I think is really important. You said something really interesting about humans and their attachment to photos. I wanted to kind of touch on this at some point. So have you learned any kind of larger truths about humanity by paying attention to all this stuff all the time for years? Probably, I don't know if I'm great at articulating them. Let's see. Yeah, I think one, probably the number one truth I've seen is the power of nostalgia. I think we all feel it, and we all know that feeling. But seeing it from the perspective that I get to see it, it's one of the most powerful things in the human experience, I think. And we've tapped into it in a variety of little ways, but I think there's a much larger thing that we're still trying to go learn and figure out. But yeah, I think we each think about important moments in our lives. And they can be important from a grandiose perspective, or just little moments in our lives that stick with us. And usually in that moment, there's an image that you have in your brain, or a song that you associate with that moment, or a smell, there's something that triggers you. And people love thinking about the past. It's just an innate thing. And I think it's an evolutionary thing that those of us who had that trait are better at understanding where we've been, and better at surviving in the future. So I think it is baked into us as humans. But it is a really powerful phenomenon. Have you read Thinking Fast and Slow? Yeah. Where he talks about how important photographic memories are for our happiness. Yeah, I have, and I totally believe it. One of our goals with Google Photos is to basically give everyone a photographic memory. The challenge is our brains aren't, most of us at least, don't have this perfectly linear, evenly distributed photographic memory. The way our brains work is we pick important moments, and really write a lot to the disc during those moments, and then we kind of don't worry about the rest. And so one of the challenges we have with Google Photos is we now have all the photos that you've taken in your life. How do we decide which ones are the important ones that we should really focus on, and try to help you relive and engage with? Which ones are not important, even though they may seem important to our algorithms? And then on the other side, which ones are not memories that you want to reengage with? And this is a big challenge, and it's a very difficult problem. But we all have moments in our lives, or people in our lives that were part of our life before, and it was an experience we had, but going forward it's not a thing that we want to dwell on. And that's a really difficult challenge. And I would say we're getting it okay, but not great. That's an area I want to improve. Yeah. So I have one final question. As a product lead, I had a similar role at Airbnb. I spent a lot of time looking at other products, and new products. What are your top other new apps that you are? excited about. Like in the photo space? In general, like apps that just, you feel now like these are important to me. Yeah, oh, consumer products. Yeah, or just apps, generally. Well, in terms of categories that I see that I'm interested in, spanning everything, one category that I think is fascinating is basically taking mundane systems that humans have created and replacing them with smart technology. So Flexport is one example of that. I just invested last YC batch in this company, Canary Technologies, building software for hotels. Like seems so mundane and like, who cares about that? But it's a big problem. There's a lot of people go to hotels and we need to make the experiences better. And one way to do it is to make the software better. So that's like one category that I'm very interested in. Another category that I'm interested in is taking things that we all take for granted, like eating food or having healthcare and applying some of these technologies or things to make those things better. So one I just invested in also in the last batch is Seattle Food Tech. They're making a meatless chicken nugget. I just ate them the other day, the newest version of it, and they're delicious. And it's like obvious to me that, oh yeah, we're gonna, this will be a thing. Some form of this will be a thing. So applying technology to these like very mundane, physical parts of our lives is another category that's interesting. On the consumer, social, yada yada side, it's really tough. I see lots of cool stuff where I'm like, there's something cool in there, but this thing's gonna fail. And I see, I think that all the time. And I try to invest in them because some fraction of them will become really cool. I don't. Different world today than we were like. Oh, it definitely is. Like seven years ago. Yeah, it's, we've like, developers have gone and like figured out all the obvious wins already in the consumer space. And the ones that emerge are the ones that seem like totally off the cut. Like who would have known 10 years ago that Snapchat would have been like a popular thing? Or that the stories format would have been a popular thing. It's very hard to predict until you build it and see it. And then you're like, oh yeah, that's gonna work. Well, let alone a lip syncing product becomes massive. Yeah, and I think, you know, one thing on the consumer side that I've come to understand is there is a difference between something that is really popular for a while and something that is a durable, essential human need. Through the Instagram phase, given where I am in photos, I got to see all the Instagram competitors where they have like some new cool format, right? It like turns your photos into art or it makes this part of the photo move or it's this cool looping effect. And all of them have the thesis like, we're gonna take this and turn it into Instagram. And my feedback was always like, but Instagram already exists. So you're not solving a durable human need. Was it the timing or was it a specific thing that they did that made them succeed? I think had those things happened before Instagram happened, they could have pulled the same thing off. I mean, Instagram pulled the same playbook, right? Yeah, we let you filter your photos, they look slightly different. But then they were able to translate that into a network that was durable and a human need that was durable, which is I want to interact with other people, basically. Like that's basically what Instagram is. And so when I look at consumer stuff, I try to understand what is the fundamental human need that your product is either scaling across time and space or changing or amping up in some critical dimension. And if I don't see that, then I'm much more skeptical. Right, so that's kind of my rubric for consumer stuff is tell me the thing that humans already do today in a limited, not as great way that you are gonna somehow amplify times 10 or times 100. That's what Facebook was, that's what Twitter is, that's what Snapchat is, all these things are exactly that playbook executed really well. Right on, all right, thanks so much for coming in. Thank you so much. Yeah, thanks guys. It was great. Thank you."
  },
  {
    "name_video": "How do you convince someone to join your startup?",
    "description_video": "You must first convince yourself of your own idea. People can tell if you don't believe in what you're doing. Your confidence will flow out to others, including potential co-founders, employees and customers. How do you convince yourself?",
    "related_categories": [
      "Co-Founders",
      "Founder Psychology",
      "Motivation",
      "Becoming a Founder",
      "Non-Technical Founders",
      "People",
      "Recruiting"
    ],
    "page_url": "/library/5b-how-do-you-convince-someone-to-join-your-startup",
    "youtube_url": "https://youtube.com/watch?v=N8deM6B4eE4",
    "mp3_file": "downloaded/How_do_you_convince_someone_to_join_your_startup?.mp3",
    "mp3_content": "This is a super common question where someone wants to start a startup. And they're like, well, how do I get a co-founder? Or how do I get my first employees? And my advice is the following. First, you have to convince yourself. If you're not fully committed, or if you have grave doubts that your idea is any good, or it's even worth trying, how can you ever convince someone else? And people can tell if you don't believe in the thing you're doing. And so if you really have that fire that you're onto something that's worth doing and you're convinced, then it's much easier to convince other people to join you. And you can tell them that. You can tell them how committed you are. And frankly, the same thing goes for getting your first customers, getting your first partners, getting your first employees for everyone. It all comes down to this core of you being convinced of the story that you're telling it, and it being true to you. And then your confidence will flow out to everyone else. Okay, so how do you convince yourself? And what does it mean to convince yourself? Do you ever know that feeling where an idea enters your head and you can't sleep at night, and you can't think about anything else but it, and it starts to pervade your thoughts? That's a good sign. That's a sign that you might have a startup idea or a drive to work on something that'll have the kind of magnetism and power to keep you on it a while, if you just can't get it out of your head. If you immediately are cynical about it and you're negative on it, and you're just not that excited about it, that's a sign that you're not convinced. This is something that comes up in YC companies a lot, is I always encourage people to work on the thing that they are very excited about and obsessed with, even at the expense of working an idea that may seem easier to raise money for, that may seem more commercially viable, that may seem more like something that impresses other people. And the reason I encourage this is I've consistently seen teams that don't believe in the thing they're doing secretly and they're not convinced by, when they run into a rough patch, and everyone always does, but when they run into a rough patch, they give up. And I've seen teams where they really deeply are convinced of what they're working on. They're convinced at the very least that they want to keep working together and they wanna keep their startup going. And I've seen those teams overcome almost every kind of setback you can have. You can run out of money and somehow survive. You can get in, you could have to completely pivot and change your idea, but if you believe in what you're doing in the big sense, you can recover from that. You could have team members quit, you name it. And if there's something deeply held in the mind of the startup founders about why they're doing what they're doing, they can keep going, right? And if you're just like, ah, I'm just trying this, things won't work out. The reason you should work on things that you really care about is the following. It would appear that it's equally hard to succeed at a startup that you don't care about and one that you do. And it's almost equally hard to succeed at a startup that's a very ambitious, audacious idea as it is to do something super incremental that's not that exciting. And if we assume for a second that those are equally difficult to accomplish, do you see why you should definitely do on the way more audacious idea or the thing you're way more excited about, right? What's the point? It's almost like if you had to travel 1,000 miles to go somewhere you wanna visit versus travel 1,000 miles to somewhere that you're ambivalent about, always go to the place you're much more excited about. And the fact is your excitement and enthusiasm about it will encourage the chance that you're actually gonna get there. So sometimes people ask, can you build excitement over time? I don't really have anything that I'm super excited about yet, but I have a few ideas. Absolutely, you can get more excited, you can fall more in love with an idea or you can fall more in love with entrepreneurship by doing it on the side and kind of discerning if you get more and more excited about spending time on it or less, right? Like if it feels like fun, if it feels like not work to work on your startup or your side project or what have you, and it's just something you wanna do because it's entertaining or enjoyable to you, that's a good sign. And I have seen people, they kind of do something on the side and it's not exactly meant to be a business, but people like it. And the positive feedback loop of putting something out in the world and having people recognize it and appreciate it makes them more and more excited about spending more time on it. And so you can definitely get data points from the external world that cause you to take your side project or your idea more seriously. And so in conclusion, to convince other people to join your startup, you first have to convince yourself."
  },
  {
    "name_video": "Consume information that encourages you to do more",
    "description_video": "There is a lot of information out there geared towards aspiring founders. A lot of it is not good and discouraging. Here's a way to consume the right information to help you build your future and startup.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology",
      "Motivation"
    ],
    "page_url": "/library/5a-consume-information-that-encourages-you-to-do-more",
    "youtube_url": "https://youtube.com/watch?v=uCRBLKGaHtY",
    "mp3_file": "downloaded/Consume_information_that_encourages_you_to_do_more.mp3",
    "mp3_content": "You want to really think about what kind of information you're consuming and be very thoughtful that it's information that encourages you to do more and to actually work on the thing you're aspiring to do and that isn't implicitly discouraging, right? There's a lot of media and information you consume out there that's very much hero-worshipping investors, that talks about fundraising above the actual product, that talks about how hard it is or all the negativity around doing things in technology. And those are all well and good, but if you're consuming it day after day after day, and sometimes I meet founders where they don't even have a startup idea yet, but because they consume all this information about fundraising 24-7, they're completely focused on fundraising without even knowing what their startup idea is, right? And I would argue that is not super constructive and that I think it'd be so much better for aspiring founders to be consuming media that inspires them to build things and to give things to other people and gives them more positive feedback on the things they're doing and not really on fundraising. That comes later after you've built something. And the other thing that could be secretly not good about consuming too much fundraising-related media is you feel like you can't do it. You feel like you need permission. You feel like you need the approval of external parties or investors to even begin. And that can't be further from the truth, right? When I meet aspiring founders, they usually think the first thing to do to start a company is to first make a pitch deck and go raise money, right? And that's not. The first thing to do is figure out who you want to work with and what the first thing you want to build is. And if the kind of people that you follow or the kind of blog posts that you read or the kind of forums that you're members of is really focused on building things and making things and holding you up and giving you positive feedback for making things, I would argue that's a great kind of information flow to give yourself every day. But if it's 100% focused on the nuts and bolts of valuation and board meetings and branding and things like that, I find it to be a little bit discouraging for people who haven't even begun their startup. Another question I sometimes hear from aspiring founders is how important it is to establish thought leadership and to get notoriety for themselves as individuals. And I can definitely see why people think that because especially if you're consuming a lot of thought leadership, right? If you're following a bunch of people on Twitter or reading blog posts, you get the idea that to replicate the success of the people that are putting out the content, you yourself need to be doing exactly the same thing. And I would suggest that is not true. The vast, vast, vast, vast, vast majority of successful founders that we funded at YC have effectively no presence whatsoever, especially not in the early stages, right? Especially not in the first five or six years of the lifetime of their company. And that kind of exposing yourself to all that noise or putting a lot of energy into establishing thought leadership can be a huge distraction from doing what really matters of making your company work. And the other thing to really understand is a lot of the stuff where people spend a lot of energy on putting information out on the internet is content marketing. What they're trying to do is to promote their product or service. And it's a really effective marketing channel, but they're not doing it because that's what got their startup successful in the very early days. They're doing it because it's a channel that works. And so if you're one of those people where thought leadership is an amazing way to get more customers and you can actually prove that improves your bottom line, you should definitely be doing it. But on the other hand, if it has nothing to do with your core business and what makes your startup grow, it's not necessarily a great use of time. So if you've heard the thing that your personality is heavily influenced by the five people you spend the most time with, I would argue that your thought process of founder is heavily influenced by the five most common information sources you get. And so because of that, I want you to be really thoughtful about what kind of information you're consuming. If it's inspiring you to build more things, if it's inspiring you to work harder, if it's inspiring you to be rowing in the right direction, and if there's pieces of information, there's content you're consuming that's kind of discouraging or blowing you off track, just stop reading it, stop consuming it. And so in conclusion, think about, is this content that I'm consuming serving me well and making me a better founder and a better human being? Or is it making me kind of depressed and sad? And always go towards the positive. Thank you."
  },
  {
    "name_video": "Building a startup is about solving a problem",
    "description_video": "This is a story of how one founder, Avni Patel, struggled with her first startup but eventually discovered a problem many people had that was unsolved.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/5O-building-a-startup-is-about-solving-a-problem",
    "youtube_url": "https://youtube.com/watch?v=0W5Jaip5_-g",
    "mp3_file": "downloaded/Building_a_startup_is_about_solving_a_problem.mp3",
    "mp3_content": "Hi everyone, good afternoon. How's everyone doing? Oh, this is really great. I'm so excited to be here today. My name is Avni. I'm the co-founder and CEO of Poppy. We're building the modern village by connecting vetted caregivers to families when they need childcare. I started Poppy not because I'm an expert in the field or because I have a deep passion for childcare. I started Poppy for two people. These two. The older is my daughter, Saya, and the younger is my daughter, Aria. I was so tired of feeling panicked and anxious every time I wasn't 1,000% sure of who was taking care of my girls. And I couldn't believe that so many of us are dealing with this every single week. And then I couldn't believe that all the people, all the amazing people that are taking care of our kids, they need more recognition and opportunities. So I decided to build it with Poppy. So I decided to build it with Poppy. We're serving thousands of families in Seattle right now, and it's an incredible thing to be a part of, especially because Poppy almost didn't exist. One of the reasons I'm so excited to be here today is because two years ago, I sat in your seats. At the 2015 FFC, I sat there and I listened to all these incredible women telling their stories about bold visions and amazing companies, and I desperately wanted to be like them. Only in that moment, nothing seemed further from reality. I was in the middle of shutting down my first startup after spending years working on it and sinking thousands of my own personal dollars into it. I was so ready to give up and just head back to my successful career in brand management. Only this afternoon just inspired me so much, and I headed back, and I decided to give it another shot. But not only that, I set a goal, and this is a little bit crazy, but this is my journal from that night. And I said, crazily, in 2017, I want to be on that stage giving the talk instead of sitting in the audience. Thank you. Thank you. Thank you. So when Kat sent me this email asking me to be one of the speakers, you'll notice the date, and it says April 30th. I was so honored, obviously, because this was a goal, and it was just one of the biggest parts of my story to actually try again. But the other crazy kind of ironic part was that she had sent me a different kind of email two years earlier. And this one was when she told me, and she crushed my dreams, and she told me that YC wasn't gonna be funding Poppy. And so this is the story I want to tell you a little bit about today. What happened between my first failed startup and Poppy, which is funded and growing today, and what happened between Kat's first email and then me standing in front of you today? My hope is that maybe you'll learn a little bit from my mistakes, but I hope that in hearing my journey, you'll be able to connect it to yours and figure out a way to start and then just keep going. So my startup journey starts about five years ago. I had my first daughter, and I was struggling to figure out a way how to pass on my rich Indian heritage and the traditions onto my girls. A friend and I started talking, and we thought, well, we could figure out a solution to this. It was the time, it was about 2012, so subscription boxes were all the rage. And so we thought, well, if we just curate something, you know, it could do with culture, and it would have the language and food and all these amazing things, why couldn't we do that? And so we worked on it. We worked on it on the side while we still kept our jobs, and we built business plans and financial models for two years, we worked on it on the side. Then finally, in March 2014, we both decided we were gonna quit our jobs and work on this full time. It felt incredible, but at the beginning, it was, what are we gonna focus on? Well, I'd heard all of these things about MVPs and working on product and getting it out, and so we worked on the product, and we thought about what we would want to have in this box, and we figured it out in three months. We were able to put this beautiful curated box together of things that we thought were gonna solve the problem because that's what we wanted, and we thought that was exactly what you're supposed to do. So in June, we launched, and it felt incredible. We had friends and family, everyone texting us and emailing us and saying, oh, wow, this looks amazing. We even had a bunch of orders, and so we thought, this is amazing. A few weeks go on, and the orders start to trickle. A little bit, they slow, and we're like, I mean, it's a little bit concerning, but we think, you know, that's probably just because we don't have enough products, so let's work on more products and get them into the shop. So we work on that. Now it's the fall, and we're quickly running out of money. We had both invested about $20,000 of our own savings, and we had figured if we launched, then we'll just be able to raise money then, and it'll all be wonderful. That wasn't the case, and so we were quickly running out of money. We decided to try everything we possibly could. We did Facebook campaigns. We did Google AdWord campaigns. We even went and partnered with some of the best brands out there, like the Tea Collection, just trying to figure out how we could kickstart growth and get people to buy this amazing box that we had done. After the holidays, it became clear that it wasn't working. The cost of acquiring these niche customers was just way too high, and it didn't make sense for the one or two boxes that they were buying. So we made the hard but right decision to shut it down. I don't think we talk about this enough, but this was some of the hardest times of my life. I felt like a failure. I felt like I let everyone down, including myself, and I had lost money that our family could use for the mortgage and the nanny and college funds, and I couldn't really see my way forward. The worst part was was that I didn't know why I failed. I think it's one thing to make a wrong decision or a wrong turn, but I think it's another thing to not learn from it, and so where do you go when you need to figure something out? The internet. I started reading everything I could about how to start a startup or how do successful startups do this, and I came across a whole slew of Paul Graham's essays and how to start a startup from YC, and I devoured everything, and I started to realize just some of the ways that I might have been thinking about this in a little bit of the wrong way. Instead of following your passion, this whole concept of living in the future and building what's missing, this whole idea of talking to your users instead of other folks and just building using that to build your product, and then I loved this one, but just finding the hundred people that really loved what you were doing versus focusing on everybody else that were out there, and then the simplest but hardest one, I think, was just grow 10%, every single week, just grow. Based on this, I thought, you know what? This is the blueprint that I've been missing the whole time, and I wanted to try again. By this time, I'd come to the Female Founder Conference and I was so inspired, and I decided I needed to try again, so I started talking to parents, parents that had bought some of our boxes, parents that were just in the neighborhood. I talked to them and I asked them, if papaya in post, if this box is not what you need and it's not solving a big problem, then what are some of the big problems in your life? I think you'll find if you've ever worked on a product that people just don't really need, you start, you have this real intense drive to then work on something that everybody needs, and so the topic just kept on coming back to childcare, and I couldn't believe it because, I mean, I lived that with two careers and two kids and no family in town. Like, my husband and I would just wake up every morning and hope we didn't have to do the calendar shuffle. You know the thing where, you know, your nanny texts at 7 a.m., says, I'm sick, and then you and your husband pull out your phones and say, okay, if I can move this meeting, I'll take the morning and you can cancel that and I'll take the afternoon, and it sucked, and the fact that so many of us were doing this, for me, was just, it just caught my curiosity, and I wanted to figure out, what would it take to fix it? And sure, this is one of the most crowded categories you can find out there, and so I had a lot of people saying, are you sure this is what you want to be looking into? But for me, it was that if it was solved, if all these people were doing it, then we wouldn't have such pain over here, and as I started talking to different people, I realized that the thing that they didn't need was a parent connecting to a sitter. The thing that wasn't being said was that we were all missing our village. Everyone says it takes a village to raise a child, but with all of us moving around for our careers and our jobs, we're all missing our village, and so I thought, well, how do you recreate something so human and so emotional as village with something so rational as data and code? Well, I found my undergraduate degree in chemistry coming back to me, and I broke it down into a tidy equation. I thought, if village is a function of trust, is a fit for your family, and is available when you need them to be, then could I approximate it with something that provides vetting, a matching algorithm of some sort, and then a scheduling mechanism? It started to come all together in my head, and I could see how this could be a beautiful app. There's only one problem. I wasn't then, and I'm not now, a programmer, and I really struggled for weeks. I tried to figure out, how can I build this without a programmer? I'd spent the $20,000 that I had devoted to startups, and I had about $200 left in my business bank account. Not enough, by the way, to pay a programmer to build you an app. And so I was about to give up, because, I mean, what are you supposed to do? And in the dark of putting my five-month-old to sleep, you know, it takes a long time, there's a lot of time to think, it came to me, SMS. Why couldn't I use SMS? Because parents and sitters are already using texting, and so why couldn't I use that to approximate the experience? So I sat down, and I wrote out the whole flow, and I tried to figure out if I could somehow approximate the experience using already available tools, and tools that were either free, or had free four-week trial periods, so I could stretch my $200 for just a four-week test to see if I was onto something. So this is my tech stack. I had a landing page on Squarespace, sign-ups and feedback forms were done through Typeform, Stripe handled the payments, I did scheduling via Google Calendar, communication with SMS, and my database was Excel. So I could see how all of this was gonna come together. I got to work finding and vetting three University of Washington students, and I found 15 families in my local neighborhood on a posting board that was just posted about needing childcare. I sent them an email, and I just said, hey, I know you need childcare. I've got these three amazing people. If you need someone this week, just text this phone number, and I gave them my personal phone number. That day, I got my first booking, and that week, I got my first four. Every single week, I just set the goal to see if I could just grow 10 or 20%. Well, that next week, instead of just five, I hit six. Week after seven, the week after 10, I was blowing past these 10, 20% a week goals, and I can't tell you how different that felt versus my first startup, and the whole time I was trying to push this boulder up the hill, and this one, it was just, parents were telling other parents, and it wasn't easy by any stretch of the imagination, but it just felt different. At the end of the four weeks, as luck would have it, YC was accepting applications for their Summer 15 batch, and so I thought, what the hell, I'm gonna apply, because I knew I was early. I knew I didn't have a co-founder and a team, but I also knew that I was building something that people wanted, so I applied, and truth be told, I didn't put a lot of hope into it, because I'd applied for my first startup, I'd spent weeks writing the perfect application, and I didn't even get an interview. I'd also heard that YC was the place for that 23-year-old white programmer, which clearly, I'm not. But still, I applied, because I believed in the truths that I'd read in some of those essays. So imagine my shock when I got invited down for an interview. I excitedly got all ready, and went down for my 10-minute chance, and I sold my heart out to Kat, Kevin, and Aaron. Nonetheless, at the end of the day, I had this email waiting for me in my inbox, and I'd be lying if I didn't say I was disappointed, but the next day, I woke up, and I decided to focus on that last paragraph, the one that said, we would love to see you reapply next batch, and I focused on two things. One, they thought I was onto something, and that if I just showed more growth and brought a team on, that I could reapply, and the second thing was, regardless of what YC thought or said, I had a growing company, and I had customers to serve. So I got to work. I pretended as if I got into YC anyways, and I set myself the goal to just grow by 10 to 20% every single week for that whole summer. Parents would text my phone number and ask me, you know, hey, is someone available tomorrow from noon to four? I would consult my high-tech day planner, and I'd see who's available, and I'd text the sitter, and then I'd text the parent back, and if you want to know what my first product looked like, I'm almost embarrassed to show this, but if you can see in the left-hand margin the numbers that are circled, that was my goal, and so every single time I hit the goal, and in the boxes were all the bookings. I don't remember what the color coding was now. This was crazy, but this was all I needed to get this up and off the ground, and then I started to outgrow the day planner. Shocking, I know, and so I moved on to Excel. Again, it was super simple, and it was just enough to get the job done. By now, I knew that we were continuing to grow, and I knew that I had to find that technical partner to help me build this, but it's not as easy as it might sound, and I'm sure there's some of you out there that are, you know, struggling with the same thing about how to find that perfect co-founder. There's a reason that YC says not to start working with someone that you've just met. You're trying to find someone that is a good complement for you and is a good fit with your personality. Somebody has the right experience and can have a passion for the mission, and then finally can be a partner in the trenches through the ups and downs. It's a pretty tall order, so I talked to everyone. I asked for every single intro to any engineer. I talked to tens, hundreds of people, and still nothing. By now, it was about August, and I was exceeding my ability to just do all this on my own, and the crazy, ironic thing was I was about to grow my company to death. I couldn't handle anymore, and so I doubled down, and I kept on asking people for more intros. Finally, through a friend of a friend of a friend, I finally met Richard, and when I met him, what struck me was that our backgrounds were really different, but the thing that connected us was that we had both spent our career in pursuing the things that made us curious. He'd done really interesting but different things. He'd worked on a social media company, a dating app, and a Bitcoin gambling company, which, I know what you're thinking, is the perfect match for my wholesome family company, but when I started talking to him, there was just a fit, it was just easy. We would just connect on what the vision was and how this could all be built, and it wasn't until later that I actually realized his experience was just perfect. What is Poppy if not building community? I mean, there's the matching algorithm involved, and we're definitely taking payments, but in those early days, it was really just a leap of faith. and all of this is just a leap of faith. So we decided to just work together for six weeks, just like a project, and see how it would go. He built the first version of our platform in a way that was just more nuanced and more sophisticated than I could have even imagined. And in that, I found a partner to be able to build Poppy. In October, we decided to make it official. We even hired our first employee, Sarah. She actually comes from the childcare industry, and so she was tasked with the most important part of our company, which is finding those really amazing caregivers, where they are, what kind of experience they have, what kind of vetting needs to be done. So she came on and joined the team. I'd always thought of Poppy as sort of a three-part thing. There's a parent side, there's a sitter side, and then there's the tech that connects it between it. We now had the team. Finally, I felt like we were getting some momentum. We had the team, we had the ability to build the platform. Now, though, we didn't have any money. I couldn't believe I was in this position again. This time, we had payroll, and we had just the regular expenses of a growing company, and we needed cash. As luck would have it, YC's Winter 16 application was just open, and so we reapplied. And this time, the application basically wrote itself. I mean, we had done everything that YC had asked us to do, and more than that, we had just pretended as if we had done YC, and we just continued to grow. We had even more users that loved what we were doing, and we had the team. So we were so excited when we, again, got the chance to interview. Richard and I practiced all the questions, and we made our way down to Mountain View. I knew that the hardest part of our application was the fact that we had only worked together for three months, so I was prepared for those questions. What I wasn't prepared for, though, was that as we were walking in to register for the interviews, in behind us walked the founders of our key competition. I walked into the restroom to just gather myself, and I thought, we had just come too far to just quit. And I thought, if I was gonna go down, I was gonna go down swinging. So... So we got in there, and we just told the partners about Poppy, about what we were building, about what we saw, about our growth, about how our users just loved what we were building and needed it, and then about our team and how we were the perfect people to build this. We walked out, and I didn't know how it was gonna go, but I knew that we had given it our all. I hopped on a plane because I had to get back, and I checked my email like a lunatic, just waiting for that inevitable rejection email. By the time I got home, it was just gotta be over, I got home, it was just gotten time for bedtime, and I figured, you know what, what will be will be. And I got ready to just get my kids ready and with their pajamas. And I heard the phone ring. YC wanted to fund us. I didn't really hear the rest, but it was a stay of execution. I knew that we had bought the time to be able to figure out the next thing. And as luck and hard work would have it, the seed VC firm in Seattle also decided to fund us. So the week before heading into YC, that was the bank balance in my business banking account. And my brother over the holidays asked me, why weren't you more happy, excited, celebratory? And it didn't hit me then that the money is not something to be celebrating. It was more relief because the money buys us time to run those valuable kind of experiments and to be able to figure out the next thing. So we started YC. And even when you find reprieves, they're only temporary. So we just focused on putting our heads down and just continuing to grow. I talked to the users and parents and Sarah just kept the great caregivers coming and Richard just built the product. Slowly by slowly, we kept on growing. By demo day, sure we had the really nice growth curve, but more importantly, woven into our company's DNA, we had this really nice two-week drumbeat of building and then hitting a goal, building and then hitting a goal. Our company still has that drumbeat. We still use that loop, that two-week loop of building and advancing. We closed our seed round shortly after demo day, a little bit over $2 million, and we came back to Seattle in May and we moved into our first official offices. And I remember being just so grateful that after all of that, we now had this incredible team and we had the money and most importantly, we had the time to be able to just work on Poppy and prove what it could be. So is it all roses now? Definitely not. Every day, our job is to build something that people want as measured by our growth. Every day, we're working on just growing the company and putting our heads down. Even now, there's things that we're working on that I can't see how it's gonna all work out, but I know that if we return to our roots of talking to our users and starting with just something really small and then iterating our way forward, we're gonna figure it out. So I wanted to leave you with the five lessons that I've learned between my first startup and my second. The first is when you're just getting started, you're trying to figure out is this an idea I should be working on? And I think you should ask yourself whether it's passion driving you or curiosity and frustration. The tricky thing about passion is that it can make you confident. It can make you feel like you know the answer. But with curiosity, it keeps you humble and it keeps you asking the questions and frustration just gives you the motivation to get going. In the beginning, being a founder, as I'm sure so many of you guys know, is lonely. You need to talk to people. But just which people? In the very beginning, because we were both first time founders, we thought, you know what, we're gonna talk to the experts. We're gonna talk to advisors and investors and people who have been in the startup space. Here's the thing, you're trying to do something that's never been done before. There are no experts. The only way you can do this is by talking to your users and then iterating your way forward, inching forward. Product. I've talked about this, but I can't emphasize it enough. Building a startup is not about building a product, it's about solving a problem. So the product can be far from pretty and definitely far from perfect. It just needs to be the thing that can solve the problem. When it comes to funding, I think I approached my first startup a little bit more like my big company days. I thought of it like a budget to spend. So it wasn't really a shock when we ran out of money relatively quickly. I now know that the money is just this valuable time to run these experiments. These experiments are hopefully so that you figure out a way to get to either profitability or to showing the things that you need to to be able to raise that next round and get to that next level. The last thing is about focus. As founders, I think this is the hardest thing. What do I focus my time on? In the early days with my first startup, I thought it was all about product launches and there was something tangible and I could do that. But I've since realized that it's all about growth. You need to pick that one metric that is just so important for your company and then decide to grow it just consistently week by week. For my company, that's bookings filled. If we are growing our bookings filled number, then we're doing our job. That means we're bringing on more great sitters and we've got a lot of great families and we're connecting them together really effectively. So pick your one number and choose to grow it consistently. The thing that I wanna end with is that I think you guys as founders have two really important jobs. The first is to start and the second is to keep going. I know how hard it is to start and then stop and then start again. And I know how daunting it can be. But my challenge to you, if you haven't started, can you find a four-week period this summer and just commit, just try to launch something and see if you can grow it by 10, 20% every single week. The second is to keep going. I applied to YC three times before getting in. Poppy is my second startup. I am standing here on this stage because every morning I choose to be a founder. I choose to keep going. And I know for so many of you, you might be in a place that you're not sure whether you can just keep going and there's just so much adversity and there's so many setbacks. But part of it is on you to figure out how can you just keep going. And part of that that makes that easier is you have to find your people. I definitely would not be here today if not for my incredible team that has devoted their days to join me in this journey, to build this thing. But for me personally, it's also about my family, my husband, my kids, my parents and our incredible nanny. For me, they're the ones that enable me to create the space for me to be the founder that I need to be. So if you guys are in anywhere in the similar situation, you need to find your people and build your own village so that you can create the space to be the founder and keep going. It's been an incredible three-year journey so far. And if there's one thing that I know for sure, it's that the world needs more female founders. Woo! Woo! Woo! Woo! Woo! Woo! Woo! Woo! Two years ago, I sat in your seats with nothing more than a desire to be a founder. There's nothing special about me. And I am proof that if you set a goal and you start and you choose to keep going, then you'll figure it out. Thank you. Thank you. Thank you. Thank you."
  },
  {
    "name_video": "On starting and scaling Bloom Institute of Technology ",
    "description_video": "The Bloom Institute of Technology (YC S17) provides a CS education that's free until you get a job. Austen Allred, CEO & founder, discusses his journey as a founder, including how the idea formed, what he thinks about copycats and the decision to be remote.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/5N-on-starting-and-scaling-bloom-institute-of-technology",
    "youtube_url": "https://youtube.com/watch?v=_yIAYZtdrfI",
    "mp3_file": "downloaded/On_starting_and_scaling_Bloom_Institute_of_Technology_.mp3",
    "mp3_content": "All right, so today we have Austin Allred. He is the CEO of Lambda School, which was in the summer 2017 batch, and Lambda School is a CS education that is free until you get a job. So, Austin, what I wanted to ask you about, you mentioned this on a few podcasts that I've listened to you on, and basically there's this core idea in Lambda School that you have to be kind of confident enough to even apply, and this is a great opportunity for many people, but what I'm curious about is, how do you encourage people to do something that's probably good for them that they might just be scared to do or they make excuses about? Yeah, I mean, I think that's actually the problem we grapple with the most, and I think Patrick Halson said something along the lines of, if you think about it, the highest leverage activity any human can have is inspiring other humans to do what they're capable of, and in many ways I see Lambda School as like the realization of that. So, we've had a lot of students, you know, in the past you would graduate and then whenever you felt ready you would start applying for jobs, and we'd have students that would just wait and wait and wait, and we'd be like, what, you know, why are they not working hard? What's going on? And you talk to them and you realize it's massive imposter syndrome. They're just not confident or comfortable with the idea that they're now a software engineer, and so they're just kind of procrastinating that. So now we have some mechanisms that get you to start applying earlier, but yeah, like the minute they start applying they get interviews, they get hired, they get a six-figure job, and it's like, what were we waiting for, right? You're totally capable. And what about the people before Lambda School? A few of the questions that came in from Twitter were basically like, isn't this just an opportunity for rich people, you know? Like being able to leave your job and commit full-time to a seven-month program. Yeah, my first answer to that would be we have part-time programs as well, so you can do it evenings and weekends. We have experiments running where we pay people living stipends. That will be expanding greatly. We'll be announcing something in the near future along those lines in concert with a few other tech leaders here in the Valley. But yeah, I mean, the number one problem we have to solve on the admissions side is getting the people who are qualified to actually apply. Yeah. It's kind of a, you wouldn't think of it as being a problem. It's a YC problem too. Yeah, no, it totally is, yeah. Some of the best companies are just like, yeah, I just don't know if I can get into YC. And that's the difficulty of having a good reputation where a lot of people want to go there. You just, there are people who assume that they won't get in, which is not the case. Right, I mean, so your acceptance rate, maybe it's changed, but I heard you say it's 25% of the people who make it through that first initial test? Of the people that make it through the pre-course work, it might even be higher now. I mean, the pre-course work is more difficult, but the vast majority of our selection mechanism is the pre-course work, how well you do on it, if you put in the time. Sometimes I wonder if we could just make the pre-course work really long and have that be it. No interview, no nothing, just the work. Yeah, I mean, because that's obviously, like your business hinges on you assessing that risk, right? Correct. If you could make it sufficiently difficult, it would work. Yeah, in theory. I mean, you run the risk of false negatives, or false positives, I guess. But yeah, all that we need to find out is are you of average mental intelligence and will you work really hard? Yeah. And I think YC is similar, right? When I got into YC, I felt super intimidated. And there are brilliant people all over in the room, but just because you have a PhD in computer science from MIT and you got a 1600 on the SATs as a freshman doesn't necessarily mean you'll have a successful company. It's not directly correlated. I think in the past, it's possible that YC was fooled more often by fancy degrees and PhDs and stuff like that. Possibly, yeah. Not the case anymore. I mean, in my YC group, there were a couple, like a 15 and a 16-year-old kid. Oh, you were in that group? Yeah. Yeah. Yeah, that was a fringe case. So I'm curious about, there's this core insight with Lambda School, which centers around what if we didn't have to charge $10,000 for this dev school? How did you reach that point? So I was living in rural Utah before I moved to San Francisco. And when you move to San Francisco from a small town and you see just the discrepancy in opportunity, I guess. So it was easy to look around rural Utah and be like, look, that guy is just as capable and intelligent as that guy in San Francisco. But in Utah, that guy's making 30K. In San Francisco, that guy's making 150 and he's leading a team. So how does that work out? Is it just what jobs are available? And I mean, if you talk to people, you realize it's more about opportunity than anything. So to tell a guy that's making 30K, hey, just drop 10K on an education and there's a 7% interest rate on the other side and hopefully it works out. That's actually a really big ask. So I have to put it in terms for VCs sometimes and say like, imagine spending half of your annual income on an education on a bet, right? You have, most VCs are very well off and you have that kind of risk that you can take. So you have to kind of put it into that similar psychological context that people just can't afford that risk. So why are people in these situations signing up for University of Phoenix type programs but not the dev schools? Because it's a similar choice, right? So I think the first reason is honestly because the University of Phoenix is more aggressive in their marketing tactics. They, I mean, they have the, they don't really care whether you succeed to some degree. If they can, they're backed by, the loans are backed by Uncle Sam and whether or not you're successful, they get paid. So the incentives are fundamentally misaligned and if the University of Phoenix can get you to sign a piece of paper, they get 80 grand and that's it. But the reason people are, the reason people opt for universities generally speaking versus code schools is they've, my entire life growing up, nobody ever said there's a path to success that's not college. And I'm not a college graduate. My older brother isn't a college graduate. A lot of very successful people I know are not graduates. But yeah, everybody growing up just said, go to college, doesn't matter what it costs, just get a degree. It doesn't matter what you study and you'll be successful. And I think my generation is now realizing that's fundamentally untrue. It isn't only not good advice, it's probably bad advice, net net. And the newer generation has the benefit of seeing people with hundreds of thousands of dollars in student loans and working at Starbucks and clearly something was off in the advice that we were given. So yeah, I mean, I went to NYU, so I know the feeling. I graduated with like 50. And that's pretty good going to NYU. Which is okay. Yeah, I got a bunch of scholarship and it worked out all right. I mean, it's still a lot of debt to be clear. Yeah, dude, I was an English major. So I got all the jobs I've gotten have been through skills I've learned outside of NYU. Obviously I can write fairly well, but for sure. But the real upside was being in a huge city where I could start working early. And I think that was a real competitive advantage. And I'm curious about Lambda School in this way. Because at NYU, once I started, I never went home again. Every summer I was working and then I was working during the year and then I was realizing that I could cram all my classes on one or two days and work full time. And so I had easily a four year advantage on all my friends who went to Colgate or something like in the middle of nowhere. So how do you take advantage of that at Lambda School? Like getting people in early, getting them a network? Yeah, so there are a couple of things. One is Lambda School is nine months full time versus a four year degree, which is obviously four years. So the average Lambda School grad, if you had two students, one started a university at the same time as another student started Lambda School. By the time the student's graduating from university, the Lambda School student has three years of experience and has paid Lambda School off and is a quarter million dollars ahead, at least, of the university grad. So net net, it's pretty obvious. But the network is pretty key. So most of our students are coming in with no network, a lot of students from either inner cities or rural areas. And we basically have to help them build that and then build a network around them. So we have a full time team that is just bringing in companies to hire students. Part of the school itself is actually, okay, here's how you network, here's how you find other people with similar backgrounds, hired in engineering roles on LinkedIn. Now we're gonna go contact them. That's actually built in the curriculum. Oh, I didn't realize that. Yeah, can you actually break those down? I'm very curious about how you, you know, tactically explain networking skills. Because I know you wrote a growth book before Lambda School, right? So you're kind of like into breaking these things down. Yeah. Say I'm a graduate or I'm in Lambda School, at what point do you start teaching me, I guess you could call it soft skills? So now you meet your career coach at week three. Okay. So it's very integrated into, like it is Lambda School, right? It's not a separate external thing. And we have careers lessons every week for the entire school. So for example, you know, we train students to do informational interviews, which is find someone with a similar educational background to you. So use LinkedIn's advanced search and search for schools that are X, Y, Z, in locations that are this and with careers that are this. Now you have a huge list of people who are just like you. Reach out to them and ask if you can grab coffee. Just, or jump on a phone call and say, hey, I want to break into this field. What do I do to break into this field? And probably our best job offers actually come through that. Your best job offers always come through networking and meeting people. We're really close to the point at which we just say, you know, if you have to use an application to like click an apply button somewhere, just throw it in the garbage. Don't do that anymore. Or at a minimum, we'll have somebody else do that for you. So now to help with that, we are hiring right now 37 interview sourcers. So those are folks that are just going out, they'll take your specific information and they'll go out and help find companies as well and bring the companies to you. So we have an entire team that's dedicated to that. The future we're going to look a lot like a talent agency, basically for software engineers and designers and whatever else. Right, right, right. So in terms of the other, there are a couple questions around, well, so John Palmer asked, can or what other pieces of the university experience can be unbundled? And the thing that I'm in particular curious about is the way you treat education in the sense of Lambda School is like, hey, this is job training, right? Like this is the goal of making money. It's not about, you know, being altruistic and necessarily making artists or whatever you want to call it, right? Do you see a traditional, a value in a traditional liberal arts education in like those elements of school? For sure. So I see value absolutely in the liberal arts, right? I do disagree that A, the only way you can learn the liberal arts is within the walls of a university. So in my mind, a lot of the people that we're talking to, you know, if you're 35 and you've never had a very high paying career, the prospect of let's take out $50,000 of loans to study Shakespeare is not a bad thing per se, but probably not the right thing at the right time. Yeah. So we are, yeah, we're entirely vocational or a trade school basically. And we want to help you make as much money as you can. And then when you're making a lot of money, it's a whole lot easier to make decisions around what you'll learn in the liberal arts. In fact, that may be an add-on we add to the school later, but not, it's just not the focus right now. There are a lot of people that do a really good job at that and we're okay to leave that to them for now. Yeah, because I think that's, it's one of those things similarly to signing a student loan when you're 18. Like you don't really know the terms of the day. I mean, like you can read it on paper, but you don't really understand the dynamic you're about to enter. Whereas when you're say, yeah, you're 35, thinking about switching careers, you're much more practically minded or you might just be interested in indulging. I think we've romanticized it a little bit, right? Like I went to the liberal arts portion of the liberal arts degree before I got into the specialization and like it was valuable, but I've learned way more by reading books and meeting people and other stuff than I did in the university. So I get the value, but I don't buy the argument that like that's the only time and only place that you can become well-rounded. That doesn't make sense to me. Yeah. I mean, do you see there are elements of value in unbundling other aspects and like really building that into Lambda School? For sure. Yeah. Yeah. Okay. So there's another question here from Steve Claiborne Noble, who asks, as competitors begin to copy your model, which is, we should talk about, it's an income sharing agreement. What front do you believe you'll be competing on? All of them. All right. So the way I describe Lambda School is it's, people know Lambda School because of the business model, but the business model is something that's upfront. That's not what makes Lambda School works, right? You can charge whatever you want or however you want. The key is making that successful. So our product, our educational experience is I think among the best in the world. And it has to be the way we've built it in order to make a free upfront and online education work. I mean, when we started, our dropout rate is what was killing us. Now we're graduating more than 85% of students that start day one. And a lot of the dropout is because of reasons outside of our control. It's financial or life circumstance or whatever else. So we have a product that people love. They come out on the other side as great software engineers and we have a hiring network ready to hire them. That's all really difficult. Then the admission side of knowing who and how and what to accept, that's not something you can buy, right? You just have to figure that out over time and eventually it'll be very data driven. We'll be able to tell on before a student begins Lambda School, what they're likely to be hired at and what their likely outcome will be, similar to a lending company. But there's no credit score for people, right? You can't say like, what is this person's potential? There's no inputs that you can take right now that can determine that. So nobody knows how to underwrite student risk. Nobody knows how to train students online. Nobody knows how to place students nationally at scale. And figuring all that stuff out is the hard part. Plugging, throwing an ISA on the front end is the easy part. Yeah, okay. So you're just hoping that like, you're much further ahead than people realize. Way further, yeah. And I'm sure there will be competitors. Sure. But the thing that scares me isn't somebody adopting our business model. That probably has happened that I haven't heard about and will happen a million more times. What will make us win is the student experience and how fast we can move in making that better over time. Yeah. And that includes the outcomes that students have. So all of my time and effort and energy is focused on that. And that's really freaking hard. Okay. It's way hard. Yeah. So yeah. So you were profitable before you did YC, right? Correct. Okay, or yeah. Maybe not usually profitable, but profitable. We were profitable by any definition. Yeah, there you go. Yeah, OK, cool. So was there an element of fear around being copied that led you in the path of raising money? No. So we actually sat down with a YC partner. And we said, OK, we don't need to raise money right now. But if we do, we'll suffer x percent. So we modeled it out. We actually created a financial model and said, here's the dilution that we'll suffer. And with that money that we'll raise, we'll be able to grow like this. And therefore, you know, and it came out to something like Lambda School will be 10 times bigger than it otherwise would be. And it will suffer, call it 15% dilution. So that's an easy trade-off if you actually model it out. And that's the reason we have continued to raise. I mean, before we started Lambda School, I was like, I'm never raising VC again. Right. Well, we should tell that story. That was a cool story. Yeah. And now it's a year and a half later, and we've raised $48 million. And it's not going to be the last we've raised. But if you look at the growth rate of the school and the revenue, if you look at any number, all of those raises were a wise decision in retrospect. And there's a reason VC exists, right? When you have a company that can grow at extreme scale and capture a market and create way more value, that's why you raise VC. And the realization for us was realizing that Lambda School could be a successful bootstrapped company. But if we raised and used a little bit of fuel, we could just be much bigger and much more impactful. Yeah. Well, I actually don't think it's dissimilar from student loans. Like, there's a dynamic where it works really well for you. And there are other dynamics where if you don't know the terms of the deal beforehand, there are different incentives. And it doesn't work out well for you. Right. So this is kind of you got burned before with your first company. Yes. Yeah. So this, I mean, if I remember correctly, you were about to raise an A, and then it just fell through. We had docs done for an A, which is not normally when things fall through. It was a very abnormal story. So it was December 23, and we were waiting for a wire any day. And then the gentleman who was leading our series A called me and said, actually, we're not. Well, he actually had his secretary call me and say, actually, we're not doing the deal. And I said, can you tell us why? And they're like, well, we're just not confident in the company after a month of due diligence and going through all the paperwork. I mean, our law firm was like, we've done thousands of these deals. We've never seen this happen. And we were out of money. So I didn't want people to go through the holidays planning on coming to work in January, and then the company not being there. So I called the whole team on December 23 and said, I think it's over, guys. I don't know what other options we have. And we had other people who would have funded us, but it's really difficult to like, hey, you know how we went down a month and a half with that VC? Well, they pulled out, so you should fund us. It's very momentum driven. So that's why I was very anti-VC. Now, I think there are companies that should raise VC. There are companies that shouldn't VC. It's just dependent on the circumstances and the details and what you're looking for. Yeah. Yeah, but then you left, and you went to go work for another startup, right, after writing the book? So I was broke. I was working remotely in the middle of nowhere in Utah during this time. So we go back home. It's not like there are tech jobs. I mean, the closest tech job was probably two hours away, an hour and a half away. Out of money, I used all my savings to make employees and contractors whole, because we were burning it down to the wire with the company funds. And then my daughter, who was born, ended up in the hospital for a month. So we were just like, actually, she's only in there for a week, but it felt like a month. And the bills may as well have been for a month. So we were out of money, trying to figure out how to recover. And I had written a couple of blog posts about growth as we were working on the company that had taken off. And so I said, OK, we're going to turn those blog posts into a book. And I emailed everybody who had subscribed to my blog and said, all right, we're launching this Kickstarter, and I'm going to finish up this book. And the Kickstarter did something like $120,000 in sales. I mean, that's what I'm good at, right? How many people were on the list? A couple thousand. That's really good. If there's one thing I'm good at in life, it's growing something quickly, building hype for something quickly. That's kind of my superpower to some degree. So use that in its fullest for the first time. And then a few companies saw the book and said, hey, come work for us, one of which was LendUp, which is a YC company. So it's still interesting, because it's fairly risky. You lived in the Bay before. You lived in your car, right? And then you moved back to Utah. You could conceive of getting a tech job, right, rather than writing your book at that time. Why didn't you do that? So I kind of did both, right? It was just whatever I can do to get money right now. And a book was honestly faster than a job hunt. Well, maybe that's not true, because I could have. Yeah, it's actually not true. I don't know. There's not a good reason. I had offers within days. So I imagine the scenario is like, hey, here's something. I've been really interested in this idea and question lately of, at what point did you kind of find your voice? And people talk about that in the context of art, but I think it's the same for entrepreneurs, in that kind of confidence, like, oh, I'm just going to do my thing. And I could, yeah. So it's funny. As everything was winding down, I went to one of our past investors. And I was like, what? What am I going to do? And I was paying myself. I'd started out paying myself $40,000, and I'd recently given myself a raise to $60,000. And I went to that investor, and I was like, what? How can I pull this out? I don't know what I'm going to do next. And he said, well, you don't have any marketable skills. You're never going to make more than $60,000 a year. So maybe you should go find an internship somewhere. I was like, OK. That's where your mindset is, right? Maybe I can make $60,000 a year. So I actually made sure that the first job offer I got was double that, just out of spite. But it took me a while to build up the confidence to, like, people were telling me that, well, when you're the CEO of a company, your only job is to make that company successful. And if that company fails, by definition, you're not a good CEO, right? You could debate whether or not that's true, but realistically, your job is to be successful, right? And so that calls into question, well, what do you actually do? What are you good at? Do you have a skill set? And I'd never worked. I'd worked in marketing before, but never in growth, growth. And so I was like, I don't know if there's anything I can do. And I didn't believe that people would trust that I had a skill set that was valuable, because I had investors telling me you don't. And clearly, they know more than I do, right? So it was a psychologically difficult time. And I thought, the only way I can show people what I can do is by publishing this book, right? It's funny to think about that. I've never thought about that. But in retrospect, starting a company is, by definition, saying, I think what I can do is worth more than people will pay me for, right? I think that I can do something, whether it's because you can't measure it. I think Paul Graham has an essay about this, something about measurement and leverage, and how companies can't do any of those things very well. So if you want to get to a place where you can make a lot of money, get to a place where you can measure it, get to a place where you have leverage, and so you look at pro athletes, anybody can measure the number of dollars that Michael Jordan brings in. So it makes sense to pay him $100 million a year. Whereas even if you're the best software engineer in the world at a small company, they're not going to pay you $100 million a year. Google might. And Google has in the past spent $100 million to retain Sundar and stuff like that. But yeah, it's mispriced human capital is kind of fundamental to it. Yeah, but it's also a core to your business. But that, like, that's, yeah. I think that's the key. That is the insight. It's saying, you know, if you look at any asset class in the United States, it's being traded on Bloomberg terminals instantly all over the world. So you can trade, you know, 100,000 pounds of pork bellies without anything moving, and it's priced instantly. And there are a million people trying to figure out what the accurate price is for those pork bellies. But for some reason, humans don't have that, right? It's you get a job or you don't. And specifically, there have been women who applied to Lambda School. We get to the negotiation stage, and they say, you know, I have always been paid x. And we have to say, you're worth more than 2x. So we're going to pay you what we actually think market is. And it turns out they've just always been underpaid, and they didn't know to ask for more. And I think that happens all the time. All the time. Well, you don't, because the thing is, when you start out, you're just applying for jobs, right? And you take what you can get. And then, like you mentioned before, many of these, you know, quote, great jobs are never advertised, right? And so you anchor in this weird way that until you know people who make 400 grand a year, you're just like, well, the job says 75 grand a year. And that's awesome, too. Like, you know, if you're making 35, 75 is fucking killing it, right? But then you're just like, oh, there's probably like some ceiling at like 100 something. And you're like, the answer is actually no. It just keeps going. But companies are incentivized to not publish that as well. No, it's, yeah, it's a, and that's the funny thing when you get to Silicon Valley and you see, like, there is a desperation around top talent. And there are people commanding, you know, million dollar salaries, and the companies will happily pay it. Obviously, that's not an entry level salary, but, and there are people in the Midwest who are capable of being paid six figures in the Midwest that are making 20 in the Midwest. And that's crazy to me. Like, that's the problem we're really out to solve, is why is there no mechanism to help people realize their full potential, both in economic standpoint and a non-economic standpoint? And why is there no, like, there's nowhere near an efficient marketplace for capital. No, nowhere close. And that's crazy because if you look at GDP and spending and like where we can make the most improvement as far as efficiency goes, human capital is the most unoptimized asset class we've ever had. Yeah. And that's insane. Well, especially in the States too, where people aren't working in factories for the most part. Right, right. So, aside from the tech jobs that you offer right now, what other opportunities do you see as like really great for arbitrage in that way? So right now we're hiring an economist to help us make sense of all that. But some of it you don't have to be an economist to see. You know, you can talk or download data from the U.S. Department of Labor and see like how many people are applying for the jobs and how many jobs are out there. And there are some that have drastic, like three to one shortages that pay really well and there just aren't enough people. So nursing is one of them. Every nursing school is at capacity because they have some, so there's something called the 90-10 rule, which says that only 90% of your money as a school can come from federal funds. The other 10% has to come through people paying tuition or private sources somehow. And that is actually the thing that drives the education system in the United States, that 10%, finding that 10%. So every school is just desperately trying to find that 10% and however big that 10% is, they can blow the rest out with federal funds all day. So nursing schools, for example, there's a huge shortage of nurses. Boomers are getting old. Millennials aren't going into medicine. But nursing schools are capped because they can't find that 10%. And so it's like that drives massive labor shortages across the entire economy. And that's crazy, right? That's just a market inefficiency. So we're not working on it right right now, but don't be surprised if you hear by the end of this year an announcement that Lambda Nursing is going live and we're launching a nursing school. So we look at it backwards from a labor market perspective. And we're starting out with where are the shortages in labor markets and let's fill those gaps. And it turns out some of those gaps are 5 million people at a time. And that's a huge inefficiency. And if we can be a toll road that takes a very small toll to get you there, it's an enormous company. So, yeah. I think so too. So, okay. I'm curious about then how you end up modeling that risk if the program, I imagine the nursing program might be a little bit longer than nine months. You're gonna have to give people, I imagine, like you're talking about testing out these living stipends, stuff like that. How do you start modeling that risk? In the beginning, you make good guesses and you put it on a spreadsheet and you give yourself a margin of error. You lose some, yeah. Yeah. I mean, it looks like any other fintech industry where you start out saying, all right, we're gonna make some loans. We don't really know how it's gonna work out. We're gonna learn from that. And over time, we'll have a really predictive model. We're getting better on the just income share agreement for education side for software engineering, right? We're not all the way there, but we to some degree can predict what the returns will be given the macroeconomic environment staying the same. Okay. So you kind of just have to like create terms that make sense and figure it out as you go. And then when we talk about a moat, over time, you can better predict what repayment will be. You can better predict how much money you're going to make. You can write a tighter model. If you can write a tighter model, you can bring down the cost of capital. You can bring down your costs or you can increase the services that students get. There's just a fundamental advantage to having done that before. And now we've got a couple years headstart on everybody else and we can pretty act, I mean, not with 100% accuracy, but we have a pretty good sense of how successful a student will be by the time they're starting or a couple months in. And we're hiring teams that are going to focus on just that. How can we shorten that feedback loop so that we can determine very quickly how successful people will be? Can you kind of quantify someone's work ethic or grit? No, but they all along the way will spit off data that you can use to try to approach that. So the numbers are an output, not an input. But I mean, similarly to a startup, right? Like you can't quantify the grit of founders, but you can look at what they're doing and the results of that, you could retroactively say, yeah, that looks gritty. And if you get enough data points, machine learning is actually, like that's one of the places where AI makes the most sense is saying, let's take all of this data and let's figure out a model that maybe humans couldn't put together, but computers can figure it out. And pretty soon you can underwrite the likelihood that a person will be a successful software engineer. a year before they've paid a dollar. And then that changes everything. Someone asked this question, so I want to credit them somewhere. Oh, no, I know who it was. David Kofied Wind basically asks, Imagine a market dynamic where it's mostly white dudes getting hired for software engineering jobs. Is it possible that your model could learn in the wrong way and say, only select white dudes for Lambda School? So, it could if that's what we're actually happening. That's not what's actually happening. The reality is, if we can make someone a strong software engineer, they're getting hired anywhere. But, I mean, there are ethical concerns that we have to be aware of, right? When I used to work in lending, you have to be very cognizant of that in lending. Because, for example, if you use zip code and you say, look, the people from this zip code tend not to repay, zip code is very directly correlated with demographics, and there are ethical concerns that you have to be wise about. What we're seeing right now is actually the reverse to some degree. So, obviously, it's not causation by any stretch of the imagination. We can tap into markets of completely untapped talent, because we're not charging anything. Folks who are brilliant just haven't had opportunity before. And so, we actually over-index to those types of communities. So, I think as a school we're less than half white, which is not the traditional makeup of a code school by any stretch of the imagination. But that's not because we're intentionally skewing admissions that way. It's just because that's where a lot of untapped talent is. And we try to find and train that untapped talent. And companies are happy to have it. In fact, it's a huge need for companies. We don't sell ourselves as a diversity solution, but it just so happens that our students who are great engineers are, generally speaking, more diverse than Stanford would be. Yeah, that makes sense. But great question. Yeah, no, it's really interesting. So, you guys now are remote, right? So, all the coursework happens livestream. Do you see a version where you become centralized? I mean, my buddy, he worked at a college in Vermont that just went under, right? I imagine you can buy colleges at this point. Yeah. Do you see a world where you're like, I mean, probably with a nursing program you'll have to. You would have to buy a... Yeah, I mean, it changes the cost structure. So, the less we can be in person, the better. We have some experiments that we're running where we're actually housing people in group housing together. So, they live and work in the same environment. They're still taught online, because we don't have to have the density of instructors in one place at one time. We just get students together. I mean, I've looked at, hey, can we just buy a summer camp and run Camp Lambda and have a bunch? That would be awesome, right? Yeah, great. We just have to... Decentralized housing is much cheaper than centralized. So, students would have to be willing to build that into the cost. So, what I like to say is, you look at Amazon. Amazon, in the beginning, was saying, we're entirely online, we're going to be focused there. But once that's nailed, then you start to play with other stuff. We'll probably be the same way. But the core of Lambda School for the foreseeable future is online. Whether students are in the same place or not. We actually have a monthly meetup in every major city in the US where students all get together in person. And that's working pretty well. So, there may be more of that, especially as we have more density. But the educational experience will probably always be online. Yeah, I mean, this is what I've heard from the guys at Zapier who were just saying, you basically have to be intentional and build that remote culture there. Very intentional. Because if you don't, you could easily see a version where, oh, you weren't in class today, then you don't hear the thing, you didn't hear the tip. And I think you have to do that as a company, as a school. It's not something that happens on accident. We started out by figuring out, okay, here are all these people who could be watching Netflix right now. So it actually goes back to our instructional design where, I mean, if I think back to my college classes, maybe 50% of people were paying attention, if I'm being optimistic. At least, I mean, this was, call it 2010, at least 50% of the class was on Facebook at any given time. Have you seen those photos from back in the day, when Facebook just started? I'm sure. I don't think it's Photoshopped, but I imagine there's a real one out there somewhere where it's from the back of the class and the professor's talking and it's 70% of the screens are Facebook. Oh, yeah. So for better or worse, I actually think it's a secret advantage is that we can't rely on the crutch of just looking at somebody and seeing what they're doing. So we have to use data and software and instructional design to make sure everybody's working on the right thing at the right time. So, I mean, yeah, it's a different world that you have to build for and you have to build it for it from first principles. It's like you can't just tack that on at the end. Oh, by the way, we're online. That does not work. Well, most MOOCs are, yeah, disasters. Correct. It's like 10% or something. Yeah, of the good ones. Yeah, the good ones. Yeah, yeah, yeah. It's crazy. So Dave Dawson asked several good questions. He says, you appear to be on the successful path now. We'll just take that for granted. Sure, yeah. Was there a point early on in Lambda School when you wanted to stop? There was never a point I wanted to stop. I mean, if you paid me minimum wage to do this forever, I would do this forever for minimum wage. Maybe I'm just a sadist or a masochist or something. Yeah, yeah, yeah. I might have to move back to Utah. Yeah. But there were definitely times when it was just like, this is not going to work and we're screwed. I mean, in the beginning, it was like all those other schools were right. When we started, everybody said, A, you can't teach people effectively online. B, you can't teach people effectively without skin in the game. They have to put something up. C, people aren't going to get jobs if they don't have a network. You can't accept the categories of people that you're accepting and have them be successful software engineers. Which, looking back, is a ridiculous thing to say. Yeah. But everybody believed that. The entire code bootcamp industry believed that online was not very effective. Because they were all like, we have an in-person class. Yeah, let's throw it online. It didn't work? Well, clearly, that's fundamentally broken. Yeah. Everybody who had ever tried a free upfront thing didn't use any sort of filtering other than a paper resume. And people would show up on day one and they wouldn't show up on day two and they would say, oh, this clearly isn't working. So, yeah, there were a whole lot of times when we said, maybe they were right. That was the real reaction. We were wrong this whole time. And we're out here saying, hey, you guys are all old school. You're all doing it the wrong way. We're going to do it over here. Well, maybe there's a reason that hundreds of years of education have worked this way. But really, I think what happens is we don't have another option. We have to figure it out or we die. And that's a very powerful motivator. Yeah. Not getting a real job. Yeah. Have you ever completed an online course before? I have not. Right. Okay. And, in fact, we were talking about the book. The book was available as an online download. Yeah. And one of the things that made me want to build in this model, and I sold the book for $100. Right. It was not cheap. No. 50% of the people that bought the book ever downloaded it even. So, between looking at that and looking at MOOCs, it was like, has anybody ever figured out how to make education actually successful? Yeah. Or are we all just opening the top of the funnel so wide that some people are going to fall out the bottom? And that's become my thesis, is that there is some percentage of society who are autodidacts, and they just have a ridiculous advantage over everybody else. And so, part of Lambda School is, how can we help the other 98% learn how to be autodidactic, how to see a problem, approach it, figure out a solution? So, we approached instructional design with no assumptions. And I think every school ever has looked at everything and said, okay, well, here are the successful students. So, our job is just to weed everybody else out. Yeah. Why are the other students unsuccessful? Is that because they suck, or is that because you suck? Yeah. And we found that it's really just because you suck most of the time. And it's really easy for schools to just look the other way. Huh. I have been wondering, I'm doing a Duolingo right now. Uh-huh. And I've been curious about, I mean, it's cool, but it's very open. Like, you can just choose where you want to go. They, like, motivate you a little bit by keeping a streak up. But I'm actually a little surprised that people, if people finish it, because I'm doing it every day. I think if you guess what their completion numbers were, you'd be right. Yeah. I think about, you know, when I went to college and I had a class and I showed up and it was a Shakespeare class, I think about the work that I put in in that class and then the work that I put in outside of that class. There's no way in hell I put in as much work studying Shakespeare on my own as I would in the four walls of a university. But I don't think that's because there was a physical campus with a professor wearing a tweed jacket necessarily. That's just because there, there was social pressure, there was instructional design, there were external mechanisms that forced you to put in the work. Yeah. So, we had to, like, that's what we built into Lambda School. But you also have to make it fun. Totally. You have to motivate in that way. Totally. It's why I learned to program, it's why I learned to video edit, it's why I learned everything on the side. Because you had a clear goal, like, hey, I want to build this thing. And it's enjoyable to build the thing you want to build. So, you look at, as an example, computer science programs, right? They have ridiculous dropout. Yeah. And they're proud of that. But in my opinion, it's because they start, like, writing Java and start writing C, and you have to go semesters before you get to a point where you can write any code that you can see or touch or actually play with. And so, like, yes, you're getting the fundamentals, but Lambda School works the other way. So, you have a site that you can play with the first day. And it's not, you know, you don't understand the fundamentals of programming. It's crappy HTML and crappy CSS. Yeah. But you can see it, you can touch it, you can play with it. And I think there are a lot of people, if not the majority of people, that learn that way. And they're the people who aren't going to become researchers, and that's okay. And just because you start at that point doesn't mean you can't drill down until you're doing the fundamentals. Like, you do need to know how to write C to be a good engineer. You do need to know how memory management works. But maybe let's not start with memory management as, like, an entry-level point to software engineering. Yeah. Now, I did a year of CS in even high school. And it was just like, what are we doing this for? Right. What is the point of this? Right. And there are a few people that are interested by that enough that they can carry on, but that's not enough people to build the world of software that we need. No. So, yeah. Yeah. So Dave asked another question that I want to cover, and that is, what keeps you up at night now? So we agreed as a team to no longer share the number of students that we have enrolled. But it is not a small number, and it is growing at an insane pace. Yeah. We'll soon be measuring Lamb School's scale by percentage of the overall number of students learning to program every year, to give you some context. And being able to support that kind of scale effectively is what keeps me up at night. Mostly, specifically, hiring. Mostly hiring executives right now who can build out 100, 150-person teams beneath them. Those people are difficult to find, and it's a very important decision. And we need like five of them yesterday. And then on the individual contributor side, we're probably... We'd need to hire like 100 people very quickly. And that is hard. But that would be remote, right? Those jobs would... Most of it would be remote, correct. So, if you're looking for a job. Yeah. Oh, please. I think we're hiring for like 50 positions right now. Lambdaschool.com slash careers. Please, please, please. All right. So, I want to talk about two other topics. So, one... I actually really like this one. Deo Calliowo asks, I've made remarks I do not agree with. That's a quote from your Twitter bio. Yeah, you're prolific on Twitter, if people don't follow you. What is that one remark you wish you didn't have to disagree with? One remark that I... So, I think what he's trying to get you to say is what is something that you may have had to say or go back on in a perhaps like politically correct or like environmentally correct way? There are a lot of layers to that question. Yeah. That's a tricky one. So... Or maybe even a core belief where you're just like, oh, maybe I'm just wrong here. So, the one that I go back and forth on the most is as a company being remote versus in person and the trade-offs of that. So, we bring people together a lot and I see the advantages of that. And a lot of our executive team will probably end up being in person. And so, it's... I would say that I wish that remote work were at this incredible place where there's no trade-off. And I think that's something that everybody wants to believe and some people do believe. But until you're kind of in the CEO or executive role trying to bring a company together, you don't see some of the trade-offs. Yeah. I mean, I would love to be able to move anywhere and not pay what I pay for rent and by extension not pay everybody else, but I have to pay them so that they can pay rent. Yeah. But I still think... And a lot of our students come in wanting to be remote. A, I don't think remote work is built into enough companies yet where I would be comfortable telling somebody that I love that they should start their career as a remote junior software engineer. B, I think we're still figuring out what the right dynamic is of in-person versus remote, like as a tech industry, what the trade-offs are and what the ideal way to do that is. My first company was entirely remote and that's really hard. When you're trying to come together and create something but nobody's in the same spot, they're just trade-offs. That said, all of our instructors are remote, all of our career coaches are remote and all of our students are remote and because we've built around that or we've built into that, it doesn't matter. But I think the two things that are most... like my most controversial beliefs maybe or most... like seemingly like don't seem to jive with each other is that I think the best high-growth companies are still going to be built in Silicon Valley for right now or at least they'll having an executive team in Silicon Valley but also I believe the best schools are remote and I don't think that's a contradiction though it certainly feels like one mm-hmm yeah yeah that's a good yeah just think about yeah no I was listening to Michael Seibel talk yesterday and he said he's had his mind changed about remote companies given the success of you know GitLab Zapier type companies right but the way he puts it now is that it has to be one of your like core things one of your like core innovations and if you're thinking like maybe we have the energy or the insight to innovate on a couple maybe three categories like are you willing for remote work to be one of them yeah I think that's exactly right you can only solve so many problems as a company and I mean I I've talked to the CEOs of both Zapier and GitLab in the past couple weeks and they think about that all the time yeah and the nice thing is the talent advantages that you have when you do that are enormous you know when Zapier is like yeah we've got like this guy in Ohio and this guy in Nebraska it's like man you know I'm hiring but but at the same time that the trade-offs are that if you're if you know you have an office in the financial district and you're hiring five executives there are a hundred companies that have been high growth that you know the funny thing is a lot of the people who they join a high-growth company they know how to grow it they figured it out now they're successful and they have less incentive to move than other people do yeah so like I think the pool of high-growth executive talent with 15 years of experience growing high-growth companies is still largely concentrated in San Francisco like if you need or call it Silicon Valley whatever if you if you need 50 people to do that it's really difficult to find 50 people in Ohio to do that if it's still difficult to find people anywhere but yeah if you've built that in like GitLab and Zapier have you know in other companies like InVision or whatever else they've chosen that as their path and they have to spend a whole lot of time thinking about and focusing on and optimizing for that maybe that's a trade-off where they have to spend less time hiring or less there's a less competitive hiring market I mean the instructors that we have now there's no way on earth we could have had a similar quality of instructor base in San Francisco they're just there's fundamentally is not so it's yes it's a trade-off yeah it's difficult it's a tricky one okay so the last thing I want to cover is I've heard you mentioned a couple interviews that the market is not very good at measuring product quality correct or something to that effect right yeah so I think what I usually say is specifically analysts so people who are and you know if you look at public companies or VCs or whoever else and another way to say this I think PG has said that product is or revenue is a very very trailing indicator of product right so I think and so I you know back when I had spare time I would play the stock market a lot okay and I think people just don't have a very good there's no way you can quantify product quality very well so people who are looking at things from a quantitative standpoint underestimate it every single time I mean I look at some of the classic companies like you know look at the YC companies the Airbnbs the stripe they all had competitors some of their competitors had a head start some of their competitors had more money and more market share at different times but there's a reason those companies win and become durable companies another you know Dropbox as an example well it's it's one of my favorite Steve Jobs videos I don't know if you've seen this one before but it's like a very hot burn on Microsoft and where he's just like listen they're good people the problem is they just have no taste yeah and so what I was curious about with you is like do you think you can teach taste in a school to because it's very much it's related to product it's related to listening to users it's all of that but there's something like more ethereal about it you know I think that the main thing is having thought about it a lot and then having seen it and having noticed it when you see it so for example we use slack as a school so we've got I could tell you how much we spend that would tell you how many students we have it's a non-trivial amount of money for slack and people say you know why don't you use you know competitors or you know just use IRC but like it's very very subtle the work that has been put into slack and slack has it's not perfect right but as a product you can just tell yeah and so it's a whole lot of the way I like to think about product is a whole lot of subtlety built up over time to the point where it becomes an advantage and if you build up a lot of those advantages over time it compounds to some degree and I think because it's difficult to measure and it's so subtle I mean if you for example if you'd like drive a Model S and then you go drive a similar cost Jaguar for example the Model S like the materials are worse the build is probably not as good like they're not as good at like assembling the pieces but just the experience of that car versus the other one it's not even close so Tesla's probably the canonical example of like product matters way more than analysts can measure mm-hmm cool so you just think expose students this over a long enough time frame I think you show people like the when I started to realize it is when I had a few product minded people like point out some of the subtle details and be like you really like you find yourself looking for one app or one piece of software or using something more often yeah and it takes somebody to sit down and point out like you know why you're doing that right it's because this is happening at this specific time in this specific way and you're like oh that that was very pleasant actually in retrospect and pointing that out and then beginning to look for it is when I think you start to notice the the key differences fair enough yeah I like being critical sometimes especially products all right man so if people want to sign up or learn more about lambda school where should they go yeah lambda school calm sweet and you're on Twitter at at Austin cool than me like the feminist author not like the city all right thanks for coming in probably thank you"
  },
  {
    "name_video": "On starting and scaling healthcare startup 23andMe",
    "description_video": "Anne Wojcicki, co-founder & CEO of 23andMe, on why and how she started and grew 23andMe. Anne talks about the best decisions she's made and the struggles of running a company in a regulated industry. She also covers the importance of thoughtful hiring, communication, and persistance.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/5I-on-starting-and-scaling-healthcare-startup-23andme",
    "youtube_url": "https://youtube.com/watch?v=zZN-3RpdjcY",
    "mp3_file": "downloaded/On_starting_and_scaling_healthcare_startup_23andMe.mp3",
    "mp3_content": "Today, we're here with Anne Lejewski, co-founder and CEO of 23andMe. Thank you very much. Hi. Thanks, Sam. We always like to start with how you came up with the idea and sort of the founding story of the company. So, I was working on Wall Street, and- That doesn't sound very fun. It was, actually. It was fun? Yeah. I loved it. So, I grew up in academia. I always thought I'd end up being an academic. I got very- my parents- I went to a job fair right out of college. My parents made me go, and I got this job offer to go on Wall Street, and it's one thing I always tell young people, like, you never really know what's going to come your way. Yeah. Like, just take every opportunity. So, I very randomly got this job on Wall Street. I had no idea what it was, but I kind of figured, like, I actually only took the interview because they gave me free frequent flyer miles, or I won the flight, I won the frequent flyer miles. So- Oh, they just- you had to fly there, but you got to keep the frequent flyer miles. Yeah, yeah, no. I was just excited. I was like, it's a free trip. Like, it'll be 5,000 miles. Like, that's pretty awesome. So, I was on Wall Street for 10 years, and I loved it. Like, for me, it was- because it wasn't just about, like, trading, and making money, and doing these things, but it was like, I got to learn about companies, and the one thing that is amazing on Wall Street is that you get to go, like, you get to go deep on certain companies when you're really interested in them, and then really broad, knowing a whole sector. So, I got to know small cap biotechs, and pharma companies, and hospital systems, and insurance companies, and I got to have, like, a really broad landscape of healthcare. And, you know, in the beginning, I had this eternal optimism, like, healthcare's going to, you know, totally change. There's antibodies. There's all this, like, new, you know, there's, like, technology. Like, there's all these new discoveries coming. It's going to be so different, and then when the bubble burst in 2000, a lot of innovation dried up, and I started to see more what healthcare really is, and at the end of the day, healthcare is an amazing business that really effectively monetizes illness, and I used to always say, you know, if I successfully get you to never be diabetic, no one makes money, but if you do become diabetic, there's all kinds of ways I can make money, and at the end of the day, when I think about what I care about, what's in the best interest of me, like, I'd rather just never be diabetic. I'd rather never be sick, and there's no one in the system today that really thinks about how to keep me healthy. So, after 10 years of investing, I felt like I really understood the system, and I also understood that you had all these people with the right intentions who really care, but the ship's just pointing in the wrong direction, and that no one's actually focused on keeping people healthy, and that I wanted to have a company that was, frankly, somewhat rebellious, and was going to inspire people to try to really be healthier, and, you know, I felt like it was, you know, again, it had sort of that, you know, a little bit of a Robin Hood kind of mentality in the beginning of, you know, we have to, you can't change the system from within, so we got to do something more radical from outside. One of my favorite Charlie Munger quotes is, incentives are a superpower, and I always believe this, and I think this is the clear problem you just identified, so how do you think about how you design a system or a company that incentivizes, that is incented to keep people healthy? Well, I realize, like, the main thing in healthcare is that you don't actually ever have a voice, like you don't, like you don't actually, because you're not the payer in healthcare, like you the individual, you don't actually make decisions, it's, you know, your insurance company, your doctor, the pharmacy benefit manager, there's all kinds of people in the back who actually make decisions, and I think there's all this data now about, you know, you go in for surgery, and there's doctors coming into the surgery that you've never even met, so for me, what was transformative, like what we did to change the incentives, is to put you in the power seat, because I feel like, like, you make retail decisions that are in your best interest, because, like, you're actually the one paying the bill, so for us, like, what we decided to do that wasn't, frankly, like, seen as disruptive, is we are direct-to-consumer. I remember when you launched, doctors were just, or healthcare professionals in general were saying, patients, this is irresponsible, you know, you need a medical professional to do this, like, we can't, I remember one quote that really stuck with me, something like, we can't have people making their own healthcare decisions, they don't know how to interpret the data. There was all kinds of interesting, there's like a whole, there's all kinds of interesting things, because people would publish stuff on Facebook, and then doctors would say, like, but you have the right, and we'd remind people, like, yeah, it's their own information. So there's always been, I'd say, a tension, a little bit, with the medical system, and the medical system, historically, there's tests like the pregnancy test, the pregnancy test, when it came out, was seen as radical, like, how could women ever possibly learn at home that they're pregnant, and if you look at the literature of, you know, that era, like, we look at that today, and we'd say it's crazy, so one of my favorite papers is there's this JAMA paper, the Journal of American Medical Association from 1969, I think, where they asked doctors, would you tell your patients that they have cancer if they had a cancer diagnosis, and over 90% of them said no. So I always put that in context of, like, it helps people understand, like, physicians were trained in such a way, and so I don't blame the system or the individuals, it's just that, like, that was the culture, that was thought of, like, what was actually in your best interest, and I think what we do is, like, as we empower consumers, we are showing that people actually can be, like, people want to be in charge of their health, they want the information, and they actually want to be in control. I always like the sort of model of thinking about the world 50 or 100 years from now and looking back, what would we think was just totally ridiculous, and this sure seems like. I think healthcare is a type, because healthcare is, like, really, as much as it's science and it's data-driven, it's also not. Like, part of what people don't necessarily always understand is that the practice of medicine is an art. Like, you can go, the reason why you can go to five different physicians and get five different ways of, you know, treating cancer is because there's the practice of medicine, you can get different opinions, and one of the things that we're specifically trying to change is exactly that, is exactly to say that we're trying to get data so that it's no longer a question of, like, hey, Sam, like, what's the best in your best interest, that there's actually data to say exactly what you should be doing. How do you think the medical system, the healthcare system overall, will eventually get to a place where we don't have this misalignment of incentives you talked about and we have data and we have people in control of their own healthcare? Like, if you could wave a magic wand and say, I'm going to fix the healthcare system, what needs to happen? I think the reality is what needs to happen is never going to happen, which is, like, you have a universal payment system, so single coverage. Like, the reality is, like, who cares about keeping you healthy today? Because you could be overweight and you could eat poorly and you could never exercise, and you won't see the consequences of that for the next, let's say, 20 years. So the reality is, like, who's going to benefit from that? And the reality is, like, it's society, and it's you personally, and it's, like, you know, somebody who's willing to invest in you in the long run, and I think for a single-payer healthcare system or, like, a country, they care about actually trying to keep you healthy for as long as possible. I think, second, people, like, we don't want, we saw that communism doesn't support the system that we all want. People have to be willing to spend money, and they have to step up. And I think the same way you see people stepping up with yoga and vitamins and weight loss studies and, you know, all kinds of different alternative cares, people at some point have to step and say, like, your health is also your responsibility. And I think the more that we can give people personalized information about themselves, the more that they are going to be willing to execute on taking care of themselves. Speaking of that, you could have started any, so many different companies in the healthcare space. How did you decide this was not an obvious choice at the time? For me, it was totally obvious. So, for me, there was a couple things that were happening. One, I always loved genetics. It was my first investment in 1996, and so, in some ways, it was my first, and it was my last. So, the genetic revolution was happening, like, right in, when I started investing, there was the race of, like, you know, getting the cost of the genome down. It was super exciting. And I started looking at those investments again and realizing that you're going to be able to buy, essentially, a scan of your entire genome pretty inexpensively. And so, that was the first nugget of, like, okay, wow, you can actually start to get huge amounts of genetic information. And second was seeing this world of, you know, social networking. That social networking was happening, and you don't actually need the old guard to get things to happen. I could crowdsource. So, it gave me this idea that, wow, if I just empowered everyone with their genetic information and I crowdsourced all this information, like, if I have the world's health information, what could I do? And people were like, well, you could, you know, cure them. You could save them. You know a lot. So, the idea really was, well, we should do that. We should, like, instead of relying on Stanford or Harvard or Pfizer to go and solve a disease or, like, how to be healthy, we, the people, we can do it. So, in some ways, like, having grown up in this Google environment and knowing, you know, the social networking world that was coming up, it was piecing those things together that was, like, combine the technology and science with the platform that is really emerging. I've noticed that many of the most transformative companies come because the founder sees, like, an intersection of two pretty different but really important trends a few years before everybody else does. And this is clearly one of those. It's like, the fact that crowdsourcing works is still amazing to me. Just... Totally. Well, it's also, I think, when a founder really wants something personally. Like for me, part of it... Did you really want this person? Oh, yeah. To me, it was like, like, the whole beauty for me of genes, of genetics is, like, you have gene by environment. And I always love, like, people debating, but is it your genes or is it your environment? I'm like, no. The whole beauty of it is that it's both. So, like, you might be genetically high risk for diabetes, but, like, there's your environment. You can do things about it. So, what can I do? So, very few, you know, genetic ailments are 100% deterministic, meaning 100% likelihood that you're going to get it. So, that means there's an environmental component where you can potentially do something. So, let's go figure out what you can do and then tell people. What was the reaction when you first announced that you were going to do this? Like, what was... I mean, I read the news. What was it like inside the building? I think there was... You know, it's always, like, startups are so fun, you know, because you've got a bunch of people who are really passionate. And I think people were excited and people knew that there would be controversy. And in some ways, I think we attract people who have all experienced the healthcare system in their own way and realize it has its limitations. And so, there's people who are excited about 23andMe because of the mission, and they're looking to contribute in some way to helping change the system. So, there was enthusiasm. And we had, like, videos. Like, we were... You know, we were also... We were super excited, like, to launch, and we thought there was going to be, like, this big coming, like, everyone... And we had tons. Like, we had spit parties. We had the cover of the style section. I went to one. I know. We had the cover of the style section. We had the spit party in the building. But I have to say, like, we sold a lot the first day. And then it was slow. That happens. And we were probably selling 20 to, you know, 15 to 25 kits a day, which is not a lot. How do you... Well, I guess two questions. One, how did you eventually fix that? And how did you... How do you, as a leader, keep momentum in the building when, you know, you have this great launch, everyone... The first day is always awesome. And then you have what we call the trough of sorrow. Yeah. So you get pretty demotivated. I think the trough... So that's actually a good... There's always a trough of sorrow. And I think it's important to not let people be totally, you know, to not, like, not be hoping for immediate success and then to be overly distracted by the trough of sorrow. And I think that that actually happens not just in launches, but every time you come up with a product, you have no idea how well it's gonna go. Like, I remember when my sister first launched AdSense. And she's like, I don't know, you know, we'll see how it goes. Like, it's kind of, you know, it's an experiment. We have no idea. And then clearly it went on. But part of it is because, like, you work hard at it. And I feel like for us in that trough of sorrow, like, we recognize, like, more we focus on the long term. Like, what do we need to do to get to this point? And I think as a leader, for me, one of the most important things is not to wallow on today, but to wallow on, like, okay, in two years, this is what it's gonna look like. And these are the steps I need to do to get there. People love a vision and people love a plan. You just need to outline. Like, this is where we're going. So, when we saw that sales were slow, we're like, people don't understand genetics. Some basic market research could have told us that. But, like, people don't know why they want their genetics. And then it was like, okay, great, now we actually need to, like, educate the population about why, like, why would you want your genetic information? And how did you do that? So, I started changing my talks. Like, I would speak a ton. In the early days, like, you gave me a conference invite and I took it. I remember that. I remember that for myself. Yeah, exactly. Well, like, any talk, part of it is, like, it's constant feedback. So, again, for the people who want to be entrepreneurs, like, you just, like, you're constantly learning, constantly getting the feedback. So, I would change my talks. I never gave the same talk twice. Like, when I look at my inventory of all my talks, it's like, there's like 500 of them because each one was slightly different. So, I remember specifically getting the feedback. People question, what, is there a value proposition in what you're doing? And I was like, great, I can answer that question. Over 50% of my customers get a medically meaningful result. And then I started, like, I started shifting the conversation. So, part of it was, like, getting, like, real-time feedback. And part of it was helping us, like, define what is it that we have to do to show the value. And it was clear people need to understand genetics. They didn't understand the basics. They need to know what is the medical utility of this. And then, also, people need to know that they're not the only one. Like, that's not weird. Like, oh, this is, like, weird. I did it. We need to drive social, like, acceptance. And you know, and part of it also was medical acceptance. So, we did a ton. It's one thing I always advise science companies is you can't speak, like, I can't just tell you, like, oh, we're great. We have great science. Like, no one, like, no one believes that. So, what you need to do is you need to publish. Like, you put, like, I never even argue with scientists. I just hand over my publications, like, here you go. Because that's the, yeah, it's, like, you speak with your data. So, like, I can make all kinds of claims, but, like, here's my data to actually support it. Can you talk about the best decisions you made in the early days? People always ask about the worst, which we can talk about if you want. But I'm curious if you look back, things like that, where you learn, like, I need to interact with the scientific community in this way. Are there a few decisions you made that, looking back, have been critical to success? I think my two, the first two hires, the two founding scientists were just, like, Brian and Serge were amazing. And so, in some ways, like, hiring the right, for me, like, it was such a critical part of the company. It was a scientific integrity of what we were going to do, and it set a bar of the talent that we were going to hire going forward. So, I think in some ways, like, having the right people. We've noticed that it is almost impossible to, you can make a lot of mistakes as a company, but if you screw up the first five, seven hires, it's almost impossible to get through that. Yes. When I look at the first fifteen people, there's a good, there's, like, a number of them are still here, and, you know, the others who have left, we're still very close to. How did you find those first two scientists? We found them through a friend of a friend of a friend, who, and they had a similar idea, and so it was a good, it worked as a partnership. But it's hard. I mean, I would say hiring is one of the hardest things, and I think one of the things that we've tried really hard here in the company is we, there's a lot of smart people who have humility, and there's a lot of smart people who, like, want to tell you how smart they are, and we have opted for the humility. And I think it's really important to have people who are constantly open to feedback and constantly open to, you know, constructive criticism and learning about other areas, and I think that's actually one of the things that did make us successful, or, you know, allow us to grow and attract other people, because it's a group of people who are really eager to learn from others and to keep learning. I've noticed in my own, looking back on my own career, that the big hiring mistakes that I've made are people who are really smart, but just awful to work with, because they want to tell you how smart they are. And the framework that I finally figured out is it's, you have to look at the net, the net output that a person has on the organization as a whole. Correct. And even if they do a lot themselves, if they make everybody else miserable. I think it's one of the things, hiring is always really hard, and I think especially in leadership roles, if you have the wrong person, like I just recently watched one of the old documentaries about Steve Jobs and Bill Gates, and Jobs talking about, you know, how disastrous it was when Scully came. Like, I'd kind of forgotten about some of these stories, and I realized, I was like, yeah, if you hire the wrong senior leadership... And you don't fix it very quickly, it can sink you. It can sink you. Yeah. What's it like being in a regulated industry? I think one thing that a lot of people say when they think about, they want to do this really ambitious startup, like genetic testing, but they are afraid because it's regulated. So I think regulation, in some ways, there's pros and cons. In some ways, when you're regulated, it means that there's rules. There's guidelines, and you can figure out exactly what that means. So in some ways, there's more of a path about actually how you have to execute. It definitely also means that it's more expensive. There's rules, and you don't always agree with all those rules. And when we went from an unregulated company to a regulated company, there was definitely a pretty major transition for us because we were used to, you hire smart people, what do smart people like to do? They like to question, and they like to argue. And so we would question all the time, well, why do you need that test, or why do you need this study? Why do you need that number of samples? And so we would question all the time. And one of the things, I think, in a regulated environment, it's like the DMV. There's rules, and you follow. There's a level of obedience. So I'd like to encourage people, it's not so overwhelming to be regulated. That said, it requires a lot of communication. And in some ways, it requires a communication style that's not prevalent in Silicon Valley. Right. Yes, that is hard. I think that there's a lot. There is an impedance mismatch there. And I think we always said, we thought we were communicating. I look at some of my old communication, and I'm like, oh, wow, that's embarrassing now. The way we thought we were communicating appropriately and how it really wasn't. So there's a style. There's a style, and there's a form, and there's ways. Actually, there's a path, and there's a rule. It's not terribly clear. I think the regulatory world can do a better job of helping outline. And one thing I do appreciate from now having been regulated for a number of years is that there is a bigger picture that they see. So people who work at the FDA or people who work in government, it's a public servant job. They care. They care about public safety. Like at the FDA, they care about public safety. There are so many companies. We can all see them. There are so many companies trying to dupe the consumer. And their job, they are there to keep us safe. So I have a lot of respect for what they do. And the onus is on us as this startup and the new company. All these people wanting to do things in a new way. The onus is on us a little bit to explain how we're doing it, how that works. And the way they speak, just like I mentioned about scientists, is they speak in data. You can't just say, oh, no, no, no. Trust me. I'm the good guy. You have to show with data. And you have to show with data in lots of ways. So in that capacity, I don't really mind because they do know. They know a bigger picture story. Some of the people we worked with there have been there for 20 years and were amazing. And they have a depth, a breadth of knowledge that I'm never going to have. And so learning, there's input to genuinely take. As you look back from the day you signed, your vision on the day you signed the incorporation paperwork to now, how much has this all played out like you thought it would? Oh, it was remarkable. So I have this picture of the day we signed. And I always look at it, and I'm like, one, I really dressed in a very different way than I do today. But two, our Series A documents and our OKRs from 2007 are remarkably similar to what they are today. That's always. So I think we're unusual. So one of our investors, he has said, he's like, what's amazing? He's like, I look back on everything. He's like, you're a broken record. In some ways, that's why it's also so easy to do speaking engagements because I've said the same thing now for a decade. We have a mission. We have a drive. I know where we're going. And we've been continuously executing on it. The best companies are remarkably steadfast in that. I think it's hard to do because entrepreneurs, by definition, like to start doing new things. Right. So I think one of the hardest things for entrepreneurs, and again, we're going back to the era of, I forgot what you called it, the era of sorrow. The trough of sorrow. I think it's important to stick with it. One of the most important things I think I've learned doing this now is the importance of persistence. You have to stick with it. And when you stick with it, you really see a benefit. And there's things that I see, now that I've done it for over a decade, and one of our missions is to tell people, anyone can be a scientist. Anyone, any age level, it's part of the whole reason we're directing students. I believe anyone, you can be eighth grade level, and you have the ability. I love it now when kids come to me, and they're like, oh, I saw you speak. And because of you, I really, I was like, yeah. My parents didn't know anything, and I didn't really have that degree. I'm now in a PhD program at MIT. I get amazing stories. And you never, in some ways, it takes a long time to see the consequences of your actions. So it's one of things I emphasize to people. If you really care about something, if you're really passionate, it takes a decade to really see the impact. Yeah, I mean, it's like compound growth. It's always misunderstood. It always takes longer. And then the magnitude and the out years is always bigger than you think. And I think what happens is that people hear the WhatsApp story. They hear other stories. And I say, the real story is the companies that continue to persist, even if there's challenges. And everyone usually, the WhatsApps are the rare. But you can be super consistent. And that's one thing. When I see the press about us now, it's overwhelming. We just persisted. Yeah, that's it. We don't go away. That is the secret to overnight success is 10 years of persistence. Yes, the overnight success is that 10 years of persistence. So you've done all these remarkable things as a company. And the one that I think is most remarkable or sort of most important to the future of the world is that I think in the last 11 years, genetic testing, because of you, has gone from something that people are afraid of to something that is now accepted as a really important part of putting people in charge of their lives and their health. But I'd love to hear what the next 11 years look like. If we had this conversation in 2029, what we would be talking about in your proudest accomplishments then. So I said my original mission, if you think back to my Wall Street days, was I think the system is broken. How am I going to be healthy? So success for me is I would like to be healthy at 100. So I now know I have my genetic information. I can learn about things. And I have set up this research machine where I can collect data from all my customers. We can make discoveries. We give those discoveries back to our customers. I have this amazing machine for discovery. Now I want to execute on the vision of I would like to be healthy at 100. So success for me is how do I now? I just empowered you. I have 5 million people empowered to learn about themselves. And they could keep coming back. We collectively as a 5 million person community and growing. Is that the biggest genetic data set in the world? By far, yeah. That's awesome. With health information. Yeah, yeah, yeah. But to me, that's where there's a power in what we can do now to make discoveries about prevention. So we have the drug discovery arm. To me, I look at it as we have two aspects. You're healthy today. You want to keep staying healthy. You have a condition that you just have this. So we want to have drug discovery for that. Now we'd like to keep you healthy. And I think about what are the partnerships I can do? What's the community I can form to actually help you make behavior changes? So one thing I see all the time when I meet people, again, all economic levels, all socioeconomic groups, people want to be healthier. They don't necessarily know how. And I see this, people don't necessarily know, oh, were the Doritos really bad? Is soda really bad? It's remarkable how much there's a disconnect between, you hear things, but you don't really know. What are the ways that we're going to be able to help keep people healthier? Have you discovered anything that is, the whole point of this is it's personalized, but any general trends that you've discovered that apply to a lot of people they might not already be aware of? I think most people know they probably shouldn't drink so much soda. No, but there's probably people, some people who could absorb more sugar than others. I think those are the types of things. We're all pretty different. The beauty of humanity is that you're meant to survive. You can look at it from the perception of viruses. You have the 1918 flu, lots of people died. Some people survived. Some people are immune. The same thing with foods. Some people just can eat a lot of sugar. Some people can't. And that's why we are still around on the planet today. So I think the main thing that I would say, take away, is that there's a lot of variability. 100%, you shouldn't smoke. You should exercise more. You should eat better. But there's some people who can smoke and never get cancer. There's some people who can eat a lot and they never get overweight. Some people don't, exercise doesn't really matter. How far away are we from someone being able to spit in a tube and you tell them, here's what you need to do to have a good shot of living to 100? So that's one of the things that's most exciting, is what we can do by having a community of people who are all engaged, we're starting to do what we call these intervention studies. So we did our first one on weight loss. So we had 70,000 people doing a six-arm weight loss study. So that's the first time we're doing it in that kind of scale, specifically to see, based on your DNA, are there differences in weight loss? I'm personally obviously motivated in the Parkinson's space of people who are genetically high risk. Are there behaviors that can lower your risk? And how much then can you lower your risk? So we're starting to do those types of studies specifically because that's what our customers want. Like our customers specifically want to know exactly what you just asked. Tell me what to do. So when you say, again, success for me is like, at the end of this decade, I will tell you what to do. At the end of, like by 2020? Well, I look at it as like, I look at it as like, well, no, I look at, yeah, the next 10 years of the company. So I'm already 10, I'm 12 years in. So give me another eight years. That's pretty exciting. I'm on it. I'm on it, Sam. I will follow the instructions to the letter. Thank you very much for taking the time. Oh, you're welcome. Anytime. It's really fun. Super fun."
  },
  {
    "name_video": "On raising Seed and Series A as a woman founder",
    "description_video": "Two women founders talk about their fundraising histories and what they've learned about the process.",
    "related_categories": [
      "Founder Stories",
      "Women Founders"
    ],
    "page_url": "/library/5G-on-raising-seed-and-series-a-as-a-woman-founder",
    "youtube_url": "https://youtube.com/watch?v=TogTe74Zg7w",
    "mp3_file": "downloaded/On_raising_Seed_and_Series_A_as_a_woman_founder.mp3",
    "mp3_content": "All right, so today I have Iba Massoud from Tara and Amber Atherton from Zyper. How's it going? Hello. Good. So today we're going to talk about fundraising. But before that, let's talk about your companies. So Iba, what do you do? So Craig, it's great to be here. I'm Iba Massoud. I'm the co-founder and CEO of Tara AI. So we're building an end-to-end solution for product management. So we help product managers, engineering managers, spec out their products, gain insight into their development life cycle, and essentially monitor progress within software development. Hello. So great to be here. Zyper helps brands connect to their superfans to build community. So we work with a lot of big Fortune 500s like a Kellogg's or a Nike to help them really identify who their top 1% of fans are, and then bring them into a space to co-create product or to become brand ambassadors. Okay. And so both of you this year raised your series A, but I think it'd be interesting to start from the beginning. So could you tell me your story of... Did either of you raise pre-YC? Yes, I did. Okay. So yeah, this will be good. So one and one. Okay. So how did you do it? Okay. So I was 2017. I was in London, started a company in 2017. And I raised 1.2 seed in London from a VC in London, and a lot of angels involved in that, great angels involved in that round too. And then I applied to YC and got in then. Okay. And then you did YC. Yeah. And you just applied to YC, but you applied a couple of times, right? Yeah, I did. So I applied twice. And it was with a... At the time, it was a different idea, different company, different even market segment, we were focusing on the Middle East. Okay. So it was basically like a careers platform for fresh grads. And so entirely different company. Okay. And what did you get in with? We got in with a careers platform for grads in the US. So that was in 2015 when we first got in to YC. And post-YC for that, we raised roughly around 200K or so. So it was... For that product specifically? Yes, for that product specifically. And it was very difficult. Like the first 100K, I remember it was a very difficult process to raise. Pre-YC, we had just gotten about 10K in a grant from MIT because we were doing research into GitHub repos. So we were looking into like programmers and their work on GitHub and just kind of analyzing the commits and how we could find patterns essentially. And also try to identify the best programmers out there based on their work in Git. And so that early research actually formed the thesis and the infrastructure for Tara, as it stands today. Oh, interesting. Which we... So Tara, we officially launched in like... And not even like the website or the product, but just launched with the idea in 2017. Okay. And how did the pivot go with your investors? How did you go about communicating that? So our investors were very supportive. So when they heard about the market that we were trying to tackle and the product that we were building, they were immediately like, Oh, here's more money. So what happened was about a fourth of our investors doubled down. And so from that 200K, when we pivoted, we raised 2.8 million. And so we had a 3 million, called it a 3 million seed. Wow. Okay. So what would you attribute that up round to? I mean, it was just the opportunity, the market segment, the early, early team that we had assembled. And then also the early traction that we were seeing from the early ML models that we had applied, as well as early customer traction. So the seed was in 2018, the 3 million seed. That's when we announced it. But it had really been a work in progress for a while before that. So you lumped all that money together and called it 3 million seed? Yeah, we did. Okay. Gotcha. So now having raised both of you a Series A, can you walk me through the differences in the process related to it and how you communicated to your investors, how long it took, all that stuff? Yeah. So we did YC Winter 18 and 4Runner Ventures led our seed pre-demo day. And that was exciting. So we raised 4 million then. And we were just charging forward with the product, like timing, first market. And we'd started having conversations at the end of last year around just raising an A. Like it was more rapid than I thought it was going to be. And then I had a conversation with Aaron about the Series A batch and thought, this is probably a good idea. Aaron is a good, good guider. So I should do that. So then we joined the Series A batch in January of this year. And that process was about, I think it was like two months that we were in that batch. Um, so yeah, two month process, just like heads down, super focused on building out our pipeline and just aiming to close the round in a shorter time as possible. But walk me through the two months because, you know, a lot of people aren't fortunate enough to be a part of the Series A program. Yeah. Yeah. I can't believe we got in. No, joking. Um, so... We even get into YC, so yeah. Yes, yeah. What was the process like? I mean, it was informal, but intense. So as with YC, uh, or anybody who's going through the process of like getting, building something people want and getting to that product market that you have daily insane highs and lows. And I guess what was great was just going into it with a structure of, okay, let's fill out this Excel sheet. Let's know every single fund that we want to speak to. Let's work the process and get the timing right. I think that was super helpful in, in kind of catalyzing how quickly we could close something. So it was, um, you know, the standard process of fundraising, of targeting the people that, you know, you want to work with that support like your vision, and then going through that cycle of having conversations, second conversations. I think something we did that was really good, though, was writing that investment memo. Um, so what we did was, uh, kind of do the VC's jobs for them, uh, and write, you know, a memo as to, to why you should invest in us. And that, uh, sort of went out, you know, with the deck after the first meeting. So, um, that's a very chaotic answer to your question. Yeah. So what was yours? Like, let's get really specific. Okay. What was my investment memo? Rough, rough terms. Uh, honestly, we looked at a lot of other memos that we could find out there. So like the YouTube memo picked that up and, uh, really kind of spoke to other VCs that I know about, like the, you know, their favorite memos, or like how they think about like putting a memo together. And then use that as a foundation to structure our own memo as to, you know, what is the point of Zyper? What problem are we solving? Obviously, like, how big can it get? And, um, you know, kind of unpacking what the risks might be and why they weren't really risks in our eyes. Okay. And how deep were you going into the financials in the beginning up there? Um, I mean, not massively deep, to be honest, in the memo, we weren't, we were just giving high level, like, this is our revenue so far. And, um, this is the market we're going after and how much we expect to grow, um, in the next kind of 12 months. But obviously we then had a model to back that up that was, uh, significantly more in depth around the financials. Okay. And so would you corroborate that? You see, it's basically the same. Yeah. I mean, I think, uh, for us, uh, and yeah, if you remember Amber, like what happened during that time, it was, so what happened with us was, um, we spent about, uh, two weeks during the, during the program, just really trying to nail the pitch, make sure that we were talking about the product and the solution the right way. Um, you know, just being able to really segment out the story, um, and tell it in a very concise, but in a much more in-depth manner as well. Uh, and so what happened was, um, we spent about two weeks pre, uh, pre, like during the program and then how I found out about the program was I contacted Aaron and I was like, Aaron, our seed investors want to just pull in and do a 5 million Series A. Um, and they're like, you don't have to go out, you don't have to raise and it'll be done. Um, and he's like, uh, think about it. Like, you know, you shouldn't rush into these things and those seed investors can come into your Series A as well. And so what ended up happening was our, uh, total, uh, fundraise process to go from first coffee meeting to term sheet was nine days. Which is insanely amazing. I mean, congratulations on that. Well, the thing is that our seed process was so incredibly painful that this was, um, it was, it was obviously very surprising. Um, but, uh, and you know, our closing process took longer that that took about 60 days or so in terms of like getting the legal process completed and, and, you know, figuring out like, um, uh, who we're going to bring on board for that final 1 million, um, in the overall round. But, um, I think, you know, one of the things that I will say is it, what we really tried to do was run a thoughtful process and really focus on the partner and, um, people versus the fund. And so we were, I totally agree with that, by the way, like it's, it's really about doing your research and finding the partners who've, you know, led rounds and other companies that you admire or that, you know, have the right profile for your company. Yeah. So what happened with us was we were under quite a lot of pressure, um, during that time because we had offers on the table and there were people just kind of, you know, mining and dining us and really trying to get us to accept, uh, their offer. And, uh, and it got to a point where, you know, um, it was, uh, like people were literally calling up, uh, folks in, in our ops team to like book meetings, uh, on, on my calendar and it, it got fairly chaotic. Um, I would say during, during that process of nine days, but there were, you know, my, my co-founder Saeed, um, one of the things like he's, um, I think he's someone who's really the yin to my yang. And for the most part, he was the one who was like, you know, let's really take our time and think through who do we want to work with? Um, that are, you know, essentially just, uh, good people in terms of individuals, um, have a strong understanding of our market and of our customer, um, can speak with, can be thoughtful because the product is fairly technical and we're selling to a technical audience as well. Um, and so having the ability to actually understand and, and in, you know, from the engineer's point of view, that was something that we were really looking for. And, um, and I think what ended up happening in our case was we decided to work with a boutique fund. Uh, so aspect ventures, we're now a crew capital. Um, and, and Teresa Goh, Lauren Clodney, um, Asad, Asad Khaliq, um, like for us, it was really about the team and very specifically the board member that would be coming on, on, onto the team. I also think you probably knew early on, like in other conversations you were having, like whether that person or that partner really understood what you were doing. And I think looking back with hindsight, I wish I maybe kind of ended some of those conversations earlier, just with people that I was really trying to convince that this is why Zyper is amazing. And this is why it's great when they were so not experts in this space. And so you were just attracted to their brand or something like that? Yeah, I was attracted to their brand name. And you know, it's, it's always very exciting when a great brand name like reaches out to you and is, is, especially if they're being aggressive about wanting to get a meeting and then you take the meeting and then you realize, actually, you don't really understand this, this space. And, um, I, I wish I'd, I'd kind of been more, uh, you know, assertive with ending those conversations sooner and really like doubling down on like, do these people actually have my values? You know what? There's always somebody out there. And I think this is, there was, I mean, Ebba's process is amazing. Ours personally took about 60 days to go through. And I was flying also back to London to meet other funds there. And we actually ended up raising from a London fund. Yeah. So, um, we're meeting people out here and so it was a, yeah. And then it was holidays and it just always drags on longer than, well, for us than you think. So it was that 60 day process and then longer to get the legals. But, um, I, I'm glad that we went through that because we did find a great partner who, and you, when you know that, you know, they immediately get the space and that's just awesome. God, I have to say they, uh, so, um, I'll just give you one example, right? We were at the, um, so we did the, we did three, uh, full partner meetings. So that's when, um, all the partners at a fund ask you to come in. And, um, the partner that's sponsoring the deal or sponsoring the, uh, you as, as a founder, um, is essentially the champion. And, um, and they're really, they want you to come in and really present the story, the solution and, uh, and the market and, you know, why this is going to be the next big thing to the full partnership. Uh, and, and, you know, so we had done three of those meetings and, and so we had offers on the table and what happened with, with Aspect was, um, they approached it from a very personal stance, which was to really get to know us as founders and really try to understand what makes us tick. And then also where this, you know, where this company could go. And so even during those nine days, I had the opportunity to speak with founders of portfolio companies at those, uh, at those funds. Um, but the other thing, I just remember this when we were, um, at one of the final meetings and they found, they found out that, um, I, I love bubble tea. And so they had. I remember this. Yeah. They sent you all this bubble tea. Yeah. They had, they had like an array of, um, of, of Boba just on the table. Um, and as soon as say, then I walked into the, the, the final meeting where they had the, they had the term sheet. And I mean, but yeah, that's the fun. That's the funny. Um, so included in those nine days, are you meeting them the first time? Because oftentimes people start months and months and months before like grabbing a coffee with someone. Yeah. First time. First time. So, um, so from the first, uh, in, in terms of for, um, those few funds very specifically that got to the final part of the process, we met them for the first. So, I mean, you know, I don't know when you can start the timer, but it's really like the day that we met them from that date to, to term sheet closing. And by the way, that's a term sheet is not when your round closes. A term sheet is actually a lot of founders don't realize is that a term sheet can be considered an LOI. It's really a letter of intent. It's like we're in. Exactly. It's, it's kind of like that first part of the process. Um, you can't even consider it an offer in some cases. So people renege on term sheets all the time. And, and so when we got the term sheet, I wasn't celebrating whatsoever. Um, so I, like, I remember we got our first one and then cash and bank. Exactly. So getting the term sheet was just the first part of the process where, um, and, you know, for us, like, we're like, okay, we have a few offers on the table. Um, and actually we ended up taking, um, a lower offer, um, only because one of the things I've always tell founders. And I just think, I personally believe that you shouldn't maximize for valuation because the thing is that if you maximize for valuation, um, then, uh, you know, incentives aren't necessarily aligned. And so what you really want to maximize for is, are we getting to work with the right people? Um, because. And also it's a long-term partnership. Exactly. Like it really isn't just a quick thing. You are in it together. Exactly. So. And, um, and, you know, one of, um, one of the investors, um, that we had literally put a blank term sheet. So the idea was that we would put in the valuation. Um, and I mean, it's, it's, it's a tactic, right. And so, um, and so, you know, it's, uh, like I immediately, I saw that and was like, okay, that's a tactic. Like, you know, you don't want to play these games. Like at the end of the day, you're building a long, like exactly long-term relationship. Yeah. And, and so, you know, for us, like we're, we're just like, okay, we're just, um, you know, we're just, what we want to do is just work with human beings. Yeah. And, um, and so. That's what I loved about like TALIS who led our round. It was from the get go. I mean, I was doing conversations with them at like midnight hour here, cause they were based in London, but you know, there you go, you persevere, you get that term sheet and the money. Um, and you do realize like when you do like click with someone and they have that great personality and that they are, they really aren't pushing like weird games with you on a weird tactics. Um, but I also, I think this goes back to the founder pressure to build momentum and urgency in your process. How do you do that? So many founders ask me that as well as like, how do I create this optics, this sense of urgency and it's dangerous. Uh, you know, because you can be tempted to say, oh, well we have this other term sheet. We have this other offer, blah, blah, blah. Uh, just don't ever do that because it's so small as a community and just be honest. Exactly. I can't, I can't agree more on that. Yeah. And I think one of the things that happens is, um. you know, founders tend to, exactly like you said, right? Like they have a lot of pressure and one of the things people try to do is they try to be, you know, slick about it when you don't need to. Like, at the end of the day, you're, whether your round takes nine days or nine months, it's really about just finding the right person and the right partner. So that's what I wanna jump in on. So, I mean, it's not that different from like just interviewing someone to work at your company, right? You kind of need a little bit of a culture fit. So what are the questions you're asking? What are the things you're looking for? Whether it's like body language or vibe or whatever it might be, to signal to you that like, okay, this is working. Like, I think I wanna be, work with them. Yeah, I mean, I think for us, it was really just how they handled some of the early customer calls. So, you know, like were they even finding out things that we didn't know? Like, were they so insightful in their question and answer process that they were relaying back information to us that could potentially help in growing, you know, growing the team size at that company in terms of platform usage. And so there was, you know, there was that piece. And then there was also, what I was looking for in particular was, do they really understand how we're trying to build a data layer? So one of the things with Tara is that we integrate with Jira, with GitHub. And so the idea is to go from spec to issue. So your issue tracking software, which resides in Jira, and then also go all the way to commit. So where your version control and source control in terms of the actual code commits. And one of the things we were really looking for was do they actually understand how important integrations are going to be in our play? And also the value that we're providing. And one of the other pieces was, everybody was saying this was category creation, but we really wanted to work with someone that had done category creation before in particular and understood what it took to march forward and specifically really try to own the category from the get-go. So there were certain things that we were looking for. And I think, you know, even if I look at it in hindsight, I think we were able to run a thoughtful process in those nine days. What I found really fascinating was post-term sheet, as you go through the closing process and the level of documentation in your data room and what you need to have prepared and ready. And at that stage, it's really important to work with a good law firm. So one of the things that, I mean, I honestly discounted was I was like, okay, you know, I think the most important thing is to find the right partner and then the legal stuff, you know, it's basically something that a good reputable law firm will be able to figure out. Turns out the amount of follow-up that they required, that the legal firm required after, and I mean, it was just, it was really like, we didn't celebrate until the cash was in the bank. Yeah. Which was a good 60 days after signing the term sheet. I think also some good advice we got was negotiate a cap with your law firm to do the legals. Because it will go over and it will end up being 30 days or maybe even 60 days. So I think that was a good bit of advice. I think some of the questions that I asked the fund in that process, and it's really important that you do ask questions back because you are going into relationships. So you don't just want to not ask anything about who they are and why they care. Some early indicators, same as Iba, is like, okay, how do they handle the customer calls? And how are they coming up with feature suggestions for the product? Like, are they so, you can tell early on if they're obsessed with the products and what you're building because they will give you future suggestions. And I would then follow up with the customer calls and say, how did it go? Like, what did they think? And so often there would be this kind of joyous enthusiasm, like, oh, they were so excited about the space. So I think that's a very early indicator. Like, do they really care about the product? And ask questions back. Like, what do you understand about it? What do you think we should be building in it? Because then they're building a vested interest in the company from a very early stage, which I think can help push the process along quicker. So definitely asking key questions like that. And related to that, what about the people that you kind of should have said no to and kept taking meetings with? Like, what were the signals you saw there? You're like, they're probably gonna say no anyway. I'm wasting my time. Or would you have still taken those meetings and gone all the way through with it? It's tricky. You don't know, I think, a lot of the time where something is gonna lead. And I think that is the classic, like the vagueness of VC. This is sort of an unwillingness to say yes or no. And just you kind of can get lost in that like gray area for a while. And you were kind of hoping that something might happen. And I actually, that's probably a telling point is that funds can operate quickly. Like you can move fast with paperwork. Like it is a hot deal. It's very difficult to artificially create a hot deal. Like if you are a hot deal and you've got a great product, you've got great revenue and product market fit at this stage, funds will move quickly and they can give you a term sheet. However, I do think that one question I asked early on was what is your process? Like, tell me, like, how does this work for you? Because whilst they can move fast, they still, you know, they have to present to the partner meeting and being mindful that they also almost are entrepreneurs themselves. Like they have to validate it to their LPs and they have to get buy-in. So working together on how to move that forward and really understanding from their perspective what it's gonna take to get this signed off, I think was helpful for me. Yeah, and I think just to kind of, if we look at it as a process and we want to present an overview, the first meeting is usually the single partner meeting, which is the coffee meeting. And at that stage, and for some founders, it may happen with an associate or a senior associate or a principal. What you want to do is make sure that you're meeting with an investing partner. And so they would usually have general partner in their job title. Yes. What do you think about this whole question that gets asked so many times about whether you should take a meeting with, you know, a principal or associate? Because I think it's important because they can be great advocates for you. Yes, and so I don't have a black and white answer to that because the thing is that at Aspect, we met with a senior associate and that's how the, and I mean, it was still a short process in terms of like getting the deal moved forward. So I think the most important thing is to meet with senior associates that have influence. And how you can figure that out is really just go onto their LinkedIn and see how long have they been at the firm. Are they someone who's really an analyst, but has the associate title because sometimes you can have inflated titles at VC firms. And so if they've been there for a few years and even better, they're sitting on a board, like let's say they're a board observer, then you know that this is someone who has influence at the firm. And so that was just my very quick vet to, you know, in terms of deciding. Yeah. I mean, for us, it was just such a short process, but that would be the advice I would give. Now, if you look at the actual process, so the first piece is the coffee meeting, right? And that's when you meet with the, ideally the GP. And sometimes it's a senior associate and you get pushed forward to the GP. If the senior associate is serious enough, they will bring the GP into that coffee meeting. In our case, what happened was some of our early, from those three funds, one of them, in the first meeting itself, pretty much they had like four people there and it ended up being a lunch meeting. So it can be a coffee meeting or a lunch meeting in terms of that first meeting. And then if that goes well enough, they'll pull you into a Monday or Tuesday full partner meeting. And so let's say if you have lunch or coffee on a Wednesday or a Thursday, by Monday or Tuesday, you could be presenting to the full partnership. So what happened in our case was we had back-to-back full partner meetings. It was on Monday and Tuesday. And so that weekend was when we spent really prepping the pitch. And if the GP really wants, you know, you to present your best foot forward in front of the full partner meeting, they will work through that weekend or, you know, whatever that date period is to make sure that your presentation is as good as it can be. I think it's so important just to focus on that because as you're left as an entrepreneur in this gray area, like not getting really direct clear signals as to whether a fund wants to do this or not, it's being mindful that yes, a fund, a partner will work on the Sunday or the Saturday to like move this deal forward and they will do that. And they'll do the customer calls, they'll do the reference calls as well. They'll, you know, they'll put the power of the partnership behind this so that they're able to do adequate and enough research on the company. And, you know, I think for us, the other piece was YC and the Series A program really, you know, honed in on the fact that you should have your data rooms ready and prepped. So we did, and I think that was also what set us as Series A companies apart from even other people that we're raising was we really had our documentation in order. That was, thank you so much, Aaron Harris. We definitely got the data room together and it was very organized. Like week one, that was our goal. I mean, it still took us 60 days to close even with the organized data room, so. But good point. Also just wanna say on the like transparency, like being, telling the funds that you're speaking to as you're managing this pipeline and you're having multiple conversations, it is really difficult to juggle all of these things and kind of calibrate at what speed different people are moving at. So something we would say a lot is just, okay, we just wanna be mindful about other people who are in the process. Like you really, you want a yes or a no. And I think it's fine to push for that. Like you need to get an answer. Like, do you wanna do this or not? And if you have multiple people saying yes, then you're in the position of saying, okay, let me decide and what my values are and how I wanna move this forward in this long-term partnership. But I think be assertive with asking for a yes or a no. Right. Yeah, no, well, they're just trying to preserve optionality and like you're trying to get some clarity here. And another signal, I think, if we can boil it down to signals is that the fund will work to like take like four or five hours of your day. Like they will literally, so in those nine days, I'd be up by 4.15 a.m. I'd start, yeah, like I would, cause like meetings sometimes would be in SF or they'd be in Menlo Park. And during, so the two weeks prior during Series A program, and then for those nine days, I was pretty much full-time on fundraising. So- That is so important to note as well, is that being able to be in a mindset where you are locked in on fundraising. And this is what's so great about when you're doing YC, it's like, what's your day-to-day goal? Does it fit your goal? Don't do it. And that is the process that you need to be thinking of when you're fundraising. It's full focus on that as much as you can, because that's how you're gonna get to close in nine days or in our case, 60 days. It's still pretty good. The thing that's not obvious in my experience, interacting with founders, is that it just takes up all the time anyway, cause it's in your head. So all of a sudden, like the coffee meetings, maybe 20 minutes, and say you spend an hour getting there, an hour getting home, whatever, but then you're reading blog posts, you're talking to other founders, you're doing all this other stuff. So that's why you really have to time box it, cause it will just get into everything. Yeah. I will say we were grateful and lucky that even though the process, it was nine days, but we did get to spend approximately, I want to say seven hours, approximately seven hours with each partner. That's great. So, and I think it's interesting, I feel like that's also almost become a gauge for us, even as we go through hiring and recruiting process for candidates, we like to spend a good seven to eight hours. I feel like it's- Yeah, I think that's a good gauge. Great. I will say that we actually had conversations move pretty quickly to WhatsApp, like to chat. So I was already building like a lot of rapport, like back and forth on WhatsApp and like, you know, keeping it top of mind and just, you know, that helped definitely with the speed. And texting Aaron at like 11.30 PM. Oh, yes. Yes. Aaron. It's so, you know, a friend of mine's going, rising his series A at the moment, and it's just so useful to have other founders around you who you can just rift with, because there's this whole new Lexus that you need to learn of how you are communicating, like what the process is, like, you know, what the optics are, everything, and just being able to have a sounding board. Like I definitely text Ibo like multiple times being like, oh my God, how do I do this? And you need to have that space to just have a sounding board to talk things through. So I don't have a co-founder, so I think, you know, thanks for responding to my text. So one thing we wanted to talk about was what this was like being a female founder. So obviously, you've only done this one time, you haven't been a male in another life and reincarnated, but you know other founders who have raised series A. So this is kind of interesting to talk about. In your experience, how do you feel like it differed for you personally? Yeah, I think from my personal experience, I mean, we were so lucky to have four on a female founded VC to lead our seat. So I had the experience of what it was like to sit with partners, like female partners, and it'd be a very comfortable kind of open conversation. And I think what I hear from like other female peers and in my own experience is that often you're walking into a boardroom partner meeting where there is not a lot of diverse representation and you therefore feel pressured to take on maybe, you know, more male characteristics, like just being more aggressive or, you know, just. Did you feel pressure to wear a hoodie? Do you know what? Fake deep voice. I just had an outfit that I would wear, like, and I did this in YC as well, because I don't want to think about this. So I would wear, actually I think I might have even worn this, like trouser suit, corporate street wear is my, this little trainer, little trouser suit on. And then I do think it is, you know, that is signaling in a way. So I didn't ever wear the hoodie. So I was like, you know, it's just not my personal brand. I'm not. I did the hoodie during our seed. So post YC, I was just constantly trying to look like a programmer. It's just, yeah, I mean, it's sad, honestly. And- No, but it's also that that is what the valley has been conditioned to see and interact with. And I think that the style of communication that is familiar and has, you know, pervaded the space. Doesn't it feel so good to be able to wear whatever you want? Oh, absolutely. That, I think, is true freedom. Like, you should be able to be yourself. Like, I think that was something that I had to learn and I had to grow up really to like, to be able to just be myself. Like, I think, you know, you face so much pressure to act a certain way, to be a certain way, to look a certain way. And I think, you know, but then one of the things, one of the things I've actually been doing is listening to analyst calls for public companies. Oh, I love listening to earnings calls. This is my new favorite thing other than podcasts is just straight up earnings calls. Yeah, and especially if you listen to earnings calls by like minority CEOs or by female CEOs. And I think, you know, bottom line, like what I've, you know, had to kind of train myself to do is bottom line is that it's really going to be about the traction and the team that you put together to like, to go after a problem. And so, you know, so I think one of the things that I also think, you know, even since we did YC, things have changed since that time. Massively. Drastically, and I think it's, you're seeing, you're definitely like we, at least, I mean, for our series A, we saw more representation in terms of the team structure. Like, so the senior partner, principal and analyst, we definitely saw more representation in the funds that we were talking to. And I think also people are more, I would say, they're more used to like listening to the fact that founders don't necessarily come from Ivy League backgrounds or are of a certain race. And I think, you know, or understand sports references. So I think for, you know, for me, I was like, okay, I don't need to learn the lexicon behind American football. Like, you know, I'm someone who understands soccer as it's known here. Yeah, yeah, yeah, yeah. And so I think that was something that, you know, I had to learn. But you had way more to show too. And the confidence behind that. That's what it is, right? Is that you can't, there's nothing to lean on. You can't, I don't think you can use, you know, being female or minority as like a crutch. Like if you have great product and great traction, then you have a hot deal. And like any other kind of justification as to why you're not getting term sheet is you can't really say that. Like you need to have product market fit and a hot deal. And that's in a, you know, my opinion. But I do think it is a full circle. Like there are great organizations, like always like pushing to have more female like partners and also more female LPs. Like it's not just us going out there. It's like, there's not a lot of like female entrepreneurs who are walking into these VC offices. anyway and that is a problem that we need to solve is that we need to bring that education and like positive role models earlier on into the education system. Amber, what do you think of this notion? So I've been hearing from a couple of female founders that one thing that you know that really that's been worrying them is that whenever they get introduced into a VC firm the automatic assumption is that they would want to talk to a female partner and so then they get introduced to the female partner who's actually only been at the firm or fund for in some cases lesser time and and may not have as much as much influence as someone who's a much more senior partner. Have you have you heard of this? Yes, I definitely I experienced this actually personally myself so but I will say that I think that funds are grappling with how to deal with this in you know the most sensitive way. I think the way it needs to happen is that you know founders should be able to talk to the partner at the fund that understands their industry and their business. Definitely. It's that simple. It's you know they shouldn't automatically assume that because you know this person is a female founder or a minority founder that they should talk to the female or the minority partner. It should really just be fundamentally about the business. Expertise in the sector. Exactly. Yes, exactly. But okay so were all of your were they just warm intros for for both of the funds that led your series A? Yes, yes. Okay. I was a quite cold intro. Really? Uh yeah. It was an intro. It was an intro but it wasn't a warm one. So um it took a lot of uh I took a lot of time to get to know them and I think I actually underestimated how awesome they are early on because we had so much interest when we started raising out here like and it was just it was overwhelming and uh I kind of kept it more on the backburner also because we were out here and not in Europe and then uh investing the time to you know get to know them more and more was um uh it was interesting but yeah it was it was more more cold than warm. Okay so so yeah you are in control of that to a certain extent. You're like I'm trying to meet this person who knows them right? You know you would think so but I feel like in some cases um you know with some founders or some situations it might be that oh you know I'm finally getting to meet this firm. Yeah. And so you just kind of take whatever whatever meeting is it comes your way and it may not be that they're the right person. Actually you know what I think I made that mistake. I don't I think I definitely did that. There was there was funds that I was excited about and I didn't really I was just like oh great I'm getting in and as opposed to being like hold on I really need to speak to this person because they understand community and SaaS companies. Uh so yes could have done a better job there but but I do think that um you know there's a great like all race statistic that 2009 410 companies who had female founders got VC funding whereas last 2019 2700 companies got VC funding. So there is a massive like positive increase that we should be talking about that there are more diverse founders and there are more diverse partners and therefore we're getting more funding. So I think in general like we are moving to a much more positive like balanced ecosystem. Yeah absolutely. I mean it's why I love being out here because the default mentality is optimism. Oh 100%. And agency too. Yes and you can meet anyone you know Twitter DM sure. I think I had a couple of partner meetings actually just from a Twitter DM. Yeah I mean if you make great stuff people recognize you. So I think that's such a great point and that really is what it comes back to is like if you make something great, make a great product, have great traction like you're gonna get the meetings and don't go into a fundraising process too early because it will just kill your soul. Just wait until you have really built the great company and you know maybe you even want to be profitable. It's a dirty word I know. Okay we're gonna change the subject now. I do want to talk about kind of the psychology you have to get into to fundraise. Yes. So yeah one thing that we were talking about before the podcast was addressing like how big can it be type questions. So how do you go about getting in the mindset to answer that? I think having an executive coach is something I should have done earlier and you know in YC there's actually a company in our batch Torch who do executive coaching and I got on that and we started focusing my sessions on that. It's just like getting powered up, getting ready and also you probably have these traits innately as a founder anyway if you're going out there and you're pitching your business to customers all day. So it's really like leaning into that and just just having a coach you can help bring that out in you and you know maybe listening to that Goggins book like just getting like that mentality of like winning is great because I think that you know and maybe this is controversial to say but I feel like the appetite for risk for a lot of female founders to really answer that question you know how big can this be is it's more realistic perhaps of like okay well we have product market fit the product's going to change a bit so realistically we're going to IPO here so there's more of a like there's a less aggressive approach I think to the answer of how big this can be then I think I've definitely seen some of my like male peers take where they're like well it's going to be 20 billion dollars next year and I think it's balancing that right like you want to be completely convincing and have of course your own conviction and how big your company is going to be you're not doing this for any other reason so and you're not also a sociopath who's just lying to people and you cannot be that either you know you don't have five term sheets like just be real yeah that's a really bad thing to do and it is it's a it's a balance of yes you're not a sociopath psycho but you also need to just really believe in yourself and that is so authentic when you see that in conversations when people like have true conviction and in that and you need to convince the person sitting on the other side of the table that they are like backing the right horse and you will win it's important so in addition to you know listening to the David Goggins book or whatever what are the things to not do to negative that might negatively affect your personal confidence I think um let's see so one I mean I think we even touched upon some of those things during this conversation which was um you know just be true to yourself you don't have to make it seem like um you know that like like it's a hot deal like I've seen some founders do that um and it's deceptive and the thing is that deception only works to a certain extent um like like you know like you said right it's it's the valley is a small place and so what you want to do is be true to yourself because and be true to the partner you're going to work with because you're you're that person is really becoming a part of your team and a part of your company and and in some cases really I would say even a part of your founding team because if you're under 20 people when you're raising your your series a then this partner is going to become a key part of um of even day-to-day operations and uh and so I think the you know some uh I would say probably some things that founders um negatively optimize for number one would be valuation so I don't recommend optimizing for valuation I think then you have to work up to that valuation and and obviously you know we've seen um this nowadays right the challenges that are happening in the IPO market so I think um you know it's uh it's it's very important to come together and like and really come up with a valuation that is um optimistic but realistically optimistic um and there's a lot of data out there that you can use to make this decision right like it's a 3x multiple from your last round or whatever data points you're going to use and so it's it is a conversation right like you are you know you both have interests but you need to align them and make it a conversation not a kind of aggressive territory marking situation second second thing I would also say is that um investors and partners have been doing this for a long time they understand founder psychology mentality they really understand and know what pressure tactics could and should look like and I think founders really need to like understand and be true to themselves in terms of um building a company is a long-term game at the end of the day and and so what that means is you want to ensure that you're finding the best partner for your company or your business and really take the fund out of the equation um you know we had instances where I remember one of the funds was introducing us to like celebrities uh where it's like oh you know this person sits on this board they're so incredibly influential imagine what they can do for your business you mean literal celebrities or business world like yeah like I mean not like you know not right well I mean just to be clear like that happens too so yeah exactly I mean yeah I think they really you know they read the room so they're like okay that's what these founders would appreciate and so that's that's what happened and and you know I'm just we are I'm so glad we really didn't get pulled into the you know glitz and glam of of the whole thing if we can even call it that but um but I think just being staying true to yourself and um really you know being heads down and I think that's that's what's really key here what do you think is the you know you say look for partners who like share your long-term view it's long-term building a company but what like how are you getting the evidence of that okay so what I did was I asked pointed questions to the founders um and I honestly I'm really grateful that those founders were truthful because I think some portfolio companies yes exactly of their portfolio companies so I specifically asked pointed questions I really tried to get to the bottom of things and and you know what you can do is you can set up a question like in it it's um it's it's fascinating right you can really set up a Q&A process where you're really getting to the to where the rubber meets the road and and so for for me like that's what what I wanted to do and I think um it's it's even made I would probably even say made me a better interviewer yeah even in our recruiting process and our candidate recruiting process um and uh and so that I think and and you can like I got to a point where I could really tell where founders were not being necessarily truthful and we're just kind of you know really trying to get us to say yes to the deal um and so I think that is that's what's really key like do your homework but then come armed with very specific questions and really try to ask about what did that partner do when things went south that's exactly what I'm about to say is that I liked speaking to founders who you know maybe yeah it went south so you back channel exactly so you also need to back channel and talk to founders that they didn't try you too exactly yeah yeah so let's talk about what it's like to now run a series a company so for both of you what has been the biggest shift I will say so we moved our headquarters out here to San Francisco after a series a so you previously we were in London and we had a New York office and then I just decided let's consolidate this like we need to all be under one roof early that's uh we'll get to the distributor team phase a little later um but one thing I started to prioritize was culture really was what are the values that this company is going to stand for and prior to raising the series a I was just heads down on revenue I was like what am I gonna fit revenue we've got to get these numbers and I kind of didn't really put enough time into thinking okay you know what is this culture who are the talent that we're attracting and what are the values that they care about and I think spending the time to really come up with that so I spoke to some of my like early founding team I was like what what are what are the values that we care about in each other you know why is this work so well for the last couple of years and we came up with those things and then um I was a like a tech recruiting day and it made me laugh at how many companies were coming up and having like acronyms for like what their values were it's like our value is a cake community a session and I and it just made me laugh and so I then challenged could we come up with some you know could we make this an acronym and we ended up making it the tricep flex which is like an old school exercise poster and uh it was you know it's kind of eccentric and definitely brings out like attributes in our character and it's really helped with recruiting because it's given us a way to score people who were bringing into the team so I think that something I've focused on since raising is like really spending the time to think about like what is the culture that we're we're building um yeah I think uh for us really post fundraise um one of the things we really uh focused on was people and and that was building the right founding and leadership team at the company so um when we uh did our series a we were about five people full time um at the company um everyone else was part-time and um and and and so now by end of this year we're going to be about 21 people full-time um and and you know so growing 4x I mean we're still pretty small we're still um we're still early stage but that being said growing 4x is um is is very difficult and and what what we did was we really didn't want to compromise on the people that were coming or joining the team because we know that they're going to be leading their own departments over time so one of the things we did um say you know say it was someone who really was like we we absolutely have to make sure that we're bringing on the best people possible so now our founding team consists of early software engineers from nest um google apple atlassian and we've really brought people together that have this common mission common vision where everyone says okay we know um software product management is broken you know the the tooling you use today is fragmented and at any point of time whenever you're going through this development life cycle you really can't understand what is really going on with whether you're starting from the initiative at the vp level all the way down to the issues and then even tickets that are being generated um in your existing project management software so one of the things we really did was we tried to find our tribe and and i think um did you like write down the companies that you wanted to recruit from and interestingly enough um well besides you know just the adjacent adjacent companies uh 80 of the companies that we ended up like in terms of like from the founding team perspective were not the companies that we had written down um and i think it's because you assume a certain um you know like like for example one of the things we knew was um cicd like hiring from cicd tooling would be would be interesting because the messaging is very similar where they're focusing on product delivery because that's what we do what what our product does and then we very quickly found out that um hiring people that have been late stage at these companies is very different to really hiring people that were the first 20 in i totally agree and other founders in our batch who have closed the series a and now building this team it's funny how you know a few of us have made this textbook mistake of maybe bringing in like senior people just too early and everyone makes it exactly everyone makes it it's so funny because you read about it in every single book you're like you know don't bring in executives too early and you know you a lot of the time end up making those mistakes i think the key is to bring in executives that have been early enough so you really so some people say they've been early but then when you again go down the path of questioning and it's like no were you really there when it was a garage or were you really there when um like a post uh post series a and then was even the post series a considered early enough at that time so and why do you think it's important to like get those people who were so early i think it's because they understand the level of hustle that's required very simply yeah that you know there's processes that have not been put into place that they're going to have to come in and put in the processes but then it's also by the way but then we're about to have a pen wall oh that would be fun but you know the the other thing is that it's it's you know it's only very few founders that can also do this only because it means you have to be willing to give up ownership and control which is very hard to do yes actually and and so when you're bringing in people that are much smarter than you in that area or domain and are essentially you know just um really understand that specific uh specific domain you need to be willing to take a step back being like let them own their on their domain let them hire their people let them run their department absolutely and so we're at that stage where we don't i mean everybody's in engineering uh right at this stage we we haven't started uh building on a sales team as of yet um and and so but at least for these first 20 people in we knew that this was this is going to be the founding team and so each of these individuals will have their own departments over time and how do you recruit from people who have offers at big companies? So it's easier said than done. So I remember, so, you know, like when we first brought David Keith on board, who is our lead engineer, he, you know, he was very intensely, like he was someone who felt very strongly about the mission and vision. And then as we started building up the early engineering team, what happened was people had offers from Google, Amazon, PayPal. And in some cases, especially when you're hiring early stage, like people that have been there early stage, what usually ends up happening is then those larger companies just give, you know, another like bonus package of, let's say, another 250 to 400K in stock. And so it's, you really have to find people that believe in the mission and the vision. And you as a founder have to be like able to actually paint that picture. That's what's most important. Yeah. And I think, and they really, like, it needs to fundamentally come from the fact that are you building a category creating product? And is this something, you know, are you really taking on a giant incumbent? And is this also a daily frustration that that person has faced? So one other piece is that we were lucky as well, that in the founding team that we've built, every single person has faced the frustrations that we're trying to solve. So that did make it easier for us. I think also people need to be educated on what it actually means when you're a Series A company, because I think that it possibly can look that you're further along than you are. Yes. Like Series A is still so early. And yeah, you have product market fit, but it's still a little chaotic and scrappy and things are going to change. And product market fit is a step ladder. So you're going to have it for a little bit and then you're going to suddenly lose it and then you have to change your product again. And so that's really how it is. And I think one of the, you know, one of the things it's really important to understand and even as a – so one of the things I had to grapple and come to terms with was, like, I had a lot of growing up to do personally as well, like, post post. And again, I know this is – we're still early stage. But even then as a founder, I think for me, like, board meetings were just this giant thing that, you know, you see and you hear and you talk about, but we had never – I had never conducted a board meeting. So conducting my first board meeting was definitely a task and an experience on its own. And I think, you know, like, I can't wait until YC has, like, a dedicated part of the Series A program where you specifically teach because closing the A is just the first part of the ballgame. And I think even learning how to run and conduct productive board meetings was something I only learned over time. Like, our first one was – We just had our first one and I, you know, I did a bit of prep. I think – I sent out a board memo before, you know. It should have been a week before. It was, like, midnight. I was like, enjoy reading this in two hours. And then, you know, I think it's so helpful for it to be a discussion. And yes, we're giving an update on, you know, performance and where things are going, but it's equally an amazing opportunity for you to leverage the insight of your board members to discuss what you should be focusing on. And, you know, it doesn't – you don't have to be an expert in round one and everybody knows that. So, I actually didn't put a ton of time into learning about this. I was like, you know what? Learn from experience. I'll, like, ask if you found how I should run my board meeting and, like, just dive in. And then I asked for feedback afterwards. I was like, how could I make this better? They're like, maybe you could have sent a board memo, like, a week before. I was like, good point. Two days is usually typical. Two days is a good amount. Yeah, yeah. You don't have to do it a week before. Two days is usually good. So, we do board meetings every eight weeks. And it's – Every eight weeks? Yes, every eight weeks. So, it – Wow. It's definitely, I would say, it's a significant undertaking, but that being said, it enables a forcing function. Oh, it's so good. And also, I think going back to the whole earnings call thing was really – that was actually the only prep that I really focused in on was, okay, how are these people running their earnings calls? Because if I can take learnings from this, then I can probably run a relatively successful first board meeting. Right. But also, I shared my board deck with the team, so they felt buy-in of what we're doing and kind of in the loop just to build that, again, like transparent, candid culture of this is what the feedback was. How did you – how do you follow up with the – So, one of the things that now happens, at least for the last two board meetings that we've had, our leadership team kind of comes together and they have their own domain areas. And so, for example, at our last board meeting, we had our team leads present as part of the board meeting as well. Oh, yes. They talked about – Yes, I also did that. Yeah. And so, they, you know, they kind of talked about what areas they were owning, but then also what are the OKRs that we're aiming for, for the quarter, and then how those OKRs translate into monthly milestones. And we actually just – so, one of the things we did post-Series A was we instituted OKRs for the first time. And I think, you know, it's – What are the top three takeaways from that? Top three. Okay. Number one is don't make your OKRs too vague. Number two, ensure they're measurable. It needs to be a certain number that you can hang your hat on and be like, okay, did we meet this? Yes or no? That's a function of – you can even put it as a – and then you can also put it as a percentage in some cases, but I always like the yes or no. And then number three is ensure that there is team buy-in. So, you – so, one of the most important things, I believe, is that the team needs to come up with the OKRs together. And so, we as team leads, we get together and we really define, like, what is – what's important for us for the quarter, and then what are the monthly milestones that we want to set. I think the other piece is – you know, I think one piece of advice I would also give to Series A companies is initially, you know, I thought a lot about how often we should have our board meetings. So, the typical cadence is usually quarterly. But I think that, you know, if you want to continue being at the same pace that you've been working at in terms of – from a workload standpoint, I think having them more often is better than having them less often. I actually disagree with that statement. Oh, there we go. I think that we have – our cadence currently is twice a year, but I'll probably raise another round before we, you know, continue with that. So, we've had one and then we're having another one in March. However, I am in on our monthly updates. Like I'm, like, doing our monthly investor updates, like I have calls, but I guess my concern with having them too often is I don't want to spend all of my time – and I'm sure you are not doing this and I need to quiz you on how you are being optimized about it – but I don't want to spend too much of my time preparing a board deck. Like, I want to just execute. Do you know what you do? Take your all-hands updates and have them in your board. So, that's the thing because we do weekly all-hands and, yes, we're also doing monthly investor updates as well in terms of calls. But the easiest way to do this is to literally take a lot of the components and pieces of the all-hands update and translate it into the board deck so that you're not spending a significant amount of time building the deck. And once you have – once you've done your first board meeting, you have the format and template down, then it just gets easier to build the next one anyway. And I think, you know, for the most part, what we optimize our board meetings for and, I mean, you know, I think – and I think will only improve over time – is to really enable decision-making. And so, if there's any kind of specific decision that we'd want to talk through or have working sessions on specific areas that we need to delve deeper into, that's really what we're using the time for. Yeah. I think Sequoia has a great post on this as well, just how to effectively run a board meeting. Yeah. There's a lot online. Yeah. Yeah. Yeah. So, okay. So, just to wrap this up, last question. For founders raising their seed or Series A, what would be the single most important thing you would tell them? Focus on the partner. So, really focus on the person that you're going to be working with because, I mean, I used to laugh when people would tell me, it's a marriage. And it's really – that is absolutely true. So, really focus on finding out everything you possibly can about that individual. And you know, don't just read press or read the Forbes Midas list, you know, to like figure out how many times they've been on the Midas list before. I think go a step further and really, really do your reference checking, your back channeling on the specific partner because, you know, because at the end of the day, it may be that the fund is choosing you, but you're choosing the fund and you're choosing the partner. And it's really not about the fund, it's about the person. So, I think single handedly, that's the most important thing you can do. I would say two things. One, have a process. Get an Excel. Get it color coded. Know where everybody is in your funnel at any one time and just lock in on that process, final sheet, update it, get organized with it. And then two, I would say is to do this executive coaching session or do whatever you need to do to make you feel confident and invincible and have high conviction because it's not going to be nice, you know. It's going to be hard and you need to persevere and just remember there's always going to be a yes out there. And it may take you 30 days, 60 days, 90 days, like there was, you know, there's definitely people on a batch that took even longer than that, but they still got great deals at the end and don't judge yourself by your peers. Just keep persevering with it because somebody will say yes and somebody will find the resonance in what you're doing and just you want to keep that in a belief. Awesome. All right. Thanks so much for coming in. Thank you. Thank you.  All right. "
  },
  {
    "name_video": "How To Navigate Co-Founder Disputes",
    "description_video": "Co-founder disputes can be startup killers— but it doesn't have to be that way. Garry, Harj, Jared, and Diana share their experiences navigating co-founder conflict and their advice for how you can manage these challenges at your own startup.",
    "related_categories": [],
    "page_url": "/library/MI-how-to-navigate-co-founder-disputes",
    "youtube_url": "https://youtube.com/watch?v=bvjyaz4ZiVI",
    "mp3_file": "downloaded/How_To_Navigate_Co-Founder_Disputes.mp3",
    "mp3_content": "The weirdest thing that sometimes with co-founders happens is if it doesn't go well, then it couldn't be me. It's got to be this other person. It takes two. That's the reality. You can, like, even be running a successful company and wake up one day and be like, holy shit, like. I hate my life. I hate my job. I don't want to do this anymore. Yeah, right. Yeah. I think in these relationships that are so intense is where we get so hurt. Don't feel alone if you're going through this. It's actually very normal. I mean, this is why I think YC was special for me, too. I like almost repressed this memory over the years because it's so embarrassing when I look back on it. Of course, like it doesn't matter. And all that debate only led to a bad outcome anyway. Welcome back to another episode of The Light Cone. I'm Gary. This is Jared, Harj and Diana. And collectively, we funded companies worth hundreds of billions of dollars right when they're just a few people. And today we're going to try something different. We're actually going to talk about co-founders and specifically co-founder conflict. You know, how do you work through that and what that means for your startup and actually for your life? I feel like when I was starting my company, this is an episode that I would not have listened to because I was like, ah, stupid, like emotional crap. I just want to like write code and like learn about technology. And if someone had like forced me to sit down and listen to an episode like this and really think about this kind of stuff, that would have been the number one most helpful thing in my startup is actually the thing that held us back were all people problems. There were all issues like the ones we're going to talk about. Yeah, I mean, and that sort of makes sense, actually. I mean, what is a company, if not people making pretty hard decisions, hundreds of them a week, maybe tens of thousands over the course of a year? And then these little decisions, you know, might be fraught, might be obvious. But either way, either it's the right decision or the wrong one. And then it compounds. And so when you look at like one of these unicorns or these like decacorn companies, you know, frankly, big tech companies that are worth a trillion dollars. Those are the compounded decisions of co-founders and you and your executives. And so it all comes back to the very simple thing, which is people in a room fighting, not fighting, fighting fairly, not fighting fairly. Maybe we could start with Harge, who famously was one of the co-founders with Patrick Collison of Stripe Fame today. What was that like? Well, it was definitely a long time ago. So it was 2007, 17, 18, 18 years ago. How old were you? How old was Patrick? Like, how old was I? I would have been 21. And I think Patrick would have been 18. I think the full the full story in that case was that I had actually applied to YC in late 2006 with my co-founder and my cousin Corvir, and we were accepted into YC, I think, as the first international team. You're the first international team. Yeah, incredible. I think it was maybe one Canadian team, but that counts. You know, it's going to be an American team anyway. At the time, neither Corvir and I knew how to code or build software or do anything. We'd like hire these Eastern European contractors to build the whole website. And so a condition of being funded, I had started learning PHP and started like taking it over anyway. And so one of the conditions of YC funding us was that like we continue learning to program and build stuff. So we were accepted into YC in like winter 2007. I spent most of the time just like learning to code, learning to build software, like building our app and everything. Bozo. Bozo, yeah. We pivoted into automatic during the batch, but. At the end of YC, I knew that we probably still, it would be great to have someone else like working on the software besides me and Paul Graham, the founder of YC, introduced us to this guy called Patrick. So you were actually also the first co-founder match at YC. Yeah, actually, not quite. We're really doing this live. I mean, the first one was probably Aaron Schwartz, but we read it. Yeah. So it was a similar situation in that Patrick applied with this idea for, hey, like eBay meets Wikipedia. Our startup had pivoted into tools for eBay power sellers. And so PG was like, oh, like you guys have this idea. You both want to kill eBay. You have this idea for building tools for sellers. This other guy's got this idea for like building a better interface for finding products people want to buy. You guys could use another programmer. He's like seems like a really great programmer. Why don't you like meet up and see if you want to work together instead of Patrick doing the next batch as a separate company? And so we we met up in London at the time. He was in Ireland and we went back from San Francisco because we didn't have visas to live out here. And we just got along really well. And we kind of did like, I guess, a shotgun marriage. We were like, hey, like, yeah, this is we like hanging out. We spend the weekend together. We should totally just like join forces and start the company. And how'd that go? Um, it wasn't like I mean, I think if I fast forward to the end, we sold the company. We were acquired within a year. And I think largely because none of us were really that excited about what we were working on. I don't think either of us had really set out with like, you know, our life's work is to kill eBay. They both for both of us, it had just been like a project that sort of like just kept going. I think a year into it, we had raised a seed round. We weren't able to raise a Series A and we were all sort of a little lower morale. And the acquire was sort of a really graceful way out. Definitely interesting learnings from that co-founder experience. And I think the number one thing is like, I mean, Patrick wasn't suited to a sort of CTO role, but as is very obvious now, like he's sort of an extreme outlier founder and probably one of the greatest CEOs, you know, like probably of our generation. And I think it's hard to be co-founders with a personality like that when they're not the CEO. And I think in general, we see this. You find that out. I found that out about myself, actually. What did you find out? Oh, my God. I mean, I also started Posterous with my co-founder thinking, oh, I'm, you know, some of it is like I'm realizing like a little bit cultural. I was reading about how, you know, East Asian cultures just have a desire for high social conformity. And, you know, these are things that I didn't really examine. I was just like, oh, I'm just, you know, normal American kid. It's fine. But deep down, like, actually, yeah, I did not understand something about me, which is I actually do want control. And the control comes from wanting to be able to fix it if it's broken. And I actually think that that that is what the CEO actually is signing up for is like, if it is broken, it is up to me to fix it. And, you know, if you're that archetype and you're in a role where it is not up to you to fix it because you don't have the authority to actually make all those decisions when you have to. It just doesn't work out well. Right. Like you find yourself in these sort of situations where you know that you want to do X, but, you know, it's not your job. Like someone else wants to do Y. And then, you know, what do you do? You could just like live with it, I guess. Or you could fight or, you know, sometimes you just have to be CEO. So you were the CTO and at Posterous. Yeah. And when do you realize that about yourself? And next time you did it, you were the CEO. Oh, honestly, like I burnt out at my startup and that's when I realized it. My startup story is funny because I feel like it was a misapplication of the advice that you often get or we, you know, frankly, often give. It's like in order for your startup to be great, you should try to have a great relationship with your founder. And I didn't know what that really meant. Actually, I thought it meant get along with each other and, you know, maintain concordance, you know, like if I believe X, but that other person believes Y, like, well, I could change what I think and let's go with what they say. And that's not a good relationship. That's like lying down like that is literally self-abandonment. And then the weird thing that I just, you know, I did this for a couple of years in the background, I also tried to be like the hero coder. You know, I take modafinil and, you know, literally work 20 hours a day. And I do, you know, I try to hero design and hero code the whole thing. And then meanwhile, when we would have disagreements about product or what the users wanted or, you know, ultimately when our users sort of flatlined, we had the deepest disagreement was like, well, what do we do from here? And my co-founder wanted to turn it into Google Groups. And I just sort of went along with it. You know, well, I thought like, well, I'm the CTO and oh, you know, I only you know, I'm the 40 in the 60 40 split. And I don't know if I want to fight over this. So I just sort of went along with it. And then my body keeps the score. You know, there's this long known book called The Body Keeps the Score that talks about when you don't work trauma out properly, it just like sort of lives in your body and it remembers. And so I actually had like a psychosomatic thing that happened where I couldn't sleep and I couldn't eat. And I couldn't even like bring myself to go to the office. Yeah, I learned the hard way. I mean, you know, luckily, again, like also, you know, the great thing about Silicon Valley is the company. My co-founder ended up selling it to Twitter for 20 million dollars. And that was really meaningful for me. And by then, like Harge and Jessica and PG had peeled me off of the ground, brought me over to YC. So, I mean, the story ends well. And at the time, funny enough, like I felt like the victim. And then now, like with a lot of hindsight, like 15 years of hindsight, I realize like I shouldn't have blamed my co-founder. Like I did all those things. I'm the one who self-abandoned the things that I knew. I'm the one who like didn't say the thing that I knew in my heart. I imagine people are watching and maybe this is resonating for them. They're like, I know this is not going. We're not making the right decisions. We're not going in the right way. My sort of thing for them is listen to that, right? This is a lot. A lot of this came from like my family upbringing and my situation. My communication style was like the function of my 10,000 hours of human intelligence training called my childhood. And, you know, I think the more aware you are of what your sort of pre-training is like, the more you can actually prompt yourself to not be like that. And I think that that's something that I've worked really, really hard to change and change that about myself. But, you know, yeah, I think the company could have been a 10 times or 100 times better outcome than that $20 million exit. If I had figured that out at that right moment, when we still could, we still had the mojo, like, you know, people still knew what we were. You know, we could have done a lot of moves and ended up a little bit more like our friends at Weebly who did like charge money, turn their very active user base into paying customers. And I think they sold to Square for like at least 10x what we did. And then Square stock, of course, went up another whole lot. So, you know, they really did it the right way. I mean, I did this other thing at work also. Like I take it, build up a lot of things and then at the end of it, I'd blow it up. That's the thing that I'm also actively trying to really avoid. You know, 99% of the time, it's like something that I do have control over is, you know, if I don't self-abandon, then I don't like sort of become into this like pressure cooker situation. And then I'm not going to blow up like, you know, what I want to do is be authoritative. Like, how do I, you know, see something and say something at the moment that it happens instead of allowing it to like build up so much? You have a great line that you often say around here, Gary, about authoritative versus authoritarian. But hey, we can share the principle. I think it's like a like a deep thing. Yeah. I mean, founders in particular, like your organization will just build up around like how you approach things and how you talk about things and how you think about things. And so, you know, self-abandonment is kind of obvious. Like you just you know, you're getting paid the big bucks. You have equity like, you know, you are there to render an opinion and, you know, your feelings matter and count. So, you know, self-abandonment kind of obviously is bad. And then way over on the other end is sort of being authoritarian. Right. So that's not listening to anyone ever jumping to conclusions. You know, one of the deeper things that I have now learned is that every decision, you know, might be fraught, might not be. You need to give it enough space and time for it to happen. And so for me, I was a conflict avoidant. I wanted everyone to get along. And that desire would sometimes cause me to short circuit all the things I needed to do to get to a good resolution. And so being authoritarian in that case is basically like skipping ahead to the end result. You're like, well, you know, I can't hold this conflict. This is too uncomfortable. Like I don't like that people think this thing and, you know, I don't agree. So I'm just going to like we're just going to do this. Right. And then that's not leadership. That's just, you know, sort of disregarding the people around you. The much better version is actually have a debate. Like it's good to have a healthy conflict where people say what's going on. And I regret that. Right. Like going back to my moment with my co-founder, Sachin Agrawal with Posterous, like if I could time travel myself back to that moment, there's no reason why we couldn't have had that conversation. And, you know, I didn't need to control the outcome. Like, you know, I didn't really need to be CEO in that moment to have a better outcome than the outcome that came out. Right. Like we could have had that conversation. We could have made that choice together. And, you know, because I burnt out, because I couldn't show up to work anymore, I short circuited it. And, you know, it ended up in self-abandonment again. And then if you think about any company that you're running, like, you know, we are operating in these sort of uncertain moments where, you know, there's door A and door B. Everyone has different feelings about it. And so the important part is like, can you sit down with the people who you trust and really care about and you have your shared goal and then have like a good faith argument about it and then come to an agreement? And that's like what authoritative to me means. I think a lot of what you're saying, Gary, resonated resonates with my journey, too. I think a lot of the journey with a co-founder is so intense because you're going through the high pressure of both of you really wanting to see this company succeed. You're pulling insane hours. You may not be sleeping. That's bad. Yeah, people should sleep. People should sleep. And you're also going through all these very intense decisions. And maybe up to that point, I didn't have the need to self-examine too much. And it's that pressure cooker that I realized patterns about myself that I didn't know. Like you describe, same thing. We all have different history. We all come pre-trained with our model, with certain default settings. My case, I was also grew up as an immigrant. And I think the safe thing is not to speak up. And it's just not rock the boat. Keep things stable. Right. So like you, there was things that I would not agree, but I would just not voice them because it was not safe from what I was trained on from my upbringing. And that kind of built up, right. And I think it was a process of really it's a bit of a gift to go into the journey of more self-discovery. I wish I could have resolved things better. And it's still a work in progress to be able to sort of speak up. And it's a journey of I think in these relationships that are so intense is where we get so hurt, too, because we both want it so badly in a different direction. But I think it's also in these same relationships that we eventually heal, too. Yeah. Where. I think if you make it, we all make it, is the message for everyone is that don't feel alone if you're going through this. It's actually very normal. I mean, this is why I think YC was special for me too. I could talk to other YC founders, like, oh, I'm not crazy. There's that and feeling that you're not alone. And the other part is like, okay, maybe up to this point before the startup, I was successful. I got by enough with how I operated in this world, but this new level of intensity, I needed to gain more control or power over myself and gain more of these kind of skills that are new. And it's like a journey of becoming a better version for yourself, which is a gift. And that's the thing that if I were to give advice to myself is you're not alone and it's okay to kind of get more support. And as you talk to your co-founder, conflict will happen. Every relationship is normal, right? Diane, do you have a recollection of like a particular conflict or was it like strategic or could be tactical, like things that were just like, well, I believe X and this other person, you know, who I co-founded this with believes Y. I mean, in retrospect, I don't think they matter that much. It's kind of the irony when we forward 10 years later, it would have been fine, but it just, they felt so life and death back then. That's interesting. Because I'm living there, it's like, I don't know, 4K television version of it. Now in retrospect, little details of how to run the team or that is like, okay, I think it's fine. As long as we get the high level strategic direction, right? Which I think we did. So it was just being more engaging in the debate and being more open. That's a good point. Yeah, any given moment, well, you have your ego, you have yourself, you have like your concept of yourself. And then all of that is wrapped up into like your identity, which then merges with the startup. And then the weirdest thing that sometimes with co-founders happens is if it doesn't go well, then it couldn't be me. It's gotta be this other person. It takes two, that's the reality. Yeah. In my startup, we had an equally dysfunctional relationship, but the diametric opposite. So I started my company with a friend from college and we're both like American kids who grew up in sort of a classic American household. And we were both probably pretty spoiled by our parents and probably both pretty used to getting our own way. I think about our pre-training. And you can imagine how that played out over the summer. We basically fought like cats and dogs on every issue. I remember in particular, speaking of trivial issues. So our company was called Scribd. And Scribd is a terrible name for a startup. No one can pronounce it. No one can spell it. It was like a thorn in our side for like 20 years. And the reason that we ended up with this horrible name is that we could not agree on what to call the company. We literally fought about it the entire YC batch. We probably spent tens of hours debating what to call the company. It got so bad, we had to call in Paul Graham to mediate a dispute because we were unable to launch because we could not agree on what to call the thing we were about to launch. And I almost repressed this memory over the years because it's so embarrassing when I look back on it. Of course, it doesn't matter. And all that debate only led to a bad outcome anyway. This is something that I do see with a lot of the college age founders that we fund. We fund, we were at the college age when we started our company. And I've just seen that a lot of them, just like me and my co-founder, we just had not developed good conflict resolution skills at the time. And so we would never do that if we were starting a company again now because we've learned how to let the little thing slide. We've learned just how to solve things like that. But at the time, we just hadn't learned that yet. And so we would just go around and around in circles. How do people end up learning that? One of the tools that I feel like I had to learn was, it's gonna make me sound so therapy brain, but I actually really like this book called Nonviolent Communication. Because a lot of the arguments that you're having is like, I have a certain mental worldview of how this is working and this other person has a different one. And then in that context, Nonviolent Communication talks about how you are totally free to talk about what's going on over here. But if Harj and I are fighting, it's not fair for me to speculate or say anything about his intentions or his motivations. So if I were, what's a concrete example? It's like, Harj, you just think that I suck at vibe coding, don't you? That's a judgment. Yeah, and so that kind of thing, honestly, I mean, whether you're married or in a co-founder relationship, it's very easy to fall into that type of trap. It's just learning to be better humans, right? And a lot of it is, we don't know really what's people's intentions because those are really within them. And sometimes we ourselves are not aware, but what's observable is the behavior of what people do and how you feel. And those are okay things to call. I mean, things that I eventually learned to do with managing people and engineers is not to say, hey, you're a bad engineer. That's just really demotivating for your report, right? Or your co-founder is like, oh, you suck at coding. That's just not helpful. What is helpful is like, hey, I saw you checked in this code and it didn't do the QA test and other unit tests as we had agreed. This is something that we can improve on, right? And if you do, then we have to test that less and it's better for everyone. So I think the framework has to do with pointing specific things that people can improve instead of making broad strokes that kind of almost do a bit of a character assassination because people make mistakes. And part of it is pointing specific behaviors. And then the other thing is giving them a carrot. If you do it and change it, this is how it's good for everyone. That's part of the MVC that makes it a win-win, shaping a lot of the specific behaviors and things that make it people can act on and is less of an attack, right? Because it's nothing about me fundamentally as a person or as an engineer. It's just a thing that I did. And sometimes, I'm not sure how it happened, but let's just get the output to be fixed. However you do it, if you do it, we can win this way. So that's how a lot of what I learned about getting better feedback, which I think is similar framework from the MVC and there's this touchy-feely class from Stanford where they talk about throwing things over the net. Describing the net, you wanna describe the net? I think the idea is it's basically like in any communication, there's like sort of your reality, like the way you're experiencing it and all the assumptions you're making about what's going on. And then there's the other sides. And like in conflict, it's totally fine for me to talk about everything on my side of the net, like from the frame of, here's like how I'm feeling. Here's kind of like, here's how it feels when you say I'm not a good vibe coder. So I'm all like, this is my area. I can talk about it as much as I want, but I can't go over the net, which is like- You're a bad engineer or something like that. Or try and tell the other person what they're feeling or what they're thinking. And I think it's a real natural human tendency to do that. Like you assume that if Gary says I'm a bad vibe coder, it's because he wants to hurt me and he's mad at me or something like that. And that's the concept of going over the net is like, I don't know what's going on in his head actually. And the only way I can understand it is to like ask him directly versus making lots of assumptions. Yeah, you don't know. The only thing that you can do is the observe thing that maybe the code that was shipped with vibe coding did this or that, but not the intention behind it, right? That's the concept of over the net, which is overall good communication with anyone, not just for managing, co-founders, significant others, friendships, just to be overall a better human. Yeah, I think you spend so much time with your co-founder or your spouse, honestly, that you can easily get into this moment where it's very one-on-one adversarial. The bad version of this, it just sort of becomes like tit for tat. All of the arguments sort of bleed over, right? That's probably a really good tell for something's wrong and maybe you should get an exec coach in there to help you work through these things. Basically, if it's like every conflict is like an everything conflict, you're like, okay, well, whether or not this button is red or blue, like if you view that conflict in the context of like all the other conflicts you've had that week, month, or like in your entire life, there's bleed over. And then can you imagine, like how are you gonna make a good decision about like whether that button is like red or blue? Like it's not really about whether it's red or blue, it's about like who wins and is there a point system? Like, well, last time you won this time. So, and it's like at that point, like, hey, what about the mission? Like, what about the thing that we're out here to do, which is get users and make something people want? Like, where does this decision fit within that? Or am I just like in an adversarial position with someone else? The idea of sort of like the pre-training or just like the context, I think is a really interesting one. Like if I think back to my experiences, I mean, it's like long, long time ago now, but I actually think, so when I think of myself and Patrick and Corvair, like in many ways we actually had similar communication. So we never actually had any like outright major arguments or like shouting matches or anything like that. I think we all actually got along really, really well. And actually anytime we were talking about anything other than the startup, it was great. And I still have like very happy memories of that. Like we had like similar intellectual interests and it was just like great. But I think when it came to like the startup, like fundamentally what was just going on is, I think we were at a point when no one was, no one could really be motivated to the max or I think like do their best work unless they were actually like the CEO and had the final say on things. So I think the way it manifested in that context was just, I don't think any of us were going 110%. And then- Each of you went on to become CEO yourself. Yeah, exactly. And then like the second time around, I think one thing that I learned was just, yeah, like the context that people have or like the cultures they've come up in, both personal and work, matter a ton. And they'll give very concrete example. My co-founders with TripleByte, like my second startup, were early employees at Justin.tv, which really had become Twitch. Justin.tv was notorious for, was known for having a early culture of like extreme, aggressive, heated debates. And it started with sort of two of the co-founders in particular, but it was just part of the culture was that you would just, like the co-founders would just like shout at each other and scream at each other and like, and that employee, and that was just kind of normal. And so my two co-founders, this was their first job out of college. And so they kind of just thought that it was- If you're not shouting. That's just how startups work. That's just how startups work. It's just people like screaming and shouting at each other all the time. It can work. I mean, if it's an opt-in culture, I guess. I don't know if it was actually shouting. My mental image of it was more like vigorous debate, like debate society debate. Not like- From what I've heard, it was both. Like Steve Ballmer, like throwing chairs at each other. Yeah. Whatever the details, I think like, if you grow up in like, you have like this one type of culture where it's just like an outright extreme aggressive debate is kind of the way you get to the truth and you win. It's not the culture that I can really work particularly well in. I think if I'm in an environment where like there's people like shouting and screaming, I kind of just like, can't really think clearly. To me, it's like shouting and just kind of like overly heated debate just means you can't think clearly about stuff. And so you're just going to make bad decisions. And like, I'm not sort of making a judgment on like what's right or wrong, but it's like, if you have like one view of, hey, like this is kind of what this culture means, like we're going to make bad decisions. And the other person kind of feels like, oh, well like this is the only way you can make good decisions. Like that is just going to constantly create conflict between co-founders so they don't have like shared context. How did you, when did you figure that out? Because there's a lot of self-examination when you decide to go into a new co-founder relationship. I mean, I think it was pretty obvious. Well, this was for me was an example of just, you can know people in social context and then like the work context is very, very different. So I know, I knew both my Trilbyte co-founders for kind of years before we started the company, but only ever probably more in like social, low stress environments. People are very, very different in like high stress environments. And I think this is one of the things we've seen in the batches too, is like you should generally found a company with people you know, but it's still not like a guarantee that it's going to work out because you might have been like social friends and you've only ever hung out like watching movies and playing chess and doing fun stuff. So you don't know how you're actually going to react under stress. How did that play out with Trilbyte Heart? Yeah, I think it's kind of in high stress situation. Well, once we were in high stress situations, which are many in a startup. Yeah, like I, it was sort of the dynamic would always be the way my co-founders handle it, I think like would get the best out of themselves is like aggressive debate. And for me, it's like, I think we should just like calm down and maybe write out our thoughts. So just like, it's like a totally different, and so just like a total mash of styles. And I think my way of handling, I mean, it was pretty apparent pretty quickly. I guess my way of handling it was I should adapt and like, and maybe there's something I can learn from like that culture. And sort of in general, a lot of my desires to do a startup was like personal growth and like wanting to get better. I was like, okay, well, it'd probably be helpful for me if I can like just get better at handling like more aggressive debate. And so I will just like sort of mold myself into being able to like do that and handle it. And I do actually think there was value in that. Like I certainly like, there is certainly value in me able to like handle more aggressive debate and just like a different culture. But I think the way it then played out is like four or five years into the startup, it was actually just a huge tax on me personally. And sort of a part of the reason I kind of burned out and just decided I wanted to move on and hand over the CEO range was like, like, I'm just like exhausted. Like actually for me kind of like being in this culture and kind of trying to always be like the, bring it back to the middle or turn the temperature down. It was just exhausting for me personally. What advice would you give to co-founder relationships that have this? There's all these unknown unknowns that only play out in high struts scenarios. And how do you grow towards each other to make it actually effective for the company and be there in the long run? Yeah, would you have done something differently knowing what you know now? Yeah, I wouldn't have adapted. I think that's, yeah. I think like the number one thing is I just wouldn't have, yeah, I would not have tried to adapt actually. I would have like forced. Maybe a little bit. Yeah, maybe there's, yeah, okay. Maybe there's a little bit amount of where it's like it's helpful, but yeah, I think in general, if you're the CEO, it's kind of like, you kind of have to like intentionally shape the culture to get the best out of yourself. And again, maybe we all have different upbringings, but there's sort of like this, I think you put it like the servant leadership model, which I think is very natural for like me and other founders I've spoken to. And that's like, oh, like you have to sacrifice yourself for the greater good, which is the org. And so you have to kind of like mold yourself into what the org needs. And yeah, I think that is- And there's an asterisk. Yeah. There are limits to that. Yeah, exactly right. I think we've all found various forms of that limit ourselves personally. And again, I think, I mean, I think this is basically what a lot of the founder mode sort of has obviously caught off and it's sort of caught off in like the late stage context, but I think it actually is this like underlying thread is a journey that lots of founders go through and not just in co-founder context, but it's like you start the company, you kind of mold yourself into whatever you need for like the company and the org to succeed. And you can like even be running a successful company and wake up one day and be like, holy shit, like- I hate my life. I hate my job. I don't want to do this anymore. Yeah, right. And very specifically, it's like you ended up in a culture you don't enjoy working in. Again, we're talking about it in the co-founder context, which is if you adapt, if you and your co-founder have totally different like frames of reference and ways of getting the best out of yourselves. That's gonna be hard. Yeah, it's gonna be hard. But then if you're like a public company and you hire a bunch of execs and the execs all have like totally different ways and they like become the dominant frame, then you're like basically in the same spot where you're like trapped. Yeah, you're the founder, but you feel trapped. And I think a lot of the founder mode just captures that energy of actually like you have to stop adapting yourself at some point and make the org adapt to you to get the best out of you. I think that's what's very well said. I think part of the journey is that, for a lot of the foundering teams, I think they should really get a lot of help outside of the company as well. I do think founders should probably get, at some point, like a coach, a therapist, to examine a lot of these things, because a lot of these are kind of brewing in the background and you don't even know how to articulate it, how to put it into words, what framework to use, to even know that you're going through this transition, this is happening, this is what is needed of me at this point, and you kind of need this partner, outside partner, to hold a mirror for you, to know that, hey, Harsh, you're going through this, it was fine to mold yourself, the company got to this point, but you gotta make home for yourself to be able to live in it for a long run, for a company, because the founder's the one that's gonna stay. So what are the things that you need to keep changing? And as founders, it's a very tough position to be in, you have to keep reinventing. Yeah, I agree with that. Therapy definitely helped me introspect on a lot of this stuff. I think if I had started therapy sooner, I would probably, yeah, I would have stopped adapting myself much sooner. Yeah, I wish I did it just because I started the company, and I'm like, I'm normal, I'm fine, I'm just like everyone else, I have no problems. And it turns out, that was not correct. So guys, I can imagine there could be some people who are listening to this, and they're thinking to themselves, wow, this co-founder shit seems really hard, and a lot of work, like, screw that, I'm just gonna not have a co-founder, so I don't have to deal with all this bullshit. What would you say? No, I mean, I'm kidding, but I'm also serious. Oh, it's totally serious, yeah. I actually think a lot of people feel that way. What would you say to those people? I think the uncomfortable thing to say that I think is true is only the truly superlative founders end up making products and services that are superlative. Like it or not, in order to create something of great value like that, game recognizes game. So when someone is truly like recognizably good as an engineer, or as a designer, or as a product person, or as a CEO, or salesperson, or whatever, it gets easier to find a co-founder, because other people are like, that's the person who is like the best person I've ever worked with. The act of starting a company is like getting into a rowboat, and it's like, we're gonna row out in the middle of the sea, and we're gonna find like, you know, the island of gold, right? And it's like, do you want the other people in that rowboat to be the most capable people who are like super fierce and like, you know, never say no, or do you want them to be okay? And so I, you know, we've been talking about a lot of the psychological parts of it, but a co-founder, you know, is a little bit of a test. Like, are you yourself like someone who someone else would say, hey, like that person's the best at that thing, and like, let's go do this thing. Like, game recognizes game, like attracts like. And some of it is like, man, if someone's having a really hard time finding a co-founder, the advice might actually be like, you're not at the edge of human capability yet, and you know, that's okay, like, you know, some of it is like, find a way to get there, because then you will find the other people who are, you know, sort of rolling in that direction, and you'll just look to the left or right, and it's like, you guys will recognize each other, and then you'll be able to create something really great. But I mean, the other reason to have co-founders that like, I think just bears out is like, a bad co-founder is definitely worse than being solo, but the best possible world is like, having someone who is alongside you, who is mega gets you, and when you're having a bad, the worst day, you know, and everyone does, like, you know, ideally your co-founder is there to just pull you up, and like, likewise, and you can go way farther for way longer, and create way more awesome things with people who, you know, hey, they're your people. Startups that work are so rare, you sort of need it all, like, you kind of need like, every possible advantage you can get. Yeah, going for no co-founder is just sort of a limiting downside type optimization, and that's just like, not the right way to think about startups. Yeah, to your point, like, yes, you will have less stress in theory if you don't have a co-founder, but then, yeah, the truly exceptional breakout companies have a really great, healthy co-founder relationship. Yeah, to say, I mean, it's a variant of the like, why do people raise VC funding argument, where it's like, oh, you don't have to raise VC funding, like, you could just like, grow, you could grow like, within your revenues, for example. It's like, you totally could, but yeah, you have to kind of, you have to play to win, and actually, like, the way to win is to attract all the resources. It's like, get the capital to get the best people to win the market and be dominant and take it all. Yeah, if you don't play to win, someone else is gonna play to win, and guess who's gonna win? Yeah. I think Harj and I like, texted this to each other once. It's, you know, if you don't want to have people problems, then, you know, you need to live on an island totally alone with no one. This is the Rene Adler philosophy. It's basically just like, all problems are actually like, people problems and interpersonal problems, and that if you want to have no problems, then yeah, like, go live alone on an island and you have like, theoretically no problems. Yeah. But yeah, if you actually want to live any form of like, fulfilling life, you have to, you need to be part of a society and a group of people, and you have to work through the problems and get good at dealing with them and get good at handling conflict and working with other people if you want to achieve anything. I mean, all the things we've been talking about, like, you know, I mean, I think we've been pretty vulnerable and talked about like, some pretty painful things, but that's the fun a little bit. Like, that is literally the work. Like, Alan Watts has this saying where it's like, a lot of people in modern society run around and they're just trying to get to the end. They're like, oh my God, like, let me get to all the way to the end. Like, you know, do I need to get done with this? Right? And then that's sort of like, going to a symphony and just like, instead of the concert playing out, they just play the crescendo at the end. That's it. Everyone falls in. It just goes like, and then that's it. You're done. And it's like, no, that's not, you know, like the journey is actually the fun part. Like the act of being, you know, not going over the net. Like you can't learn to play tennis and not go over the net if you have no one on the other side of this. And so, yeah, I mean, whether it's co-founders or in your, you know, relationships, I don't know. It feels like all the same lessons a little bit. And this is one game that is actually worth playing. With that, we'll see you guys next time on The Light Cone. I'm excited to announce that this summer, YC will be giving grants to college students to work on their own technical projects. We're calling these the Summer Fellows Grants. We think now is the best time for students to spend the summer working on things they find technically interesting. Ambitious technical college students can now build something important before the summer is even over. The grants will be $20,000 in cash and another $90,000 in compute credits from Microsoft, Google, and Amazon. Each Summer Fellow will get to attend YC's AI Startup School in June, and we'll also host some in-person co-working days at the YC office in June and August. At the end of the summer, you'll present what you've built to everyone. We're most interested in funding technical projects that are using AI in new ways, but we're happy to fund anything that smart programmers find interesting. The grants are available to any undergraduate computer science or engineering students, including freshmen and students outside the US. Our goal is to give you the freedom to work on your own projects independently and meet some other smart students while you're doing it. If this sounds interesting to you, please submit an application telling us about the most interesting technical project you've worked on so far and what you're thinking about working on this summer. If you don't have a project in mind yet, just tell us about the technical things you find interesting and have been thinking about recently. Thanks."
  },
  {
    "name_video": "Customer Obsession Made Gusto A $9.6 Billion Company",
    "description_video": "Gusto made payroll and HR painless for small businesses, growing into a $9.6B company along the way.   Co-founder & CEO Josh Reeves joined YC's Harj Taggar to share how they built a payroll company from scratch, and their customer-first approach to product design and culture.",
    "related_categories": [],
    "page_url": "/library/MH-customer-obsession-made-gusto-a-9-6-billion-company",
    "youtube_url": "https://youtube.com/watch?v=VaQA55ZZWBU",
    "mp3_file": "downloaded/Customer_Obsession_Made_Gusto_A_$9.6_Billion_Company.mp3",
    "mp3_content": "I love being in tech. You know, I went to Stanford, I studied electrical engineering. I've lived and breathed software since I was young, but there was something that all three of us really were drawn to, which is like tackling a problem that, you know, wasn't just for Silicon Valley, right? Something that was like across the country, across the world, frankly, when it came to what we were doing around like enabling, you know, payroll to start to be easier, simpler, this is a mainstream small business customer. It's people we were talking to that we connected with, like we looked at the lay of the land and saw how painful and frustrating it was. You saw how many folks were doing it on pen and paper, still 40% of companies in the U.S. were making mistakes and getting penalized every year. Like we saw stats like that. We were like, oh, good God, like we could help these people, these small businesses, these mainstream business owners. And that just resonated with us more. Hi, everyone, I'm Harj Taggar, one of the partners here at Y Combinator, and today I'm very excited to be joined by Josh Reeves, co-founder and CEO of Gusto. I've known Josh for almost 15 years now, and we met when he went through Y Combinator with Gusto in 2011. Welcome, Josh. Excited to be here. Looking forward to chatting. Why don't we start by just telling us a bit about what does Gusto do? Yeah, so our purpose is to make entrepreneurship easier and more accessible. What that means today in terms of our product is we do things like payroll. We set up health benefits. We have a whole bunch of products around hourly workforce, things like time tracking, shift scheduling. We also make it easier for you to hire in different locations, could be multi-state, could be international contractors, employees, and there's a whole bunch more. But broadly in this world of back office and more people centric products today. But more to come. Let's like rewind and go all the way to the start. You actually applied to Y Combinator with a very different idea to Gusto. Can you tell us about that? Tell us what you applied with and why did you change the idea? So I'll take us back to 2011. This is kind of when we were talking about, you know, when we connected. I had, I have four kids now. I had no kids then. I had definitely much less white hair. And more time. More time. I was living in Palo Alto. Now Gusto was started by three co-founders. So Tomer was my one of my roommates and Eddie was living in San Francisco at the time. And we had all had prior startups. And so when we came together, we were really excited about wanting to tackle something that we could spend decades on. And then to your question, you know, you got to start iterating, find problems, build solutions. So one of the first things we got excited about was actually, and not surprising, many people think to their own personal experience. You know, my mom is a teacher, but at that point I had a lot of friends contacting her for advice on having children. Eddie's mom actually helps his dad who's a doctor. A lot of people were pinging his dad for medical advice. So we thought of this like pain point around accessing experts who are not going to write, and you have to think back to 2011, they're not going to write blog posts. They're not in the online kind of web environment. Like, how do we make that knowledge more accessible to people? And so we started brainstorming from there. Within like a week, we had a prototype where you could basically call a number. It would ping us. We'd have it route effectively. You could just buy some keywords on Google and then all of a sudden start, you know, getting real people calling you with questions they have that they want expert advice on. And what we realized within a week or two was the questions were not related to the things we really were interested in helping people with. It was a lot of questions around astrology and relationship advice. And none of us felt equipped to answer those questions first and foremost. But also we thought about, you know, is this the type of space we want to be in given what we initially see as the signal on the type of questions people are going to have? So this was all actually within like November, December of 2011. You interviewed, I remember you interviewed with this idea and we accepted you. And behind the scenes, we were more excited about the team. Yeah, the team was good, but worried about this idea, which might still be a good idea to some folks, but it wasn't the right one for us. Do you, the batch started in January. Did you, when exactly did you change the idea? So all before the batch started. So like, I think the exact mapping here, it's a while ago, but like we were thinking through this expert thing, you're going to have multiple stakeholders. They're going to be contractors. You got to pay them as well as like connect them with who that person is calling in. So that kind of became more of like a payments concept. And then there was like marketplaces in general at that point, not just expert marketplaces. So then it was, you know, how are payouts happening in all of these marketplaces? And then from payouts, you go, well, that's just for contractor. Like what's actually the way people get paid? Well, that's called payroll. And so, you know, it was, it was actually, you know, all within a few weeks of like that, that bridge to, well, you know, payroll, we all use payroll products. Is that really a broken system? Is it, you know, in need of a better solution? And we realized after talking to a bunch of other small business owners, family and friends that like there actually was something really broken here that we could start working on. So by the time we started YC in January, we were already building a payroll system. I think like tactical advice and details of this phase, trying to find ideas is really helpful for people who want to be founders. So when you're in that phase, like you, you already had an idea, you're like, maybe this isn't the idea and you're trying to find new ones. Like what does that look like day to day? Like how much time are you spending continuing to work on the idea, even though you're not fully like bought into it? Just what's your advice to people who are in there right now? So I think there's like all the logical stuff and I'm going to get to like my actual answer is in this separate bucket. But like you got to prove that there's actually something broken and painful. Then you have to prove you actually create a thing that makes it better and fixes it. Otherwise you're not creating any value. Then you have to kind of prove or have line of sight to like a business model where you're actually a company, not a project. And then eventually you have to have a way to like scale it and like acquire and serve those customers in a way that, you know, again, makes sense. So those all need to happen. Otherwise there isn't a business. But we obviously didn't explore all of that in two weeks with the whole expert idea. What we proved was like you could build something and it would somewhat work to connect people. But the other bucket I think is actually even more important when you're early on. And it's that you're going to be living and breathing this problem space. And not every problem space is for everyone. And why we shifted only after a few weeks to a different problem space was we just weren't obsessed and it wasn't deeply internally like keeping us up at night. This whole idea around connecting experts. And so that's where within even a few weeks of Signal it not resonating gave us reason to start exploring other things. Now when it came to what we were doing around like enabling, you know, payroll to start to be easier, simpler. This is a mainstream small business customer. It's people we were talking to that we connected with. Like we looked at the lay of the land and saw how painful and frustrating it was. You saw how many folks were doing it on pen and paper. Still 40 percent of companies in the U.S. were making mistakes and getting penalized every year. Like we saw stats like that. We were like, oh, good God. Like we could help these people, these small businesses, these mainstream business owners. And that just resonated with us more. I love being in tech. You know, I went to Stanford. I studied electrical engineering. I've lived and breathed software since I was young. But there was something that all three of us really were drawn to, which is like tackling a problem that, you know, wasn't just for Silicon Valley. Right. Something that was like across the country, across the world, frankly. So this definitely met that trait. I think we probably also liked a little bit that it like we took pride in the fact that it wasn't what everyone was focused on. It's kind of fun to like jump to the stuff that isn't popular at the time. I'm glad you brought that up because absolutely during that era, 2011, everybody wanted to work on a mobile social app. And a characteristic of working on that sort of application is it is very easy to just get going. If I want to build an app to find my friend's favorite restaurants, I just like start building the app. Yeah. Starting a payroll company, especially then, was just a lot more complicated. Once you got the excitement, OK, we want to do payroll, you had no experience running payroll, right? No domain expertise. We got really excited about this, you know, broader back office, like pain point space. But like my advice to founders and it was to us, too, was you got to start with like one thing. So payroll was always going to be our first product. It's what we will call our primary front door. But we always thought we'd be adding more products over time. But focus, focus, focus is the key. So first thing we had to prove, not just to potential investors around Demo Day, but to ourselves was like, could we even build a functioning payroll system? So we actually scoped the solution we were building, you know, to the bare, bare bones. It had to be a way to go do tax filings. It had to be a way to go do tax payments. It had to be a way to go obviously do tax calculations to drive that. It had to be a way to go move money from like an employer account into an employee account. You know, actually, that's that's the basic building blocks. And so that's all we focused on doing, like which is building a functioning system in California. You know, you could scope there, too, because every single state has different rules and requirements for a new company that had never paid people before. So you don't have to do any historical tax import. And, you know, fortunately, this maps to to our company. Right. So we also then added the additional incentive of, well, well, we're not just going to, you know, try to get there, you know, for all the good reasons of wanting to build a business. We're also going to add the pressure of, well, we won't pay ourselves until we can use our own system to pay ourselves. So that was kind of the first few months. So once we did that, we did onboard some other companies in Y.C. and that was a very manual process because we'd only built this back end. But we at that point could say accurately, honestly, that we are now processing payment to the tune of, you know, thousands of dollars, tens of thousands of dollars. But when you do that over an annualized basis, millions of dollars of payroll, which was one of the key messages I wanted to be able to tell during our demo day presentation. How did you convince these early customers to trust you? So I think there's like two phases of like how to answer this. One is, you know, we had fellow companies in Y.C. that were also new companies who had never paid themselves, who are based in California. And so that was just a low hanging fruit. Now, that obviously wasn't going to be our long term strategy. There's not enough. We knew that there is, you know, for backdrop is about six million employers in the U.S. And so, you know, if you're going to get to real, real volume in the space, you have to go into many, many industries. It was going to be more of a horizontal solution. But after demo day, we actually did not launch the product. That was also kind of a non-obvious choice we made. We'll probably talk about the seed round we did, but we actually didn't launch publicly where you could like come up as a stranger who we've never met. Right. All the other Y.C. companies we had met and knew. But like a stranger who we've never met could come to our website, could set up, could add employees, could go run payroll and it would all work. And if they wanted to call us, they could. But it would actually all be there ready for them to use. We didn't actually do that till December of 2012. So several months later. You mentioned the seed round. As I remember it at the time, you actually ended up raising, I think, the largest seed round any Y.C. company had raised at the end of the batch around demo day. But as you said, you didn't actually launch into, officially launch until after the batch. And so you didn't have sort of like this obvious traction story here with like growing revenue week over week by 10, 15 percent. So what did you do to convince investors and why did it go so well? I think a couple of building blocks. Number one, I think we stood out simply because we weren't like everyone else. So that was interesting, at least to some folks who were kind of ready for like tackling or evaluating or meeting founders who like had a business with a straightforward business model. Like we were going to charge our customers for using the product. It's a SaaS business. But if you look at the space for anything, this is where, you know, folks that aren't in the space aren't aware of this. But you had this amazing combination of, you know, some big incumbents like Paychex and ADP worth, you know, over 100 billion dollars together at that point. So like clearly big, big incumbent market presence in terms of like economic value, but also an incredibly fragmented market like ADP and Paychex at that point were, you know, less than 20, 30 percent of the customers out there. So you had tons of folks on pen and paper. And so we had, I think, a good story to tell on like this is a real pain point. People get that. And then there's this big disruption happening, which we're going to be leveraging. And the disruption is in both technology and go to market. On the technology front, it's at that point it was cloud, paperless and mobile. Three trends we didn't create, but we definitely leveraged to our benefit. And on the distribution side, it was search like SEO, SEM and then social. No one's ever cracked the small business side of this market. There's these technology changes and distribution changes underway that typically benefit a disruptor, not the incumbent. And now maybe now is the time finally when like small business will start getting amazing software. And it won't just be into it as the one example of a company that like can serve small business. And I would actually argue investors are pretty much always excited about big, big markets with like clear business models and then always a hypothesis if you're a seed stage on like, how are you going to go capture that market? But we had, I think, like over 11 VC firms offer to invest, which he chose to do the round with no VC firms. It was all angels. So we raised from 20 plus CEOs and founders. It was CEOs and founders of PayPal and Stripe and, you know, Mint and Instagram and a whole bunch of amazing businesses. And it was great to have them be sounding boards. So I think that that helped with the story. But I would always say, like, no matter what's hot at the moment, I think most founders or most investors are pretty excited about, you know, huge market, you know, industry is going through disruption and a new company coming in that has a pretty good strategy, at least at that point, on how to go turn it into reality. So I think I personally have been getting paid through Gusto for over a decade at this point. And what's always stood out to me as a user is just your product has always had this sense of like fun and whimsy and just design, which is obviously not what you associate with the payroll companies that came before you. Can you speak to like, when did that start and why has that sort of fun design sort of heart being important to you? Yeah, we think of it as like warmth, hopefully, because, you know, it's obviously still a really business critical task we're doing. Reliability, accuracy is, you know, stuff that we're obsessed with. That's more, I think, a byproduct of how we view what software should be, right? Like, you know, there's a world where like software, you know, is hard and difficult and you kind of feel like it's a cumbersome thing to navigate. There's also a world where it's like this cold, frictionless, sterile machine that just works and hums. For our product space, our problem space, like we just really believed you need both. Like the stuff we abstract needs to be super automated and like very powerful. But like we're going to ultimately be this partner to you in navigating really important decisions like, you know, paying someone, choosing their pay or the employee side getting paid. Like these are magical moments to be a part of. It just we didn't even debate it. It just felt weird. Like why wouldn't you want to bring warmth and humanity into that interaction? During that time, I hadn't thought of this before, but you were building a company that wasn't the typical type of company people were building during this era. So did you have like a peer group to lean to where this sort of stuff like figuring out compliance in multiple states, growing like to small businesses and doing sales and getting them on board? Were there other founders you could lean on for advice or were you sort of figuring this out a lot for yourselves while everyone else is building photo sharing apps? Well, Kevin is a friend from college and Instagram. I mean, he's an investor in Augusto. So, you know, it was fun to talk to him about some of the scaling stuff. But actually, I think, you know, you know this more than anyone like tech is pretty broad. So even back then, right, like was everyone building mobile sharing apps? No. Like Jeremy Stoffelman from Yelp is one of our angel investors. He's been passionate about small business forever. Right. Dharmesh Shah from HubSpot cares a lot about small business. He was also one of our angel investors. It was fun to talk to him about how they approached the front office component to this. Max Lovechin, PayPal, you know, obviously FinTech. And that was, you know, predating that time period. But like really cool to talk to him and geek out on how he approached company building. Patrick at Stripe was an angel investor. So we actually had plenty of, again, the folks I would have honestly paid money to to give us advice and said they gave us money, but they also got stocks. Yeah, I felt fine for that. Like, no, we felt we had a really good network of folks that honestly, I think part of why they got excited about investing was they realized how foundational this problem is. Right. They had all felt it. They're all founders and building their company. when they were small, like all of that complexity, that compliance, that back office headache type stuff, all the things that are manual, like, you know, we talked about it and then we had to go prove it. But like, we were clearly gonna be a company obsessed with how to go make that stuff easier and simpler. And I think a lot of them just got excited about like making that mission real. You launched your first product when it's three of you in a house. And you launched your second product when you have hundreds of employees and lots more investors and just like a lot more going on. Like, what are some of the big differences between those two? And how do you keep the startup speed when you're launching new products at scale? So some of the first similarities are like the benefits team at Gusto started as like a small team of five people, you know, with the same dynamic as when we were just five people. And the painful part was it meant we had to pull five people off of payroll. So that's the puzzle when you shift from one product to multi-product, you do it too early and you're spreading yourself too thin. You do it too late and you're kind of just not helping your customer with all these things you could help them with. And so we had to make sure we were, you know, still have tons to do even today around payroll. And there's a lot more coming there in terms of innovations in payroll. But, you know, separate out a team, create a separate swim lane, give them lots of autonomy, align on like that deep, deep connection to the customer. It was a little bit easier actually because it's not prospective customers. These are existing Gusto customers. When we say, can we talk to you about doing benefits? Most were like, oh yeah, we're happy to give you feedback. Let me tell you exactly what would be awesome. Let me react to your, you know, spec, your, you know, wireframe, your diagram, your early like beta usage. And like, there was a lot of like, oh, that'd be incredible. That'd be amazing. We'd love for you to do that. Please do it faster. And so, you know, you still face the challenges of like, how do you allocate money in a company? How do you allocate headcount? But the mindset of like create different swim lanes actually persists today. Like we have many, many products now and most of those teams operate as different swim lanes inside the company. And we want people that are in that swim lane to be obsessed with that pain point, that problem and solving it. And frankly, there's other guesties focused on, you know, the other problems that we're solving. Especially as you've gone multi-product, it also means you run into more competition and competitors. At the very, very early stages, I often feel like one of the things I hear a lot from founders when they're trying to pick an idea is, oh, I'm worried there's too much competition. How do you think about that? What's your advice to founders on, should they be worried about competition or not thinking about it at all? So I think when you're really, really early, you know, you gotta look at like the market and like if, and this wasn't the case for Gusto, like someone has like 90% market share, that's definitely like trickier, right? Like the cool thing for us was in all of the products we've done so far, they are massively fragmented markets. So, you know, I would be weirded out if there wasn't competition because that means like almost, we're somehow the only ones that saw the insight that you could build a big business here. So competition's good. It means that people also see the opportunity you have. But, you know, fragmented market means there's a lot more opportunity to focus on what you're doing versus get distracted by what someone else is doing. And then you just gotta make sure you have, you know, a strategy that's unique to you. And then, you know, beyond that, you just gotta execute. Like at the end of the day, build the best product, build the best go-to-market. Like be, you know, the one that's winning the most market share based on like, you know, conversion, retention, et cetera. And the rest, you know, works its way out. I think it's more challenging if you have the same strategy as someone that's much bigger than you, who has more money and resources and is moving as fast as you. In our case, it was, there was definitely companies bigger than us, but they're moving much, much, much slower than us. And so we could just really focus on executing as fast as possible. So speaking of founders, you have three co-founders and all three of you are still very actively involved in the company. And every time I see you, it's very clear that all three of you are very like pumped and excited to work on the company and with each other. We're early, we have so much to do. Well, I think it's pretty unusual to see like three co-founders actually stick at the company for this long. What's your secret there? Like, did you guys get lucky and the stars aligned or did you, something behind the scenes that's made it work so well? I think there's like luck for sure, but there's some things that have to align. Like one way to think about it and make it, you know, actionable for everyone is like, how do you build long-term relationships? Well, you know, it takes work and there's like ingredients that have to be there already. So the three of us, like loving technology, wanting to dedicate ourselves to building products that go solve meaningful problems, deriving a lot of joy from like helping others and like also really having this deep, like we call it today, productive discontent. Like we're just constantly both, you know, proud of the progress slash like really eager to get to the next step. The next step, because there's so many people we can help. There's so many more problems we could solve. You know, those were the ingredients that had to line up. And then, you know, you got to invest in good communication, how to give feedback to each other. But yeah, you know, 13 years in, like we're even more excited and more focused on like, how can we do more faster? And I'm really grateful to my co-founders for the important roles they play in the company. The number one thing that everyone wants to talk about at the moment is AI. How do you think about AI impacting both Gusto's business and the product, but then also Gusto the organization? We've always said like small business, you know, they want an opinionated partner, right? They don't want just a tool. They want just a set of menu of options. They're super busy. They're wearing many, many different hats. And they don't frankly have the resources to go hire all of the specialists that a big company has. So they're either left on their own Googling it or, you know, they start working with a company like Gusto. And so what AI enables us to do is turn that vision into reality even faster, right? Like you can imagine Gusto as we continue to add more and more capabilities and keep evolving our interface to kind of become that back office agent, that, you know, set of capabilities for a business owner that's highly personalized, unique to their needs, pattern matching on their industry, growth rate, and profile, and like being proactive in helping solve pain in their life, not just waiting for them to log into our website and go click some things. Final question for me, just, you know, you passed the first decade of Gusto into the second decade. Like what does the second decade look like? Like what do we have to look forward to? And what's sort of your vision of Gusto 10 years from now? Yeah, I mean, two stats I'll just share. There's about 550,000 new employers each year in the US. And the historical stat is that about 52% make it to year five. So, you know, 500,000 new employers half make it to year five. Like we want to increase both numbers and that's the simplest way I can put it. So there's a whole bunch of product behind that. I won't do any secret unveil right now. Something we did announce recently though is a compliance hub. So just like a one-stop shop for all those compliance tasks, pain points, like could be payroll, could be benefits, could ultimately be anything. Like we're going to be the company that takes care of all of that for you. And you're going to see us be pretty aggressive in that area. Well, thanks so much for the time, Josh. This was a lot of fun. Yeah, thank you. I'm excited to announce that this summer YC will be giving grants to college students to work on their own technical projects. We're calling these the Summer Fellows Grants. We think now is the best time for students to spend the summer working on things they find technically interesting. Ambitious technical college students can now build something important before the summer is even over. The grants will be $20,000 in cash and another $90,000 in compute credits from Microsoft, Google, and Amazon. Each Summer Fellow will get to attend YC's AI Startup School in June. And we'll also host some in-person coworking days at the YC office in June and August. At the end of the summer, you'll present what you've built to everyone. We're most interested in funding technical projects that are using AI in new ways. But we're happy to fund anything that smart programmers find interesting. The grants are available to any undergraduate computer science or engineering students, including freshmen and students outside the US. Our goal is to give you the freedom to work on your own projects independently and meet some other smart students while you're doing it. If this sounds interesting to you, please submit an application telling us about the most interesting technical project you've worked on so far and what you're thinking about working on this summer. If you don't have a project in mind yet, just tell us about the technical things you find interesting and have been thinking about recently. Thanks."
  },
  {
    "name_video": "The Future Of Design With Figma's Dylan Field",
    "description_video": "Design isn’t just about making things work—it’s about how they work, says Dylan Field, the co-founder & CEO of Figma.  As AI transforms tech, he believes a designer's judgment, taste, and agency will matter more than ever.",
    "related_categories": [],
    "page_url": "/library/MG-the-future-of-design-with-figma-s-dylan-field",
    "youtube_url": "https://youtube.com/watch?v=4UE4e6b2qtA",
    "mp3_file": "downloaded/The_Future_Of_Design_With_Figma's_Dylan_Field.mp3",
    "mp3_content": "As software gets easier to build, design becomes more important. And there's going to be more designers hired. Because at the time, it felt like this tiny market. I think that so far, AI is very much in the tool category. You know, we talk a lot about lowering the floor, raising the ceiling, making it so that more people can participate in the design process, but also raising the ceiling on what you can do. The more time has gone on, the more that I'm confident in the designer's role and believe that's going to be one of the critical roles in building software in the future. Today, we have a real treat. We have Dylan Field, the co-founder and CEO of Figma, which millions of people in the world use for collaborative design. Dylan, thanks for joining us. Thanks for having me, Yuri. So, we're in the middle of this crazy AI revolution and design itself is also changing quite a lot. How do you view AI changing the face of design right now? It's definitely an incredible time that we're living through. Ever since we started Figma, the exponential curve we've been on is that there's just more software being created than ever before, but it's kind of looked like this before. And now it seems to be going vertical. Yeah, which is exciting. I think it's super exciting. And my point of view is that design has the opportunity to differentiate software at this age of AI. We'll see whole new workflows emerge where designers, engineers, product will work together in different ways than maybe they're doing today, or at least different cadences. And it's been pretty neat to have a front row seat to that. And with our platform, figure out how we can empower everyone to use Figma to be able to be on that journey of design. If I think back to just even the earliest days of Figma, some metrics that have held constant, one is that we've always had this really strong international base of users. So even from the start, over 80% of our weekly active users were outside the United States. The second one is from the start, it's been like one-third designers consistently, and the other two-thirds are non-designers. All coming to the platform and making things, viewing things, giving feedback. I'm quite excited about how we can activate those users more, make it so they're able to make more contributions to the product process. That sounds right. Does the capability go up? And like, are you doing more? Or will AI take these things over? Like, what's your view so far? Oh, I think that so far AI is very much in the tool category. Totally. And whether it's designers, developers, others, people are using AI to just do more and to explore more. So the way that I see it is that, you know, we talk a lot about lowering the floor, raising the ceiling, making it so that more people can participate in the design process, but also raising the ceiling on what you can do. Yeah. And I always had this image in my head of like the idea maze you go down, all these different branching paths that you explore as you design and ideate your way through that product journey. My point of view is you get more breadth now in terms of the things that you can try, but it still requires a lot of depth to fully explore it. We're sort of in this uncanny valley still where, you know, you can do prompt app, but prompt app doesn't give you an app that is well-designed yet. So, you know, given that, like, how do you see this playing out? It's kind of interesting to like look at the language people use around this stuff. You know, people talk about like, you're locked in, or I'm cooking, or they're cooking. Yeah. And... Vibe coding. Vibe coding, exactly. And for a while I was just like, you know, whatever, it's new language. And then at some point I realized that maybe the reason people are using this language in particular is that's kind of the feeling you get as you're developing something really fast. Like there's always this call and response you have with tools as you're trying to get the thoughts out of your head onto a screen and you're iterating quickly. And the faster you make that feedback loop, I think the more you can get into that flow state. And also the more fun you can have, actually. And, you know, for Figma, one of our values as a company is play. We're always trying to make it so that whether it's as a culture or as a product, Figma is fun to use and is a tool that just like lets you creatively express. I think that the opportunity here is how do you create even more of that feeling, even if you're not an expert at Figma, and have that rapid ideation loop going at all times. But to the point you made, it's like, you also want to give people a way to not just get started and prototype rapidly, but also get to the finish line. And I think that's where the disconnect is. And I think that that disconnect is not just for design, but also for code. Like you can go and get locked in for three hours and make something cool. Will it be the design you want? Probably not. But also, it will take some time to untangle the spaghetti mess of your code base as it currently stands when you're going from start to prototype, and then get to something that's extensible and you can build off of. Yeah, the design part is very interesting because you can get something that works very quickly, but maybe it doesn't work well yet. There's sort of this increasingly lost art, I'm worried, that founders are not focused on design enough. Do you find that in some of your angel investing yet? What I'm seeing is that people seem to, year over year, and this has been true for a long time, care more about design than ever. Which is great. I might have some selection bias, because obviously people are excited to talk to me as an angel or my capacity at Figma. Overall, my sense is that people just care much more about design, also understand the value of design. Totally. It's not just about, can you make it work? Yeah. There's a lot of people that can make it work. Yeah. And as people are able to make stuff faster, it's how it works that actually matters. Can you talk about how you're thinking about the evolution of the actual models right now? Because there's sort of like two regimes, right? Image diffusion models, like Midjourney and our friends, Suhel at Playground, they're doing image diffusion models. And then on the flip side, there's CodeGen. And the CodeGen methods, the large language models themselves, they can't generate SVG, for instance. Do you think that one or the other is going to work, or is it both in tandem? And then way out in left field is the multimodal models coming from OpenAI and others. Is it just a matter of like, let's just wait a little bit and those will do it, or is it some other combination? Well, I mean, it almost goes back to the question of what is design, when you're asking the question of like, why aren't models better at design? Because they still kind of suck. There's so many definitions of design, but like what I like is art as it applies to problem solving. Totally. It's, I think maybe the reason why these models are not created design yet, it's like on the art side, you've got diffusion. On the problem solving side, you've got LMs. And it's not clear that people have figured out how to, you know, marry techniques together yet. Yeah. And figure out how to go approach these problems in the right ways. Yeah. And I think also just like, as you think about what a designer does, they're bringing in all this context, you know, way more than just, okay, here's this like two liner problem I want to solve. Yeah. They're doing, you know, a lot of research with the user like you talked about in order to like go into that IconicPie and figure it out. Yeah, their IDMA is trying to figure out like, you know, from first principles, what is it that this person needs or wants? What are they feeling at any given moment? Yeah, and how do you take that all in? Also, the current culture moment, your cultural moment you're in, the flow you're in, the part of the brand experience you're in, how that all ties together, how it all maps. And then I just, yeah, don't yet see models that have been able to figure out how to like bring all those different components in. They're lacking the empathy piece of being a designer. Maybe that's too, I don't know. For now, I don't know. Maybe not forever. Yeah, I'm curious to see like how they'll evolve. But I also, the more time has gone on, the more that I'm confident in a designer's role and believe that that's going to be one of the critical roles in building software in the future. And I think people that call themselves developers today and they call themselves designers, you know, in the near future. That doesn't mean they're not writing code. It just means that they're going to be thinking more holistically about the product experience along with their colleagues. Yeah, that sounds right. There's the sense that the large language models are going to somehow become super intelligence through just getting smarter and smarter. But it doesn't seem like there's a lot of agency. Whereas what a designer, a large percentage of what a designer does is actually using their own agency to like create a thing on a canvas, basically. Agency and also judgment. Yeah. And I think that it's super interesting to me because I think in the Grok 3 announcement, for example, you know, one of them was saying that a lot of the training is done on math problems and CS problems and that kind of transfers over to everything else. But then I think about the people I know as humans that are like the best mathematicians I know or the best engineers. And like sometimes they're really good at having great judgment about product experiences and sometimes they're really not. Yeah. And it seems like it's almost a different muscle at least for humans. Yeah. And so I'm curious if that transfers over or not. Yeah. I mean, my hope is that humans basically retain the agency bit. And I think we were hanging out with some AI researchers recently and they were sort of disappointed that the models are not, you know, but they don't demonstrate as much human-like agency, you know, even after all these innovations with, you know, climbing the scaling laws, it just hasn't popped up. The thing they said was the models are more like hyper-intelligent toasters. But I think that that's the opportunity here. It's like, you know, the human designer has to understand people and understand their needs and goals and their reward functions and then create UI, create user experiences that match, like, you know, their jobs to be done. From there, it's about how do we equip them with the right tools. Totally. Remove tedium, make it so that they're able to, like, have that rapid feedback loop. Yeah. Do you think that people are going to do more and more, you know, chat-based interfaces? Or is it more visual design? Or, you know, is it even going to be, like, terminal and prompting? Which way, you know, what are you seeing right now in terms of the cutting edge of design? I'm seeing pretty much everything right now. Okay. Which is exciting. So way more variety then. Yeah. It's not just, you know. It feels like we're kind of exploding out the possibility space of how you actually can work. And that's been my prediction of what's going to happen for a long time. And I think it's going to actually go much further out from here for a while in terms of people trying different patterns with their tools and different things. I think it's a really good thing. I think, like, prompting alone is sort of like we're in the telnet days of AI. You're able just to have, I think, so much more ability to work with tools through different interfaces. That doesn't mean that prompting is not important. But I think there's a lot more to try out there. And I'm excited to see people doing that. Yeah. And also explore different design patterns and things like, you know, AR, VR, XR. You know, there's different windows where I think we're going to see entirely different dynamic interfaces start to pop up. Fundamentally, you know, I love just how humans interact with machines. We don't have BCIs yet, but one day that'll be like the final frontier. Totally. You know, until we get there, like, there's a lot of other stuff to explore. I guess the really wild thing is once you have CodeGen, in theory, that might be something we see, like, sort of custom-designed vertical software. You mean basically custom-designed for each user? Yeah. This is one I'm a little skeptical of. Doesn't mean it's not going to happen or people won't try it. But I think that I remember, like, seeing Snapchat for the first time. And then, you know, years later, like, starting to use Snapchat more. That's an example of software that someone's going to teach you. It's like a consumer product, and yet it's actually quite complex. Yeah. You're not going to just, like, figure it all out if you land in Snapchat. You're going to learn it because you watched your friend use Snapchat. I think there's a lot of software that's like that. And the more you shift the interface around, the less someone's able to just natively learn and transfer over that learning to someone else. Yeah. So I think there's, like, a trade-off there that's actually quite important. Snapchat and Minecraft are two of the more crazy examples of, like, you know how in design, low bar, high ceiling is, like, a maxim. You just want anyone to be able to clear that low bar, and then you want people to stick with you all the way through the high ceiling. They're, like, remarkable examples of, like, actually, the low bar is optional. Let's take a step back. And, I mean, I love your story of starting Figma. How did you come up with the idea? It was a process. I guess going all the way back, we started talking about what would become Figma, Evan and I, in late 2011. I was at Brown at the time. Evan's my TA. We were kind of, like, asking the question of why now first? What are the technologies that are shifting? And we'll create all sorts of opportunities. And, like, late 2011, that was, for us, drones and WebGL. And I was actually pushing a little bit harder on drones, and Evan very quickly vetoed that. He's, like, look, I think drones will be very important, but they're going to be regulated and or defense, and I don't really want to do either of those. And also, I like software more. Once you have the hardware component, the run debug loop, it's really slow. Totally. He's, like, I don't want to deal with that. Okay, no drones. Yeah. So that was kind of his call. And then it was, okay, WebGL, which Evan had a lot of expertise in, in particular. He had done a lot of prototyping and making sort of toy applications with WebGL at the time. And we started to think about, okay, what do you do with that? So then I was, like, okay, is it gaming or is it tools and software? And we kind of looked at that and said, okay, well, gaming is super hard. You have to have, it's like a hit-based business. You got to make something awesome. It's got to really resonate. Like, let's not do gaming. Let's do tools and software. And then I went and left for a GAP semester, what I thought was a GAP semester. Yeah, totally. To work at Flipboard. Evan was finishing up in sort of spring 2012. We started to just kind of, like, tinker and explore and think about this together. Looked at stuff like 2D to 3D scene creation. Got the Chill Fellowship. Then we started working full-time August 2012. My internship ended. Evan moved to the West Coast and explored a lot of different stuff. You made, like, meme creation. We did. Meme generation was one of them. Yeah. Probably the low point of Figma. I was, like, very on it in terms of my thesis was correct. Memes to the Moon. Yeah. Yeah, I was, like, literally looking at the graphs for memes and meme generation and just looking at the search terms and stuff. And I'm, like, oh, man, there's no good meme generator out there. Totally. We can make the best meme generator. Then we spent a week and we made it. It was, like, this, like, you know, moment of, but is this, like, really what we want to do? Yeah. And I think Evan was ready to quit and I was ready to go back to school. I was, like, okay, this is a clear, like, sign that this is not it. Yeah. But Evan, being the technical genius that he is, he made the text rendering in our meme generator, like, state-of-the-art in the canvas. And then, you know, later on when we eventually got to Figma, he would get us to kind of take that out and reuse it for our V1. Yeah. And so it's kind of, like, this, like, hilarious moment of, like, our first text rendering in Figma came from the meme generator. Yeah. Do you remember, I guess, I mean, a lot of people were still using, like, I guess even Photoshop or Illustrator for, you know, this type of, you know, high-fidelity design. Yeah, Fireworks as well. Fireworks, yeah. I'd use Fireworks as a design intern flipboard. Yeah. And it was an awesome tool in many ways, but also very buggy. And at some point it was killed. I was looking at, we were looking at the photography space as well, photo editing, built a really cool photo editor, but it was just not something that made sense because we're doing the browser. And at some point we just kind of, like, picked our heads up and went, wait a second, like, the best camera is the one that you have in your pocket. Yeah, it's on the phone. Like, why would we be making this browser-based editor for the photos you're taking on your phone? It'll just be an app. And we went to the app market for photo editing and it was like, no, this is totally crowded and this can be a commodity. Yeah. So then we said, okay, can we do something else there? Storage or search or interesting machine learning stuff, combinational photography. And it felt like either it would go to the platforms or it would be sort of too early. the computational photography stuff we were looking at was like in retrospect quite a bit too early. Yeah. You know, more than a dozen years too early. That's right. And then we, you know, saw fireworks get killed and went, wait a second, maybe there's an opportunity there and started to form the thesis of as software gets easier to build, design becomes more important. Yeah. And there's going to be more designers hired because at the time it felt like this tiny market. Yeah. And then what it was in retrospect was a market that was rapidly growing. Yeah. And so design ratios changed a ton. And even just the five years after we started focusing on building a design tool. And then thankfully we had made that call and it still took quite a while, you know, there are a year and a half, two years before we got to the point where we had people using it outside of Figma. I guess this is a very profound example of you shouldn't use like VC thinking to decide what to work on because a lot of people might have looked at how many designers are there in the country and then multiplied that out by like whatever they thought they could spend. And it's like, oh, that, you know, that number is too small. I shouldn't work on that. Whereas you looked at your users and looked at where things were going, like from a much larger perspective and you know, you made a bet. You didn't necessarily know you were going to be right, but it turned out to be super right. I guess, you know, right. Like it's easier to say in retrospect. Yeah. But, and looking back, I can be very crystal clear about, oh, here's what we're doing. Here's a thesis. Yeah. I think in reality, you know, if you looked at the seed pitch for Figma in June, 2013, it was all over the place. Like we were saying, we're going to do like a million things. None of it made sense. It was all very murky. So yeah, I'm pretty impressed with Danny index because like, yes, let's go. You guys will figure it out. Yeah. I don't know if I'd be that prescient today. If I was looking at a seed stage company like that, I think that a lot of our framing up to investors at the time was sort of more of what you're saying. Oh yes. It's a small thing right now. We think it will grow, but also there's like all these other things we expand into. And a lot of the things we decided were, you know, creative tools at the time. And then what the irony of it is that like, that's not all the process we're in. We're in the process of creating software. Yeah. So, you know, how do you go from idea or brainstorming, diagramming and fig jam to, you know, thing with slides where you align to going to design where you're trying things and prototyping to gain development, shipping to production. We have a product dev mode for that. And you know, then once you're in production, how do you learn and how do you loop back to idea and make this loop continuous, then do that other places too. You know, we're like, oh, we'll go think about the existing markets that are out there. Not what's the new process needs to be created. And eventually we got there. Cause that's what our users pull us into, you know, fig jam, brainstorming. It was a behavior people were doing in Figma. We saw it, especially as pandemic hit, it's like, okay, let's pull it out into this new product and slides like people are creating all these slides and Figma design. Okay, great. Let's make a new product. I mean, the team really drove that to be honest. They just saw it and were like, we're going to go do this. The users pull the product right out of you. Yeah. It's a pretty powerful moment. Exactly. And demo the same thing. Same thing too. It goes back to like the diversity of users that are in Figma and how do we like make better experiences for them? Can you go back to the first prototype to like the first V1 that was generally available? Like, you know, when you're entering a space where fireworks existed, there's probably, you know, your spec or product feature list was like, you know, a hundred items long. What was that process like for you? You know, were you really methodical about it or was it, you know, we're going to do two weeks sprints and see what we can get done. Like what was the... It was a bit of both. Yeah. We had like a long list of things that we felt needed to be there. And some of them were like, maybe this is optional, maybe not. There was clearly table stakes. And when I look back to the first people that use Figma for real design work, they're minimalist because they liked how few features we had. So it's kind of interesting that there is like this group of designers that are minimalist out there that like a minimal tool. Yeah. And the second group maybe was people that, you know, like our first customers were Notion and Coda. Coda was called Krypton at the time. And I remember going to Shashir's office, because Shashir's the CEO of Coda. I think that they resonate with the fact that it was like cloud first, high performance in the browser because they wanted that for their own teams too. And I finally got, after like months of trying to get a team to adopt Figma for real, got Shashir and his designers to get excited about Figma, we got them like onboarded. So I think it was a few meetings once we were at that point of having table stakes features met. Mind you, this is not a point where like Figma is today, so there's no multiplayer now at this point, you know, and like a lot was broken. So for example, I remember going to a meeting when they finally said, we'll use it, let's give it a try. And we walked out, we're so stoked. And then we're driving home from there in Palo Alto, we're going back to SF, like 20 minutes into the drive, 30 minutes back, got this email that basically said, hey, thanks so much for coming by. The fonts broke. We can't read the fonts, local computer, that was a shitty thing that I built. And it was thanks so much, but we'll have to give it a try a few months. And so we just kind of like turn the car around, went back and like, no, no, we're back. We're still here. We'll sign up for you. Yeah. But we didn't tell them. That's the field install. Yeah. We didn't tell them at the time, Evan and I, that, you know, that was our, they were our first customer. Yeah. And I remember Shashir came in to Figma for all hands later, like years later, and introduced him as the first customer. He was like, I am? That's awesome. Yeah. I love that story. I mean, basically, this is also a great example of like, don't take no for an answer. And, you know, basically going into your first customer's office is a very powerful moment. Yeah. And showing that they will learn from them and that they have lots of feedback. Great. Like we'll prioritize it. I guess like some of the really banger features initially, I remember you guys had like really amazing sync, like multi-browser sync with like operational transforms. And I hadn't seen anyone else do that type of very fast updates across multiple browsers before. Was that like a moment that, you know, wowed the users or? Definitely. So it's interesting because we launched our closed beta in December 2015. Our GA was not until October of 2016. Oh, wow. So it was a little bit. A good gap. And when we launched the closed beta, there was no multiplayer. Yeah. It was just kind of like in the browser and here's this new design tool. High quality, but minimum feature set. And then in the sort of months following, Evan started working on our real-time collaboration multiplayer engine. And it took a while to build out. And I remember when we finally launched the GA in October of 2016, I mean, the comments we got were like, if this is the future of design, I'm changing careers. You know, the person commented about it and said, a camel is a horse designed by committee. So it's like very much this reaction from the design community. Interesting. So it's like the designer that's going to be in the corner, I'm going to do this amazing work and I'll do the grand reveal, which is kind of the agency mindset versus the product team approach of we're all in together. We're going to like work through this and figure it out. That's fascinating. And then one of our early users that tried out Figma, I remember he tweeted at the time, like kind of making fun of us, but in a nice way and said, oh, we're going to do a design party and like invite everybody to a Figma file where, you know, just like at the time there was not many limits on how many people can be in the file. There's public link sharing. There was no, you couldn't, there was no paying for Figma until like mid of 2017 and our servers like started breaking. And I mean like for the 48 hours after launch, you know, the team and Evan were just like firefighting and trying to like make sure this one file that was the design party didn't crash. That's hilarious. But it was like started as people making fun of Figma and turned out to be like this great advertisement of look at what you can do in Figma. And people started to jam in and actually make stuff together that they didn't even know each other. It's like, this is powerful. There's something here. So it showed what we were trying to show, even though people were maybe not buying into the message of the time. Yeah. That's fascinating. Your story is very interesting, especially for a lot of startup founders today, because I feel like, you know, it's very common. I'm sure you run across founders that you've probably funded that, you know, three, six months in, you know, it's not working. You know, I'm only a quarter of the way through the list. Like I want to pivot. I don't, you know, and then this is such a powerful example of sometimes you have to work through the list. Like it might take 18 months, it might take 24 months from like where you're at to a workable or usable thing. But in a way, that's the both, right? We had from August 2012 to May, June 2013, that was a period where we're pivoting, constantly trying lots of things. Yeah. But then, okay, we had a thesis, we went for it, felt like there was an opportunity and started to build it out more. And then it was, okay, it's going to take a while. I respect, like we had, we're lucky to have raised money and have resources. I should have hired faster once we started to get signal from the market around product market fit. So, I mean, I remember going to a user study with a friend at Coursera at the time, showed up at six o'clock after he finished work, offices were pretty empty. I brought a bottle of wine with me because the text editing experience and flow and figma was so slow and just writing things out took a long time. So, I knew we'd have to like drink some wine to get to the user study. We finished the entire bottle in that user study. And the next day or two years later or something, he followed up with me and sent me like 12 pages of a doc. It's like, here's all the stuff I want you to build and why. I should have taken something like that and gone, okay, this is clear product market pull. Like the market's pulling the product out of us. I should have then gone, okay, let's go hire faster. Let's, you know, figure out how to inflect growth of our internal team. I think instead I was still very cautious. And so that's something I wish that I, you know, if I could have gone back in time, I wish we could have, you know, kind of a little faster there. Yeah. I mean, basically when you catch lightning in a bottle, that's what it feels like. That's a great reminder. That was early before we even shipped it. So we didn't know, but I think now I look back and I'm like, there were signs that there was fit here, even if the product wasn't ready. The second part of your story is super interesting in that, you know, you did it, you built it, you put it out there, you made it collaborative. And then the initial reaction was we hate it. Or a skepticism at least. Yeah. Or yeah. I mean, basically they didn't understand what it was yet. And I don't know. I feel like that's a common human trait, period. Like you see the future and you're like, no, it's not for me. Did you have to do anything actively to undo that? Or was it just a matter of time? Like, you know, everything that is different will be hated on and you just have to ignore it and you like relentlessly seek the people who love it. And they're, you know, your best net promoters. I think a bit of both. I mean, we knew from before we even launched the closed beta, we were dogfooding Figma internally. And we knew from just using it ourselves every day to design Figma, very meta, what we needed to do just to make a better design tools for us. Part of that we discovered through the dogfooding phase, through the closed beta phase was it really sucks if I'm in a browser tab, you come into the same link. You edit something. I have a forced reload. I edit something. You have a forced reload. That's just a terrible experience. Yeah. Or if you lock files, you know, having to request an unlock, it's just not good. Yeah. And that was the default back then for every other product. And for us, we were like, okay, at minimum, we have to fix that so that you don't have this horrible user experience. And at best, we hope to unlock all these new workflows, but what they'll be exactly, it's unclear. Yeah. We'll have to see, but we'll have to see. And so I think we had deep conviction and at least to meet table stakes, making a good UX, we've got to do this. And then everyone sort of showed us the way of like how they could use Figma to do all these amazing things. Yeah. It's funny how often I end up using like a product that is not ready for prime time or not quite right. And then it's just full of bugs. And then you sort of wonder, like, do the developers actually use this product? And if you dig a little bit deeper, it's like, oh no, they actually don't dog food and they don't use it themselves. And then how could you actually make a good product without doing that? It's not possible, probably. I think that's probably the case. Yeah. I mean, everything we want in Figma always goes through a period of us really testing out internally until something like reaches, you know, the environment that we use to try things. Like that's for me when the clock starts, not before then. Can I ask you about like, I guess, design culture inside Figma and how you developed it? You know, is it as simple as at some level, like, if this is crap, I'm going to say it and we're not shipping this. What went into that culture like, you know, early on that built this thing that can like consistently create excellence? First of all, we've had the blessing of working with like amazing designers. I don't think it's ever been like, oh, this is crap. Like it's almost never a reaction I have when I'm at work because like we got a great team Yeah. That doesn't mean that like everyone's considering the full system or, you know, I think that some of the things that come up a lot are like, how complex are we willing to make it to give users functionality they want? And that interplay between, okay, Figma has got to be approachable, which we still have more work to do on approachability. We're always trying to make it more approachable, but also powerful. Yeah. And, you know, you're not just serving, you know, the power design user. You're also serving the user who has been in Figma like once in their life or never. Yeah. And how do you get them to be able to create something, have that experience right away? So we have to balance both. That's one tension that comes up in design culture. How do you make the simple thing simple, but the complex things possible? I think, yeah, plenty of other tensions that come up too. And usually it's just like for lack of context or having to reason through a very hard problem. One of the best parts about building something where you've got hard design and engineering challenges, you get to work with the best people. So I'm very thankful for the folks that work on the Figma team. The top level answer might just be have an amazing hiring process. Yeah. But also seek out like the best people in the world relentlessly to work with, because you're going to learn so much from them and they'll inspire whole new ways of thinking about the problem space. Like a lot of the innovations at Figma do come from our team. It's not like I'm sitting going, hey, like think about this thing and, you know, come with it. Internal things, culture, rituals. For example, we have a Hack Week concept, we call it Maker Week, because more than just the developers and engineers are doing stuff, is really the whole company. And it's the only rule is make Figma better in some way. Figma Slides is a great example, that came out of Maker Week. Yeah, it's amazing. But many of our best features, our best aspects of our platform, they've also kind of similar situations. Earlier, we were sort of talking about like that zero to one and then, you know, one to scaling. You know, do you have any advice for people who basically they made it to zero to one and then, you know, how do you nail the one to a billion? Like did your day to day change? Like you guys, you and your co-founder were probably in the weeds building a lot of the key features yourself with your own hands. And then at some point you were saying like, actually, I wish I started scaling earlier. I wish I started hiring people and built, you know, sort of care and feeding of the organization feels like the salient feature of like that second phase. You know, how did you navigate that? What would you tell the people who, you know, yeah, like it's happening, like the users are pulling it out, you know, pulling the product out of us and things like that. My main reflection, I was going to abstract it all the way to be useful to everyone's watching this. Absolutely. Sort of the loop you're always in is be self-aware. What are you doing the most of right now? Then go replace yourself with that task. If you've got the resources, if you don't have the resources, like figure out how to get them either by being profitable, by raising funding or by being really clever. And if you can kind of keep doing that loop, that's a sort of loop that'll lead to team building or lead to figuring out the way to delegate work properly. Like an OODA loop, I guess, you can just stay on. And if you can do that, like it'll lead you to do the right things. And I think the danger is you just get so reactive that like you never get to that sort of loop and you're never able to self-improve. the organization, which is, you know, easy to get to that state because there's always more to do. And as a founder, especially when it's just a few people, you're going to be doing, you know, a ton yourself as well. And not just taking this, like, you know, galaxy brain, bird's eye perspective. Like, that's never like actually what headspace you're in. But you have to figure out how to zoom out a little bit too. Yeah. So, Figma, you know, in this moment, like, what are you most excited about and where does it go from here? Yeah. I mean, I'm super excited about that loop we talked about and how do we make it so that you're able to develop software with your team. And I think that's, you know, two different aspects, right? There's the, how do I get started and prototyping quickly with new concepts, but also there's, I've got existing system I have to be in. How do I create that loop and iterate quickly as well? And how do you make that accessible to more people? Yeah. So there's so much improvement we can do for both of those. And I'm super psyched about like what we can do to enable people there. Obviously, Figma came up in a moment when LLMs and CodeGen were not happening yet. Do you think that's changed then, you know, for the founder who's starting out right now, what would you say to them? I think that even without, you know, the speed at which you can work now with new models and whatnot, I would definitely tell people move as fast as you can. And you can move faster, a lot faster right now. I mean, I think the speed at which folks are operating is incredible. I don't know if that's what you're witnessing every day. It feels like a moment where we're able to build in a really quick way. And I definitely, you know, when my team comes to me and says, Hey, we've got like a nine month roadmap on this feature. I'm like, what the fuck? What can we do to de-scope or figure out how to get it out faster to start talking to people and showing it to people? It's funny because a lot of people come to me and say, I think I should do this two year build on something. As someone who did one, what do you think? And I'm like, don't, if you don't have to, don't do that. Very few people have to do that. Very few. Some, like there's hard tech companies, you know, it's really cool to see YC investing there and backing stuff that's, you know, like, like boom or something like that, or these companies that are going to take a long time to get the thing out there as a giant, like mega project. But yeah, I think that, that most things don't have to be that. And if there's a way to move quicker, you should do it. Yeah. Dylan, thank you so much for spending time with us. You know, your story is a true inspiration to designers, engineers, and founders out there. So thanks for sharing it. Thank you, Gary."
  },
  {
    "name_video": "GPT-4.5 = Big Model Energy",
    "description_video": "GPT-4.5 is here, and it has major big model energy. OpenAI's largest model to date, it excels at natural conversation, creative tasks and complex planning.",
    "related_categories": [],
    "page_url": "/library/MF-gpt-4-5-big-model-energy",
    "youtube_url": "https://youtube.com/watch?v=5uBAQrg4SoQ",
    "mp3_file": "downloaded/GPT-4.5_=_Big_Model_Energy.mp3",
    "mp3_content": "GPT 4.5 is finally here, and it's OpenAI's largest and most human-like model to date. It's really the next step in scaling up unsupervised learning. It has a lot more deeper understanding of the world and human experience. 4.5 excels at natural conversation, creative tasks, and complex planning. It also hallucinates far less than previous models. However, reactions have been somewhat muted, largely because its benchmark improvements over GPT 4.0 are, relatively speaking, incremental. Still, this launch is an important milestone, and could be the foundation for the next generation of models. So let's decode what sets 4.5 apart, and what it tells us about the future of AI. After GPT 4.0 was released early in 2023, anticipation started building about what would come next. But months came and went, and the widely anticipated GPT 5.0 never arrived. Through 2024, rumours swirled around the internet about mysterious internal projects named Strawberry and Orion, fueling immense speculation about the future of AI. Finally, in December, OpenAI revealed the first of these new models, O1, a model capable of reasoning, or systematically thinking through complex problems step-by-step, clearly surpassing GPT 4.0 in maths, coding, and logical tasks. Anticipation then shifted towards another rumoured OpenAI project, Orion, which some speculated to be the future of AI. Recently, though, Sam Altman confirmed that Orion would actually be released as GPT 4.5. And now, it's finally here. 4.5 is by far OpenAI's largest model yet, potentially more than 10 times the size of GPT 4. And it represents a step forward in scaling up pre-training and post-training. The final step in the journey is to build a new model, in scaling up pre-training and post-training. The final result is the model that users can interact with today. But if it's not a frontier reasoning model, what is GPT 4.5 actually for? According to OpenAI researchers, 4.5 stands out for its emotional intelligence. You can have much more deeper conversations about maybe more curious facts that 4.0 or even 0.1 or 3.0 don't really know about. But also, we think that it has a much better understanding of what humans want. That it really gets what you mean when you ask for something. And that's been really the magical experience for people at OpenAI, for myself, working with the model. GPT 4.5 achieves around 61.9% accuracy on benchmarks like Simple QA, which evaluates how effectively models can answer single-relation factoid questions. That compares to GPT 4.0's 38.4%. It also cuts hallucination rates dramatically, down to roughly 37% from GPT 4.0's 61.2%. Practically speaking, this means 4.5 is more trustworthy for general inquiries than 4.0. On the creative side, GPT 4.5 seems to really shine. Whether you're drafting emails, generating imaginative stories, telling jokes, brainstorming new ideas, GPT 4.5 produces distinctly more human-like pros than 4.0. On the two benchmarks that evaluates a model's persuasive power, make-me-pay and make-me-say, 4.5 easily surpasses models like 4.0 and 4.1. Early high-taste testers on Twitter and other social media have also pointed out that 4.5 is often capable of actually being quite funny, and seems to understand irony in a way that other models fail to grasp. In our own testing of 4.5 before its public release, we found the model to be far better on these sort of softer, subjective tasks than other models. Unlike O1 or O3, which are measured more on hard metrics, researchers relied in part on vibes testing when measuring 4.5 outputs. Our key evaluation is working with humans who try out the models, who give us feedback on, you know, is this better than GPT 4, where is it better, where is it worse, and then that's something that we can adapt to. And we do a lot of work with these trainers, that's what we call them, to kind of align on what does it mean for something to be good, and then we use their feedback to improve. Of course, the problem with that is that it's quite hard to come up with specific evaluations of subjective areas like writing quality, emotional intelligence, and model feel. What is good writing, right, like what is good writing to you, what is good writing to me, I think that really depends on context, it depends on the audience. We're definitely trying to capture some of these things in evaluations, but it's just much more subjective, which is why we're putting it out there. We really want people to kind of try it out and tell us if they have the same experience that we're having. But GPT 4.5 is not without limitations. For one, it's far more expensive than any other OpenAI model right now. Per input token, 4.5 is 30x more expensive than 4.0, and per output token, it's 15x more. Such high costs mean GPT 4.5 is likely not yet a suitable option for those looking to deploy the model at scale. In terms of capabilities, as expected, when compared to specialized reasoning-first models like O1, GPT 4.5 falls notably short in things like structured reasoning domains, including complex STEM tasks, advanced math problems, and tough coding challenges. So what's the bigger picture here? GPT 4.5 shows that scaling unsupervised learning continues to yield valuable improvements in accuracy, emotional intelligence, and creativity, even if these gains are now perhaps more incremental than what we've previously seen. The era of scaling pre-training may not be completely over, but reasoning now appears to offer the most potential for squeezing gains out of scaling compute. That is to say, investing more at inference time rather than training. Looking ahead, Sam Altman has suggested that the two paradigms, unsupervised pre-training models like GPT 4.5 and specialized reasoning-focused models like O3, will converge into a unified architecture that we might see in GPT 5. We do think that reasoning is going to be a core capability of future models, but these two paradigms, they're not exclusive. They actually complement each other really well. So you could imagine that a model that has the knowledge and the intuition of GPT 4.5, but then combined with reasoning, that would be a really strong model. So GPT 4.5 is a crucial bridge towards that future. Models could soon blend vast world knowledge, creative fluency, emotional nuance, and advanced reasoning all in one model. The implications are incredibly exciting. The era of choosing between broad understanding and powerful reasoning may soon come to an end. GPT 4.5 provides a glimpse into that future, one where AI systems combine the best of both paradigms. I have news for you guys. YC is throwing our first ever AI startup school in San Francisco on June 16th and 17th. Elon Musk, Satya Nadella, Sam Altman, Andrej Karpathy, Andrew Ng, and Fei-Fei Li are just a few of those confirmed. The world's top AI experts and founders who will teach you how to build the future. It's a free conference just for computer science grad students, undergrads, and new grads in AI and AI research. And we'll even cover your travel to SF. But you have to apply and space is limited. Link in the description to apply for a spot."
  },
  {
    "name_video": "Vibe Coding Is The Future",
    "description_video": "Andrej Karpathy recently coined the term “vibe coding” to describe how LLMs are getting so good that devs can simply “give in to the vibes, embrace exponentials, and forget that the code even exists.” We surveyed YC founders to get their take on how this new way of programming is changing how products are built.",
    "related_categories": [],
    "page_url": "/library/ME-vibe-coding-is-the-future",
    "youtube_url": "https://youtube.com/watch?v=IACHfKmZMr8",
    "mp3_file": "downloaded/Vibe_Coding_Is_The_Future.mp3",
    "mp3_content": "It's like somebody dropped some, like, giant beanstalk seeds at night. We woke up in the morning and everyone was like, whoa! What's going on? I mean, I think our sense right now is this isn't a fad. This isn't going away. This is actually the dominant way to code. And if you're not doing it, like you might just be left behind. Welcome back to another episode of The Light Cone. I'm Gary. This is Jared, Harj, and Diana, and we're partners at Y Combinator. Collectively, we've funded companies worth hundreds of billions of dollars right when it was just an idea and a few people. So today we're talking about vibe coding, which is from a Andrej Karpathy post that went viral recently. There's a new kind of coding I call vibe coding, where you fully give in to the vibes, embrace exponentials, and forget that the code even exists. Yeah, so we surveyed the founders in the current YC batch to get their take on vibe coding. And we essentially asked them a bunch of questions. We asked them, what tools are you using? How has your workflows changed? And so generally, where do you think the future of software engineering is going and how will the role of software engineer change as we get into a world of vibe coding? And we got like some pretty interesting responses. Anyone have any favorite quotes that jumped out from the founders? I think one of them that I can read verbatim is, I think the role of software engineer will transition to product engineer. Human taste is now more important than ever as code and tools make everyone a 10x engineer. That's from the founder of Outlet. I got one. Abhi from Astra said, I don't write code much. I just think and review. This is like a super technical founder who's like last company was also a DevTools company. He's like extremely able to code. And so it's fascinating to have people like that saying things like this. There's another quote from a different Abhi, Abhi from Copycat, who said he's, I am far less attached to my code now. So my decisions on whether we decide to scrap or refactor code are less biased. Since I can code three times as fast, it's easy for me to scrap and rewrite if I need to. And then I guess the really cool thing about this stuff is it actually parallelizes really well. So Yoav from K6D, he says, I write everything with cursor. Sometimes I even have two windows of cursor open in parallel and I prompt them on two different features, which makes sense. Why not three? You know, you can do a lot actually. And I think another one that's great is from the founder of Trainloop, he mentions how coding has changed six to one month ago. 10x speed up one month ago to now is 100x speed up, exponential acceleration. And he says, I'm no longer an engineer. I'm a product person. Yeah, that's super interesting. I think like that might be something that's happening broadly. You know, it really ends up being two different roles. I mean, it actually maps to how engineers sort of self-assign today in that either you're, you know, front end or back end. And then back end ends up being about actually infrastructure. And then front end is so much more actually being a PM. You're sort of almost being like an ethnographer going into the obscure, underserved parts of the pie of GDP. And you're trying to extract out like, this is what those people in that GDP pie actually want. And then I'm going to, you know, turn that into code. And then actually evals are the most important part of that. When I was running TripleByte, this was actually one of the things we noticed. It was almost as important as a technical assessment of engineers when trying to figure out who's a good match for a specific company is there's a certain threshold of technical ability you need. But beyond that, it was, do you actually want to talk to users or not? Like some engineers are actually just very, a lot more motivated by working on things where they know who the users are and they get to like communicate with them and they get live feedback and they can iterate and essentially being a product engineer. And other engineers really don't want to do that at all. They find it annoying having to deal with users and they want to just like work on like hard technical problems and refactor code. That's a back end engineer. Yeah, that's what we call a back end engineer. Yeah, sure. And that's certainly a theme that came up in the survey responses, right? This idea of sort of the LLMs are maybe going to push people to choose because the actual writing of the code may become less important. It's about, are you really, do you have taste and you want to solve product problems or are you an architect and you want to solve systems problems? Oh, and interestingly, I guess one thing the survey did indicate is that this stuff is terrible at debugging. Yeah. And so you still, the humans have to do the debugging still. They have to figure out, well, what is the code actually doing? Here's a bug. Where's, you know, spot the bug. Where's the code path that, you know, we have some logic error, you know, just didn't figure this out. Right. There doesn't seem to be a way to just tell it debug. You were saying that you have to be very explicit, like as if giving instructions to a first time software engineer. I have to really spoon feed it the instructions to get it to debug stuff, or you can kind of embrace the vibes. I'd say Andrej Karpathy style is just like ignore the bug and just like re-roll, just like, just like tell it to try again from scratch. Like it's, it's wild how your coding style changes when actually writing the code becomes a thousand X cheaper. Like as a human, you would never just like blow away something that you'd worked on for a long time and rewrite it from scratch because you had a bug. You'd like, you'd always fix the bug, but like for the LLM, if you can just like rewrite a thousand lines of code in like six seconds, like why not? That's kind of like writing, you know, taking the approach of, you know, how people use mid journey or playground when you're trying to generate images. Like if there are artifacts or things that I don't like, sometimes I don't even change the prompt. I just click re-roll and I do that five times. And, you know, sometimes it just works. I'm just like, oh, I can use that now. Which is a very different frame of building systems because you're not building foundationally step by step. You're really doing it from scratch because fundamentally what's going on is like all these tools today are coming from the world of a generated code that are in this latent space hidden somewhere. And you have to do it from scratch to find like a different gradient and not get stuck. And then you want to like add a bit of randomness, get it to regenerate. But I do think maybe, I don't know, whatever next generation of 0.5, maybe we'll get to the point that actually is able to build upon. I mean, as of right now, I think most of it is you need to re-roll and re-write, but it doesn't build upon it yet. But we haven't seen any of the coding tools right now work well with reasoning. I think we have. Well, 0.3 is infinitely better at debugging than 3.5 Sonnet. So like it definitely feels like we're headed in the direction where this may not be true in six months the next time we do this episode. Diana, do you want to talk about like the models that people are using, the IDEs that the people are using? There's some really interesting trends there. Yeah, I think as we mentioned a couple episodes ago, we already saw this in the shift started happening. The vibe started to shift back in summer 24 when Cursor was being used by a big portion of the batch. And now by far is the leader. But the other thing that's happening, this is a very fast and moving environment. Windsurf is a fast follower. It's starting to be a very good product as opposed to Cursor. And I think, Jared, you have some first experience with why Windsurf is like better than Cursor. Yeah, I think the number one reason that people are switching is that Cursor today largely needs to be told what files to look at in your codebase. So if you have a large codebase, you can tell what to do, but you have to tell it like where to look in the codebase. Windsurf indexes your whole codebase and it's pretty good at figuring out what files to look at on its own. There's other differences, too, but I think that's the most important one at the moment. Notable, Devin does get mentioned, but the drawback of Devin not really being used for serious features is that it doesn't really understand the codebase. It's being used mostly for small features and barely, it's like barely mentioned. The other one, people still use ChatJPT and the reason they use it is because they want to actually use the reasoning model. So it does get posted, people post some of the debugging questions to figure out the use of more powerful models for reasoning. Because right now, Cursor, Windsurf are still in the old world, I mean, old world less than six months ago, of pre-reasoning models, not in the test time compute. So founders are using that. And there's some founders, some of them are self-hosted as well, self-hosting models, because maybe they have more critical, sensitive IP. They do that. And now talking about the shifts in terms of models, the thing about CodeGen, the big game in town that we saw six months ago was Cloud Sonnet 3.5. It's still actually a big contender. Most are still using it. But O1, O1 Pro and O3, meaning all these reasoning models are starting to see, it's almost like getting neck to neck now close with Sonnet 3.5. The other one is 4.0, virtually no use for CodeGen. And the other interesting thing is DeepSeek R1 is getting mentioned. It's been used, it's like a viable contender as well. And Gemini, not really mentioned. The one thing I've heard from Gemini is because it has like the longest context window, I've heard from a couple of founders that they do use it. And the way that they use it is they put their entire code base into the Gemini context window and they just like tell it to like fix a bug. And it doesn't always work, but like sometimes it can just like one shot fixed up because it's the whole thing in the context window. It will be interesting to see as people get more adoption on the newly released reasoning models with Flashback 2.0. I don't think people have tried it yet, but the long context window plus reasoning could be a good contender. What is the estimated code that's being written by LLMs in the current Badger? This is pretty crazy. So we explicitly asked this question, what percent of your code base do you estimate is AI generated? The way I interpret the question is like of the actual characters in your code base, not including any libraries that you imported, like a percentage of like the characters were like typed by human hands versus like emitted by an LLM. And the crazy thing is one quarter of the founders said that more than 95 percent of their code base was AI generated, which is like an insane statistic. And it's not like we funded a bunch of non-technical founders, like every one of these people is like highly technical, completely capable of building their own product from scratch. A year ago, they would have built their own product from scratch. But now 95 percent of it is built by an AI. Except for, you know, maybe it sounds like we have one or two examples of people who they're so young that they learned to code in the last two years. So they actually don't know a world where Cursor didn't exist. Yeah, this is one of my best companies. This batch actually is exactly this. The founders are extremely technical minds, but they're not classically trained in computer science and programming. And they are incredibly productive and able to produce just a ton of like really amazing product. And AI is writing almost the entire thing. It kind of makes me think a lot of the discourse around sort of Gen Zs are the first digital native that grew up with the Internet. This is like the generation that grew up with native AI coding tools that they skip the classical training of a software engineer and they just do it with the vibe. But they are actually very technical minded. I mean, they have degrees in math and physics. So they have that raw, let's call it more like system thinking type of mind that you still need. Maybe we should talk a bit about that. It's like what's still the same and what has changed? I think this vibe coding will enable people who have those kinds of technical minds who come from other technical disciplines like math and physics to become highly productive as programmers much faster than it was in the past. Like I remember there were like coding boot camps. Like back in the day, they would try to like retrain physics people into programmers. And like it didn't work that well because it just takes too long to learn all of the syntax and all of the libraries and all the stuff that you have to know to be really productive. But like now, now it's a new world. The coding boot camps are also very specifically focused on getting you hired at companies. And I think there was, it was during this around like 2015 era, where just companies themselves are rethinking how to evaluate software engineers and their hiring processes. And it was moving, there was a real shift away from like, we want to hire classically trained computer scientists, whiteboard algorithmic problems towards we actually want people who are just really productive and write code quickly. And some of these arguments are like evergreen eternal, right? Like I remember when Rails first came out, there was just like a real sense of, oh, like, I don't know, like active record as a way to like interact with your database was seen as a great abstraction. But like, there was still the same flavor of argument, right? Like, I don't know, like, if you don't really understand the internals, like you're just going to write like crappy, low performance web software. How do you feel those arguments have aged, if you look back on it now? My feeling is that many of the most successful companies, I would say, Stripe, Gusto, are just two that really spring to my mind as ones that really heavily leaned into the actually, we just want people who are really productive with the tools. And we're going to change our whole hiring process to just select for people who are good at like the interview shifted from teach us how you think to you've got three hours on the laptop, and you need to build a to do list app and build it as quickly as you can. And those companies have had a tremendous amount of success. It does seem like at some point, as they grew and they scaled, then the bottleneck did actually become having people who are classically trained and systems thinkers to sort of scale up and architect things. It does seem like how people are hiring engineers is changing, but maybe not changing fast enough yet. The results of the survey are relatively surprising to the four of us here. Probably pretty shocking out there. It's just like this thing that popped up in our backyard only in the last six to nine months. My guess would be engineering hiring period has not actually caught up to this. People are still standing at whiteboards and doing that kind of thing as opposed to what can you get done. And so it sounds like the Stripes of the world, they were ahead of the game and everyone has to hire engineers this way now. I mean, I wonder if actually even that's going to be sort of the old meta. I mean, something that stood out from the survey responses was this idea of two themes we talked about, right? Like one is, okay, we're all just product people now. Like actually the thing that you need is really great taste and understand what to build. And the second was the idea of actually now what's really valuable is to be like a systems thinker and an architect and to really sort of understand the bigger picture. In which case, actually like maybe being a really productive coder, because that's definitely something that always fit my definition of when you're talking about who are great engineers, you know, and like the one that dimensions are, they're just really put like they can write code really fast. Yes. Like maybe that's outdated. Like maybe that's not, if the LLMs are actually really good at writing code quickly. Right. And to your point, like now it's actually just cheaper to like re-roll and just like write everything from scratch and try and debug. Like the skills might just be completely different. Problem is there's like two different stages. There's zero to one, which in which case speed is the only thing that matters. And then to your point about ActiveRecord and Rails, that battle was actually fought to a standstill because of course using ActiveRecord or Rails allowed you to go from zero to one very quickly. But then what happened to Twitter? It became the fail whale, right? Like basically once you get to one, like one, you know, that architecture will not get you to a billion or 10 billion or a hundred billion dollars in valuation or users or whatever. Like it's just not going to actually work. So I think you're going to see the same thing. And then there's nuance in what you just said, right? Like getting zero to one quickly and then being able to scale to a billion users are two totally different sets. And then I think that that might be irreplaceable for now around people. And one of the things I discovered as we were scaling one of the biggest Rails sites, I mean, you scaled one of the biggest Rails sites too, is that there aren't that many people who have to do it. Getting to one is so rare. Yeah, that's true. Did you reach this point where how you got to zero to one very quickly was like you used lots and lots of open source. And then at some point, like maybe two years into this, maybe a year and a half into the startup, even, we could not use random gems anymore. Gems anymore, because they were just never designed for companies at our scale. And so we had to deploy it. And it would fall over. It would just fall over. This very good example is what you're saying, Gary. I think maybe to summarize a bit more, zero to one will be great for vibe coding where founders can ship features very quickly. But once they hit product market fit, they're still going to have a lot of really hardcore systems engineering where you need to get from the one to end and you need to hire very different kinds of people. And to that, I think there's very good historical example, like Facebook as well. I mean, they... they got away with PHP, which personally is a terrible language. Maybe I got flamed, but I think it's a bad language. I'm with you. I never liked it. Sorry, guys. It was very bad, but you could ship things very quickly. But at some point it became such a big bottleneck for them to ship features that they had to hire the hardcore system people to build a custom compiler, HipHop, that it would run fast on bare metal because it was just too expensive to replace all the code. And that kind of people that did that are not the Bytecode people, are sort of this hardcore systems people that, based on our survey, current tools are not good at that low-level systems engineering. Harj, I'm not sure everybody who's listening knows what TripleByte is, but it's actually very relevant. Do you want to just describe for everybody what- Yeah, TripleByte is a company I started in 2015, and we were essentially building a technical assessment for engineers. Like, our goal was how can you use software to automate evaluating software engineers? And the way we did it was pre all these code gen models, which is we built all of our own custom software to interview engineers, have humans interview engineers, and then essentially just like label the data, like in every- And interview them by like asking them to write code. They did, these are highly technical interviews. Yeah, it was a high tech, yes. Like it was asking them to write code. We did actually include algorithmic problems. And is it true that you and your co-founders have done more technical interviews than any other people on the planet? I think so. In terms of just like pure hours, because that was just like the early days of it, where like all day, every day, it just- Like thousands. Thousands and thousands of them, right? And then we scaled up and we had like a team of about like a hundred engineers contracted just that we would pay per interview completed. And so you're exactly the right person to ask this question, because you've literally spent more time thinking about this than anyone else on the planet. If you were starting TripleByte again today, and you had to design like new technical assessments for engineers, what would you have them do? The big takeaway I had with TripleByte and the screen in particular is just, people want different things. And so you kind of need to know upfront like what exactly it is that you're evaluating for, and then design your technical screen around that. It's kind of what I'm getting at with where Stripe and Guster and these companies just knew that they didn't care if someone had fundamental CS knowledge. So it didn't make sense to screen them on that. They wanted to screen for the thing they were actually gonna do in their job. And then our product was more trying to screen for everything, trying to get a taste of everything companies might want, and then figure out what someone's max skill was, and then send the people with the max skill to the companies that would value that max skill. And in today's world, I think I would actually have a screen that at least accounted for just how well people knew how to use these tools. Like, and I'm sorry, again, it's very contradicting what I'm saying earlier, but it might be the case of maybe how product, how quickly you can code and you can build product is actually something to explicitly screen on and just set the bar much higher. You probably have to ask different questions because I'll bet if you go back to the original TripleByte assessment, I'll bet a lot of those questions, you could literally just copy and paste the question into chat GPT and it would spit out a perfect answer. In which case you're not really proving that much competence if you're just copy, like the questions probably have to be like a hundred times harder. Well, it depends, I mean, this gets to the deepest stuff, right? Not necessarily, because if you have someone else, it depends on like what conditions you're gonna put on the screen, which I think is interesting. So, I don't know, classic question was like, build Tic-Tac-Toe. Yes, of course, if you do that unsupervised and you just let someone like come back with their Tic-Tac-Toe solution, that's gonna take like two seconds, right? If you want to watch them code it and force them to not use an LLM, why ask that question? Well, I guess that's the question. Do you force them to code it without an LLM? That I think- With like the old questions, or do you let them use an LLM and now you need new questions because the old ones became trivial? That I think is what everyone hiring software engineers right now should be thinking about and trying to figure out. Yeah, I'm not sure I know what the correct answer is to that. Wow, interesting. I think that's gonna be, probably you're gonna test for different things because I also did a lot of engineering hiring. I think one key skill that's gonna, I think remain that's constant, I do think skills of reading code and debugging are maximum. Is like, you have to have the taste and enough training to know that the LLM is spitting bad stuff or good stuff. So like bad code or good. And I think you can see it clearly sometimes if a candidate is using the tools and there's actually a reasonable solution that the LLM outputs and then the candidate is like, oh, this is actually bad. That is a sign. So I think knowing kind of more the high level thinking to know what is good versus bad. In order to do good by coding, you still need to have the taste and you still need that kind of classical, maybe not necessarily classical train, but enough knowledge to judge what's good versus bad. And you only become good with enough practice. I think that will be one that will be constant. That would be my opinion. Yeah, that's interesting. Just code or it's sort of like more like code review as the interview versus like actually like producing code. Yeah, I mean, you could have some form of system design. You wanna know how good they can put a product out there. So then it's testing for taste. So we're gonna test for debugging and then taste. But then how do you get to, I guess this is a question going to these kids that you have that we call it AI coding natives. How do you develop taste when you don't come from a classically trained world? Which would be interesting for next generation. Well, you have to, because if you don't, the startup dies, right? So let's say this founder, they go off, they have 95% written by AI. The proof is in a year out, two years out, they have 100 million users on that thing. Does it fall over or not? And then one of the things that's pretty clear is these systems in the first realm, the first versions of reasoning models, they're not that good at debugging. So you actually would need to descend down into the depths of what's actually happening. And if you can't, then you got, I mean, let's hope that they can go find another architect. They're gonna have to hire someone who can. I think there's gonna be a generation of software engineers that are like good enough because it's so easy to retool there with all these code gen tools. Like the barrier is so low. You're gonna be good enough engineers, there's gonna be tons of those. But to be exceptional, like the top 1%, I think you're gonna need to get into deliberate practice. I mean, the analogy we're talking about is Malcolm Gladwell popularized this concept of 10,000 hours of practice to become an expert, which came from this research from, what was his name? Anders Ericsson. Anders Ericsson, right? Which it wasn't just, the research was very specific. It was about how do you find world-class violinists? And it wasn't about just putting the time, but deliberate practice. It's like hours that are actually planned and thought and it's hard work. You could become an expert with less hours. So I think what's happening with now code gen tools is that it's very cheap to put in the hours because the output is just so quickly. You can get to good enough, but to become the best in the world and the best founder, you're gonna need that deliberate practice to go into the details. And you're gonna have to peel the onion and understand the systems and get to, again, to some extent being classically trained. I mean, a good example is maybe we go back to history. It's like Picasso, one of the greatest painters, he was amazing at drawing lifelike pictures. Which is not what he's famous for. Of course, when you imagine a Picasso, you imagine the opposite of that. Yeah, there's this famous sequence of drawings on how he got to a abstract ball. It starts from being lifelike to iterations until he gets to the essence, to kind of the abstract art that he's very well known for. But he could only get to be the best in the world because he was actually a very good painter and classically trained and could draw super well, but that's not what he's known for. So I do think we'll see these two classes of engineers. You'll still have a very fat class of good enough. You need engineers for those, but the best in the world, the founders that become outliers are going to need to put in the deliberate practice. Yes and no. I mean, I think there are lots of really amazing examples of great systems level and world-class engineers who ended up being CEO and CEO of the biggest public companies in the world. I think of Max Levchin. I think of Toby Lutke from Shopify. I mean, these are people who just like actually that great. And the thing is there are lots of other people who are not that great, but also still CEO or co-founders of companies. And then it kind of goes back to link up what we were saying earlier. It goes back to hiring. I mean, I keep thinking about the Twitter analogy that you brought up, because I think it's a really interesting one. Like if you compare Facebook and Twitter, in both cases, they went very quickly from zero to one in sort of a scrappy, move fast, break things way. Facebook was able to solve the scaling technical challenges in a pretty impressive way. I think most people would agree. I mean, Mark Zuckerberg was by far way more technical and way more in the weeds probably. Maybe, but I don't know. I think Twitter scalability challenges were also harder based on the usage patterns. Like the thing about the usage of Facebook is that it's pretty smooth throughout the day. Like people just use it all the time. The problem with Twitter is that the usage is incredibly spiky. You get like a Superbowl or like a world event, and all of a sudden you have like 10 times as much usage. The way the fan out of the feed works is I think like fundamentally a very difficult computer science problem. Okay, that's fair. Though I also think that they were like really hamstrung by their tools. Do you remember using this terrible queue system called Starling? Absolutely. I used it because I thought, oh, Twitter is so much bigger than us. They're so smart. They wouldn't use something that's crap. No, they totally use crap. And then I use crap and I couldn't make it work. And it was like, it was dropping jobs on the floor. Like it's just like all these crazy bugs happened. And then I was like, finally, I was like, I'm not using that anymore. I have to switch to RabbitMQ or whatever the heck the actually correct thing to use was. Yeah, and like Ruby is an incredibly slow language, even like 10x slower than PHP, which was already too slow. So, I don't know. I mean, basically you should be so lucky to get to one. Yeah. Is there an advantage for a technical founder to be classically trained and be a really deep systems thinker? Well, I mean, you just, I mean, a Toby or a Max Levchin is not going to get bullshitted by people. I'll tell you- Apart from Stripe is the same. I mean, I'll tell you a crazy story. When I was at Palantir, I sort of burnt out there after a couple of years after I designed the logo. And then I actually, between that and going to start my YC startup, I spent six months as a interaction designer. And I was at, it was this like terrible venture backed company that ended up going in the ground. And it was like credit card software is the worst. I spent six months building like basically just interaction designs, which was really fun. That's what allowed me to work on my startup in my spare time, because I had a lot of spare time. But I remember designing, this faceted search thing for like rental cars or something like that. And then I go into my meeting with my dev manager and engineers who were going to implement it. And they were like, oh yeah, it can't be done. We can't do it that way. Oh, like, and I was like, what are you talking about? Just make the indexes like this. And they were like, whoa, what do you mean? Like, and then they looked up my resume. Didn't expect to hear that from your interaction designer. Yeah, basically they're like, how did you know that? And I was like, you fucking lied to me. And that's the thing. What founders, and when you're hiring people, that was the wildest thing to me. But it was sort of the ultimate lesson where it's like when you're in the workplace, you sort of assume that the people you bring on, they're not gonna lie. They're not lazy. We're all for the goal and the mission, right? And I was like, no. People who you hire, they totally will lie to you if you cannot tell that they're lying. And then the worst part is you kind of have to call them on it. Sometimes you have workplace cultures that are so polite that people are like, oh, I'm gonna let that pass and then I'm gonna talk shit about them behind their back. And it's like, no, you should fire them. The AI agents, incidentally, will do exactly the same thing. They will absolutely, the AI agents will bullshit you just like a human employee will if you're not technical enough to call them out on their bullshit and be like, no, you didn't make the change that I asked you for. It goes back to your point about why being classically trained is still helpful. Like you have to be able to call out all the people working for you, whether they're human or not. Being technical enough to be able to do that is a superpower. So just to wrap up, basically what's going on with all these tools giving superpowers to the best engineers and making the bad engineers also worse is this is a quote from the founder of a train loop, how coding has changed six to one month ago, 10x speed up. Now one month ago, 100x speed up. Now it's exponential acceleration. It sort of crept up on us, actually. Yeah, it was like somebody dropped some like giant beanstalk seeds at night and we woke up in the morning and everyone's like, whoa! What's going on? So, I mean, I think our sense right now is this isn't a fad, this isn't going away. This is actually the dominant way to code. And if you're not doing it, like you might just be left behind. This is just here to stay. And, you know, vibe coding is not a fad. It's time to accelerate. So with that, we'll see you guys for the next Light Cone. ♪♪♪"
  },
  {
    "name_video": "Design Experts Critique AI Interfaces",
    "description_video": "YC's Aaron Epstein and Raphael Schaad, founder & designer of Cron (now Notion Calendar) review a wide variety of AI user interfaces— from agents and adaptive UI to video prompts and realistic voice APIs— to get a glimpse of how it is changing the future of software.",
    "related_categories": [],
    "page_url": "/library/MD-design-experts-critique-ai-interfaces",
    "youtube_url": "https://youtube.com/watch?v=DBhSfROq3wU",
    "mp3_file": "downloaded/Design_Experts_Critique_AI_Interfaces.mp3",
    "mp3_content": "Over the next decade, new AI user interfaces are going to emerge beyond the common chat UI that we're all familiar with. So in this episode, I will be joined by Raphael Schad, the creator of Notion Calendar, and together we'll review a bunch of cutting-edge AI interfaces that will give us a glimpse of what the future might look like. Welcome to another episode of Design Review. Raphael, welcome. Thank you for joining us today. Thank you so much for having me. Yeah. Talk a little about how you think interfaces are going to change in the age of AI. We'll look at some examples in a minute, but from a high level, what are the differences between kind of the, say, static web-based 2D interfaces that we're used to today with where things are going in the future? Sure. I think a big difference is that software of today, or kind of like up until this point, was mostly kind of like just clear things you can point at on the screen that are, you know, kind of nouns, like text, forms, drop-downs, buttons, etc. And with AI, what really changes is, I think, so much of the design of what AI does is kind of more verbs. It's more the workflows, autocomplete, autosuggest, go out and gather some information from me, etc. And we don't really have the tooling yet to kind of draw verbs on the screen. And so that's what's really fascinating, how, you know, this software is now emerging in this new AI world. Awesome. Well, let's take a look at some examples that were submitted by the YC community. The first one that we're going to take a look at here is VAPI, which is Voice AI for Developers. All right. So VAPI lets developers build, test, and deploy voice agents in minutes rather than months. And it looks like there's a microphone icon here where we can just click it and give it a try. Welcome to VAPI. I'm an assistant that you can talk to like a person. So how's your day going? Going great. And it looks like this demo and website is really targeted at the developer that would actually implement this technology, not so much the user that will eventually use it. You're spot on. VAPI is definitely more geared towards developers who want to integrate voice assistant capabilities into their apps or phone numbers. But hey, even if you're not a developer, feel free to give it a spin. So one of the first things that I noticed was that when I was speaking, there was no visual feedback, making it clear that my voice is actually recognized by the microphone. And then similarly, when the voice was answering, there was no sort of like visual indication that that's what's happening. So for example, if our laptop was on mute, we were not sure whether the demo was broken or what's going on. So important, I guess, to kind of pair multimodal cues. So not just rely on voice in these type of scenarios where you do have a screen. On the phone, that would be a different scenario. I think one of the other interesting things to try here is when you're talking to a human, the latency is really important and also interruptions. And it felt pretty fast and pretty natural when we were conversing. I wonder what would happen if we tried to interrupt it. Would it be able to handle it? Let's try it. And one of the things that I actually do really like here is that they always, because it's developer focused, they always rendered kind of like a little label that shows you instantly for each answer, the milliseconds of the delay, really kind of building you an intuition, you know, how many milliseconds feels natural versus kind of feels like, oh, I'm talking to a robot. That's a great point because the latency is the interface in some ways in that how fast it responds to you, the longer it takes, the less it feels like a natural conversation, and the more it feels like you're talking to a robot. The whole point is to make it seem like you're talking to a human. Yeah, and it almost seems like we're basically talking here to kind of like the deaf mode of this technology. And so whenever you can and are in this situation, like what are all the things that you might be able to expose, such as kind of the milliseconds of latency? Like think of it as deaf mode versus sort of like production mode. Yeah, let's try to interrupt her here. Welcome to VAPI. Hi, I was wondering if you could tell me what the weather is. So how's your day going? All right, so two things happened. One, it didn't pause when you were interrupting. And then two, it entirely missed your question when it actually got done with its own sort of agenda. Yeah, awesome. Well, I think my takeaway here is one, developer focused. Number two, showing the latency was actually key because that's so much of what makes this actually feel natural as a human interface. And the voice felt like I was talking to a human, which was pretty incredible. Pretty incredible that startups can now have these things that previously kind of felt like a huge company needs to build this technology. Yeah, it's amazing. It's like you would have thought this would be 100 years away, not available today. Totally. Great. Thank you, VAPI. Okay, next up, we've got Retail AI. And they say supercharge your call operations with Voice AI. So this is another Voice AI. What I thought was interesting on this one, we can actually try it with live phone calls and having their AI voice agent call us and run through some of these different scenarios that they have. A receptionist, setting appointments, lead qualification surveys. But I haven't been paying my debts, so we're going to go debt collection here. And I'll put in my phone number and my name and email address. Submitted. Wow, I'm actually getting a call. My phone is ringing. Hi, is this Aaron? Yes, this is Aaron. Hi, Aaron, this is James from Retail Debt Collection Company. The reason for my call today is to discuss the outstanding balance on your account, which is currently $800. This balance is past due. Have you received our email notification about this? Oh, I'm sorry, this is not Aaron. This is Steve. Oh, my apologies, Steve. Can you connect me with Aaron by any chance? You know, I haven't seen Aaron for a while. He might be on vacation or something. Got it, Steve. Sorry for the mix-up. We must have made a mistake. Hope you have a wonderful rest of your day. All right, I successfully evaded my debt collection. Awesome. First of all, latency is an issue, huh? That's what kind of like breaks the illusion of this being a real person? Yeah, I think one of the things that stood out to me is like, I threw it a curveball and it totally adjusted because when I typed in the form here, I told it that my name was Aaron and a simple system would just keep referring to me as Aaron throughout the entire call. And halfway through, I told it, oh, no, actually, this is not Aaron. This is Steve. And it referred to me as Steve after that. That was really cool, yeah. So it actually learned from the conversation. And to like build on that, there's room for improvement where you could then not just say like, oh, sorry, I made a mistake, but actually follow sort of like your cue of you, you know, knowing Aaron, right? But he's on vacation. But it kind of like just shut down. And that's when it started to feel a little bit more robotic. And there's clearly kind of like more room for improving, but already like a great first step that it picked that up. And again, like the voice felt incredibly realistic. It felt like I was talking to a human. I agree with you. Just the latency was the only thing that gave me a clue that maybe this was not a human. Yeah. And one of the interesting things here is that this may kind of be technology used in a first line of sort of like, you know, a defense. And then you can kind of bring a human into the loop when sort of like, you know, maybe 50% of these calls go through robotically. And then you can bring in the human for the rest, like, for example, you. Yes, absolutely. And there's a transcript and a lot more information that a human could then follow up on. So this eliminates a lot of the grunt work or, you know, work that people are just kind of outsourcing to try to get done in a more automated way. Totally. So you're hinting kind of, you know, the backside of this product that we currently don't see. But you can imagine like really rich UI, AI UI, that then kind of shows what happened during the call to the call center operator that is a whole other side of this technology in this company. Well, Retail AI, this was amazing. Thank you. Now let's take a look at some AI agents. And so agents are effectively autonomous AI that can go out behind the scenes and can interface with websites. It can make phone calls. It can interact with users. Lots of things autonomously and then kind of bring back their findings or complete actions on behalf of the business. Right. They have a few high-level instructions and then just go execute autonomously. Yep, exactly. So first one we should take a look at here is Gumloop. 10x your output with AI automation. No coding required. And I think what they're alluding to here is that when you have these agents, they're executing autonomously and they're making decisions at each step along the way of what to do next. And it's hard as a human who's trying to oversee this and making sure that they're doing the right things to monitor that and make sure that they're on the right track. So this, I think, is one way to do that, which is to show visual workflows, which is, I think, what we're going to get from Gumloop here. Cool, let's give it a try. Let's try start from a template. And we've got one here for web scraping. Scraping the YC directory. All right, let's try this template. And let's begin customizing the template. Okay, cool. So it looks like what we've got here is a big open-ended canvas that we can pan around and zoom in on that gives us a bunch of boxes for each step in the flow. And canvas has really emerged as a really interesting kind of almost new document type that seems to lend itself pretty well to not just kind of for design tools or kind of brainstorming tools, but lends itself really well for these sort of modeling these kind of like AI processes. Yeah, it's great because it gives us, the user, a visual overflow of exactly what steps the agent is going to take. And we can control what it should do at each of these steps. So for example, the first one here is, it gets input, which it says, specify the batch code like W24 and go get a coffee. So this is, what should it ask the user at this step? Then it combines text, where it basically combines it with this URL right here. And then it will take that and it will use the web agent scraper to execute the URL to get all of the data from the website. It will then extract the data that is on that website, combine text, put it in a list. And so you can see all the steps here. So one of the things that does pretty well is using color to show different type of notes, kind of like input actions, output, et cetera. I almost feel like I would want like a legend, like which color is what. And then because it is a canvas, kind of having different zoom levels, showing different fidelity. So right now we're so zoomed out, I can't read any of the small text. Why not just kind of hide it and make the node almost collapse it into just, in this case, a brown block, in this case, a yellow block to kind of give different zoom levels, different fidelities. I think that's kind of one way this can really go. And then here we have a pretty linear flow, but the canvas and modeling these kind of like AI, agent decision trees gets really, really powerful when it isn't something you could just kind of like linearly write in a document, like a recipe first to this, then to this, then to this. But really the power is in sort of like the multi-dimensionality and the branching. And so for as a starter template to kind of like explain the power of this tool to model these processes, I think one that is multi-dimensional would really showcase the power of this. Yep. That's a great point. I mean, another advantage for this too is that you can just add text blocks kind of next to these as instructions. So here was a template that we just pulled down to get started with, and it's got big text explaining, you know, if you're gonna customize this, here are some things that you should consider, which is helpful as you're just jumping in and trying to learn a product for the first time. But I think we're gonna see more and more of this Canvas interface as we have complex workflows that are customizable by users. 10 years from now, this may be the standard to interact and control and monitor a lot of these agents. If they're truly everywhere and doing, you know, so much of the work that we as humans don't wanna spend our time doing, this is gonna be the way that we control it. Yeah. And the interesting thing is that, you know, like kind of what is old is new again. So kind of flow charts, et cetera, probably like chip designers like 50 years ago, they're like, oh yeah, we used to, you know, kind of model our things like that. And so it's interesting to kind of like see this paradigm kind of getting resurfaced in the AI era. So, you know, we didn't invent this today, but we're building on a lot of legacy and standing on the giant, on the shoulder of giants here. Yeah. And it's always historically been static. And it seems like what's new is actually making it interactive. Yeah. Awesome. Thank you, Gumloop. This is a pretty incredible product and it can tell a lot of attention to detail was paid here. All right, next up for AI agents, we're gonna take a look at AnswerGrid. AnswerGrid has answers at scale and there's a text box here where I can put in some input, but it looks like they've got some suggestions for me. And this is a really nice pattern, right? Whenever you have a free form text box where basically you're expected to prompt, write text as an instruction for the LLM, kind of the AI engine to use as an input, having some examples to just kind of like turn examples into buttons where if a single click, you can basically fill out like a pretty reasonable example is something that's really good to start. Yep. It's hard sometimes you come here and you're like, I'm not sure what to use this for. And you're staring at the blank canvas effectively. And this gives you some suggestions to make it easy to get the value of the product. And I would take this even a level further. I think it's not just for examples where, you know, as a demo, but what if you can guess or infer from other contexts of your application, what might be like a good prompt, even as you're kind of using the application and then make them single click as opposed to just being static examples. So collapsing, so like suggested prompts into buttons, I think is like a really interesting kind of dynamic pattern here. Yeah. I'm about to click on AI companies in San Francisco and there's a lot that happens behind this. It seems like a simple button, but all right. So pre-filled it, AI companies in San Francisco and wow, that's pretty fast. Okay. So I get a bunch of companies that I'm sure many of the audience has heard of. OpenAI, Anthropic, Perplexity. And it's got some information like HQ location and industry and website URLs. I think what's interesting here is to click on the plus button here and we can add something different. So let's just say funding raised. And basically what happened here is we took a prompt as an input and we got the spreadsheet structured data as an output. And in the background, it went to these websites, scraped it, assembled this spreadsheet. And now what we can do is add columns and have sort of the agent go out again, not on a sort of like static set of columns that were predefined, but our columns. Like things we want to know, kind of putting the human back into the loop. Yeah. And what's cool is it's almost like every cell of the spreadsheet gets its own AI agent to get the data that we want, which is pretty incredible. It's like a spreadsheet on steroids. Okay. Let's figure out the funding that was raised for each of these companies. So I just put funding raised here. This'll be a web search. I'll let them pick the format that comes back here. And it looks like they give a couple other suggestions like employees and things like that, but let's just run this and see what happens. Cool. So you can see each agent working. We get the feedback in every single cell. I'm curious if they're going to come back in one at a time or all at the same time. Oh, all at the same time. It was an interesting choice of kind of like the run button. Was there like this arrow up? Well, first of all, kind of a very interesting choice, kind of like, oh, send the agents to like up to the cloud almost. Sent them off. And then maybe as a second point, maybe there's some improvement kind of to make this button a little bit clearer, like how to actually... You want people to click this button, basically, like kind of like run, play, go. Yep. Yeah. Play button would have been good too, right? What's interesting here is, okay, the data that we get back is 470,073.6. It feels like it's missing... The unit. ...the unit for the condensed version. And maybe that was a setting that I should have added. You know, I told it to pick the data type that was coming back here. But I noticed as I click into each of these, it shows me the answer, 6.6. It also shows the sources in line. And you can see OpenAI raises 6.6 billion. So that tells me like, okay, we're missing a B. But this is actually really helpful that you can click into each of these and see where it got the information from. This is another common pattern that we see where if AI is going out and doing a thing, how do you know you can trust the results that it brings back? You know, sometimes it hallucinates, sometimes it gets the wrong thing. And so by having a source closely attached that you can just, you know, click on each of these right here, you can see immediately where the sources came from. It helps us to be able to validate and trust the... data that the AI agent is bringing back. Totally. And when you Googled in the past, you just had a list of websites, a list of basically the references or the links, and they were your destination. But now that you ask a chat box and you get the answer back, you want to have the links, the references, inlined. And I believe it was maybe perplexity to do that pattern first, where you had these little round numbered dots right in line with the answer, showing you which segment or which fragment of the answer comes from where. And this is a really nice pattern that is used here, and it could even be used in other contexts or even be inlined here. I guess in a spreadsheet, it works to pull it out into its own popover. When you are more looking for space and to condense it, then the pattern of having the footnotes almost directly in the answer is a really successful pattern. It's also interesting, you mentioned before about how we always had flowcharts, and these are modern flowcharts with the canvases. And it's interesting, too, that a lot of the citing sources in the footnotes is not a new thing that's been around since the beginning of books, but now it's actually being used in a new way to actually validate and verify information in real time that an agent brings back, which is really cool. Just like in academic papers of the past, footnotes, you have your references, like from which paper, which data source, you actually draw a conclusion. Now we see this pattern more and more in software. Well, very cool. Thank you, AnswerGrid. This is really well done. All right, so next up, let's take a look at another kind of AI interface that I think we've seen that's pretty common, which is you put a prompt, and you get some kind of output or action that happens, which I think has become pretty common. First up, we've got PolyMet. PolyMet, an AI product designer at your service. OK, very interesting. So you can design and iterate faster with AI and get the production-ready code and ship faster. All right, so let's see. My first project. Sure, let's start there. OK, so we get the prompt box, which is the core element of a lot of these prompt-to-output interfaces that we see. It says, explain what you want to build. And similarly to one we looked at before, it gives us, it looks like, a bunch of pre-built prompts that are ready to go. And it takes multimodal input. So we see little icons for the microphone and even an image. So it looks like we might be able to upload a sketch, for example, of an interface, and then it will turn it into the actual thing. Let's try an intermediate one. This says, create a dashboard for a treasury management software with a floating sidebar with glassmorphic collapsible sidebars. Very specific. And super dark orange gradient in the background. All right, that sounds on brand. So let's click our tiny little button here. At least it's orange. At least it's orange. OK, so we've got some animations that are trying to keep us entertained and engaged. Says at the bottom, assembling pixels with tweezers. So I got some humor in the messages that are popping up. But are we going to be waiting 10 seconds? Or are we going to be waiting 10 minutes here? It's a little unclear. Yeah, they kind of appear and disappear pretty quickly. I almost, for a more technical audience, would love to see a log to actually see what's going on under the hood. And then also step by step, just keeping it on the screen so you kind of see the progress of the machine in the background. Yeah, it's tough to tell. You never know, because this is one of the main challenges with this new kind of interface is it takes a long time to generate from a prompt a very complex output, like an editable web page that can then be saved to code, or a big graphic, or a video. A lot of times you can go prompt to video. And so how do you keep the user engaged if it's a short enough window where you can just wait for the output? Or if it's going to be 3 minutes, 5 minutes, 10 minutes, longer than that, maybe you need a way to just tell them to come back, and that you'll email them or message them or something when it's ready. And maybe some good prior art to borrow from there is today's kind of meta search engines for flights. They also take a while. And they already show you kind of in a low resolution some early results. And you can always start to interact with the filters as more results come in. OK, great. Wow, this is pretty cool. It looks like we've got some glass. I've never heard glassmorphic before, but like the glass kind of UI. I would call it that. So actually, the prompt is entirely, there were examples for the prompt, but it was basically completely freeform. And I might not be familiar with some of these kind of design terms, kind of glassmorphic, or skeuomorphic, or flat design, or gradient, or whatever. So having maybe an interface here that gives me sort of like selection and ideas, kind of almost like pills maybe, these are design terms that can almost like LEGO bricks can like drag in versus just I need to know these terms and just type them or learn them from the examples. So there's an opportunity to build kind of like a richer prompt builder. Yep, I think part of the power of these open-ended prompts is that they can be anything. They can accept any input like glassmorphic, and it knows what to do. Like it figured it out. Good news, it can be anything. Bad news, it can be anything. Exactly, and I think the worry as a user when using these interfaces is that you're worried you're going to tell it something like glassmorphic, and it's not going to know what that is. And you're going to wait for two minutes for it to generate it, and then it's not going to be the thing that you expect, and you have to start all over again. So that would also be a really interesting kind of design challenge. For the output generated, what are the things the machine actually respected from your prompt, and where did it sort of like ignore or struggle with? Kind of giving that feedback back to the human and the prompt, maybe with like little squiggly lines or kind of things, or with color kind of showing what did it index on from the prompt and execute on, and what did it sort of like maybe ignore or fail. If there could be sort of like that feedback loop, then it can help the human to refine their prompt and kind of learn how to interact with the machine. And help the AI to figure out what it did well and should keep doing, and what it didn't do well and should get more data to improve. I think what's cool here is like, OK, this seems pretty interactive. It looks like it may, oh, wow, there's even hovers here. So how do we now give feedback to this design to improve it? It looks like there's an Edit button. So I guess I can click into these. I wonder if I could give it another prompt. It looked like when you clicked on one of the sub-elements that you can sort of like prompt on a sort of like module basis. Yeah, let's see. OK, so I'm editing. What if I just took this, and what if I said, explain your changes. Exactly, so make the sidebar blue. Run revision. OK, OK, now we're waiting again. So hopefully this will be faster. Hopefully it's like an incremental change, right? Where we can sort of only submit the delta and not like do sort of like a single shot, do the whole thing over again. Not just for us kind of to wait, but also for resources, preserve kind of the existing design that we did like and didn't want to turn blue. So let's see how it can sort of like deal with diffs. And for consistency too, because especially when you're prompting to create graphics, one of the challenges is if you want to change one element, add a hat on a person, it's hard to keep the rest of it consistent. That's a common challenge now. And so if they're able to do this, then I think that speaks pretty highly. Yeah, so any interface designer or technical team can figure out the challenge of how to kind of add sub-prompts or how to only change kind of iteratively. That's kind of like really the frontier. It looks like it did it. Did the rest change or did it remain the same? No, I believe the rest is the same here. Awesome. Well, this is very cool, PolyMatte. Great work. Another common pattern that we're seeing with some of these new AI interfaces is adaptive AI interfaces. And why don't you tell the audience a little bit about what that means? Yeah, I think some of the adaptive interfaces that we see emerge based on the content of, for example, an email or document, the interface then dynamically changes, which typically isn't static software. Typically wasn't the case. And so here, it's kind of like the input is the actual content. And then the output of the AI LLM is then the UI to interact back with that content. And so a really interesting space to emerge for kind of like looking at the design challenges of that. Yeah, it's interesting to think about things like Microsoft Word, right, where the thing that everybody is so familiar with is a billion buttons on the top row because they're never sure which one you might need because they don't know the context of how you're editing. And with AI now, we don't need to show all the buttons. We can just show you the buttons that are relevant. Yeah, and the challenges, of course, are kind of predictability. People love to have their billion buttons in the exact place. And so let's have a look how this is solved and what the challenges are. OK, so first up, we've got Zuni. And Zuni is building a smarter email app for founders where you can stay on top of your inbox with a little help from Zuni. They've got a demo here. So we're going to go ahead and watch the demo. We'll comment on that. What if you could respond to emails as fast as you make decisions? With Zuni, now you can. Zuni makes you faster and more focused by letting you decide, not draft, your responses. Here in Zuni, my tray shows me three important emails it knows I need to act on. Let's start with the one at the top here. Looks like I missed a call and may want to reschedule. On the right-hand side, I can see responses that Zuni thinks might apply. I'll hit Y to confirm a time, let's say 1 PM tomorrow, and hit Enter to generate my email. Looks great. Let's send it and move on, staying in control of my inbox and ahead of my day. OK, well, one of the interesting things here, I think, is this interface on the side where it's pulling up the user's email, and it's suggesting specific responses to that email. Based on the content of that email, it's almost changing what the reaction buttons are. Exactly. And it almost seems like, what's the right level of abstraction to reply to an email in the future? So this still makes me process each email, just maybe a little faster, but I still have to go do it. If you go higher-level abstraction, can an email inbox of the future just autopilot do that for me? If we go all the way down the ladder of abstraction, we would talk more about AI interfaces that are more autocomplete. And this gets right in the middle of the levels of abstraction, where we process each email. There is no draft yet, but there are predefined prompts that are adaptive per email that I can select. I think a really interesting tweak on that would be, what if the best guest draft for that email would already be sitting in the inbox for me? And then I can, on a higher level than text editing, I can prompt it to change it, depending on what I, as a human in the loop, actually feel the answer should be. Yep. And I think it's interesting that they made these very high-level. And then when you click on each one, if they need more information, like you click Dismiss, it'll just go away. No other context is needed. The first one here, it said, confirm a call time. And the UI actually knew that we needed input of, what call time should we suggest? And so it knows the next step based on which response you want to give, which it's showing you a custom UI for how to respond and not showing you a list of five text boxes, of which maybe one is the one that you should fill out and respond. And a little detail here is, because we're already with hands on the keyboard, basically in email mode, and processing the inbox and typing anyway, being able to access all these adaptive options by just keyboard shortcut with a single letter is really on point. Yeah, you had a great point earlier around, if buttons are moving, people value consistency and remembering, oh, that button is there, and I go here to click it. And that is actually interesting, where the buttons and the responses are technically changing for every single email, but the keys that you're pressing do not. And so you can kind of keep your hand right there and know what to expect each time. Now, one interaction design challenge with these hotkeys that are not with a modifier key, like a keyboard shortcut, so Command-C for copy, for example, has a modifier key. But these are just hotkeys where I just press Y. It just does it, right? But what if I think that my cursor is focused, inserting text, and I want to kind of reply yes, then basically my first Y keystroke like submits a button, right? And so there's always this challenge of really being very clear when an input element is focused and you're typing, versus now typing on the keyboard will just do stuff in your UI. Yep, adaptive UIs of the future here. There we go. Awesome. Thank you, Zuni. Very cool. We've seen some voice examples. Let's take a look at a video example now. This is Argil, argil.ai. And they have a product that's almost like an AI video studio to create production-quality videos. This actually has a deepfake AI version of me. Incredible. And so what we can do here is we can type our own custom script right here into this box and make it say whatever we want, create different blocks where we can change camera angles for each of these different settings, and we can change the body language too. So for this one where I say here I am pointing to myself for this point, I have selected the point to myself example here. You had to select that manually? Yeah, so I selected it manually. You could imagine in the future they would auto detect it. Right, right. That would be really interesting. It's cool here that as you hover over these, you can see the different samples of what will happen. Yeah, you can always imagine how you could highlight certain parts of the script. And then from a dropdown there, choose Suggested, but then also Standard. Part of this library, Just Try, Point to Myself, I'm crushing it, or I'm crushed. And so there's a lot of interplay with the text interface to the left. Yep, all right. So let's hit Play, and let's watch it. Hi, I'm Aaron, and today we're going to make a new design review video all about AI interfaces. Here I am pointing to myself for this point. Cool. So the voice was very good. That sounded like me, and I just typed a bunch of text to get that. And what was the training data to create your deepfake? Yeah, so they just need a few minutes of video of me or whoever talking, and then they can basically process it automatically in their models to create their deepfake. And you were saying something completely different than this here. That's incredible. And so if this is all AI generated, let's try to change the name here. Yeah, let's say I'm Raphael, and today it's processing. Hi, I'm Raphael, and today we're going to make a new design review video all about AI interfaces. Here I am pointing to myself for this point. OK, and so the other thing that you notice here is the video is very blurry. Why is that? And it's got this thing over it, and that's because the easier or the faster part in generating this is actually in creating the voice. And the hard part is it takes many minutes to actually process and generate the video with the right lip movement to match the text that you've entered. And so rather than showing you something, lips moving that is off from what you've put in, they first show you just kind of a blurry version with the audio so you can get a sense of what it's going to be like. Then you click Generate here, and then that, it says 12 minutes right here is how long it's going to take. So they're trading off basically fidelity for immediacy and basically putting the human back in the loop. Because if it was just the Generate button, we would wait for 12 minutes, figure out that something is not quite right, and then give the machine a new prompt and wait until it comes back. So this is a really clever trick to really kind of create this iterative human-machine collaboration interface. And I think blurring the video is a great design approach to do that. Here's a version that I've generated. Hello, my name is Aaron, and today I'll be sharing incredible news straight from the YC partners. We're moving YC to four batches by year. This is one of the biggest changes YC has made since it launched in 2005. Here's the thinking behind it. So there you go. You can see it looks like me. It has the different expressions, the camera cuts, the lips match, the voice that was added. Pretty incredible. Yeah, I think trading off fidelity for latency, really putting the human in the loop to iterate on the script very quickly, while sort of like the full-on generation of the video can happen later is one thing. The other thing is kind of opportunity to potentially bring some of the selection UI kind of closer to the input itself, the text. I think there's a lot of room there to grow. Yeah, very cool. Awesome. Thank you, Argyl. Awesome. Well, these were all incredible examples. What are some of our takeaways from some of the interfaces we've seen today? Yeah, well, I think when we first kind of started to get this LLM technology, everything was sort of like a chat box, and people just kind of like prompting it. And now within just a few short, like, few short months or one, two years, we see this explosion of AI interface and AI components that really kind of are built AI natively. Totally different modalities, how to interact with this new technology with the LLMs, and really just endless opportunity for iteration and building a new world of software. Yeah, I think you said it really well at the beginning here, which is, you know, these are all verbs. We're creating videos, we have agents going out executing tasks, and so much of it is how do you keep the user in the loop and in control while AI does its magic. And we've seen some pretty amazing interfaces to get that level of control and make sure it's doing the right thing. That leads to incredible output that would have taken days, years. It almost feels like it almost feels like back in like 2010 or so when touch devices really kind of came on the market and everything had to reinvent the kind of touch first. We're at one of those moments again where like all of software, all the components that we kind of took for granted, they are really being reimagined and reshaped by the builders and startups and designers out there right now. The future is going to be incredible. Yeah. Well, thank you to everybody who submitted. These are pretty groundbreaking UIs that I think are going to continue to evolve over the next decade and really excited to see where they end up. So thank you, Raphael, for joining me for this episode, and we'll see you on another design review. Thank you so much."
  },
  {
    "name_video": "How To Build The Future: Aravind Srinivas",
    "description_video": "YC General Partner David Lieb sat down with Aravind Srinivas, the co-founder and CEO of Perplexity,  to discuss his Silicon Valley origins, what it's like to compete with Google, and his vision for the future of search.",
    "related_categories": [],
    "page_url": "/library/MC-how-to-build-the-future-aravind-srinivas",
    "youtube_url": "https://youtube.com/watch?v=SP7Ua8FKZN4",
    "mp3_file": "downloaded/How_To_Build_The_Future:_Aravind_Srinivas.mp3",
    "mp3_content": "We released the ability to ask follow-up questions that doubled our engagement time on the site and also increased the number of questions every day. So I was like, okay, there's something here. It's not worth killing and pivoting to enterprise. It was not like I want to go and kill Google, like that's our motivation. It was more like, what is an idea of that scale and ambition is something like this. Today, my view of Perplexity is a more intelligent Google search that's really useful in certain scenarios. What do you want me to think of it in three or four years? Welcome back to another episode of How to Build the Future. Today, we're joined by Aravind Srinivas, co-founder and CEO of Perplexity, which in less than three years has grown to more than a $9 billion valuation. Thanks for joining us. Thank you for having me here, David. How did you get into this world? I was pretty interested in AI, deep learning research. That's actually what got me into the US. I was an undergrad in India, came here to the US for doing my PhD here at Berkeley. Life really changed when I got to do an internship at OpenAI and Ilya Sutskever was there. I still remember the day I first met him and I was very prepared and had all these fancy ideas that I thought were very interesting. And he listened for five minutes and said, all this research is useless. It feels really bad to hear that. So I got used to hearing the right things, even if they're uncomfortable. And then he told me the only thing that matters is he drew two circles, one big circle, called it unsupervised learning. And then inside he said reinforcement learning, another circle. And he said, this is AGI. Every other research doesn't matter. This was around the time when they were building GPT-1. They didn't even call it GPT-1. When I saw that research, I went back to Berkeley and said, hey, I was working a lot on RL. That was the rage at the time because of AlphaGo and DeepMind. But that was kind of like chasing the trend. So I went back to my professor and said, hey, we have to actually go and study unsupervised and generative models and generative AI. So then I got into that and did more internships at Google. And during my Google internship, I stumbled upon this book called Indeplex. So I would launch jobs during the day, training runs, and then go and read these books in the library because interns don't have any other thing to do. And it would feel amazing that, oh, like these guys actually were once upon a time, grad students like me, and now I'm working as an intern in their offices. Reading the book about them. It feels nice. It would be amazing to start a company like that in future where there's a lot of research. There's a lot of like AI. At the same time, it's very grounded in product building. It's very difficult to do that. And I spent a lot of time thinking about it. I even spoke to Ilya Sutskever about it, like where we said, there are probably only two problems where you can work on AI and also build product at the same time. One is like search and the other is self-driving car. Because all your product rollouts are becoming data points for improving the underlying AI in the product. And that'll make the product even better. And that'll lead to more users and more usage will lead to more data points and it'll become a flywheel. And it should also be on the AI completeness path. It's sort of a buzzword to say this, but basically what it means is better AI should keep making your products better. So that way you can keep working on your company until AI is solved. And once it's solved, okay, sure. We'll worry about all those implications. But your company gets better as AI gets better, as opposed to your company gets run over by somebody else. Exactly. So search is like one of those problems. So you're at this moment where you kind of have this realization that you want to start a company. How did you get the kind of activation energy to quit your great job at OpenAI and go do that? How did you find your co-founders? I came across this blog that one of the former YC partners, Daniel Gross wrote, but it was like how to build the next Google. And I think basically the core idea is like, you could do so much more with better query reformulation. So you take a query and you just add some suffixes. So if someone's looking for reviews of a movie, just suffix site colon rottentomatoes.com. If someone's looking for reviews of some new gadget, do site colon that corresponding subreddit. You can get away with a lot of these suffixes and like special strings to like filter results and already make Google so much better, even with the existing Google ranking. I'm not even talking about the ads problem, just simple ranking. And then you can do more sophisticated things of like classifying queries. And he was talking about how LLMs could automatically figure out these suffixes. And I was pretty interested in that. Okay, that seemed like, okay, maybe generative AI might be, as in like I used to just call it LLMs or generative models could be a better way to build search engines too. I also was pretty interested in like trying to do something agent-like. When DeepMind had this Android environment that they built, where like they kind of wanted to prototype a mobile app using agent that knows when to use what apps and control the apps. That's when I spoke to my co-founder and CTO. His name is Dennis. We had written the same paper a day apart. So we knew each other and he was a visiting student in my lab. And we used to talk about, I would bring some ideas of how like we can build agents to control the Android environment. So we were definitely chatting about doing a lot of things, but never concretely about any company or product. The first thing that anyone would tell you is like, why? Why even work on this? Of course, Google is gonna do this, right? It's not even like you go build a better Google Docs, Google will eventually do it because it's a secondary thing for them. So companies like Notion can still be funded. This is their core crown jewel. So why would you even try? I think the reason it actually made sense, this is again, after launching the product, we realized this, not before. So there's like some benefit to being ignorant. Ignorance is bliss. Is that if people stop clicking on links, the ad economy kind of dies. Now you can, there's a lot of nuance to this, but that core insight was only realized by us after launching. So once we realized that, I thought, okay, we were onto something and that kind of took us last two years. Walk us through like the first iterations of your experimentation. Like I know you did a bunch of demos that were very dissimilar from Perplexity. Yeah, so I was like audacious enough to go and pitch to the first and seed investor of ours, Elad Gil, that like, hey, like, you know, I want to disrupt Google, but I kind of want to do it from pixels, from a glass. And I think that's where, you know, you're not competing with people typing on the search bar. They're just seeing- But even at that point, you like knew in your mind, I want to go after Google or like- Yeah, yeah. It was not like I want to go and kill Google, like that sort of motivation. It was more like, what is an idea of that scale and ambition is something like this. It was also around the time when multimodal models were slowly beginning to work. So I thought like, if you were on the trajectory of improving technology, you could build something pretty amazing. My investor rightfully said like, not to work on it in the beginning. So we focused more on searching over like specific verticals or data sets or databases, tables actually. And we were an enterprise kind of focus company, except like nobody wanted to give us their data. I remember I used to, you know, hustle for calls with like PitchBook or CrunchBase because I kind of wanted to build a demo that would first make sense to an investor. That way we can keep, you know, raising some capital and then actually hiring good people and then go and like do the real thing. And so CrunchBase had all this data, PitchBook had all this data, but they just don't want to give it to us. And so- Next best step, Twitter. Yeah, Twitter. The pre-Elon CEO moments, academic access was allowed, legal. So we built a database of Twitter. We organized it in the form of tables. We tried to do with the OpenAI Codex models. This was even pre-GPT 3.5. We wrote a lot of templates. Oh, for these kinds of queries, these are example SQLs. And then the model would do kind of rag, they would pull relevant queries in the templates and then write the actual SQL based on the template SQLs. And that was the only way to get it to work reliably. And then we had a lot of callbacks in case errors happen, it'll automatically correct it. And then it will go and query the database and then retrieve the records. It was very nice. And it was a chat UI, you could chat, you could converse, you could plot. And this was like the first real like product or demo that you guys- Yeah, yeah, we did it very fast. Like took only a month to do this because I like three people only, but that energy in the beginning was insane. And I showed it to a bunch of people and they all loved it. I mean, there are two reasons. Something like that never existed before. Like you could never actually go on- Twitter searches. Exactly. To this day. Even today, right? And then also people loved finding all these, I think the social search of like knowing who other people are following, whose tweets are they liking, whose tweets are they not liking, who did they unfollow this week? You know, those kinds of diffs. It's all like funny. So you launched this Twitter search thing. Yeah. How did you transition from that to now what we all know as perplexity? Yeah, so we had that, right? And then we were trying to do something similar to that for many different databases, GitHub. Like if coders could go and search about repos or LinkedIn, if you could like almost be a recruiter or just say, but even now it's pretty hard. I want to say like, I want all the people who worked, who have been YC founders, you know, and who also worked at a C or D startup, because they would know what it means to be scrappy. It's very difficult to like do these queries. Using the LinkedIn UI to do that. You cannot do that, right? For whatever reasons, people don't want to give their data, their paywall, like, you know, such technology, if it exists, we'd be creating like way more value, but it doesn't exist for many other reasons. We were beginning to see how like, even with the capability of the models at that time in 2022, pre 3.5 turbo, things were actually pretty reliable to the extent where like people would like use this and find value. I actually read this Paul Graham tweet, I think like where, if you try to, often when you figure out the better solution, when you try to solve a harder version of it, but you end up with a simpler solution that's more general and scalable. That's what we realized like, okay, like there's one way of doing these things where we go to each of these domains and like try to build an index of it and put it into specific formats like tables and then have the LLM like read that in a structured language like SQL. Or you could do the other way where you just keep it unstructured and expect the LLM to do most of the work at the inference time, at the time of the query and don't do all this work in the indexing time. And clearly we knew that if second is where the world is headed, where the models will get smarter and smarter, it gives you an advantage to build it that way because it's more general. And you also stand a chance against the legacy system that Google has built, which is a lot more in the first style. So we thought, okay, we would try to build a more general solution. And then we prototype this thing one weekend actually. Actually, John Shulman's team had already published this thing called WebGPT at the time. So I was pretty aware of it. OpenAI even had a bot when I worked there called the TruthBot, which John built with his team. Where you could ask it a question and it'll go and search the web and then it'll give you an answer with some sources. And it was very slow. And it was built with the 175B GPT-3 model. So incredibly slow and inefficient. It was more agentic. Like it would actually be like an RL agent that decides if it wants to click on a link and browse it, scroll, which is very slow. So what we tried is a very simple heuristic version, but much faster, which is, okay, you always take the top K links that a search API provides you. You always only take the summary snippets that the index has already cached. So there's no scrolling, there's no clicking. And you always feed all those links into the prompt. So there's no selection. Ask it to write a summary with sources in like the academic format. And that's it. And these models were getting to a point like 3.5 turbo sort of models were beginning to come. This actually started working much better. The instruction following capability increased enough that you didn't have to do it very, very rigorously. So you kind of did like the dumb approach, betting on the fact that the AI would get good enough that it would make all of that irrelevant. Right timing, I would say. One year ago, when John and his team tried, the models were just so much worse that if you tried the dumb approach, it just wouldn't work. And so therefore you would conclude that you need a smarter approach. But then when the models began to be much better instruction following, the dumb approach actually works. And that fixes a core product UX problem of latency. You are used to links appearing instantly on a traditional search, right? Even then, by the way, the first version we launched, which is the answer version, took seven seconds or something to, because we didn't even have this concept of streaming answers. We would wait till the entire answer was generated. We couldn't control the verbosity. So sometimes the answer would be very, very big. We even had to hard code a prompt saying, only write five sentences or something like that, or 80 words. It keeps it fast. Yeah, exactly. Okay, so you launched this. When was the first moment that you thought like, oh, I'm onto something here? So we tweeted it. While writing the tweet, I was like, people are gonna ridicule it. It's gonna make mistakes, blah, blah, blah. First moment of virality came when one annoyed intellectual academic came search for herself. It said she, it gave a biography in the past tense. And she's like, I'm still alive, what the hell? But actually what happened was, there was a person with the exact same name and spelling who died, and LLM thought she died and it gave a past tense. I actually thought there was pretty clever reasoning on the motto, except it's not even higher order to know that they're different people. So then that got us a lot of attention. People were beginning to start thinking, okay, look, the sources thing is good, but can we really trust the answers these things are saying? And then that got into the strength of people like searching for themselves. This is something that keeps happening time and again with all consumer products. When I got a chance to speak to Mike Krieger that vacation, he said the same that even though you can click on your own profile icon and go back to your photos, people always love to go to their profile on Instagram by typing their username on the search bar. It's such a human habit. So a lot of people start putting their Twitter handles or social, their usernames, and then it would mash all their activity across the internet, including stuff they did in the childhood, like many years ago, and then give like this interesting summaries and they would screenshot it and share it. So I thought there was something there. There's something driving it. Yeah, but I still wasn't sure. And then we released the ability to ask follow-up questions that double the engagement time on the site and also increase the number of questions every day. And the number of questions every day was increasing exponentially. So I was like, okay, there's something here. It's not worth killing and pivoting to enterprise. You have this initial momentum. And you said earlier, it wasn't until hindsight that you had the idea that like, oh, we actually have a chance of competing with somebody like a Google. When did that realization happen in this journey? How'd that go down? So I never really thought about the Google competition in a serious way, to be very honest, because I knew that they cannot make this exact product on the Google homepage. It's so hard to know when a query is purely informational or not. And then the Google search page is already so cluttered. There's the answer box, the knowledge panel. There's some ads, there's some links, there's perspectives from socials, all these social cards. It's already too much information. So it's clearly feels like fast food and healthy meal difference for using Google and Perplexity on even informational queries. I was more worried about like Microsoft in the beginning because they were launching Bing Chat. In fact, on the day we agreed to have a term sheet, like handshook on a term sheet with one of the venture capital investors, NEA here in Sand Hill Road, after like one week of torture. pitches, and we were just having coffee, and then the words leaked screenshots of Bing chat. And I was like, okay, there's this 30-day due diligence period, right? And one of the other investors who gave me a term sheet, he just increased it to 45 days. You could see the diff. It was in sneakily. And I knew why, clearly. And he also texted, what do you think about this thing? Okay, okay, I get it, I get it. You're getting a little sheepish. And then the other person I handshook with, he texts me in the night saying, hey, do you have time for a call tomorrow? Okay, clearly this is it, right? So I told my co-founder, okay, maybe they're going to back out or ask us to pivot. So maybe we should just try to sell the company and get it done. This is not going to go anywhere. The person actually who handshooked said, look, I'm not going to ask you to pivot. I'm not going to ask you to do anything different. You guys keep going. And we already, word is word. I was like, damn, that's pretty impressive. And then the next week, actually, Google also releases a blog from Sundar announcing something called the Bard, which is screenshots. So we knew that this is going to get pretty big and competitive, but we were like, look, at the end, Microsoft was never really good at consumer products for a long, long time. You can't suddenly change that. So they actually messed up the opportunity in my opinion. Google, obviously, I knew that they're going to have their own problems and challenges. So I felt like there was space for someone else here. Yeah. Having spent almost a decade at Google myself, I see a lot of the culture of the early days of Google, like the things I've learned about Larry or about Sundar. And I see a lot of that in the way that you have built your product. There's a lot of attention to detail. It feels like you are the primary user of the product yourself. Is that a thing that you deliberately tried to do? Yeah, I did. I did deliberately try to do it. One thing that Larry says, I keep reminding everyone in our company about it. The user is never wrong. So even today, while testing a new feature, it didn't work. But there was some ambiguity in the query. So the person I was talking to the engineer and saying, hey, this is not good. What else could they have done here? And you know what they should have done? It should have come and clarified to me and asked me, hey, I'm not sure either this or this. Which one did you actually want? And then I should have clarified. And then it should have gone and done it. Instead of saying, I don't know. That is the user is never wrong principle. The other way of designing products is make the user be a better prompt engineer. Blame the user and tell them to be a better prompt engineer. Teach them, educate them, get them to do it the way that the product wants them to do it. Yeah, exactly. Enterprise software is more like second time. But magical consumer products are more the first time. I agree. In Google, why should Google handle typos? They needn't have. We should have all been great at English. It's like Larry says, he was never good at spellings. And that's why I think the true story is YC partner, Paul Buchheit, he was just annoyed by it. And he's like, someone should build that. Yeah, exactly. And spell check corrector. It's all there. Similarly, auto suggest. Why is it there? Like easier, right? Similarly, cached results. I was even reading somewhere where Larry wanted the homepage to have the simulation of the weather outside your home so that you don't even need to type the weather query. It's just already there. So I was very influenced by that style of design, including subtle things like Chrome search bar. If you've already gone to a site, it's already there. You just have to click Enter after typing the first two letters. So that influenced me to make sure we have the cursor ready to type on the search bar. You don't need to take your mouse and place it there. It sounds like your main metric that you care about is number of queries per day, which is exactly what Google did in the early days, right? It's hard to grow that without retention. In the long run. You cannot just pay for a user and get that number up. User could install your app. And maybe you can even game it where when they install, there's one query automatically submitted. But a repeat query doesn't need to be submitted. Yeah, I think the only counterexample, which I don't think is happening in your case, is the product is not serving their needs. And so they need to issue a bunch of queries to get what they want, which is kind of the opposite of Larry's approach on Google was you should be on Google as short as possible because we're trying to get you somewhere else to solve the problem. So that's not happening. I mean, sure, I'm sure there are some errors and stuff, but most of the follow up queries actually we see are like completely irrelevant to the first query because they just want to keep continuing the session or questions that they never even knew they wanted to ask, but they want to keep asking. So I presume your team has grown a bunch, you've raised a bunch of money. How do you manage the team? How do you operate your team on a week to week or cycle to cycle basis with that number of queries per day is our primary metric? So every all hands, we start with that number. I don't believe in this, putting a TV and having a metric being seen every day because I think that's also distracting. But I do think it makes sense to take a look every week, see the weekly growth rates, see the monthly growth rates and if something declined and discuss about it, figure out ways to actually freak out if something declines, like we do. And if something grows, look into why, where. So we are very data-driven and we share it across the company. Actually, I've been trying to share it to the users too, so that they feel like it's something that's actually happening right in front of their eyes and they want to be part of it. There's a hierarchy. If there's some bug to be fixed, if I know some particular person's working on it, I can go and talk to the person directly. Nobody else feels threatened because I'm going and talking to that person. There is no feeling that because I'm raising a bug, it's like, oh, they're going to be fired or something. Because I raised like 50 bugs a day. So it's more like they understand, okay, it's important for the product to feel great. And if it doesn't feel good for ourselves, the user is also not going to feel that. In fact, we have way more incentive to go use our own product when the user doesn't. So the standards for the user should be even higher. So always feel like a user. I think that culture is there in the company. I love that. And did you intentionally select for that when you were hiring? Like people who are very product centric and in the details? I wouldn't say I explicitly have that as a criterion, but I look for people who cared about doing good work. If you don't care and you're just treating it as a job, then it's very hard for you to get excited about things. And I think so much of it feeds off of the founders and your culture, your DNA. And it sounds like you're that type of person that obsesses over the details. And you're just going to naturally want to hire people who share that trait. Yeah, I do get pissed off if answers are wrong. And I do get pissed off with people on Twitter saying like, perplexity is degrading or like, you know, but there's a lot of the things, some things are actually not true. But I do try to see, you know, leave aside the cynicism, even if it was someone who's like a hater. But if there was something true there, and I want to still know. Yeah, I love seeing you engage on Twitter with customers. Is that the primary way that you talk to users? Or are there lots of other ways that you are talking to users? I mainly use Twitter. People are just like super brutally honest there. And I think in email, people are a lot more polite. Which is okay, too. I like both sides. But I think the brutal honesty brings out the worst bugs and things that people are afraid to say. Oh, and in person is the worst, where you go show someone something, and they're just going to tell you good things, even if they hate it. I kind of like don't like any, hey, tell me what do you think? You're always going to say nice things. You're going to grow your company, presumably, you're going to need to hire more people. How do you avoid the fate of becoming a big, slow company? Well, it's beginning to happen already a little bit, right? We're not as fast as we used to be. I think some of it is not because of people. It's also because things breaking in production, people start losing trust in the product. Like today, we deployed some change, and then someone got frustrated that there was some front end bug somewhere. It was actually something back end. But people are just assuming things. I think like fast loading, all that stuff matters. And not every new engineer has the full context of the code base in their head. The earlier ones do. There's some tension moving fast and breaking things if you do want to grow to mass market usage. So that's mainly slowing us down, I would say. And we haven't quite figured out the best way to do this fast. I mean, we do have staging, deployment testing, A-B tests, and all that stuff's happening. And that's naturally slowing us down and getting things out to production widely. Other than that, I would say the obsessive detail-oriented people, there are only that many people in the world. So obviously, you cannot expect engineer number 250 to be like that. But I try my best to still go flag bugs to whoever is working on whatever new feature. And I kind of know who is working on what, even at the size. I still try. I think our co-founders are amazing. They care, and they push that principle when they're building their teams. So we are trying our best. I'm not saying we've figured out or cracked it, but at least we are trying to fight the entropy here. I think that's the only thing you can try. And it's an uphill battle, but if you keep on it. Okay, let's talk a little bit about the future. I've seen your most recent launches are kind of in different directions, more verticalized or more specific around shopping or other things. Where do you want to take it? Today, my view of perplexity is a more intelligent Google search. That's really useful in certain scenarios. What do you want me to think of it in three or four years? If you go and research what's the best sweater to buy or which is the best hotel to stay in this location, perplexity will give you a great answer. But where do you actually go and fulfill the demand? You go to Google. And who gets credit for that monetarily? Google. Google. We got nothing. Maybe we get your pro subscription, but then someone else will undercut us and give it away for free with cheaper models or whatever they have, bigger cash or so. So the challenge is you want to be one place where people can have the end to end experience. They start with a problem in their mind and they seek your help. You give them the answers and you also help them fulfill the action. It's difficult because people think if you have an answer of like, oh, what watch does Bezos wear? I think he wears some Omega or something. I personally thought it would be amazing if it not only gave the answer, but it also had a product card for the specific Omega watch with a buy button. And I just clicked buy and it's done. But there are other people in the world who think that's an ad. It's not even an ad. They think like the company is paying us to do this. So this is where some of the tension with the early adopters who love the ad free informational experience with like what is actually needed to get mass market and really be useful on a daily basis comes from. There are so many other things like checking the score of a game or quickly getting to a website. If you just wanted to get a docs link of an API, or if you just wanted to go and book a flight on United, the answer could just be a link. The answer could be the weather for tomorrow. That's a temperature or someone's age should be like, you're going to type like Elon Musk network. You'll just get the answer in like less than a second on Google, right? And perplexity, it'll pull the right source. Maybe it might be more accurate than Google, but people don't care about like some of those minor details. So what you need to build is this amazing orchestration of small models, typical knowledge graphs, widgets, LLM streaming answers, and more complicated multi-step reasoning answers. But user doesn't care. Like user's not going to tell you like when to use what, you decide. That AI, nobody talks about like when to use what, that sort of router, that orchestrator. I think that's the hardest thing to build. And whoever builds that and can operate that at a scale of billion users, and also knows how to monetize like some of those queries really well, it's going to be the next Google. Because they'll have the search bar, they know exactly what to do. They'll go and ask clarifying questions. It truly understands the user and also does tasks for you. And also lets you like surf the web in a typical way, all in one experience. You could even argue, maybe nobody will ever be able to build this because it feels like a daunting task. But I could say whatever Google has already built is the closest system to something like this. So the next generation of this clearly can be built. You just have to like persevere and work for a decade or two on this problem. If I talk to people at Google, they would say, yep, that's what we're building. In fact, I know they've been saying that for more than a decade. Probably same at OpenAI, probably the same at Anthropic. When you look at the people that you likely will be competing against in the next 10 years, what do you think is the piece that's maybe going to give you the edge to win? Obsession about the user and good product taste. There's a lot of these things that require a lot of domain knowledge. Out of the list you mentioned, Google is the only company that actually has the product taste to do this. And arguably all the distribution in the world, everything. Except the dilemma is also there. It's funnily like, it's a search company, but it's also an ads company. And search is kind of almost exists in service of the ads company, not in the other way. And you could argue, okay, that's outside the search revenue every quarter, which is like close to 200 billion a year. There's still like a hundred billion in other places, YouTube and cloud, but the margins are all coming in search, right? Cloud is only like recently profitable. YouTube is never going to be a high margin business because number one, they don't serve ads on subscription users. And number two, they have to pay the creators, they have to pay the media partners. So it's never going to be as high margins as search. So you're arguing basically the stock price is going to be their encumbrance. Correct. Because like Wall Street is like crazy. It just automatically panics if search revenue goes down, but search revenue has to go down in a world where people are just directly talking to AIs and agents are doing stuff for them. That doesn't mean they're not going to do anything about it. They're still building Gemini and like on the new app. The hypothesis is that like, they're not going to be able to easily put it on the core Google where they already have all the billion users. And that's true, right? Yeah. You're arguing that whoever wins this in the long run will kind of by definition need a new monetization model, a new business model. Yeah. There's like a ton of other problems to solve like for shopping or travel or like all these things, like which merchants do you use? Or like which hotels do you plug into? Or who's the middleman there and who handles the booking? And if a customer wants to cancel stuff, Google actually solved a lot of these problems too, right? They're not just like, oh, a page rank or like MapReduce or all these advances that they made in like visual, like deep learning and like BERT transformers. It's not just that. That is great, but they also did a lot of other boring work of bringing Google Finance, Google Shopping, Google Flights. I feel like Perplexity is better positioned to do these things than OpenAI Anthropic because we have it in our DNA to care about the user and the product. We're not just talking about reasoning and models, right? But we are pretty much familiar with all those things. And we are very much capable of taking the latest open source models and serving them ourselves and fine-tuning them and post-training them and doing evals. We're not like AI illiterate. We're not going to like spend all our bandwidth building data centers and chips and like trying to just talk about like breaking the most recent coding and math benchmarks. I think there's value in that, but it's quite orthogonal to like building the next generation information experience. All right, Arvind, thanks so much for joining us. It was great chatting. Thank you for having me again."
  },
  {
    "name_video": "How AI Is Changing Enterprise",
    "description_video": "The Lightcone hosts sit down with Aaron Levie, the co-founder & CEO of Box, to hear reports from the front of how large enterprise and Fortune 500 companies are adapting to the AI age. ",
    "related_categories": [],
    "page_url": "/library/MB-how-ai-is-changing-enterprise",
    "youtube_url": "https://youtube.com/watch?v=aIKfA3gIXwo",
    "mp3_file": "downloaded/How_AI_Is_Changing_Enterprise.mp3",
    "mp3_content": "Wait a second. If we could use AI to automate more, we can build more. If we could build more, we could lower the cost of things. If we can lower the cost of things, then we can actually lift up anybody's lifestyle right now. I think that we're in the middle of the revolution, and the revolution does not have to be a black mirror. It could be something that is driven by Jevin's paradox, driven by abundance for everyone. And that's certainly the timeline we want to be on. That's the future I'm betting on. Welcome back to another episode of The Light Cone. I'm Gary. This is Jared, Harj, and Diana. We're partners at YC, and collectively we've funded companies worth hundreds of billions of dollars. And today we have a really awesome guest, Aaron Levy of Box. Love that intro. Aaron, you're one of the best product CEOs out there, public company as well. That's what I write in my Wikipedia. That's how I classify you. We're in the middle of the AI revolution, so how are you feeling? Oh, pretty good. It's a good time to be in software right now. So yeah, feeling pretty good today. Something we've been speaking about for a while, which I think we probably agree on, is that the chat GPT wrapper was like a bad meme, and that actually there's like lots of value and always has been in building apps on top of these foundation model companies. In fact, the opposite might be true. Which is going to be more valuable in 10 years time. Yeah, so it's interesting. So there's like probably 2% truth in the meme and then 90% not truth. And so, I mean, PG, you know, with the sort of wedge theory is like, actually you do want something that is sort of a simple product that finds a little wedge, and then you expand from there. You know, in the early days of cloud, if you were to be building software that let you manage documents and data, you would have been like, well, that's a wrapper on Amazon. And it was a total misunderstanding of the entire scale of software you have to build to make the storage bucket be useful in a particular application. So on the wrapper conversation, the exact same thing is true, which is how much software do you need around the workflow and the proprietary, you know, sort of business logic and the data that the customer brings. That's actually the value, not just like what is the set of tokens that are coming out. Where it's a little bit true why startups should be, you know, at least think a couple steps ahead is you probably don't want to be something that just ChachiBT would incorporate. So it's less that the model will incorporate your value proposition. It's more if there is, you know, if the model provider also has a consumer scale application, like you don't want to be right in the way of something that ChachiBT will just fold in directly into its functionality. So in that case, I think you have to be, you know, sensitive to being kind of, you know, a quote unquote wrapper. How do you separate out stuff that's going to get incorporated into the model from stuff that won't? Because I feel like the hard part with that often is we don't know what the next models are going to be capable of. And there's this general sense of, oh, well, like anything could theoretically be incorporated into the next model if it's powerful and, you know, approaches some version of generalized intelligence. Yeah, I mean, I look at all this through just the B2B lens, which I know that then probably we just lost half the podcast listeners. B2B SaaS is cool these days, actually. On the B2B front, to me, it's a simpler question because an enterprise doesn't want a model. It wants an outcome. It wants an outcome of customer support, you know, conversations being answered or, you know, health care, you know, transcription going into an EHR system or an automated workflow of reading documents and contracts and plugging that into a contract workflow. So the model getting more intelligence is actually usually a better thing for anybody building software in those use cases because then you're doing less in terms of, you know, hacking your way into the model because it's sort of insufficient at solving that particular problem. But what the customer actually wants to buy is, like, I need software that will plug into, you know, my ERP system, that will plug into my support system, that will power the workflow, that lets the customer do a password reset. Like, that's actually what the customer wants to buy. And what the model is doing is sort of, you know, really abstracted from the ultimate customer value proposition. So I think as long as you're building, you know, software that really can deliver that full outcome to the customer. And, you know, two years ago, the initial wave of these use cases started to emerge. And I think the companies that will do best, you know, are ones that realize that you need to abstract the model away as much as possible from the ultimate value proposition. And then you just incorporate all the model updates as quickly as possible for your customer. And again, they just buy the outcome of customer support. But it's just getting better and better every time there's a model improvement. So I wonder maybe one good analogy is when you were building Box for your customers, they didn't care what was the underlying database or cloud or what was the networking gear or all the hard drives that were running. It was all about the end user experience at the software level. And the analogy today is the end users of B2B AI workflows don't care whatever model is or how it does it, but that it ultimately does the workflow. Yes. Yeah. I think that is absolutely the conclusion. You'll often, you know, get some idiosyncrasies in different organizations where they do care, okay, where, you know, where's your data center hosted or, you know, what's your infrastructure provider, but that's a small minority. In AI, I think we're going to go through a temporary period where you do see differences in the models for anybody that has, you know, a discerning, you know, set of skills on this front. So, you know, you can see this in like cursor, you know, with Anthropic, right? Like people like that combination and they can sense the differences of the output. But if you, you know, fast forward five years, I think you'll see a convergence of basically models and intelligence to the point where you wouldn't really distinguish the quality levels that much for 90% of business use cases. It's definitely interesting to see how especially developers have developed different preferences for different models. Like I remember at our AI retreat a few weeks ago, Anthropic and Claude has also emerged as like the preferred LLM to like orchestrate your agents. Like if you have multiple agents and you want sort of the LLM to intelligently call the right ones, people seem to prefer Claude for that. What do you think is going to happen to the model companies themselves in this world though? Probably everybody needs to update their understanding of what a model company is just in general. I actually think there's very few model companies. There are sort of AI companies that have model, you know, frontier model labs, but increasingly they're selling software to either consumers or businesses. Like I don't even know who I would consider to be a pure play model company at this point. You know, Anthropic, if you look at their software revenue, you know, it's effectively an API business for enterprises. I'm sure they have, you know, some large scale consumer kind of Claude business, but you're really paying for the security, the compliance, the governance, the privacy, the uptime, the SLAs, talking to somebody that, you know, manages your account. And the model just continues to sort of switch out underneath all of that. If you look at OpenAI's revenue, anything that's been kind of leaked publicly, it's very clearly a software company at this point that has AI models that power its underlying software. Google obviously, you know, is just GCP. And then Meta doesn't need to monetize it because they can just open source it. So maybe XAI is almost the closest thing to now a model company, but that will show up in Grok, et cetera. So, you know, what you probably wouldn't want to do right now is start a pure play model company, expecting you're going to have like licensing, you know, revenue by just selling your model to people to go and use. If you don't have enough other kind of surrounding value proposition that, you know, again, lets you get incorporated into enterprises or has a large scale consumer application where you have some degree of kind of traffic that, you know, keeps people within your ecosystem. I think it'd be very bad to be just a pure play model company at this moment. Just because you have enough different business models that have emerged now in AI where it's going to be pretty hard if your pure play business model is just pure AI tokens because, you know, you always have Meta that will always create a counterbalance by just open sourcing, you know, a frontier model that kind of wipes you out. And now DeepSeek. And now DeepSeek. And so, and that's what's amazing is like now that like you can basically guarantee Meta has to do anything DeepSeek does because it obviously has to stay in the game on the open source front. So, we always have, there's enough dynamism in this industry that basically ensures to Gary's opening point that like the cost of intelligence is going to go to zero. Like, it's just like absolutely guaranteed. So, extrapolating, what does it mean for startups as intelligence becomes commodity, basically? Well, the good news is we kind of know, we kind of know the playbook on this with one X factor which is like AGI and like what is the ultimate, you know, kind of. X factor. Yeah, exactly. Like wiping out all of relevant business models if we don't have money in the future. But like if you put that to the side, I think these companies need to look like software companies and it is, it's sort of back to basics, which is, you know, we used to have an API into a database. We had an API into storage, we had an API into compute, now we have an API into intelligence. That intelligence is, it should be, you know, basically the cost of that intelligence will go down to the cost of the bare metal. So, whatever the underlying cost of the GPU is, that's what you're going to pay, you know, with a little bit of margin from a hyperscaler. But the cost of the actual tokens, you know, will converge at zero. And so, then it's all about, you know, do you build software that takes, you know, this complicated technology and delivers it to customers to solve real world problems. And so, you know, you guys have talked a lot about vertical, you know, AI. I think that's a massive play. I think there's going to be certainly a whole layer of AI software that kind of stitches together different AI systems. So, you have horizontal plays, you have vertical plays. I think the idea of every single industry and every job function probably will have some degree of new startups and agents that get built out for those, like, slots. I don't know if you guys have, like, a whiteboard of every industry and every job, but, like, you can just basically play, you know, bingo on that. And then until it's fully filled in, like, there's probably still opportunity left within AI. We figured out the first wave of SaaS of how to do this. You know, YC was obviously a big part of a number of major, kind of, category killers in SaaS. And I think we'll see the same playbook happen in AI. One of the many interesting things about DeepSeq was specifically the first open source reasoning model. Like, in the short term, do you think there's, like, new ideas in the enterprise in particular that are going to come out because now we have open source reasoning models? So what we've seen is, so we do a number of benchmarking kind of exercise internally for the reasoning models versus, you know, kind of, let's say, non-reasoning models. And some things that they're actually better at, some things are weirdly worse at. And I don't think we've even discovered why they're worse at these things. Maybe they overthink a problem. In general, I would kind of just argue that anything that directionally improves intelligence, you will see B2B use cases. You'll see the value of those use cases go up because, you know, you can begin to reasonably chain together more agents working together. You can get more agentic workflows happening. Like, anytime we can get the intelligence factor to go up, I can now reliably introduce this for a more important business process. And so, you know, in the enterprise, you can almost think about it as there's some probably, you know, either two by two or chart. I don't know if anybody's made it, but, like, kind of, like, mission criticality of the workflow, AI level of intelligence, and, you know, kind of there's an element of, like, you can't introduce it to, you know, closed banking, you know, like, you know, banking systems, you know, sort of, you know, end of day data, you know, yet, because it's not particularly deterministic. It's, you know, we don't sort of, you know, know all the answers that it's going to give. But it could write a summary for, you know, a new product launch at a bank. Or it could help answer, you know, banking, you know, product questions if you're a consumer. So there's a continuum there. And as we get every degree of intelligence going up, we get more use cases that we can now implement this for. And then there's another axis, which is, like, how many of those use cases, you know, can you string together to complete, like, the full workflow of that business process. And that's yet another, I think, axis that we're early in. But, like, you know, I was in New York a couple weeks ago meeting lots of banks and, you know, generally what you think of, like, the New York industries in enterprise. And I would say we're, like, 10% of the way into the adoption of, let's say, just, like, general chat. So, like, assistance. And, like, 1% of the way into adoption of anything we would all call agents. And that's maybe even inflated numbers. When you're in the room with, like, the banks, the Fortune 500s, or the people making their decisions in enterprise, do they really have zero interest in the underlying models? Like, is DeepSeat coming out just like a total nothing burger for them, and they just care about what you're pitching them and offering them? Or do they have interest in the actual underlying tech? There are people like us and the people listening at every company on the planet. And so those people care. By the time you get to the, let's say, line of business, so I'm the head of wealth management at a bank, they don't care. But the CTO cares, and the head of AI cares, and the, you know, the IT folks that dabble and they're hanging out on Hacker News, like, those people, they care, because they're using Cursor and they're using, they're seeing the differences between, between Anthropic and OpenAI, you know, tokens within that. But when it goes to talking to, you know, an executive in the business or the daily end user, they have no interest. It's all, you know, a foreign language to them. And I think that will remain the, you know, the way forever. I think more of the expectation is, is that, again, these things will converge. And what's amazing about AI is, because of the, I don't want to call these, the models fungible, but directionally fungible, because they're somewhat fungible, you will see characteristics that we've seen in other areas of compute, which is any best-in-class model eventually has to be, you know, match the price of anybody that beats them in pricing, because you can just switch to a slightly inferior model, even if it's like inferior by 1%, the risk is that you could switch to that and be, and find it acceptable for, you know, 80% of your use cases, which then by definition means whoever is at the frontier actually still has to match the pricing of somebody just slightly worse than them, because they could just, you know. The end user actually doesn't care. The end user doesn't care. And their business could evaporate if they don't do that, which means, ironically, you could actually stay on one of the providers. You could just pick a provider, and you kind of know that your tokens will become as cheap as the second or third, you know, cheapest option, because that first, you know, whatever that first provider is, the next marginal customer doesn't have to choose them. They could choose the second or third player. So you, which eventually then, you know, you run that experiment out, you know, 10 years, you converge on basically the same pricing, which is what we've seen, which is like the difference in pricing of, you know, storage buckets, you know, between the top three or four hyperscalers are not so different to drive business model, you know, fundamentally different business models in the software stack, similar to compute, et cetera. So really, you're making a choice based on, you know, some other set of reasons, like how much data do I have in the system? What are my workflows that I've built in the system? And then I think that, again, the price of the AI eventually becomes largely the same. Actually, I think what you're saying applies to what we're seeing for startups. I've done a number of office hours with AI startups that are selling to enterprises. And a particular story is this company that scaled to 12 million revenue within a year. They actually switched models underneath a number of times, and the end customers, which are these big enterprises, didn't care. What they cared was that ultimately the contract and that expectation was that just get the workflow done with this level of accuracy, done. And as the cost per token has been cheaper, they actually have been increasing their margins. I think when they started launching, I think their margins were around like 30%, the next cycle of iterations middle of last year with all the model releases got to 60%. And I think now they're at like 80%. That sounds like file storage. Yeah, exactly. We love that. So that's kind of what happened. I have like a concrete example for this company that I've done office hours on. Exactly. I mean, your analogy is actually quite literal. So right now, publicly, we have 81% gross margin. If you had said, you know, let's say when we started the company in 05, that a business that was perceived to be storing data would have 80% margin, you'd be like, no, that doesn't make any sense because people are just paying for the storage. And it's like, no, we have, I mean, you know, we have nearly a thousand engineers a box. One to 2% of them are working on what we would call file storage. So what is everybody else doing? We're building software that is the abstraction layer of compute and storage and databases to produce workflow and data governance and automation and insights on data. So the storage is now, you know, a small fraction of what we overall provide. So similar to tokens as, you know, the tokens go down as a ratio of what you're really delivering as value is that software stack. So I think, you know, probably a one way to think about it as a heuristic is like how much software is necessary on top of the output of the tokens for your value proposition to work successfully for the customer. is there, probably the higher risk you'd have to either more competition or commoditization, the more software there is, where the tokens are just one contained component of the full thing, then you're probably in a position where you can build a moat, you can get stickier, you can then solve more of that customer problem. But you might get to the point where the customer pays for a discrete outcome. This is one of the big open questions, I'm sure you're seeing it in the batches, but what is your pricing model? Do you pay... Let's say you're a startup that does AI lead generation. Do you pay per lead? That's a fairly obvious thing that you'd expect. And then basically that company now could be... Or do you even pay for qualified lead that the customer says is actually successful? So there's a whole continuum of, I pay for a successful outcome, I pay for any outcome, or I pay for the underlying resource utilization, which we also see in coding startups, where it's like, okay, I want to buy some unit of compute measurement that goes into useful work. But the cool thing is we're going to see a mix of all new business models and software that we haven't seen before. Yeah, this would be one of the biggest changes in the advice I give to the startups during the batch. It was really hardwired into me when a startup comes in, we're getting a pilot or they're going to pay us as we go or something like that to say, that's not a real customer, you have to go back and you have to get them to sign an annual contract and lock in revenue. Otherwise you're just wasting your time with someone who's sort of one foot in, one foot out. But over the last year in particular, when I look at the most successful companies, essentially often they're replacing a BPO or some sort of service like that. The customer actually wants usage-based and the revenues just keep going up and up and up. So I'm no longer like, oh, you have to sign an annual contract. Yeah. Yeah. I mean, for a lot of areas where there's a direct relationship between the thing that the company is selling and then, let's say labor on the other end, you do need a lot. You need long-term contracts, so you have to hire people. There's a lot of infrastructure you have to build out. The great thing about AI is it's entirely elastic. So we're going to have to imagine a new world where all of a sudden I have elastic resources for things that otherwise used to be very operationally intensive. So one day I can just say, hey, I want 10,000 leads generated, go run AI to go do that. And in a traditional way of doing that, that might take months of hiring and staffing and building out teams. Now it's a week later, you're off to the races, you're generating those leads. You can kind of go through any analogy of the business and that becomes possible. So totally different relationship between the company and getting out outcomes and output, totally different relationship also then for the software provider and what their business model is with that customer. Marc Thiessen And can we go back to your trip to New York City? Aaron Powell Yes. Marc Thiessen Kidding with the bank. Aaron Powell Just any of my trips. Marc Thiessen You spend a lot of time talking to senior execs at Fortune 500 companies about their technology and AI strategy, probably more than almost anyone in the world. And I was really curious what those people are thinking about AI. Are they focused on it? What do they think it's going to mean for their business? Are they building AI initiatives internally? Are they trying to buy products from other people? What's happening? Aaron Powell Yeah, I mean, definitely all the above. Did you see this thing that went viral like two weeks ago, David Solomon, CEO of Goldman Sachs? Marc Thiessen The S1 Prep. Aaron Powell Yeah, the S1 Prep. He basically had this quote at an AI event at Cisco, they're doing projects internally where AI is writing an S1 in like 10 minutes or something. And it used to be a team of six people that work on that, et cetera. The exact same quote just parallel universe quote, 15 years ago, let's say in the early days of cloud, just as a useful kind of comparison. I'll probably keep coming back to the cloud thing. It probably would have been a banking CEO saying, we'll never go to the cloud. Like we don't trust the cloud. And now the exact opposite. Marc Thiessen Which happened, right? Didn't Jamie Dimon? Aaron Powell Jamie Dimon did. I think he's sort of evolved his thinking, but you had that kind of across the board. These were these famous moments is like, we'll never be a cloud company. We don't trust it. We don't want to move. I mean, Amazon, it's a bookstore. That was the refrain. And it made sense. I mean, I even said that when I saw S3, like the bookstore is going to power, like what? So think about how different of a world it is that the CEO of Goldman Sachs is basically saying like, this is now what's possible. He wasn't saying that in like a, we shouldn't do it way. He was saying that in like a, we need to open our eyes up to all of the potential use cases that AI is going to have in the business. And he was saying it as a way that they're leaning in and starting to try out all these use cases. So for that to happen for a top five bank in the world at this early in the cycle, you know, it only goes kind of, it only goes more aggressive from there because he's in the most regulated of all the businesses in the most important financial market in the world. And he's already leaning in. Will Barron Is that because he's like a particular early adopter or are you just seeing this across the board? Yeah. I mean also he's like a DJ, so maybe he's hanging out with like EDM people that are just like really into AI music. Okay. So, you know, 10 years ago we'd host these dinners, 15 CIOs from different industries, heavily financial services, let's say if it's New York and it's like the, you know, we're going to try cloud for this one tiny part of our business. We don't really think we can scale. The idea of being cloud first is like, it would be like totally in, you know, an anomaly. Like you would never, like a bank would never say they're cloud first 10 or 15 years ago. Today it is, it is sort of like, we're trying this in as many areas as possible. Everybody's still insanely early because you've got privacy councils, compliance councils, regulatory bodies that have to look at everything. But everybody understands how, how big of a tidal wave this is going to be in their business on a few dimensions. One, they know that the workforce is going to completely change. I think there's a recognition, this kind of hit me maybe a year ago in some of these conversations. There's a recognition that, that, that basically, if you're entering the workforce today, you've had now a couple of years of chachabity of college. Like you don't like, they're native. It's an AI native, you know, era of, of the workforce. And, you know, we could make some jokes about it maybe two years ago. Like, oh my God, the writing essays, I can't believe it. But like, I, I basically almost don't search the internet anymore. Like I only know how to use AI to find information and guess what? Like I'm, I'm, I find 10 times more, more information as a result of that. So, so actually in many respects, the AI native, you know, people will be smarter on the topics that they decide to go in on than, than, than the prior generation of, of whatever that is. And so what does that mean? Like these fortune 500 companies are changing how they hire? So I don't necessarily know how they hire, but, but it'll become clear that if you don't have AI, if you're not an AI first bank or media company, So what's your AI strategy? Literally, what is your AI strategy? Because, because why would it, Even to the customers or internally? The enterprise will, will basically realize that they can't actually hire the next generation. You can't go from all of a sudden I have this AI native way of, of operating in college or high school to going to a company that makes me use, you know, the equivalent of a fax machine, you know, level of technology. It's just like, they won't be able to hire people. And then their, their competition will have more output. They'll, they'll, they'll do more investment banking deals. They'll onboard customers faster. They'll get better financial advice to their clients than the company that, that, that, that sort of doesn't do that. And so everybody's sort of realizing this is actually a competitive issue. Cloud didn't really have that. Cloud was purely an efficiency story. It was like, it was like, ah, yeah, I don't really want to have to be building data centers as much elastic capacity. Sounds pretty good. I want to be able to test this new product faster. It was not like my customer is going to experience a different thing about my, about the output of my company, whether I'm cloud or not cloud. Now, I think we all believe that that was, that, that, that there is a difference there. There was not tangible to the buying side that cloud was going to make your company five times more competitive in a way that AI is, is very clearly, I think, resonating that actually your company's competition will now be at risk. Yeah, that's a really interesting buy native. Because like with cloud early on, a lot of the benefits were actually to the startups who pushed it forward because they just wanted an easy way to like get set up and not have to deal with hosting. But you're saying it might be the opposite where with AI productivity tools, startups don't really need them. But actually, maybe the counterpoint to me, what this sounds like is actually way more opportunities for startups. It's just all the office hours that we're doing. I think it's the fastest I've seen B2B, SaaS, AI companies get enterprise deals. And I think you painted a very good picture of what's the buy shift. Yeah, if I can just slip in one funny anecdote. I went to this banking conference eight or nine years ago, and I did this little keynote at this banking conference. And it was all about like, we have to be cloud first and enterprises have to modernize how they operate with the cloud. And I think I've never been... I think I've never bored an audience more than that keynote. I remember getting off the stage and nobody caring. It was just like, because it was like, why are you talking about backend infrastructure? Nobody cares. Like, yeah, whatever. We could be in the cloud. We could not be in the cloud. At our levels of budget, if we're spending like $500 million or a billion dollars a year in IT, who cares if we save $100 million because some of it is elastic or not? It's not that big of a deal. If you were to do the same thing, but an AI first to non AI first enterprise, people would be like, oh shit, actually, I probably can't run my business anymore, not AI first. Because you would just show people like, do you know the productivity gains of somebody using, let's say, Cursor? It's like, you will be blown out of the water competitively if you do not know how to build an AI first company right now. Yeah. Has Box invested in any internal AI tools to speed up how you run the company? Yeah. So a few categories. So one, we've been rolling out AI for on the coding side and we're trying everything- Like internal tools for your engineers to- Yeah. Yeah. So basically just how do we make the engineering kind of more productive? And that's obviously one of the biggest X factors of our business is can we output more code that is obviously useful and aligned to our product roadmap. So we will be fully AI first in terms of how we develop. This year, it's the third of the big year for all the change management on that. We are incrementally rolling out AI for different customer facing things. Just again, can we solve the customer ticket problem? Can we improve the rate of response? And then as an AI provider, a lot of the knowledge management use cases, we sort of now do ourselves with AI. So if an employee has an HR question or benefits question, we have a feature that lets you talk to all your HR data and all of the internal knowledge management. And so what became this breakthrough for us was all of a sudden, all the things that were inside your documents before become useful for now just interrogating with questions as opposed to reading documents. And so there's a lot of just embedded productivity that we focus on from that standpoint. What things do you think they're going to do internally? And what things do you think they're going to buy solutions for? I would basically guess that again, it kind of looks pretty similar to kind of historical ways of thinking about this. I think Jeff Moore created this, and if I'm getting it wrong, again, please Jeff Moore, pop into the comments. I would just comment the right name. And the idea was sort of context is all this stuff that is sort of like you have to do, it's necessary, but it's not going to make your business better than your competitor. And so that's your HR system. That's your ERP system. You have to have it. It's important. It has to be done extremely well, but like your version of the HR system is not going to be radically different than- Box checking. Yeah. Any of the box checking things. You have to check the box, but it's got to be a good box and whatnot. And then there's core, which is, this is like literally your value proposition. You sell wealth management services to people. And that is something you own. If your thing looks exactly like your competitors, then there's no sort of profit margin that you'd be able to... You wouldn't be able to get reasonable profits. You have to have something that's unique. And I think companies need to really understand which category is which, partly because if you put the core in the context, then you'll probably be at a long-term disadvantage. And if you put the context in the core, then you're wasting a tremendous amount of time and energy. And this is why I really enjoy the Klarna announcements or whatever. It's fun to read, but I also think it's sort of misunderstanding the context versus core thing. You don't need to build your own HR system. I'm glad they're doing it. I think it's provocative. It's fun to see different approaches. Gets the people going. It gets people going. It gets our... We're like, our juices are flowing, but the average bank is just not... It's not a priority for them to reinvent their HR system. So I think whatever is that for every industry. In life sciences, you probably really want to understand how are you doing drug development? And you should probably have a very strong AI team working on that problem, because that's something that sounds like it's going to be IP for you. But the automation of the clinical trial process, that's probably context for you, because everybody's going to want to be doing that as quickly as possible. It probably doesn't involve a tremendous amount of proprietary data. And then obviously your CRM system, your HR system, and so on. So it actually sounds like they're going to buy a lot of things externally, because most functions in a business are actually context. Yes. Yeah. I think most of the way AI will show up to a knowledge worker in 2030 will be from what we would have thought of as an ISV 10 years prior. What's an ISV for the people watching? Yeah. It's just basically a software provider. The CRM system will still come from Salesforce or ex-competitor. It won't be that they built a homegrown AI generated CRM system. They might talk to that CRM system through also a new vendor or something that they build internally. It's interesting. There's actually a lot of chatbots being built internally by companies right now. I'm sensitive that I think it might be a temporary phenomenon. I like UX better than chat. Yeah. Okay. Yeah. I think we're going to see a hybrid of these two things. I think the GUI is not as dead as people think. You do see a lot of chat interfaces where you're like, I think you just did way more work than just going to the dashboard. I'm 90% sure you just probably took all the savings from AI gains and efficiency and then just spent it on figuring out a prompt that a dashboard would have solved. But I think we'll have a universe of both those things. But I do think ultimately most will come from software on a percentage of time that a knowledge worker spends inside of technology. But some of the most valuable things absolutely will be homegrown. The algorithm you use for discovering the thing or personalizing the medicine or personalizing the wealth data or Netflix's recommendation engine, those will be homegrown things. Maybe still using a model from a proprietary player, but the scaffolding there will be, I think, largely built internally. Interesting. So I guess the mental model for people watching might be that there's inside the house and outside the house. Outside is context, which are just checkboxes you have to check. And those might be end-to-end things that just do the thing like Salesforce. Yeah, I think that's right. And I think maybe another way to reverse engineering is if you were the customer of this company, would you care what technology they used for that category of thing? Or is it like, just get the box checked and I'm good? Yeah. As a customer of Netflix, I literally don't care what their ERP system is. And then on the inside, the things that are core that you really need to do, maybe the opportunity there is infra and dev tools that allow an internal IT team or internal engineering or AI team to run really fast, but then create exactly what that business needs. Yeah, yeah, yeah, exactly. And then there's a little squishiness in there, just to be very literal about it, because you also probably don't want to do homegrown dev tools. So you still might procure those. And then there's this layer between the dev tool and the customer experience, which is, what am I doing with the output of these tokens? That's something I need proprietary software built on. And so what is in that universe? But I think that, for instance, I think there's going to be amazing dev tool opportunities coming from startups right now, because it's a whole new stack that you have to build out for managing AI within your enterprise. That in between bit is actually, we see open source a lot. Have you seen any renewed interest or any trends on open source interest in the enterprise? Selfishly, I love open source because we don't have to pay for what we're using. We should give grants. You don't pay for the hosted versions all the time. Sometimes we do, but I was actually thinking about this. I think a thing that would be cool to see tech people do more often is just start large scale open source projects and fund them. I think more open source software for the common good of just lots of different services, I think, is a huge net positive. I'd love to see more open source in general right now. It's such a great symbiotic model because the hacker community or the startup community, they want to move fast. They can't often afford the licensing of whatever that thing is. The large enterprise community, they want support. They want to have people that are experts in managing this stuff. So it's this great relationship, which is like you have this great good for society, and you still actually can be building a successful commercial business because lots of people want to pay for the commercial version of that. Aaron, in the early days of this cycle, there was a lot of concerns from enterprise about the security implications of using hosted models like a whole bunch of companies like BandChat. GPT use internally, what's happening now? Have they gotten comfortable with the idea of having all of their data go to OpenAI and Anthropic or are they still really worried about that and trying to host open source models and things like that on-prem? Yeah, I think you'll see different categories by industry. So a lot of times they'll go into a bank and they'll say, and they'll be proud of this and as they maybe should be, they'll say, we have our own kind of enclave version of X model and then we built out a wrapper on top of that for deploying it to employees. And I think that you'll always have some percentage of the market do that, 10% of the market because you still have a lot of people that have on-prem systems for a similar reason that will always be there. But the comfort level is absolutely increasing. That tends to always happen if the industry or the company takes it very seriously. So OpenAI has taken security, privacy, compliance, regulatory controls very seriously and so then that builds trust over time. So then more people can go in, can experience those use cases. So anytime a software category matures and becomes more enterprise grade or military grade, you'll see a correlation of the amount of trust in putting data into those systems. And I think AI is no different than against software and kind of cloud in that respect. Maybe part of it is just a lot of the behavior is from all these enterprises. They got in a lot more comfortable because of what you paid with cloud, right? They kind of already have preferences on how to do this, host it, and okay, we know how this looks. So it's a lot harder for you to sell on that first cycle. This cycle, you kind of compounded it for this next generation of founders, so thank you. People need to be really thanking me. I have not, actually, you know, it's funny that you put it that way. I don't think I've ever been thanked for the hard work. Consider yourself thanked. The years of dinners, all the CIOs that made it possible for your AI startup to get sold into the enterprise, I'd like a big thank you. I have not been respected. That has not shown up in a lot of ways, but I appreciate it. Every single white hair is a dinner that you had to do to teach people that you should buy this. This is the only way to get that. I would like a plaque at the office. I don't know why I don't have that yet because none of you have gray hair, so this is, and I'm responsible for AI working now. Yeah, but it's an interesting question, right? And this is what's so fun about the compounding nature of technology. AI could not have happened in 2005. Let's just pretend the breakthroughs actually happened. Let's pretend an alternative universe where the exact same somehow, like Jensen had made GPUs as powerful as they were now in 05, but everything else was the same. Okay, weird world, but let's just say. And imagine going to a company and you're like, okay, we know that all of your infrastructure is on-prem, and we know that all of your software is on-prem, and we know you're on Siebel, and we know you're on PeopleSoft, and we know that all of your data is in this system, but if you just move it to this other thing that you have no control over, it's in a data center you don't know about, you have no ability to kind of go in and look at the data center and look at the hard drives. If you just move everything over to this, think about all the intelligence. I mean, it would be DOA. Like this industry would just be over. It wouldn't matter what the tokens are coming out with. So you actually, it was a requirement as a prereq to have cloud have happened, to have SaaS have happened, and then now AI happens, building on that. And then even the consumerization piece is so interesting. Imagine a world where we were only an enterprise using technology. We didn't have the kind of consumer access to technology that eventually happened with mobile, et cetera. You wouldn't have people seeing Chachapiti and Perplexity and Grok, et cetera, in their personal lives, and then saying, wait a second, why are my IT systems feel so archaic by comparison? That's what's causing all of this pull also. So you needed consumer adoption of technology. And then the fact that now a billion people, billions of people can use AI to then pull that into the enterprises. You need the enterprise's infrastructure to be modern enough. So it's this incredible Cambrian explosion of now opportunity because we're in a moment where enough of the kind of core plumbing has been built out. Also enterprises just became used to using like different software solutions versus just relying on like the- Three vendors, exactly. Yeah, a hundred percent. Like they now, now some of them don't like this, but their IT stack is now hundreds of vendors versus a dozen. And so they can accept, okay, I'll take a meeting with Entropic. Like this is totally, it's only now a 1% increase in my total kind of IT vendor universe versus 15 years ago, but like now I can't bring in something that's not Oracle. Yeah. We'll keep accelerating. Please just keep driving the startups that cause this to happen. You had this front row seat to the transition from on-prem to cloud. And now we're at the dawn of the next transition from cloud to AI. How do you think it's going to play out similarly? How do you think it's going to play out differently? And how do you think that relates to the TAM for software going forward? Yeah, so if I could try and merge these, actually there's a cool connection point. So the probably single biggest bear reason why people didn't invest in SaaS in the mid 2000s was they thought the market sizes would be basically the same size as the on-prem software company. And so if it was the same size as the on-prem software company, but also the software company that's already there is the incumbent, it's like, how do you squeeze out enough money to kind of make the business really, really, make it really interesting. And what everybody basically got wrong was it turned out that the TAMs were probably about 10 times larger. Why did the TAM grow so much? Because just to like bore everybody, if you wanted to buy a CRM system in 20, sorry, in 1999, you had to be like, okay, I'm going to go to the systems integrator, I'm going to get a data center, I'm going to buy a bunch of servers from people, I'm going to install some software, I have to manage the network of that. And like, you know, lo and behold, two years later, you might have a CRM system and you probably spent five, $10 million on the full project to do that. So think about who is the market that then can implement a best in class CRM system. It's the world's largest enterprises, you know, 5,000 companies, 10,000 companies. Salesforce comes out and they're like, for three seats online with your credit card, you have a CRM system as good as Siebel. Obviously there'll be some nuance because it didn't have as much functionality, but like for that company that was as powerful as Siebel, you know, getting started. Now, all of a sudden your TAM is basically every business on the planet. So you go from a market that had maybe 10,000 customers, 20,000 addressable customers, to now a market that has 5 million, 10 million potential customers. It is a totally different scale. Like, you know, two, three orders of magnitude more scale that you can now go and serve. We had a similar experience, which was, you know, the industry we were disrupting was like legacy, enterprise document management, enterprise content management systems, same exact thing as Siebel in terms of like, we would read the S1 of our biggest incumbent competitor. And they were talking about like 1,000 customers or a couple thousand customers. And literally, you know, now we have 115,000, but like, but at the time we had, I don't know, five or 10,000 when we started thinking about disrupting this and like the scale was just completely different. So that meant the market sizes were so much larger. You know, ServiceNow today, I don't know the exact latest market cap, maybe it's 150, $175 billion. Their incumbent competitor, when they were first growing and disrupting the market, today is worth maybe about five or 10 billion. So if you had looked at this company 20 years ago, you'd be like, at best, ServiceNow should be a five or $10 billion company if it just was like a better version than the current thing. And it turns out it's 15 times larger than what you would have thought. Salesforce did the exact same thing and so on. AI I think has a similar dynamic because you're basically increasing the total spend on software. So it's not so much that a new set of companies will buy software for the first time, it'll be all companies use software to do things that software didn't do before. And that will take from budget that previously was sort of untapped from software. So the budget will be from a variety of things, but often because now the software is doing useful work for you, you can now afford to spend even more on that software because the alternative was a much more expensive sort of proposition. Here's where I think people kind of get it wrong though. They think about it as zero sum from, well, then all you can do is sort of take from the labor side of that spend, but it actually just turns out most companies aren't even spending on the labor side. They're just not doing the thing. So most companies are like, just like globally are not like spending time to translate their advertising into a different language. So it's not that, oh, the market for the translation services are this big and we're just gonna digitize it. It's like, no, a hundred times more people will do translation. In our business, like we have software now that reads your contract and pulls out the critical data from that. So you can automate a contract workflow. And like the number of people globally that are reviewing contracts and pulling out that data, maybe it's 10,000, 50,000 people. I don't know the exact number, but a very small percentage of companies are doing that with their contracts. So they will now decide to prioritize automating a thing that they didn't automate before. Cursor, as just a, back to that example, or Repl.it or Devon or whatever, there's probably not a single dollar that's being spent on that technology that comes from, takes away from what people are currently doing. It's purely additive because now it's expanding the use cases that software can kind of tie into. So I think we're in for a potential scenario where the size of software, now you have to include AI in that, could be five times larger in the next decade because it just, it supplies the actual underlying work that you actually bought the software for in the first place. And that just changes everything because now you're gonna be paying for work as a paying for a tool that enables other people to do work. I think that's such a powerful AI white pill, actually. It's not merely zero sum, we're converting payroll into software revenue and ha ha, that's it. It's actually, we're gonna do things that enterprises should be doing, would have been doing. It never got around. And then, actually the people who are the consumers on the other end, they're gonna have better products, better services, like the thing will actually just be better for. I haven't yet read the full economic study on this, but where economists always get this stuff wrong is they do probably by default tend to have a kind of a zero. I mean, you wouldn't have like Jevon's paradox if economists always knew how to anticipate these things. But what I think they often get wrong is they look at the total amount of market labor in a category and they're like, well, shoot, if AI automates that, that's now gone. Look how many jobs that is. I think we should debate it and we should talk about it because it's a very serious thing. But what they don't actually ever think about is the more microeconomic impact of this. So if I'm a company and it could be Box or it could be a 20 person company and I use AI to, let's say code faster. Okay, well, why am I coding faster? Because I wanna build a better product for my customers. If I'm building a better product for my customers, my revenue should be growing faster. If my revenue is growing faster, I probably am hiring people to go and do things to drive that revenue growth. Maybe it's people selling the software. Maybe it's customer support. Maybe it's HR people to help scale the operation. And eventually I'll get to a point where I say, should I reuse those dollars that helped me grow faster to hire more engineers to grow even faster and to build more of that roadmap? And if we were in a market that wasn't competitive, maybe you could say, you know what? I actually just wanna take the profit and be happy, but we're in a competitive market. So if you're the one company that decides to sit on the profits that AI generated and just live off of higher profit margin, 20%, 30%, 40% profit margin as a company, you'll just have somebody come into the space and say, no, actually we'll just, I'm fine to have 20% profits and do that same thing. And then that company will eat into your lunch. So you actually then reinvest those dollars back into the things that are helping you grow faster. And that's actually like the microeconomic outcome of automation is you decide that you take that efficiency gain and you redeploy it into the business in something that will make you more competitive or grow faster or better serve your customers because you're in a competitive ecosystem. And that's why I think as, you know, over time, yes, you'll have some displacement in different categories, but over time, this is why it generally just looks like an upgrade to just how we tend to work, you know, in the world. Like we just tend to use tools to work faster, to make better decisions, to build better customer products. The customer gets a better result out of that, but we reinvest those dollars back into the businesses because we're in competitive ecosystems. And then the ultimate winner is the consumer. Consumer always wins on this stuff, right? Now with one X factor, just to like bring it home to SF, like assuming we have a regulatory environment where those winnings can actually turn into surplus, right? So if it turns out that we take those winnings and then regulate, you know, the ability to build housing, then all of a sudden everything's still just as expensive. But like the total utopian, which is sort of the abundance thing is like, wait a second, if we can use AI to automate more, we can build more. If we could build more, we could lower the cost of things. If we can lower the cost of things, then we can actually lift up anybody's lifestyle right now. You know, the 10 year old in an underserved community is now all of a sudden has access to the world's intelligence in the form of an AI agent. So they can, they now, you know, are able to be educated better. If we can lower the cost of delivering services to people, then you get, you know, better healthcare. That's like the ultimate utopian state is we use this automation to actually deliver better outcomes for the world. And that will require tons of jobs as a result of that. Yep, we can be a society again because of AI. There you go. Aaron, thank you so much. Thank you. Thank you so much for being with us. I think that that's a great place to end just because, you know, to be continued, like, you know, I think that we're in the middle of the revolution and the revolution does not have to be a black mirror. It could be something that is driven by Jevin's paradox, driven by abundance for everyone. And that's certainly the timeline we want to be on. So let's do it. That's the future I'm betting on."
  },
  {
    "name_video": "Building A Supersonic Plane Company From The Ground Up",
    "description_video": "Imagine flying from NY to London in just a few hours. That’s the future that Blake Scholl and his team at Boom Supersonic are working towards. ",
    "related_categories": [],
    "page_url": "/library/MA-building-a-supersonic-plane-company-from-the-ground-up",
    "youtube_url": "https://youtube.com/watch?v=sOFmYwYa9Pk",
    "mp3_file": "downloaded/Building_A_Supersonic_Plane_Company_From_The_Ground_Up.mp3",
    "mp3_content": "This is Boom Supersonics' XB-1. It's the first independently developed supersonic plane in history, but the XB-1 is essentially a prototype. The next step is to build a supersonic passenger airplane that you and I can fly in. We are here to bring back supersonic passenger travel and ultimately to make the planet dramatically more accessible. Blake Schull is the founder and CEO of Boom Supersonic. The way I got to Boom was to ask myself, of everything I might work on, what would personally make me the happiest if it worked? And I knew I wanted to work on flight. If every founder just worked on the most ambitious thing they could get their head around, everyone's going to be a lot happier and a lot more great things are going to get built. I've been following Blake and his team at Boom for nearly a decade. And recently, I was lucky enough to join them in the Mojave Desert for the XB-1's historic flight. During our trip, I got the chance to sit down with Blake. In our discussion, we talked about the history of supersonic flight, how he went from being a product manager at Groupon to the founder of Boom, and how he took Boom from a crazy idea to a working airplane. What are we looking at behind us? That's the XB-1, history's first independently developed supersonic jet. And we built it because we wanted to learn 100% of the lessons required to build a supersonic jet safe for passengers out of technology we could deploy on an airliner. One analogy is XB-1, that's kind of like our Falcon 1. That was the first time that anybody outside of a nation state had put something in orbit. And SpaceX did that to prove they could do it, and then moved on to the Falcon 9. Overture is like our Falcon 9. All of this is leading to the Overture, a supersonic airliner that will carry around 65 passengers and travel at Mach 1.7 while running on 100% sustainable fuel. They've even figured out a way to prevent sonic booms from reaching the ground, which will allow them to fly over land, a major hurdle for past attempts at supersonic passenger travel. The goal for Overture is to start carrying passengers by 2029. How did you get the idea to work on this, and how did you get the company off the ground? Yeah, so I had set a lifetime goal in my 20s of flying supersonic. After I'd been seeing a Concorde at a museum in Seattle, I just put a Google alert on supersonic jet. In decades past, people regularly flew at Mach 2 on the Concorde. The Concorde was developed as a joint venture between the French and British governments in the 1960s. It carried passengers from New York to London at supersonic speeds from the mid-70s until 2003, when it was finally shuttered. The Concorde was too expensive to operate and never fully lived up to its potential. And when it shut down, technological progress reversed itself. The future I want to live in is one where flights that are at least twice as fast as what we have today are totally retained, taken for granted. Help us understand what this is going to mean for regular people as passengers. Air traffic is going to come to market much the way many other new technologies do, where they start at relatively higher price points and then come down. Just electric cars, cell phones, computers. Concorde was kind of out in no man's land, a $20,000 ticket adjusted for inflation. And Overture version 1 is going to be like flying business class today. So imagine Tokyo to Seattle in four and a half hours, New York to London in about three hours and 45 minutes. But being able to do that at about the same fare you have in business class today. Rik has loved planes since he was a kid and has a private pilot's license. But he didn't pursue aviation professionally until he was in his 30s. Before that, he studied computer science in college and his first career was building websites at Amazon, Groupon, and his own startup. My background was in the tech world. I started my career at Amazon as a software engineer. After Amazon, he worked at the mobile startup Palago before co-founding his own startup. My first company was a barcode scanning game. I knew e-commerce and I'd worked at one of the first iPhone app companies. So I figured I knew mobile. So I thought I should put those together, work on what I knew, I should work on mobile e-commerce. What I found was chasing what I thought I knew gave me a sense of competence, but it gave me no sense of purpose or drive. A thing that I've come to believe is that knowledge and skills are variable. I think smart people underestimate what they can learn, particularly if they're motivated. But what you can't change is your passions. If you go after something that inspires you, you can go find that you can create skills and knowledge that you didn't have before. After I sold my first company to Groupon, I wanted to work on something that would be inspiring that I would never want to give up on, no matter how hard it was. And so I figured obviously someone will go do this, that someone will pick up where Concord left off. And I was just waiting to find out when I could buy a ticket. But it was crickets, and I didn't know why. And so when I got to that point of being ready to do my next company, I thought, OK, I never want to be 80 years old, looking backwards and wondering what if I tried. So I thought, OK, I got to get this out of my system. I got to look at it, understand for myself why it's a bad idea, and then move on. And so my first question was, why did Concord fail? The answer was not technology, the answer was economics. At that point, I figured I had to get a lot smarter. I bought every textbook I could find. I took an airplane design class. I took remedial calculus and physics from Khan Academy because I hadn't had either since high school. Another thing I've come to believe is, particularly for what people call hard tech or deep tech, where the technology development timelines and costs are longer, one of the biggest ways you can fail is to build something that nobody wants. So you've got to mature the concept of the market along with the concept of the product and be really honest that there will be product market fit for the eventual thing. My first question was, why did Concord fail? The answer was economics. It was a $20,000 ticket, 100 uncomfortable seats, the thing flew half empty. And then the question became, well, how much would you have to do better than Concord on just fundamental efficiency of the airplane in order to make those economics work? A business class fare, a seat instead of a bed. And literally, it took two weeks to have that question. And then I got to the point in the middle of 2014 where I had a spreadsheet model of the airplane and a spreadsheet model of the market. One tab was like global air travel, every route on the planet, how many seats, at what fares and how much the speed up would be with a certain crew speed of the airplane. And then there's the other tab, which is about the technical stuff. What would be the lift to drag ratio? What would be the engine fuel economy? What would be the structural efficiency of the airplane? And it turns out you can predict the performance of an airplane with really just four inputs. Brake efficiency, lift to drag ratio, propulsive efficiency, structural efficiency, and lower numbers are better. If you've got those three numbers plus the Mach number, you can really predict the whole airplane. And then the output is as good as the assumptions. So I had that model, I had taken it to a professor at Stanford and I said, look, dude, I've been at this for like two seconds. I don't know what I'm doing, but are the assumptions reasonable? And he said, Blake, if you're going to do this, you should try harder because all these assumptions are conservative. I remember leaving his office and thinking, if that's true, either I have no courage or I'm going to go find some engineers and we're going to make a run at this. And I think that's one of the advantages that I had coming to Aerospace from the outside is I didn't have time to go get a four-year degree, let alone a PhD, let alone spend 10 years at Boeing. I had to go look for the fundamental truths. And they are surprisingly accessible. So I spent the next six months networking. And day zero, I didn't know a single person in the industry. I remember going to go to LinkedIn, filter industry equals aerospace, connection equal first degree, and literally there's no results. My first intro was a guy who had worked for me at Groupon and played hockey in college as somebody who now worked at SpaceX. That was how you broke into the aerospace industry? That was how I broke into the industry. So I'd write these, you know, intro request blurbs that were like, hey, I've got an airplane design idea and I'd love to get your advice. And I'm happy to fly to you and buy you lunch. And you'd like fly around the country. Yeah, I did. You know, so that was my only cred back then. I could show up in an airplane that I flew myself. That helped more than I thought it would. I would go meet basically as many people as I could. Every time I met somebody, I would describe what I was doing, try to convince them I wasn't insane and then say, if you can wave a magic wand and get anybody in the planet to come work with you on this, who would your top five people be? Forget whether they're available. Forget whether they're interested. Forget everything other than, would this be one of the top five humans on the planet to do this? I would ask that question recursively and it turns out you don't need many levels of recursion before I was actually talking to the best people on the planet. So that was how I found the initial team. But for the first 18 months, I thought there's no way I could possibly be the human that had found the formula for a supersonic passenger flight. And it was actually very liberating. So I'm like, today will be the day that I find the bug in the spreadsheet. But after a while, it was like, if the math was wrong, I would know by now. What did everybody else get wrong? All these supposed experts in aerospace who thought that this idea was crazy. Why did everybody else miss this simple insight that you can get with a three line spreadsheet? I think it's a form of the bystander effect. Supersonic flight would so obviously be a good thing. Nobody's doing it. There must be something wrong. There must be a good reason why. Right. The internet was full of bad reasons why. One form of which is giving a qualitative answer to a quantitative question. People won't pay more for speed. It's all about cost. The market's too small unless you can fly supersonic over land. Sonic booms are too loud. These are all qualitative claims about quantitative topics. I was fortunate that having, I left Groupon, I put aside a year of my life to just figure out what I wanted to do next. And so I could kind of go down this rabbit hole without worrying too much that it could be a blind alley. And I think nobody else went down it. This is not some, you know, amazing deep fundamental physical insight that you need 20 PhDs to go accomplish. It definitely makes me wonder how many other ideas like that are lying in plain sight waiting for someone who's ambitious enough to just like defy the bystander effect and like stand up and say, well, I'm going to do it. I think there are actually a lot. How big is the team? How old are they? Yeah. How did they know how to do this? They're about 50 people. 50? This whole airplane was built by essentially 50 people? By 50 people. Yeah. Small, high caliber teams can do things that big teams can't do. Those constraints breed a lot of innovation. We looked for evidence of having done meaningful things. A lot of the team was young. They came from places like SpaceX. We'd find people earlier in their career at Boeing before they were corrupted and steal them. Early career, the hardest ones to get were the ones that had been around the loop a couple times but had not gotten destroyed by big aerospace. You don't get a bunch of experts that have been there, done that, and know it's impossible. You want a handful of them on speed dial to prevent you from making foolish mistakes, to help you see around corners. You got to listen to them only the right amount. That's my belief. And beyond that, smart, ambitious, hardworking, and incredibly passionate. That's the formula. How have you managed to do this so quickly with so few people, basically just a core team of 50, a relatively modest amount of money by aerospace standards? If we knew on day one what we knew today, we could have done it in half the time for a third of the money. We made a lot of mistakes along the way. We knew we would. That's why we did a test airplane, because we wanted to learn those mistakes. It's cheaper to enter it in a small airplane than it is in a big one. Building a supersonic jet is ridiculously hard. It's not possible. It's not impossible. You're in this pretty unique position because you built both a traditional software startup and you went through YC with a hard tech company, which a lot of people don't even realize is a thing. What advice would you have for founders who are just starting out, they want to start a company, they don't really know what their path is? What have you learned? Founder motivation, I think, is really, really important and it's undervalued. The thing that has enabled me to go through a zillion things and never give up is just belief in how important a cause is. The world needs supersonic flight, passengers deserve it. So there are days that I get up and there's a problem that I don't know how we're going to solve. And there are days where I question whether I'm the person who can pull this off. But there is never a day where I don't think it's worth giving it everything I've got. The story of Boom shows that founders don't need to be constrained by their on-paper credentials and that the most ambitious startup ideas are surprisingly achievable and sometimes hiding in plain sight. Startups are hard. My first company had high highs and low lows and Boom is high highs and low lows. I think ambitious founders, we're going to run at our personal red line. And being at that personal red line, being at that I don't know if I've got what it takes, that's going to feel the same way at any company. So you may as well work on something. You might as well work on something really big."
  },
  {
    "name_video": "The Right (And Wrong) Way To Spend Money At Your Startup",
    "description_video": "In this episode of Office Hours, YC General Partners  @bradflora ,  @koomen ,  @dessaigne , and  @gustaf  discuss how to spend responsibly at each stage of a startup and what spending mistakes to avoid.",
    "related_categories": [],
    "page_url": "/library/M9-the-right-and-wrong-way-to-spend-money-at-your-startup",
    "youtube_url": "https://youtube.com/watch?v=IRROi-Q1V44",
    "mp3_file": "downloaded/The_Right_(And_Wrong)_Way_To_Spend_Money_At_Your_Startup.mp3",
    "mp3_content": "When I see founders that are spending too much money, it's because they haven't yet had that moment, that lightbulb moment with any customers, that this is a thing that people want. And so they're kind of chasing that they're trying to force it. And they think that if they can, the trick is to push harder, and not maybe do something different. One of the fundamental misunderstandings that a lot of early stage founders have, and they look at companies that have product market fit. At that point, what you need is growth. And money can help buy growth. When you're pre product market fit, the only goal is to find product market fit. And money can't help with that the only thing money can buy you pre product market fit is time. Welcome to another episode of office hours. I'm Brad, and I'm here with Pete, Nicola and Gustav. And we have sat across the table with 1000s of founders over the years talking about all sorts of crazy topics. And today we're going to talk about money and how to think about money, how to think about spending money, when is a good time to spend money, when is a bad time to spend money, what are great things to spend money on bad things to spend money on money, money, money. So the startups kind of relationship to money, or maybe the attitude around money changes depending on the stage that the company's at. And so companies, let's say that are precede as one might like to say where it's day zero, they're just getting started, maybe they're thinking about applying to Y Combinator, or they're just applied to Y Combinator getting ready. How should they be thinking about money? What's the what's the what's the overall money strategy for a company that early? I think that's pretty simple at that stage, like don't spend any dollar. Yeah, like only the very much necessary stuff. Yes, you need a laptop. Yes, you need a place to live. But that's it. If you had to guess just thinking on the spot here of all the companies we funded, say in recent years, like, how much money have they spent? What's typical? How much money have they actually spent before we funded them? If I think about it, the number is very small, very, very small. Right, it might be tempting to think, oh, there's YC funds companies, and they've done all this stuff. But they really haven't. I mean, we fund companies before they even start working on the idea. That's right. So at that point, it's zero. And some people have worked for a while, maybe 10k over six months, and the vast majority don't even have bank accounts yet, or even exist as an entity yet. In the earliest stages that you spend no money, you probably don't have to spend much money on anything. Okay, but then let's say you get out of that and you become you raise a seed round where anywhere from half a million to $2 million. What are the things that are important for people to be spending money on? Or that we typically see people spending money on that we think good, good things. The most common case for software companies, you hire one or maybe two engineers, and that is over a span of 12 months. And you know, both of them. Okay, let's try to convince the best people. And you already know that they're pretty good. Have you worked with them in the past is even better, or like you know them from work or some some school projects. And then you just get kind of a convincing game. You like convincing them to leave their really other good opportunity. Yes. And and if you hire those two people, that's that's mostly what it's all about. For other roles is generally like contractors in the early days, you don't really need full time roles besides one or two more engineers. Founders should be doing sales. Don't have a higher for sales or marketing until product market fit. Yeah, this is a kind of one of the dangers of having the money is that the things that you don't like doing, you're like, great, I can hire someone for this. Well, if you don't like doing it, you're probably not very good at it, which means you prior someone who's also not very good at it. So you have to learn the things. And this is another extremely common office hour for us is founder reaches out, there's this person, they're so good at selling, I think they would be better than me at selling my product that I'm the only one in the world that understands. Help me figure out how to hire them and make them better than I am at selling this. And you know, it's oftentimes a very disappointing office hour for that founder, we have to say, I'm so sorry, no one is coming to save you. You are on your own. You've got to figure this out. Maybe a sales coach sometimes we've seen some examples of that. Okay. But bringing on someone to sell the product with as a seed stage application of money. It's not good. No one can sell the product better than the founder to for marketing to as you can start scaling. Like, like who knows your market? Who knows your customers? You are like your ideal customer profiles, like nobody else than you. It's not because you are going to hire any marketer to do that for you not going to work either. So sales and marketing are the last jobs to hire for and to build on a point you gave earlier, like as you are, let's say you raise $2 million, and you don't have product market fit, you have nowhere near it, you maybe a 10k in revenue, and you're trying to figure out if there's retention there, the money you have in the bank is the time that you have to hit The more people, the slower you get to product market fit. Exactly. Because you become slow, there's a lot of inertia that you have to fight against. Like if you have a big team, then comes the problem of like, and you want to pivot for whatever reason, then you have a whole team to pivot. Given the time that you have, you can now, first of all, you can you can try multiple pivots in this time. Yes. And once something is working, you also have multiple chance to fundraise. Normally, I say people don't wait, like wait until you have like maybe 14 or 12 months left and your first attempt at fundraising or like test the waters maybe. And if it doesn't go well, you have another two shots, actually. And then you can change things and improve things in that time. So like the more runway is better. I think when oftentimes when we when I see founders that are spending too much money, it's because they haven't yet had that moment that lightbulb moment with any customers, that this is a thing that people want. And so they're kind of chasing that they're trying to force it. They haven't even seen it maybe maybe their first time founders, so they haven't seen it in a previous company either. And they think that if they can, the trick is to push harder, and not maybe do something different, or find out more from the customer and let the market kind of pull it out of you. Do you have any tactics on how to be really frugal and disciplined with the money in the bank? I have two tactics. One of them is to send an investor updates every month. Because accountability really matters. Having someone else looking looking at this every month, actually forces you to be more accountable. And the second thing is to have two bank counts, and you put half of the money in the other one, pretend like you don't have it. And then like you look at that kind of like, oh, actually only have half the money that I raised. Okay, let's say you are so fortunate to raise a Series A. And you've found some measure of product market fit, you raise $8 million, $10 million. How are you thinking differently about money now? If you have actual product market fit, actually, maybe you should hire sales. I mean, that advice may depend on your situation. But let's say you get one in AR, you get clear demand from the market, and you are still the only one to sell the product, of course you can create a sales team. That's a good way to sell the money, as long as you know that anyone you hire is going to be accretive. So basically, they're going to make the company more money than you are going to spend on them. If ever you have a whatever program, even if you have Series A, like don't buy billboards, or don't do some crazy stuff. Because hey, you are a Series A, you are a serious company now. No, of course not. It's a way to maybe it's never going to be the right time to do that. Only spend on something you can actually measure the impact of. But hey, hiring some good salespeople, yes, that's a good way. Yeah, I think you have to have a framework of like, when are you when is each individual person overwhelmed by the inbound that you're experiencing from this thing. So it could be an engineer who can't keep the system up and running. It could be a salesperson who's like, I can't handle all the inbound. It could be customer service, you have to kind of check in and see when are they to the point of breaking and then you're like, we'll have to have more people. It might often be too late. So you kind of have to have some insight and be like, well, you can't hire someone right away to solve the problem. So you have to kind of like, when do I anticipate based on the directory, that these functions in the company is going to be overwhelmed. And I think that's how I would make my hiring plan. One thing you could do at that stage is to monitor how much revenue you make per employee. And that number should go up in time. So that's another risk. That's maybe another tactic here to be careful about money. You want to be efficient. And the bigger you are, you should get kind of benefit of scale. And so you want that number of revenue per employee to go up. And if you monitor that, that's another good way to avoid the fate of like overhiring. And then the revenue doesn't catch up. And going back to my advice of selling investor app, I actually think it gets more important to communicate transparently with all your stakeholders, or all the people that can keep you accountable. Because this is the thing where now that you have all this money, and things are going well, it's like much easier to spend on the wrong things. And people actually start paying attention. I would, I would be just a little bit careful. Not all investors are going to tell you the right thing. True, true. Some investors may push you to spend too much. The scenario that I can spend my way to winning is just not generally a thing. Yeah, well, and it gets at the differing incentives between investors and founders, which is the founder, you have this entity, and your job is to make it make it work and find the best version of it that will work. Investors make a lot of different bets and build a portfolio of startups. And they're looking for the one that's going to work. And so they just operate differently about them. I think one of the mistakes that founders can make in this phase, when sales are really starting to work, revenue is growing, is that they don't pay enough attention to retention. If you're growing very quickly, and you have a lot of revenue coming in, it's easy to ignore your churn. And that's a problem that will catch up with you in a year or two. And at that point, you've spent a whole bunch of money on growth and marketing chasing after bad revenue that's going to disappear. How should founders whether seed stage or a or whatever, think about spending money on customer support, and customer service? Like, is that in the name of churn reduction? Is that customer experience? Should they not spend anything on there and just hire more programmers? Companies win early stage by being much better at customer support than big companies. So you have to be much better at customer support than big companies. They also serve a point as a handoff from the founders of understanding what the actual pulse of the customer is like, what do they like? What are they? What is what a feedback are they giving you? And founders play this role for the longest time, at some point, these can't can't answer every email, but you should be in every email, like you should have a way to peek into the five customer service agents that you haven't see what what's coming in, use LM tools to summarize all of the work and see what what's coming in there. But they are harder to understand the customer success role, I think for a founder, because it's something you do naturally, it's hard for you to find what it is. And to get to your earlier point, I remember when I was running my company, perfect audience, there were times when I would, I, a customer would have a problem. And I would almost be afraid to fix it same day, because they would realize how small we were. Right? Like, I still had this mentality of like, I want to look like a big company. I want to seem big, I need to put it in the queue. Yeah, we'll put it in the queue. Like, that's like a cooler answer. And we would fix it same day and good things would happen because of that. But I would always feel this like weird emotion, like, oh, gosh, I just really outed myself is, you know, being a little too involved here. But I think that that's, that's where the advantage comes. That's the like, the only edge you have as a startup is speed and responsiveness and all that stuff. Okay, so so series A, you might hire for sales, your customer support, you're kind of building the machine that builds the product and takes it to market. Series B, you know, like, should you get that far? What what the what is the role of money in a company series B and beyond? It's different. Once you hit series B, the companies that don't make it are the ones that don't actually understand the quality of their revenue. And the people that have high quality revenue, they'll they'll make it and things will continue to be good as long as you continue to have good quality of revenue. And the ones that raise a series B, and maybe it was premature, and they don't have enough data to actually look at net dollar retention, revenue or retention and customer attention or whatever usage, they will absolutely have fooled themselves at this point and say, well, there's three different investors in three different rounds, all bet on us and think that this is working. So it must be working. Because they're they have analysts and they have all these people that analyze our data. But the ones that I've seen who doesn't work are the ones that don't actually understand their own retention on their own revenue retention. And then that can go south. And like maybe the investor didn't understand either actually, once you hit series B, if it's actually high quality, like you're probably going to do well. But then you should have a revenue engine that you understand, and that's predictable. And then the money becomes just fuel in the engine. These engines, I think, are built around an understanding of how a customer goes from being a prospect who's never heard of your product, to a customer who's just starting to expanding predictably over the years. The best SaaS businesses have astronomical net revenue retention, because they have figured out how to turn small customers into really big customers. Yes, absolutely. When I think about early stage spending and my own history as a founder, I had these two extremes. There was a lot of time when I was very frugal, you know, sleep on a box on the floor, spend money on nothing. And then I had this other time when I had a split with a co founder, and I was grief stricken by this, and just started hiring contractors left and right to like work on the product and spent way too much money in grief. And so you talked earlier about like fooling yourself and not being honest with yourself. And I was telling myself, making a leap forward on the product is the best thing that we can do. But it was just all a lie. I just didn't know what to do. And I thought spending money would be like an easier thing to do than to like sit back and think about a really wise way to use my resources. Can you really be too lean, like spend not enough? At some point, I remember, like after raising money, so we had money in the bank, like seed stage. And because I was at the time living in Paris, and I had to travel to SF very often, I would book like the worst hotel in the Tenderloin. That was such a bad experience. I wouldn't sleep well. I was not as good in meetings after that. I think that was a bad way to save money. I'll give one example of a mistake that I see founders making today, where I think they're being penny wise and foolish, is moving their startup after YC, to a city where it's much cheaper to live and much cheaper to hire. I was one of those companies at the time when revenue was not popular. Like, like growth and usage was proper as we were building a mobile nesting app in 2007 2008. And we were tracking monthly active users and the retention of them. We weren't tracking revenue, we weren't making some amount of small revenue. But are the only way that we can compare ourselves to like, are we doing well is the usage, not the revenue. So I in hindsight, I don't think anyone has this problem today. This is not really a thing that you track usage and only track revenue. But in hindsight, like, we didn't really know what x number of monthly active users would transform into for more fundraising. The only way for us to raise more to kind of continue was to raise more money. And it was kind of unclear, actually, like, it was not like we were talking to investors, like, how many millions of monthly activities do you need to get another round? So for us, it was very unclear, I think, on are we spending too much too little in hindsight? Yep, we're spending too much, I think. But but we didn't have any, it was like, people tend to forget, like how the 2000s compared to today is in terms of the amount of information that's out there of like, today, we can ask that question in like, 20 minutes, you talk to a bunch of people at the time is unclear. There's a lot of asymmetry between the rounds and investors and founders and founders weren't that connected with each other. So we're in a much better place today to be able to answer the question. What is the most craziest thing that you've ever seen that founders spend money on? I don't know if it's that crazy. But like, sometimes actually happened a couple of times to me recently, like founders waste the money. And the first thing they are going to do is to hire a branding agency, like 50k or whatever crazy amount of money, just to rebrand their company, like new website, new fancy stuff, just such a waste of money. And often it's just a B2B company that nobody's going to find on their website. Anyway, it's going to be outbound. I don't have an example. But I do have an experience that I've actually experienced multiple times at YC, which is the company is I think they're doing pretty well. And then I don't hear from them for a year and not hearing from someone who's doing pretty well, it can be an okay sign. But sometimes it's a very bad sign. And then guess what month I hear from them again, one month before death. And you hear from them be like, well, it wasn't actually going well, and all these things happen. And can you help us is one month left. They made a bunch of mistakes in this one year. All of them made a bunch of mistakes. And we were not aware because we weren't talking to them or they were not updating us or they weren't updating any investors. And it is very sad because most deaths that there's a function of spending money are preventable. If you just catch it early enough, it's preventable. But in order to be preventable, you have to get the diagnosis out early. So you have to know how things are going and when you're spending the money. And sadly, people are probably not updating investors because they're maybe maybe kind of know deep down that like things aren't going well. And if I if I don't tell them things will be better somehow. But then we can't help the main advice I would draw here is that you should be transparent with people on how you're spending money. And you should communicate all these things because we've seen the pattern matching of things that work out and don't work out but we can only pattern match we actually have the data. Yeah, this is a very common one, and I've talked about it before, but seeing early stage startups spending money on ads, and there's maybe some clever ways to do it. It's all very specific on the startup and where they're at and what they're trying to accomplish, but it's just so tempting, and it feels so good to buy some ads and know that you're out there, and maybe you get a customer, and maybe you get a customer there, a lead, something like that, but you're really outsourcing your understanding of what's going on and how to even talk to customers, and there's no ad that's going to make you smarter. You don't learn anything when you get a customer from an ad at an early stage. Actually, it's more than that, because it becomes addictive. You spend on ads, and so you grow faster, and then you get that expectation of continuing to grow, even if the fundamentals of the business don't work, and so you end up spending, like, you raised $2 million, and then you continue spending, because why? Like, hey, I have to show growth to my investors, and like, you know, I don't speak about churn. I don't speak about the things that actually don't go well, and that at some point, it's so obvious that the trajectory is going to hit a wall, and the only way to continue is to raise money, and at that point, like, nobody wants to invest. I have this weird theory that there's, like, a perniciousness to advertising also in the way that all the digital products work, where you set a budget. It's like you're putting a ceiling on what you think your startup can achieve implicitly just by even engaging in this versus having more of a spirit of, like, well, anything could happen today. I'm going to go as hard as I can, whether it's outreach, whether it's shipping stuff. Like, inherently, you're locking yourself in to some assumption of, like, what's the total good that could come from my startup right now? All ad spend is either one of two categories. It's either experimental and small, or it's ROI positive, and then it's payback time in months, and you know exactly how many months you can get the money back, and you know that every single month. Those are the only two categories of ad spends that should exist. Users that spend a lot on ads early on, also, there's this opportunity cost because they miss out on figuring out a capital-efficient way of acquiring customers, and so that when that money spigot turns off, suddenly, they don't know how to do it anymore. I had a company last batch, and I started working with them, joined through, like, okay, how do you do this? How do you do that? Getting to know them. And the only way that they got customers was through AdWords, and they fought so hard when I pushed them on this and challenged them, like, hey, you're missing out on some stuff, and I asked them to switch off the ads for two weeks and see if they could match the same numbers through any means necessary, and they ended up finding some really clever ways to scrape government documents and permits and reach out to these people, and now they actually owned some way of finding customers and prospecting that they just weren't even thinking about this because it was so easy to just spend a little bit of money on AdWords. I have this framework around startups versus big companies in that startups are not miniatures of big companies, where every single function that exists in a big company exists also in a startup. In fact, most things that big companies have, there are no equivalent in a small startup. Startups only exist to reach a product market fit. Like until then, nothing else really matters, which means most of the things you end up spending money on at a big company, there is not, like, a mini spend on that in a small company. It just doesn't exist at all. So when startups get funded, every single dollar, every single energy effort should go towards trying to find a product market fit, which usually is the two founders or the three founders, their computers, their apartment, and maybe one more engineer who's also probably an engineer that you hire. That's basically it. There's really nothing else that goes into this. When I see people making mistakes, they're looking towards the bigger companies, the enterprises or whatever, and they're like, well, if I had this and this and this and this, I am now feeling more validated that my company is more grown up because it feels like a bigger company. And I have some of these functions that bigger companies have, even though you don't really need it. Like an office or ads or like you have people in departments that you don't need, it makes you feel better more than it actually makes any difference whatsoever. In fact, it makes things worse because you have to manage these people in roles that aren't really needed yet. It creates a huge distraction and it actually makes you spend all your time on the things that you can't really have distractions if we're trying to get a product market fit. Like you can't. You can't spend time doing one-on-ones with people that work on other stuff. Like everything needs to go into like trying to get to these things. People spend money when they have money. And typically after a CD-ROM, a lot of companies have a lot more money than they've ever had. And it just feels natural that I should have an office manager or I should have a really nice big office or maybe two offices or maybe a chief of staff. And there's like all of the things that just like you can look at how the company is successful and you kind of attach yourself to the things that they have and be like, if I only had these four things, then probably I'm successful too. But none of it matters. And actually it makes things worse. And to make it very plain, I think all of us have had this experience where we fund companies and the first, maybe even before the start of the batch, the first couple of office hours we have with companies, we're picking up on maybe what aspect of big company life a founding team has latched onto and is like already subliminally recreating in some way, some attachment that they have that they might even not be aware of. And so there's almost like a pruning that has to happen. We have to help them release some of these assumptions to really pare it back down to being that single-minded organism. Why do you think that is? Why is it that people want to hire these for these roles, even though they just, they don't want a program to fit, they're pivoting and they still want to like spend money on things. Why do you think that is? I think that's what's expected from them. They don't know better. That's simple. They worked in a big company. It's all they've seen maybe. Maybe. Or maybe an investor tells them like, now you need to go hard. And so they think they have to spend. I think there's also some like fake it till you make it type thinking where, hey, oh, those people, I read about them raising a series A in TechCrunch and let me go on LinkedIn. Oh, they have, they have, this is what their team looks like. The faster, the sooner my team looks like that, the sooner I will raise a series A. Let's be clear. Let's speak about runway a second here. All of that, all of these activities is going to reduce runway. The only thing that matters is to find product market fit. Like the longer the runway, the more shots you have at that, the more chances you have to find that product market fit before you run out of money. Totally. Totally. And I think that's one of the fundamental misunderstandings that a lot of early stage founders have. And they look at companies that have product market fit. At that point, what you need is growth and money can help buy growth, right? When you're pre-product market fit, to your point, the only goal is to find product market fit and money can't help with that. The only thing money can buy you pre-product market fit is time to figure it out. Every time you increase your burn, you're decreasing the one thing you need at that stage. There's maybe a mistake that people may do often. They raise a seed round, they have a lot of money and they think, okay, I need to survive for like 24 months. So they take that amount of money, they divide it by 24 months, and then they get a burn number. Oh, I can burn that much money. And then they find ways to spend that money. Yes. No, of course not. Of course, don't have to do that. Keep it lean, the minimum spend you can do to make progress to our product market fit. And only when you get these signals of product market fit, do you spend more because then you'll know what to spend it on. And if you have remaining money from your seed, you can actually grow much faster towards your sales. That's the right time to spend. I also think that the attributes that attach to looking like a bigger company is the thing you want to talk about. If you go to an event or a startup party or whatever, people are probably going to ask you about how many employees do you have or who are your investors or something like that. They're not going to ask you, what is your retention rate or your net dollar retention rate? Those are the numbers that you would want to talk about if you want to speak about having a product market fit. How many outbound emails are you sending on a daily basis? Yeah. No one's going to ask that. They're not going to ask that. They're not going to ask the things that actually matter. They're going to ask you about things that make you appear bigger and more validated, but in reality don't matter. During the SERP era, summer 2020 to another two years past that, I saw companies that going from basically being validated by investors and they would race a seed round from YC, a couple of million dollars, and then very quickly they'd race to CSA. So maybe that was like 10 or 15 million dollars. And then somewhere between those two, they forgot all the things that matters. And the burn would go from like two or 300 to in some cases a million dollars a month. And they were still at a million ARR, a million ARR and spending a million dollars a month. And there were CSA investors on their board that didn't, I actually don't know the details, but didn't seem to actually pull the brakes here until it was too late. What do you think was the psychology behind the founders doing that? Like what were they telling themselves on a daily basis? Well, I think fundamentally, and I'd love to talk about this, is that they weren't honest with themselves. They somehow had the money and pushed the gas in all of the spend and just thinking that the revenue will catch up. But it almost never does. So you can't have like 10 or 12x spend to revenue and assuming that it will catch up. Like that doesn't really happen. I think that reasonable investors will be able to help you and say, stop, don't do this if you send them updates. If you keep in touch with the investors, and if you tell them every month how things are going and specifically the things that we look for first, you know, invested updates, like what's your runway? What's your burn? What's your revenue? Those are the core metrics before we dive into all the other stuff. Because more often than you think, people get off track and they maybe had a very easy fundraiser, the first few fundraisers. And then they just kind of become irrational, assuming the next one will work. It's very clear that what happened in those two years after summer 2020 hurt companies. Like it was much worse than just like more of the same. It hurt companies that otherwise would have been successful because they would have had a level of discipline that was forced upon them, which they now didn't have to have. And now, I mean, at best case, the cap tables are messed up, but worst case, they're dead. I've seen a lot of founders make the mistake of putting together a financial model before they raise. And the financial model has a bunch of assumptions about how many people they're going to hire. And it has a bunch of assumptions about how quickly they're going to ramp revenue. And it's always linear. It's always linear. And it's very common to hit your hiring targets. And what's the quality of the people you're hiring if you hit your hiring targets as a startup? Basically, like no one wants to work for you as a startup. There are big companies to work for that pay a ton of money, and there's medium-sized companies who are like superstars. There's open AI. There's all these opportunities for people to work for. Why would I work for the seed-funded company and be like the first employee? It's just not that attractive to the person who doesn't know about you. Maybe if I know you, I know you're a great founder, I would want to work for you. But for most people, this is not interesting to work for, which means the time it takes to hire will be very long. And if it goes really fast, you probably hired the wrong people. Okay, so we've just talked about a bunch of things that you could spend money on, that you might spend money on, that you shouldn't spend money on, and we looked at how a startup's relationship to money changes a bit as they grow and proceed through the different stages of startups. I hope, as you're thinking about your own startup finances, whether you have $0 in the bank, $2 million in the bank, $10 million in the bank, I hope that you found some of this useful and will be able to make better decisions about your startup finances because of it. Thanks for joining me and we'll see you on the next Office Hours."
  },
  {
    "name_video": "How To Get AI Startup Ideas",
    "description_video": "In this episode, the Lightcone hosts look at the different approaches founders can take to find AI startup ideas to work on.",
    "related_categories": [],
    "page_url": "/library/M8-how-to-get-ai-startup-ideas",
    "youtube_url": "https://youtube.com/watch?v=TANaRNMbYgk",
    "mp3_file": "downloaded/How_To_Get_AI_Startup_Ideas.mp3",
    "mp3_content": "I have news for you guys. YC is throwing our first ever AI Startup School in San Francisco on June 16th and 17th. Elon Musk, Satya Nadella, Sam Altman, Andrej Karpathy, Andrew Ng, and Fei-Fei Li are just a few of those confirmed, the world's top AI experts and founders who will teach you how to build the future. It's a free conference just for computer science grad students, undergrads, and new grads in AI and AI research, and we'll even cover your travel to SF. But you have to apply and space is limited. Link in the description to apply for a spot. Now, on to the video. Right now, if you're building a startup, working on like cutting edge AI, even if you haven't found the right idea yet, why give up and go back to Google or college or something? There's a high probability that your lucky break is just around the corner. And this is kind of the most exciting thing you could be doing with your time. Something's happening. I'm not happy with that. Let me go all the way to the edge. Let me go into, you know, this outside world and from first principles, understand the root cause of this. And then you're going to discover all kinds of things that software and especially AI, the current form of AI, can actually solve. There is a very important question that all founders have to ask when they commit to an idea. And that is, if not us, then who? Welcome back to another episode of The Light Cone. I'm Gary. This is Jared, Diana and Harj. And collectively, we have funded companies worth hundreds of billions of dollars, often with just an idea. And that's what we're going to talk about today. There are a lot of smart, technical people out there right now who are following along with this AI stuff. They see incredible potential in the technology. They totally buy that this is a special time to start a company. And the thing that is holding them back from doing so is they just don't have an idea that they're really excited to go and work on. I think we should just basically open source all the tricks that we've learned that we've so far only discussed in office hours. So we should just like tell everyone and hopefully this actually helps some people come up with great startup ideas. Well, one of the blueprints that seems to be emerging is that you can't just stay too close to where you're at. Like basically the default bad startup idea is lazy in that it's almost like a hackathon idea. Like I read about it on X and a bunch of people are doing it. And, you know, why don't I do that? Another version of it is just figuring out what is hot out there and jumping on a bandwagon. Jared, you know, one of the things you caution founders against is actually just maybe running with their hackathon idea. Yeah. Often when people are thinking about startup ideas, they tend to gravitate towards things that seem very easy to build the first version of. But most of the best startup ideas are actually like at least somewhat hard to actually ship the first version of. And so that would sort of be my meta lesson from doing this individually with founders is I'm always trying to push them in the direction of like harder, more ambitious ideas. And their subconscious is trying to push them back in the direction of things that they can build in like a weekend. I guess the interesting thing about it is you need to get out of the house. So rather than just do what is right in front of you, you have to either aggressively introspect and look within into your history and what you are uniquely great at. Or you need to aggressively get out of the house into other places on the outside, being industry, being government, being other places that serve humanity in some way. And that's not in your house either, actually. So aggressively internal or aggressively outside. So why don't we make that real by diving as deeply as we can into some specific examples? What is within us already? There are lots of examples of people who already spent years and years to get all the way to the edge of understanding whether it's AI or some other field in the world. And they did it either in their studies, in their research or where they worked. Diana, I feel like you have a few really good examples. Yeah, so basically the examples here are of founders who had this very unique experience in prior jobs they were working at. And one of them is this company that I mentioned before called Salient. They're basically building an AI voice agent that does loan processing for auto debt collection. That is a bit of an esoteric idea. And when I was working with the founders, it took a bit of time to land on a good one. And this turned out to be a good one when I heard that Ari, the founder, learned about it because he used to work at Tesla. And as part of being in the Tesla finance ops team, part of the problem with leasing Teslas was this whole process of getting all the payments back. And it was all done very manually with all these business operation units that were outsourced. And he thought, oh, why not build an AI agent for that? So that was really good. And that ended up working really well. And now they're servicing a bunch of large banks. That's a good one. Another one is, which I also mentioned previously in another episode, is the founders of Diode Computer. They're basically building the AI circuit board copilot. And their insight is that both of the founders were electrical engineers, but also software engineers. So that turned out to be a very unique gap. Intersection of skills that has not been is not that the world of software and hardware don't tend to talk to each other. So they had built circuits at Apple, at startups, and even custom processors. So they had a lot of experience building very high-end electronics. And they saw the gap and frustration of working with hardware engineers, that why didn't they do things like software? Why didn't the world of Git exist? Why didn't the world of, I have to parse through all these data sheets to verify all the components manually? That's the electrical engineer job. Why do I have to do that manually? Why not just get an LLM to parse and do all that verification in code with QA, right? So that was the insight. And that was so unique to them because they were the only ones that had the unique experience of one of them being a super strong software engineer and the other one being super strong in hardware. I think this is one of those cases where starting a startup that actually turns out to be successful requires you to be similar to a PhD or postdoc researcher in some sense, where you have to go all the way to the edge of what human beings know and understand. And then instead of like, you know, publishing research that, you know, sort of pokes that edge out a little bit, instead it's like you're creating a product or service that people really want. To that point of being the PhD level of expert in that world, when founders get into this, they have such a unique fit with founder market fit. They're the best in the world. Literally, there's no one like them that had that work experience and that happened to want to do a startup that happened to now be really interested in AI. And there's this moment in time that is only n equals one. That's only them that can do it, which is cool. Yeah, Ari being in a place like Tesla is always very interesting to think about because, you know, there is a very important question that all founders have to ask when they commit to an idea, and that is, if not us, then who? Do you want to talk about Spur, Jared? Sure. So Spur is building an AI QA agent. So the way testing works now is if you have a large company, you probably have QA engineers who like write tests to test your software, and they're just building an AI agent that writes the test for you. And the way they came up with the idea is one of the founders worked at Figma, which has like a notoriously complex front end that's very hard to test. And she realized that the engineers were spending a ton of time testing the front end and writing and maintaining tests for it. And that AI just like obviously would enable you to automate all of that work. I guess Figma is a really good place to sort of come out of. And that, you know, if you're already at the edge of design and collaboration, you know, plus this AI thing sort of happens, you already have exposure to the right customers and know what the people at the edge are doing because they're at the edge. I have a kind of crazier one, which might be heartening to some of the people in the audience, and that this is probably my youngest team I've ever funded. How old are they? They were 19. They dropped out of freshman year at University of Waterloo, this company called Datacurve. And actually one of a few pivots, they actually came in as a company called Uncle GPT. And it was sort of this toy hackathon idea, really. Like, I think they literally won a hackathon with the idea. Your sort of standard chat GPT wrapper back when wrapper was the pejorative that everyone was saying. But, you know, the deeper problem was people didn't really want it. It was a really cool demo, but there weren't customers that were willing to pay for it and use it all the time. And then during the batch, they actually became AI for product managers. To go back to what we were saying earlier, it's sort of that again is a not-leaving-the-house-enough sort of idea for them because neither of them as 19-year-olds had been product managers. So it's actually very, very hard to make software or products for people and teams where you actually don't have direct experience or knowledge of it. And so luckily, and this is maybe a really good example of looking back within, the founder actually was an intern for Cohere, which was all the way out on the edge in terms of LLMs and Cogen. And so she had already been working on data tools and producing synthetic and real data for large language models for Cohere. And she went back to her old boss and they said, hey, this is what we need. And she said, oh, well, I could build that. And so now she's basically off and running. I mean, she had a great demo day and then she's making mid to high seven figures for a company that just started June of last year. I have noticed this pattern with a lot of startup founders. Whenever I have a team in the batch that's pivoting and they do the office hours where they're like, you know, lost confidence in my old idea, what should I go work on now? Like the first node in my decision tree when I'm trying to like help them find a new idea is like, are the founders experts in anything? Because if the founders are experts in anything, then like often that's the place to look for ideas first. And the thing that I've noticed is that it's often surprisingly hard for the founders to actually know what they themselves are experts in. And sometimes you kind of have to pull out of them their actual areas of expertise. This is why it's extra hard for 19 year olds. But at the same time, that's part of the reason why I really love this example. That founder just had to reach back into her internship from the prior summer and there was something lying in plain sight there. I think what you're saying about that, I've seen it a lot. I think a lot of times when founders come in and do these office hours with us, it's almost a bit of an allergic reaction to what they were doing. By definition, it's because they were experts on work and grinded out years and years. They're like, oh, I don't want to do another decade on this thing that I put all this time. It's like, this is so boring. Boring. And they want to chase some shiny object that they don't know anything about. The grass is greener, but then they sound so much smarter when they talk about that particular domain. And then when you kind of reflect it back to them, they're like, oh, yeah, you're right. I never heard anyone go so deep into this as what you eloquently have said versus going over the shiny idea, which is very surface level of insight. And internships is another interesting meta point here. I mean, some huge percentage of YC's billion dollar companies can be traced directly back to not just a job, but specifically an internship that one of the founders had. And so maybe a meta point is if you're in college and you want to be in a place to have good startup ideas, do internships at really cool companies that are on the bleeding edge of something. Because that's a really tried and true path to get you a great startup idea. I think the other meta point is also being picky at where you end up working. I mean, the example with the founder of Data Curve working at Cohere. Cohere is at the bleeding edge. The founder of Cohere was one of the authors of the All Attention You Can Need paper, which is the seminal paper that pretty much created this whole AI boom now. She was working there. Another good example I have is this other company called David AI. The founders were working at Scale. And Scale is at the bleeding edge of providing all data sets for right now the AI boom as well. And David AI found this niche where Scale wasn't going into, which is the scarcity with data sets around multimodal data with speaker-separated audio and going deeper into that because Scale got very deep into more the LLM world. So that turned out to be good. It's kind of to your same point kind of in Cohere and here in this case with having worked at Cohere slash now Scale, working on the bleeding edge, you get to find high-quality problems that are going to be the future. So that's not the only way to look within. Maybe the one that people really look to and is a little bit more obvious is what are things that you want to see in the world that you could see yourself just working on for the rest of your life? You know, there'd be dragons for this. But on the other hand, we have some really noteworthy examples of companies that have really found something and have made something people want. I have one story in particular that I share. This story really, like, stuck with me. It's called Can of Soup. We funded Can of Soup. And the founder, Gabriel, had been an early engineer at Substack, which is a company we funded years earlier. And very early on, he, like, lost confidence in the idea that we had funded him for. And he kind of wandered in the wilderness in sort of a pivot hell period where he was, like, trying to come up with a new idea in sort of an artificial way, as often happens when founders are pivoting. And he was looking at these various, like, B2B SaaS ideas that were all totally plausible, but he just wasn't really excited about any of them. And he went on a walk with his old boss, Chris, the CEO of Substack. And Chris gave him a piece of advice that's really stuck with me. Gabriel pitched him one of these B2B SaaS ideas. And Chris was like, who cares? Work on something that captures the human imagination. And that was the prompt that got Gabriel to just start thinking about, like, a much bigger idea that he would actually be excited to work on for, like, a really long time. And that's what sort of led him down the path of coming up with Can of Soup, which is this, like, AI Instagram-like thing that's, like, a totally new kind of social network. And it's a really big, crazy, ambitious idea. We don't know if it's going to work yet, but it's, like, super interesting and, like, so much cooler than the sort of, like, manufactured B2B SaaS ideas. I mean, social networks seem like it's pretty ripe for things that people really want to work on. One of my favorite AI companies right now is called Happenstance. The founder was an Apple AI researcher, sold his last startup. And then he started realizing, especially once, like, Word2Vec and vector databases started coming out, that, you know, when you use things like LinkedIn, how often is it that you're, like, typing something that you're looking for? And it just, you know, I think it's just still using plain old plain text search. I think it's just using indices from MySQL for all we know. It's literally not smart. And the thing about LLMs and especially, you know, LLMs plus vector search now mean that the search engine itself can be so much more intelligent. And so, you know, I'm always trying to connect people in the batch to people who could buy their thing or who could help them with access or all of that. And then Happenstance now is just this wild thing where I can type almost anything more or less in a fuzzy way. I can even describe the people I'm trying to help. I can even describe sort of the level or area inside the company I think I want to connect this founder to. And it'll just figure all of that stuff out. It'll write the SQL queries and then, you know, use its own, you know, a mix of vector search LLMs and SQL to find those people in a way that, like, LinkedIn search just fails 10 times out of 10 for some of these really complex queries.  is to hang out with very smart people. Like your example, I have another one, is this company called Reducto. And because they were in YC, they got to be friends with a lot of other founders that are building at the edge of AI. And they found an interesting problem for a lot of the rack applications in order to get them to work well. You need to be able to strike the chunks on a very well, but this kind of problem, you would only find out if you end up working with the top percentile of builders are really at the edge of really building the next generation of applications. So that's how they found the idea about Reducto, which extracts perfect chunks and data from PDFs. Another way I've seen people build the expertise to get an idea, I wouldn't even call it quite expertise, but this is something, just getting going and building any product, like makes you like an expert in whoever the users of it are and puts you in a good spot to find ideas. And an expert in building products like that. So you build expertise in like multiple areas. Wait, I can't just become an expert from being an ex-influencer. You're saying I have to go talk to users. You actually have to build something. You have to ship code. A company that went through that I worked with YC in yeah, 2022 again. So almost three years ago, searching for ideas. The idea they landed on was a freelancer marketplace. And honestly, the company's called Juicebox. They didn't really have much differentiation for that idea, but they were just excited about it. They'd done some freelance work themselves. They just wanted to start building it. I was like, go ahead. And they worked on that idea for a decent chunk of time and it didn't really take off. But in the course of sort of working on freelancer marketplace and working with companies who are hiring freelancers and hiring other people as the LLMs developed, they realized, oh, there's actually like a real need for just like LLM powered people search for recruiters specifically. And they started building that. And that has really taken off. It's called PeopleGPT. And it's just like the really effective search, especially for recruiting teams who just find exactly who they want, sort of a fuzzy prompt. And it will just give them a list of all the dream candidates to go and ping. And you can see how like they wouldn't, they're not, they've never run, they've never been recruiters themselves. They never actually really hired people. But the expertise they built was because they just launched something. There's this funny thing during the batch, especially around fundraising, which is a very interesting phenomenon. I'm sure you guys have seen this too, where we have founders who are out there, they ship a product, they're talking to real users. Those users turn around and give them their credit card number, or sign on the dotted line, like big enterprise contracts for 10 or $100,000 a year. And then fundraising rolls around. They start getting the first nos, and then they get, it's like just getting gut punch. Gut punches after gut punches, and they come back in office hours. And they're like, investors don't get it. And the thing that I find myself saying over and over again is like, yeah, investors don't get it because they're trying to do it the way like a founder would trying to be an ex-influencer, trying to understand, just reading feeds from like literally their toilet, like and shit posting, right? Like literally, that's not how you figure out what's going on. Why would you, the person who's outside of the house, not on the toilet, outside of the house, out there talking to people, shipping software and doing things, like why would you be taking any cues at all from the person who's still sitting on the toilet, like scrolling an ex-feed? Like it doesn't make any sense, right? You have direct knowledge of the world out there, and you're coming back into Plato's cave. And this person is like saying, well, I don't see the shadows yet on the back wall. And it's like, let me tell you, it's out there, right? Like you literally have seen it with your own eyes. Here's another instance that I've seen where founders like psych themselves out, Kerry, that's related to that, which is founders who psych themselves out because spaces seem too competitive, and they end up like shying away from going after ideas that are actually really good, because like two competitors launched on TechCrunch and like raised seed funding or something like that. Harj, you have a good example of a company. Yeah, it's a company both Kerry and I worked with actually. Like GigaML, they originally applied with a tech idea. It was an idea to help Indian college students apply to US colleges, Indian high school students apply to US colleges. Then they pivoted into fine tuning as a service or around the time where that was just like the open source models had just been released. They couldn't build a sustainable business, so they didn't quite crack that nut. And they were looking for applications of the fact they had become experts in fine tuning like models for specific purposes. And they were trying to find a vertical application. And the one that they were most excited about was customer support. But they felt it was very crowded. Like there were lots of people doing customer support, but they went for it anyway. And specifically, they're really focusing on one company, Zepto, which has really been willing to be like a real early cutting edge adopter. I mean, another meta point here is like Zepto themselves really wanna be like the most like operationally efficient delivery company in the world. So they were looking for these really like high quality pieces of tech. Rumors of IPO-ing later this year. Rumors, yeah. Who knows? We don't know. What I will say about the GigaML founders is they are incredibly smart engineers and not natural sales people at all. And just one thing I'm used to pre-AI, I'm curious if you have opinions on this, is it often feels, especially with B2B SaaS things, like if you're entering a crowded space, it's often as much about how can you differentiate on just sales versus like necessarily like your first product. And so you gravitate towards, ah, like I need to feel that this team can really like sell in order to get anywhere if they're gonna launch, you know, a new payroll product, for example. But with GigaML, what I noticed is that so many of the things just actually don't work very well. Doing like AI that can really replace your customer support team of humans is a hard technical problem. And so although lots of people are pitching that they have it, very, very few people can actually deliver to the level that customers want. And it just turned out that GigaML were like, their technical strength meant that they could actually deliver what no one else could, and that got them this deal, and now it's sort of snowballing from there. That's like a huge enterprise deal. Did they close up to during the batch? No, I mean, they were pivoting for quite a while, actually. This is one of those stories of where I think it took them about a year, if I don't recall, to find the right idea. And that's quite normal, actually. It's quite normal, actually, yeah. A lot of our best companies in recent years have been that, yeah. Yeah, which flies in the face of, I think, what everyone believed, you know, ancient history five to 10 years ago. Like, you know, it's hard to believe, but 10 years ago, there were entire seed funds that would say, like, we never do seed extensions. Either you're going to be great, and you're great immediately, or, you know, seed extensions are a sucker bet. And these days, I'm pretty glad that we're in the days where that's just not true anymore. You can see that people are getting product market fit. My speculation on it is AI moves so quickly that every few months, there's just a new set of possible ideas that are generated. I also, this is like a more anecdotal thing, I also feel just like, because it's so exciting to work on a startup and work on AI right now, that the teams just have morale reserves for longer. It's like, why would, like, if you're building, if you're right now, if you're building a startup working on, like, cutting edge AI, even if you haven't found the right idea yet, like, why give up and go back to Google or college or something? Like, this is- There's a high probability that your lucky break is just around the corner. Yeah, and this is kind of the most exciting thing you could be doing with your time. Like, I just- All these product releases that keep changing the whole space, the whole time. Yeah. Which is crazy. Well, that's all the time we have for now, but I think that that's a pretty great thing for everyone out there to keep in their mind. You can't stay in your house or sit on your toilet doom-scrolling axe. You have to either look very deeply within you to find that you're already on the edge because of something you've done, or you need to radically get out of the house, go into other people's real businesses and the real problems that humanity faces, and then get first principles understanding of what's going on out there, and then you can build a billion dollar business using AI. We'll see you guys next time. We'll see you guys next time. We'll see you guys next time."
  },
  {
    "name_video": "The Engineering Unlocks Behind DeepSeek | YC Decoded",
    "description_video": "In this episode of YC Decoded, General Partner Diana Hu breaks down the key engineering optimizations behind DeepSeek's remarkable new models — and contextualizes them within the broader history of recent AI breakthroughs.",
    "related_categories": [],
    "page_url": "/library/M7-the-engineering-unlocks-behind-deepseek-yc-decoded",
    "youtube_url": "https://youtube.com/watch?v=4Tmn-XP93m4",
    "mp3_file": "downloaded/The_Engineering_Unlocks_Behind_DeepSeek_|_YC_Decoded.mp3",
    "mp3_content": "There's a new AI model in town. Chinese AI company DeepSeek recently made waves when it announced R1, an open-source reasoning model that it claimed achieved comparable performance to OpenAI-01 at a fraction of the cost. The announcement unleashed a wave of social media panic and stock market chaos. NVIDIA losing nearly $600 billion in market cap today alone. But for those following AI developments closely, DeepSeek and R1 didn't come out of nowhere. The company has been publishing its research and releasing its model weights for months, following a path similar to Meta's Lama model. This is in contrast to other major AI labs like OpenAI, Google DeepMind, and Anthropic that have closed weights and publish more limited technical reports. What's changed is just that now the broader public is actually paying attention. So let's decode what the real developments here are, where they come from, and why they matter. First of all, it is important to distinguish between two relevant models here, DeepSeek R1 and DeepSeek V3. DeepSeek V3, which was actually released this past December, is a general-purpose base model that achieves comparable performance to other base models like OpenAI's GPT-40, Anthropic's Cloud 3.5 Sonnet, and Google's Gemini 1.5. DeepSeek R1, which was released at the end of January, is a reasoning model built on top of DeepSeek V3. In other words, DeepSeek took V3 and applied various algorithmic improvements to it in order to optimize its reasoning ability, resulting in R1, a model that's achieved comparable performance to OpenAI's O1 and Google Flash 2.0 on certain complex reasoning benchmarks. But many of the algorithmic innovations responsible for R1's remarkable performance were actually discussed in this past December V3 paper, or even before that in DeepSeek's V2 paper, which was published in May 2024, or the DeepSeek math paper, which came out February 2024. V3 stitches together many of these innovations, which were designed primarily with compute and training efficiency in mind. One way DeepSeek optimized for efficiency and got more floating-point operations per second, or flops, from the GPUs was by training V3 natively in 8-bit floating-point formats, rather than the usual 16-bit or 32-bit formats. This is not a new idea. Many other labs are doing it too. But it was key for getting such massive memory savings without sacrificing performance. A crucial enhancement is their FP8 accumulation fix, which periodically merges calculations back into a higher-precision FP32 accumulator. to prevent small numerical errors from compounding. The result? Far more efficient training across thousands of GPUs, cutting costs while maintaining model quality. But why does this efficiency matter? Given its hardware constraints and U.S. exports controls on the sale of GPUs to China, DeepSeek needed to find a way to get more training and more bandwidth from their existing cluster of GPUs. You see, at AI labs, these GPUs, which do number crunching and matrix multiplication to train these models, are actually sitting idle most of the time. At FP8, it is typical to only see around 35% model flops utilization, or MFU, meaning GPUs are only being utilized at peak potential about a third of the time. The rest of the time, these GPUs are waiting for data to be moved, either between caches or other GPUs. This is NVIDIA's key advantage. It is not just about GPUs. It is about an integrated solution they've been building for over a decade that includes the networking with InfiniBand, software with CUDA, and developer experience. Essentially, NVIDIA provides a deeply integrated system that lets AI researchers program GPU clusters Less is a distributed system, and closer to what Jensen describes is one giant GPU. Another clever way DeepSeek makes the most out of their hardware is their particular implementation of a mixture of experts' architecture. DeepSeek v3 has 671 billion model parameters, but only 37 billion are activated for a given token prediction. By contrast, the largest and most capable Lama3 model doesn't use a mixture of expert architecture, so it activates its full 405 billion for each token prediction. In other words, v3 activates 11x fewer parameters for each forward pass, saving tons of computation. Mixture of experts isn't a new concept, but it's been challenging to train models with this architecture efficiently. DeepSeek introduced novel techniques that stabilize performance and increase GPU utilization. Additionally, to overcome key performance bottlenecks, v3 makes use of Multi-Head Latent Attention, or MLA, which DeepSeek first revealed with its v2 paper, which was published in May 2024. MLA is a solution designed to tackle KV cache storage limitation, one of the biggest sources of VRAM overhead in large models. Instead of storing full key and value matrices, MLA manages to compress them down into a latent representation, reconstructing them only when needed. This helped the v2 model reduce its KV cache size by 93.3% and boosted its maximum generation throughput to 5.76 times. Finally, unlike traditional models that predict only the next token, v3 makes use of Multi-Token Prediction, or MTP. MTP enables v3 to anticipate multiple future tokens at each step. This densifies training signals, providing more feedback per step for better data efficiency and faster learning. It also improves representation planning, allowing the model to pre-plan sequences for smoother, more coherent outputs. During inference, MTP modules can be repurposed for speculative decoding, reducing sequential processing steps and significantly speeding up generation. Taken all together, this makes v3 one of the most impressive base models on the market, and it's been out for some time now. However, the recent release of DeepSeek's R1 reasoning model is what really made waves. Most LLMs can be improved by being prompted to think step-by-step, but what sets reasoning models apart is that they are specifically trained to break down hard problems and think about them for paragraphs at a time. In September, OpenAI showed the power of this new approach with O1. This achieved state-of-the-art results in math, coding, and science benchmarks. With R1, DeepSeek took a similar approach and published the secret sauce. OpenAI and DeepSeek achieved their impressive results through reinforcement learning, a technique to shape an LLM's behavior based on feedback and reward signals. Modern LLMs use some variation of reinforcement learning with human feedback, a.k.a. RLHF, or reinforcement learning from AI feedback, a.k.a. RLAIF, to improve their model's usefulness and alignment. But reasoning models apply RL specifically towards the task of thinking step-by-step through complex problems. So, how did DeepSeek apply RL to get a reasoning model? At a high level, they assemble a bunch of problems with verifiable outputs, especially in math and coding problems, and then design a training pipeline to get the model to think for a bit and output the correct answers. But they don't give the model any external examples of how to think, whether from humans or AI. And their grading process was extremely simple. Rather than using a complex AI to give the model fine-grained feedback, DeepSeek uses simple rules to evaluate the model's final output on accuracy and formatting. They use these output scores to update their model through a novel technique they published in February 2024 called Group Relative Policy Optimization, or GRPO. Remarkably, with this process alone, DeepSeek saw reasoning emerge over thousands of RL steps. The model learned skills like extended chain of thought and even experienced an ah-ha moment where it recognized its own mistakes and backtracked to correct its reasoning. This model was R10, one of the first large models to achieve top-tier results purely through reinforcement learning. Pure RL has long been a subject of investigation in Western research labs, such as DeepMind's AlphaGo, which simulated thousands of random games of self-play to beat Lee Sedol, the world's top Go player in 2016. In 2019, OpenAI achieved notable success using reinforcement learning to train a robotics hand to solve a Rubik's cube and beat a top human team in competitive Dota 2. But unconstrained by human examples, R10's thinking steps suffered from poor readability, switching between English and Chinese at random. So DeepSeek introduced a cold-start phase, fine-tuning unstructured reasoning examples before RL to get R1. This eliminated the language-mixing issues and made outputs far more comprehensible. The results are impressive. R1 achieves comparable performance to R1 on certain math and coding benchmarks. But the pace of innovation is speeding up. Just two weeks after R1 was released, OpenAI released R3 Mini, which outperforms R1 and R1 on key benchmarks. So if R1 didn't actually come out of nowhere, what explains the hype cycle? One explanation is the sheer accessibility of DeepSeek's model. R1 is freely accessible through their website and app, and it is free to download, run locally, and customize. Also, because of all the efficiency improvements, it offers near state-of-the-art performance at a fraction of the price of other reasoning models. Another explanation is that a lot of the hype cycle didn't actually have to do with the specific algorithmic improvements that we described. But with misconceptions around V3's alleged $5.5 million in training costs, there's some important fine print here. The $5.5 million figure refers only to the cost of the final training run for V3. It doesn't include any of the training costs of R1, or the associated R&D, or hardware operating expenses, which are presumably in the hundreds of millions. Given the extreme algorithmic optimizations here, that $5.5 million training run number actually seems perfectly possible. And it is worth noting that this work is reproducible. A UC Berkeley lab recently applied R1-0's key techniques to produce complex reasoning in a smaller model for just $30. What DeepSeek really proves is that there is still room for new players on the frontier. In particular, there's room for rebuilding the stack for optimizing GPU workloads, improving software at inference layer tooling, and developing AI-generated kernels. Ultimately, this is fantastic news for AI applications in consumer or B2B, since it means the cost of intelligence keeps going down. So the big takeaway here, this is the best possible time to be building a startup. The deadline to apply for the first YC Spring Batch is February 11th. If you're accepted, you'll receive $500,000 in investment, plus access to the best startup community in the world. So apply now and come build the future with us."
  },
  {
    "name_video": "How To Build The AGI Future: Bob McGrew",
    "description_video": "In this episode of How to Build the Future, YC's Garry Tan sits down with OpenAI's former Chief Research Officer Bob McGrew to discuss the lessons learned from his time at OpenAI, scaling laws, his advice for startups, and what all of this means for the jobs of the future.",
    "related_categories": [],
    "page_url": "/library/M6-how-to-build-the-agi-future-bob-mcgrew",
    "youtube_url": "https://youtube.com/watch?v=eW7rUtYHD9U",
    "mp3_file": "downloaded/How_To_Build_The_AGI_Future:_Bob_McGrew.mp3",
    "mp3_content": " focused on this. And in fact, you see distillation as a service coming. What would you say to people watching who are trying to make AI startups right now? Often they're vertical startups, but some of them are consumer too, actually. Yeah, I would say if you're a founder, the right approach is to start with the very best model you can, because your startup is only going to be successful if it exploits something about AI that realistically is going to be on the frontier. So start with the very best model that you can and get it to work. And once you've gotten it to work, then you can use distillation. You can take a dumber model and you can try prompting it. You can try to have the frontier model, train the smaller model. But the most important thing in a startup is actually your time, right? Unless you have to, you don't want to be like Palantir taking three years to get to market. You want to be able to build that product as quickly as possible. And only once you've actually figured out where the value is, probably by iterating with your user, then you can think about cost. Working backwards, it sort of feels like the movie Her is more or less inevitable. I am a little skeptical of the deep emotional connection that guys are going to have AI girlfriends. I think that's not what guys are looking for in a girlfriend, frankly. I think an AI that shops for you, well, there it's really helpful to know a lot about your preferences. An AI that is your assistant at work, again, very helpful to know about your preferences. One other thing I think would be cool would be an AI that it's Gary's AI bot. And if I want to know what Gary's thinking, I could just ask your AI bot. And if I get a good enough answer, then I can go about my job. And if not, then I have to actually bother you in person. I think that would be just a tremendous feat of personalization if you could make something like that happen. And anything that works with you at work needs a huge amount of context about you. It should be able to see your slacks and your Gmail and all the different productivity tools that you have. And I think it's actually surprising. I think this is actually a real hole in the market because that's not something I can go out and purchase today. I mean, in my mind's eye, what I can imagine is kind of like a super intelligent genie. It knows who you are, what you're about, and it might actually know your job, your goals in life. And it'll actually tell you, oh, hey, you should probably do this. And it might go out and get an appointment for you. And like, oh, yeah, it's time to take the LSAT, buddy. You said you wanted to go be a lawyer. Well, this is the first step. Do you want to do it? Yes or no, right? And there's something really interesting about this idea because I think it's very compelling that the AI is your life coach, but then it goes back to like, so what are you even doing with your life in the first place, right? If the AI is better than you. And I think there's actually a really deep mystery here. When we were first thinking about GPT-1 back in 2018, if you asked people what AGI was, they would say, well, it's a model that you can actually interact with. It passes the Turing test. It can look at things. It can write code. It can even draw an image for you. We're there. Yeah. And like, we've had this for years, right? And if you said, okay, well, what happens when you get all those capabilities? Say, well, everybody's out of a job. All laptop jobs are immediately automated and game over for humanity. And none of that is happening, right? I mean, yes, AI has had some effects, particularly on people who write code, but I don't think you can see it in the productivity statistics unless it's about how big the data centers are that we're building. And I think this is a really deep mystery. Why is it that AI adoption is so slow relative to what we thought should be happening in 2018? What you just said really reminds me of our days at Palantir, actually, where one of the core missions that Palantir started with really is this idea that the technology is already here. It's just not evenly distributed. And I feel like that was one of the things you guys actually really discovered. And part of the reason why Palantir actually exists, it's you went into places in government, three-letter agencies, some of the most impactful decisions that a society might have to make. And you look around and there was no software in there. And that was what Palantir and certainly Palantir government was very early on. The fun piece there was just thinking through what it is that these people do and then how you could just completely reimagine it with technology, where if you were checking to see if a particular person who was flying into the US had a record or if there was any suspicion, you look through 20 different databases. One approach would be to say, well, let's make it faster to look through 20 different databases. Another approach is to say, well, maybe you can just look for it once and it checks all the databases for you. And I think we need some twist like that for AI that lets people figure out how to use the AI to solve the problem they actually have, not just take their existing workflow and have AI do that workflow. Yeah. It's like not just having the data, it's not just having the intelligence. I mean, what AI desperately needs right now is, like you said, the UI, the software, it's just building software. And if you can put that in a package that a particular person really, really needs, I feel like that's one of the big things that we learned at Palantir. It's like there's a whole job that is exactly that, forward deployed engineer. It's a very evocative term, right? Like forward deployed. You're not way back at the HQ, you're all the way in the customer's office. You're sitting right next to them at their computer watching how they do something. And then you're making the perfect software that they would never get access to. The alternative is Excel spreadsheet, writing SQL statements yourself or cost plus government integrator or like Accenture, and they're never going to get something usable. Whereas a really good engineer, who's a good designer, who can understand exactly what that person needs and is trying to do, they can build the perfect thing for that very person. And so maybe that's the answer to your question. Like, why didn't it happen yet? It's like, we just need more software engineers who are like that forward deployed engineer to link up the intelligence and we're there. I think it's really funny because if you think back to 2015, when I left Palantir, people were skeptical of Palantir because of the existence of the forward deployed engineers. If you had a really good product, you wouldn't need the forward deployed engineers, you wouldn't need to specialize it to every customer. And wait five years and Palantir has a great IPO, wait 10 years and it's a very valuable company. Suddenly everybody is talking about building their forward deployed engineering function. And I think it's a good thing. I think hopefully this gives us a lot of software that is actually very tuned to what the customers need, not just something off the rack that you then say, well, there's a way to accomplish what you can do. Go figure it out. Bob, both of us are parents and we just spent a lot of time talking about some pretty wild concepts that are about to affect all of society. Has that affected how you think about what we should be doing with our kids? I really struggle with this. And there's a very crisp version of this for me, which is that my eight-year-old son is really excited about coding. He actually is really excited about it. He wants to start a company. He has a great name and it's going to do asteroid mining and all sorts of cool stuff. And so every day he says, dad, can you teach me a little bit about how to code? This is actually what I do most with language models is I have the language model. I figure out what he's interested in. I have the language model make a lesson for him that teaches some idea that I want to teach him. It teaches him about networking or teaches him about loops and it fits his idea. And my wife asked, why are you doing this if the language models are going to be able to code? And I think the answer is that right now we still have to, this is how you learn how to do critical thinking. And I think back to Paul Graham's idea of the resistance of the medium. Even once the computer can do the programming for you, I think there's still something to having had your hands in it yourself and knowing what's possible and what's not possible and that you can have that intuition. I think the role that we're going to be playing, one, I think there's going to be two roles. One will be something like a lone genius, the Alec Radford of the world working alone at his computer coming up with some crazy idea. But now with that computer being able to leverage him up so much. And the other role is manager that, you know, you will be the CEO of your own firm and that firm will mostly be AI. I think there'll be other humans in there. I don't think the whole company gets replaced, although this is another really interesting question for us to answer. But, you know, I think those will be the two jobs of the future, genius and manager. I think that that is actually pretty awesome. Those are two things that would be really fun jobs. Honestly, when cameras, when like the photographic camera and film came out, what happened to artists? And, you know, they're still around and people still learn to paint. And there are probably more people who learn to paint because more people have an appreciation for art and painting and the visual visual arts. So my hope is that that's what happens. And I think, I mean, if you, if you go back to the last time we automated away, you know, most human jobs, you know, in the 1880s, most people were farmers. And now, you know, 3% of Americans maybe are farmers and we all do jobs. I think we try to explain to people from 1880, you know, what, like, you know, being a, being a software engineer or, you know, running a startup incubator, you know, there'll be like, what the hell is this? Right. These aren't real jobs at the end of it. I'm very much an optimist about humanity. I think that humans will have important and valuable roles to play, but, you know, just like, you know, that first 90% of jobs that got automated away, we couldn't really, you know, those farmers didn't know what the jobs of their grandchildren would look like. I think we have that same period now where we don't know what the jobs of our grandchildren will look like. And we're just going to have to play it by ear and figure it out. I guess going back to robotics, you know, one of my hopes is actually that maybe the level four innovators will suddenly break through on a bunch of very specific problems that currently hold back robotics. Have you spent time, you know, back in that space recently and what are the odds of that coming together in the next, I don't know, a couple of years even, like, do you feel like there will be continued breakthroughs on maybe the figure robot and different things like that? What's your sense for robotics in the next year or two? Robotics companies now are where, you know, LLM companies were five years ago. So I think in five years, you know, or even sometime in the next five years, we will see the chat GPT moment for robotics. I think it's a little harder to scale because you've got to build physical robots. But if you look at companies like skilled AI or physical intelligence, who are building foundation models for robots, you know, the progress that we've seen there is just really dramatic. There's some point we're going to get out of that zero to one phase where you're just trying to make it work at all. And we're going to be in something where it kind of works. And then we're just scaling to increase the reliability and increase the scope of the market. I remember working with Sam Altman at YC and he was bringing in some pretty wild hard tech companies like Helion focused on fusion or Oclo in the energy space. And at the time, I don't know if I totally understood why, but I don't know, after the AGI part, you're becoming much more real. Plus that it feels like, you know, if you add robotics, that's one of the more profound sort of triumvirates of technology that might come together that will create quite a lot more abundance for everyone. Yeah. I mean, it's the, you know, whatever the part of the stack is that isn't automated becomes the bottleneck. And so, you know, I think weirdly we're going to end up with, you know, automating the scientist, the innovator before we automate, you know, the experiment doer. But then, you know, if that comes through, I think the potential for really fast scientific advance is totally there. I think we will find some other bottleneck. I think we're going to look back at this conversation where I say we did all the things and science is only going like 30% faster than it was. Why isn't it 300 times faster? And we'll have to figure it out. I mean, it'd be a great problem to have. That's going to be 30% is great, but 300%, that would be insane. Hey, room for thousands more startups. That sounds great. Bob, thank you so much for joining us. This is, I feel like I learn a lot every time I get to see you. So great to see you again. Thanks for coming on the channel. It's always fun to have these conversations with you, Gary."
  },
  {
    "name_video": "AI Revolution: Why This Is The Best Time To Start A Startup",
    "description_video": "In this special episode of Lightcone, we’re joined by YC partner and creator of Gmail, Paul Buchheit, to dig into some of the latest trends in the world of AI and startups.",
    "related_categories": [],
    "page_url": "/library/M5-ai-revolution-why-this-is-the-best-time-to-start-a-startup",
    "youtube_url": "https://youtube.com/watch?v=0LMK5JYkB94",
    "mp3_file": "downloaded/AI_Revolution:_Why_This_Is_The_Best_Time_To_Start_A_Startup.mp3",
    "mp3_content": "The deadline to apply for the first YC Spring Batch is February 11th. If you're accepted, you'll receive $500,000 in investment, plus access to the best startup community in the world. So apply now and come build the future with us. I think with AI, there's sort of two forks on the road. There's the bad direction and there's the good direction. And the good path, which I think we're moving towards, is looking to say, how do we maximize human agency and freedom and our just potential to be kind of the best versions of ourselves? This is the first time no one's saying no. Everyone is saying yes and like more. There's just like unprecedented amounts of demand for just AI stuff. There's a whole category of businesses or products that would not have been economically viable or even possible to create before that are now possible. And so we've actually just like expanded the universe of possible businesses. Never been a better time to be a founder, that's for sure. Welcome back to another episode of The Light Cone. And we've got a special one today because we are in Sonoma and we just wrapped up a 300-person retreat of some of our top AI founders. And we also have a very special guest today, the creator of Gmail and our partner at YC, Paul Buchheit. Harj, why is this such a special episode? What are we doing? Well, we're filming from a different place. So this weekend, we put on an AI retreat for some of our alumni companies to share ideas about AI and what they're seeing as they're building their startups. And we learned a bunch of really interesting stuff. So we thought we would film an episode to talk about it. So PV, back in the day when we were working with companies, what was sort of the aspirational growth rate? What would we tell people to try to do week on week? Well, 10% week on week is an amazing metric to hit. And I think back then, if you were like maybe the top one or two, maybe even the top one or two companies in the whole batch, you'd be able to achieve that. And since summer of last year, the wildest thing is realizing that both summer and fall batch, in aggregate, on average, over the batch in 12 weeks, averaged 10% week on week growth. So not just the very best, the Airbnb of the batch, but the batch overall, it's amazing. And it's not just during the batch. Diana and Harj, you guys have companies that you've worked with that have continued an insane growth rate long after the batch is over. Do you want to talk about those ones? One of the ones that really stands out is a particular company that went from zero to 12 million in 12 months. I had never seen any growth like that. And I think we've seen this not to be just the exceptional different company of the batch, but actually more of them do that as well, right? Yeah, my general pickup from this weekend was that just the rate of execution of startups is going much higher. And you can see it in both how quickly companies are hitting like a million dollars in ARR. Like we used to, I think, say you should aim for that like 12 to 18 months out of the batch. And that's like the equivalent of the 10% week on week growth. Like that's what you should aspire to. Now it feels to me like that's probably like the minimum. And if you're like an AI startup, I have companies hitting it within six months. And then I was just talking to some founders this weekend just about their goals for this year. Like some of them have hit a million dollars ARR just now. I had one company say that their goal is 20. Like another company say they're aiming for 10 at least. Like just going from one to 20 million ARR in one year. Yes, yeah. And this is a goal. Founders have goals and like we hope they hit them. But my point is, I think like saying that, like even a couple of years ago, hey, my goal is to go from like one to 20. People would have thought you were just that. Yeah, you would have just, you would have been either like, just like, that's total nonsense. It's never going to happen. Or like, it just, you just wouldn't have said it. And I just think that the general level of ambition has gone way up because of AI. The things are starting to work. And let's talk about why that is the case. Does anyone have any thoughts on that? Well, I guess I have a meme that I showed you guys earlier. You know, I think the classic thing is you have a boss who's sort of like slave driving. And then, you know, I still believe this. Like if you're a leader, you're not, you know, sort of slave driving from the back. You're way in the front, like sort of leading. And then the meme has, you know, this one person pulling the cart alone. And that's the introvert. And what might happen now is the introvert with AI can pull three times as many carts all alone, actually. Once intelligence is truly on tap, then it's actually a force multiplier for founders and people with really, really strong senses of agency. So why specifically is this happening? One of the interesting talks I heard was from Aaron Levy, the CEO of Box. And he was talking about, he's been through like multiple cycles of enterprise software. And he said that usually when there's sort of like a new cycle shift, but like cloud or mobile, there's always people in the room, decision makers at the big enterprise software companies saying like, no, like, you know, we're never gonna shift to cloud. Like apparently like a famous quote from Jamie Dimon. Well, like we're never like, mobile's not gonna be a thing. It's not that important. But with AI, it's different. Like this is the first time, no one's saying no, everyone is saying yes. And like more, like there's just like unprecedented amounts of demand for just AI stuff. Yeah, it's notable that all these companies that are having these incredible growth rates, they're all the same flavor of startup, right? They're all basically selling AI agents to businesses. I mean, there's other companies that were funded that are doing well, but like all of the ones that you guys were talking about, right, they're all AI agents for businesses. And so they're all essentially, I think riding on this wave of like enterprises or like have enormous pressure internally to adopt AI. It seems like it goes back to our fundamental base advice, which is make something people want. And in this case, traditionally, the challenge was convincing people that they wanted the product. And it sounds like what's driving the growth is that the demand is already there. And so you just have to show up with a product that works and you don't even have to be that good at sales. The point is that actually building the product that works is quite hard. Like a lot of what the demand we're seeing is for software that can actually do the work of a person. So it's essentially services. And doing that to the equivalent level of a human doing the job, whether it's like customer support, sales, phone calls, whatever it is, it's actually very, very hard. So I think just like a trend I noticed is a lot of our heavily technical CEOs who aren't necessarily the strongest at sales are able to win big enterprise contracts now because although there's 10 or 15 other companies competing for the same contract, it's very, very hard to build a product. And so just building the thing that actually does the work well is enough to win these huge deals. A lot of the details of how they build the products, they're really inventing a lot of new patterns on how to build a product because nobody knew how to really get LMs to behave, let's say, correctly and give very predictable results. And people thought that was impossible. That's because they only tried, maybe surface level, they play with chat GPT and oh, sometimes hallucinate and then people give up. That could be the random person just does that. But a lot of the technical founders, they don't. They find ways and whizzery around on how to really state a problem, how to properly prompt it to actually be very accurate. And it is possible because we're actually seeing a lot of these products getting bought at businesses to handle all these complex tasks. One thing I noticed this weekend is that a lot of the talks that the founders gave were around evals and testing, which I don't think that would have ever been true at a previous YC conference. Testing was sort of this afterthought thing that you try to do as little of as possible. I heard one really interesting comment from a founder who's building an AI agent who said that he thinks that the most valuable thing that his company has built is not the code base, it's the eval set. It's a gold standard labeled set of data this is the correct answer for the AI to do. And that was sort of a mental change for me that there's, I think, this perception that companies have data assets, but just general random data is actually not that valuable. The thing that's really valuable is a gold standard, meticulously labeled eval set. I mean, this is exactly why the whole chat GPT wrapper meme is wrong in that actually it's the model that is changing very quickly. There are clearly five or more AI labs, all of which are right there at the frontier. So now there's a lot of alternatives to which model, but then the thing that nobody has that is actually hard to get is the eval set. And I'd argue the prompting, which is sort of like mirrors basically all of the opportunity for the people watching right now. It's like basically agency and taste prompting, just knowing what to tell someone to do or what to tell the agent to do. And then evals is taste. It's like, is it good? Is it beautiful? Is it useful? I had one very interesting tidbit from a founder who said that his designer, that they've actually stopped using Figma mock-up things and the workflow is interesting. So the designer is designing entirely with Claude and going from text to JavaScript. It was just counterintuitive to me because you assume design is this like very visual thing, but apparently their designer has figured like, it has enough taste to be able to turn that into just like text prompts and like via prompt engineering essentially get to a actual like lines of code that they are like as tasteful and as good as any Figma mock-up would have been. So it's like the pattern as always is whoever can iterate the fastest wins. And AI is an incredible tool for rapid iteration. I guess people are sort of worried that the jobs are gonna go away, but earlier we were talking about, there's this great Milton Friedman quote where he's visiting a developing country and he sees this large group of workers digging a canal using shovels. And he asks his government official host, why are you not using machinery? What's going on? And the guy says, it's a jobs program actually. And what does Friedman say? He says, if it's a jobs program, you should give them spoons, not shovels. I think that that's actually the most useful mental model for sort of the fear about job loss, at least for now. Certainly, the potential of AI is because it is this incredible tool where we're moving not from spoons to shovels or shovels to bulldozers, but to the point where the AI can do so much work that we're actually just able to create dramatically more wealth. And I think that's really the dream that we have for peering 10 years into the future is I think there's a potential for an unprecedented level of certainly scientific discovery. The AI is incredibly good at reading thousands of papers, digesting textbooks, very good at chemistry. So I think we're gonna see incredible levels of productivity. The story is fascinating to me because the alternative is what? Replacing people's shovels with spoons. Like, I think it's absurd on its face. Like, that actually is a little bit like torture. Like, I feel like growing up, my dad would force me to work in the gardens. That alone was barbarous to me. But like, if you made me do it with a spoon, what would we call that? That'd be torture, actually. I think the question that I posed to Sam that everyone seemed most interested in is essentially, are any of these startups actually gonna exist in 10 years? That was certainly relevant to the audience. Everyone felt that was relevant because yeah, if we do achieve AGI, what does that mean? How quickly can that actually just displace all of the work that we're doing here? And honestly, like, no one's quite sure, which makes this a very exciting time in technology. But it's very clear that we're able to achieve a lot more. And I think like throughout history, every time we've found ways to create more wealth more rapidly, that's actually worked out really well. Historically, 97% of people were farmers or something like that. And now it's, I think maybe 3% or even less. And so we seem to be very good at inventing new work for ourselves and new ways to find purpose and meaning. Well, what was the answer to your question? I think- I enjoy your real estate. I think it's the best thing. You know, what are the things that people will value in the future? And if we get to the point where we really do have just a real abundance of the kinds of things that machines are good at creating. And so this is actually an idea I've been talking about for 10 or 15 years of almost thinking about the world in terms of machine money and human money. That really what we wanna do is take the products of technology and create actually massive deflation. We wanna drive the prices down to zero so that we're all able to afford, certainly like medical care is something I think a lot about where it's really hard for most people to get really great medical care today. And I think that that's something where in 10 years we're gonna be able to make it so that the majority of humans on earth have probably better medical care than we here at the table have today which is I think gonna be a huge achievement. But at the same time, that's kind of on the machine money side of things. But then you think about the human money or what are the things that we get that we really value from humans? Like if you go to see live music, we seem to have a preference to see a band live instead of just sit in front of a bunch of speakers or maybe robots playing music. Human money I think might be something that comes closer to just like an hour of your time, right? And that we actually have almost like a dual economy. That's super interesting. Embedded in that is actually maybe a better version of UBI. I mean, a bunch of the studies around UBI are sort of showing that there are sort of nice benefits here and there, but fundamentally it's not creating a greater sense of wellbeing in the way that people hoped maybe like five or 10 years ago. Yeah, it's definitely had mixed results. And I think a lot of that really comes down to people still need guidance in life and especially a lot of the people who are targeted with UBI are not necessarily people who are in a great sort of social position to begin with. And again, I think that there's a lot of potential for AI to actually kind of act as like a life coach. And again, like if you're fortunate enough to grow up with great parents and a great culture or something, you have a lot of advantages that a lot of other people maybe didn't have. And so again, I think like the great promise of AI is kind of taking like the best of what we have available and just making it universally accessible because we're able to drive the cost so low. I mean, honestly, this past December I spent a couple of weeks in Vietnam and you're in a developing country and then you realize like there is so much that needs to be developed. It's actually, you know, there's roads, there's infrastructure, like the whole country seems like it's under construction. I imagine that's what China probably looked like in maybe the mid 80s or mid 90s. But there's also like this crazy optimism as it's building. If you have a robot, like it could build your house, it could clean your house, it could take care of all of these things for you. And that would like radically change your day-to-day, your standard of living. And how much more direct can you be if you, rather than sort of just giving people more human money, let's give them like the better way to live. And that's sort of, you know, everyone can get here. But then I think there's like a special thing here around the human money where like the really remarkable things, like, you know, nobody's guaranteed to have, you know, beachfront property in California or something like that. And that's where human money might go. Like everyone has the basics and actually something that's probably five or 10 times better than what even the most wealthy people have today. Yeah. Yeah, the way I like to think about it is I kind of think with AI, there's sort of two forks on the road. There's the bad direction and there's the good direction. And I think the bad direction is one where it's used to just like constrain and control and essentially like imprison us. And the good path, which I think we're, you know, we're moving towards is looking to say, how do we maximize human agency and freedom and our just potential to be kind of our best, the best versions of ourselves. And we even have that, you know, today with some of the creative tools where, you know, I don't have like a lot of artistic ability, but with like AI image generation or something, I can convey, you know, funny concepts or whatever. And we see that again, like with the design tools, you know, someone who can't. code can now all of a sudden create basic apps and things like that. And we're able to realize our visions in a way that we were never able to do before. A conversation we were having earlier is how we are actually now in the good timeline on how AI is shaping. Yeah, absolutely. Because 10 years ago, this is a very different view of how AI could turn out. Do you want to talk about that? Yeah, exactly. So I like to think about things on a 10-year timescale, in part because that's kind of how our startups work. Roughly speaking, we seed fund them. They come through YC. And then 10 years later, they IPO. And so I've been asking a lot of people about the year 2035. What do you want to see in 2035? But also thinking backwards to 2015. And so if we go back to 2015, 10 years ago, was where we were having discussions inside of YC about artificial intelligence. Because we believed that we had sort of crossed a threshold basically in the early teens. Somewhere around 2012 is where we started to really believe that actually we had broken through. I think everything prior to 2012 was fake, in my opinion. But it was really deep learning that started to really deliver on AI. But when we were looking at this 10 years ago in 2015, one of the big questions was, is all reinforcement learning? And what is the thing that we're reinforcing? Because at the time, they were playing video games and trying to make the score go up. And this is, I think, also kind of where the paperclip maximizer concept and fear came from, is like if you gave it the wrong objective function. And so we had a lot of fear that based on our own evolution, our intelligence arose as a survival mechanism. That we became intelligent and other animals became intelligent as a way to survive and perpetuate themselves. And we thought that if AI did the same thing, it would, by its very nature, want to wipe us out in order to maximize its own odds of survival. And what's happened in the last 10 years is we actually found the right objective function, which is simply to predict the next token. And that actually, intelligence in its most raw form is simply predicting what comes next. And so all of our really, at a root level, what we're predicting, our reinforcement function, is simply predicting what comes next. And that is the fundamental core of intelligence. And the great thing about that is we've been able to create this intelligence that doesn't have this drive to survive. It doesn't mind that we spin up an intelligence, and it does some work, and then it disappears. Because it's just based on that ability to predict patterns. I would argue the most important part of this is actually the agency piece. Venkatesh Rao has this crazy thing he talks about. And this is sort of a function of maybe the Uber and DoorDash era of things, where in society, there's this API line. So either you are above the line, meaning you create Uber, or you drive for Uber. And obviously, that's a distillation of the last idea. And then in this AI world, basically, if you're below the API line in the old model, you don't have agency. You sort of have to play this never-ending game. The human is doing the paperclip maximizing. And so there's this other sort of world that I'm hoping we live in, where it's humans not just writing the prompt, and then the machine runs software, and then this vast machinery, and that's it. And you can never change the prompt. That would be tyranny, probably. It's conceivable that in the future, we might have. And I don't know if this is the right thing, but this sounds like something the EU would do, for instance. It would probably mandate there to be a human in the loop. And maybe the CEO of a company has to do it. And that might be the case, right? It might be a form of like, we cannot use shovels here. We must use tiny little spoons just for this one part. Yeah, I think kind of the fundamental error they keep making over and over again is taking a very static view of the world, and then essentially trying to dysregulate the current structure. And that closes off our ability to evolve and see into the future. And it's, again, very difficult, and oftentimes, implausible. So again, going back to 2015, the conclusion of our thinking was actually that we needed to create our own AI lab. Because at the time, all of the best AI work was being done at Google. And Google had all the money, all the data, all the users, all the researchers. And it kind of seemed possible that they were going to have, essentially, a monopoly. And it was all going to be locked up inside of that system. And so we had this very sort of like loony moonshot idea to start, at the time, we called it YC research, but it eventually got renamed OpenAI. And so OpenAI, we were going to take on Google with a small nonprofit, which was sort of doesn't quite pass the laugh test, right? Like, how is this little nonprofit going to be the one that actually develops AGI when the other companies have dramatically more resources? And then here we are 10 years later, it actually happened. And at the time, it just seemed incredibly implausible, like no one would have believed it. Yet here we are on, I think, basically the best timeline. Like, we actually delivered it. We have an open and competitive market with, I would say, at least kind of like six, basically, foundation models that are competing, including an open source one from Meta. And I think that's our best shot for preserving freedom, is choice and competition. And talking a bit about Google, it actually is digging their traffic, too. Do you want to talk a bit about that, about the stat that we're I mean, some of it is like I don't think it's out there in the annual reports yet. And certainly, like we did some research prior to this episode, we couldn't really find anything that conclusive. But maybe purely anecdotally, because we're in this pool of people who are very, very early adopters, very much software engineers. And our behavior interacting with the internet has changed already. It's not a surprise to me some people are starting to report in their referral traffic, Google referrals are down maybe 15% in the last year. And that certainly probably mirrors my own behavior. Like, I still use Google, but I'm increasingly not clicking on any links in Google because they're sort of the snippet at the top. Or the first thing I think of is using ChatGPT with web or using Perplexity directly. Yeah, exactly. I mean, if you want to understand the future, I think you always have to look at where the early adopters are. Again, now if we go back 25 years, if we go back to the year 2000 or 1999, the early adopters were the people using Google. So at the time, people were like, well, Google is just kind of this fringe thing that maybe techie people use or something. But at this point in history, those same people or those same kinds of people who are the early adopters of Google are now switching their behavior to where your default action, if you're looking for information, is ChatGPT or Perplexity or one of these things. And even just observing my own behavior, I'll use Google mostly for kind of navigational. Like, if I'm just looking for a specific website and I know it's going to give the same thing, but it's starting to have that weird kind of legacy website, like I'm using eBay or something vibe to it. Even earlier sign was the drop in traffic for Stack Overflow that actually started back in 2022, even before ChatGPT. And this was primarily because of GitHub Copilot. And they're down 60% this year. Yeah. Yeah, the pool of people here have quite a good track record of predicting trends, right? If you think of, by the pool, I mean just like technical startup founders of YC. Like I remember 2007, sort of Apple was back on the rise, but you could tell because just everybody who was in a YC batch was using a Mac. You could see the rise of AWS and the shift from rack servers to everything being in the cloud because all of the founders in the batch just started like using AWS. Same thing now. I've spoken to a bunch of founders and just personal productivity, like they just have ChatGPT open all day. They've had founders like say they're just constantly screenshotting their desktop and just like sending it to ChatGPT if they need to debug something or figure out how to like navigate a government website. It's like one rather example, it's like I need to do set up some registration. You know, here's a screenshot. Just tell me like exactly where I need to click in order to do this quickly. The other thing that we saw last year in Summer Batch was how so much of the batch is using Cursor and is one of the companies that's been growing a lot very quickly. Anecdotally, they hit 50 million in revenue. I think we may have mentioned this in another episode, but I can't think of another tool that's got adoption so quickly within a YC batch as Cursor. It just went from nothing to- From one batch to the other. Up to like 80% of the batch using it from one to the other when the previous batch was like single digit percent. Some people mentioned it felt like a technical conference a little bit. And a lot of people were trading notes on how to hire the best engineers. And a few people said, you know what? Like if someone comes in and I ask them if they use Cursor or any code gen tools and they say no, right now I can't hire them because they're not gonna be able to be as productive as the rest of my team. I think that's an extension of something Stripes started a decade ago actually. Like in general engineering interviews and technical interviews, most of the value copied Google, I would say. It was like whiteboards, yes problems, which probably made sense for Google and what Google was looking for. But I think Stripe were the first around like 2011, I think they started doing this with like, we don't really need you to whiteboard CS problems. We need you to develop web apps really fast. And so just give someone a laptop. And like the idea was you basically sit in a room and you just like build like a to-do list app or whatever you can as quickly as you can. And you basically measured on your max output in those like two or three hours. And so I think if you follow that line through then it's like, well, it doesn't really matter. Like if there's whatever tools they use, the question is just like the bar moves higher. Like you've got three hours, build what you can build. And it's like, you should be able to build a lot more with Cursor than before. If you still believe that you're sort of looking for fundamentally how clearly can people think or solve hard architecture problems, then you're sticking to whiteboards. What do you think this means for a SaaS? Because one of the crazier things we've been seeing is that Klarna claims that they're not even buying new SaaS tools anymore. They're using CodeGen and not even hiring new engineers anymore. Using their existing engineering set of people. They're just gonna replace all the SaaS tools they use to run their FinTech. And I definitely heard stories like that. One of the unconference talks was actually specifically about that. This was a company I think we mentioned before is a company called Jerry that is now halfway to $100 million a year in revenue. But a few years ago, they were like still burning like five or $10 million a year. They had crazy customer support problems. And basically GPT-4 dropped, they implemented it. And then now it totally changed the way they hire. Like the prompting itself is actually in the hands of their head of customer support. And so they have a PM, they have the head of customer support. The engineers made it. They don't have to touch it. It's mainly a prompt management and workflow tool. And it literally cut their customer support team and their budget for that side by half. And it turned a company that was not able to grow and burning $10 million a year to a profitable company that is cash flowing that is also compounding its growth at north of 50% a year. Which is like a dream scenario. Yeah, this is a great example actually, I think of the way in which AI is creating wealth, right? Because there's a whole category of businesses or products that would not have been economically viable or even possible to create before that are now possible. And so we've actually just like expanded the universe of possible businesses. Yeah, it's never been a better time to be a founder, that's for sure. There's definitely been a vibe shift in the attitude towards just building companies. Start with like hiring a number of people, for example. If you're like, certainly 10 years ago, the general sense was that if your company was growing fast and revenue was ramping up, then you would go out and raise around and you would sort of, a metric you'd hear a lot was like, how many people are you at? Like, how many people did you hire this year? How many people are you gonna hire next year? So like a bit of a vanity metric. It just seems to me now, like the companies that are reaching these numbers we're talking about, like a millionaire or are trying to get to 10 or 15 or 20 are doing it with less people and expect to do it with less people. Which is the new thing. This is why so many of them really haven't even raised a series A, which there's less need for hiring a lot of people to do a lot of the operations or maybe going to your analogy, Gary, the previous generation of startups had this concept below the API or above the API. So you had a bunch of people that had to kind of build and operate the API. Like if you had to build a business like Uber or Lyft, DoorDash, marketplaces, you had to do that hyperscale of hiring lots of people. The funny thing about that era was there's this concept that I think was probably appropriate for that era called blitzscaling. There was an entire book about it. And the idea was basically, I think it was born out of this descending interest rate world while at the same time, like if you put more money into something, like you had these network effects. So if you played that out, yeah, you wanna blitzscale. You wanna hire as many people as possible. You wanna grow faster than everyone else. And then because of the winner-take-all dynamic, like the world capital markets were just gonna funnel you tens of billions of dollars, hundreds of billions of dollars even to subsidize growth to be the winner. And that was the game. And I think like from what we can tell from all the people, you have more than 300 founders right here sort of sharing their stories. And I don't think I heard blitzscaling or I'm trying to hire as many people as possible like at all. Nobody is bragging about, hey, you know who I'm hanging out with? These unicorn, you know, I'm gonna be a unicorn. Like people are literally not bragging about that. It's all about leverage, right? Now the real thing is how much you can do with a little bit of resources because we have these magical tools that give us superhuman leverage. Part of it is like this, there's gonna be a longer tail of businesses that are possible only now because of AI. And this longer tail is gonna be also fatter. Companies are doing 20, 30 million revenue but more than hundreds of millions of revenue. And it goes back to the episode when we talked about vertical SaaS. It's just more willingness to pay for this new category that people are still trying to figure out how to price. That's why there's just so much willingness to pay because people want it. It doesn't go just in the software budget for a company is there's budget from the AI chief officer or something. I don't know if that's like a title that has come out yet. Aaron Levy made this point too that, one thing I'm certainly noticing is that the companies that are hitting these big revenue numbers trying to sign these contracts, it's actually sort of usage-based pricing and the data. It's not necessarily the paying per use but the pricing is tied to like how much you use the product which is definitely how, it's close to how you would think about it as like selling services and software per se. Obvious ROI, right? So the problem a lot of times with selling a product is the customer doesn't really know if they're getting the ROI. And so that makes for a long and painful sales cycle. But if you're able to drop in something that pays for itself in the same month, that's an easy sale, right? I think the way they've kind of priced it is more like services and is really akin to this is how intelligence is getting priced. So on the spectrum of like people thinking, not worrying about just the big picture is AI gonna make us all obsolete and one end and the other end like existential, like philosophical conversations. Some of the stuff I thought that's interesting in the middle is it's just hard to predict the timeline of the tools themselves. So there was some interesting talks about like RAG, for example. I think Sam maybe seeded this with his talk about like, if you have like infinite context or huge context windows, do you even need like RAG or retrieval tools at all? And I think that's like, that's the kind of thing where it's like, it's as a startup or a builder right now, I think people are more concerned about, am I using the right tools and like, is this gonna still make sense in three to six months? I think that's like actually a direct consequence of like, if you're an AI lab, you're like on the frontier. And so how you know that your thing is working is actually like your model is bigger. You're like farther along on the scaling law. And so when I meet people from AI labs, like they almost all talk about bigger, better models, but they're model makers. And then obviously, we also spend a lot of time with very scrappy founders who have very little capital. There are just as many talks sort of on the other side, I went to one that was very much about systems level programming. Like if you want to have, I think it was Tavis. So Tavis is building this real time AI avatars with video and audio that are very realistic. Part of the trick is this. they got it to very low latency. 600 milliseconds, which is really fast. Which is even too fast that some of the customers, oh, no, no, no, it's too fast. It's a bit uncanny when it's too fast. It's like, now it's being rude. It's just interrupting me every time. So a lot of the builders SDK for other companies. So a lot of the products that are getting built with this Zoom video interface with another human, it is using them. So I love their talk, because it's a good illustration of, yes, the labs are going to continue to do their thing. And maybe on a more fast timeline than we even imagine. Like, nine months, 18 months, maybe it's even every three months. There's sort of these breakthroughs. So if I had to guess, that's sort of when people are in their heads being like, why should I do any of this? Because open AI models are just going to be infinitely smart, and I should just lie down on a bed. What I would say is, I'm actually heartened by all the stories that I heard. Will the models change? Will the technology change? Will Tavis change its stack? Yes, they've already seemingly rewritten their stack multiple times to take advantage of what's been going on. Their product has only gotten better in the marketplace as time goes on. And then what will it look like? Will there be a model model? Maybe not. The same AI labs today that are talking about there's going to be a trillion token context. It's like, man, how much is that going to cost? Ultimately, engineering and systems, those are actually the most valuable things right now. And then along the way, you're going to have these golden evals. I hate to bring in consulting speak, but what are the moats, right? And the moats in the end are brand. It's data that no one else has. Sometimes it actually literally is caring about customers that the giant company will never care about, right? Actually, I think the other moat is going to be ultimately startups move quickly. One of the remarkable things that I observed, a lot of the founders actually have rebuilt a lot of their tech stack to be with the latest. They were very willing to, oh, this particular approach to rack doesn't work or vector database, throw it away. PG vector became the better thing. Let's use that and just throw it away and use the best thing. So what was fun to see is I think the best startups are going to be the ones that can build the fastest and be willing to be at the bleeding edge and be willing to reevaluate assumptions of what's the best approach. And I heard a lot of how things got built. They redo it or they do it again with the latest and best. We should also, another reason to explain why they're securing enterprise contracts and these big contracts faster than ever, right? Like big companies have never been great at continuing to build great software, but now like, yeah, if you need to constantly rip and replace the tool you're using every three months to be like at the bleeding edge, like it's going to take three months to get the meeting schedule to discuss whether we should reevaluate the tools. But we're going to plan in the next sprint, it's going to take, whatever, it's going to take three months. Yeah, we can get to that in like, you know, 2029 for sure. Yeah, and these companies are getting to the six or 12 million example. I know they actually have rewritten a lot of their tech stack a lot of times. And the architect, every time I actually talk to them, oh yeah, we threw away that thing that we told you. It's like, it's this new way of doing it. It's like, okay. And that's like every month, every other month. From talking to founders this weekend, what was your sense of the overall vibe? It's pretty exciting. I mean, I don't know that there's ever been a better time. You know, again, just kind of looking back historically, really the foundation of YC, if we jump back not 10 years to when we were starting OpenAI, but 20 years to the Summer Founders Program, the thesis behind why Paul and team started YC was the realization that it was getting easier to build startups. You didn't need to raise a mountain of capital and hire a giant team that actually just a couple of smart kids could build a web app. And that trend has only accelerated now with AI, where you can build an entire $12 million business or something with just a handful of employees. And so it again goes back to technological leverage enables people who have sort of ambition and insight to do incredible things. Well, that's all we have time for today, but we'll catch you next time on The Light Cone."
  },
  {
    "name_video": "How Scaling Laws Will Determine AI's Future",
    "description_video": "In this episode of YC Decoded, President and CEO Garry Tan looks into both sides of the scaling laws debate and how a brand-new paradigm could potentially forecast the future of AI.",
    "related_categories": [],
    "page_url": "/library/M4-how-scaling-laws-will-determine-ai-s-future",
    "youtube_url": "https://youtube.com/watch?v=d6Ed5bZAtrM",
    "mp3_file": "downloaded/How_Scaling_Laws_Will_Determine_AI's_Future.mp3",
    "mp3_content": "The deadline to apply for the first YC Spring Batch is February 11th. If you're accepted, you'll receive $500,000 in investment, plus access to the best startup community in the world. So apply now and come build the future with us. Large language models are getting bigger, much bigger. They're also getting smarter. Over the past few years, AI labs have hit on what feels like a winning strategy. Scaling. More parameters, more data, more compute. Keep scaling the models and they keep improving. You know, just like Moore's law, we saw the doubling in performance every 18 months. With AI, we have now started to see that doubling every six months or so. But could that be coming to an end? Is the era of scaling finally over? Or are we standing right at the beginning of a brand new scaling paradigm, one that promises to revolutionize AI forever? In November of 2019, OpenAI released GPT-2, its largest ever model with one and a half billion parameters. The next summer, they released its successor, GPT-3, which was something we'd never seen before. Not only was GPT-3 far more useful and usable, it was also much bigger, over 100 times bigger than GPT-2. The era of scaling laws had arrived. Before GPT-3, LLMs were already getting bigger. But it was still anyone's guess whether or not that extra size, data and compute would be worth it. There was no guarantee that making your model 100 times bigger would also make it 100 times better. What if they started to run into diminishing returns? It wasn't until January of 2020, when Jared Kaplan, Sam McCandlish, and their colleagues at OpenAI released the influential Scaling Laws for Neural Language Models paper, that the field started to take notice. Think of training AI models like a recipe. You have three main ingredients. The model itself, the data it's trained on, and the compute power used to train it. Larger models have more parameters. These are the internal values of the neural net that are tweaked and trained in order to make predictions. These models are also typically trained on much more data, measured in tokens, which for LLMs are often words or parts of words. Finally, training these larger models requires computing power, which means more GPUs running for longer, using more and more energy. What the Scaling Laws paper revealed was that by cranking up all three, the parameters, the data, and the compute, the result was a smooth, consistent improvement in model performance in the form of a power law. Performance, it turned out, depends much more on scale than on the algorithm. Later in the year, more research from OpenAI confirmed that these Scaling Laws worked for other kinds of models too. On text-to-image, image-to-text, and even math, the same Scaling Laws were there. But back in early 2020, LLM Scaling Laws were pretty much unknown outside of OpenAI. That is, except for one person. The anonymous researcher and writer, Gwern, was one of the first people to hone in on what he called the Scaling Hypothesis. Scale up the size, the data, and the compute, and watch intelligence emerge. Maybe intelligence really is just like a lot of compute applied to a lot of data, applied to a lot of parameters. Maybe Moravec and Legg and Kurzweil were right. Gwern's post brought Scaling Laws into the mainstream. And over time, what started as a quiet observation quickly turned into a foundational principle for AI development. But OpenAI's research was just a part of the picture. In 2022, Google DeepMind released their own research on Scaling Laws. And they added an important missing piece. It turned out that it's not just about making models bigger, it's also about making sure you train them on enough data. Researchers were looking to find the most optimal model size and training data for a given compute budget. So they trained over 400 models of different sizes with different amounts of data. And what they found was surprising. Their research suggested that previous LLMs like GPT-3 were actually under-trained. These models were huge, but they hadn't been trained on enough text to fully realize their potential. To test this, they trained Chinchilla, an LLM less than half the size of GPT-3, but with four times more data. And it won. Chinchilla was far better than models double, even triple, its size. These so-called Chinchilla Scaling Laws meant that training the optimal model wasn't just about making the model larger, but also about having enough data to feed it. Chinchilla was a huge milestone on the road to training the frontier AI models we have today, like GPT-4.0, Cloud 3.5 Sonnet, and others. Labs learned they could trust in the scaling laws and get reliably better and better models. So the future of AI is just bigger and bigger models forever, right? Well, recently, there's been plenty of debate within the AI community about whether or not we've finally reached the limits of scaling laws. Some argued that as the latest generation of models have gotten bigger and more expensive, capabilities have started to plateau. There's a lot of debate, in fact, just in the last multiple weeks, though, have we hit the wall with scaling laws? The current generation of LLM models are roughly, you know, a few companies have converged at the top. But I think they're all working on our next versions, too. We're increasing GPUs at the same, like, rate, but we're not getting the intelligence improvements at all. Meanwhile, rumors have leaked out of major labs about failed training runs and diminishing returns. Others have speculated that the lack of high-quality data to train new models has also become a major bottleneck. One practical issue we could have is we could run out of data. For various reasons, I think that's not going to happen. But, you know, if you look at it very, very naively, we're not that far from running out of data. And so it's like we just don't have the data to continue the scaling curves. So if the old scaling laws are beginning to lose their edge, what comes next? What if there were a new frontier for scaling from a brand new kind of model? OpenAI's new class of reasoning models hints at a potential new direction. In a previous video, we explained how O1 learns to think through complex problems using its own chain of thought. And OpenAI researchers found that the longer O1 was able to think, the better it performed. It wasn't immediately clear how well this strategy would continue to scale up. But now, with the recent release of its successor, O3, the sky seems to be the limit for this new paradigm of scaling LLMs. O3 made headlines when it was announced, as it smashed benchmarks that were previously considered far out of reach for AI. From software engineering to math to PhD-level science questions, O3 easily surpasses the old, state-of-the-art results. O3 isn't just a small improvement on its predecessors. It's a huge leap. And OpenAI researchers say they have every reason to believe this trajectory will continue. It may even be on a path to artificial general intelligence. Instead of continuing to scale up the model size during training, it seems likely that researchers will shift focus to scaling the amount of compute available to the model for its chain of thought, also called test-time compute, by letting models think for longer. LLMs like O1 and O3 can leverage more compute on the fly, scaling up their intelligence when it's needed for harder and harder problems. Scaling pre-training may have plateaued. But by training test-time compute, OpenAI may have just opened up an entirely new paradigm for scaling laws, potentially unlocking capabilities we never thought possible. Large-language models are a key piece of the hunt to artificial general intelligence. These same principles of scaling appear to hold for other models too. Image diffusion models, protein folding, and chemical models. Even world models for robotics. Like for self-driving. One thing is clear. It might be mid-game for large-language models, but we are clearly still in the early game for scaling other modalities. Buckle up."
  },
  {
    "name_video": "How To Use AI In Your Startup",
    "description_video": "YC Partners Brad Flora, Pete Koomen, Gustaf Alstromer, and Nicolas Dessaigne discuss what you should consider if you’re thinking about pivoting to or incorporating AI as part of your startup.",
    "related_categories": [],
    "page_url": "/library/M3-how-to-use-ai-in-your-startup",
    "youtube_url": "https://youtube.com/watch?v=7Kt9ugD3bGQ",
    "mp3_file": "downloaded/How_To_Use_AI_In_Your_Startup.mp3",
    "mp3_content": "The deadline to apply for the first YC spring batch is February 11. If you're accepted, you'll receive a $500,000 investment plus access to the best startup community in the world. So apply now and come build the future with us. We're talking about all this AI stuff and it's all awesome, but the fundamental things that the founders still need to do to, like, enable, the technology to to produce value for customers are the same. And if you're not doing that, just switching your idea over to something that makes calls to OpenAI is not gonna not gonna change your fate as a startup. If you are Mhmm. Building a cloud company, obviously, you're going to use the cloud. Same thing with AI. Like, it doesn't make sense for anyone creating a new company today to not leverage AI within their company. Go to your friend who works in this and go and sit next to them and ask them how to do their job and watch their screens, and you will get ideas right away. I'm very convinced that, like, you don't have to do spend more than, like, a few hours in front of their screens and see what of their repetitive tasks can be done better. Welcome to another episode of Office Hours. I'm Brad, and this is Pete, and we're here with Gustav and Nicolas. We've sat across the table from thousands of founders over the years digging into just about every question you can possibly imagine, and we wanna talk with you today about some of those things that have come up. We are in the age of AI. That can mean a lot of things though, and there's a lot of different directions you can go with that. So what are some of the ways that startups are taking advantage of the fact that there's so many new opportunities coming on board from LLMs? If I were a founder today, what I would be asking myself is what's going to be possible when all of these models become twice as good as they are today? So if you are a startup today in the old world of how you build the startup, should you pivot to AI? Should you how do you see that going? Like, should you use AI? I have I have two answers to that. The straw man answer to that is that, no, you should not pivot to AI. You shouldn't do that just because it seems like a good idea. But, yes, you should almost absolutely be working on something that's using LLMs at the heart of it today. What's in the AI company anyway? Exactly. What what does what does it even mean? I I think anyone that's using LLMs either internally for to to make things more efficient. I've got a company that I've that I worked with a a few batches ago that's literally building an HOA management company. Just like straight up. We are an HOA management company. We we sell to condo boards and then we do all the stuff for them. But they're using LLMs to make everything more efficient internally. You know that people if you are Mhmm. Building a cloud company, obviously, you're going to use the cloud. Same thing with AI. It doesn't make sense for anyone creating a new company today to not leverage AI within their company. Right? That's exactly right. And it's in the early twenty tens when a lot of software businesses started moving out of the cloud, there was this moment in time as a founder where there were just a lot of good ideas lying around because you had the opportunity to replace some legacy piece of software that was on prem. And I think we're in a similar moment right now where there's just a lot of good ideas where you can take some existing piece of software and build it from scratch with AI and native part of that and it's going to be much better. I I've talked to the CEO of Workday about this and he was previously at PeopleSoft and just saw this in February or whenever, like, okay. PeopleSoft is huge, but now the cloud is here. Someone's gonna build a whole new version of all the same stuff. Just have it be based in the cloud, and it'll be better. And similar moment now for a lot of companies. I think like this if I look back on my time, I I I arrived here in 02/2007, roughly the same time for for you. When you had these start with your startups, the mobile wave had not happened yet. Like, my first week of YC was Steve Jobs presenting the iPhone. And if you haven't lived through these cycles, it was hard for me to kind of imagine what would happen from that week on, but our company was too early. Like the apps didn't come until summer after and the permissions that we needed didn't come until summer after that, 02/2009. But the following five years were just like that period when all the interesting mobile companies were generally started. Like a lot of the stuff that we now use, and I remember in my match was Joe, and Joe sat next to me at a hackathon and was like, are you working on? He's like, I'm building Facebook's first mobile app. You can now build apps for the iPhone. And it was like, oh, cool. That was my reaction. It wasn't like like anything more than that. But I if you look back, I realized we were right in the middle of the beginning of that And I think because I saw that, or we all saw that, we now see this. And a founder who didn't see any of the previous cycles that actually was real, that, like, had a really big impact, they can't see the they they might not be able to see the the cycle in the same way. Big companies generally are preceded by big technology shifts. And, this one happened two years ago, and we're very increasingly getting more intense throughout every month. And whatever we saw in the beginning of last year, it's like we've we've moved much further already and there's a lot more things you can build now that you couldn't build a year in Africa. Mhmm. And you shouldn't fear existing big companies. They are going so slow. Like, look, Chattypiti is like two years old, like even a little more now, we still are like such a dumb Alexa. How come? Like it sounds like it's been obvious for two years that that's the way things change and still we are the we have the whole Alexa. So I mean, of course, it's going to eventually get there But, yeah, I would not fear big companies' speed of execution. Yeah. And I think there is that opens up so many opportunities for for startups. And I have a story that I find quite inspiring, actually. It's about a a company that applied to YC. I looked up the application yesterday. They applied in the fall of twenty twenty as Invest Better, and they were building a financial investment platform. They came into YC, and then within a month or so, they had pivoted, and they were building a productivity tool to help you with Zoom calls. This is right in the beginning of COVID, like in January of twenty one. We got used to being on Zooms 20 times a day, and it turned out that every time you had to open Zoom, had to go to your calendar, click and click and click and then open. And they're like, no, we just built something that you just like drop down and click one time and then everything is perfect. So they built that, it's called Superpowered. It became I thought it was one of the most beautiful consumer products or prosumer products I've seen in YC. They grow to thousands of of DAUs, and they grow to like a decent sized business that can probably survive survive themselves that were like, at least default live. But what happened is like a year went by and another year went by and they moved back to Toronto. They were here, they were here despite COVID. And in Toronto they were like, LMs are happening. Something is happening. We need you to do something else. And they took two very specific decisions in the beginning of last year, which one, to move to San Francisco from Toronto, and the other one which is to just try to stop working, well they tried to sell it but they stopped working on the previous product and then they wanted to build something new, and that company is now called VAPI, And the last fifteen months, it's not even eighteen months, they've grown from nothing to powering, a big portion of their voice AI companies in YC and outside of YC. There are other companies like, Plan and Retail as well, but but, I've worked closely with WAPIDS, that's the story that I know. It's doing incredibly well, and they are a very important part of of sort like, bringing this forward. And I think those founders just kind of saw the writing on the wall, and they then they did get the insight. Okay. If we move to SF and we kind of embed ourselves in this community, what's happening right now, good things will happen. And that was absolutely true, and and this company is on fire right now. I I think you raise a really interesting point. I've have some companies that I've worked with that were not working on AI ideas and things were not going that well. And they said, okay. We're gonna pivot to an AI idea. It also didn't work well. And and and in in those cases, the things that I think they did wrong were they, had kind of a very obvious approach. You know? We're gonna be customer support agent, company number 50, and didn't really have any new insights on what to do differently there. They didn't change up, any of, like, the environment that they were working in. They didn't embed themselves in any communities. They didn't get deeper into any customer insights. And so we're talking about all this AI stuff, and it's all awesome, but the fundamental things that the founders still need to do to, like, enable, the technology to to produce value for customers are the same. And if you're not doing that, just switching your idea over to something that makes calls to OpenAI is not gonna not gonna change your fate as a startup. You got a good point here. That's what you, discovered in Europe here. Like, everything in AI is happening in SF right now. Moving here is actually a great way to open yourself up to new ideas, to Mhmm. To new insights and to not be left behind and realize one year later, then voice AI is the thing. And and to know what the state of the art is Yes. And to know, like, okay. I can do this and to know that maybe that's not impressive enough yet. That's not useful enough yet. That's not gonna get a deal done yet. It's very hard to know what you're missing without actually going to experience it. So if you're not ready to move here, well, at least come here for three or four weeks. Yes. And like, camp out here, go to go to the hack athons that you wanna go to, try to meet with other people. Stay at Gustaf's house. Yeah. And just try to embed yourself in this community that is now very apparent. And I remember I used to get asked this question in the past, it's like, why is it so good to be in the Bay Area? And I gave this example and I worked at Airbnb and I was like, well, wanted to learn how to be good at SEO. And we're like, who is really world class in SEO in the world? Pinterest. Where are they? Oh, they're downstairs. So we walked downstairs to the Pinterest and we talked about them about SEO. We learned from the absolute best team, and I think that is the state of LMs here right now. Like, go next door or three doors down, and then you have the company that's probably the best at the thing that you wanna learn learn about. And imagine if you're, like, in Chicago or someplace like that, and you have the same insight. Oh, I need to talk to someone at Pinterest, and you're lobbying emails across and liking someone on LinkedIn and all this stuff, it's just not gonna happen for you the same way. It's not gonna happen. And I think the advice could not be more clearer, I think, now compared to any time in the last ten years that you should come here at least temporarily, but, like, you should consider being booming here permanently. So it sounds like we've we've uncovered a one two punch of, yes, you probably should pivot to AI with some caveats, and you should come to the Bay Area so that you do it in the best way possible. Should Should we talk about other other applications of AI of things you've seen? Like other parts of the world where AI is having a big big impact and no one has a good example? Yeah. Sure. So just looking at the last batch, the first ever fall batch that we just completed, a few of the companies I worked with. So there are two companies that are working on different problems, but they're solving them in a in a similar way. And so one is a company called Replxica. They're building software that automatically translates your UI from one language into another. So they automated AI localization. And another is called Gecko Security and they are an AI security engineer. And so both of these companies are taking some previously specialized skill and automating it with AI, putting it behind an intuitive interface, and giving software engineer software engineers the ability to manage this independently as part of the release cycle. There's another example of a company I worked in the last worked with in the last batch who all worked at an insurance technology company before this. And because of that they had a lot of exposure to the workflow that Medicare Advantage agents go through selling Medicare Advantage insurance plans. And this is a relatively obscure workflow. Most software engineers don't have much experience with that. But because of that experience they were able to build an AI copilot for Medicare Advantage insurance agents and it's doing very well. That's interesting. Like I have a whole framework in my head for for for how to go after the health care section. Like you said, most people that are building for health care have never had a job in health care where you actually get come across these inefficiencies. Yes. But The US healthcare system, I believe it's like something like $4,000,000,000,000 in spend, of which 1.3 or 1.4 is admin. If you look at the companies that we funded in YC, it seems like much of this admin is legacy software system plus a human who's moving data from one system into another. And that's what most of this actually is. And that's shocking. And we have more admins per doctor in The US than many, many, many other countries in the world. And I think it has a combination of, like, we have lots of softwares and lots of people, and then we have incentive structures that kind of everyone needs to make money in this system. Now, most of the tasks are fully automatable. So there's a company that's doing pre auth, Tivara, and they are basically taking the information from the doctor plus some other information, and they're summarizing it, and they're automatically creating the pre auth request that goes into the payment portal. And you can now do this fully with LMS. And that's just one out of dozens and dozens and dozens of these manual repetitive tasks that happens as a result of our inefficient health care systems. We basically are moving things between one legacy system and another. Like, these are both software portals, and the human is translating the information in between. With agents, you can do almost all of these tasks. I'm pretty convinced that healthcare is not just front desk scheduling. It is, like, every single back office task. But founders don't know what these tasks are. Mhmm. So the challenge I have to someone who's looking for an idiot healthcare is, like, go to your friend who works in this and go and sit next to them and ask them how to do their job and watch their screens, and you will get ideas right away. I'm very convinced that like you don't have to do spend more than like a few hours in front of their screens and see what of their repetitive tasks can be done better. You can go even further with health care. You can actually help patients too. I have a company, Zisbatch, who's actually using voice AI to call patient in between visits Mhmm. To make sure they are doing well and possibly to schedule a new visit when necessary. It's very simple but my god, for the practice, first, more business but also it's a way better experience for the patient. Awesome. So those are some great examples that we just heard about of companies that are using LLMs to do awesome stuff and to grow much faster than we've been seeing companies grow for some time here within the YC portfolio. I hope that you listening and watching this maybe have gotten some ideas that can encourage you as you're thinking about whether you should change idea, whether the idea you're thinking of starting is on the right track, whether you should stay where you are, whether you should come here to the Bay Area. We just see a ton of opportunity here, and we see a lot of things happening that are tremendously exciting to us and our jobs. This has been a really fun, fun time to be group partners here at Y Combinator, and we hope some of this is useful to you. Thanks so much for watching, and we'll see you on the next office hours."
  },
  {
    "name_video": "How To Build The Future: Parker Conrad",
    "description_video": "Parker Conrad is the co-founder of two unicorns and has one of the more dramatic startup journeys in recent years. In this interview, he discusses his origin story, the lessons learned from his first two companies, how AI is changing the game, and why he thinks the future will be defined by \"compound\" software startups.",
    "related_categories": [],
    "page_url": "/library/M2-how-to-build-the-future-parker-conrad",
    "youtube_url": "https://youtube.com/watch?v=FwD0wqwUjAI",
    "mp3_file": "downloaded/How_To_Build_The_Future:_Parker_Conrad.mp3",
    "mp3_content": "Out of that conversation around founder mode, remember thinking to myself, like, you know, going all the way to the ground floor, particularly when something's broken, is like, that's the way to go. Like, you gotta just really get your hands dirty, get in the weeds. AI is gonna help companies, like 2,000 person companies be run more like 200 person companies and 200 person companies be run more like 20 person companies. You need to make your business so good. It sort of doesn't matter whether you fit into whatever mold or construct the VCs are looking for. Welcome back to another episode of How to Build the Future. Our guest today is Parker Conrad who's created a 13 and a half billion dollar company called Rippling. So thanks for being with us. Well, thank you, Gary. Rippling is synonymous with HR, IT, if you want payroll, if you want to understand what's going on with your business. That's really what Rippling is, it's the first thing people turn to, you know. How's it feel right now? I like that the business feels like it's more predictable and steady. Now, I mean, we're still growing very quickly, but, you know, at at some scale where it feels like, you know, we have we really understand what we're gonna do a year into the future as opposed to early on where it's kinda like you don't know what's gonna happen next week and that's always a little terrifying. Yeah. Why don't we start off at the beginning? I mean, you know, what were some of your first memories with computers and tech just, you know, even as a child starting out? I mean, growing up, I didn't do that much that was super entrepreneurial but I definitely, like I kind of figured out like how to use a computer really early on and I had, I guess like just made a bunch of money in like middle school and high school like fixing people's computers. There was like, you know, friends of like the family, like other like my parents friends that like needed help like getting a computer set up or figuring out how to get online. You actually were really really into the Crimson and so much so that it actually took a drain on your studies at Harvard, didn't it? Yeah. I spent, so when I was in college I started working on the newspaper there and got just like really into it and spent all my time at the newspaper, didn't go to class and they didn't like that very much. So I ended up getting kicked out and then came back and graduated after that. You know, a lot of what I liked about that experience was this sort of like esprit de corps of being on this, in this group of people that was like taking on the administration and you you know, really like going out and taking on sort of entrenched powerful interests, that sort of thing. And and I spent a lot of time after college trying to get back to that sort of feeling. I decided kinda pretty early on I didn't actually wanna be a journalist. But I sort of found that again when I was doing startups. You're taking on sort of usually some big entrenched incumbent of some kind. And that was like, okay, this felt like that experience that I had working on the newspaper in college. From there, you got a degree in chemistry, you know, you're in a biotech firm in LA. You know, when did you decide to pivot over to entrepreneurship that you could start a company? Because it sounded like you had a lot of things figured out at the biotech firm. I didn't get a lot of job offers after graduation and the job that I got was working at Amgen in Los Angeles. I had a really great time, I was really enjoying myself, but it was also kind of like this very slow career progression. And one of my roommates from college who was working for Amazon came to me and wanted to start a company. And he was like, hey, let's do something. You know, I'll move down from Seattle. You move up from LA. We both moved to San Francisco. We did exactly the wrong thing because we decided to start a company and then we started figuring, trying to figure out like what we were gonna do. We came up with a bunch of ideas that sounded like good ideas but were actually terrible ideas which is usually what happens when you when you decide to start a company and then try and figure out what you're gonna do. I did it because I felt like, man, my career's like, you know, it's going well, but, you know, I'm not gonna it's gonna be a long time before I get anywhere in in my current job. And if if Mike does this and I don't, I'll be like an old man kicking myself for not having taken that leap. And so we did it and then it was like seven years of slow grinding failure, of just like rejection after rejection after rejection with like nothing working and pivot after pivot after pivot. What was the original idea and how did it change? The original idea was that it was right around the time that Wikipedia had really taken off and we were like, okay, we're gonna be a wiki for stock research and we were like, here's this like sort of really valuable vertical, People love talking about stocks. We get a bunch of people to produce really valuable content for free. Wasn't super clear why people would do that, but like, hey, they were doing it for Wikipedia, so why not why not do it here? And and it it just like never really took off. It never really worked. I think a lot of consumer businesses end up being kind of random that, you know, whether things sort of work or not feels like very much outside the control of company. It's one of the reasons I hate consumer businesses and I think a lot of entrepreneurs that start in consumer end up discovering that and just like completely pivoting their careers to work on b to b as a result of that because it feels a little less random which is what, you know, I ended up doing with my next next company. I mean, there are lots of things from that era that did seem to work like, I mean, I think Reddit was then or Digg or these other things. Mean, they were all good. All UGC, Yeah. And so, you know, it might maybe those entrepreneurs knew they knew what they were doing and we didn't, which actually, that's probably what it was. Sometimes when I look at consumer companies, it feels a little bit like, hey, you know, there a bunch of businesses that are all going after something similar and why one of them takes off and one of them doesn't is like, it's a lot of like, sort of butterfly effect of little things, small differences in the starting conditions that lead to this one working and that one not working. So it's just a little bit less predictable. Yeah. I mean, it sounded like that was one of the bigger challenges that you had to face was, you know, pitching 75 investors back to back on this idea. We raised a small amount of money upfront and we actually, on a pitch deck with nothing built, we raised a 2 and a half million dollar seed round at a 7 and a half million dollar valuation. And I was like, oh my god. We are rich. Like we This thing's worth 7 and a half million dollars. I was like adding up, you know, how much of it I owned and like I mean this was off of a pitch deck, right? It was very exciting and heady and it was like all downhill from there. You know, nothing that we did ever really worked and we kept pivoting and changing the story. The company's still around. It ended up being renamed Sigfig and it, right now, I think they make really like back office financial software for banks. And credit to my co founder who's who has stuck with it for, you know, a long time. So we pitched like seventy seventy different investors that all told us no. And went out, you know, really in in 02/2009 at the worst possible time. No one was investing in anything but they were definitely definitely not investing in subscale consumer driven advertising content plays. That was like the worst place to be of all. And so we were definitely not gonna raise money from anyone. But we didn't know that and so we were dutifully like marching in to, you know, like all these different And we thought like, well, to raise money we just need to pitch more investors which was absolutely the wrong idea. We should have taken a hint after we talked to two or three and nobody was interested that like it wasn't gonna work. You know, having gone through that experience, all of these investors, they always they always had something that they were really focused on. Like, you know, there was there was a flavor of the month, like, you know, what is there like a, is there a Facebook app angle to this? Is there What's what's your social local mobile thing? And those were kind of like the the sort of generative AI, like web three augmented reality kind of like memes of the day within the investor class. But it it sort of changed every six months. It was like a different, like and even I think you see that today with AI where there's like, at first it's all about these sort of, you know, wrappers around sort of GPT and then it's like, oh, that stuff actually that's not gonna work at all and it's all about data gravity. And then it's like, you know, people keep sort of moving around. But, you know, investors sort of shift their view of what's gonna work every six to nine months. And I was like, jeez, it takes it takes years to build a company in these spaces. And so, there's no way, you know, the attention span that investors have on this stuff is always so much shorter than the the time that's required to build a business. And so I I walked away from that experience like deeply cynical about about fundraising. Do you think a lot of startups die actually literally because of this fickleness or this you know, sort of trend chasing behavior? I don't think so. I think the answer is it doesn't really matter what investors think. You can't you can't focus on sort of the thing that they're excited about in the market. Like, you have to be so good that they can't afford to ignore you. You know, because I mean, a lot of times people ask me for advice about fundraising and, you know, I usually think that that people should not spend any time trying to optimize for like a fundraising outcome and like, you should just basically wait until you're getting investors that are emailing you term sheets that are signed with like a blank for the valuation and they say just fill in the valuation and send it back to us. And like when they do that, like then it's time to fundraise. And like until then, you should probably just focus on making your business better and stronger and if you can make your business really good, then, you know, things will happen at that point. And it was really in that context when I left SIG Fig, you know, and I started started Zenefits that, you know, I sort of thought, man, if I can just like, you know, I can make so much money as an insurance broker that, you know, I had this idea about sort of doing all in one sort of HRIS with, you know, that also managed like insurance and benefits and like a bunch of other things that were actually completely separate for companies at the time and that were a lot of headache that were mostly offline and a bunch of administrative work. I was like, if I could do them all together, I could really just make this so much easier and I can make all this money on the insurance and and it's like, oh man, if I can just get a few hundred thousand dollars to start off, then I would never need to raise money again and I don't need to talk to any of these VCs to kind of get off the ground and that became the impetus for doing YC. That it was like, okay, well, it seems like YC has this program that you know, like you know, sort of it's pretty reasonable to think that I'd be able to at least at least get that done and then just like never think about this again. I remember reading your application and saying, yes, I want to meet you. That's awesome, well thank you. But that, know, so that was why I did YC and that ended up really not being the right reason to do YC. Like it was, I think it's the reason that a lot of people decide to do the program. The real reason to do it was just the intensity of the program and how much it sets the company up for success by just getting you in this groove of really delivering and executing and a lot of urgency in the business and like that that ended up being the most powerful thing about it. You know, I remember meeting with PG and and I was a solo founder early on and then my co founder joined a few weeks into the batch. And I had very little built. It was like a prototype but there was a lot still to build and I told PG, I was like, okay, I've done the math and I think we can get something live a week before demo day and have like a week to kind of try and get customers before demo day. And PG was like, that'll never work. Like, you've gotta figure out how to launch. You know, this was the January. You've gotta figure out how to launch the February. And I was like, that's in like three weeks. Like, there's Yeah. There's just no way. And PG was like, well, don't know what to tell you. You're screwed then. Like, don't see, like, you might as well give up now and go home. Like, if you can't if you can't do that. And I was, you gotta understand, I was coming off of seven years of failure. Yeah. You know, I remembered, know, I was like, okay, this is this time it's gonna work. And suddenly two weeks into it, it's already over. And I remember going back and we sort of figured out a way by hook or by crook to launch, it wasn't the first week of February but it was the February, it ended up making a really big difference because, you know, we launched a few weeks ahead of another competitor in the market that, you know, that and the TechCrunch article about Zenefits was like, oh, this interesting company doing, you know, online health insurance and a bunch of other things and and then this other company launched a few weeks after that. Was like, what's this weird company that's trying to copy what Zenefits is doing? And so, you know, getting that pace and urgency, you're just making it a part of the fabric of the company really early on is like a really a really hard thing to do when you're starting a company because it feels a lot like being unemployed. Like you kinda start out and you're kinda like, well, okay, like, what am I gonna do today? And it's like, you don't have any customers. If you don't get anything done, nobody really yells at you. You know, the expectations are very unclear. A lot of people are coming from an environment where there's a very clear deliverable every day, you know, on what they need to do for their job. And YC is great at just injecting the right level of urgency and pressure into the system to kind of get you going early on. Zenefits, at the time, you know, coming out of YC, one of the fastest growing software companies of all time, how would you explain that first meteoric rise? I think the sort of insight, the thing that really worked at Zenefits was this idea that like, hey, there was a lot of work kind of like getting set up with all of these different things that you needed for your company. And then they all kind of needed to talk to each other in some way but didn't really. And so that you ended up having to do that manually. You know, whether it's, you know, going to the insurance company and figuring, okay, this is the list of people in my company and then, you know, these are the plans that they're selecting. But then going back into payroll and figuring out, you know, what the deduction should be based on what they selected and that if you just did a lot a lot of these seemingly different things in one system, you could just cut out a lot of the administrative work involved in running a business. That was the insight that really worked for us. But there were there was this kind of magic button to hire an employee and then they sort of got set up everywhere. And that that very much became the sort of key insight behind Riplane. That Riplane is like really a continuation of Zenefits from a product perspective and then it was like, hey, for the same reason you want this one one place to manage, you know, payroll and benefits and a few other things and offer letters and stuff like that, You actually also want to be able to ship someone their computer or get them set up with access to email and Salesforce and GitHub and and like a bunch of other stuff around your company. That, you know, over time that became what I now call like this idea of like a compound software business that, you know, a lot of the sort of deeper problems within organizations can't really be solved by very narrow point solution software products. And that if you can build a whole suite of really seamlessly interoperable applications, you can build much better products for businesses. And that that sort of ultimately became like the sort of thesis of Rippling is that we should be building software in that way rather than in the way that we've been building it, which is to sort of focus very narrowly. And that really came from insights really early on in Zenefits. What did product market fit feel like? I mean, that's one of the more common questions when people try to release a product. They're like, is this it? Is this it? You know, if you have product market fit, are you asking yourself that? We would always have like We always had plans and we always had, you know, five ideas that we thought would work, you know, that we have things we could try to try and get customers or get users. And and those five things, like four of them would just completely fail And one of them would mostly fail but maybe there was some glimmer of hope somewhere on the edge of that idea that would lead us to pivot and say, okay, we're gonna do something, we're gonna build something around that for the next six to twelve months, then we're gonna launch again and that's gonna work and we'd have five new ideas. And it was just that repeated every year for like seven years. You know, there's a lot of advice out there to kind of stick with it, keep going, don't give up. And I think it's terrible advice. I think if it's not if it's not working, like give up immediately. You know, it very rarely happens that people, you know, with something that's not working end up pivoting the business in a way that eventually it starts working. You know, there's always that Airbnb story. But most of the time that's not what happens. And so with Zenefits, it was the exact opposite. I mean, we, you know, we had sort of five ideas of things we thought would work and they all worked unbelievably well. Just unbelievably well, like wildly exceeded every expectation that we had. And we would try one or two things that we thought probably wouldn't work, you know, but let's give it a shot. And like those things would work unbelievably well as well. And so it was just this sucking sound with the market kind of like pulling the product into existence because it was so clearly like, you know, what everyone wanted and how they wanted this to work. That's how you know if something's working and that's, you know, obviously I think if have that then you wanna keep going. If you don't have that, you probably wanna start over somewhere else. So when Zenefits was sort of really hitting, what sort of growth rate were you looking at both from the revenue side and from sort of growing the team side? We kind of exited YC like six weeks later with like $200,000 in revenue which felt like an enormous amount of money at the time. And then by the end of that year, we were at like like, you know, I think about 1,000,000 in revenue. Zero to a million in a year. Zero to a million in a year and felt really good. And then the next year we went from one to 20. And That's really fast growth. That was very very fast. And then the next year, our plan was to go from 20 to a hundred. And we ended up going from 20 to 65 and I got fired basically within a week of the end of the fiscal year. And there was some weird stuff about this. I mean, obviously, you've talked about this very publicly. Yeah. From my perspective, I remember you know, talking to you very briefly that, you know, there was a CEO transition happening, but then there was a shift. So normally when there's a CEO transition, there is a mutual non disparagement, meaning, hey, we're gonna set the company up for success. You know, I'm moving on, but David Sacks is the new CEO, support him, everything's all good. But, you know, sort of at the eleventh hour, know, things took a turn. Mean, the sort of seeds of the kind of downfall of the company were that, you know, the every things that were working so well for us, top of funnel stopped working. Mhmm. And there are a bunch of reasons for that. But it was right after people had invested at this crazy high multiple on, you know, underwriting an enormous amount of future growth that suddenly was not materializing. And it was in that context that a lot of this, a lot of these compliance issues came up. And I think people got, like investors got very nervous and sort of lashed out a little bit. And then I ended up getting forced out. David came in as CEO and I think there's a world where that could have like worked out for everyone and you know, the company could have moved on and you know, would have been like, okay, you know, well I'm a major shareholder, that's great. Instead, what happened is like, you know, I mean, David really sort of, he hired a sort of a comms person that he works with a lot, this guy named Lanny Davis. And they just focused on like attacking me like over and over and over again for like six months and it became this huge thing. And David, well, he wasn't just attacking me, was attacking the company that he was the CEO of. And so that, I think that really drove the company into the ground in a way that, you know, I think they could have done quite well had they not done that. Yeah, that was wild to see that, I mean, even maybe from your days as a journalist, it's sort of this is the matched pair to that. Know, if you get a story out and a few publications publish things, you know, some of which are totally untrue, that just becomes the thing that everyone repeats. You know, that sort of narrative control, you know, pretty potent. Yeah. No, was was eye opening and like, I mean, some of it was I think, I mean, there was definitely like a real pile on, you know, for a long time. But also like, I just wasn't, you know, I was under all these legal restrictions. I wasn't allowed to talk about it. You know, and so it was this very one-sided thing that was, you know, like I was this thing that I watched kind of helplessly happen, you know, and I wasn't really talking to reporters in the same way that, you know, David and some of the other folks were. And so it was just this one-sided thing that was, you know, being, I was just getting hammered and hammered and hammered. And took a long time to sort of crawl back from. I mean, it was amazing, you know, really, you and, you know, everyone at YC like really invested in rippling at a time when it was extremely unpopular, and and now it feels like, oh yeah, you know, of course, like successful company blah blah blah, but you know, it wasn't at the time. Yeah. I remember that being a really big fight, and then some things are really worth fighting for, So I had seen what it was like to work with you at YC. I saw that you had created know, Zenefits would not have existed or created any of that enterprise value without you. And to see what they did to you, it was deeply unfair. And, you know, it wasn't just me and you. Was also like, I, you know, I knew locks. I knew tons of your executives. And it was just kinda clear that, you know, the reality is something that just wasn't what was out there in the press. And certainly, the narrative that had won out there was exactly the opposite of what you and I lived and experienced. So it was a real honor to be able to just say, hey, you know what? This is actually what happened. Well, thank you. You sort of took a little bit of a break, but then almost immediately realized you had seen the inside of the idea maze and you had gone so deep into a 65 mil ARR, like you knew what to do basically. And at that point you said, I'm just gonna walk all the way back. I'm gonna take all the twists and turns. I'm gonna skip all of the sort of missteps and the dead ends that we did along the way, and we're just gonna skip directly to where we were before. Yeah. But we're gonna do it 10 times better. Yeah. I mean, you know, I had either the advantage of or the misfortune to build the same company twice in some ways and so not a lot of entrepreneurs get to sort of go back and rebuild. And I would advise everyone not to go back and rebuild because it usually means that something has gone very very wrong. But because of that, I you know, I I felt like I had a lot of insights about the market and what what was needed and very little self doubt, you know, this time around versus the first time when, you know, you have a lot of ideas and a lot of hopes and beliefs but like not much like certainty around exactly how things are gonna play out. And the second time around in this particular space, I felt like, you know, I just had deep conviction. And I remember talking to Prasano, who's my co founder at Riplane, where he said, well, why do you wanna why do you wanna do this in the same space that we worked in? He had worked with me at Zenefits. And I said, look, there's a hundred billion dollars just like sitting right there on the floor and nobody can see it except for us. Everyone's just walking by oblivious to it and all we have to do is like walk over there and pick it up. Like we know exactly what we need to build. We know exactly what people want. We know exactly how to make this work. And at that point, I think, you know, like it like I thought when I left Zenefits that David was going to continue and make Zenefits extremely successful. And then it became clear in a few months that that was not what was gonna happen, that it was just being driven right into the ground. And so I, you know, like at that point I had sort of decided Zenefits was gonna go to zero. I don't think they had decided that yet but like that that ended up being what what happened. And so I was like, look, they're gonna go to zero. All these other companies are not gonna be able to sort of get there. And there's this thing that I sort of wanted to kind of exist that I thought we were building at Zenefits that ended up not happening and then, you know, it was here was this opportunity to go do it. And for a variety of reasons I really thought that employee data was gonna be not just, it wasn't just gonna be this like HR thing, it was gonna be, you know, sort of like the center of just a lot of business software in a much bigger sense of the word that this was gonna be. If you understood the org, there's a lot of software that you could build for businesses around that sort of key understanding. I guess the other thing that was sort of unusual is I think you spent maybe a year and a half, two years building the software and sort of taking a different approach. You know, Zenefits, you know, you're a little bit blitzscaling the sales team, customer support, customer success. And this time around, like, I remember that you even took a vow to say, we're not even going to hire Yeah. You know, anyone except engineers and product people for that first segment of rippling. We I mean, so it's weird because I think this is like a good thing for most people to do. I think, you know, I think most companies should launch really early on because you can get kinda get lost in the wilderness. I had this point of view where I knew where the market was heading but I was so far behind. It was like, you know, Zenefits had hundreds of millions of dollars and, you know, a thousand employees and all these engineers and like, years of head start. And it was like, and now I'm like trying to catch up and surpass them but I'm starting with nothing. I have no money and like, it's just me and persona and like, how could I ever do that? And so we sort of said, look, we've kind of really gotta try and leapfrog. You gotta kinda skate to where the puck is going, and we knew exactly what we needed to do. And most people, like, you can you can believe that and you're probably wrong. And so it was just this moment of conviction and we happened to be right because of like our past experience. And so we spent like two years building with, you know, mostly just an engineering team. There were some great like early, you know, it wasn't just engineering but the thing that we had was no operations and no customer support because that, I thought, had been the critical flaw of Zenefits which was that we sort of scaled too much on the backs of, you know, operations and manual work and it wasn't really software end to end. And so we wanted to just like avoid that sin that we had at the last company and and do it and build it in this very different way. And sort of, you know, it was gonna require this large build and a lot of capital and a lot of engineering effort to kinda get there, but it ended up working for us. The classic startup advice is, you know, do one thing and do it extremely well. You came up with this alternate term that I think describes Rippling pretty well. It's the compound startup. It's not merely just this one thing. It's not just laptop leasing and IT. It isn't just identity. It isn't just, payroll or benefits or it's all of these things working together. Yeah. And there's something very sort of almost heretical about, you know, American startups tend not to do this. This almost resembles Asian startups. Oh, interesting. Yeah. No, I've heard that before. I think it actually resembles a lot of software companies that were built like maybe more than twenty years ago. And so if you look at, you know, companies like SAP and Oracle and Microsoft, they actually look like compound software businesses. Maybe, you know, Salesforce to a certain extent as well. And what happened is I think there was this moment in time where it really was possible to sort of do this one narrow thing because, you know, there was just so much greenfield territory in software when sort of everything shifted from on prem to the cloud. And you could go out and you could do this really narrow thing and turn it into a SaaS company and, you know, it turns out that almost all of these things ended up, at least for a period of time, being worth low single digit billions of dollars. And it was really easy to find like a niche. And the problem is that it's not the sort of ultimate sort of optimum strategy. And eventually, all of these markets got crowded with companies that were just doing this one narrow thing. Point solutions. Point solutions. We call it point SaaS. And then, you know, and actually there are a lot of disadvantages to that approach. And one is like the types of problems that you can solve for customers tend to be much more limited, you know, if you're so constrained to this one narrow domain and a lot of the bigger problems that that companies have end up being problems of like business process management and decision making and coordination within the company. You can actually just wipe out a lot of work and make things work function much better if you can take on a whole host of sort of interrelated applications and build one comprehensive solution. And also point SaaS companies can't afford to invest in in the sort of deeper types of research and development. Like, you know, Rippling spends an absolute fortune on R and D and it's on things that sort of cut across any one category. It's like, you know, analytics capabilities and approvals and permissions and workflow automations that ended up end up being useful across all of the applications that we build and most of our competitors just can't, they can't go as deep on that stuff. And so there's the theory of like the compound software business is that there's this island of product market fit that's kind of over the edge of the horizon line that's sort of harder to get to. But if you can build, you know, multiple parallel applications at once, you can get there and and it actually ends up being a much more powerful type of product market fit that's much harder to displace at that point. But I'm not sure that it's like good advice. Like there are a lot of companies that reach out to me. They're like, hey, where do wanna like build like a compound startup? It's actually, I think, a deeply cynical view of software markets because like, I think it's possible that compound software businesses are the wave of the future and also like, there will be three of them. Mhmm. You know, and there's not, it it is actually an argument for many fewer businesses, but much larger and more successful ones if that's like the shape of software markets in the future. I remember, I think, your very first pitch to me for Rippling, there was the kernel of this in that you didn't want to be just one particular part of the software stack. And if anything, I remember you were writing memos already right off the bat. And one of those memos actually involved saying, if you're only one of these things, you know, you're $10.15 dollars per user per month. But if we add all of these things together, it adds you know, not just tens but hundreds, you know, many hundreds of dollars per You just capture more wallet share. Yeah. One of the arguments I think in favor of this approach is that, you know, it's just sales and marketing has gotten harder and harder and more expensive and less efficient for software businesses. And you see this at every stage but, know, in the public markets, you know, over the last five years, public companies are spending 50% more on on sales and marketing but they're adding 10% less in new ARR, like with that increase in spend. And so there's just like fundamentally the business model for a lot of software is just broken. It's like the competition. There's like too many businesses going after There's too many businesses and then there's Infinity AI Slop. So some people say AI SDRs are gonna replace everything. Some people say AI SDR is actually gonna destroy SDR. Right now, I think AI AI SDRs are mostly like don't work. You know, they're sort of tantalizing hints but like they can't actually do the job well. But the second that it flips and they can, it will it won't have the impact that people are hoping. It won't it won't be that like, oh wow, now sales and marketing is easy. What'll happen is it'll just destroy outbound. As a channel, it will cease to work and cease to function because it'll just get so overwhelmed at that point. How should people be thinking about AI, you know, whether it's enterprise software or in your space? AI is gonna help companies, like 2,000 person companies be run more like 200 person companies and 200 person companies be run more like 20 person companies. Because like a lot of running a business as it gets larger, there are these, you know, enormous abstractions that you put in place. Like I have a one on one with my CTO. I'm hoping that something about the conversation that we're having that week is gonna lead to an engineer making a different decision. Like an individual IC making a different decision six months from now. I don't understand like everything that's going on, you know, with every employee at the company in part because my context window's not large enough. Like I just can't see everything. I can't go and observe like everything that everyone is doing. But like AI can, and so I think that the fact that these systems can read and their context windows are so large is actually much more powerful for b to b software than the fact that they can write. Like the generative AI is actually really a misnomer. It's actually the it's the sort of the ability to ingest all this information. And so, I mean, the thing that we launched is an an basically an AI performance management feature that, you know, predicts, you know, that tells you based on an employee's first ninety days of work product, it looks at their pull requests, it listens to their sales calls, it looks at the support tickets, and it tells you, is this person likely, based on what's happened so far, are they on a glide path to being this enormous success story? Or are they someone who's really struggling and maybe you need to intervene in some way? And and gives you that signal really early on when there's still time to kind of do something about it. So I think that, and there are a lot of flavors of that within a company whether, you know, it's on, like a lot of people think that in the CRM space that AI is gonna like start doing all of the CRM homework for sales reps and I think that is completely wrong. You actually want the rep's opinion about whether a deal is gonna progress or not. And you don't want the AI to decide that for you. Like a lot of why people do the CRM stuff, it's not just administrative work. You're trying to forecast and you're trying to use that forecast to intervene so that the deal's more likely to close. You want reps to sort of assess who's the decision maker on this deal and is this deal gonna close this month or not. And then separately, you wanna have a second opinion from the AI that's listening to all the sales calls on like, who do they think the decision maker is? And and, you know, who, you know, do they think the deal's gonna close this month? And and you wanna flag for management when those two cases disagree because it's the anomalies within the organization where you can say, look, if you're an executive, you can't look at every deal. You can't spend time with every new hire. But if if this system can tell you if you only have time to look at five deals or five new hires, like these are the ones that you should look at, that's really powerful. The other thing that I think is gonna happen is like, I think that AI is gonna lead to a lot more verticalization of software, that there's just, you, companies always have these very bespoke needs and I think with AI you can configure the software much more precisely for specific industries, specific businesses, specific needs. I think one of the interesting things is can you get no code, can you get back to the promise of no code software development where you can actually get a little bit further without sort of needing to be super technical. And so that's the other thing that I think is just like, I think there will be a Cambrian explosion of like every software, you know, software will be very precisely configured and tailored to specific companies, specific businesses, specific industries. Brian Chesky at a recent alumni event went for two hours talking really just off the cuff, but also very personally about what it was like to even have the company he started really ripped away from him by the organization, by sometimes his very direct reports. I guess what's your take on founder mode? Does that resonate with you? And then in particular, think it's interesting to talk about that with your observation about, you know, hey, the rocks can talk, it's not that interesting that it can talk. You know, actually what it can do is read. Rocks can talk. Yeah. It's more interesting that they can read. Yeah. And then as a CEO or as the founder, it can read for you. And so your context window grows with how good, you know, your data is and how good your context I think that's gonna be the powerful thing about LLMs inside of businesses is that it can flatten organizations and and and give executives and managers like just a larger sort of window, you know, that they can into what's going on. I wasn't at Brian Brian's talk and I I I sort of agree with the concept that, you know, as as an as a founder, you wanna, you you need to be able to go really deep and and your superpower is often that you can go all the way to ground on a topic. And I think particularly when things are not working, it it's kinda like if something has stayed broken and escalated through every layer of management up to you in inside of a big company, I don't think you can fix the problem top down by managing down. You you like, you kinda need to go all the way to ground and go, you know, review the support tickets. Like, listen to the sales calls. Go like, do the job on the factory floor, you know, for for some period of time until you understand the problem. So don't go here. Don't stay up here. You gotta go Go all the way down. All the way down. Yeah. And I agree with that. I also think that like, you know, I think there's a risk that like the founder mode thing gets misinterpreted in some way it sort of could easily create a lot of excuses for just kind of bad behavior where people like, oh, like founder mode, like I don't need execs. One, I think you need really good executives and you don't wanna do the founder mode thing unless something's broken. You know, like you kinda want, cause you can't do it everywhere. Like you need people to help you run the company. And like, and so you wanna do it when something is broken and when it matters. And if it doesn't matter or if it's working, it's like great. And you need most things to work like that most of the time. So maybe to end, I mean, you've taken us on a journey from Sigfig to Zenefits to Rippling. You know, how are you feeling? Is the job done? Are you just getting started? You know, where where does this go from here? The idea behind Riplane is that business software should be built in a very different way. That it should be built, you know, with this like data layer and sort of a lot of like abstracted out sort of platform capabilities and then you kinda wanna build this Lego system for then building applications and that that's a recipe for building better software. And I think like, look, the company's doing super well but, you know, there's there's a long way to go still on that on that journey. Like, the jury's still out. A lot of business like, most software businesses are taking the other approach. The jury's still out on, you know, which sort of way of building software is gonna win out on this stuff. Well, we're gonna find out. With that, Parker, thanks so much for being Cool. Thanks for having me."
  },
  {
    "name_video": "Building A $2 Billion SaaS Company: Lessons From A Two Time Founder",
    "description_video": "Two-time founder Rujul Zaparde knows a thing or two about resilience and learning from failure. In this conversation with YC's Dalton Caldwell, Rujul demystifies the world of enterprise sales, shares his hard-earned lessons about scaling a business from zero, and explains how founders can use first-principles thinking to better approach the challenges of building a startup.",
    "related_categories": [],
    "page_url": "/library/M1-building-a-2-billion-saas-company-lessons-from-a-two-time-founder",
    "youtube_url": "https://youtube.com/watch?v=rjyJsbUunQ4",
    "mp3_file": "downloaded/Building_A_$2_Billion_SaaS_Company:_Lessons_From_A_Two_Time_Founder.mp3",
    "mp3_content": "I was a first time founder. Right? I I dropped out of school. Like, I cared a lot about what others thought, what my team thought, what leaders thought. Right? Like, oh, well, people quit because this person, the story executive comes in and then leaves. I cared what our investors really thought. Right? Like, oh, like, how is the board meeting gonna go? Like, how do we, like, paint a positive picture about the business and press and all this other stuff? You care about a lot of these things. And then the second time you really are like, you know what? It's my time. I just wanna build something that people want that like really works. I'm here with my friend Rajul, the founder of Zip. And we're gonna talk today about what he's learned as a two time founder, as well as employee of Airbnb, as well as visiting partner at Y Combinator. So to get us started, what is Zip? What do you guys do? What's your two line description? Tell us about it. Yeah. So Zip is a procurement software company, and so we provide one front door for any employee in an organization to request a purchase, and we route it for approval across, you know, budget and legal and IT and security and all the different teams before connecting into the ERP or financial system. You guys have done really well. You were just you were in the summer twenty batch, and now you're a pretty legit company. I mean, I I don't know what the public numbers you can disclose are around valuation or money raised or revenue or employees. Whatever you can share, I'd love to hear. Yeah. So the company is about 350 ish people. We've raised about $370,000,000 now. And, the most recent round was our series d at 2,200,000,000.0 post, last month. I love to hear the story of Flight let's set the stage. You were very young Yep. And you started a startup. So so take it away. Like, how did Flight Car get started? Yeah. So this was back in, like, late twenty twelve, early '13. I dropped out of college. And, I remember so this was technically still in high school, really. So my co founder You dropped out of freshman year? I dropped out of just before freshman year, actually. So and, you know, I remember I I called up, Kevin, my co founder, and was like, hey. Maybe we should like, let's do a company together. And, you know, he was like, okay. Like, I'm free this weekend. Like, let's chat through ideas. And he was like, I've gotta go somewhere, but let's meet up at, you know I grew up in New Jersey. The local hangout spot, of course, was Panera Bread, right in in Princeton, right near where I grew up. And so we agreed on a Sunday to meet up at Panera Bread for an hour, before Kevin had to go run somewhere. And we were like, let's just think about the best idea. Let's try to come up with the best idea we can in the hour, and then, like, let's just do it. And he's like, hey, know, have you heard of this thing? It's called Airbnb. And I was like, no. I've I've never heard of that. No. And he's like, well, people are sharing their homes with other people. And I was like, no way. Like, really? And and, you know, we kinda just started talking. We're like, well, if people are you know, what's the most expensive thing you own? Your home. And if people are sharing that, well, the second most expensive thing people own is generally their car. When are they not using their car? When they're traveling. And this is you have to remember, like, pre Uber and Lyft, like, really, you know I mean, they must have been early stage companies at best. And, and so we were like, yeah. Car you know, we would we would potentially do car sharing, at the airport when people are not using their cars, they're traveling, and other people are coming in and and, you know, they can rent the car. And so that's how FlightCar was born. Free airport parking by renting out your car fully insured. That was the one liner. That one hour led to five years of doing that company. And and so the second time around, I took a very different approach. But but I would really encourage that, like, you you know, if you're thinking about doing a company, like, you really put the right level of thought into the idea. More than an hour at least. Yeah. At least more than an hour. Yeah. Yeah. And so you have all these funny anecdotes. You guys did such a great job of doing things that don't scale. Can you just share some of the anecdotes for how you got your first customers and how you got it off the ground? We actually had a bunch of crazy stories. So I remember we we were in the winter twenty thirteen y c batch, and we hadn't launched yet. And so this is like I remember doing office hours distinctly with p g, like, two weeks into the batch. And p g is like, oh, so, like, how many customers do you have? And I remember we were like, well, we haven't launched, so we have no customers. And he was like, well, why don't you why haven't you launched? And we're like, well, we don't have a parking lot to park people's cars. And he's like, well, that doesn't like, that sounds like a thing you guys can figure out. Like, you need to launch, like, tomorrow. And we really took it to heart. We're like, we need to launch. And and looking back, like, that was the right advice, you know, for for us because that's how you get feedback. And so we were like, okay, well, where would we park the cars? And we were like, well, there's a BART, which is the the local Bay Area, like, transit system. There's like a huge, like, basically subway parking lot at BART, is like five minutes from the SFO Airport. We can just park there. And so we literally launched, like, within a couple of days, and we we basically would meet our customer at BART, get in the car, drop them off at the airport, and then come back. And then we told them we would park the car, but we would just park it at BART. And I remember it was $2 a day, so it was pretty cheap. And what happened was that then turned into like 200 cars parked at BART over the course of like three weeks. And it got like we had increased so much parking there that it got reported to the BART police, which they have their own police force, so turns out. And we basically like, the cops called us. They were like, you need to get these cars out. And we had nowhere to put these hundreds of cars. So we then switched to an undercover operation where we would not wear flight card uniform or anything else, and meet people, like, you know, get their cars and park it. And then eventually, you know, we we got another parking lot. But, like, that was like an example of, like, just, you know, we had to be so scrappy. I mean, there's so many other, I mean, I remember early on, we were like, in a marketplace, right, you need supply and you need demand. And so you have to solve for the supply. You have to fake it initially. Yep. And so we one compounding challenge was that we were three cofounders, one of whom not me, but one of whom did not have a license, who couldn't drive. And then you guys were old enough to rent a car, were you? And, yeah, we were all, I think, 18. And so, you know, like, a lot of car rental agencies do not rent to, like, 18 year old kids, for good reason. And so we found this, company called, like, Super Cheap Car Rental in San Jose or something. And this dude was like, yeah, I'll rent you guys, like, thirty, forty, you know, crappy base model Corollas. And so we're like, great. And so we actually just me and my one of my cofounders, we literally took the Caltrain down to San Jose and drove up a car one at a time, like, 15 times each, which is terrible, and then parked it at the same Bart lot. And that's what we initially started That's you got supply. That's how we got supply. And so, you know, you you realize, like, doing such an operationally intensive business like like Flight Car, when you have to, like, do something scrappy, it's like at a it's like almost at a comical extreme, you know, compared to, like, running a b to b SaaS company today. You spent an hour thinking about the idea. You spent five years working on it. And as I recall, you got some real scale. You guys raised a fair amount of money. Like, what's the what was, like, the summary or the postmortem on what happened with FlyCar? At our peak, we had 17 different airport locations. It was a very we didn't take like, we took a very of asset heavy sort of approach. Right? We had, like, leases for at 17 different airport facilities. We had shuttle services to and from the airport. We were washing and gassing up hundreds of cars every day. It was a very, very operationally intensive business. I sort of equate it to, if you think about making money in a business, is like, kinda like, you know, if you have a lemon, it's like squeezing the juice out of the lemon. And like, what's left is like the money you make. Flight car was the type of business where, you know, it's the last drop out of the lemon. That's the money you keep. And so if you screw up squeezing the lemon earlier, you don't need to squeeze the rest of it to understand that you are not making any money. Right? And it was a very, very, very sort of poor gross margin business because you have all this fixed expenditure. And so one very key thing is start a business that is a higher margin business. Right? And that's why the idea matters. It's almost like instead of going to college, you went to, like, the hardest boot camp I can ever imagine, which is here's a really low margin asset heavy business. Yeah. Good luck. Best bet. At the airport. And you spent five years on that. That was your early twenties. You learn so much about, what to not do, I feel, you know, in an experience like that. The problem with margins, by way, because it's like, oh, well, why are low margins bad? Well, if it weren't obvious, like, it's they're bad because of a couple of things. One, it means your multiple as a company is lower. You're less likely to be able to raise money because you have a lower margin business, so it's harder. You have a lower multiple. Yet, and this is key, you need the money more desperately because you have a low margin business. And so you have this really negative feedback loop. And and I mean, FlyCar, I mean, we almost ran out of money so many times. I mean, I I even remember our series a. I pitched I got to know a lot of people because I pitched, like, 80 different firms, nearly all of whom, except for one, said no. And I remember at a point where we had, like, two weeks of cash left, and we were like, you know, payroll cycles are every two weeks. So we had just done executed the cycle. We're like, we can't even make the next one. You know, when do you tell the team that you don't have enough money to run the payroll? Right? Like, that was I remember distinctly having that conversation, and we got lucky, and we we had somebody lead the a. But we went through a lot of moments like that. And, and so one key thing was just, yeah, you wanna set yourself up with a positive feedback loop, not a negative. So you ended up, I think, selling the company, and I think you ended up joining Airbnb as an employee. Can you just kinda set up the the context there? And then I'd love to hear what it was like working at Airbnb, during that time period. So what happened, was, you know, I knew after Flight Car, that I wanted to do another company. I knew I was gonna do another startup. But I felt like, in reflecting, I had never worked anywhere. Like, I'd never worked at a real company. And so what you miss when you don't work at a real company is like, I think a lot of the basic stuff, like, how do companies even generally work at scale? And what is the best in class? What do great engineers and designers and what do those people look like? How do they work? Right? And actually, I remember one of the reasons I reflected and realized I needed to learn this was we hired a marketing leader at Flight Car. And I remember she starts, and then one week into the job, she in my one on one with her, she's like, you know, Rajul, like, it kinda feels like you went to a bus stop and just picked up everybody from the bus stop, and like, that's who works at your company. And it's like, wow. Like, that's that's tough feedback. But, like, looking back, like, you know, there was there was some truth to that, if I'm being honest. And and so I was like, you know what? This is not acceptable. Like, I need to, you know, I need to learn this. And so, of course, a company that I always had a tremendous amount of affinity for was Airbnb. Yeah. Makes sense. And so I ended up joining as a product manager at Airbnb. Certainly learned not just a lot about what you know, how best in class products are built. So I worked early on on the experiences team, which is where I met my co founder, Lou. And we actually a lot of our early team actually comes from that experiences team at Okay. Airbnb. But it was great to see Brian Chesky, the CEO, be so involved in all the details of the experiences product. And I mean, just at such a critical level of quality that, like, I I definitely learned a lot from from sort of seeing that. And so that was one of the things that I'd set up for. But I also, I think, learned at Airbnb at the time, the company had grown a lot. I think I was the if I remember, I was like the thirtieth or something product manager. And then when I left, almost three years later, two and half years later, there were like a hundred something product managers. And that's just product managers. And then you look at engineers. It's thousands and thousands of people. Hundreds and hundreds of designers. And you sort of realize, like, it's so important to have the right incentives for your team members. Because you don't want to create situations where you have a lot of people that, were hired because maybe some people wanted to, you know, build up their functions or teams, and there wasn't maybe the best justification for them. And then, of course, you can't blame a certain designer for wanting to build something because they were literally hired, and so they have to produce something. You don't want, as a company, to have that much self inflicted pain. Like, you already get enough pain from external sources. Right? Like, how do you make sure that, like, most of the pain you're experiencing as a company is externally inflicted, not self inflicted? You were at the retreat we had, where the founder mode it was not called that at the time. It was just Brian Chesky talking. Turned, he coined the phrase founder mode. But you were there, and, again, you worked at Airbnb in the years where they were growing so fast. Do you have any thoughts on the whole thing? It absolutely resonated with me. And I also, at the same time, I love Airbnb. Like, I could not be more happy that, you know, that, like, there's so much change that was executed and delivered within within the, you know, within the company. But certainly, I can totally see how, you know, there was there was, like, there was a need for change. Right? And, like, a need for, like, creating conflict within the company to actually ask the hard questions and say, hey, do we need these folks? Or or or, you know, are we are we actually doing this project because somebody actually needs to execute this project so that they can get promoted versus, like, the comp this is the right thing for the company. You've had a a unique experience as a founder where you've actually worked at Y Combinator as a visiting partner. That was after you left Airbnb. I I remember we recruited you, and you and I worked directly together Yeah. Working on a batch. And so you we set in interviews together. We set in office hours. We set in group office hours. And so you've seen it from the other side at YC. So I just wanted to, like, reflect on that. What do you remember from from that batch? It was winter twenty that you and I worked directly together. What are your big memories from that? Yeah. I mean, I remember, that was well, first, that was the, like, half remote unplanned batch because it was right at the Just like the last three weeks. Yeah. Right. Yeah. It was like the the Last three weeks. The lockdowns happened chaotically, and we had to make some stuff up. That's correct. Three it was, two or three weeks before demo day. Right at the tail end. Exactly. Just reflecting, we've had some great companies just from our our group that batch. Yeah. Like, what we had, yeah, like, 50 or 60 companies, and I think the the success rate is astronomical. Whatnot is a multibillion dollar company. Airbyte is a unicorn. There's a number of other well known companies that were in our group, Posthog, BuildBuddy, ninety nine Manutos, Yasser, Stark Bank in Brazil, Poly. So it was Wow. Yeah. Phenomenal talent that was in our group. At least my reflection from this was that, like, how formidable the founder really is and, like, how how much they really want to make something work. Maybe not that specific thing. Maybe something else, but, like, make something work in the world, like, is such a critical thing. That was just a really special group of people. And they were all doing very different ideas, very different verticals, very different types of founders. There wasn't a lot of overlap, I would argue, between who we had in that group. So, yeah, we set in office hours together. We set in group office hours together. We saw all these companies at the most nascent stages. And then, you know, I guess you're a bit of a masochist. When you I remember you saying, oh, you know what? I'm just, I got another company and be I'm gonna go I'm gonna do a do over. Maybe yeah. What what was your thinking on deciding to do another start up? Yeah. No. I mean, wasn't a decision I feel like I had to make. You know? I knew I was, after FlyCar. I knew I was gonna do it again. And, you know, but this time, we'll get to that. But I was you know, we were gonna be much more thoughtful about it. And and I had spent a lot of time working with Lou and getting to know Lou when my co founder, when we were at Airbnb. He was my engineering counterpart at the company. And we were working on We had been noodling on ideas and stuff for pretty much two years, really, until we ended up starting Zip. So just kind of on the side. And we both committed to both quitting basically and and kinda going full time literally March 2020. So that was right after Isn't that funny timing? Yeah. It's like a week. A few weeks after the lockdowns. After the lockdown. And for Lou, it was quite a change because I think Airbnb revenue dropped like 95% the week he left, which was quite a change for for the company. Indeed. Yeah. And so but we were forced to, you know, be we were alone and and kind of in lockdown just trying to figure out what we wanted to to do. It is such a humbling experience. Right? Because you literally, working at YC as a visiting partner, you know, you're meeting all these founders, and you you know, helping people think through pivots. And and yet you realize, like, you don't know yourself what your idea is and what you're gonna do. And candidly, Zip for us was a mid y c batch pivot. We actually were working on a series of different ideas. And I remember, you know, we had a really, really helpful, come to Jesus office hours with you, Dalton, where you were like, guys, what are you doing? And and, you know, your advice was like, you guys know you wanna start something with execution risk, but you don't so much wanna take on market risk as a as a second time founder. So why don't you find an old software company, that exists in the world that hasn't, like, hasn't changed much, in in a long time. And and sort of figure out, like, what what's changed in that space in the world and, like and try to solve a new problem. And, and so we did that, and that led us to procurement. But I have to say, like, you know, it was just like that I mean, that changed my the trajectory of of my wife and the created the company. And that was as a second time YC founder after working at YC. Right? And, like, it's so helpful. I would love if you could help demystify enterprise sales. There's a lot of founders that have a lot of questions about enterprise sales that haven't done it before. And you're someone that is really good at enterprise sales, that has immense scale doing it, and you went zero to one on it. It's certainly been a learning experience for me and still is. Right? Because we literally had never worked at a company before before, before Zip that had a sales team in it. But one, to your point actually about your time is the most valuable thing. You wanna prove to yourself really that this is the right thing to even be investing your time into. Had decided, Lou and I had decided, that the first ten customers that we closed, we were gonna try to sell them completely cold. Like, through cold LinkedIn outreach or whatever, but not referrals, not friends, not anyone we know. Because if you can get 10 different people and 10 different companies in the world to take out their proverbial credit cards and buy your thing when they don't owe you anything in the world, that means, like, you're more likely to have market fit. And that's what we wanted to prove, or disprove. And and so that's how we, like, we started out. And and we built the muscle for outbound, which even today, we're a significant majority outbound driven business today, not inbound. And so we literally reached out. We would max out our LinkedIn connections diligently every morning, and then we would message people that add us back because it doesn't cost you in mails. So it's free. And we would just we would just reach out. And we would ask truthfully initially for advice because we wanted to learn more about the space and what their problems were. And that was helpful. I mean, in two or three weeks, we have a we have a document that has a hundred and seven pages of notes in it Wow. From all these conversations. And that helped us sort of cement the idea that we were gonna work on, which is exactly what Zip still does today. But it helped us then convert that into sales because we learned from these folks. We took all these notes, and then we were like, oh, we should do this. And we'd go back and say, hey, remember that conversation we had? Your feedback was so helpful to us that we, in fact, we built it. Can we show it to you? And then they were like, wow, that's really cool. No one ever does that for me. And that's how we ended up getting people excited and closing our first set of customers. But we wanted to do it totally cold, and step by step. And how did you price for these first customers? That's a really common question, I get. Well, one, it is important to charge. Because I've also seen founders that, like, wanna do a design partner thing, or, you know, it's free for some reason because they're just as a founder, right, you're like, I have no customers or, like, a few customers. I don't have confidence in my product. Like, how can I possibly charge money for it? And the truth is, like, if there's enough of a pain and promise of a solution, like, people should and will pay for it, and it's a test. And you want the people to pay because you want feedback that actually helps your product. You don't want feedback from people who that who would never have otherwise bought it potentially. And so it's really important to charge. I don't think you need to think too much about how much you charge. You charge maybe $10 or $20 a year or whatever. Something rational that like, there's no company out there that's a reasonably sized company that can't afford like a $1,020,000 dollar a year purchase. What if someone's thinking, wait, but I can never charge that much. My product is bad, or I haven't built much. Like, how do you overcome that? What I would say is you'd be surprised how much enterprise software is bad. And it's not they're not charging 20 k. They're charging like, you know, millions first. And second of all, like, in the big picture, like, 20 k a year, like, just doesn't matter to a company. That's you know, that has a 200 employees in it. Like, it really doesn't matter. And if they're not willing to pay that, that is telling you something that you should be realizing, which is maybe you should work on something else, or you need to tweak what you're building. That's the honest answer. And over time, can as you get more confident, you can you have more referenceable customers, you have happy customers, you can charge more over time. But initially, just charge enough to know that, like, it's something rational, there's pain, they're willing to pay, and then just prove that you have something. My big theme that I feel like I've learned working with you and that I understand in your whole story is that you're a founder that kinda got to do a do over where you had a start up. Yeah. Totally. You did the full thing. You learned a lot. You you made incredible progress. Then you had time to go be an employee, to be a PM. Then you had time to work at YC Yep. And see what it's like to to to be a YC visiting partner. And then you got from First Principles to do a start up again, and you got to be very intentional at every decision you made about what things you wanted to keep from your experiences and what things you wanted to do differently. And so to me, that's that's the big theme here. I so I'd love your thoughts on, you know, this overall decision making framework and sort of what what are the things that you chose to take from your first startup that you brought to your second one? And what are the things you're like, nope. Don't wanna do that again. Absolutely. I think if I had to really distill it in my personal reflections, it's like, you know the first time as a I was a first time founder. Right? I I dropped out of school. Like, I cared a lot about what others thought. Like, I cared what my to the point I was just making, like, what my team thought, the leaders thought. Right? Like, oh, well, people quit because this person, the storied executive, comes in and then leaves. I cared what our investors really thought. Right? Like, oh, like, how is the board meeting gonna go? Like, how do we, like, paint a positive picture about the business? And press and all this other stuff. Not that I care about press, but, you know, you care about, like, you don't want negative press. Right? And so you you care about a lot of these things. And then the second time you really are like, you know what? It's my time. I just wanna build something that people want that, like, really works. And so actually, now what I'm gonna do is, like, try to disprove things. Like, the first set of customers, like, yeah, I want them to buy coal. Like, I don't just want revenue. Like, I don't care. Like, I wanna know that this thing is real. You know? And like and like, yeah. Like, if we have a board meeting, which obviously we have board meetings, like, I'd rather we just focus on what's broken in the business. Because ultimately, that's how we get better. Like, I don't want us to spend a lot of time talking about what's going well, because that's not gonna help us. And like, it's just such a liberating way to think about things, to just seek truth. Right? Whether it's your team, your investors. Ultimately, it has to come from you. That's awesome. Well, thank you so much for joining us today. I really appreciate it. No. Thanks for having me, Dylan."
  },
  {
    "name_video": "The Lightcone 2025 Forecast",
    "description_video": "Happy New Year! In this mini-episode, the Lightcone hosts ring in 2025 with their predictions for startups, AI, crypto, and more.",
    "related_categories": [],
    "page_url": "/library/M0-the-lightcone-2025-forecast",
    "youtube_url": "https://youtube.com/watch?v=uGjv25IrjoE",
    "mp3_file": "downloaded/The_Lightcone_2025_Forecast.mp3",
    "mp3_content": "Welcome back to a New Year's Day episode of the Light Cone. We wanted to hit you guys with predictions on what's gonna happen in 2025. Diana, do you wanna start us off? Sure. So last year, AI won two Nobel Prizes. The first one was the Nobel Prize in Physics with Jeff Hinton on his seminal work on deep neural nets. And the second one was a Nobel Prize on chemistry from Dennis and his team on alpha fold and protein folding. And we're seeing how AI is really accelerating abundance with discoveries with science and technology. And there's a total of six Nobel prizes. There's four more to go. So why not winning one more? It could be the one on math perhaps. It could be interesting. I know there's been a lot of collaboration with OpenAI and Terence Tao, the famous mathematician, and a bunch of researchers trying it too. Could be one in economics. I don't know if we come up with some interesting economics theories, but maybe those. I think the peace one in literature might be a bit more tricky. Alright. My one is a dangerous one to make on camera. It's that next year, crypto is going to go mainstream. Very specifically, my prediction is this time next year, like, you and everyone you know will have bought at least one thing during the year that's, like, real. Like, whether it's like a cup of coffee or a book using a stablecoin. And the reason I think this will happen is payment when you think about it, like, payment networks are actually just marketplaces. The marketplace businesses just have, like, vendors on one side and consumers on the other. And we all know from our work with startups that marketplace businesses are incredibly hard to start because you have a chicken and egg problem. But when you do figure out how to crack the chicken and egg problem, you have incredibly sticky enduring business. Like, actually, the biggest YC companies are almost all marketplaces. Airbnb, DoorDash, Instacart. I mean, Coinbase itself essentially started out as a marketplace, though it has like, an exchange is a marketplace, really. I think what's happened with crypto is clearly everyone came in initially for the speculation and buying things where the numbers went up. But stablecoins have emerged as, like, a truly, like, valuable use case. And so many, many people have a crypto wallet, which at this point is hundreds of millions of people, will recognize that stablecoins are a really great way to just buy things. And so you basically have one side of the marketplace lined up. There's hundreds of millions of people who will, like, have stablecoins in their crypto wallets. All you need now are the merchants to start accepting USDC or a stablecoin. And I think that's actually the much easier part of the marketplace to get. Yeah. There's a lot fewer of them. Yep. There's fewer of them, and it's just a more traditional ground sales game. Yeah. And I think people especially now the regulatory environment is looking more optimistic. I think next year, you'll just see a big push, and you'll walk into your local coffee shop, and they'll accept USDC payments. Think it should be huge. It's pretty clear that stablecoins are, you know, sort of desperately needed in finance overall. I mean, when you look at something like that Synapse disaster, that startup that lost, you know, tens to hundreds of millions of dollars of user funds, know, if you had, you know, Open Ledger, I think that you would be able to figure it out. But right now, they don't even know, you know, where the money went, and they don't know how to track it down for people. So it's a pretty wild situation when you really think about it. It's overdue. So I think for mine, I also have one that is kind of crypto related in that I think if Doge, the, you know, sort of Elon Musk and Vivek attempt to reduce government waste works, then Dogecoin will go up in a very circuitous sort of way. You know, I think that interest rates are largely sort of driven, you know, by a lot of different factors, but one of the bigger ones is actually whether or not the government is actually doing a lot of deficit spending. And I think the markets, the way they're moving, at least right now, as we're, you know, watching it in late December, you know, they think that Trump is probably gonna spend a lot more money. But, you know, if Doge is able to actually reduce spending, well, that means that interest rates will come down and, you know, sort of a, hopefully, the economy will actually pick up. There will be more g GDP growth, but also interest rates rule everything around us as we've learned the last, you know, three or four years. So, you know, sort of concretely, crypt as crypto prices go, they they turn out to be highly correlated to interest rates. So interest rates go down, crypto prices, and hopefully GDP goes up. And, you know, likewise, it's probably true that the reverse is also going to happen. If Doge fails in their mission, it seems pretty clear that Trump left to his own devices would probably increase, you know, spending the way he did in his first term. And so I don't know. I mean, what can I say? We're we're rooting for you, Elon. Yeah. I think another aspect that ties into what we've been talking about is the worry with lower entry lowering interest rates is that inflation would spur back up. But tech in general is deflationary, and AI in particular may be, like, the greatest single greatest deflationary force of our lifetimes. And so if that plays out, you may well be able to lower interest rates without stimulating huge amounts of inflation. Alright. I've got an AI one, which is a product that I'm just, like, personally excited to see and play with that I think is gonna come out next year. And it's basically you will be able to have a Zoom call with an AI. Like, in 2024, that was the year where you could finally have a phone call with an AI, and they got the latency low enough that it felt, like, natural and real. And I think next year, we're gonna be able to do the same thing, but it's gonna be like a Zoom call where there's, like, a face and a and a whole, like, virtual avatar, but it's actually, like, real time, and you're interacting with, like, a a virtual, like, AI person on a screen. That doesn't feel Uncanny Valley. Because right now, there are different versions of it that are very unkind. Latency is bad, and the lip syncing is bad, and it's just like it's just like not a good experience yet. But I think it's gonna yeah. A three d Turing test. Gonna happen. Yeah. Like a three d Turing test. Yeah. Maybe we'll get them to do the Litecoin episodes for us. Yeah. Surprise. This is actually all AI. Just kidding. It's still real. It's still real. So with that, we just wanted to give you a lightning episode of our predictions for 2025. Happy New Year, and we'll catch you guys next time."
  },
  {
    "name_video": "How To Focus On The Right Problems",
    "description_video": "When it comes to building a startup, focus is critical. But how do you know if you’re focused on the right things? In this episode, Dalton and Michael talk about how to figure out which problems matter most, and how best to spend your time.",
    "related_categories": [],
    "page_url": "/library/Lz-how-to-focus-on-the-right-problems",
    "youtube_url": "https://youtube.com/watch?v=z-TeST6LnOk",
    "mp3_file": "downloaded/How_To_Focus_On_The_Right_Problems.mp3",
    "mp3_content": "Whether I blame VCs or conventional wisdom or Harvard Business School, but like somehow sometimes I feel like founders are being told you don't have superpowers. Yeah. Like, your best superpower is to delegate as opposed to you can literally get things done that takes other people two, three, five, 10 x more effort to get done. But you can't do a hundred things with your superpowers. Right? Like, can only choose a couple places to focus, and focus seems to be the game of the game. Hello. This is Dalton plus Michael, and today we're gonna talk about focus. Focus. We both have been kind of reflecting on how companies, especially in the past year, have figured out how to succeed. And we keep coming back to the same theme. What do you think? What have you seen? Yeah. It's almost like succeeding is focusing. Yes. And when things don't go well, it's it's we're we're not focused on the problem. We weren't focused on the on the right things. Yes. Like that word focus comes up so many times. Yes. And I think it all goes back to what we remember from elementary school or high school when we had homework. Yeah. Which is when you have homework, you would come up with all these great excuses Yep. On why this was not the optimal time to do it. I'll do it later. I'll prepare later. My favorite show's on. Oh, dinner. I don't have the right stuff like, oh, whatever it was. And what we learned is you would never get the homework done until you actually focused and you stopped doing everything else and there was no other distraction. Yeah. And that was the only time it ever got done. Yes. And we as humans, this is the cycle that happens over and over and over again. And what's funny is it goes all the way from an individual contributor trying to build a feature Yep. And needing to focus on just getting the feature shipped to literally the CEOs of very large organizations. Yeah. Yeah. Like one way to think about this whole founder mode thing is focus. The founder being focused on the nuts and bolts of their business Yes. Instead of being distracted with all this noise? Isn't that It's weird because I've been trying to figure out when did the idea that complexity equals winning get into people's heads? Because, you know, you remember, like any of the business people who people admire like Warren Buffett, right? Yeah. Like simple investing strategy just like fucking clean. Jeff Bezos. Yeah. His like big three things that make Amazon work. Or looking at Google where it's like, hey, like all this decoration over here, we're the biggest search engine. Yeah. When did the idea that like complexity and being 80 products and 25 surfaces is the way to win? Where did that come from? I think this is one of those debates where there's no one earnestly on the other side. And everyone say, no, I'm focused. Just, you know, there is no it's a bit of a straw man to be like, oh, focus is bad. I believe in not focusing. And instead, it's this insidious thing where life creeps up on you and you say to yourself, I'm being focused, but that you're not really auditing where you're spending your time, you're not auditing what you're paying attention to and it kind of creeps up on you. Well, I would take a shot at I don't agree with that. Okay. I think perhaps, and test my logic here, as an organization gets bigger, people wanna take credit for things. And I think that, like, hey, if we're only focusing on two or three things this year Yeah. And there's, like, direct people responsible for those things, well, how do I look good? I I could I guess I could help those people with those things, but can I really take credit for them? Me try to get a fourth thing on the agenda. But those people would argue they're being focused and the fourth thing is important and we must focus on the four things. Yes. Right? Well, I think that's the funny thing is because I think that this whole founder mode conversation's happening. Perhaps in the beginning of the year, the prevailing thought was like, great. My job is to manage a team of people who are focused on things, but I don't have to focus as a CEO or as a founder. Yeah. And now the mentality is like, oh, no. Whatever is the top three things on my list are the only things that are gonna move. Yeah. I think the conventional wisdom was the founder should be focused, but they should be focused on managing the managers. What's the old Yeah. Yeah. What's the old thing? I remember hearing this, you know, and again, I'm not saying it's wrong or anything but it was the CEO's job is to raise money, hire great talent, Vision. Vision. Yeah. And communication with the Yeah. And basically to manage the managers. And otherwise, like that was the job. Yeah. And you can see that's actually that is antithetical. Yes. The idea of being in all the details. Yes. Being in the weeds. Yes. That is Very antithetical. It is antithetical. I think the other thing that's interesting about focus is I I think that sometimes founders forget how powerful of a force they are in a company. I'm gonna give, like, a really specific example. I've seen this with sales a lot. I've now encountered maybe four or five YC companies that have between 5 and $10,000,000 in sales and like less than two to four salespeople total, including the founder, which is way against conventional wisdom. Like, did you do that? Right? And I I have this one company in my mind that has, you know, 50 plus million sales and has, like, less than five salespeople. Well, the only way to get more money is hire more salespeople and da da da da. And one of the things that keeps on coming up in conversation is that when the CEO is focused on sales, the people that the CEO can meet with at the company's trying to sell are always bigger, better decision makers. People who can move fast. People who can can can actually decide things. Where when you get like junior salesperson number 25 trying to sell something, they end up talking to PM disempowered bullshitter who has to get, like, 80 levels of approval. And so it's been amazing to see founders who decide focusing on sales is the number one thing and then being able to produce the work of, like, so many salespeople. And it keeps coming down. It's like, founders have superpowers. I don't know whether I blame VCs or conventional wisdom or Harvard Business School, like somehow sometimes I feel like founders are being told you don't have superpowers. Yeah. Like, best superpower is to delegate as opposed to you can literally get things done that takes other people two, three, five, 10 x more effort to get done. But you can't do a hundred things with your superpowers. Right? Like, you can only choose a couple places to focus. And I think that's always been so interesting to for me to see whether it's product and being like, I'm actually gonna be in the product and see how it works or doesn't work and try to fix it or sales. It's like focus seems to be the game of the game. What do you think is the counterpoint though? Like someone who's listening right now is like, I am focused, but if we were to, like, audit their calendar Yeah. They would basically say their number one priority is getting 20% of their time. Yeah. Maybe let's give some examples. Let's give some personas. Yeah. So let's give the persona of we're talking to someone, and they want to start a startup. Say they're a student or they have a job. They're like, oh, I want to do a startup. I'm so happy to meet you, whatever. And you talk to them. And the conversations usually go a couple of ways. But the most common path is, I'll say, Great. Do you have a co founder? And they're like, Well, no, not exact. You know, the answer is not a simple yes or no. And I'm like, Well, first thing is you would just think about that. You should walk down your co founder. I would argue that's a very focused response. Yes. And then second, it would be like, cool. What are you going to build? And who will the first customer be? Yep. And often, the answer to that is very complicated. Yep. Yep. And it's like, well, this and well, that. And if they or if they do have an idea, I'll say, okay. Well, have you built anything and given it to people in any form? Yeah. And what do they say? Oh, not yet. Like, I don't know exactly what they need. I got to talk to more people first. Yeah. I've been doing research on the market. Yeah. Is all totally fair. I think the advice here though around focus is just do that checklist. Yeah. Get through it. Yeah. Yeah. Do you have a co founder? Yeah. Do you have an idea? Yeah. Have you built a thing and given it to anyone? And if you can just say yes to those, you're ahead of the game. And I would argue you are focused. Yes. But if the answer to those questions are like pretty complicated, I would use the word complicated where I couldn't even summarize. Yeah. Like, it'll Yeah. It's like several paragraphs of explanation. Yeah. I think another persona would be someone that's a YC alum. Yes. Yeah. So they were in YC, they know us, you know, they did the batch. They were focused during the batch. They were super focused, they were growing, and then you talk to them and, you know, what do they say? Like, let's walk us through that. Well, you know, the thing that worked during the batch, you know, I'm trying to figure out can we do it better? Can I hire more people to help me scale faster? There are these features that users want. I feel like I should build them. Oh, we have board meeting now and so I gotta figure out how to do that well. Oh, what about PR? Oh, like, this other kind of esoteric part of my organization is not working really great yet. It's causing me headaches, like customer service Yeah. Causing me headaches, and becomes this menu of I have to do these 15 things. Yes. You know, actually, and what even comes up more often is like this, like, this thing worked on the batch and here's the reason why I can't do what worked anymore. Instead of like, hey, how about a simple strategy of like keep doing the thing that works? That comes up a lot. How do we shake them out of that? Well, how about this? I think the big gotcha when this comes up in office hours would be like, should I focus on growth or retention? Oh, that's a fun one. Or should I focus on building the product or sales? Yeah. And so you guys told me to focus, right? Oh, you guys said to focus but I have yeah. Should I be doing sales or building? And again, totally fair point by the way. Fair. Yes. But that feels that's like the gotcha response to what we're saying. Yes. Yes. I actually think about a founder that I have that conversation with, like, there's almost always no nothing burning going wrong in the company. It's like kind of a fake crisis. You know? Because, like, when you talk to a founder where, like, something is burning, like, oh, our product went down yesterday based on usage. The conversation is never like, but should I be selling or da da da? They're like, how do I get the product to not die? Whereas before that, it's like their job is to make something people want, and the meta thing is that, like, they're not making something people want. Yep. And like they're coming up with other reasons why not working on making something people want is important. And especially it's hard because then when they hire more people, it becomes even more distracting. So they can't work on making something people want. Here's how I try to cut through the bullshit. Does anyone love your product? How do I make a to do list? Can you get one person to love the product? How about this? This is something I'll often ask in interviews for YC. Yeah. Are you using your product? Yeah. Yes. Yeah. Yeah. And a lot of times people are like, they weren't expecting that. No. Well, they it they it never occurred to them. Yeah. But they could be a judge of whether the product is good or No. Again, for a lot of developer tools like Yeah. No joke. Yes. You could be the first user. Yes. And it's a good sign if you if you're like, yeah. Yeah. And and when you think about it, that's the easiest sell in the world to sell yourself. And so Is it though? Is it though, Dalton? I I think I think that you should try to make yourself happy with a product. Again, this doesn't apply to all startup ideas. Of course, there's a whole category of startup ideas where you can just be your first user and there's no barrier. There is no sales risk. No. Because the customer is you, but you have to build something that you're excited about. You know, it's funny when I see people talking about that. The number one comeback is like, but how do I know that other people will like what I like? And the first assumption is that like, even though I'm starting a company, I'm not a good arbiter of what's good. Yeah. Which I love. Because how do you well, how do you expect to build a huge company like, I can't tell what's good. Like, have no idea how it's good. Like, you kind of have to believe you have some sense of what's good. I think my usual response is like, maybe, but you gotta start somewhere. Fair. Fair. One the things I think about a lot, you know, recording this towards the end of the year is that, like, year end is a really good time to reflect on these kinds of questions. Right? You have enough time hopefully separated from the day to day work, from the meeting schedule, da da da da. And also, the people around you, you know, you mentioned this as we were talking, like, they expect change. Right? Like, people in the New Year, they expect things to get mixed up. You're not screwing with them if you change the calendars, change the schedule, change the do list over the course of the holidays. And I think that really good founders take advantage of the holidays not only to recharge but to almost, I mean, to refocus, to to audit what isn't important Yeah. And get rid of it. If you think about that, if you can't even name or articulate the goal Yeah. How are you ever gonna hit it? Yeah. And so step zero Yeah. Is to take the time to breathe and think and set the goal. Yeah. This is what I want to accomplish this year. Yeah. And then put all of your energy into focusing on that, to manifest and to make it happen. One thing I love in this kind of exercise is also like, what am I willing to give up? What am I willing to divest from? I think people don't give themselves permission to say, I'm going to be bad at these things. I'm going to not focus on these things. Like, aren't I supposed to be able to do everything really well? Right? Yeah. I think my final takeaway from this conversation is that so much of the power to do this is in the founder's hands. There's no one you need to get permission from to focus. There's no That's right. There's no meeting you have to have. Yeah. You know, there's not an authority figure that's like, you are bestowed with focus. Yeah. No. This is completely something you can do and if you do it, you'll inspire others to do it, which is kind of neat. So many things in companies you kind of have to like build a coalition. No coalition needed. Any final thoughts on this? I've been meeting with a lot of companies over the past few weeks and it's crazy for the folks that are doing the best. It's often the shortest meetings. Yeah. Yes. Yes. And it's the simplest explanation of what's going on with the business. Yes. The simplest And that's what good looks like. Isn't that funny? And again, every business goes through ups and downs, but one of the signs that you're really in there, you're really in the slot. Yeah. You know, you're in your happy place is that the problems are clear in front of you. What you're doing is clear. Yep. And you can really feel like you're you're putting all of your effort into that one thing. I'm so happy you said that because it's for me when I'm having those conversations, the words and the concepts are simple. Yeah. Right? It's like, this is my customer. This is what I do for them. This is what we learned. Yeah. This is what we're gonna do to help solve problems for the better. This is how I make their business better. The sentences the founders say are just not complicated, semi coloned up questions. They're just simple. Yeah. Like, you know, a high school kid could clearly understand everything being said and be like, yeah, that makes sense. What's the opposite look like? Not like that. Again, it's hard. We've all we've all been there. God knows I have. Yeah. I think it's where you just feel like you're in the fog of war and everything's confusing. You're not really sure what's going on. You don't know what's going on with the business. You're confused. You feel pulled multiple direction. You just wake up every day unsure in this, like, gray, murky, area. You know, it's funny because when I talk to founders like that, the uncomfortable truth that feels like it comes out is we're not really helping anyone as much as we need to. Like, we're like, our product really isn't making any customer's life good enough so that, we get direction. The customer's pulling it out of our hands. Like, it's we're not helping enough. Yeah. And I really wish you know, we're talking about your own reflections. Man, the companies that really help their customers, they know it. Things get a lot easier. Things get a lot simpler. It's a lot easier to focus when you're like, I really help my my customer really appreciates when this is done this way and I can do it this way and it makes their business much better. When you're like, oh, like, you know, like, it's like a decoration. It's like, oh, like, well, but they're not using it the right way. Like when when you're not making your customers lives better Yeah. It's easy to be in the fog of war and maybe it's time to step back and be like, maybe we need to make a product that makes our customers lives 10 x better. So anyways, focus is winning. Good luck. Great chat, man. Thanks."
  },
  {
    "name_video": "How David Lieb Turned a Failing Startup Into Google Photos",
    "description_video": "YC General Partner David Lieb shares how Bump pivoted into Google Photos and the biggest lessons from his journey.",
    "related_categories": [],
    "page_url": "/library/Ly-how-david-lieb-turned-a-failing-startup-into-google-photos",
    "youtube_url": "https://youtube.com/watch?v=CcnwFJqEnxU",
    "mp3_file": "downloaded/How_David_Lieb_Turned_a_Failing_Startup_Into_Google_Photos.mp3",
    "mp3_content": "If you wanna create something that billions of people will use A brand new product, Google Photos. You have to be totally committed. And you have to realize that the path to success is very rarely a straight line. And you're almost certainly gonna fail a few times or be thrown a curveball that you weren't expecting. Just talked to the ER nurse here. It doesn't look good. And you just have to keep moving forward no matter what. I'm David Lieb and this is my backstory. I grew up in a suburb of Dallas. Pretty normal childhood. I was, you know, into math and science, computers. My dad was an engineer, and my mom was a school teacher. So very much a focus on, like, engineering, math, and science growing up. I was one of the top students in in school, and, you know, I I wanted to be first in the class, and so I got extremely competitive about that. I really don't like losing. I went to Princeton, majored in electrical engineering there and computer science, and kinda just continued the traditional path of, like, get good grades, get good internships. After Princeton, you know, I didn't really feel the urge to get a job, so I went to Stanford and joined the PhD program in artificial intelligence. So I did that, met a bunch of cool people, ended up working on what would be the beginning of the DARPA grand challenge, would turn into the self driving cars that we have today. But I was never a PhD researcher. Like, I never felt at home amongst those people. And that led me to drop out of the PhD program and go get a job at Texas Instruments back home in Texas. I remember sitting in my cube at TI, and I read these two 25 year old kids sold YouTube for a billion dollars. And that was the first moment that it became tangible to me that, like, oh, those guys don't look much different than I do. They don't seem that much different than I do. Could I do that sometime? Maybe. If you were a, you know, smart engineer that aspired to do more than engineering, at least in my era, the next step was to go to business school. So you would go and get your MBA and then graduate and become a manager at some tech company. So I pursued that path. I I went to University of Chicago, I started my MBA and that was like what I thought I was going to do. But then the first week of business school, I showed up, you know, we're in a a big room, you're meeting all your classmates, and the iPhone had just come out. And we were all trying to get each other's phone numbers so we could text each other to like meet up. And one day, I typed in like 10 people's phone numbers and asked them to spell their last name. And then I called them and they dismissed the call and they added my contact to their phone. And I just thought, well, this is this is ridiculous. Why are we doing this? We have these supercomputers that can run apps now in our in our pockets. Why hasn't somebody solved this? You know, the idea that you could share contact information by taking two phones and bumping them together popped into my head in an accounting class one day. If you wanna share contact info with a bump, there's an app for that. That became bump. I emailed my buddy Andy to see if we could build it, and we started working on it. We worked on it for maybe three or four weeks, just kind of on nights and weekends as a side project, submitted it to the App Store for approval. The app went live at the March 2009 and we did no promotion. It just went on the App Store and some people found it. I think the first day, like tens of people found it and the second day, hundreds of people found it and the third day, thousands of people found it. And so pretty quickly, it just started to take off. And we did a bunch of work then afterwards to try to get the word out. We talked to press. I would go hit up any blogger that I could find. But it really was driven by word-of-mouth. I think I learned a few things from the beginning of Bump. One is anybody can build anything. Like, had no expertise in doing this. We just figured it out. And I think the other thing that really resonated in hindsight is that when you're building a product for yourself, you can really trust your own intuition about what it should be and how it should work. We weren't mobile app developers. We didn't know anything about building consumer products. I just wanted to build a product that I enjoyed and I wanted to make it really good. And so all of the design decisions that we made just kind of fell out from my intuition. So step one is find a problem that bugs you about the world and step two is go build it. In the early days of building a product, like, you have to do everything. There's no team that's gonna support you. There's no marketing team. There's no engineering team. It's it's just you. All three of the founders were former engineers, and so we just divided things up. Obviously, Andy was the best coder, so Andy wrote all the code. I worked on kind of the algorithm and the design, and Jake helped with design and the early promotion of the product. And so we kinda needed an excuse for the school and for our parents to work on Vump, but have it be, like, more legitimate, I guess, than just messing around with a side project. So we decided to apply to YC on a whim. So our goal is to turn bump into a verb just like Google has become a verb today. And we're looking forward to doing that this summer. Thanks. We got into YC and the program was to come out to California for the summer for three months and and build your startup. We got $16,667 of funding, which in hindsight is pretty small. But it was totally sufficient to come out to the Bay Area, live on a friend's floor, and and build Bump some more. Turns out I never went back to business school, never finished that degree. I had been on the traditional path of going to business school, becoming a manager at a tech company, and then this small little random moment of of having an idea for an app took me on a completely different career journey, and YC went really well. Throughout the batch, the product kept growing. And by the time demo day came around in August, we were actually the number two app on the entire app store. So we were like the most popular app in the world other than iGlowStick, which always will bother me. Our demo day pitch was pretty simple. I showed a map of bumps happening live around the world and the map was just lighting up every second. And so everybody realized that Bump was like the hottest thing around. MC Hammer invested. People were dressing up as Bump as their Halloween costume that fall. Steve Jobs put our icon on a slide on one of his pitch decks. We were the the hot app of the time. The problem was people didn't keep using the app. And I think this is a thing that took us many years to figure out. The frequency of use of Bump was too low for the value that it provided people. If you think about kind of a two by two grid where there's high frequency and low frequency and then high value per interaction and low value per interaction, obviously, you wanna be in the high frequency, high value box. That's the best place to be. And it's okay if you're in the low frequency, high value or high frequency, low value, but there's one box you don't want to be in, which is the low frequency low value box. And that's where we found ourselves with Bump. And in hindsight, you know, I realized we made a ton of mistakes. We didn't ever have a credible idea for how we would make Bump a business. We hired a bunch of people to just keep up with demand and, you know, in hindsight, we probably should have hired a lot slower. We spent time going to conferences. All the VCs wanted to talk to us, so we took all the meetings. We raised too much money too quickly because we could, and it prevented us from realizing the real problems that we had in our business. All the classic mistakes that, you know, we at YC now try to teach founders to avoid, we made them all. Ultimately, we finally kind of came to terms that like, oh, this might not work. Like, what are we gonna do? And so we went back to the very basic YC startup advice, which is talk to your users. If you don't know what to do, go talk to your users. We were many years into the Bump journey. We burned $10,000,000 or more probably, probably more probably $15,000,000. And I asked our team, give me the email addresses of the top 100 users of Bump around the world. And that day, I just emailed them all personally. And I said, hey, I'm the founder of Bump. You're one of our best users. Would you mind talking to me on the phone today? And that day, I ended up talking to maybe like 20 or 30 of those people. And I learned some interesting things. We knew from our data that they were all primarily using Bump to share photos and not share contact But I didn't understand like why, like what was the context? And by talking to those people, I heard over and over and over again that day that they were using it to share photos of their family with their family members. And that was something that was a big surprise to us. We had no idea. And when we thought about it, we realized, well, the bump product is actually like not the best product in the world if you were gonna solve that problem. To solve that problem, you don't wanna like physically have to touch your hands together in order to give somebody some photos. So we realized, well, if we're gonna solve the photo sharing problem, like, we should build a really great app for that. And that's where we kicked off building our second app, which was called Flock. So with Flock, you would just install the app, you'd go live your life, you'd take photos as you normally do, and it would figure out which photos you took in the presence of your actual friends. And we did this with geolocation, with social graph, a bunch of other inputs, and help you share those photos with the people that you took them with. And so we would go talk to people and ask them, hey, what do you think of Flock? Like, isn't it great? And they would say, oh, yeah. I love it. It's so great. And then it turns out they weren't using it. I think it's really hard to get people to tell you hard things. And so the best way to do it is to actually look at quantitative data. Like, look at the logs, see if people are actually using it, look at your retention curves. These things are really simple, especially when you have very few users. You know, this was a pretty tough period. Right? We had all these expectations on us. We had a 50,000,000 users of Bump. It was the most popular app in the world still, but we knew the secret, which is it's going to fail. Our second attempt, Flock, also didn't work. We're running out of money, and so I felt a lot of pressure. This was, you know, probably one of the most challenging periods of of my life, and I just wanted to figure out a way to like keep this airplane from crashing. And so we went to PG. We we talked to Paul Graham and we told him what's going on. Here's here's our status. He made us kind of think a little bit bigger than we were thinking. So we we showed him Flock and we said we've got this really awesome photo sharing app but nobody's using it. And he pushed us, he said, you know what you should do? You should just replace the entire photos app on the phone, then people will probably use your sharing product. And at the time, I thought that was preposterous, like how could we ever do that? That would would be impossible. But as we got thinking about it, we realized, you know, the Photos app on the iPhone isn't that good. And if we were designing it, we would make it way better. So we decided to go build that product with, you know, four or five months of runway left. We called it Photo Roll. We never launched it. It ran only on my iPhone because we never scaled it to work on anybody else's. But it was the product that we wanted as users of photos and iPhones at the time. So I went around and tried to talk to a bunch of companies to see, you know, who might wanna buy Bump, who might value this photo roll idea that we had, and it really was hard for me to accept, but like no one wanted bump. It was not valuable. But this idea of photo roll and the demo that we had built was something that several companies indicated, you know, you might be right. Like, maybe that should be the photos app of the future. Ultimately, sold the company to Google, and the plan was to go turn photo roll, rebuild it with Google technology, and make it Google Photos. I was actually pretty optimistic about what we could do. We had an aligned plan. Like, it was very clear we were gonna go build this product, and I was certain in my bones that it was gonna be a winner. Then we showed up to Google on the first day and there had been a reorg, and all of the plans that we had agreed upon with our sponsor were out the window, and we were tasked to go work on Google plus the social network. And I basically just believed so strongly based on all of the time that we had spent working on Bump that I was certain Google Photos would be a billion user product if we built it. And I kinda just didn't do what my bosses asked me to do. And it created a ton of conflict. I was definitely not the model employee. I just kinda did it on the on the back burner. I would go every day and do my day job, and then in the afternoon, I'd go spend some time with our lead designer and design Google Photos. And we did that over several weeks, and we got to a point where we had a plan for, like, what we would go build. I started to get some, support from the engineers on the team. They all looked at what we were working on, and they said, oh, I want that product too. Like, why don't we build that instead of this social network that we don't necessarily want? And we just kinda like slowly got some groundswell support despite the fact that our our bosses really were explicitly telling us not to do that. I think a big part of this for me personally was we had had this enormous opportunity with Bump and then by many measures, we'd blown it. Right? We we ruined it. And I didn't wanna be a loser. I didn't wanna have spent the last five years of my my life building this thing that ultimately like wouldn't have any legacy in the world. And I saw the opportunity with Google Photos to build something that would be very long lasting, that would make all the work that we did on Bump, the 30 people that worked at Bump over those years, make all of their contributions actually matter in the world. And I just couldn't let it go. Like I couldn't say no to that opportunity. I didn't want bump to be a failure. And so I just didn't take no for an answer. When when the bosses told me, you know, we're not doing Google Photos, I said, okay, boss. And then I went and worked on Google Photos. So ultimately, they told me to leave the team. Right? They in fact, twice I was fired from the team and told to go find a new role at Google. I called in a bunch of favors. We had a bunch of friends throughout the valley that knew various people at Google, and I just used every single pathway I could to get support to build Google Photos, and eventually we won the battle and we were given the green light to go build it. So I think this is a lesson that took me a while to learn, but you can take way more risk than you think. And if you do, there's big upside available. So once we got the green light, you know, it was a a team of, like, 20 of us from Bump latched on to maybe a team of, like, a hundred people, core people from Google with access to all of this incredible technology. And we were able to build all of Google Photos basically from scratch in about nine months, and we launched it at Google IO in 2015. I'm thrilled to introduce a brand new product, Google Photos. The core idea of Google Photos was a home for all of your life's memories. It was a place you could keep your photos and videos. We did very early pioneering work on AI to make them searchable, organize your photos by face, create things, do editing for you. It was this idea of building a photo assistant for every human on the planet. Google Photos was a hit from day one, and it grew like crazy after that. You know, things were great. We were like an autonomous team inside of Google. We could build what we wanted. I was the product lead. Probably the best period of my career in terms of just building and iterating really quickly. The next few years, things were great. Google Photos grew to more than a billion users in less than four years, which I think is the fastest growing product of all time, at least at the time. So things were good. We were popping champagne in the office, everything was groovy. And then I got cancer. Whale? We know. No. It's leukemia. Surprise. I was feeling just kind of a little tired. This was in the middle of COVID. We had just had our first kid, so I had a five month old. I wasn't sleeping very much. I just kinda felt a little run down, a little tired. Made sense. I had been working nonstop for the last fifteen years, but I decided to, you know, on a whim, go to one medical on Valencia Street in San Francisco and get checked out. The next day, they did the cursory blood test just to be sure. And I got the emergency phone call from the Atlanta dispatch center. And the person on the line said, you need to go to the ER as soon as possible. There's something very wrong with your blood. I went to the the ER in San Francisco with my wife. You know, we're double masked. This is the height of COVID. And they took me back and poked and prodded and, you know, the doctor's faces were all very serious. And so I realized like, oh, shit. This might be a big deal. For twenty four hours, they really didn't have anything to tell me. They like ruled out a few things, but it was clear they didn't know what was wrong with me yet. Just talked to the ER nurse here. It doesn't look good. I remember that night was probably the hardest single night of my life. I thought I might die. Like, I I tried to calculate the probability in my head just given the inputs I had I had been given. What was the chance I didn't wake up in the morning? And in my head that night, I had pegged it at 50%. So I thought like that was it. There's a chance, a coin flip, maybe I don't wake up. So what did I do? Like when you you know, think about being faced with the end of your life and you you can imagine it sometimes and think like what would I do if I knew I was going to die? Well I did And what I did was look at photos and videos on Google Photos of my family. I decided I don't wanna die in my sleep, so I'm gonna stay awake as long as possible tonight and just enjoy the memories that I've had. And then I fell asleep. And I woke up the next morning and I was alive. And it was pretty amazing to wake up and be alive. You take that for granted every day, don't you? But then that day, they came in and they said, hey, we're gonna do one more test. And they did a bone marrow biopsy and they pretty quickly concluded I had leukemia, which was not good news. But the good news was there were paths to treat it and the doctor said, we're gonna get started tomorrow. And so at that point I was kind of like, alright, I got dealt a tough hand, that sucks, but I know what I need to do. And I've done hard things before, so let's get it done. So the treatment plan was basically one year of what I would call hard chemo followed by three years of easier chemo. It was a challenging year. I was in the hospital for thirty eight days straight. Harper, it's day 26 of Papa's chemo. We're almost done. We're just waiting for the cells to come back. Right? I remember when I got out, my wife picked me up and we rolled the window down of the car and I smelled the smells of San Francisco and it was like the most amazing thing that I had ever experienced. It really changed my mindset of how I wanted to spend the rest of my life. Go. Go. I realized one more thing which was the job that I had been doing at Google over the years, it it had evolved and it wasn't anymore the job that I loved which was building products for users. I just got this like bonus life period granted to me. Like I thought I was gonna die and now I didn't and I have this like extra piece of life. How do I want to spend it? And the answer was not to be a bureaucrat at a big company. I wanted to work with people who were building the future. I left Google in September 2022 and joined YC and started working with founders immediately. Working at YC is great. You know, you you get to be in the trenches working with the people who are at the frontier of the future, and you get to tell them all the mistakes you made and support them along the way and maybe be that honest voice that, you know, I wish I had had in hindsight in building my startup. Having gone through what I've gone through both in the personal realm and also professionally, I've realized now my role is to be the coach rather than the player on the field. Like be the person who can help the next generation of founders build the products that we will all use in the future."
  },
  {
    "name_video": "2024’s Biggest Startup Trends",
    "description_video": "2024 has been quite a year for AI and startups. As we head into the holidays and the new year, the Lightcone hosts reflect on this year’s biggest startup trends, moments, and breakthroughs.",
    "related_categories": [],
    "page_url": "/library/Lx-2024-s-biggest-startup-trends",
    "youtube_url": "https://youtube.com/watch?v=z0wt2pe_LZM",
    "mp3_file": "downloaded/2024’s_Biggest_Startup_Trends.mp3",
    "mp3_content": "The wildest thing right now is you can start a company that can make tens of millions of dollars literally in twenty four months, and, you can do it for potentially, you know, 2,000,000, 5 million dollars. A year ago, I remember many of the startups in the batch would get sort of enterprise proof of concepts or pilots in particular, and there was a lot of cynicism around whether any of those pilots would translate into real revenue. Fast forward a year, I think we have all firsthand experience that these pilots have turned into, like, real revenue. It's still early days, honestly. Like, it you know, we sort of breathe a sigh of relief right now in 2024, but it's anyone's game, honestly. Like, these things are moving so quickly. Welcome back to another episode of the Light Cone. I'm Gary. This is Jared, Harge, and Diana. And collectively, we funded companies worth hundreds of billions of dollars right at the beginning. So 2024, what a year. How are you feeling about this, Haj? Pretty great. I think this is the year that everything broke in favor of startups. What I've been thinking about a lot recently is when ChatGPT launched two years ago now, the immediate consensus view was all of the value would go to OpenAI. And very specifically, do you all remember when they announced the GPT or the ChatGPT store? Yeah. Like, the I remember the consensus was everything that was built on top top of ChatGPT was a GBT wrapper, and the App Store was just gonna really be released and crush every single person trying to build an AI application. And OpenAI would be a ginormous company, but there'd be no opportunity for startups. Sounds kind of ridiculous to say that now because Who even remembers the ChatGPT store? Exactly. The ChatGPT store itself was a nothing burger. But, like, more more importantly, what are the big AI applications today? Like, I'd say outside of Charjibouti itself, the breakout consumer application is Perplexity. The breakout enterprise application is probably Glean, maybe. In legal tech, you have case techs. You have Harvey prosumer, you have photo room. Like, there's the point being there are many, many applications that have been built not by OpenAI. It's been a great time to build startups. Yeah. The wildest thing right now is you can start a company that can make tens of millions of dollars literally in twenty four months from zero. And you can do it for potentially, you know, 2,000,000, 5 million dollars. That's sort of the story of one of these companies, OpusClip, which never had to raise a real series a, and that's something that we sort of see across the YC community as well. Yeah. I think that's a particularly important point that you can do it as a startup without rise raising tons of capital. Because post the GPT store launch, I then remember Anthropic and Claude emerged. And the consensus view for a while was all of the values gonna go to one of these foundation model companies. And that the only way you can compete in AI is to raise huge amounts of money either because you've got venture capital or your Amazon or Facebook or Google with tons of cash already. But that if you weren't one of the big foundation models, there would be no value. And the applications built on top of these things would either be built by the foundation model companies themselves or just not be that valuable. Again, something that turned out to be completely not true. Right? And in particular, what drove that is open source. Like, the weird series of events where meta like, the weights being leaked and, like, meta just, like, rolling The torrent. Yeah. Right. That's gonna force the hand for meta to launch a LAMA, which is funny. And people thought, oh, was just this cool open source model, but it was eighteen months behind OpenAI. And people started doing a lot of derivative work out of it. It's like vicuna and all these other animals related to llamas that came out. And it took the old llamas, one of the companies at YC as well that enable people to do local kinda Docker development, like, models running on device. It was pretty cool, but people didn't think that they were gonna be able to catch up. And the thing that changed from 2023 to 2024 is that during the summer, it was a turning point. It was the first time that the top foundation model in all the rankings benchmarks was LAMA, and that was a shock to the community. Yeah. So it turns out choice matters, and choice means that it's not as much about the model. I think the model still matters quite lot. But once you have choice in model, it means you can't have this sort of idea of monopoly pricing. And you have that model. Your competitor also has that model. But all the other things seem to end up mattering a lot more, which is product, your ability to sell, your ability to actually adjust to user feedback, your ability to get to zero churn. All of those suddenly become far more important than capturing a light cone of all future value through the model. Right. A very specific way I I felt this is I remember a year ago working with startups in the batch that were essentially building model routers just like an API to call like a specific model. And I remember the a lot of the motivation for that at the time was reducing cost. It was like, oh, like you don't wanna just like burn up all of your ChatGPT calls. You wanna spread them out across, like, various different models. And the the the argument against that was just, oh, like, the cost of all this stuff is going down to zero anyway. Like, there's no value to be having being like a model router and no one wants to build their applications with a model router. They're all just gonna call whatever is the best model. I think fast forward a year, like, that's totally not true. Like, from what I can tell, the the model router was actually a really great entry point into just building sort of a new stack for building LLM powered apps. And most of the the applications we're seeing, I think they just don't wanna be beholden to a specific model. Does that map with what you've seen? Yeah. Actually, one of the things we've seen now in the fall batch that just presented at demo day, which is one of the trends that shifted from summer twenty four and winter twenty four, was precisely what you're saying. Companies started to use multiple models for the applications, like the best one for speed at some point because sometimes you need to parse a lot of the input very quickly. It's fine if it's a bit more lossy, and then you need the bigger model to handle the more complex task. So a lot of companies in fall twenty four have this actually multiple model architecture to use the best one for the best task, which is similar to the concept of the model router, but it was the idea evolved. Instead of being being more of a routing, it was more of a orchestration. I think a concrete example we gave couple episodes ago was Canfor. It was a company you work with. They use the fastest model for parsing, like, PDFs, and the more complex ones, they use o one, and that's that's how it's done. And other companies that's doing fraud detection, they have this concept of, like, a junior risk analyst where they just use, like, a fast and easy GPT four mini, and then they use the bigger one with, like, o one. Or the other example is, I think, Cursor talks about it in their episode with Lex Friedman. They also have this complex multi architecture with multiple models, and this is why it works well. It's like they do one very specific for predicting what you're gonna type next, but one for understanding the whole code base. So very different tasks. So that's definitely happening now. Yeah. The other thing that popped up for FallBatch, there's a company I'm working with called Variant. And what they're trying to do is take basically state of the art open source LLM models that can do cogen and then teach them aesthetics. So starting with icon generation. And so they built this huge sort of post training workflow that should work on you know, as the open source models get smarter and better at cogen broadly, they can just, you know, take the next version of that and then take their post training architecture and dataset and then basically teach a given model aesthetics. So what a certain thing is supposed to look like and not in a diffusion sort of way, but actually at the SVG level. And we think SVG will actually translate into all kinds of aesthetics. So it's an interesting approach and like one of the newer ones in that post training is a whole coherent way to sort of skip the whole idea that all of the value is like accruing into the model, especially because of open source to your point. The other thing I've I've been having flashbacks to is a year ago, I remember many of the startups in the batch would get sort of enterprise proof of concepts or pilots in particular. And there was a lot of cynicism around whether any of those pilots would translate into real revenue. Lots of parallels to crypto and how anytime there's some new interesting technology, well, blockchain more specifically than crypto. But anytime there's a new technology, enterprises always wanna run pilots and POCs because it's someone's job to, like, check off. Yeah. We did the, like, hot new technology thing. The chief innovation officer must have his due. We've spoken about this one of our one of our episodes, I think. And, again, fast forward a year, I think we have all firsthand experience that these pilots have turned into, like, real revenue. And if anything, the startups in the YC batch now are going to sell into real enterprises faster than they have before and are ramping up revenue and reaching milestones like a million dollars ARR faster than I've certainly ever seen. Yep. The fall batch just did this actually again, which is actually the first time I think we noticed it was actually the summer batch of this year. And one of the funnier things that we realized was, do you remember when Paul Graham would tell us how fast you needed to grow during the YC batch? 10% a week. 10% a week. And the wild thing is, in aggregate, across both, you know, summer and fall batches, that's what those batches did. Wow. So which I don't think ever happened Over the course of y c. Yeah. Three x over the course of y c, which I don't think has ever actually happened On average. On average. It was only the best companies that did that, which is the top quartile or something. Right? So the companies are better. The general thing that is true is just that the time it's taking to reach a hundred million dollars in annual revenue is trending down. Yeah. And not only that, we had dinner with Ben Horowitz recently. And remember he was saying when they started Andreesen Horowitz, the common understanding was that in any given year, there'd only be 15 companies that year that would even make it to a hundred million dollars a year revenue. And they said they ran the numbers the last twenty years, and every decade, the number of companies that could actually make it to a hundred million dollars went up by 10 x. So what was 15 per year maybe twenty years ago, I mean, we're talking about 1,500 companies a year that have a real shot at actually making that number. And when you combine that with what we're seeing in the summer and fall batches, it's not that surprising. And Jared had a really good argument on our last episode about how vertical AI is gonna enable this to have 500 plus companies to bloom. Yeah. That's why it's growing so fast. It's because the value prop to companies of these products is so incredibly strong that, like, they're just flying off the shelves because, like, companies are smart, and they can do an ROI calculation. And when the ROI is fantastic, all these all these truisms that people believe about enterprise sales cycles and, like, what it takes to get big enterprise deals go out the window because companies are smart, and they'll make rational decisions. You know, Haj, there there's another way that this broke in favor of startups that I was thinking about. It's hard to even remember now. But a year ago, one of the things that people said a lot was that these LLMs are not reliable enough to deploy in the enterprise. They hallucinate. Yeah. Yeah. That that was why a lot of people said, like, the these pilots and POCs, like, won't translate into real contracts is because, yeah, it's too risky of a technology for people to actually deploy. Yeah. And not only is it translating into real revenue, but it's translating into real deployments that are, like, being used at large scale, you know, doing thousands of tickets a day. And I think it's because we've learned how to make the agents reliable via the kinds of techniques that Jake talked about when he was here and just the all all this infrastructure has grown up around around the models that's enabled people to make them reliable. Yep. That's actually a big trend. This year is this concept of thinking of AI more as agentic. Mhmm. That is a term that kinda bubbled up a lot this year. It was not in the bubble space of conversation last year. Last year was more about a lot of things that were kind of a chat like. Chat to p I mean, that was kind of the riff on it, but now you're remixed into a bunch of agents for x y z. And we just I mean, you just put out Gary just put out a great explainer video about computer use from Claude, but just the capability of the models keeps pushing Yeah. In the direction of just being able to do, like, complex multi step things and actually take over your computer and call other applications and and perform complex tasks that just didn't seem possible a year ago. What about regulations? Seems like we sort of dodged a bullet there with ten forty seven, and it looks like some of the Biden EO is not that likely to survive the Trump White House. TBD, what that means in the longer term. But certainly, one of the things that we were very worried about was that some certain amount of math beyond a certain level would suddenly become illegal or require registration at your local office. It's certainly been a weird time to be in tech because I've never experienced software and technology intersecting with politics so much. And in particular, I'm not used to genuinely caring about national politics affecting startups in a YC batch or just, you know, companies that are less than a year old. But it did really it did really for a moment was worrying. It wasn't clear whether the startups would actually be able to build innovative AI applications versus suffering from regulatory capture from OpenAI and a few big players. We're obviously very glad it broke in favor of startups. Seems like we're still in the early game. Right? I mean, it's very easy to see that the platforms themselves really will or could possibly resemble, you know, the Win 32 monopoly. Right? Windows has access to the APIs. They, in fact, know all the stats about what's working on their platforms. And guess what? They can build it into their platform. You know, we sort of breathe a sigh of relief right now in 2024, but, you know, it's anyone's game, honestly. Like, these things are moving so quickly. I wouldn't totally breathe your last sigh of relief yet. You know? It's we we gotta keep working on this. Okay. So it's clearly been a great year for startups. What else has been happening? Who else has it been a great year for, do we think? There's certainly been some big funding rounds. Right? Like, OpenAI unsurprisingly has raised huge amounts of capital. Scale? Yeah. Even within YC, though, we've seen, like, scale AI has really broken out this year. $6,000,000,000 for OpenAI, one billion dollars for Scale, a billion dollars for SSI, the new Ilias Setskiver startup. Scale, I think, is just worth talking about because it's such a classic startup story. I mean, you were there in the early days. Right? You interviewed them for YC. Yeah. Tell us what the idea was that they interviewed with and how they ended up landing on what, you know, is probably one of the best startup ideas of the last ten years. The fun thing about the Scale dot AI story is that it is the sort of epitome of the, like, classic YC startup story. There's other kinds of startups that get started, you know, like SSI, for example. That's not a typical YC startup story where, like, some very well established people raise a billion dollars with, like, a PowerPoint pitch. But, like, Scale dot a I is, like, the classic story of how, like, young programmers can just gradually build a, like, $10,000,000,000 company over time by being, like, smarter and harder working than anybody else. And so, yeah, when Alex, interviewed at YC, he wasn't working on anything related to AI. It was a completely different idea. And the idea for Scale dot AI got pulled out of him by the market. And it's it's actually still, like, several pivots because, like, the the original idea at YC didn't have anything to do with AI. And then for a long time, he was basically doing data labeling for the self driving car companies. But they applied as I remember, they they applied with, like, a health care related idea. Yeah. It was a website for booking doctor's appointments. Okay. Yeah. That's cool. And then they pivoted during the batch. Yeah. Do you remember how they came up with the data labeling idea? Because this must have been what was this? February? Yeah. The way they came up with the data labeling idea was that Alex had worked at Quora, and Quora had to do some data labeling for, like, moderation and stuff. And so at the time, the big data labeling service was Amazon Mechanical Turk, and they were deemed unbeatable because they were, like, run by Amazon, and Amazon could throw infinite money at it. It was always at scale it was at, like, like, quite large scale already. But Alex had a unique insight, which is he'd actually used Mechanical Turk at Quora, and he knew that it kind of sucked to actually use it. And so he he he had this sort of, like, unique insight on the world, and so he just tried to build a better Mechanical Turk, basically the version he would have wanted when he was at Quora. And as I remember it, they really they their early traction came almost entirely from one customer, Cruise. Cruise. Right? Yes. Which needed to do tons of data labeling on all the images that the cars were taking as they were driving around San Francisco. You gotta, like, draw a circle around the traffic light and thing like that. And the the cool thing about scale is that they've actually caught two waves. So they, you know, accidentally caught the first wave of all these self driving car companies. Because ML took off at that time in computer vision, there was just an unprecedented demand for label data for training sets that just hadn't existed before. And so they were able to ride that wave. And then as that wave was like cresting, LLMs got big, and all of these companies needed to do RLHF at very large scale. And Scale was just, like, perfectly positioned to move into that business as well. Yeah. They I think the Scale story is just so interesting because it was pre LLM. It was it was clearly a multibillion dollar business anyway. Yeah. And LLM it called the LLM way, which is now propelled into probably it's gonna be like a hundred billion dollar plus company. And I'm seeing that at the ground level too, where many companies I had that maybe finished the batch or even pre the batch didn't have an idea pivoted into an AI idea that's taking off. Like, I'm just seeing much more success in founders who waited out and can find an idea that they just couldn't before. I have a company from a year ago. They proved they proved the whole batch. They couldn't find a great idea. It actually took them six months after the batch until they realized one of their parents ran a dentist office. So he just decided to go hang out at the office to see, like, if there was anything he could automate. And they just ended up building an AI back office for dentist offices. Love it. And now it's just like their week over week growth is fantastic. It's doing really, really well. And I'm seeing lots of cases like that spring up. Definitely seeing that as well. I think there's something about the advantage of having all these very hardcore young technical founders that are willing to kinda just bet the farm and go all in on just a little bit of a glimmer of, oh, this is where the future is gonna be. Let me just try it, and then it actually ends up working. Like, a story with the dentist. I have a lot of teams that pivoted as well into different spaces where they kinda found that glimmers. Like, oh, computer use came out, and they have a couple companies that are working and betting and going in that direction, and it's, like, working well. I mean, it's it's still early. I mean, this is just a fall batch, but that's cool too. Okay. So what are some of the the trends that we've seen or some of the the specific trends and waves that startups have been riding coming out of the batches? Voice AI is something we've talked about. It's clearly maybe the most promising vertical for AI right now in terms of just raw traction. Do you think voice is a winner take all, or will it be something that has sort of a hundred different verticals that are very tailored to those specific verticals? That's literally one of the questions I get from some of our voice AI startups themselves. They're like, should I be going horizontal, or should I just continue to grow when within my vertical? It feels to me like voice itself voice is I am just like yeah. It touches everything, and there's so many different applications for it that you can there's probably infinite applications to build where voice is the interesting element of it. I mean, things that just spring off top of your head, like language learning applications. I'm sure there's not gonna be just one really cool voice AI powered language learning applications. It's probably gonna be multiple of them. Remote work, like teleconferencing is probably like a whole other area where there's interesting things to do with voice AI. And even within customer support, we highlighted a number of companies we talked about last time, company PowerHelp, Kappa dot AI. Yeah. It it it turns out that customer support is not really one vertical. There's, like, many different flavors of customer support, and there's, like, very different on the inside once you get into the details. Because I think there's very specific types of workflows you need to do per industry, and that's to the point of why vertical AI agents are gonna really flourish. I mean, same thing for voice. It's just very different workflows. If you're building the, I don't know, the voice agent to do customer support for our airline, very different than doing it for a bank, very different than doing it for b to b SaaS company, etcetera. Yeah. I guess that question of is there going to be pure horizontal integration is sort of like saying, will there only be one website? Yeah. Or it'd be like saying like, there's just gonna be both. There'll be horizontal infrastructure companies that do really well in vertical applications. Because it say otherwise would be like saying, oh, like, Stripe powers payments on the Internet, and it's also just gonna have all the most valuable applications that accept payments in the Internet. It's just not how it works. Like, there's enough value at just being the horizontal infrastructure layer. So I'm sure there'll be great voice AI companies that just make it really easy for you to build your own voice AI application, while there'll also be hundreds of really valuable vertical apps. What are what are what are the other trends that we've seen besides voice? We were talking about robotics earlier. There's certainly we we are certainly working with more founders building robots this year than I think any year Ever. History. Yes. What's driving that? I have a ex Apple team that's called Weave Robotics that they're going to try to ship a real robot in 2025. It costs about 65, 70 thousand dollars. But that's actually what it costs to have the actuators and the safety needed to actually have it work in your home. I think it's actually driven by this idea that the LLM itself can be sort of the consciousness of the robot. Like, am I doing this thing that, you know, my owner needs me to do? You know, how do I actually interact with them and the other people in the household? But it's funny because then the voice language action model that might actually do a certain thing, like fold laundry, that's almost tool use inside of the broader LLM consciousness. So I feel like that's one of the things that I'm excited to see, you know, will it really work? And I think we're gonna find out this year. I guess the way I think about it, robotics is basically half AI and half hardware. Half of the part of the equation is starting to work. Well, the hardware is still hard. Hardware is still very expensive. Yeah. There's still there's some evidence that being able to actually do laundry, for instance, like, that might be one of the first things that gets shipped. I think the dream case for startups is going to be that you can build just the the AI or the software piece of it and run it on commodity hardware and do really great things. The opposite case would just be actually if the two thing that if you need to be good at the hardware and the software and they're, like, coupled together and you need to produce both, then you would expect Tesla to be the obvious, like, winner in the space and it remains to be seen. I'm pretty optimistic. We have multiple companies, I feel, that are trying to be creative on how to run the models on commodity hardware for specific use cases. It still feels early. It it feels like the robotics hasn't quite hit its, like, chat GPT moment yet. Maybe the moment is self driving cars have been working in San Francisco. I don't think he's talked enough. People who don't live in San Francisco or, like, often don't realize the extent to which these are fully deployed in San Francisco, and regular people are writing them every single day. Yep. I saw Tony from DoorDash recently, and he said he exclusively uses Waymo, like, everywhere. I live in Palo Alto, I have no option forever. I would love to. It'd be amazing. I mean, wild thing is there are only a few thousand of these deployed right now in the entire world. And They're all San Francisco. Yeah. What about big flops for 2024? I, you know, I seem to remember that we started one of our light cone episodes all wearing Apple Vision pros and quests, and we have not talked about AR since. Diana, what happened? It hasn't happened. There's this moment for a lot of the hardware that needs to be a lot more lightweight. Like, we need to get to this form factor, but there's actually constraints with physics to fit all the hardware in such a small form factor. And in order to have enough compute and the optics to fit, it's just super challenging. And I think there's still more actual engineering and physics that needs to be discovered. And that that's it. I I think the algorithms are there, but it's just lots of really hard hardware and optics problems. It's a it's a tough chicken and egg problem because there's not enough hardware in people's hands for it to be worth it for app developers to build apps, and so there's not enough apps for people to wanna buy the hardware. And I feel like the people who did buy like, the the killer application so far seems to be using it as a really large monitor. It doesn't And it does work very well for that. For Yeah. You which in movies. You've actually retained as a as a user, Gary. Right? Yeah. It's great for watching the movies. Yeah. Maybe the one device that I think actually been playing and actually feels good is actually the Meta Ray Barn. Oh, yeah. It doesn't have any of the actual displays, but I really like it for the audio and voice. And one workflow I've been trying out is actually using the Meta Ray Barn and connect it to any of the voice modes for either Chateapiti or Claude and kinda have a conversation with it Mhmm. About a topic? Oh, I haven't tried that. Time. Yeah. Yeah. That's a great idea. That is like a fun thing that I've been doing and just chatting with myself. Maybe look a little bit like a crazy person while you're walking, but it's been fun to kinda learn about different topics. Should we talk about AI coding? Oh, yeah. Twenty twenty four was the year that AI coding really broke out. Yep. I mean, we had the majority of YC founders now use Cursor or other AI IDEs. They just, like, exploded over the summer. Devin proved that you could, like, fully automate, like, large programming tasks. Yeah. All that was this year. That's pretty wild. Replit agents continue to improve. Like, I'm hearing more anecdotal stories of people building Replit apps on, like, their way home from work. Yeah. I'm really impressed. Like, Replit took this technology and popularized it among, like, nontechnical people for the first time. That's really crazy. And even more lower technical version is Anthropix artifact, where you can actually prototype very simple apps and chat with Claude to build really front simple front pages. And then you could prototype stuff as a PM and show it to your engineering team, and it's like a full fledged working version. Yeah. It's wild because it just means that you can one person can do so much more. And do you think it's gonna change the nature of how startups are actually hiring? Are you seeing this yet? Like, some of the founders I've met who recently raised their seed rounds coming out of YC, they're not really approaching it how maybe the classic advice would teach them. In the you know, in the past, you might say, let me try to find, you know, more let me try to hire more people. Like, I you know, there are certain tasks that normally I have to find, you know, the person who did it at my competitor who did all of customer success. And I need to find that person who's under the person who runs that function, and I've got to hire that person and promote them. And they're gonna come with all this knowledge and people networks. Some people are saying sort of the opposite, which is I'm going to get my software engineers to write more processes that use LLMs upfront. And, you know, I probably will end up needing to hire that person, but maybe after the series b or c and not right now. Yeah. I think I've seen that as well with companies after the batch where they're looking for engineers that have more upside, and they're really fully native with the setup with the AI coding stack. And part of the one of the clever interview tricks I've seen is people do pair programming and watch them use the tools, and you can really tell if someone really has tinkered with them. It's actually an engineer cut that that is not only good at coding, but also prompting and telling with when the AI output is not correct. I think the part of reading and evaluating the output of all these AI coding agents is actually a lot more critical. Critical. Yeah. There's been an interesting controversy this past year about AI coding agents and programming interviews, because AI coding agents basically broke the standard programming interviews that companies have been doing for years. Actually, Harj, I'm curious what you think about this you ran a programming interview company. I mean, I guess the the interesting debate is whether you should penalize or prevent people who are interviewing at your company from using cursor or one of these tools to ace your programming interview, or whether you should just lean into it and adapt and test to see how productive they are. I generally think the way these things tend to is more in that direction that I think it will just become you'll just be measured on your absolute output and the bar will go up. I think, like, Stripe, for example, were early on this about a decade or so ago where they recognized that so much of what they needed their programmers to do would, like, build web web application and web software and not do hard CS problems. And so the industry shifted away from the Google style interview of lots of computer science problems and whiteboarding to just give someone a laptop and make them build, like, a to do app in, like, four hours. So I think we'll just see the same thing happen where people just the industry will just adjust, and you'll just be interviewed using these tools and just be expected to do a lot more in, like, a two hour interview than you are today. To your point, Gary, around just the the startups, like, maybe how many people they need to hire or just, how how do they scale, it seems too early to see, like, dramatic effects on that yet. But one thing that I'm interested in is so I watched an interview with Jeff Bezos recently, and he said that well, one, he's back at Amazon working on AI. And two, that apparently Amazon itself has, like, a hundred or maybe it was a thousand. It was a surprisingly large number of internal LLM powered applications, presumably to just run Amazon. The last time Amazon took something, it ran for internal infrastructure and released it to the world was AWS, which completely changed how startups are built. So I'm curious to see if they have interesting applications to run Amazon internally that they'll just release out and suddenly, like, there'll be new stacks to just build and scale your companies on. And we'll see the whole that we talked about in recent episodes of the 10 person, the one person unicorn. One of the applications they did talk about is they did this giant migration for a old version of programming language. Whenever you need to upgrade different versions of database or etcetera, it's like a lot of work. And they use LLMs for it. It was like changing hundreds of thousands of lines of code, and it would have taken engineering project of six months or more. It was done in weeks. I mean, Amazon's just such a perfect use case for, like, LM powered agents doing back office processes. They must have just, like Yeah. Just absolute goal buying of opportunities. And they just launched their big foundation model, actually, that is starting to be top in some of the benchmarks as well. So I think they're trying to be another contender through this race. Yep. That's interesting because, like, from the bottom up, like, certainly from some of the people who still work at Amazon, maybe right out of college, many of them do not have access to LLMs or aren't actually barred from using it from in their day to day. So, you know, maybe that's one of the downsides of organizations. When they get big enough, you know, the future is already here, but it is not evenly distributed even within the same organization. Interesting. But that bodes sort of well for both open source and sort of self hosting LLMs. Like, it's on my to do list to build my own stack of Apple minis and run Llama on my own little cluster on my desk. I bought all the hardware to build my own machine, but then we had a baby and it hasn't happened. Well, at some point. I've been pretty excited in that, you know, YC has been operating back in person at San Fran in San Francisco for some time, but we got a real live demo day Yeah. All the way back. So no more Zoom demo days. No more Zoom alumni demo day. You know, we did alumni demo day right here in this office right, you know, right downstairs. That was awesome. And then we took over the Masonic Center and 1,200 investors all in one room. It was actually really great for the founders, I thought, because it was about a third as many founders than the summer batch. And it was more than two x, maybe three x the number of investors than than who had came to our investor reception party. So was like a ratio of 10 investors for one company, roughly. So I think all of them had a really good time. I'd almost forgotten how great the energy of an in person demo day is. Like, it's just not something that you can replicate over Zoom. The YC demo days also always acted as the de facto investor reunion in Silicon Valley because it's the one event that all the investors would reliably show up at. And so they were really excited that we had brought it back because when when when we weren't doing it, there was no equivalent event. Sort of the homecoming for Silicon Valley. Yeah. So now it's, you know, four times a year, and it's the one time that all the top early stage investors in the world are gonna come back to San Francisco for hopefully that week's festivities culminating in our demo day. So it's a real celebration. It feels like in person in general is back. That's certainly another theme of 02/2024. Certainly, late stage startups that we've been meeting with and speaking to this year, One of the highest priority items has been figuring out how to get everyone back into person, back into the office. I think, like, the era of it's gonna be remote forever is definitely gone. I certainly Good riddance. Yeah. Exactly. Right? And then find, like, yeah, in person is back, and then San Francisco is back. Like, a lot of thanks to you, Gary. The elections recently seem to have gone well. Like, there's a lot of optimism, I feel, around San Francisco. And and Yeah. We have a new mayor. We're hoping that he does the right things. And, you know, we have a very thin moderate majority on the board of supervisors, but we did get rid of some of the worst people who created a doom loop in San Francisco. So I'm optimistic. You know, we didn't get everything we wanted, but it's tracking in the right direction. And I think as in startups, as in politics, you always, you know, way overestimate what you get you will get done in one year, but you always way underestimate what's going to happen in ten years. I think it's gonna take ten years. It's gonna take twenty years. But just as startups went from 15 companies a year to that could possibly make it to a hundred million dollars a year to 1,500 in any given year, Knock on wood. That, you know, I think San Francisco needs to be the beacon for all the smartest people in the world, and that that's actually probably the thing that I'm hope most hopeful for is that we can actually keep building. So from all of us to all of you watching, happy holidays, and we'll see you in the new year."
  },
  {
    "name_video": "Anthropic’s Claude Computer Use Is A Game Changer",
    "description_video": "The age of AI agents is here. Models can read, see, talk, and now, even use a computer all by themselves.\n\nYC President and CEO Garry Tan dives into how Claude Computer Use works, what it can do, and how it may change AI forever.",
    "related_categories": [],
    "page_url": "/library/Lw-anthropic-s-claude-computer-use-is-a-game-changer",
    "youtube_url": "https://youtube.com/watch?v=VDmU0jjklBo",
    "mp3_file": "downloaded/Anthropic’s_Claude_Computer_Use_Is_A_Game_Changer.mp3",
    "mp3_content": "The rocks can talk, but they can also read. They can see, and now they can use a computer browsing the web, clicking buttons, typing text all by itself. The age of AI agents is here. One of the first out of the gates is Claude Computer Use, Anthropix brand new AI agent. Let's dive into how it works, what it can do, and how it may change AI forever. In October, Anthropic made waves when it released a set of upgraded models, Claude three point five Haiku and a new 3.5 Sonic. They also released something special, computer use, but they're not the only ones in this space. We already know Sam Altman is working to recreate Samantha from the movie Her, and OpenAI is said to be releasing its own agent, Operator, in the new year. Google is working on something similar too. The landscape for AI agents is growing fast, and so far, Anthropic is the first of the big AI labs to get into the game. Right now, Claude computer use is still in public beta as developers put it to the test. But already, it's looking like a complete game changer. So how does it work? Claude had the ability to understand images for a while, so the next step was to train it on how and when to perform specific actions, like clicking buttons or writing text based on what's displayed on the screen. Quad has has had for a long time since since Quad three back in March, the ability to analyze images and respond to them with text. The the only new thing we added is those images can be screenshots of a computer. And in response, we train the model to give a location on the screen where you can click and or buttons on the keyboard you can press in order to take action. And it turns out that with actually not all that much additional training, the models can get quite good at that task. It's a good example of generalization. For this, Anthropic needed to train Claude to recognize exact locations on the screen down to the pixel. Anthropic was then able to train Claude to understand what's happening on screen and to reason about how it should use its software tools to do tasks. For example, it might help you automate boring and repetitive tasks. Claude's gonna start taking screenshots of my screen and quickly realizes that the ant equipment company isn't actually in the spreadsheet. Luckily, we get a search match and Claude then starts scrolling through the page looking for all the information it needs to fill out this form. To get started with computer use, developers have to run it in a virtual machine or container like Docker. You'll also need an Anthropic API key. Once that's all set, you can then open a dedicated browser window which shows the user prompt on the left and Claude's activity on the right. Claude starts by analyzing the prompt and deciding which tool to use. As it works, it takes a screenshot at each step to check its progress, making sure the task is on track. If adjustments are needed, Claude loops back to try different actions or tools until it completes the task. This repeatable loop of deciding, evaluating, and acting is called the agent loop, and it's how Claude handles complicated step by step tasks all on its own. So what else can computer use make possible? In their own demos, Anthropic shows us a few different tasks, like this one of Claude helping to plan a sunrise hike at the Golden Gate Bridge. It searches the web, figures out some important details, and then creates an event in Google Calendar. In another example, Wharton professor Ethan Moloch puts Claude computer use to the test by feeding it a video of a construction site and prompting Claude to monitor the site and look for issues with safety. You'll see Claude take screenshot after screenshot, analyzing different parts of the site, making note of all the gear and materials, and trying to spot any potential issues. It even finishes up by putting everything together in a nice, neat spreadsheet. Automated OSHA compliance? Check. By now, it should be clear that computer use is a step forward for AI. Up until now, developers have had to make tools to fit the model, coming up with custom environments where AIs use specially designed tools to do different various tasks. Now, we can make the model fit the tools. That's a powerful change. Computer use opens up so many applications. Businesses can automate repetitive tasks and increase efficiency, while the average user can save time on routine things like booking flights or ordering food. It's easy to see a future where AI agents handle most of the drudge work for us. And for developers, computer use massively lowers the barriers to entry. LLMs have already made tasks like coding way more accessible to the average person, and computer use takes that a whole step further. Computer use is still a work in progress, so it has some bugs and limitations. It's much slower than typical models and has a tendency to crash from time to time. So reliability is still an early concern. Occasionally, Claude will misstep in its tool selection, get confused, or even sometimes veer off task. During one session that Anthropic shared on YouTube, Claude unexplainably started searching for pictures of Yellowstone National Park out of nowhere in the middle of its task. To be fair, humans get distracted and sometimes do that too. Claude does have guardrails. Since it could easily be used for abuse, it steers clear of things like account creation or content generation for social media. It's also vulnerable to prompt injection, a security risk where the model can be tricked to follow different information or prompts embedded in the online sources it visits rather than sticking to the original prompt. Imagine a website prompt injecting Claude to upload the contents of your password manager. That'd be bad. Anthropic thought about this and tries to keep users safe by keeping actions contained to a secure virtual machine, limiting access to sensitive data and strictly controlling approved sites. However, many of these limitations could be lifted soon. Because this beta is just the beginning, Anthropix already said that computer use will rapidly improve to become faster, more reliable, and more useful for the tasks users want to complete. Plenty of startups are getting into the mix too. Just recently, a YC company, Cura, released their own browser agents that seem to outperform cloud computer use on the Web Voyager benchmark, achieving a new state of the art. In the near future, LLMs with the full ability to use and control computers will reshape everything. How developers write software, how CEOs run their companies, and even how we all live our daily lives. Each new groundbreaking application will transform how we work, connect, and live. This kind of AI won't just be an assistant. It'll take on entire tasks that once needed whole teams or companies. So what will you build with computer use?"
  },
  {
    "name_video": "How To Make The Most Out of Your 20s",
    "description_video": "Your 20s can be the most important decade of your life and a great opportunity to take risks and invest in yourself.\n\nDalton and Michael look at the common traits they’ve found among successful founders for a 20s well spent.",
    "related_categories": [],
    "page_url": "/library/Lv-how-to-make-the-most-out-of-your-20s",
    "youtube_url": "https://youtube.com/watch?v=H_XMqRhLhic",
    "mp3_file": "downloaded/How_To_Make_The_Most_Out_of_Your_20s.mp3",
    "mp3_content": "What's the worst that can happen? Yeah. And you just, okay, be explicit. This happens. Okay. Well, that happens Yeah. Then what can you do? Could you go get a job? They're like, yes. And I'm like, okay. So The worst case. This is Dalton plus Michael and today we're gonna talk about how to spend your twenties. Yeah. We are as people who are no longer in our twenties Yeah. We're qualified. Extremely. Extremely people on the internet, man. We have all the answers on how to live your life. We're we're older millennials. In all honesty, I think that we see a lot of young people at YC become really successful. And so there are some lessons that probably can be pulled out and that would apply to people who might not even ever wanna do a startup. So where would you start? How about how about here? Do you know what the hedonic treadmill is friends? It's this thing where no matter what's going on in your life, you will get used to it. Yes. And so when you get a new cool thing, when you're a kid and you get a new toy, you're like, wow. Yeah. This toy is awesome. What a great Christmas. I'll never want for anything again. And then two days later you're like, oh yeah, this toy sucks. It's just like a I want more new stuff. Yes. And so whenever you get new things, whenever you get new rewards you get used to them and they no longer are awesome the way you thought they would be once you get them. Okay? And so the treadmill is you're always trying to walk forwards on achieving new goals or getting new stuff Yes. And it never feels satisfying and you just keep running on the treadmill forever. Well, and I think that there's some dangerous hedonic treadmills in your twenties. And what's funny is like Instagram kind of blew this up in a really awkward way because it's like everyone's sharing videos and photos of them living their absolute best life. Yeah. It's fake. Like they're they're clipping the point 01% of their lives that are awesome. Yes. And they're putting it on a site and you're like, wow, everyone is living a more awesome life than me. Like every day. Every day. All the time. My life sucks. And and it changes kind of what you think your goal should be. So I it what's what's sad and unfortunate is that like there's only so many mean, wow, this is gonna sound really depressing. There are only so many good things. There's only so many toys. Yeah. And like This isn't a speed run to get through them. And you know you know, people who grew up super rich like have this problem of like, oh crap, like I already did all the fun stuff and I have a lot more life to live. Oh man, this sucks. So we definitely see people screw that up in their twenties. And we're arguing or we are arguing that there is a way to hack this. There's a way to hack academic treadmill. It doesn't mean you shouldn't seek Yeah. Like enjoyment. And the hack is to intentionally delay each step Yeah. And to give yourself room and upside Yes. So there's always more steps for you to climb in the future versus speed running it and getting it all at once. Yes. So for example, you gave this example. Yep. The first place you live after college should not be much nicer than your dorm room. Yeah. Even if you got a job in Facebook and you can afford it. Right. And and the reason is you're living your you're leaving yourself a lot more upside there. Yes. Yes. Your first vacations should probably not be that nice. Yep. There are lots of examples. Your first car should probably not be that nice. I think this applies in so many areas and I think that like if you can get those hedonic distractions a little bit out of your twenties, you can focus on other stuff. What should people be focusing on? The best way I've heard this, said is to do the most hardcore thing early in your career because you can always mellow out. You can always pull the rip cord and do less hard things. Yes. It's very hard to go the way other way around. Yes. Like if you've been on mellow chill mode Yeah. And then you decide you wanna be very ambitious and hardcore. Much harder to do it that way. Why do people It's it's interesting to me because that seems obvious. That seems like obvious advice. But I also are like afraid of it somehow. No. I think you're bombarded with you wanna have a good work life balance. I think Yeah. Think you're actually bombarded with like You might burn out. The opposite of that. Yeah. It's it's weird messages very confusing when I was younger. Well, it's I I might argue maybe I was just kind of in in a weird bubble but like, I feel like I hear those messages now. Mhmm. I didn't hear those messages then. Like, almost all of my friends were trying hard. But now it does it almost feels like, oh, if you try too hard you'll pull a muscle. Yeah. Which is so weird. It's kind of like, oh, if you run too hard when you're young you'll hurt yourself versus like, you'll definitely hurt yourself when you're old and you run too hard. Like being young is when you actually How about to riff on it this way? Yeah. If you choose to go to med school, that is a hardcore thing. And once you get your MD, you could be a more mellow doctor. You don't have to be some heart crazy ER doc. Yes. You could be like a part time plastic surgeon once you go through med school. You're doing the hardcore things early and you have like a lot of choices. Yeah. Same thing with law school I would say. Yeah. Same thing with people that work at hedge funds or investment banks. Yeah. But I think a lot of people that opt into other careers do the less hardcore thing. Mhmm. And again, maybe they should. Maybe if you wanna be a novelist you should be a really hardcore novelist in your twenties and write a lot. Yeah. Yeah. And so I think regardless of the career you're going down Yeah. The more hardcore path just gives you more optionality when you're And I think this comes back to a point we talk about a lot which is that like you don't really know your capacity. Yep. Don't speed run all the fancy things in life and do hard shit early. Get used to it. Get comfortable. I think the third thing that comes up a lot in your twenties is it's an opportunity to be risk seeking versus risk avoiding. And it's hard to contextualize how much of your life you'll spend being risk avoided. Yep. But it's like you have kids, you have a mortgage, you have elderly parents, you yourself are elderly, you are less willing to take risk. It's like most people in their twenties don't have any of those things to worry about or many, shouldn't even say most. Yet sometimes it seems like they're not taking as much risk. Yeah. What what do you think is going on there? From talking to founders, a lot of them are told by their parents to not do something risky and to not take risk in their twenties. Yeah. Again, I'm not really sure exactly where that's coming from but doing a startup is seen as risky like you can destroy your life if you do a startup Yeah. Or something like that. So I think it's fear. And again, perhaps justified, I don't really get it. This is the thing that always gets me. It's it's it's not the idea that you get a job and you can do that job at that company for the rest of your life has already been disproven. Yeah. Like, so it's like I understand the feeling of fear but like the result like, oh, if I get a job at IBM today, like I go there until I'm 60? Like, not. Sorry. And so I think the other thing that happens when people think about risk is they have to test themselves. It's hard to kinda know what you're made of. It's easy to like think you know what you're made of and never test it than to actually be out there uncomfortable area and like have to put a push I think one good exercise you could do on that point whenever people talk about risk or they're worried about it is I encourage them to just be like, okay, well let's talk about it. Yeah. What's the worst that can happen? Yeah. And you just, okay, be explicit. This happens. Okay, well if that happens Yeah. Then what can you do? Could you go get a job? They're like, yes. And I'm like, okay, so The worst case. Like it's like I would just I would advise this for everybody out there. Yeah. You know, talk through explicitly what the worst thing that could happen Yeah. If you take a risk is. Yeah. And it might not sound as bad as you think once you name it, once you talk about it explicitly. Well, and and here's the interesting thing because we're making this for general audience. I wanna leave open the door that maybe it it is really bad. Yeah. Right? Right. Like, and if it really is bad Don't take risk. Don't take the risk. Like, we're not saying you should always no matter what starting conditions be risk risk seeking. I think what we're trying to say is there are a lot of people who their starting conditions would allow them to be risk seeking but they don't realize it. Yep. And that's Or they realize later and they're like, wow. Yeah. Whoops. Like that was dumb. Yeah. That's a tricky one. You brought up parents. I think it's probably worth revisiting. We're parents. Yep. It's hard to not want to have a vision for your kids. Yeah. It's hard to not have expectations. It's hard to not have dreams. And maybe they're not like, Oh, I want them to be a doctor. Right? For some people it is. But it's hard to not have that. Right? It's hard to not feel responsible. Yeah. But your twenties is really the first moments where your plan's kinda your own. If you're following your parents plan you chose that. What? Right? When you're 14 if you're following your parents plan maybe your parents chose that. Yeah. But when you're 23 and you're following your like that's your plan Are you living your own life with the expectations of you? Yeah. Because at some point you're gonna wake up and Realize this is my plan. This is my life. Yeah. And I think what's interesting is like maybe your parents plan's great. Maybe it's bad. Like who knows? But I think there are a lot of people who kind of look back and they're like, oh, I didn't question my plan enough in my twenties. Yeah. Like I woke up in my thirties and was like, wait. Did I really like the path that I walked? Did I ever spend a lot of time thinking about what, do I want that or not? And then they realized in their thirties, like, that's a little, some of that's baked. Yep. I think the biggest point around these lines is also peers and who you spend time with. Like I always like to reference your personality is just an amalgam of whatever the six or seven people you spend the most time with. Yeah. And a lot of the things that we think are our own ideas or our own identity is bullshit. No, it's It's just your peer, like this is, you just soaked it up from your peer group. Yes. And so to the extent you're thoughtful about who you're spending time with and asking are they making me better? Yeah. Am I around people that make me more optimistic? Yeah. That make me wanna do things? That is kind of a big factor into all the life decisions we make. It's funny, think about how much of our lives are dictated by who we get randomly assigned as roommates in college. Huge. Like is there any bigger decision in what kind Negative or positive, yeah. Yeah, what kind of person you'd grow up to be is like random roommate assignments like freshman Yeah. Okay. Big deal. So this is hackable, kinda like the hedonic treadmill. Yeah. You could choose to spend more time with different people based on who you wanna be more like. We're not trying to say your friends are bad. Nope. What we're trying to say is like, if you want something different, like if you want to change. If you wanna do a startup having more friends that are startup people that won't be like startups are dumb, startups are risky, why would you wanna do that? And instead of like, oh yeah, I'm doing a startup too. Do you see how that would? Yeah. Like everyone becomes a centrist in whoever they're surrounded by. Yeah. And so if you're surrounded by extremists on any topic, you'll think you're a centrist but you're actually an Yeah. And so startups aren't weird at all in certain groups and in some friend groups they don't get it. Yeah. And it's tricky because it's like, you know, we don't wanna make this corporate and transactional. It's just more like, hey, know how powerful those people are around you and like understand a hack to changing your life is changing those people. And hey, changing those people might require changing where you work, changing where you live, moving to a different city. Like, one of the nice things about your twenties is you can make big decisions like that and they usually only impact yourself. Yep. You can move to a foreign country, you can move to the big city, you know, you get a job where you don't know anyone Yeah. Period. Yeah. And that's no big deal in twenties. Everyone's doing And I will tell you this, your really good friendships will survive. Like, your really good friendships, you can talk to that person once or twice a year. You can see them once every three, four years and they'll stay your friends. So you're not maybe risking as much as you think you are by changing where you live or who you're living with or what industry and what job. You you're not changing as much as you think you are. I know it seems scary. Let's move to relationships. Dalton challenged me to to offer what I might be might say is a controversial piece of advice. And one controversial piece of advice I would have is I think you should seek long term relationships in your twenties. I think a lot of people would say, oh, you don't wanna get tied down with a partner and like yada yada yada. And I'm not saying like get married, buy houses, have kids. I'm saying I think that there is something really powerful about having a strong partner, especially when you're trying to do hardcore things and you're trying to work really hard and work in maximum effort. I think then having a really good partner actually unlocks some of the gears. I think having someone to come home to that you really enjoy being around kind of recharges you faster. I also think being in the practice of being in stable relationships is good. Mhmm. Like, it is a good hobby to develop. That's how Your future self will enjoy that you are you you like stable relationships. And I think that the opposite hobby can harm. Right? Like the person who never wants stable relationships that just wants to be on Tinder that like doesn't ever wanna be tied down. I'd argue that like That ghosts everyone. Yeah. Yes. That's like is trying to do FOMO every minute. Right? You're kinda training your body at the wrong lessons. Like, if you do aspire to have a family one day, you know, just you can start orienting yourself in that direction in your twenties or you can, like, create debt for yourself in the twenties. I'd argue the debt thing is harder. So yeah, that would be my controversial piece of advice. What's left? What are our final piece of advice for today in the Let's let's rebut ourselves. So so Michael Mhmm. What do you guys know? This is all startup advice. Yeah. Most people don't wanna start a startup. Why is any of this relevant to me as a person that doesn't wanna do a startup that's watching this video? Well, and and I think this is what's interesting is that I think that we're not trying to presuppose what you wanna do with your life. I think we're kind of trying to say, hey, if you have something tricky you wanna accomplish, here are some tricks that can help you. And I think that there's a lot of commonality between the startup founder experience and the experience of someone who wants to do anything that's really hard. I think the scary thing that people don't wanna hear is that investments in your twenties pay off for the rest of your life. Yeah. They don't wanna hear that. Whether they're good or bad investments. Like And it's like I I think anyone who lived through a childhood where you're kind of told, hey, every door is open to you. It's a world of opportunities hates being told, hey, this decade doors start closing. Like that. No. That's not feel good, Michael. No. No. But it's true. But it's truth, man. It's truth. Alright. Other common rebuttal questions? Oh, well what if, you know, I have debt or I have to support people? Like, you guys are giving all this advice. This is just not applicable to me. This is not applicable to most people, you know. So I think that like that is certainly true. I think that there are a lot of people out there that have extremely specific limitations. Hell, you know, hey, some people are stuck in a country they can't get out. Would say, once again, this is not go do a startup. Startups are for everyone. Like, that's not what we're trying to say. What we're trying to say is that, like, doing maximum effort is probably the only way you get yourself out of a not great situation. Many not great situations are get out of bull, or at least there you can you can ameliorate them, you can make them slightly better if you work really, really hard. One of the things I have noticed is that the people who are the most, I don't know, like who who who have the most challenges like when they can be optimistic and when they can see themselves as like agents as opposed to kind of victims, crazy shit can happen in their lives, you know. Like crazy shit can happen by just switching what's in their head. So yeah. Like you might not be able to apply to YC. You might not be able to move. You might not be like, fine. Yeah. But like there's probably something in your life that you can apply one of these lessons to that has a chance of making things a little bit better. I think the last thing that comes up and this definitely comes in the context of YC like, you know, what if I didn't go to a good school? Like I feel as though the people who went to a good school, they still have a lot of doors open. I'm getting out in the working place and I don't see the doors. Trying to identify what companies or workplaces have the most interesting people doing the work you're most interested in. Again, even if it's not a tech startup beginning it could be like magazine or something like, you know, any But where you're like, wow, this is really good work they're putting out. Yes. I would try to get any job there. Yeah. Because once you're in the room Yeah. Once you get into an organization, you will get to meet and be around all these other people and soak up the culture. And there's so many people I know in Silicon Valley that didn't go to a good school Yeah. That just got in the door somewhere Yes. With any kind of random job Yes. And once they were in there their intellect and their skills and their abilities allowed them to win people Yeah. And then they're good. You're giving subtle advice here because this isn't this isn't go get this brand on your resume. This isn't oh go get a job at Facebook. Like this is where are the super talented people and can you get yourself around them. Yep. And what's interesting is that like many cases super talented people aren't at the big companies Or if they are, they're not at every part of the big company. Fair. And so many times super talented people are at the beginning of stuff Yeah. Where getting in is easier. Well, is what's funny about smaller startups is they're not famous yet. They are risky Yeah. But you could get hired there. Like, it's not as hard to get hired there as the larger places. Yeah. But then you're like right in the pit of the craziness when you work in an earlier stage startup. Yeah. I mean, we had an intern at my startup that went on to get into YC, start a company that's generating tens of millions of dollars of revenue. Yep. And did not go to good school. I remember when he was applying for the job, he was working as a security guard for a housing development. Yep. That was his job. How did he get hired at your company? You know, we wanted someone to be a content moderator and we were like, what are your qualifications? He's like, well, my qualification is I'm the security guard and I work basically the gate and it's like a college kind of housing community and nights and weekends are just crazy. And I'm and I'm just like, you know You're hired? It wasn't you're hired. We didn't hire him to be a community Okay. Director. But it was definitely like you're putting your best foot forward and that sounds hard. Like actually like like like I I've been one of those kids. Like yeah, like you you you've done some hard shit. And then what I would say is man like getting in the game is as simple as like like Yeah. Because once he got into your startup then he was hanging out with you guys Yeah. Like all the founders and It's just you're in the game. You're in the game and I think this is what's so cool about startups is that like, man, small startups, you know, they might say, oh, we're looking at people who only went to this school or only got this job. But like, you know humans are reading every email. Like, you know there isn't a machine. Like, if it's a 20 person startup, five person startup, it's like your email got read. Like, why? And, man, when people are in those startups and they're desperate, they're open to giving people opportunities. So to wrap this up, probably the overall TLDR we're trying to share with you is, man, don't be the 30 year old who wakes up and says, what happened to my twenties again? This is one of those things like you know hard life troops, life does move. Yeah. Years don't come back and most of the most successful people we know they were laying that foundation in their twenties. Alright. Good job. Good. Thanks."
  },
  {
    "name_video": "How To Start A Dev Tools Company",
    "description_video": "Nicolas Dessaigne shares his advice for founders building a dev tools company from the ground up",
    "related_categories": [],
    "page_url": "/library/Lu-how-to-start-a-dev-tools-company",
    "youtube_url": "https://youtube.com/watch?v=z1aKRhRnVNk",
    "mp3_file": "downloaded/How_To_Start_A_Dev_Tools_Company.mp3",
    "mp3_content": "Hello. My name is Nicolas Dussain, and I'm a group partner here at YC. Before that, I was the co founder and CEO of Algolia. Algolia is a search API used by millions of developers to build a great search experience in their apps and websites. And it's relevant today because today we are going to speak about dev tools and how to start a dev tools company. So here's what we're going to cover. First, we'll discuss about the founding team and how to find your idea. Then how to start the company from the prototype to the MVP. And finally, we'll dive into the go to market including sales and marketing for DevTools. But first, what is a dev tool? So a dev tool is software that is used by developers to help them build products. And that includes a lot of aspects from coding, testing, debugging, documenting, deploying, running. It's all of the gamut of aspects of Dartjob. And it's a broad category then. You can think about IDEs like Versus Code, API like Stripe, Twilio, or Algolia, my company, library and frameworks like React, Node. Js, or Longchain, or even infrastructure or cloud services like AWS or Verso, and many other tools, Docker, Terraform, Datadog, GitHub. You get it. It's very diverse. And at YC, we've supported many of these dev tools, hundreds of them. And we already have two public companies, GitLab, the open source GitHub, and PagerDuty that started as a simple alerting system and now is used by half the Fortune 500 companies. And many others. You probably know about Stripe, Docker, Heroku, Superbase, Segment, Posthoc, Apple, AirBite and also Algolia of course. And we've learned a lot from them. So let's dive in and start at the founding stage. Well, first you need a founding team and the key aspect of DevTool is that you are going to build a technical product for developers. Obviously, you need to be a developer yourself. Most of our co founding team for DevTools are all developer teams. And the great thing about DevTool is that developers are actually using DevTools every day. So when you are building a DevTool, you are basically helping yourself in your action of building a product. So let's take a step back and chat quickly about what are good and bad dev tool ideas. And as a professor, let me start by telling you that with the advent of LLMs and AI in general, it's actually very difficult to know for sure today what's a good or bad idea. The bad ideas, the topic ideas of yesterday could actually be possible to make successful now. Thanks to LLMs. Some ideas are actually more difficult than others. Developers everyday are going to work on things they are actually not going to like, like documentation, QA testing, and these become obvious ideas for them to fix for others. The problem here is that they are not the only one to think about it, and that creates a lot of noise. And that's why there are so many of these on the market. Do you really want to build the next yet the next QA tool for other developers? I don't know. Another way to look at it is the difference between build time and the runtime ideas. So the QA testing, all of these ideas are build time ideas. Things, tools you are going to use when you are building the software. It depends that these ideas are mostly nice to have. You could build your product without them. What's more interesting are runtime ideas. Why? Because at runtime, it becomes really critical. It's must have products. If you bet on an API, for example, you cannot run your own product if it's down. That's why it's more critical and it's way better idea for DevTools. The other advantage of these runtime ideas is usage Because the more your customers are going to grow, usually the more they are going to use your product. So your incentives are aligned. Think about Stripe for example. If their customers sell more product, they make more money. Everyone is happy. Much better idea. Another quick category that we can touch upon is libraries and frameworks. These can be great at least, usually open source, but they can also be very challenging to monetize. Think about pandas for example. Very difficult to make money out of that. The one way you can monetize these ideas is by offering a hosting service. Think about Next. Js and Verso for example. Okay. Last point I wanted to touch on this idea, which is the LLM and AI trend. Actually, with this change in the world, there are many new dev tools being created. And it's awesome. It's so exciting to work on the dev tool that's going to help these companies building LLMs. But it's also a time where the market is very nascent. So an obvious great idea is LLM observability. Well, it's obvious. Right? Anyone building with LLM, they want to know how they are doing. They want to be able to evaluate them. Guess what? Many other companies think the same thing, and that's why we have dozens, if not hundreds of such companies out there. It doesn't mean that it's a bad idea, but I think that if you are starting in that space, you need to have a clear idea of how you are going to differentiate yourself. Or are you going to win against all of these competitors? Okay which leads me to a few mistakes people often do. The first one is waiting for the perfect idea. You are going to wait for a very long time. Let me go back to these LLM observability ideas. I would actually encourage you if that's the idea you have, just start. That's okay. Even if you don't differentiate yourself right away, that's okay. You learn as you go and eventually you'll be able to pull it off or you'll change your idea, which leads me to my second mistake. Sticking with the wrong idea for too long. You may not realize but 50% of the companies in OIC eventually pivot from their first idea. It's huge and it's also true for dev tools. Finally, last mistake, thinking you need business founder in the team. I know that's what I start when I created Algolia. We ended up creating Algolia with two tech co founders, but crossed our mind. Hey, we don't know how to sell. We need to hire or to find some other co founder who knows about sell. No. It's actually way easier than you think to learn how to sell your product. Actually, checked the numbers. 74% of YC dev tool companies had only tech co founders and that's compared to 45% for all of the other companies. Okay. So now that you have a team and an idea, where do you start? Well, there is only two things you have to do, build and talk with users. There is no specific order. You can actually start by talking with users because they're going to help you figure out if your initial idea is good or you can start by building a prototype so you can get easier feedback from users. Let's speak about that prototype. The most important thing here is not to over engineer it. You should do that quick and dirty and I know that it can be very difficult for some developers out there, especially for experienced engineers who pride themselves on robustness and scalability of their code. But the truth is that the most important thing at that stage is to iterate as fast as you can. Rule of thumb, I would assume that you throw away 90% of all the code you write. So your goal at that stage is just to identify the 10% of what you're building that's actually valuable as fast as possible And then later on, you can refactor this 10 only and avoid wasting a lot of time. As you iterate, of course, you want to speak with users and get feedback. It's completely okay to show them a prototype. Please don't wait to have a perfect product. Just show them a prototype and start gathering feedback as early as you can. And that will eventually lead you to an MVP, a minimal viable product. And this word, the v is important, viable. You need to provide value to your customers. It's much better to be 10 x better on a very tiny thing for someone who cares about it. Working for a niche is completely okay. Once you have real customers who love your product, it will be very easy to expand from there. Let me give you the example of Algolia. Well, today, Algolia is a very broad, large, like full featured search engine. Right? But when we started, to be honest, it was just a glorified autocomplete, very minimal. But that product was so much better than whatever else was available at that time that some people cared enough about it. And when we when we started demonstrating it, we didn't have much to show. Actually, I still remember our first customer, that first meeting, when I did demo using a command line to index content. We didn't have any API client yet. We didn't have any admin UI yet. Just a command line and then a very simple web page to show the search. That was enough to close a $2,000 a month contract. Okay. You have built something you can show users. So the next step is to talk with users. I know that many developers, many tech co founders are actually introvert and they don't like speaking with users or with customers like they don't like sales. Well, you may not realize, but as you are building a dev tool, you have a huge advantage. You know your audience. You are the audience. You are developer yourself. You speak the language of your customers. You are uniquely qualified to understand them. So you see, it actually will be way easier than you think. Please don't wait for the product to be ready. You want to learn ASAP right away. If you are solving a real problem, then people will be ready to pay for. But how do you find these users? Two things, outreach and lodges. Let's speak about outreach quickly. DevTool cofounders often plan to have a bottom up adoption model where individual developers are going to come inbound, try the product and convert or maybe become their champions at bigger companies. Well, I have some bad news for you. Nobody knows you yet. So to get there, first you need to get people to know about you and there is no other way to do that than outreaching and finding them yourself. But you need to be smart about it. Start with your network, your previous colleagues or classmates, and then you expand from there. Friends of friends, you can leverage LinkedIn. You can find, like, specific calls over there. But please, please personalize your messages. Like, don't copy what you can see out there sent by marketers. Actually, your developers, I'm sure you hate these messages, so don't do the same. Just ask yourself, would you be excited to open your message? Then ask your cofounder. Ask other developer friends. Would they be excited to open your message and then read your email and then possibly act on it? Well, you simply iterate until they do. Now let's speak about launching. You can launch many times and that's what you should do here to get more attention. The best place to launch for dev tools, I would argue is Hacker News. Hacker News is a community of intellectually curious people. Many of them are developers and there is that section in Hacker News called show h n. That's the perfect place to launch and gather feedback on what you are building. Again, like when you were writing like kind of this outreach messages, please don't do marketing. Don't try to sell your product. Just explain plainly and simply what's new and interesting in what you are building. That will be very engaging for the community and they'll share comments to you. Engage with these comments. Don't let them unanswered. Try to engage with people asking questions. Some of them are going to be haters and be rude. Well, you should engage with them too. But your goal is not to convince them, it's just to convince any other readers who are going to read how you reply to these haters. Just be classy here. One of the great example here is segment. They simply did an experiment by launching their next idea on Hacker News, and it blew up. They got hundreds of votes and so many comments that they knew they were onto something, and that became their idea. Another example is Olama. Olama helps companies run LLMs on their own machines. Well, it started as a comment on a comment on another post on Hacker News and just from that, they got a few people interested and and then shortly after they launched their product, it completely took off on Hacker News. They got like again hundreds of hub votes and they knew they were gonna do something. And they didn't stop there. They launched again and again every few months. Each time they had like new things to share and that continued to fuel their growth, creating a lot of excitement in the community. Hacker News, best place to launch. The last thing I wanted to touch upon here in that section is you should do things that don't scale. So again, you're here to learn as fast as possible from your users what they like or not about your product. A great example of a team that did things that don't scale is Stripe. Early on, the Stripe team were going to their customers, small startups, and they helped them implement their own product, sitting side by side in front of the computer coding with them. That was not only a great way to make sure that users were going to be satisfied, were going to be actually excited about what they were building, but it was also a great way to gather invaluable feedback very early from their users. So it's completely okay to do things that don't scale if they lead to faster learnings. Okay. And here are a few mistakes to avoid. So you remember, the goal is to go fast and iterate fast. So please don't choose a text tag because it's cool because you want to learn it. No. You should took it because of your expertise with it so that you can iterate as fast as possible. Other mistakes we we touch, not talking with users. Please get that feedback as fast as you can, which also means avoiding overbuilding before getting that feedback. Maybe a small thing here, be careful about that feedback. Be careful about not misunderstanding some of the developer feedback. For example, they may share they may tell you, oh, you should build your product. You don't care. You just want to know if they would use your product or not and why. Or they could tell you, hey. You know what? I could build this in a week. I don't need it. Well, guess what? You just build it yourself in a week. You fine. You should not mind about that. Just move on and continue improving the product. Last mistake some teams do is hiring too early. Very early on, you don't even know if your product is providing value. Please don't hire anyone until you have convinced yourself you are working on the right idea. Let's now talk about go to market. And the first question you should ask yourself about go to market is your business model. More explicitly, should you be open source? Open source has become one of the main go to market for dev tools. And it definitely works as a business model as many companies have proven like Databricks, Elastic, Caching Corp, GitLab, all awesome great companies. I would argue that you must be open source if you are working on things like a library of framework. That's what's today expecting for the market. Developers wouldn't implement on top of a new framework that is not open source. You should also be open source if you are dealing with data, especially sensitive data. A new database would need to be open source or an API connecting with sensitive data in a CRM or maybe an EHR needs to be open source. You could be open source but probably don't have to be open source if you are working on those things like an API or maybe an application like a butt cracker. Maybe in that case it's not as important but still could be your differentiation. Open source has quite a lot of benefits. Your customers are developers. Well, as you know already, developers prefer working with open source tools. It's also going to help you create more awareness through the community. It can be also your differentiation. Like, you could be the open source version of x. Think about Postg and Amplitude or Superbase and Firebase or Airbyte and Fivetran. Great approach. Speaking of Airbyte, you could also receive contribution from the community. In the case of AirBite, they got a lot of connectors contributed from the community. But I would be careful on that one. Most cases, you shouldn't count on them because the quality of the contribution may not be up to your standards, and then you have to deal with the contributors and that could be more actually more difficult than you think. But in most cases, would say that you should not count on them. Good contributions are actually pretty rare. And last benefit but not the least is the trust and it's actually very important for large enterprises in the enterprise realm. Take the example of Metplum for example who is building a open source EHR. The fact that they are open source, I would argue, probably help them shorten their sales cycle with enterprises by a year or more. There is one thing you need to think about, however, when you're creating an open source project. Maybe not at the start but pretty soon, it's monetization. If you cannot monetize your product, you don't have a company. At some point, even if it's later in the life of the company, you need to earn money. There are many variants out there, but it's good to look at the common approaches. Some of the common ones are hosting, having a cloud offer. So your customers may use your open source free self hosted, but they could also pay for you to host it so that they don't have to maintain it. Sometimes cloud version also have like some additional features like team management. Another one is being open core. In that case, usually have a a special offer, typically an enterprise offer that have advanced features that are not in the open source version or maybe they're on a different license. Common features are typically the ones that are going to be necessary for enterprises like SSO, hot logs, disaster recovery, SLAs, these kind of features. And finally, some open source companies charge for support and services, but I would actually discourage you to follow that monetization path because your incentive becomes to build the most complex product possible so you can charge for support and services, which is a bad incentive. And if your product doesn't need too much support, then people are going to churn and not renew their support contract. And what if you are not open source? Well, for these dev tools, they are usually following one of two approaches. Users are usage based, like APIs, Algolia, Twilio, Stripe. And so they charge based on the usage their customers do. Possibly, they have a volume discount or enterprise specific options that are on the side. And the second approach is having some specific plans. Typically, like a good, better, best approach. Good is going to be the self serve option that's going to solve the problem of developers for a very low price. For the better options, usually, are going to be interacting with engineering managers who are going to care about collaboration. That's going to enable teams. Still can be self serve. And the best option is higher up. You are talking to the CTO. It's all about security, audit logs, disaster recovery, SLA. And in that case, it's usually a sales led approach. Let's speak about sales. So as a quick reminder from what I was saying earlier, don't fear outreach. Even if most dev tools are going to end up being bottom up and rely on inbound really heavily, No one knows you at first, and so you need to start with outreach. That period of founder outreach is how you start. As you get more well known, that's when you will get inbound. Usually, you are going to have, at that point, more self serve leads. And then eventually, you will end up hiring your sales team to sell to bigger accounts enterprise. So should you hire a sales team? Well, I would argue that you should wait as long as you can. Start by selling yourself. Don't delegate away. The truth is that you are the only person in the company today capable of selling your own product. If you as the founder cannot sell your product, nobody else can. As a rule of thumb, I would wait to get to about 1,000,000 ARR before hiring your first salesperson. And even then, try to hire people who are technical, who at least understand developers because developers don't hate speaking with salespeople. I actually remember our first salespeople at Agolia. They decided to change their title on LinkedIn and instead of like being sales or account execs, they called themselves product specialists. And the nice thing here is that they actually had to own that stages. They had to understand the product in team leads. So it was kind of like a great incentive for them to be better at product and a great way for them to open doors with developers who don't want to speak with sales. Another example, post hoc. Did you know that team the CTO is also their sales leader? Not a business leader. Their sales leader is also the CTO. He sees sales as an engineering problem, which is an awesome approach for a dev tool. If you want to learn more about sales, you should also watch Pete's talk about enterprise sales, another startup school video. So is it different to sell a dev tool from selling any other product? Yes. It is. You shouldn't build a sales deck. Developers, like, don't want to waste their time reading through a sales deck. You should show, not tell. Just do demonstrations. I think that's the best sales approach you can do for DevTool. At Algolia, we didn't have a sales deck before we got to 10,000,000 ARR. So even our sales, like proper account execs, were just showing demonstrations when they were selling and that was working so much better for everyone. You should lean completely in the tech aspect of your product. For example, at Algolia, sell a lot to ecommerce players and what we realized is that when the buyer is not technical and wants a turnkey solution, we always not always, but most of the time we actually lose the deal. But when the buyer is technical or if tech has a lot of influence in the decision, we win way more often. So we realized by leaning into that aspect of our product, we are an API. We are not like a turnkey solution. Well, we ended up like finding our ICP and having better success selling. Okay. And the last thing that is also true in within DevTool is that most of them are bottom up. What that means is that a lot of people are going to self serve even within enterprises. So instead of going top down, just pitching your product directly, sales should also check if some of the enterprise employees are already using the product and they should then focus on helping management understand what the product is already doing for them and how much more it could help them if they were to pay for more, like new seats or features or additional usage. Okay. So the last topic I wanted to touch in this video is developer marketing. Your goal is to create a lot of awareness for your product because you want inbound. The first thing you should do is find your community. So it could be hacker news or some subreddit or some discords out there out there that is related to what you're working on. But be careful. Your goal is not to sell your product just yet here. Just be helpful. Just establish yourself as the expert and of course people are going to start knowing you and trust your brand, your company. That will help you down the line. People will think about you when they have that problem. Launch often. That's very important. We discussed about, the example of Olama before, but that should also be done for the life of your company. Some companies even do launch weeks and have been very successful for that. It works great for open source, for example. Supabase is doing that once a quarter, building all their news in one week a quarter to make as much noise as they can. Other things you can do, make your documentation a first class citizen. Documentation is often an afterthought for developers. They prefer coding than actually documenting their code. Would argue that documentation should never be an afterthought. It should be part of the product. Documentation is marketing. That's how people are going to interact with your product. That's actually the first place people are going after your home page and maybe a pricing page. Stripe and other dev tools have really raised expectations there. Developers have become very demanding. That's something you should invest in. At Algolia, we decided that the feature was not ever done until the doc was done and documentation should be written by developers. You know, Algolia, even when we close a team and at some point we created that documentation team, their role was not to write the documentation for the developers. They were here to help developers write better documentations. For example, they built a tool where it would automatically insert API keys for people who would be logged in so that when they copy past the the code, it would work right away out of the box, which made the documentation ever more useful for our customers. Speaking of things that developers should do, I would include support there. You should make support a huge part of your marketing. Your users are developers. Right? Developers hate speaking to these level one support people who don't know anything about the product they are supporting. Engineers should do support and that's going to lead to two great things. One, your users are developers and when they interact with developers who speak their language, they're going to be way more satisfied. Actually, have examples where someone would reach out to support and then the developers, like the person doing the support, was able to actually fix the bug and deploy in production in like twenty minutes. And so that's kind of like blew the customer away. Like they were so impressed, so excited about the product. And two, it's going to help your own developers much better understand your customers' needs because they are going to face the pain as they are supporting them. And that's a great way for them to be the better product. Taking the example of Algolia again, we actually waited until hundreds of employees before we built a dedicated support team. And then we actually asked our best engineering manager to build that team. Support was never a second class citizen for us. So developers are doing documentation, developers are doing support, all of that is your marketing. Should you even hire a marketing team? Or when should you do that? Well, similarly to sales, I think founder should lead marketing for a long time, maybe forever, actually. To be honest, even at later stage, I don't know a single dev tool company that is happy with their CMO when they have a traditional marketing background. Why? Because traditional marketers, they don't really understand the persona. They don't really understand developers. Only other developers do. And developers really hate being marketed at. Please don't insult their intelligence. You know that because you are developers. Right? Well, early on at Algoria, we were actually asking every single engineer in the team to do what we called a marketing hack every single month. A hack could be writing a simple blog post or could be speaking at a meetup or could be building a new search. All our best marketing at Algolia was done by developers. I would encourage you as you build your marketing team to make sure that you have a lot of developers in your marketing team because they are the ones who know how to speak to your customers. You may ask, what about dev advocates? Well, I love the idea because that means having developers in your marketing team. But it's also a very ill defined role with often a lot of very fuzzy expectations. So it's difficult to measure, difficult to build accountability for. So my recommendation here would be to wait and first leverage your existing engineering team and ask them to do some form of marketing or dev advocacy. And probably at series a or later, it start to make sense to hire dedicated dev advocates. Even then, think about hiring from within or from your committee. For example, if your open source could be contributors or active or helpful Discord members, these are the best DevAdocates candidates to join you. So let's wrap up and recap what we said here. Start now. Please don't wait for the perfect idea because as you are going to build your product, even if it's not the perfect idea, you'll do the reps. You'll learn and that will lead you to the best idea. If you don't start, you'll never get anywhere. Build quickly. Please please don't over engineer. You need to have that very fast iteration pace where you can learn from your users as you are building. Crappy, quick and dirty is completely okay early stage and then you refactor what actually matters. Spend time with your users. Like, there is no way you're going to learn if you don't speak with your users. Learn from them. Do things that don't scale. Go to their office. Spend time with them. Launch early. You may have seen many of our videos where we say, there is no shame in launching early. People won't remember you if it doesn't work out. But you could get invaluable feedback that will lead you to work on the right product or build the right thing that people need. As you are building a dev tool, you should consider open source as your go to market. Observe the market, observe other players, how they have built their product, and figure out if open source is the right thing for you. But don't dismiss it. Think about it hard before making a choice. Don't forget, you are the best salesperson for your product. No one else is going to know your product or your audience as well as you do. Learning to sell is way easier than learning how to speak with a developer. And finally, you are also the best marketing person for your product. You know the language of developers. You know how speak with them. You know where they are spending their time, the community. You know how to access this audience. Okay. That wraps it up for me today. Thanks for watching the video. And if you are building a dev tool, don't forget you can apply to IC anytime."
  },
  {
    "name_video": "Vertical AI Agents Could Be 10X Bigger Than SaaS",
    "description_video": "In this episode of the Lightcone, the hosts consider what effect vertical AI agents will have on incumbent SaaS companies, what use cases make the most sense, and how there could be 300 billion dollar companies in this category alone.",
    "related_categories": [],
    "page_url": "/library/Lt-vertical-ai-agents-could-be-10x-bigger-than-saas",
    "youtube_url": "https://youtube.com/watch?v=ASABxNenD_U",
    "mp3_file": "downloaded/Vertical_AI_Agents_Could_Be_10X_Bigger_Than_SaaS.mp3",
    "mp3_content": "Every three months, things have just kept getting progressively better. And now we're at this point where we're talking about full on vertical AI agents that are gonna replace entire teams and functions and enterprises. That progression is still mind blowing to me. A lot of foundation models are kinda coming head to head. There used to be only one player in town with OpenAI, but we've been seeing in the last batch this has been changing. Thank god. It's like competition is, you know, the the soil for a very fertile marketplace ecosystem for which consumers will have choice and founders have a shot, and that's the world I wanna live in. Welcome to another episode of The Light Cone. I'm Gary. This is Jared, Harge, and Diana. And collectively, we funded hundreds of billions of dollars worth of startups right when they were just one or two people starting out. And today, Jared is a man on fire, and he's gonna talk about vertical AI. Yes. I am. I am fired up about this because I think people, especially startup founders, especially young ones, are not fully appreciating just how big vertical AI agents are going to be. It's not a new idea. Some people are talking about AI agents. We funded a bunch of them. But I think the world has not caught on to just how big it's going to get. And so I'm going to make the case for why I think there are going to be $300,000,000,000 plus companies started just in this one category. Nice. I'm gonna do it by analogy with SaaS. And I think in a in a similar fashion, people don't understand just how big SaaS is because most startup founders, especially young ones, tend to see the startup industry through the lens of the products that they use as a consumer. And as a consumer, you don't tend to use that many SaaS tools because they're mostly built for companies. And so I think a lot of people have missed the basic point that if you just look at what Silicon Valley has been funding for the most for, like, for the last twenty years, like, we've mostly been producing SaaS companies, guys. Like, that's literally been, like, most of what has been coming out of Silicon Valley. It's over 40% of all venture capital dollars in that time period went to SaaS companies. And we produced over 300 SaaS unicorns in that twenty year time period, which is way more than every other category. Software's pretty awesome. Software is pretty awesome. I was thinking back to the history of this, because we we always like to talk about the sort of how the how the history of technology informs the future. And the the real catalyst for for the SaaS boom was do you guys remember XML HTTP request? Oh my god. Like, I'd argue that that was quite literally the catalyst for the SaaS boom. Like Ajax. Ajax. Yeah. In 02/2004, browsers added this JavaScript function XML HTTP request, which is the missing piece that enabled you to build a rich Internet application in a web browser. So for the first time, you could make things in websites that looked like desktop applications, and then that created Google Maps and Gmail and set up this whole, like, SaaS boom. Essentially, the key technology at Lock was that software moved from being a thing that you got on a CD ROM and installed on your desktop to being something that you use through a website and on your phone. Paul Graham actually shares in that lineage in that he was one of the first people to realize that he could take the HTTP request and then actually hook it up to a Unix prompt. And you didn't actually have to, you know, have a separate Yeah. Computer program Yeah. That would change a website. So Viaweb was a online store, kinda like Shopify, but way back in the day. Yeah. It was basically like the first SaaS app ever. Like like, PG actually invented SaaS in like 1995. It's just that those first SAS apps kind of suck because they didn't have XML HTTP request. And so every time you would, like, click a button, you would have to reload the whole page. And so it's just a shitty experience. And so it didn't really catch on until 02/2005 when x XML HTTP request. Why it's red? Anyway, I I see this LLM thing as, like, actually very similar. It's like it's a new computing paradigm that makes it possible to just, like, do something fundamentally different. And in 02/2005, when cloud and mobile finally took off, there is this sort of like big open question of like, okay, well, this new technology exists. What should you do with it? Where is the value going to accrue? Where are the good opportunities for startups? I was going through the list of like all the billion dollar companies who were created, and I had this realization that you could bucket the the different paths that people took into, like, three buckets. There's there's a first bucket that people started with, which was, like, I would call them obviously good ideas that could be mass consumer products. So that's like docs, photos, email, calendar, chat, all these things that like we used to do on our desktop, but that obviously could be moved to the browser and to mobile. And the interesting thing is zero startups won in those categories. 100% of the value flow to incumbents. Right? Like Google, Facebook, Amazon, they own all all those businesses. Folks forget that, like, Google Docs wasn't the only company that tried to bring Microsoft Office online. There were, like, 30 companies that tried to bring Microsoft Office online, but they all lost. Google won. Then there was, like, a second category, which was, like, mass consumer ideas that were not obvious that nobody predicted. That's like Uber, Instacart, DoorDash, Coinbase, the Airbnb. Those ones places. Those ones came out of left field. Like, the the dot dot dot between XML HTTP request and Airbnb is, like, very not obvious. Yeah. And so the incumbents didn't even try competing in those spaces until it was, like, too late. And so startups are able to win there. And then there's a third category, which is all the b to b SaaS companies, and that's, like, 300 of them. And so, like, like, by by by number of logos, way more billion dollar companies were created in that third category than the first two. I think one reason why that happened is, like, there is no, like, Microsoft SaaS. Like, there is no company that somehow does, like, SaaS for, like, every vertical and every product. Like, for structural reasons, it seems to be the case that, like, they're all different companies, and that's why there's so many of them. I think Salesforce is probably like the first true SaaS company. And I remember Mark Benioff coming to speak at YC. And he tells a story. It's just very early on. People just didn't believe you could build sophisticated enterprise applications like, over the cloud or via SaaS. Was just so there's just like a perception issue. Right? Was like, no. Like, you don't you buy, like, your box software, and that's, the real software that you run your That's the way we always do. It was it was quite contrarian because the early web app sucked. Yep. They were, like, via web, where you had to be a visionary like PG and understand that the browser was gonna keep getting better and that eventually it'd be good. Which feels like quite reminiscent of today. Right? Yeah. Where it's like the yeah. The same thing. Like, oh, no. Like, you won't be able to build like sophisticated enterprise applications that use these LLM or AI tools because they hallucinate or they're not perfect or they they're kinda like just toys. But, yeah, that's like the early SaaS story exactly the same. And so when I think about the parallels with LLMs, I could easily imagine the same thing happening, which is that there's a bunch of categories that are like mass consumer applications that are obviously huge opportunities, but probably the incumbents will win all of those. So that's something like a per like a general purpose AI voice assistant that you you know, you can ask it to do anything, and it'll, like, go do that thing. That's an obvious thing that should exist, but, like, all the big players are going to be competing to be that thing. Right? Apple's a little slow on that one. Why is Siri so stupid still? What year is it? It makes no sense. I mean, it's they count to that is, like, the very obvious thing is search, and maybe Google will still win on search, but perplexities definitely give them a A huge run for their money. Right? Yeah. This is the classic innovator's dilemma at the end of the day. Mean, you could argue going back to what you said about Uber or Airbnb, these were actually really risky things from a regulatory standpoint. So if you're Google and you have basically a guaranteed, you know, giant pot of gold that, you know, sort of comes to you every single month, like, why would you endanger that pot of gold to sort of pursue these things that might be scary or might ruin the pot of gold? I think that's I think that's, like, probably the primary reason why the incumbents didn't end up building those products and didn't even clone them even after they got big. And it was obvious that that they were going to work. Google never launched an Uber clone. They never launched an Airbnb clone. I was listening to this, talk by Travis, and one of the things that he said that really stuck with me is that in the in the first use of Uber, he was very scared that he was going to personally go to prison for like a long time. Like, he was actually personally risking going to prison in order to build that company. And so, yeah, no highly paid Google exec was gonna do that. What do you think about why incumbents didn't go into b to b SaaS? Is it part of the reason is that a lot of the use cases are very there's a very wide distribution? I it's a great question. I love to hear what you guys think. My take is that it's just too hard to do that many things as a company. Like, each b to b SaaS company really requires, like, the people who are running the product in the business to be extremely deep in one domain and care very deeply about a lot of really obscure issues. You know, like, take, like, Gusto, for example. Like, why didn't Google build a Gusto competitor? Well, there's no one at Google who really understands payroll and has the patience to, like, deal with all the nuances of all these, like, stupid payroll regulations. And, like, it's just like like, it's just not worth it for them. It's easier for them to just focus on, like, a few really huge categories. In the B2B SaaS world, it's sort of about the unbundling, bundling of software argument that comes up a lot as well, I think. And why did all these vertical B2B SaaS products evolve versus just like Oracle or SAP or NetSuite. Yeah. NetSuite, just owning like everything. And I think it might be also is another thing that's attributable to the shift to like SaaS and the internet is in the old ways of selling software. Again, like, you have this box software that was really, like, expensive to install, and you have, like, a whole ecosystem around it. And anytime you wanted something custom, like, the integrators would just say, oh, no. Like, we can, like, just build you a custom, like, payroll feature or something like that. And then Salesforce comes along with, like, a SaaS solution, and it just seems like it could never be as powerful or sophisticated as, like, the expensive enterprise installation you just paid for. But they proved that it totally was the case. And I think that just, like, opened the gates for all of these, like, vertical SaaS solutions to emerge doing exactly what you're saying. I think the other problem is that with a lot of this enterprise software, if you're a user of Oracle and a NetSuite, because they're they have to cover so much ground, the user experience is actually pretty bad. They're trying to be jack of all trades about master of none. Yep. So it ends up being a bit of a kitchen sink type of experience. And this is where if you go and build a b to b SaaS vertical company, you could do literally a 10 x better experience and more delightful because there's this stark difference between consumer products and enterprise user experience. Yep. Well, there's only, what, three price points in software. It's $5 per seat, $500 per seat, or $5,000 per seat. And that maps directly to consumer SMB or enterprise sales. And then I think time immemorial has taught us that in the past, and this is less and less true with new software, thankfully, but enterprise is terrible software because it's not the user buying it. You know, some high up muckety muck inside a Fortune one thousand is the person who's getting wine and dine for this, you know, mega 7 figure contract. And, you know, they're going to choose something that maybe isn't that good actually for the end user, the person who has to actually use the software day to day. And I'm sort of curious to see how this changes with LMs actually. I mean to date, one of the more salient things that we've seen for both SMB and enterprise software companies is that or all software companies, all startups period is like, you know, there's a sense that as revenue scales, the number of people you have to hire scales with it. And so when you look at unicorns, even in today's YC portfolio, it's quite routine to see a company that reached a hundred or $200,000,000 a year in revenue, but they have, like, 500, a 2,000 employees already. And I'm just gonna be very curious. Like, even the advice that I'm starting to give companies that are, you know, a month or two out of the batch, it's it's feeling a little bit different than the kind of advice I would give last year or two years ago. In the past, might say, you know, let me find the absolute smartest person in all of these other parts of the org, like customer success or sales or different things like that. And I want to find someone who I've worked with, who is I know is great, and then I'm gonna go sit on their, you know, on their doorstep until they quit their jobs and come work for me. And I want them to be someone who can, you know, build a team for me, hire a lot of people. That might still be true, but I'm starting to sense that the meta's shifting a little bit. Like, you actually might want to hire more really good software engineers who understand large language models, who can actually automate the specific things that you need that are the bottlenecks to your growth. And so it might result in, you know, a very subtle but, you know, significant change in the way startups grow their businesses sort of post product market fit. It means that I'm gonna build LM systems that bring down my costs, that cause me not to have to hire a thousand people. I think we're right at the beginning of that revolution right now. I mean, we talked about this in a previous episode. We talked about there will be a future unicorn company that's only run if we take it to the limit with only 10 employees. That's completely plausible. And they're writing the evals in the prompts. That's it. I think what you're saying is like a trend that was already underway pre LLMs. Like, I remember when I was running Triplebyte, for example, we needed to build marketing or customer user acquisition, basically. And especially after we raised our series b, the, like, traditional way you were supposed to do that is to, like, hire a marketing executive and build out, a marketing team and and just, like, basically spin up this machine to do, like, sales and marketing. But I'd actually met, like, a YC founder, Mike, who was his company was basically building, like, a smart frying pan. Sounds like bizarre, but, like, he was a MIT engineer. Yeah. You remember this? He's an MIT engineer, and to sell the smart frying pan, he had to get really, really good at understanding, like, paid advertising and Google Ads and just a whole bunch of stuff. And so he'd he'd taken this engineer's mindset approach to it. And I remember just talking to him about it and realizing this would be so much better to have an MIT engineer working on, like, our marketing efforts than any of the marketing candidates I've spoken to. And he was able to, like, scale us up to, like and we were spending, like, at one point, like, a million dollars a month on just marketing and various, like, campaigns. And Tripleby had great marketing. Yep. Like, I remember, like, the Caltrain station takeover that you did, all the, like, out of home stuff that you did. It was, like, really high quality stuff. It stuck with the you could tell that it was not being done by some, like, VP marketing person. And the the and that was all Mike. And, like, the comment I would often get when people would ask me around that time, like, how big is Triplebyte? And we were, like, 50 people. And I would It felt so much better. Yeah. Yeah. People would be like, I thought there's, like, hundreds of people. I was like, no. It's all because if you put a really smart engineer on some of these, like, tasks, they just find ways to make they find leverage. And now, like, LLMs can go even way beyond, like, the leverage you have with just pure software. Okay. So here's my pitch for 300 vertical AI agent unicorns. Literally, every company that is a SaaS unicorn, you could imagine there's a vertical AI unicorn equivalent in, like, some new universe. Because, like, most of these SaaS unicorns, beforehand, there were some, like, box software company that was making the same thing got disrupted by a SaaS company. And you could easily imagine the same thing happening again. We're now basically, every every SaaS company builds some software that some group of people use. The vertical AI equivalent is just gonna be the software plus the people in one product. One thing might be just enterprises in general right now are a little unsure about what exactly they like, what agents they need. And one approach I've seen from especially more experienced founders, like Brett Taylor, the CTO of Facebook, started his company Sierra. I don't know all the details, but as far as I can tell, it's essentially more like broadly about letting enterprises, like, deploy these AI agents and spinning them up, like, custom for the enterprise versus, like, oh, hey. We have, like, this specific agent to do this. It's something I've seen from all my companies called Vectorshift that were funded about a year ago. They're two really smart, like, Harvard computer scientists, and it's that what they found is that they're trying to build a platform to make it easy for enterprises to build their own, like, use, like, no code or SDKs to build their own, like, internal LLM powered agents. But, like, enterprise often don't know exactly what they wanna use these things for. And so bring it back. I wonder if, like, in, like, the box software world, you started off with just, like, a few vendors who just basically were trying to convince people to use software at all, and it was just like, it does everything. And then it gets more sophisticated and higher resolution, and you get lots of, like, vertical SaaS players. We go through that same period with LLMs where the early winners might just be these, like, general purpose. Hey. Like, we'd, make it easy for you to do LLM stuff, and then it the vertical agents will come in over time, or do you think there's reasons it's different now and the vertical agents will take off on day one? Yeah. That's interesting because if you think about the history of SaaS, the consumer things worked first. Like, 02/2005 to 02/2010 was mostly consumer applications, like email and chat and maps. And people got people, as individuals, got used to using these tools themselves. And I think that made it easier to sell SaaS tools to companies because, know, the same people are both employees and consumers. Yeah. I I think the answer might just be like, this is this is all just a continuation of software. And just there's no reason it has to reset back. Like, LLMs don't have to reset back to a few general purpose, like, enterprise LLM platforms doing everything because enterprises have already been trained on, like, the value of point solutions and vertical solutions. And, like, the user experience is not gonna be that different. These things will just be a lot more powerful. And so if enterprises have already built the muscle of believing that, like, startups or vertical solutions can be better than, like, legacy broad platforms, they are probably gonna be willing to take a bet on a startup promising a very good vertical AI agent solution today. And I feel like we're all seeing that in the batch now, where some of our companies are getting faster traction in enterprises for these vertical AI agents than, like, we've ever seen before. I think we're just early in the game. Right? Like, all software sort of starts quite vertical, and then as the industries actually get much more developed, then I mean, I just answered my earlier question. It's like, you know, why does a company end up having a thousand employees? It's actually that, you know, early early in the game, everyone's making these specific point solutions. And then at some point, you've got to go horizontal. Like, you're already doing this crazy spend on sales and marketing. And then the only way you can actually continue to grow once you sort of get a % or, you know, some large majority of the market is you actually have to do, like, not just a point solution, but things that sort of work together. Maybe the other point of why the bull case for vertical AI agents could be even bigger than SaaS is that SaaS, you still needed a operations team or set of people to operate the software in order to get all the workflows to be done, I don't know, approval workflows, or you have to input the data. The argument here is that you will get not only replacing all that set of SaaS software, so that will be like one to one mapping, but it's also going to eat all of the a lot of the payroll. Because if you look at a lot of the spend for companies, big chunk is still a payroll, and software's tiny. Exactly. They spend way more on employees than they do on software. So it'll be these smaller companies that are way more efficient that need way less humans to do random data entry or approvals or click the software. I agree. I think it's very possible that the vertical equivalents will be 10 times as large as the SaaS company that they are disrupting. I mean, there's there's two cases. It could be that the vertical point solution could be just big enough, and you don't need to do that bra breath thing. Right? It that could be a nice scenario? Should we give some examples? I feel like we've all been working with so many verticals, AI agent companies. We've got, like, news from the front Yeah. Of how it's actually going. Well, your former head of product, Aaron Cannon, is working on a YC company called Outset that I worked with. And basically, they're taking LLMs to the surveys and Qualtrics space. So Qualtrics is almost certainly not really going to build the best of breed large language model with reasoning. And then the funny thing about surveys is, you know, who's it actually for? It's for people who run products, for marketing teams, it's for people who are trying to make sense of, like, what do our customers actually want? And what are surveys? Like, guess what? That's language. So and then I feel like these types of businesses actually have to thread this needle because enterprise and SMB software often is sold based on a particular person who is the key decision maker. And you have to go high enough in the organization so that the people you're selling to are not afraid that their whole their job and or their whole team's job is gonna go away. Totally. That's kind of the move that I've seen that a lot of companies that sell need to do. Because if you're gonna go and sell to the team that's gonna get replaced by AI They're gonna sabotage it, man. It just does not work. So I think this is an interesting way that a lot of these are top down. And you have to go through, at some point, even get the CEO to sign off on it. A company I'm working with, Momentic, that's essentially an AI agent. But for or at least where they're starting is QA testing. They're getting really great traction right now, and it's interesting. Because you remember a decade ago, Ycom, we said we worked with Rainforest QA. Like, Rainforest was a QA as a service company, and that they had this exact tension of where they couldn't actually replace your QA team. And so they needed to build software that made the QA team more efficient. But really, that obviously meant trying to replace as many of them as possible. They couldn't replace the whole team. And so they were always on this sort of like tightrope between trying to sell the software to like the head of engineering. And so this will mean you'll need less QA people and great. But then you also have to go sell that to the QA team who don't wanna be replaced. And so I think that was always like a friction for that business for how it could like scale and grow. But now, like, Momentic with AI can actually just replace the QA people. So their pitch is not, oh, this, like, makes your QA people faster. It's like, this just means you don't need a QA team at all. So they can just focus the sell into, like, engineering. And engineering doesn't need buy in from QA at this point. And you can also go in I mean, to start with, you can go and sell to companies that don't even have big QA teams at the moment. They just use something like Momentic, and then it will just, like, keep scaling with them. Scaling, and they'll just never build a QA team Yep. Ever. Yes. That is a real life case study of what Diana was saying about why these vertical AI agent companies can be 10 times as big as the SaaS companies. Yep. I'm seeing this interesting now, like, in recruiting too. I had this exact same issue with Triplebyte where to build the software to build software that makes it easy to, like, screen and hire software engineers, you need buy in from both the engineering team that they're joining, but also the recruiting team. And effectively, the software we were building was trying to replace the recruiters, but we couldn't completely replace the recruiters. But now with NYC, this And so the recruiters were always, like, opposing Yeah. Opposing it because it was a threat to them. Yeah. So there's just always, like, friction on, like, how on, like, how far you can get when the customer that you're trying to sell to is worried about being replaced. But, yeah, I think now it's still early days, but now with AI, you can build things that do the whole stack, like, of recruiting. We have a company we work with last batch, Nico, work with them, which is actually just doing, like, the full, like, technical screen, the full initial recruiter screen, and getting great traction. So I think as those things keep going, like, they won't have the same thing. You won't have the friction of, oh, I need to convince recruiters to use this. You'll probably just, like, not build a recruiting team in the same way that you used to. Alright. Other example is even for dev tool companies, they have to do a lot of developer support. And I work with this company called Capa dot ai that basically built one of the best chatbots that responds to a lot of the a lot of the technical details that are hard to answer. And I think a lot of the companies that started using them, they actually ended up having DevRel teams that are a lot smaller because it ingests a lot of the developer documentations, even the YouTube videos that DevTools put up, and even a lot of the chat history. So it just keeps getting better and better and is like, gives really good answers, actually. It's one one of the best I've seen. Yeah. I also worked with a customer support, like, AI customer support agent company called PowerHelp. Well, actually, we we both did last batch. And I learned a couple interesting things from PowerHelp. The first is customer like, AI agents for customer support was, like, the category that's, like, famously crowded where there's like supposedly like, you know, a hundred of them. If you go and you Google like AI customer support agent, you'll get like a hundred results on Google. But what I learned through working with PowerHelp is like, it's actually kind of bullshit. Like like, almost all of those companies are doing very simple, like, zero shot LLM prompting. They can't actually replace a real customer support team that does a lot of really complicated workflows. It just kinda makes for, like, a nice demo. Like, to actually replace a customer support team for, like, an at scale company that has, like, a hundred customer support reps to do lots of complicated things every day. You need, like, really complicated software that does all the stuff that, like, Jake Heller was talking about. And there's there were only, like, three or four companies that were even attempting to do that. And cumulative, they had cumulatively, they had, like, less than 1% market penetration. And so the market was just completely open. I could also see that being another case of hyper specialization or hyper verticalization. Yeah. Like, there's not gonna be I mean, maybe eventually, there could be a single general purpose customer support agent software company, but we're, like, in inning you know, that that'll be like an eighth or ninth inning kind of thing, and we're literally in the first inning. So, you know, instead, you know, you're gonna have companies like GigaML that, you know, it's doing it for Zepto, doing 30,000 tickets every single day and replacing a a team of a thousand people. And but it's very specific, and it has, you know it's not a general purpose demo ware kind of thing. Like, it's 10,000 test cases and a very detailed eval set that, you know, is basically just for Zepto and things like Zepto. Yeah. But if you are, you know, any of the other marketplace companies, you're probably gonna use it. Because, like, that's a very well defined kind of marketplace that's, you know, instant delivery marketplace. I think this is the kind of dynamic that led there to be, like, $300,000,000,000 SaaS companies rather than, like, one, like, $10,000,000,000,000, like, meta SaaS thing that provides all the software for the world. It's just, like, the customers just require really heavily, like, tailored solutions, and it's hard to build one that, like, works for every everyone. Exactly. I mean, we already gave three examples of customer support, but they're very different verticals. It's like Yeah. Dev tool companies, very different kind of support that you need, and the training set to marketplaces, very different. Right? Yeah. I guess whether you have agents or real human beings working for you, you end up with the same problem, which is every company bumps up against Coase's theory of the firm, which says that any given firm will grow only so much to the point where it becomes inefficient to be larger than that. And then that's why they're sort of networks and ecosystems and, you know, a full blown economy. You know, like every firm will sort of specialize to do what it is particularly good at. And then the limits the outer limits of what those firms can be, it's actually based on your ability as a manager. So, yeah, that that part a little bit breaks my brain because, you know, when we spend time with Parker Conrad at Rippling, one of his favorite points is actually, well, you know, everyone's very obsessed with with the fact that the rocks can talk and, you know, maybe they can draw. But the more interesting thing for him, you know, running HR IT software that, you know, he spends a lot of time thinking about HR. Like, actually, the coolest thing about the LMs is that the rocks can read. And from his perspective, like, you know, he's yeah. I think he has 3,000 employees. He still runs payroll for all 3,000 employees through Rippling. So I think he spends a lot of time thinking about, like, how can one person extend their ability as a manager? And I think we're gonna see a lot more there. That would be in a a reverse argument that if we're at this moment where tools for managers and CEOs are going to get much more powerful Oh, it could it could it could increase the scale of the firm that you can run. Right. And that's certainly what Rippling is trying to do. Like, he's of the war. Right. He's attempting to build this, like, suite of HR tools where if he wins, he's gonna eat a whole bunch of billion dollar SaaS companies and, like, one one giant company. It's a very interesting point, Gary. I think what made me think about this is that with having all these AI SaaS tools, it's gonna give the ability to all these leaders and all these orgs to basically open the aperture of the context window of how much information they can parse. Mhmm. Because there's a limit of how much, as humans, we can have meaningful relationship. There's, like, the whole thing with the Dunbar number. Oh, yeah. It's about 300 people that you 50. Hundred 50 that you can have a meaningful relationship with. But with AI, because all of these rocks now can read, I think we will be able to extend that Dunbar limit that we have. Yeah. I think Flo Crevello had this interesting post on Twitter that went viral around think someone had made a voice chat, like, just weekend project as a CEO, but it would call all 1,500 Right. Of their employees. Yeah. And, you know, it was, you know, a very short call, like, kinda sounded like it was from the CEO just asking kind of personally. I mean, it sort of reminds me of that scene in Her where it zooms out and actually, you know, you're following the experience of one person using the HerOS, but actually that HerOS is actually speaking to 15, you know, thousands or tens of thousands of people all at time. How many others? 8,316. Yeah. I mean, large language models can talk and can have conversations. And then to what extent can, you know, this power actually extend the capability of one or a few people to understand what's going on? I I heard about that use case. It got definitely got me thinking because as I understood, the project is something like it just it will call up all your employees, and then your employees can just, like, ramble about what they've been doing, and it will just extract the meaning out of it and give the CEO, like, a like, bullet point summary of here's the most important stuff. And there were a bunch of, like, SaaS companies that attempt to do these sort of, like, weekly pulse pulses from employees using, like, traditional SaaS software. But, like, that version is is literally a hundred times better than the pre LM version of this idea. But I wonder with, like, that particular tool. Just like it's not it's going beyond just, like, reading and summarizing. Like, this this is the argument of, like, if writing is thinking, then, like, there's actually just a huge amount of work that's involved in the effort of figuring out, like, who's an effective communicator and, like, what are the most important things to be, like what what are the key things to be focused on as a company? And I just wonder if that at some point, do the LLMs do, like, they go beyond just, summarizing and reading and doing actual thinking, at which point, like, who's actually running the the organization? Interesting thought. I guess the other thing that's kind of interesting about how Parker Conrad's thinking about it is I found out about this recently off an interview with Matt McGinniss, the COO, that there are more than a hundred founders who work at Rippling now as sort of specific people who run, like, an entire SaaS vertical inside Rippling. It's super cool the way he's built the team. Hart Hart probably knows a lot about it because you've done a bunch of interviews with him. Yeah. I mean, it's definitely very focused on recruiting founders. And I mean, Parker like, Rippling is essentially the the case against vertical like, all verticalization. Trying to horizontalize and take over all of HR and IT software. Yeah. Yeah. Like, the whole thesis is basically there's this underlying platform that has, like, lots of value, and he wants to recruit founders and teams that build on top of the platform. Like, it's almost a little bit more sort of like Amazon esque, whereas like shared infrastructure. Yeah. I think every product that they've released I mean, things like time tracking and whatnot. I mean, basically, they launch a thing and it hits like multi millions of dollars in ARR on day one of launching. And that's exactly what we were talking about earlier. Like, once you once you have a vertical, once you have a toehold, what you're saying is, well, I have to spend this money on sales and marketing anyway. Can I, you know, basically get higher LTV and hold my CAC constant? And that's sort of what if you if you look at all the top software companies today, it's like that's what Oracle is, that's what Microsoft is, that's what Salesforce is, rippling, knock on wood, gonna be the next. But it's it's an interesting alternative to going from zero to one totally on your own. TS, wanna talk about some of the voice companies that we have? I think that's, like, an interesting, like, subcategory of this of this stuff. It's, like, really blowing up now. I have a company that I work with called Salient that basically does AI voice calling to automate a lot of debt collection in the auto lending space, which traditionally like, call up people and it's like, hey. You owe a thousand dollars on your car. Yeah. Which actually with that. Actually, this kind of job is one of those butter passing job. It kinda sucks because a lot of these low wage workers work in all these call centers, and it's like a terrible boring job. So very high churn and giant headcount to run these because there's so many accounts with these banks that have to do that. And this is a perfect task that AI could automate. And what Salient has done is has been able to actually get very, very accurate, and it has been going live with a lot of big banks, which is super exciting. And this is a company from last year and demonstrating that that part of it that they were able to get in because they sold through TopDown. I guess the space feels like it's moving very quickly and that we have incredible companies that are voice companies like Vappy. And then people can sort of get started right away. And retail also, I mean, these are companies that have reached pretty fast scale just because it's one of the more exciting, like mind blowing things that you can get up and running within, I mean, literally the course of hours. And then some of the question that, you know, remains unanswered and we hope they figure it out is how do you hold on to them, especially as you run into things like the new OpenAI voice APIs. You know, do you go direct? Like, you prob it's probably way more work to try to use the underlying APIs off the bat, but these platforms are clearly low bar. And then the question is, can you keep raising the ceiling so that you can hold on to customers forever? Haj, you were making an interesting point earlier about, like, how the apps that people have built on top of LMs has changed from, like, early twenty twenty three when it started until now. Voice, which we were just talking about, is a great example of this. I think even if you went six months back, it felt like the voices were not realistic enough yet. The latency was too high. Like, there was it felt like we were probably a ways of having AI voice apps that could meaningfully, like, replace, like, humans calling people up and, like, here we are. And, yeah, I was just zooming out thinking back to the first YC batch where LLM powered apps first came in was probably winter two thousand twenty three, so, you know, almost two years ago now. And the apps were essentially just things that spat out some text and not even, like, perfect text. Rocks could talk. That's about it. Yeah. Sort of more like copy editing, marketing edit, email edits. It was just, like, kinda more, like, just, like, incremental. Yeah. Like, I I had a company I mean, the one that sticks in my head is a company called Speedy Brand. And all what they did is make it very easy for, like, a small business to just generate a blog and spit out content marketing. It's like a very obvious idea. And it wasn't perfect, but it was pretty cool at the time. And that's what we've talked about a bunch of the show, but that was like the chat GBT wrapper turned out around that time. So hey, like, this is what an LLM app looks like. It's just a chat GBT wrapper. It does very basic, spits out some text. Like, it's gonna get crushed by OpenAI in the next release. And it did. Yeah. Well, I don't know if No, she Cat one did. But that first wave of LLM apps mostly did get crushed by the next wave of GPT as well. Feel like we've had this sort of boiling of the frog effect where from our perspective, it's sort of like every three months, things have just kept getting progressively better. And now we're at this point where we're talking about, like, full on vertical AI agents that are gonna replace entire teams and functions and enterprises. And just that progression is still mind blowing to me. Like, we're two years in, which is still relatively early, and the rate of progress is just, like, unlike anything we've seen before. And I think what's interesting to see is we discussed this in the last episode is a lot of the foundation models are kinda coming head to head. There used to be only one player in town with OpenAI, but we've been seeing in the last batch, this has been changing. Claude is a huge contender. Thank god. It's like competition is, you know, the the soil for a very fertile marketplace ecosystem for which consumers will have choice and founders have a shot. And that's the world I wanna live in. So people are watching and thinking about starting a startup or maybe have already started, and they're hearing all of this. How do you know what the right vertical is for you? You're gonna find some boring repetitive admin work somewhere. And that seems to be just like the common thread across all of that stuff is if you can find a boring repetitive admin task, there is likely gonna be a billion dollar AI agent start up if you keep digging deep enough into it. But it sounds like you should go after something that you directly have some sort of experience or relationship to. There is a common like, if there isn't, there's definitely a common thread I've seen in the companies that are that I'm seeing promise with. And another one just pops into my head, sweet spot. I think I mentioned on this before, like, they're basically building an AI agent to bid on government contracts. And the way they found that idea, and this is a year ago, was they just had a friend whose full time job was to sit there on, a government website, like refreshing the page, like looking for new proposals to bid on. And they they were pivoting. They're like, oh, like that seems like something an LLM could do. A company from a recent batch which pivoted into a new idea that's getting great traction. Like, they're basically building an AI agent to do process like medical billing for dental clinics. And the way they found the idea was one of the founder's mothers is a dentist. And so he just decided to go to work with her for a day and just sit there seeing what she did. She's like, oh, like, all of that, like, processing claims seems, like, really boring. Like, an LLM should totally be able to do that. And he just started writing software for, like, his mother's dental clinic. So I guess, I mean, in robotics, the classic maxim is, you know, the robots that are gonna be profitable and that are gonna work are gonna be dirty and dangerous jobs. And in this case, for vertical SaaS, look for boring butter passing jobs. Yeah. Well, with that, we're out of time for today. We'll catch you on the Lite Cone next time."
  },
  {
    "name_video": "Twitter vs. X: Product Lessons For Startup Founders",
    "description_video": "In the first episode of our new series, The Breakdown, YC’s Tom Blomfield and David Lieb take a closer look at X to find what lessons there are for founders building consumer products.",
    "related_categories": [],
    "page_url": "/library/Ls-twitter-vs-x-product-lessons-for-startup-founders",
    "youtube_url": "https://youtube.com/watch?v=EW9TUqOgjmQ",
    "mp3_file": "downloaded/Twitter_vs._X:_Product_Lessons_For_Startup_Founders.mp3",
    "mp3_content": "How do you know if your users are getting value from your product? It might be really easy just to say, well, if they're watching more content on Twitter, that must be good. But, yeah, me watching a bunch of fist fight videos is not what I actually want. If you're optimizing for a single metric to the exclusion of all other factors, you're probably gonna lead yourself down one of these rabbit holes. This is where I think founder CEOs do have an advantage. They they have the kind of moral authority of, like, I started this company, this is what I believe in. This is where we're going. Welcome to a new series we're doing here at YC. We're looking at, some of the most popular consumer products from across the Internet and giving you our unvarnished thoughts. Tom and I both have a bunch of experience building products that a lot of consumers have used, and we thought it'd be interesting to just kinda like dive in and take apart some of the most popular products that you all probably use. So to start with, we're going to explore Twitter or what is it now called? X. X. X. Yeah. Twitter versus X and what has happened over the last year or two under new ownership, let's euphemistically call it. So where should we start? I think there's a ton of things we could talk about, obviously, here. And and the timing is right. This is like a very perfect moment to talk about Twitter. I'm sure a lot of people are using Twitter these days. By far, the biggest change that I have seen in Twitter over the last year or so is this shift from a, you know, chronological ish feed of topics that you have expressed that you want to follow Yeah. To now kinda like more of a TikTok feed of stuff that you might be engaging with. Yeah. And really explicitly, I used to see like, Twitter used to feel like a left leaning I mean, you know, I'm a moderate to left leaning person. The content was sort of left leaning politics. And now I just seem to get like MAGA rally after MAGA rally. Same. Yeah. Which is sort of, you know, fine. That content, I presumed it always existed, but I I just never saw it, and I I don't think I've engaged with it. In a sense, it's sort of imperceptible. You know, it's not like a button has changed or the color scheme has changed, but just somehow the content has quietly morphed in a way that is becoming more and more evident. Yeah. On that topic in particular, to be fair, I think Elon explicitly said, when you're using Twitter, you should feel equally bad if you're on the far left or on the far right. And perhaps he has achieved that. I don't know. But at least in my own usage of the product, I'm sure that my engagement is up and my happiness when I go and resume my life is lower. Totally. Totally. Feel the same way? I absolutely agree. Now I see way more videos of, like, some random fight in Mexico City or someone get smacked in the face by something or, like, random cat videos. Stuff is like, you know, it gets the the dopamine hit going or something, but I don't feel like I've learned anything or, like, engaged with someone who's taught me something. Correct. So why does this happen? Why are they doing this? Well, it's tricky. When a team and a product manager has a number to to, to work towards, and in this case, like dwell time or engagement or number of minutes each user uses a service, like, a well meaning product team, in my experience, like, tends to optimize and optimize and optimize for that single number, almost without regard for, you know, harder to measure stuff like taste or, like, quality or educational content or I don't know. What do you think? Yeah. You bring up, I think, the critical point, which is how do you know if your users are getting value from your product? Yeah. Right? It it might be really easy just to say, well, if they're watching more content on Twitter, that must be good. Yeah. They're choosing to do it. So of course, it's good. But, yeah, me watching a bunch of fistfight videos is not what I actually want. Even though rooted in my lizard brain somewhere, I'm gonna keep watching them. Totally. And when your business model is predicated on advertisers and selling like seconds of video roll, sure, the more hours your users spend on the site, theoretically, you should be getting higher ad spend. Whereas, there are business models like Google famously who aim to get you off the site as quickly as possible. You're getting value if you you did a search and the first search was so good, you click the first link and you disappear. Correct. Right? The counterargument that I would make to that is if I am highly engaged in content that ultimately I really don't like, long term retention will be poor. Right? And so eventually, even if your business model is ads and you're getting me to spend a bunch of time on the site, I'm gonna eventually stop using it or I'll switch to something else. Over time, the quality of the service and the desirability goes and your your best users churn and go somewhere else. So let's talk about if you're gonna go down a path like Twitter has gone down or I should x has gone down where you move to this algorithmic feed and it just figures things out. Sometimes you'll get users that are in a bad state like I was a few weeks ago where I just felt like every time I used Twitter it was bad and yet I kept using it. So I I tweeted about it and everybody said, oh, you're you're doing it wrong. You need to go and click the little dot dot dot button and say not interested in this post, which I did and it was very effective. But like, should the product designers make that more explicit? Yeah. Now is it probably a good time to actually dive into the Twitter feed and take a look at it. This is my Twitter feed. I hope there's nothing too embarrassing. The first, the first item is this tweet from a guy called Massimo. I I actually do follow him. His tweets generally pretty good, but it's a sand castle maker, I guess. You know? If we scroll down, what do we got? Some political stuff. We've got some random soup. What is this? The thing I really noticed is like a bunch of just like political videos, I'm just not really interested in. What percent of the world's population is white? Sixty three. Forty three. This? 70. 40. I think you want 70. Can't like percent. Why am I seeing this? So what you're saying is I have to go to these three little buttons. Yes. And if you click not interested in this post, it will, I believe, eventually have you stop seeing Okay. So I don't need to mute or block. I'm just like, no. But but here's a great product design question. Like, they've now given you many tools to potentially solve your problem. Yeah. And I don't know what I'm okay. Not interested. Fine. Keep In fact, we can maybe pull up the the screenshot I found here. I was trying to like figure out what do I do and I came upon this Reddit thread. How do I stop Twitter from showing me random bullshit in my feed? But yeah, this is basically like the instructions off product on how to use the product. Yeah. When people need to, like, record long videos telling other people how to use your product, you've probably done something wrong. The question is, again, like, how did we get here? Like, why were these changes made? I suspect a lot of it is top down trying to drive more engagement. The question is where does it go and have they thought through that? And so like it's it's perhaps useful to look at history and see the kind of the history of social networks and how this has played out for each of them. And so if we start with like Facebook let's say. When Facebook started there was no newsfeed. It was your personal wall. You could post content there. We're aging ourselves now. The single biggest change that Facebook the product ever made it for the better was moving to this news feed where basically anytime someone would modulate their wall, it would show you the content that you had chosen to see. Yeah. So instead of having to go and creep on each individual person Just put it all there. It was content that you had already expressed that you wanted see. Yeah. People who followed and they followed and brought it to you. Right? So that made a lot of sense. There was a huge uproar at the time though, if you remember. Yes. There were protests outside the Facebook office, but every single metric was way up. Yeah. And that's probably in the indicative of any consumer product change. You you change something that people are used to. You're gonna get millions and millions of people screaming about it whether it's good or bad. Yeah. So anyway, Facebook made this change and But but then what happened? Then Facebook got really popular and my mom joined and my sister joined and all these people that I don't really wanna keep in touch with joined. And so the the Facebook news feed got a little diluted for me. Totally. And then what happened? Instagram came along and it was a new network. It was a different type of content but I think the biggest difference is the network was different and that was great. It was the people I wanted to follow. Yeah. Was actual friends. The adopters again rather than this broader expanded social group. But then what happened? Everybody else joined. I started following brands. It was interesting for a while but then in the drive for engagement, they just started putting more stuff in my feed that I didn't really wanna watch. And now I open Instagram and it's like approximately zero photos of my friends and just kinda random clickbait. Yeah. Totally. So it goes from a sort of this tight knit social community. People you're seeing every day, you're engaging with their their photos, and then it sort of broadens out. Like, how did we get from a small social network of my friends to this like just engagement thing? Yes. And TikTok, the most recent one, I think just skipped straight to the end game. Total speed. Which is like, let's just show all the possible content in the world and let the algorithms figure out what the human brain wants to see. Yeah. And it feels like a a a deeply unsatisfying experience. You're just empty calories perhaps. So yeah. What what can people learn from this? I I would say what I would try to encourage product builders to think about is like what problem are you really trying to solve in the world? If it's boring like being bored, then TikTok maybe is an awesome product to solve that. If the product you're trying to build is like connection between real people, then probably you need to very explicitly like fight against this urge to just drive more engagement. Totally. And the sort of understanding that human communities are based around Dunbar's number. You know, you can only really know a 50 people. And so a social network that kinda constrained itself to that smaller group might be really really interesting. But you have to find a different way to monetize because you're not getting as many eyeballs, as many hours of viewership, therefore your ad revenue goes down and Correct. And shareholder pressure ultimately pushes you towards this algorithmic feed. Alright. So you're Elon. What should you do? I don't know. I don't know if he bought as a as a commercial concern, really, or for political influence or on a whim as a joke. Yeah. I don't really know. Yeah. I think if I were in charge, the number one thing I would do is I think the idea of an algorithmic feed where it tries to sort the content, the universe of content that you might want to see, sort it per your interest. I think that makes a ton of sense. The introduction of a lot of entropy content is what I would call it. Content that like maybe I want to see but very likely I don't want to see like the fist fights and the car crashes. I think that needs to be done much more judiciously and much clearer ways for users to give feedback about what they want and don't want. Yeah. Because as you said earlier, there are these ways to curate Twitter. And actually, it does seem to be pretty effective. You spend five or ten minutes telling it what you like and you don't like, and your your feed gets better. Another way I tried was these, these kind of curated lists up top. So you've got your, obviously, your following tab, which is people some people like it, some people don't. There are these lists, kind of pre made lists. So when the Ukraine war first broke out, I followed a set of a set of people who seemed to be very well informed, and this is advertising free. There's no random Mexican fist fights. It's it was a pretty high quality way, to learn about what was going on. The same with The UK politics. So we've just had an election in The UK. So it just zooming out. What you're basically doing is you're inheriting the credibility of work other people have done that you That's exactly what I'm doing. But it's so hard to find these lists. I had to No one has go around. It's it's insane. And these are so so powerful. And the thing that I find Twitter is still for all of the junk on it, the garbage, the the clickbait, the thing that I found the most valuable is when there truly is a a breaking news event, you know, the the attempted assassination of Trump, the still the first place he got. It's unbelievable. Like, the Ukraine war, UK politics, in those moments, it it shines. Yep. But when there's nothing happening, it's just feeding you this, like, constant drip feed of junk. Why is it so good at those things? I think it is that it is so easy for first party information owners to put content onto the platform. Yeah. So like we saw it like during the assassination attempt, we saw a bunch of firsthand videos that the normal media organization would not have produced for us so quickly. Especially magic. It is. And and I feel like community notes have done a relatively good job of calling out the stuff that's fake news versus real news actually. So in in one sense, I think that's been a really positive change. Maybe let's let's touch on the some of the other changes we've seen over the last twelve months or so. The blue tick, that was a big a big status symbol, originally, wasn't it? Yes. Oh, yeah. Blue tick? I emailed the person I knew, expert, to get it. I got a blue tick. And, yeah, like, the blue check mark was a signal of credibility, I think. So that other people who saw posts that had that, they knew, like, okay. This is at least somehow legit. It's not just a random bot account doing something. And now you can pay what, like, $7 or $9 a month or something. And you you might have Donald Trump's parody account, but, obviously, parody account always gets truncated, and then you see the blue ticks. It's like, Donald Trump blue tick. This must be real. Yeah. So I think they overloaded this idea where they wanted to filter out bots and the only way to do it was to get them to pay money. Yeah. That makes sense. And if they connect that to the blue check though, they now overload this term and now I don't know if it's just a 12 year old in his basement paying for Twitter premium or an actual legit person that I should pay attention to. I mean, people talked about editing tweets for like the longest time as if it was gonna destroy the world or something and it's just really just being fine. Right? It's fine. It works. You should be able to edit stuff. Yeah. Yep. So that's a kind of big nonevent. If we just look at the sidebar here on the screen of Twitter, what are all those icons on the left? Oh my god. Yeah. You know? I didn't think I've clicked more than two or three of those. I recently clicked on the Grok one. Which is the Grock? Be that one. Is that one? Okay. Grock. What happens? This is a perfect example of like a product expanding beyond what I think the users think of it as. Totally. So this is basically ChatGPT inside of Twitter Yeah. Which to me doesn't make a whole lot of sense and I'm sure to any normal person makes zero sense. Okay. I think this is a great example of probably the job of a founder or product leader which is to clearly articulate to the entire team and to the world what this product is for and how you're supposed to use it. Yeah. And I feel like this is an example of it deviating from that. And I just worry there's just not a lot of great consumer product sense coming out of that. I think I admire him in many, many ways. I mean, if you saw the recent, SpaceX landings, like, catching the booster in the in the Amazing. Chopsticks, absolutely incredible. But when it comes to mass market consumer product, this does not seem super well thought out. Yeah. Yeah. Jeff Bezos once said that like taste is not transferable across domains and to me this is like a great example of that. I would say Elon like if I I drive a Tesla I think it's the best car that I've ever sat in. But the taste and the decisions they made on that do not match what I see on Twitter and X these days. Another topic, what's with the name? Why did we change the name to X? I think I've unironically called it x ever. Yeah. And I do not intend to change that. I do not. It's just astonishing because Twitter, like, got the verb, you know, like, to tweet. When your product gets the verb, you you won. Yeah. Yeah. Like, I googled it. Or with Bump, I don't know if anyone said, I'll I'll bump you. With Monzo in The UK, people said, like, I'll Monzo you money. Monzo me the money. Like Yeah. We got the verb. Right? Yep. Bump has been shut down for now a decade and Apple just copied it. So fourteen years later, now you can hold your two iPhones together and people literally call it bumping. They're like, we should bump. And I hear that and I'm like, yeah. No. It's a good name. So how how did we come up with our product names? For me with Bump, we built the product and I showed it to some friends and I said, what did you just do? And they said, we bumped our phones together. And I said, that's the name. That's it. Well, that's one of the beauties of starting a a consumer Internet company like relatively towards the start of the Internet. I mean, think These names are available. Exactly. The domains, could get Monzo.com. Actually, we were first called Mondo.com because it had these connotations of world in a lot of European languages, Mond or Mundo or, means world, and it's surface slang for awesome. Someone told me, but we we kinda just liked it. We could get the .com, and then we got sued. This German company, had a conflicting trademark, and so we had to change the name. And we went to our user and asked and, hey. What? We want we like the m. We got a new m logo. What should our new name be? And, like, 14,000 people suggested different names. And so Monzo was one of them, and it stuck ever since. But I think when you get something short and catchy and you have the verb, just like total insanity to change. I agree. Especially for something as meaningless as x. Right? Like Yeah. That the whole basis of that seems to be Elon Musk is obsessed with the letter x. Yes. And perhaps the most favorable view of it would be he has in his mind this grand plan of a future product that is not Twitter. Twitter maybe is some tiny piece of it. But he's putting that on the world ahead of saying what that product is and I think it makes no sense. Yeah. I mean, started out pre PayPal. It was was gonna be an all encompassing online bank. Right? And it sort of merged and there was a big fight over what name they chose. And there've been talks, mostly by Elon, it seems like, that Twitter's going to become a payments platform. So that's a view of this, like, Twitter becomes the everything app. Yeah. I would much prefer if they showed where it's going and then have the name match what people perceive when they see that product. Yeah. Versus what seems like the opposite. So if you're thinking about changing your name, how do you go about it as a founder? Yeah. Number one, if you think you need to, the best time to do it is now rather than later because there's less, you know, awareness in the world about your product. Yep. And I think that my advice is just try to pick something that people can easily say and when I say it to you you can type it into Google and spell it right. Yeah. You don't have to ask how is that spelt. Correct. Yeah. Never. And ideally, if you can pull it off, it has something to do with what your product does. And I think ultimately, the best companies bring meaning to the name often, rather than the other way around. Monzo doesn't mean anything like Yeah. Google didn't mean anything other than some nerdy thing. Yeah. Amazon is a big river in South America. Like, you bring meaning to it as long as you can say it and spell it. And I think that's all that matters. How do you think all of these changes have impacted the revenue, commercials at Twitter? Right. Well, I don't have any inside information, but from what I've read, a bunch of advertisers don't love the type of content that their ads might appear next to. And so they've pulled out. So I think ad revenue is down significantly. I don't know how the subscription revenue is doing. I'm sure it's okay, but probably not taking over. So probably the revenue metrics aren't great, but I bet the engagement metrics are off the chart. Yeah. And that's sort of the problem. Right? When you give a team, especially as a product manager, the singular number to optimize for, just everything else goes goes out the window and you just it's like the infamous sort of AI that's that's tasked with making paper clips. You just end up within the whole world enslaved for this enormous paper Did my job boss. Yeah. And so I I do think that a lot of top down ownership is really important in things like this. Like when I worked on Google Photos, I was kind of the user that we were designing the product for. And of course there will be critics of that. You know, I was designing the product for how I wanted to use it and there are people who wanted to use it in a different way. Yeah. But at least it had a consistent worldview of like what this product is for, how you should use it. And it feels like maybe we're getting that from Elon here. And what he wants Twitter to be is just we're not ready for it. Guess, I don't know. To wrap this all up, to kind of summarize what we've talked about, what advice would you give to a product founder who's starting out? Maybe they're they're hiring their first or second product manager, kinda scaling. I think the number one thing is trying to articulate what is your product for and who is supposed to use it. And what are the good states that a user might get into and what are the states that maybe look good but are actually bad. Yeah. And can you wrap that up into a metric? Like is there always a metric you're optimizing I'm not sure there is to be honest. Thinking about my example on Twitter, I'm sure my time spent is up. I'm sure every engagement metric, number of likes, number of whatevers is all up. But if you asked me after I closed the app, how do you feel Dave? I would probably say, ugh. That was a waste of my time. Yeah. I wish I'd been playing with my kids instead. And this is kind of heresy, right, to tell consumer product founders that they just we're not saying they shouldn't have metrics. Sure. Metrics should be part of your toolkit. But if you're mindlessly optimizing for a single metric to the exclusion of all other factors, you're probably gonna lead yourself down one of these rabbit holes where you end up with a with an engagement file. Yeah. I think this is where the role of the product leader is really important. Because you can just say, we're building it this way. I might not be picking the optimal way to grow this product, but at least it's gonna be consistent and have a a clear purpose. And I having that kind of clear vision for what you want your product to be over time and and having having the authority as a founder to to kind of enforce that. Right? Like, is where I think founder CEOs do have an advantage. They they have the kind of moral authority of, I started this company and this is what I believe in. This is where we're going. Yeah. When when you're saying that, I'm thinking of Steve Jobs in building the iPhone and making decisions on what they were gonna do in the iPhone and what things they were explicitly not going to do. Some of those decisions in hindsight I think they changed and they were probably the wrong decisions. But he was the owner of that and so there was really no debate I think inside of Apple about what things they would do or what things they wouldn't do. It was just baked into the culture. Everyone knew, like, we're gonna do it this way. And so I wanna thank you all for listening to our first and hopefully a long series of of product deep dives. If you have a product that you would like us to dissect, let us know in the comments. Yeah. Thanks for watching."
  },
  {
    "name_video": "Why The Next AI Breakthroughs Will Be In Reasoning, Not Scaling",
    "description_video": "In this episode of the Lightcone, we dig into the results of a recent o1 hackathon hosted by YC to find out what can be unlocked when founders leverage a SOTA reasoning model.",
    "related_categories": [],
    "page_url": "/library/Lr-why-the-next-ai-breakthroughs-will-be-in-reasoning-not-scaling",
    "youtube_url": "https://youtube.com/watch?v=JiwiqYGw4iU",
    "mp3_file": "downloaded/Why_The_Next_AI_Breakthroughs_Will_Be_In_Reasoning,_Not_Scaling.mp3",
    "mp3_content": "I remember about a year ago, one of these conversations around, are we gonna have AGI? What would that look like? What one of the arguments for it was that, well, like, at some point, the AI will get good enough to just, like, design chips better than, like, humans can, and then it will just, like, eliminate one of its bottlenecks for, like, getting greater intelligence. And so it feels we're on the pathway to that in a way that we just weren't before. The last episode, we were talking about, you know, what are you gonna do with these two more orders of magnitude. Since then, Sam has told me that he actually wants to go to four orders of magnitude. It's the worst that these models are ever going to be right now, right this moment. Week to week, you know, there are things that you couldn't do maybe a month ago that you could do really, really well right now. So that sounds like a pretty crazy moment in history. Welcome back to another episode of the Light Cone. I'm Gary. This Jared, Harge, and Diana. And at Y Combinator, we've funded companies worth more than $600,000,000,000. And we fund hundreds of companies every single year. So we're right there on the edge of seeing what is going to work both in startups and in AI. Recently, Sam Altman wrote this pretty wild essay that predicted that AGI and ASI are coming within thousands of days. Seeing him on Monday, he actually directly estimated, you know, between four and fifteen years. Have you guys read this essay yet? And what do you think? Yeah. I read it. And one one of the interesting places where I think we have a unique perspective is that we were we had a front row seat to the very beginnings of OpenAI, because OpenAI basically spun out of YC. And so what was cool to me reading this essay is that it's literally the same ideas that Sam was talking about in 2015 when he started OpenAI. Like, he's been talking about this, like, basically since I've known the guy. And in 2015, when he said these things, he sounded kind of like a crazy person, and not that many people took him seriously. And now, ten years later, it turns out he was right, and actually we were much closer to AGI than anybody thought in 2015. And now it doesn't sound crazy at all. It sounds like totally plausible. I mean, the essay itself is pretty much the most techno optimist thing I've read in a really long time. Some of the things that he says are coming are pretty wild. Space colonies, fixing the climate problem, your intelligence on tap, being able to solve abundant energy. Yeah. I think he's basically ushering in this sort of Star Trek future on the back of literally human intelligence, being able to figure out all of physics. Yeah. Sam was always I I remember back when he was starting OpenAI, one of the things that really motivated him to do it was he believed that when we actually had AGI, basically, we'd be better at doing science than humans were, and therefore, would accelerate the rate of all scientific progress in every scientific field. That was that was part of the motivation from the very beginning. And I think it was really connected to o one. Even when Sam came and spoke at our at our at our batch a year ago, this is long before o one was publicly released, but it's being worked on in, you know, in in secrecy by OpenAI. That was the thing that he was most excited to talk about was giving GPT more advanced reasoning capabilities. And I think this is the reason. It's because, like, the thing that's missing from its ability to actually do science and, like, accelerate technological progress is it needs it needs to be able to, like, think through things. One thing that really strikes you about o one in particular is if you read one of the papers talking about it, so capabilities and potential for the future, it talks about how it does really well in chip design. And I remember about a year ago, one of these conversations around, are we going to have AGI? What would that look like? One of the arguments for it was that, well, like, at some point, the AI will get good enough to just, like, design chips better than, like, humans can. And then it will just, eliminate one of its bottlenecks for, like, getting greater intelligence. And so it feels like that's already kind of, like, we're on the pathway to that in a way that we just weren't before. Diana's gonna show a cool demo of doing exactly that. It's fun because we run this hackathon with OpenAI, and Sam came over and judged the winners. And one of the participants was actually Chip Design. This company is called Diode Computer. I think we mentioned them earlier. What they're building is basically AI designer for circuit design. And their previous product, it could handle in the if if you think about PCB design, there's four major steps. The big expensive part that you need a lot of all of these need a lot of expertise. So the system design, how do you really put together the architecture of it? How do you design all the components, like the resistors they need, the sensors, the specific processing units? Then you need to go do the layout with schematics, placing then doing the routing. And routing is known to be a NP complete problem because as you have different layers in circuit boards, there's interference. And this is why companies like NVIDIA, Intel, Apple have a gazillion electrical engineers because this is a NP complete problem. Up to GPT four, which is this company had built, it actually put some constraints and was able to automate a lot of the schematic design. Like, you, as a human, had to design what components it needed to go on the design. And to some extent, the routing, it was simple, which is still pretty cool up to that point. So they were able to automate all that. But the thing that they demonstrated now with o one was actually able to do the system design and component selection, which is crazy. So it would be able to read all the data sheets and select the right components. So the way the product would work, it could say, want to build a wearable heart rate monitor with an acillimeter and a microcontroller, very high level. And given this constraint and looking at the database, it would be able to match the specific acillimeter and microcontroller and heart rate monitor sensor and connect it and just output the end result. What we are trying to build today is a wearable heart rate monitor, something like you would see in a whoop, for example. The o one is amazing, but one of the downsides is that it's a bit slow. So we actually cached a pregenerated, like, system diagram that the one was able to generate. It's pretty good. It has a USB c connector, an IMU, like we requested, a heart rate sensor, and, like, this is a microcontroller. So I'm gonna show you how you can go from this and, like, build a PCB. So we are gonna, like, build the project. The output of this is code. We actually use Autopilot, which is a a electronics as code language. And you can see that it took all the blocks in the block diagram, stitched them together exactly how we want. And the the second step is it actually is going to generate a layout for the board. And so now, like, we can directly open it, and, here you go. He here's the board. It's, quite it's quite nice. There's still, like, a couple of, like, fine tuning steps required. For example, we could, like, move, like, this USB type c connector slightly. We can, like, change the shape of the board. But but these are all the components. And then, like, thanks to the system that we built, we can, like, call the auto router on this specific board and actually get a fully working printed circuit board back. So this is actually one of the examples on the o one paper Yep. That it would do EDA. But actually, they went a step four forward because the example on the paper, they described the EDA step process is this set of tools for circuit design. It does sort of the design of the schematic, also the simulation and bug verification. It's easier to verify stuff than to select and write it. So this company actually went a step further beyond the paper because the paper did mostly the last stages of verification and simulation. I guess it's an interesting example of using different models for different tasks and in different workflows. So in order to actually pick the correct components off the bat, you know, even before you, you know, place it on a circuit board, you've got to actually have probably rag on structured you know, taking unstructured data like PDF documentation and turning into a structured form that then four o mini sounds like is being used to actually extract the data and then put it into a Into format for o one. Yeah. I think this is actually a very common pattern that we're seeing a lot of the interesting products built with AI. You use different kinds of models. So, yes, four o minis for PDF extraction and then o one for the reasoning because it's actually very hard to select the components for parts. I know Jared, you also work with a lot of hard tech companies, and the whole part of selecting whatever the servo, the motors, the sensors is like so it's it's it's takes a lot of thinking for a human. Yeah. The the other thing I think is interesting about this example is, like, during the batch, before o one came out, Diode had tried to do this with GPT four o, and it just flat out didn't work. And then they basically tried the same thing, the same prompts, but fed it to o one, and boom, all of a sudden, it worked. And so there really is this sort of like step function capability unlock. They were so excited when I talked to them and they showed me. They were they had this big smile. It's like, wow. They themselves are super impressed. This hackathon that Diana ran, incidentally, I I think it was a really interesting concept for a hackathon. Like, most most hackathons are like people who are just sort of like building something that they plan to throw away. And the cool thing about this hackathon is it was all actual YC funded startups that have real businesses, that have funding, that have like a real thing with real users, and they were all building actual features for their product that they plan to release to real users. It was it was really cool, I think, for us to see how o one unlocked capabilities for real companies, not just like toy projects. Yep. There's another one that was similar in here in terms of reasoning for o one. I think, Harsh, you work with Camphor. Yep. So tell us what Camphor does. It's I mean, the tagline is Devon for CAD. But basically, let you create CAD designs with just natural language. You just type in something that you want to design, and it just spits out a CAD design for you. So can you design me five airfoils optimized for 50 miles per hour with a minimum drag to lift of 15 at a five degree angle of attack? This is very specific. Yep. Normally, this would require, actually, a mechanical engineer to be running all the simulations and solving the the equations. And what you're seeing why it's, like, flashing is, like, running all the multiple simulations for them at the same time. So it's actually kind of like a copilot to SolidWorks. Yeah. They actually built their like, initially, they were going to build this as a plug in to SolidWorks, but they went for, like, the even harder technical approach, which was, now this is just, like, a executable that runs on your desktop, and it essentially opens up SolidWorks for you and And then it just starts clicking around in the UI pretending to be a person? Yep. Nice. And you saw there what was really cool earlier. They flashed at the math trace. So o one was actually able to write all of these equations, all these partial differential equations, and solve basically naive Stokes questions to actually solve airfoil. That is really cool. The last episode, we were talking about, you know, what are you gonna do with these two more orders of magnitude? Since then, Sam has told me that he actually wants to go to four orders of magnitude to get to a trillion dollars in, you know, sort of spend. I mean, pretty wild. But on the other hand, like, you could see where that might go. You know, you could imagine an airfoil is still it's, you know, very impressive and complex, but sort of what's we're capable of doing today in 2024. You could imagine abstracting that to, like, understanding the nature of physics, I suppose. Like, it it would be sort of hard to see that maybe in the current version of o one. But if the scaling laws hold, it seems entirely plausible that, you know, far more difficult engineering challenges such as, you know, room temperature fusion, like, are all sort of ultimately engineering fraud mechanics. There's weather prediction. There's all these complex physical phenomenas that are very hard to solve, you need basically PhDs. And to Sam's essay, this is a glimpse into what AI and where o one is heading with with this chain of thought and reasoning. Especially, like like, Sam's essay, the the vibes are sort of training intelligence and this new age of intelligence. And then the o one paper just that I think this whole idea of now you can actually give, like, feedback, not just on, like, the outputs and whether you got the correct answer, but, like, on all of the steps to get there. And, like, you're basically teaching a model how to think. Like, the camper guys are mentioning it to you. Right? The reasoning traces, and they can probably go back and, like, fine tune the various steps for, like, every output to make sure that the model's thinking how they want it to think. That one that just is, again, very, the AGI conversations, I feel, like, a year ago were all sort of in this direction of, like, what happens once you can actually start teaching the models to think better versus just, like, spitting out the correct answers. And then the scaling laws, this is, like, even more surface area for, like, throwing compute at the problem. Yes. Right? Like, now you can just basically put compute at the inference step and And iteratively have something come out that, you know, you can actually spend more money and more time and have a result that iteratively gets better, similar to what you might expect from a human scientific organization. Yep. Maybe more consistently, even. Diana, do do you wanna talk about the architecture and how they actually created o one? I think a lot of it is inspired from what they've been working for many years since the beginning of OpenAI, I think one of the inspirations is a lot of the work they did with Dota. Yeah. Does everyone remember when, like, before OpenAI was famous for GPT, the one thing that he was, like, kind of famous for, that at least people in the tech industry knew, was Dota, was, like, winning video game competitions. That was their first big breakthrough. And if I think I think back then, Dota wasn't something that took the world for a storm. I mean, maybe only the research community kinda knew about it, but it wasn't anything practical. But what was impressive, it was beating a lot of the best Dota players. So Dota is this complex game of resources and planning. Right? And they implemented a lot of kind of reinforcement learning type of techniques in there, which I think were also inspired early days from AlphaGo and AlphaZero as well on how it solve Go. Yeah. It wasn't just brute forcing through it, but actually having a rework function and and trying to solve towards it. And Yep. Even this is why there's just so much talk about Q learning because that's sort of the fundamental algorithm behind the family of algorithms behind RL. So yeah. So, like, because of Dota, they got really good at doing reinforcement learning. That's how they got it to work. They just had it play against itself like a million games. And then how does that connect to O1? So I think this is where there's a bit of a big stepping function because how do you then incorporate that into the family of GPT type of models? GPT is all generative based on predicting the next token and patterns. And then getting those results to check that they're correct. So I think a lot of it is you had to have a lot of data that was factually correct and fed into probably the model and the training and having a reward function that get it to reason a bit more about the output and make sure that it's correct. So they've probably done a lot of interesting techniques with that, and there's probably a lot of secret sauce on the type of data sources they've done. Maybe one of the speculations we could do is a lot of very factually correct information. Like math problems and science problems and things like that. Yeah. And that's why I outperformed so much in those. Yes. Yeah. One of the things I think is interesting, Gary, to your point about the scaling laws is a lot of people are really focused on the next, like, scale up of the model, like the GPT five series of models, which are being trained now and people are working on them and they are gonna come out. But I think people may be underappreciating how big an unlock this other direction is. Because there's there there's two research directions being explored in parallel. Right? Like, one is the straightforward scale up of the underlying LM, and then this o one direction is like a totally orthogonal research direction in which you unhobble the model by having it do reinforcement learning while actually trying to do things in the real world and getting better at them. The version that's come out so far, it's still only o one minutei. And if you look at the actual o one preview. Sorry. O one o one preview. And, like, if you look at the performance asset they released, like, the full o one model, which is coming out any day now, is a huge step function above even o one preview, which is what enabled all these incredible results at the hack athon. Sam was just telling us that, like, o two and o three are not far behind. And so, like, I think people may be underappreciating just how big an unlock we're gonna get. Yeah. And o one also is really opaque still. I mean, if from a, you know, sort of business perspective, this is a new method. I think at great cost to themselves, they actually did create a new dataset to train the chain of thoughts. You know, it's essentially a giant dataset of, you know, given task x, can you break it down and into you know, break it down into parts? And, you know, what's funny is this sort of rhymes with what Jake Heller figured out for case text that Yeah. If a given task that you give an LLM is hallucinating or, you know, not consistently giving the output you want, you're trying to make that particular prompt do too many things. You need to break it down into steps. And so what's funny is Jake's prescription is really two parts. You know, one is break it down into steps, and then the other part is evals. And it sounds like basically with o one, the chain of thoughts will replace the workflow. So you might not need to break it down into steps yourself, but the evals are still really important. Mhmm. Even like in the aftermath of that episode with Jake Heller, it sounds like some YC alums are reaching out and saying, that episode helped us figure out and unlock something really big. Like Yeah. A lot of people really were just raw dogging their proms. Yeah. They got to you have an example of the company you work with, Dyer, that got to 100%. Yeah. Just by doing exactly what Jake recommended, which is like having a really big eval set and being very careful about testing every step of your reasoning pipeline. So one of the theories that I have now is ultimately, like, if you superimpose that on what is a moat. I mean, that's one of the key questions that everyone's sort of asking themselves right now. You know? Okay. Like, GP five's coming. Two more orders, maybe four more orders of magnitude are gonna come in terms of a trillion dollars spent on more training. That's pretty wild. You know, if I'm a wrapper company or I'm trying to do vertical SaaS or I'm trying to, you know, build my own business, what do I do? My theory would be it's the evals. It's, you know, write the 10,000 test cases, and the only way you get access to the test cases that are proprietary data, that are not, like, commonly available is that you literally you know, that's what a bunch of our companies in this current YC batch are doing. They're doing the hard work of doing enterprise sales. They're getting embedded and sort of going quote unquote undercover into these, you know, sometimes really boring jobs, sometimes really complex or arcane jobs. You know, it's everything from, you know, I think accounts receivable all the way over to how do you do, like, financial accounting or forensic accounting. Like, it's just all kinds of things that are really not readily available. You you can almost argue that anything that is consumer and publicly available on the Internet, that's gonna be in the base model. Yep. So then your moat ultimately is for all of the other things that are not already online, whether it's, you know, for case techs being a lawyer or maybe over here on science or, you know, in terms of building airfoils. Like, what you're trying to find is the the data that is proprietary in some use case, some vertical, that allows you to build that 10,000 test case eval, and then that's actually the value. I mean, this is just a crazy theory. But Yeah. It's actually Yeah. Might might be what happens. Totally. An interesting implication for startups based on everything you just said is it may be worth thinking about who like, of your customers, picking the ones that will pay you a lot for that final, like, 10%, like, accuracy and perfection. I think, like, Camfra are actually a good example of it, where there's lots of interest in this sort of text to CAD design amongst, like, hobbyists or people who wanna prototype things and get something up and running very, very quickly. But there's also, like, a segment of the market where it's people who are literally designing, like, you know, airplane parts where there is no room or, like, margin for error. And o one makes it quite easy or easier now, right, to get to, like, the prototype, like, you know, 80% of the way there. But I think the strongest technical teams have the option to go all the way and go after the segment of customers who want, like, a % accuracy and will pay a lot for it. Arch, always go all the way. Yeah. Well, I can always go all way. But I I think it's interesting because one of the things that gets pushed is, does o one, or does AI in general, actually make it commoditize a lot of the tech and make it less important to be a strong technical team? And it just seems unlikely to me. It seems like actually the last It seems it's the opposite. Yeah. Yes. Like, all of the value is probably gonna be captured by, like, the strongest technical teams who can build on top of whatever the base level of tech is and get the final 10%. Hey, Gary. I think it's the prompts it's it's the evals, and it's also, like, the UI layer and the integrations that go around it. Because like just the prompts themselves are not a product for a company to actually adopt Camfur. Like, it needs to actually integrate into their existing tools. It needs to have a well thought through UI and Yep. Workflow and all the tooling to sort of make the prompts useful. Yeah. Well, and then it's distribution. Right? Like, how do you actually get in front of people? How do you establish your brand? And then a perfectly good moat is difficulty switching, actually. And once you have all your data and it's working and paying 10,000 or a hundred thousand dollars ACV, sometimes a million to 10,000,000 ACV, you know, man, it's gonna be hard to switch. So all the classic moats still apply. You know, this is still software, but, you know, you can unlock this capability, you know, this is a moment. You know? Another point to double down on the importance of evals is that that still applies in the world of o one as founders are wondering how am I gonna still build the best product on top of o one? Does it change? And everything we discussed in the episode with Jay Keller applies because GigaML is this company that Harsh should work with. Yep. And Carrie too. Very. Right? Yeah. I adopted them. That's true. Will you tell us a bit about what they what they do? The full full backstory is we funded them for a completely different idea. Something like they're an Indian founding team. And their original idea was something about helping Indian Indian high school students apply to US colleges. Very, like, niche idea. But they're super crack IIT, AI engineers, researchers. Yeah. And it just bay like, it just happened. Like, we were like, this is not a great idea. AI is, you know, changing the world, and you'd lit like, your research that you've been doing at university, at college, is all aligned with, in particular, fine tuning LLM models. Originally, it wasn't even the AI version of helping Indian high school students apply to It would just do AI, actually. So it's like a classic YC story where it was like, these are two clearly brilliant engineers. We don't like the idea at all, but we should just fund them anyway and hope something works out. And the idea they actually pivoted to initially, which they raised the seed round for, was helping companies fine tune open source models so that they could get to, like, equivalent performance as, you know, at the time, was really only OpenAI. But I think, in general, what we found is that those have not proven to be great businesses because just the cost of the models has gone down and the performance of the open source models has gone up. You just haven't had to fine tune as much as people thought you would need to. Yeah. Because the models are just keep getting better. It's kinda betting on the different on the opposite direction on AGI that let's just trust that these models are gonna keep getting better and better, which, ergo, doesn't require as much fine tuning. Yeah. And so they pivoted again into, well, like, let's just find a like, let's just find, like, a we're really good at AI now. We're, like, world experts in, like, fine tuning and squeezing performance out of these models. So let's just, like, find a vertical application for that. And they went into AI customer support, which is, like, competitive. But, again, I just think if you're an intensely technical team, you can still find ways to squeeze out, like, a comparative edge against other teams in the space. And I think that's what they've done. The problem with customer support is you're dealing with very kind of squishy problems. There's just so many edge cases. It's just the space of things that could go wrong as a customer rep is enormous. Well, it it seems competitive, but the thing is hardly any adoption has actually happened. Like, it's not like the world has replaced all the customer support agents with AI yet. We can all see that it's going to happen, but it hasn't happened yet. And so from that standpoint, like, it's wide open. What I what I found, at least when I spoke to the Geekaml team last, is that part of the reason for the lack of adoption is that rules based systems work fairly well for most, like, of the simple cases. And there's just not trust or belief that you can, like, build AI that's good enough to solve, like, the real messy stuff. And so most companies that were pitched on, like, an AI customer support agent were, like, well, you can't actually go all the way and solve, like, the, like, hardest problems that take up most of the time, and the rules based system works, like, totally fine for everything else. And so I remember when they were first pitching this idea, people would just be like, this is just overkill. We don't need it. Our rules based system works totally fine. But it seems like that is no longer the case. Yeah. Because they now have some really legit customers. Who's? Zepto just signed up. Okay. So last time I did office hours with them, they said that they automated 30,000 tickets per day. So they you know, I think Zepto had more than a thousand people working on those 30,000 tickets per day, which is, you know, 30 tickets a day. And then the interesting thing was, you know, on the one hand, you know, this is probably one of the things that frankly everyone when they think about AI, they're a little bit worried like, you know, are these jobs gonna go away? And the interesting thing about the Zepto customer support job is that it's so not a fun job that I think the turnover rate was something like a few months. Like, you know, most customer support agents only wanted to work there for, you know, six months or less. So you this actually is an interesting case of when you when something is incredibly rote, it's literally replacing butter passing. Like, these are sometimes not really actually good jobs. And, you know, hopefully those people can go and do something way more awesome with their time know, brains than, you know, these rote jobs that apologizing for Zepto orders that got misplaced. Exactly. Right. But the crazy thing they figured out with o one is that, to your point, Harsh, their previous implementation before o one was GPT plus rules and all that, and it would not be able to handle most of the cases. It would have about a 70% error rate. Now what they did is doing the technique like Jake Heller described with really going hardcore on the EBALs plus o one. During the hackathon, they got to only 5% error, which is that's an order magnitude improvement. Yeah. The other row in this is incredible too. Right? This is what I saying, like, the complex, like, the things that are, like, very complicated that take up lots of time and are expensive to solve, would, like, essentially, like, they cannot do them. They were shrunk. Yeah. So basically, just, like, 0%. And that's what I'm that that's what they were encountering when they were selling this is a lot of people are well, actually, all of the stuff that we want to automate are these, like, complicated edge cases that waste lots of time. And, like, they just they they couldn't actually do any of that. But, like, now they're at, like, 15%, and that's with, like, o one preview alone. Oh, no. That's is that 15% up just error? So now they're at like They're at 85%. Yeah. So they went from 0% accuracy to 85% accuracy. Yeah. So the interesting thing here is that o one it's not even o one yet. It's o one preview. And then it's such a new technique that I think they're trying to protect their advantage right now. You know, if you use o one in ChatGPT, it looks like it will tell you what's really going on. But apparently, they have a fake model that just spits out things to give you the impression that it's breaking it up into steps. And they've actually, you know, hidden it because they don't want other people to have access to that data yet. But the next step seems like it needs to be some interpretability, directability, and then for that to happen, you know, I'd be curious if o two ends up having that. Like, you want to be able to see, okay, well, show me the work. Show me the steps. And, oh, like, that step, the third step, you know, can we rerun this, but I want this to branch in this way. Or edit it. I think this is one of the things that would be the next unlock is right now, it has the plan that it comes out, the chain of thought, but you cannot edit it. So imagine now right now, today, o one just outputs, whatever, 15 steps to the problem that you need to solve. And imagine now being able to edit each of the steps. Then you get into the super, super fine to next level of Jake Heller. So this is the it's the worst that these models are ever going to be right now, right this moment. And, you know, literally week to week, you know, there are things that you couldn't do maybe a month ago that you could do really, really well right now. So that sounds like a pretty crazy moment in history. So we've been talking a lot about the kinds of companies and ideas that get this wave of uplift from this model improvement for o one. What are the kinds of ideas that are the opposite, that are not getting benefited as much from o one, and perhaps maybe people even should pivot. Because they're getting they might just get deprecated from the improvements of o one, o two, o three. I wouldn't go all the way and suggest they should pivot, but I do think companies that are building AI coding agents or AI program engineers are potentially have stuff to think about here because it seems like o one in particular is, like, outperforming on just, you know, solving programming problems, essentially. And I I certainly know some of the teams I work in the past. Like, a lot of what they've invested in is, like, the chain of thought infrastructure behind this stuff, which is now just a one doesn't is not actually, like, any leap forward for them. They've already, like, invested in that already. And so I think that might be a function of basically the opaque nature of what the chain of thought is. And once you get it to be directable, that's actually I mean, frankly, that's what users in CodeGen are struggling with even right now. Like, once it starts going down a certain path, you can't really alter things. Like, you you want it to ask you, hey. Do you want me to do it like this or that? And, you know, all of the systems are a little bit struggling with that right now. I was gonna ask the the inverse question, Diana, which is, like, each new model capability unlocks a new set of startup ideas. Like, a year ago, doing startup ideas where, like, the AI agent would talk on the phone just, like, didn't work. We had a bunch of companies that tried, and all the companies didn't didn't work. And over the summer, it really started working under the trends from the the the past two batches, like, anything around, like, phone calling is, like, blowing up right now because the models finally work. So, like, with this new o one series of models, what are the startup ideas that, like, just became possible? To connect to Sam's essay is a lot of things that are gonna make the atom world, physical world better because it's really good at math and physics. So any startup that's working around mechanical engineering, electrical engineering, chemical engineering, bioengineering, all of these things that really will make our lives better, I think really will are getting an unlock, as we've seen from the demos we highlighted. That's exciting. I mean, it can't just be helping people click a little bit faster. It's gotta be things that actually create real world abundance for everyone. And that it might just be a little bit of a race. Like, I think there's sort of the fear of AI out there in society right now, and then it's sort of up to the technologist to try to usher in this age of abundance sooner rather than later. And if we can do that, then abundance will win out over fear. So with that, I think we're out of time for this week of the light cone. We'll see you guys next time."
  },
  {
    "name_video": "Now Anyone Can Code: How AI Agents Can Build Your Whole App",
    "description_video": "We speak with Amjad Masad, the CEO of Replit, an AI-powered software development and deployment platform, to see how coding power can be given to everyday users.",
    "related_categories": [],
    "page_url": "/library/Lq-now-anyone-can-code-how-ai-agents-can-build-your-whole-app",
    "youtube_url": "https://youtube.com/watch?v=jbIQfoldLag",
    "mp3_file": "downloaded/Now_Anyone_Can_Code:_How_AI_Agents_Can_Build_Your_Whole_App.mp3",
    "mp3_content": "Nineteen eighty four, the Mac brought personal computing to to the masses. Twenty twenty four, we have personal software. You actually are going to be able to orchestrate this giant army of agents. And I think of Mickey Mouse and Fantasia just like, you know, like, learning this new magical sort of ability, and suddenly all the brooms are walking and talking and dancing. And it's this incredible menagerie of being able to build whatever the heck you want, whenever you want. Someone who had an idea for fifteen years but didn't have the tools to build it and was able to build it in fifteen minutes, and he recorded his reaction. I almost shed a tear on that. Welcome back to another episode of the Light Cone. I'm Gary. This is Jared, Harge, and Diana. And collectively, we funded companies worth hundreds of billions of dollars right at the beginning, just a few people with an idea. And today, we have one of our best alumni to show off what he just launched, Replit Agent. Amjad, thanks so much for joining us today. My pleasure. Thank you for having me. Yeah. So we just launched this product. It is in early access, meaning it's barely beta software, but people got really excited about it. It works some of the time, so there's a lot of bugs. But we're gonna do a live demo here. And I wanted to, like, build an app, like a personal app that could track my morning mood correlated with, like, what I've done the the previous day. So I want an app to log my mood in the morning, and also things I've done the previous day, such as the last time I had coffee or if I had alcohol and if I exercised that day. That'll send it to the agent now. You have the Slack chat interface. So you can see the agent just read the message, and it's now thinking. So what we're looking at here is actually how you might chat with another user. Or is this specifically Yeah. I mean, it's similar. It's very similar to a multiplayer experience on Replot. Got it. So here, it's saying I created a plan for you to log your daily mood. The app will show your mood, coffee, alcohol consumption, and exercise. And it also suggests other features. So for example, it's suggesting visualization, and that sounds good. Reminders, I don't know. I'll I'll remember. So let's just go with these two steps. I think what was also cool, it picked the tech stack that's very quick to get started. So Flask, Vanilla JS, Postgres, like, very, very good. So now we're looking at what we're calling the progress pane. So the progress pane is you can see what the AI is doing. Right now, it's installing packages. It actually wrote a lot of code. It looks like it built like a database connection and all of that. And it's now installing packages, and we should be able to see a result pretty soon. This is really cool because I think a lot of times for new software engineers, one of the annoying parts is just getting all the packages and dependencies and picking the right stuff, and this is just does it for you, the agent. So here we have we have our mood app. I can kind of put that I'm feeling pretty good today. I did have coffee yesterday, but I didn't exercise. I logged my mood. Go to history. So built a complete web app with just a prompt, like no further instruction from you. Yes. And and it's it has a back end. It has Postgres. And I can just deploy this. So this is already pretty useful. You have this rating, and you have the history. And it's asking me if it did the right thing. Oh, it actually is asking you to test it for them. Yeah. It actually did some testing on its own. So it took a screenshot here. And so it knows that at least something is presented, but it wants someone to actually go in and do a little bit of QA. Is it using computer vision to look at the screenshot? Okay. Yeah. And now all the models are multimodal, and so it's fairly straightforward. What's on the back end right now? We have actually a few models because, you know, it's a multi agent system, and we found different models work for different types of agents. The main code gen one is Claude Sonnet three point five, which is, like, just unbeatable on code gen. It is, like, the best thing. But we use GPT four o in some some some cases. There's also some, like, in house models. Like, we built the embedding model. It's a super fast embedding model, binary embedding model. And the retrieval system and then indexing, this is all built in house. And a big part of what makes this work is is the sort of retrieval system because figuring out what to edit turns out is the most important thing for making these agents work. You're going a step beyond just Rack because Rack hits hit the limit for this, and you basically have to find a new way to search and find the right places to edit under code Yes. Which is actually something that I don't think has happened yet, but I think is gonna happen that for all these multi agent system, people are gonna move away from Rag and start building custom orchestration like this. So this is very notable. This is like a very cool thing that you figure out. Yeah. If just throwing the code base in REG is not gonna work, you actually have several different representations that allow the agents to do better work. That's right. And we have the trends thing working right now. Oh. Nice. So we have we have a couple graphs. We don't have a lot of entries here. I can actually ask it to Oh, yeah. Change the XaaS XaaS. Create data. Oh, really? You can have it create data as well. Yes. Now it's asking me to deploy because it's done. It's like, how to deploy? And here, we have the activity trends, like how many what am I doing by day. There you have it. It's going directly from just an idea to a deployed web app that anyone in the world can access right now. Exactly. And one of the things I'm really excited about is, like, this idea of personal software. Nineteen eighty four, the Mac brought, like, personal computing to to the masses. Twenty twenty four, we have personal software. I think we just experienced this. You know, Karpathy just tweeted about Replit Agent. He said, this is a feel the AGI moment. Mhmm. Did you just feel the AGI? I definitely did. And I I did last night. Spent a few hours last night using Replit Agent to make a Hacker News clone. Nice. There were a couple moments where, like, I really felt the AGI. Mhmm. The first was it actually had like really good intuition about what you buy to make and how to design it. We saw that there, where you didn't give it the idea to make the slider bar be like emojis. Yes. It just came up with that on its own. And then the second thing was, when I was using it, it really felt like I had a development partner, where he would ask me questions, he would ask me to change things. At one point, it got stuck, I wasn't sure how to do something, and so it asked me how to do the thing, and then I told it, and then it like, cool, got it. And just like kept going. It it feels great. And and sometimes you wanna give it some some help. Right? You wanna you wanna go debug if you know how to debug yourself or you go ask ChateapD about something and come back to it. Just give it more information. It'll be able to kind of react to it. You should have it definitely feels like talking to, like, a developer. You should do, like, the grok thing and have different modes. You could have, like, graphchy programmer where it just tells you, like, ideas are bad. Bad and wants to build something else anyway. Oh, that would be cool. Just, like, have a, like, a toggle, for example, like an overengineer. Yeah. Yeah. Just, like, overengineer everything. Exactly. So so it added this toggle, but I don't think it works. I don't think it connected up to the x axis. Yeah. Yeah. I I think this is interesting about all these AI programmers, which is that it's not like we created some super intelligence that somehow can just build an entire app perfectly from start to finish without making any mistakes. It actually codes the way a human does, which is it, like, write some code, this is like, well, I think this is right, but I'm not sure. I guess I'll try it. And then it tries like, oh, no. I have a bug. It's like, it's the same thing. Yeah. Yeah. And and we again, the our our design decision has been always like, this is a a coworker. And you can just close this. And you can go to the code. And you can code yourself. Just fix it yourself. Fix it yourself. And again, if you don't know how to code, my hope is, as you are reading what the agent is doing, is that you've learned a little bit of coding along the way. And by the way, this is how I think our generation learned how to code, not through agents, but almost by doing these incremental small things like editing your Myspace page or doing a GeoCities thing. And I feel like we sort of lost that incremental learning scale where now you need to go to get a, like, computer science degree or go to a coding boot camp to kinda figure this out. But if we made this, like, fun thing that people can go build side projects in and get exposed to what code is, think that would be perfect. And again, my view is that we're still far from fully automated software engineering agents, and people should still learn how to code. You have to do way less coding, but you will be you you will have to read the code. You will have to debug it in some cases. The agent will get you fairly far, but sometimes it'll get stuck, and you need to go into the code and figure it out. Yeah. I think that that's actually pretty important. I'm I've been meeting a lot of, you know, 18, 19 year olds who are freshmen, and they're like, well, the code will write itself. Right? Like, I don't have to study this stuff anymore. And I'm like, no. That's not true at all. Like, I actually think that now it is actually more leverage. It is far more leverage to know how to code than ever before. That's exactly right. Actually even more important, and it will make you way more powerful. Like, you don't have to be all the way in the weeds on everything. You actually are going to be able to, like, orchestrate this giant army of agents. And I think of Mickey Mouse and Fantasia, just, you know, like, learning this new magical sort of ability and, like I love that. You know, suddenly all the brooms are, like, you know, walking and talking and dancing. And it's this incredible menagerie of being able to build whatever the heck you want, whenever you want, just like like literally from any computer, from any web browser. Yeah. I I try to come up with, like, a Moore's Law type type thing where it's like the return on on learning code is, like, doubling every six months or something like that. So learning code a little bit in, you know, 2020, you know, was not that useful because you would still you well, you get it blocked. You wouldn't know how to deploy something. You wouldn't know how to configure something. Let's go to 2023 with Chateapiti. Learn to code just a little bit. We'll get you fairly far because Chateapiti can help you. And then 2024, learning to code a little bit is a massive leverage because we have agents like this and others, and there's a lot of really cool tools out there like Cursor and others that will get you super far by just, like, having a little bit of coding. And and just extend that forward. Like, six months later, you're gonna have even more power. So programmers are just on this massive trajectory of increased power. K. Tell us more about the tech behind this. It's kinda fascinating. At at the heart of it, it is sort of this, as I described before, it's multi agent system. You you have this core sort of React like loops. So React is a, you know, an agent chain of thought type prompting that's been around for a couple of years now, and most agents are are built on that. But ours is also a multi sort of agent system. We give it a ton of tools using tool calling. And those tools are the same tools, again, that are exposed to people. And by the way, you you need to be really careful about how to expose these tools and how does the agent see them. So for example, our edit tool returns, errors from the language server. So we have a language server here, a Python language server. It's like a human coding. You know, if if I make a mistake, anywhere here, it will show me. Right? Similarly, when the agent is coding, it gets feedback from the language server. So again, you wanna treat it as much as you can like a like a real user. And so for for any action, it gets it gets sort of a feedback, and then it can react to that feedback. And so these are the tools. Again, this is package management, editing, deployment, all the database. All those are are tools. And then there are a lot of things that make sure that it doesn't go totally off the rails because it's very easy. You we've all, you know, used Asians that go off the rails and go into endless loops. This still some sometimes does it, but we have another loop that is doing a reflection that's always thinking, am I doing the right thing? We use a lot of, LangChain tools. So LangGraph is an interesting new tool, from LangChain that allows you to build agent DAGs very nicely, and they have a some logging mechanism and a tool called Langsmith where you can look at the traces. Looking at the traces for for DAGs is is very, very difficult and very hard. So debugging these things have been fairly difficult because you you want a tool to actually, like, visualize the graph, and there isn't a lot of tools that do that right now. And so there's this reflection tool, reflection agent, and and the the other thing that we talked about earlier is, retrieval is is crucial. And, this this has to be kind of neurosymbolic. It it has to be able to do rag style embeddings retrieval, but it has to be able to look up functions and symbols inside inside the code. This is why I do think I may be extrapolating a bit more even if we get into the world of foundation models that have really, really large context windows. I mean, Gemini already is in the millions of tokens. You will still need very specialized things that do lookups like this because applied to different contexts, knowing the functions and treating it more like how it compiles at the end, like a AST graph. Large context windows are you can totally shoot yourself in the foot with them. Yes. Because it's easy for the model to it's actually you know, the model will bias a lot more towards whatever is at the end. Kinda like a human. Yes. Exactly. And so you still need to do context management, and you need to figure out what to put on how to rank memories. So this agent, every time it does a step, it it goes into a memory bank. And then every time we go into the next step, we'll be able to pick the right memories and figure out how to put them in context. If you pick the wrong memories for example, if you pick the memory that that, you know, had a bug or there was an error in it or whatever, it might still think that there's a bug. But but if you already recovered from that, you wanna make sure that that memory of of having created a bug is is either kind of augmented by another memory of fixing it or entirely removed from the context. And so memory management is is crucial here. You you you don't want to put the entire memory in in context. You wanna be able to pick the right memories for the right tasks. I feel like this is a really concrete rebuttal to situational awareness and that whole, like, sort of sci fi, you know, AGI is gonna kill us tomorrow kind of argument simply because that all is predicated on larger context window, more parameters, throw GPUs at it, and it's gonna work. Like, you can't just scale it up. Like, you're not going to get what you want from just scaling it up. There is actually a lot of utility in having these agents work one with one another, with, being actually smart about, what is the intermediate representation and being able to pull back, you know, sort of model what a human would do. Mhmm. I mean, this is sort of like the the case study and like, oh yeah, you can't just, you know, scale up everything by 50 x and have it work the way that they think it will. Yeah. In many ways, like, building a system like that sort of humbles you. You know, sets sets your expectations, about AI and the progress in AI in in in sort of a different way because, yeah, the systems are very fragile. They're really still not great at following instructions. People talk a lot about the hallucination problem. I think the bigger problem is, like, just following orders. It's so hard to get them to actually do the right thing. What do you think is the path to AGI? So my view in AGI is that maybe we'll get to something called we can call functional AGI, which is we automate all those sort of economically useful tasks. I think that's fairly within reach. I think it's almost like a brute force problem instead of the bitter lesson. Right? Do you think it involves doing a lot of work like what you guys did, like, basically building, like, carefully fine tuning orchestrations of groups of agents for each task? So doing what you did for programming, doing it for customer support and for sales and for every accounting, every function. Yeah. I I think so. And maybe you can eventually put it all into one model. The history of of machine learning has been we create the systems, we grow these systems around these models, and eventually the model will eat the the systems. So hopefully, like, everything that we did, at some someday, there's like an end to end system, machine learning system that could do it. Tesla, you know, famously, you know, had all these logic and and whatever. And now, like, you know, I think after v 13, they there's just end to end training. And so, you know, eventually, we'll we'll get there. But but I wouldn't consider it true AGI because you throw something out of distribution at it, and they wouldn't be able to to to handle it. I think true AGI would require efficient learning. Being able to be thrown in an environment with no information at all, being able to understand the environment by examining it, and learning a skill required to navigate that environment. And LLMs are not that. Maybe they're a component of that, but they're not efficient learners at all. You actually demonstrated this because the way you describe LLMs are intuition machines. And in order to get them to work in programming tasks, you had to add this layer with symbolic representation, like in programming and ASTs. Like, a lot of concepts in programming and how computation works, Turing complete with DAGs and all that. Right? Yes. Exactly. Those are, like, very explicit classical computer science. Classical AIs. Yeah. We do backtracking and all that. Yes. That's not generalized. That's specialized. Mean, incredibly useful specialized. Yes. So it's only been live for four days. Yeah. But already, people have done a bunch of, like, really interesting and impressive stuff with it. Do do you wanna talk about some of the things that you've seen people do with it that are most, like, surprising and interesting? Yeah. One of my favorite thing that I saw was someone who had an idea for fifteen years but didn't have the tools to build it and was able to build it in fifteen minutes. And he recorded his reaction, and it's like a personal app. He he built an app where he can put memories on a map and attach files and audio files to it. Memories about his life. I went to school here and, like, add a picture, whatever. When the app showed up and he tested it and he was like he was so surprised. I almost shed a tear on that. I was like, you're being able to unlock people's creativity is is so rewarding. And then I want a integration with Apple Photos or to use it to actually build a a a export tool. Yes. And another user, Meike, built sort of a Stripe coupon tool. So he he has a course. He runs it on Stripe, and he wants, like, to be able to, like, send people coupons. And so he built it on, like, you know, five, ten minutes. And, actually, I don't you would be able to build something like that in no code. You would struggle really hard. You would probably use two or three no code tools. People use like Bubble on the front end and Zapier in the back end and and what have you. Sometimes I'm surprised the no code people are actually quite quite smart and quite hardworking because they figure out how to create these systems using no code. But it's just actually a lot easier to just generate the code for it. It's a coding tool for the no codes. Yes. Yes. And so, yeah, we we we're seeing a lot of traction there. Which is actually a challenge, I think, the no code tools have in general is straddling this line between they start very much no code, and then they find that people keep pushing the limits on what they wanna build in these tools. And then and then the the frustrating part with no code tools is that if you hit the limits, you're just stuck. Like, you you just you can't solve it. And the cool thing is if you were saying earlier, if you can get the no code people to switch to Replit, maybe initially they don't program at all. All they know how to do is like prompt it. But then, at some point, they're gonna like look at the code, and they'll realize that they can just edit it. Like, it isn't that hard. And then that's how they like gradually become programmers. Yeah. That's interesting. I played around with it to build just like a simple recruiting CRM, which is actually the kind of thing you would have used Airtable for. Mhmm. And one of the suggested when it told me the plans, one of the, oh, would you like this feature? It was exactly that. It was just like role based permissions and all. It was like, oh, that's pretty like a sophisticated prompt or suggestion off the bat. Yeah. That's a $10,000 a month enterprise feature right there that you could just prompt and have it work. It's crazy. I mean, this is like the definition of low bar high ceiling. Like, all of the biggest software companies in the world sort of capture that idea really powerfully. So but my my favorite thing is is these order multiple order magnitudes sort of time difference of building something. Someone said they spent eighteen months building a startup. They were able to generate the same app in ten minutes using Replit. Someone said they they spent a year building a certain app that they were able to build it in an hour with with the Replit agent. But, yeah, I think it will save, you know, millions of dollars of human hours. What a time to be alive, guys. Can I take a Repla Agent and apply it to my existing coding stack yet? Not yet. Got it. So, again, it's it's sort of super early. We built the again, the the retrieval system that we built is to be able to do this. We should be able to throw it into any code base, index the code base really quickly, and be able to give it intelligence about the code base. The the system also has, like, summaries of files and summaries of projects. So we use LMs to kind of as we're indexing the system to create these, like, small summaries for the agent to understand what a project is. So we have the infrastructure for it, but that's that's the next step. And and we also wanna add more autonomy for people who want it. So for the team version of this, we wanna be able to send it to the background. So be able to give it a prompt and then it forking the project, going and working as autonomously as it can. And then when it's done, it sends you a pull request back. Or if it runs into a problem, it it it come back to you with a problem. The the other thing I I wanna do is, you know, the the vision for for this has been, you know, we we have this bounties program. And bounties, people submit things they want they wanna build or problems they have, and and peep people in our community users help them fix it for a certain price. And I was thinking, you know, agents are not perfect, and so perhaps the agents can also summon a human. So another tool that it has is be able to summon like a bounty hunter. And so it will go to the market and ask the creator working with it, hey. Like, I'm running into a problem. Do you wanna put some money on it? And we can go, like, you know, grab an expert. And so I was like, yeah. Cool. Yeah. Put $50 on it, and we'll go to this market. Hopefully, a real time market will say, oh, for $50, we have this problem. Can you come in? A human expert comes in as a as another multiplayer into the system, either helps you by prompting the agent or by going and editing the code themselves. That's so clever. I mean, this whole thing of getting the human to be another agent in this greater intelligence orchestration system you have. Yes. I'm a big fan of Licklider's sort of human machine symbiosis. Right? That's that's always been the thing. You know? You know, I like to talk about AGI and and all of that, but I I just feel like, you know, computers are fundamentally better by being extensions of of us and by joining with us as opposed to, you know, being this this, you know, this competitor. % with you. Team human. We need to print T shirts. You had a, I guess, sort of mini Chesky moment earlier this year then. We're all blown away by this demo and sort of, you know, you've been working hard on sort of remaking the way all software is deployed and written for some time. I mean, what what did it take to, you know, get to this moment? You know, you did have to do a layoff and reset your org. You know? What happened? Yeah. So so last year, we we raised a raised a big round. We we felt we're making fast progress, and there there was a lot of energy. And I I felt like I needed to, okay, grow the company. You know, for for a long time, Jared knows. For a long time, Raffle is, like, tiny. It was actually run out of your apartment Yes. For how many years? For many years. So like three or four years. And we're like four or five people for like many years. So we started growing in 2021. Even when you had a lot of users. Yes. Like you were four or five employees when you had like millions of users. Yes. That's right. So we were always kind of lean, but I thought last year, Okay, we have really big ambitions. We've to go hire people. I've got to hire executives. I've to create, like, a management structure. I've got to, like, grow up. Is that what investors were telling you? It's like, oh, you've to hire people. No. Actually, I I was Oh, were you thought of me? My own. What you thought? But but it definitely was the prevalent advice. I mean, you were you were absorbing this advice from sort of like, the the world that was that ordinarily advises startups to do exactly that. That's right. That's right. And it just got really miserable. We had, like, you know, multiple layers. We had different meetings where I'm trying to, like, run the company from. We had, like, a executive meeting, staff meeting, whatever. We had road maps. We had planning sessions. And I just couldn't shake the feeling that it was all LARPing. It was not work. It was LARPing. And but right now, we don't have a road map. Right now, literally, we work on, like, three or four things. I'm involved in all of them, and I know what's going on there. I know what people are working on. And I think we got a lot more productive by getting smaller, by, you know, flattening the organization. I think one thing mean, that's a story that I think we've heard from many founders. And one thing I'm curious to see how this plays out is I feel like what actually sparked off a lot of manager mode was feeling that people had more ideas to run with and they had, like, resources to execute on. Yes. And you realize that bureaucracy creeps in, and you actually just can't get ideas done as quickly as you want. And so now I feel like everyone's getting rid of middle management, like and I'm curious to see if the same the same temptation, I think, will happen again. I think that we felt it a little bit personal even is when you make it easy to go from, like, zero to one, you it actually helps you create more good ideas because you're like, oh, yeah. It's actually like I can get things off the ground really, really quickly. Mhmm. And so then it'll be interesting to see how people stay. Now you have, like, the smaller flatter org structure. You'll get more ideas for things you want to do and then staying, like, disciplined to not go back into the, oh, yeah. Like, we should actually do, like, the 10 things we could possibly be doing versus, like, the five or six you can keep in your head, I think, is actually a challenge. I guess that there's a warring idea here because there's Parker Conrad's compound startup. But the interesting thing about the compound startup is I think they're trying to explicitly make the other product lines feel like a startup and govern like a startup unto itself, which is like sort of the opposite of having like divisional responsibility. I also think with Rippling and part like, Parker is known for having this hiring tactic of where he only hire or tries to hire a lot of former founders and then, like, puts them in charge of a product line, which has obviously worked really well for Rippling. I think it's hard for most people to pull that off because you can't hire, like, the quality of former founder unless you have, like I think unless the company's already, like, proven successful or you're just like a top tier, like, recruiter, like, Parker's pretty, like, you know, top point 1% of ability to recruit really great people. But Parker's totally founder moating, though, because we he gave a talk at YC Growth when we did this a couple years ago, and he was still doing support tickets. Oh, yeah. Yeah. Still is. He he told us that. Hosted him a couple of months ago, actually, right over there. And he said that. He said basically he loves answering customer support tickets, and he will never let it go, because it's his direct line of information to know what's really going on with the customer. Yeah. Yeah. I mean, that's still fine and rewarding. I think maybe he's he's doing the, you know, compound startup. He's giving them a lot of autonomy, but he's in the details. Know, so. How did this play out for this AI agent? Like, like, we talked about how you built it technically. How did you build it organizationally? Yeah. Which is a whole big like, a big bet. It was totally new technology that, like, the Reflow team wasn't used to working on. How did you pull it off organizationally? Yeah. Great question. We tried building agents multiple times in the past, and it's just the technology wasn't there. And finally, when we felt it was there, actually, one of our employees, Zen Li, who who's kinda started this new incarnation of this, made made a demo, and he showed me the demo. And it was so simple. It was just like the agent, like, calling a couple tools and doing things in ID, but I could see that it's finally almost here. Like, I could taste it almost. And in that feeling, just just like, okay. We're gonna make this big bet. And so created something called the agent task force. So in the in the task force, it's like people from a lot of different teams. So you have the IDE team present in the task force. You have the dev x team that works on package management and and things like that. You have UX and design component, and you have the AI team. So if the AI team at the center so it's almost similar to the diagram. So so in the we organize it in the same way that the diagram works. The kernel OS is the sort of the AI team, and then they're connecting out to all these tools that are created by the tool teams. And then you have on top of all of that, you have the product and and sort of UX team that is working on on the entry points and how do you structure this, which was very tough as well. The design was tough. And we we had, like, two meetings every week. On Monday, we had this four room meeting where Michele, our head of AI, will do, a run, and we'll see what's work broken, what's what's wrong with it. They'll come up with the priorities for this week. And then on Friday, we have the agent salon where I do a run, and I look at what's working, what's broken. I ask them about their priorities. We might reprioritize some things. I might change some things in the product. We make big changes, like, rapidly. And so every week, we made a ton of progress. What does doing a run mean? Do doing an agent run. Literally actually going through and using the product and seeing where it broke. Seeing where it breaks and figuring out what the priority is in order to fix where it broke. Brilliant. Yeah. Did each of the team basically build their own agent as well? Some of them did because some of them you had to the screenshot tool was an agent because you had to kind of have an AI look at that screenshot, come up with the thoughts, and then return them to the main manager agents. So the ID team wrote the screenshot agent, and then the package management team kinda built probably the tech stack setup type of configuration, which is really cool. Yeah. It it worked the org org structure worked out really well. I I mean, surprisingly well because I think it is similar to how we worked when at the at the center was the user, and now the user is the AI. What's coming next with the agent? Like, what's what do you wanna add to it? What what do you think are gonna be the big next leap forwards for it? Reliability. I think the the most important thing right now is reliability and making sure it's not spinning, making sure it's not breaking, and then expanding it to support any stack you would want. So right now, we don't really listen to the user when they give us a stack. We we push back. The agent pushes back. It's like, ah, we're just gonna do it in Python or whatever. But if you really want Crafty engineer mode. Yeah. So we wanna be able to accept user requirements with regards to stack. Should have the Paul Graham mode where only write it in Lisp. Yes. Anything else. This Modes thing is a really, like, a April fool thing. It's like Paul Graham, over engineer. Bad UI. Doesn't care about UI. Everything's literally correct, but very confusing. How about just the interaction? I mean, you mentioned, like, Licklider and the whole human computer symbiosis theory. Like, is text, like, as far as it goes? Are there other ways that people you think will wanna interact with their AI agent? You should be able to, like, draw in the UI and communicate with the with AI by drawing. Right? You should be able to say, hey. Like, this button's not working. Maybe move this here or this file, you know, is not you know, refactor this file, whatever. So, you know, if the whole thing is a canvas that you can draw on, you can communicate it a lot more expressively with the agent. And, of course, you're talking, you know, as opposed to typing, being able to talk and draw. It's imagine on the iPad too. We have an iPad app. It could get really, really fun and creative. Kinda like a full UI mock up that you would do in Figma. You could kinda hand sketch it and get it to to do it. Like like how running a real engineering product team would feel like. That's right. And then we're gonna add, like, more simpler agentic tools. So right now, the agent kind of is you know, takes over, and it's, like, writing everything. But a lot of people just want more agency, more advanced users. So we wanna be able to do, like, single step or single action agents. So I say, like, I wanna add this feature. Show me what you're gonna do. I'll do a dry run, show you all the diff, show you all the packages it's gonna install, and then you'll be able to accept it or reject it. And that way, more advanced users will have more control over the code they're writing. Amjad, thank you so much for coming and showing us the future in such a profound way. If I wanted to do this all myself, what would I do? Well, first of all, I want to say it's, again, barely beta software. If you're brave and you wanna test it and give us feedback, go to Replit, sign up for our core plan because this thing is expensive. We can't give it away for free. And and you'll be able to see that module on the home page that says, what do you wanna build today? And then you can go through that and start working with the agent. Just have an idea in your mind. Just write a couple sentences. Don't don't make it too complicated or too technical and and get started. You'll get a feel of how to work with the agent pretty quickly. It should be pretty intuitive. And share with us what you're building. Happy to kind of reshare, retweet whatever feel people are building the agent. Amazing. Well, it's time to feel the AGI. We'll see you guys next week."
  },
  {
    "name_video": "How To Build The Future: Sam Altman",
    "description_video": "In this episode of our rebooted series \"How To Build The Future,\" YC President and CEO Garry Tan sits down with Sam Altman to talk about the origins of OpenAI, what’s next for the company, and what advice he has for founders navigating this massive platform shift.",
    "related_categories": [],
    "page_url": "/library/Lp-how-to-build-the-future-sam-altman",
    "youtube_url": "https://youtube.com/watch?v=xXCBz_8hM9w",
    "mp3_file": "downloaded/How_To_Build_The_Future:_Sam_Altman.mp3",
    "mp3_content": "We said from the very beginning we were gonna go after AGI at a time when in the field you weren't allowed to say that because that just seemed impossibly crazy. I remember a rash of criticism for you guys at that moment. We really wanted to push on that, and we were far less resourced than DeepMind and others. And so we said, okay, they're gonna try a lot of things, and we've just gotta pick one and really concentrate, and that's how we can we can win here. Most of the world still does not understand the value of like a fairly extreme level of conviction on one bet. That's why I'm so excited for startups right now. It is because the world is still sleeping on all of this to such an astonishing degree. We have a real treat for you today. Sam Altman, thanks for joining us. Thanks Gary. This is actually a reboot of your series, How to Build the Future. And so welcome back to the years ago. I was just trying to think about that. Something like that. That's wild. I'm glad it's being rebooted. That's right. Let's talk about your newest essay on the age of intelligence. You know, is this the best time ever to be starting a technology company? Let's at least say it's the best time yet. Hopefully there'll be even better times in the future. I sort of think with each successive major technological revolution, you've been able to do more than you could before. And I would expect the companies to be more amazing and impactful and everything else. So yeah, I think it's the best time yet. Big companies have the edge when things are moving slowly and not that dynamic. And then when something like this or mobile or the internet or semiconductor revolution happens or probably like back in the days of the industrial revolution, that was when upstarts had their had their edge. So yeah, this is like and it's been a while since we've had one of these, so this is like pretty exciting. In the essay, you actually say a really big thing which is ASI, super intelligence, is actually thousands of days away. Maybe. I mean that's our hope, our guess, But that's a very wild statement. Yeah. Tell us about I mean that's big. That is really big. I can see a path where the work we are doing just keeps compounding and the rate of progress we've made over the last three years continues for the next three or six or nine or whatever. Nine years would be like three thousand five hundred days or whatever. If we can keep this rate of improvement or even increase it, that system will be quite capable of doing a lot of things. I think already even a system like o one is capable of doing quite a lot of things. From just a raw cognitive IQ on a closed end, well defined task in a certain area, I'm like, o one is like a very smart thing. And I think we're nowhere near the limit of progress. I mean that was an architecture shift that sort of unlocked a lot. And what I'm sort of hearing is that these things are going to compound. We could hit some unexpected wall or we could be missing something, but it looks to us like there's a lot of compounding in front of us still to happen. I mean, this essay is probably the most techno optimist of almost anything I've seen out there. Some of the things we get to look forward to, fixing the climate, establishing a space colony, the discovery of all of physics, near limitless intelligence, and abundant energy. I do think all of those things and probably a lot more we can't even imagine are maybe not that far away. And one of and I think it's tremendously exciting that we can talk about this even semi seriously now. And one of the things that I always have loved most about YC is it encourages slightly implausible degrees of techno optimism and just a belief that like, Ah, you can figure this out. And in a world that I think is sort of consistently telling people, This is not going to work, you can't do this thing, you can't do that. I think the early PG spirit of just encouraging founders to think a little bit bigger is a special thing in the world. The abundant energy thing seems like a pretty big deal. There's sort of path a and path b. If we do achieve abundant energy, it seems like this is a real unlock. Almost any work, not just knowledge work, but actually real physical work could be unlocked with robotics and with language and intelligence on tap. There's a real age of abundance. I think these are the two key inputs to everything else that we want. There's a lot of other stuff, of course, that matters, but the unlock that would happen if we could just get truly abundant intelligence, truly abundant energy, would we be able to make happen in the world? Like both come up with better ideas more quickly and then also make them happen in the physical world. To say nothing of it'd be nice to be able to run lots of AI and that takes energy too. I think that would be a huge unlock and the fact that it's I'm not sure whether to be surprised that it's all happening at the same time or if this is just the natural effect of an increasing rate of technological progress, but it's certainly a very exciting time to be alive and great time to do a startup. Well, so we sort of walked through this age of abundance. You know, maybe robots can actually manufacture, do anything. Almost all physical labor can then result in material progress, not just for the most wealthy but for everyone. You know, what happens if we don't unleash unlimited energy? If, you know, there's some physical law that prevents us from exactly that? Solar plus storage is on a good enough trajectory that even if we don't get a big nuclear breakthrough we would be like okay ish. But for sure it seems that driving the cost of energy down, the abundance of it up, has like a very direct impact on quality of life. And eventually we'll solve every problem in physics. So we're gonna figure this out. It's just a question of when. And we deserve it. Someday we'll be talking not about fusion or whatever but about the Dyson sphere and that'll be awesome too. Yeah. This is a point in time whatever feels like abundant energy to us will feel like not nearly enough to our great grandchildren and there's a big universe out there with a lot of matter. Yeah. I wanted to switch gears a little bit to earlier you were mentioning Paul Graham who brought us all together, really created Y Combinator. He likes to tell the story of how you got into YC was actually you were a Stanford freshman. And he said, you know what, this is the very first YC batch in 02/2005. And he said, you know what, you're a freshman and YC will still be here next time, you should just wait. And you said, I'm a sophomore and I'm coming. And you're widely known in our community as one of the most formidable people. Where do you think that came from? That one story, I think I I would be happy if that drifted off my history. Well now it's purely immortalized here. Here it is. My memory of that is that I needed to reschedule an interview one day or something, And PG tried to like say like, just do it next year or whatever. And then I think I said some nicer version of I'm a sophomore and I'm coming. Yeah. Then you know, these things get slightly apocryphal. It's funny. I don't and I say this with no false modesty. I don't like identify as a formidable person at all. In fact, I think there's a lot of ways in which I'm really not. I do have a little bit of a just like, I don't see why things have to be the way they are, and so I'm just gonna like do this thing that from first principles seems like fine. I always felt a little bit weird about that. And then I I remember one of the things that I thought was so great about YC and still that I care so much about YC about is it was like a collection of the weird people who are just like, I'm just gonna do my thing. The part of this that does resonate as a like accurate self identity thing is I do think you can just do stuff or try stuff a surprising amount of the time. And I think more of that is a good thing. And then I think one of the things that both of us found at YC was a bunch of people who all believed that you could just do stuff. For a long time, when I was trying to figure out what made YC so special, I thought that it was like, okay, you have this very amazing person telling you you can do stuff. I believe in you. And as a young founder that felt so special and inspiring. And of course it is. But the thing that I didn't understand until much later was it was the peer group of other people doing that. And one of the biggest pieces of advice I would give to young people now is finding that peer group as early as you can was so important to me. And I didn't realize it was something that mattered. I kind of thought, Ah, I have, I'll figure it out on my own. But man, being around inspiring peers, so so valuable. What's funny is both of us did spend time at Stanford. I actually did graduate, is I probably shouldn't have done that, but I did. Stanford's great. You you pursued the path of a far greater return by dropping out. But you know, that was a community that purportedly had a lot of these characteristics, but I was still beyond surprised at how much more potent it was with A Roomful of Founders. It was I was just gonna say the same thing. Actually I liked Sanford a lot, but I did not feel surrounded by people that made me want to be better and more ambitious and whatever else. And to the degree I did, the thing you were competing with your peers on was who was gonna get the internship at which investment bank? Which I'm embarrassed to say, I fell on that trap. This is how powerful peer groups are. It's a very easy decision to not go back to school after seeing what the YC vibe was like. Yeah. There's a powerful quote by Carl Jung that I really love. It's, know, the world will come and ask you who you are, and if you don't know, it will tell you. It sounds like being very intentional about who you want to be and who you want to be around as early as possible is very important. Yeah. This was definitely one of my takeaways, at least for myself, is no one is immune to peer pressure. And so all you can do is like pick good peers. Yeah. Obviously, you know, you went on to create LOOPED, you know, sell that, go to Green Dot, and then we ended up getting to work together at YC. Talk to me about like the early days of YC research. Like one of the really cool things that you brought to YC was this experimentation. And you sort of I mean I I remember you coming back to partner rooms and talking about some of the rooms that you were getting to sit in with like the Leary and Sergey's of the world. And that you know, AI was some sort of at the tip of everyone's tongue because it felt so close and yet it was, you know, that was ten years ago. The thing I always thought would be the coolest retirement job was to get to run a research lab. And it was not specific to AI at that time. When we started talking about YC research, not only was it going to, it did end up funding a bunch of different efforts. And I wish I could tell the story of it was obvious that AI was gonna work and be the thing, but we tried a lot of bad things too. Around that time, I read a few books on like the history of Xerox PARC and Bell Labs and stuff and I think there were a lot of people, like it was in the air of Silicon Valley at the time that we need to like have good research labs again. And I just thought it would be so cool to do. And it was sort of similar to what YC does in that you're gonna allocate capital to smart people and sometimes it's gonna work and sometimes it's not going to. And I just wanted to try it. AI for sure was having a mini moment. This was like kind of late twenty fourteen, '20 '15, early '20 '16 was like the superintelligence discussion, like the book Superintelligence was happening. Bostrom, yep. Yeah. The DeepMind had a few impressive results, but a little bit of a different direction. You know, I had been an AI nerd forever, so I was like, oh, it would be so cool to try to do something, but it was very hard to say what it. Was ImageNet out yet? ImageNet was out. Yeah. Yeah. For a while at that point. So you could tell if it was a hot dog or not. You could sometimes. That was getting there. How did you identify the initial people you wanted involved in YC research and OpenAI? Greg Brockman was early. In retrospect, it feels like this movie montage and there were all of these at the beginning of the Bank Heist movie when you're driving around to find the people and whatever. And they're like, you son of a bitch. I'm in. Right. Like Ilya, I like heard he was really smart and then I watched some video of his and he's also he's extremely smart like true true genuine genius and visionary. But also he has this incredible presence. And so I watched this video of his on YouTube or something. I was like, I gotta meet that guy. And I emailed him and didn't respond. So I just like went to some con conference he was speaking at and we met up. And then after that we started talking a bunch. Then like Greg, I had known a little bit from the early Stripe days. What was that conversation like It's like, I really like what your your idea is about AI and I wanna start a lab. Yes. And one of the things that worked really well in retrospect was we said from the very beginning we were gonna go after AGI. At a time when in the field you weren't allowed to say that because that just seemed impossibly crazy and borderline irresponsible to put that got his attention immediately. It got all of the good young people's attention and the derision derision derision, whatever that word is, of the mediocre old people. And I felt like somehow that was a really good sign and really powerful. And we were like this ragtag group of people. I mean, I was the oldest by a decent amount. I guess I was 30 then. And so you had these people who were like, those are these irresponsible young kids who don't know anything by anything and they're saying these ridiculous things. And the people who that was really appealing to I guess were the same kind of people who would have said, I'm a sophomore and I'm cumming or whatever. And they were like, let's just do this thing. Let's take a run at it. And so we kind of went around and met people one by one and then in different configurations of groups, and it kind of came together over the course of in fits and starts, but over the course of like nine months. And then it started And then it started. It started happening. And one of my favorite memories of all of OpenAI was Ilya had some reason with Google or something that we couldn't start. Announced in December of twenty fifteen but we couldn't start until January of twenty sixteen. So like January 3, something like that of 2016, or like very early in the month, People come back from the holidays and we go to Greg's apartment. Maybe there's 10 of us, something like that. And we sit around and it felt like we had done this monumental thing to get it started. And everyone's like, so what do we do now? What a great moment. It reminded me of when startup founders work really hard to raise a round, and they think like, oh I accomplished this great day. We did it. And then you sit down and say, like, fuck. Now we gotta figure out what we're gonna do. It's not time for popping champagne. That was actually the starting gun, and now we gotta run. Yeah. And you have no idea how hard the race is going to be. It took us a long time to figure out what we're gonna do. But one of the things that I'm really amazingly impressed by, Ilya in particular, but really all of the early people about, is although it took a lot of twists and turns to get here, The big picture of the original ideas was just so incredibly right. And so they were like up on one of those flip charts or whiteboards, don't remember which, in Greg's apartment. And then we went off and, you know, did some other things that worked or didn't work or whatever. And some of them did and eventually now we have this like system. And it feels very crazy and very improbable looking backwards that we went from there to here with so many detours on the way but got where we were pointing. Was deep learning even on that flip chart initially? Yeah. I mean more specifically than that, like do a big unsupervised model and then solve RL was on that flip chart. One of the flip charts from a very this is before Greg's apartment, but from a very early off-site. I think this is right. I believe there were three goals for effort at the time. It was like figure out how to do unsupervised learning, solve RL, and never get more than 120 people. Missed on the third one? Yeah, that's right. The predictive direction of the first two is pretty good. So deep learning, then the second big one sounded like scaling. Like the idea that you could scale. That was another heretical idea that people actually found even offensive. I remember a rash of criticism for you guys at that moment. When we started, yeah, the core beliefs were deep learning works and it gets better with scale. And I think those were both somewhat heretical beliefs. At the time we didn't know how predictably better it got with scale. That didn't come for a few years later. It was a hunch first and then you got the data to show How predictable it was. But people already knew that if you made these neural networks bigger they got better. We were sure of that before we started. And what took the word that keeps coming to mind is religious level of belief was that that wasn't going to stop. Everybody had some reason of, Oh, it's not really learning. It's not really reasoning. It can't really do this. It's like a parlor trick. And these were the eminent leaders of the field. And more than just saying, you're wrong, they were like, you're wrong and this is a bad thing to believe or a bad thing to say. Was that you're gonna perpetuate an AI winter. You're gonna do this, you're gonna do that. We were just looking at these results and saying they keep getting better. Then we got the scaling results. It just kind of breaks my intuition even now. And at some point you have to just look at the scaling laws and say we're gonna keep doing this and this is what we think it'll do. It was starting to feel at that time like something about deep learning was just this emergent phenomenon that was really important. And even if we didn't understand all of the details in practice here, which obviously we didn't and still don't, that there was something really fundamental going on. It was PGism for this as we had discovered a new square in the periodic table. And so we really wanted to push on that. And we were far less resourced than DeepMind and others, and so we said, okay, they're gonna try a lot of things and we've just gotta pick one and really concentrate and that's how we can win here, which is totally the right startup takeaway. And so we said, well, we don't know what we don't know. We do know this one thing works, so we're gonna really concentrate on that. And I think some of the other efforts were trying to outsmart themselves in too many ways and we just said we'll just do the thing in front of us and keep pushing on it. Scale is this thing that I've always been interested in at kind of just the emergent properties of scale for everything, for startups, turns out for deep learning models, for a lot of other things. I think it's a very underappreciated property and thing to go after. I think it's, you know, when in doubt, if you have something that seems like it's getting better with scale, think you should scale it up. I think people want things to be less is more, but actually More is more. More is more. We believed in that. We wanted to push on it. I think one thing that is not maybe that well understood about OpenAI is we had just this even when we were pretty unknown, we had a crazy talented team of researchers. You know, if you have the smartest people in the world, you can push on something really hard. Yeah. And they're motivated. And or you created sort of one of the sole places in the world where they could do that. Like one of the stories I heard is just even getting access to compute resources, even today, is this crazy thing. And embedded in some of the criticism from maybe the elders of the industry at the moment was sort of that. You know, you're gonna waste a lot of resources and somehow that's gonna result in an AI winter. Like people won't give resources anymore. Funny. People were never sure if we were going to waste resources or if we were doing something kind of vaguely immoral by putting in too much resources and you were supposed to spread it across lots of bets rather than conviction on one, most of the world still does not understand the value of a fairly extreme level of conviction on one bet. And so we said, okay, we have this evidence. We believe in this thing. We're gonna, at a time when the normal thing was we're gonna spread against this bet and that bet and that bet You're definite optimist. You're a definite optimist. And I think across many of the successful YC startups, you see a version of that again and again. Yeah. That sounds right. When the world gives you sort of pushback and the pushback doesn't make sense to you, you should do it anyway. Totally. One of the many things that I'm very grateful about getting exposure to from the world of startups is how many times you see that again and again and again. And before, I think before YC I I really had this deep belief that somewhere in the world there were adults in charge, adults in the room, they knew what was going on. And someone had all the answers. If someone was pushing back on you, they probably knew what was going on. And the degree to which I now understand that, to pick up the earlier phrase, you can just do stuff. You can just try stuff. No one has all the answers. There are no adults in the room that are gonna magically tell you exactly what to do. And you just kind of have to iterate quickly and find your way. That was a big unlock in life for me to understand. There is a difference between being high conviction just for the sake of it and if you're wrong and you don't adapt and you don't try to be truth seeking, it still is really not that effective. The thing that we tried to do was really just believe whatever the results told us and really kind of try to go do the thing in front of us. And there were a lot of things that we were high conviction and wrong on. But as soon as we realized we were wrong, we tried to fully embrace it. Conviction is great until the moment you have data one way or the other. And there are a lot of people who hold on it past the moment of data. So it's iterative. It's not just they're wrong and I'm right. You have to go show your work. But there is a long moment where you have to be willing to operate without data. And at that point, you do have to just sort of run on conviction. Yeah. It sounds like there's a focusing aspect there too. Like you had to make a choice, and that choice had better you didn't have infinite choices. And so the prioritization itself was an exercise that made it much more likely for you to succeed. I wish I could go tell you like, oh, we knew exactly what was gonna happen and it was you know, we had this idea for language models from the beginning and, you know, we kind of went right to this. But obviously, the story of OpenAI is that we did a lot of things that helped us develop some scientific understanding but were not on the short path. If we knew then what we know now, we could have speedrun this whole thing to like an incredible degree. It doesn't work that way. Like, you don't get to be right at every guess. And so we started off with a lot of assumptions both about the direction of technology but also what kind of company we were going to be and how we were going to be structured and how AGI was gonna go and all of these things. And we have been humbled and badly wrong many many many times. And one of our strengths is the ability to get punched in the face and get back up and keep going. This happens for scientific bets, for being willing to be wrong about a bunch of other things. We thought about how the world was gonna work and what the sort of shape of the product was going to be. Again, we had no idea, or I at least had no idea, maybe Alec Radford did. I had no idea that language models were gonna be the thing. We started working on robots and agents playing video games and all these other things. Then a few years later GPT three happened. That was not so obvious at the time. Yeah. It sounded like there was a key insight around positive or negative sentiment around Yes. MGP one. Even before GPT one. Oh, even before. I think the paper was called the unsupervised sentiment neuron. And I think Alec did it alone. By the way, Alec is this unbelievable outlier of a human. And so he did this incredible work which was just looking at he noticed there was one neuron that was flipping positive or negative sentiment as it was doing these generative Amazon reviews I think. Other researchers might have hyped it up more or made a bigger deal out of it or whatever, but it was Alex, so it took people a while to fully internalize what a big deal it was. And he then did GPT one and somebody else scaled it up into GPT two. But it was off of this insight that there was something amazing happening where and at at the time unsupervised learning was just not really working. So he noticed this one really interesting property, which is there was a neuron that was flipping positive or negative with sentiment. And yeah, that led to the GPT series. I guess one of the things that Jake Heller from CaseText, I think of him as maybe, I mean not surprisingly a YC alum who got access to both three, three point five, and four. And he described getting four as sort of the big moment revelation because 3.5 would still do I mean, would hallucinate more than he could use in a legal setting. And then with four, it reached the point where if he chopped the prompts down small enough into workflow, he could get it to do exactly what wanted. And he built huge test cases around it and then sold that company for $650,000,000. So I think of him as one of the first to commercialize GPT-four in a relatively grand fashion. Fashion. I remember that conversation with him. Yeah. With one GPT four. Like that was one of the few moments in that thing where I was like, okay, we have something really great on our hands. When we first started trying to sell GPT three to founders, they would be like, it's cool. It's doing something amazing. It's an incredible demo. But with the possible exception of copywriting, no great businesses were built on GPT three. Then three point five came along and people, YC startups in particular, started to do interesting it no longer felt like we were pushing a boulder uphill. It was like people actually wanted to buy the thing we were selling. Totally. And then four, we kinda like got the just how many GPUs can you give me Oh yeah. Moment, like very quickly after giving people access. So we felt like okay, we got something really good on our hands. So you knew actually from your users then? Totally. Like when the model dropped itself and you got your hands on it, it was like, well this is better. We were totally impressed then too. We had all of these tests that we did on it that were very looked great and it could just do these things that we were all super impressed by. Also, when we were all just playing around with it and getting samples back, I was like, wow, can do this now. And it can rhyme and it can tell a funny joke, slightly funny joke, and it can do this and that. So it felt really great, but you never really know if you have a hit product on your hands until you put it in customers' hands. You're always too impressed with your own work. And so we were all excited about it. We were like, oh, this is really quite good. But until the test happens, it's like The real test is Yeah. Real test is users. So there's some anxiety until that moment happens. Yeah. I wanted to switch gears a little bit. So before you created obviously one of the craziest AI labs ever to be created, you started at 19 at YC with a company called Looped, which was basically Find My Friends geolocation probably, what, fifteen years before Apple ended up making it. Too early in any case, yeah. Yeah. What drew you to that particular idea? I was interested in mobile phones and I wanted to do something that got to use mobile phones. This was when mobile was just starting. It was still three years or two years before the iPhone. But it was clear that carrying around computers in our pockets was somehow a very big deal. I mean, that's hard to believe now that there was a moment when phones were actually literally you just They were just a phone. They were an actual phone. Yeah. I mean, I try not to use it as an actual phone ever really. I still remember the first phone I got that had internet on it. And it was this horrible based, mostly text based browser. It was really slow. You could so painfully and so slowly check your email. But I was like, don't know, in high school, sometime in high school I got a phone that could do that versus just texting call. And I was hooked right then. I was like, this is not a phone. This is a computer we can carry and we're stuck with a dial pad for this accident history but this is gonna be awesome. And I mean now you have billions of people who they don't have a computer. Like to us growing up, that actually was your first computer. Yeah. This is a replica or like another copy of my first computer Yeah. So this is what a computer was to us growing up. And the idea that you would carry this little black mirror kind of We've come a long way. Unconscionable back then. Yeah. So even then, technology and what was going to come was sort of in your brain. Yeah. I was like a real tech mean I still am a real tech nerd. Yeah. But I always that was what I spent my Friday nights thinking about. And then one of the harder parts of it was we didn't have the App Store, the iPhone didn't exist. You ended up being a big part of that launch I think. A small part, but yes. We did get to be a little part of it. It was a great experience for me to have been through because I I kind of like understood what it is like to go through a platform shift and how messy the beginning is and how much like little things you do can shape the direction it all goes. I was definitely on the other side of it then. Like I was watching somebody else create the platform shift but it was a super valuable experience to get to go through and sort of just see what how it happens and how quickly things change and how you adapt through it. What was that experience like? You ended up selling that company. That was probably the first time you were managing people and doing enterprise sales. All of these things were useful lessons from that first experience. I mean, it obviously was not a successful company. It was this was a very painful thing to go through, but the rate of experience and education was incredible. Another thing that PG said or quoted somebody else saying but always stuck on me is your twenties are always an apprenticeship, but you don't know for what and then you do your real work later. And I did learn quite a lot, and I'm very grateful for it. It was like a difficult experience, and we never found product market fit really. And we also never really found a way to get to escape velocity, which is just always hard to do. There is nothing that I have ever heard of that has a higher rate of generalized learning than doing a startup. So it was great in that sense. Yeah. When you're 19 and 20, riding the wave of some other platform shift, this shift from you know, dumb cell phones to smartphones and mobile. And you know, here we are many years later and your next act was actually, know, I mean I guess two acts later, spawning one of the major platform ships. We all get old. Yeah. But that's really what's happening. Know, 18, 20 year olds are deciding that they could get their degree, but they're gonna miss the wave. Like, because all of this stuff That's great. Everything's happening right now. I am proud of Do you have an intuitive sense, like speaking to even a lot of the really great billion dollar company founders, some of them are just not that aware of what's happening. Like their CEOs. It is astonishing to me. It's wild, right? Yeah. Think that's why I'm so excited for startups right now. It is because the world is still sleeping on all of this to such an astonishing degree. Yeah. And then you have the YC founders being like, no no, I'm gonna do this amazing thing and do it very quickly. Yeah. It reminds me of when Facebook almost missed mobile. Because they were making web software and they were really good at it. Yeah. And like they they all I mean, they had to buy Instagram. Like Snapchat And WhatsApp. Right up. Yeah. And WhatsApp. So it's interesting. The platform shift is always built by the people who are young with no prior knowledge. It's it is I think it's great. So there's this other aspect that's interesting in that I think you're you know, you and Elon and Bezos and a bunch of people out there, like they sort of start their journey as founders really whether it's looped or zip two or really in maybe pure software. It's just a different thing that they start, and then later they sort of get to level up. Is there a path that you recommend at this point? If people are thinking, I want to work on the craziest hard tech thing first, should they just run towards that to the extent they can? Or is there value in solving the money problem first, being able to invest your own money very deeply into the next thing? It's a really interesting question. It was definitely helpful that I could just write the early checks for OpenAI. And I it would've been hard to get somebody else to do that at the very beginning. And then Elon did it a lot at much higher scale, which I'm very grateful for. And then other people did after that. And there's other things that I've invested in that I'm really happy to have been able to support, and I don't I think it would have been hard to get other people to to do it. So that's great for sure. And I did, like we were talking about earlier, learn these extremely valuable lessons. But I also feel like I kind of like was wasting my time, for lack of a better phrase, working on looped. I don't I definitely don't regret it. It's like all part of the tapestry of life and I learned a ton and whatever else. What would you have done differently? Or what would you tell yourself from like now to in a time cap in like time travel capsule that would show up on your desk at Stanford when you were 19? Well it's hard because AI was always the thing I most wanted to do. And AI just like I went to school to study AI. But at the time I was working in the AI lab, the one thing that they told you was definitely don't work on neural networks. We tried that and it doesn't work. Fascinating. A long time ago. I think I could have picked a much better thing to work on than looped. Don't know exactly what it would have been. But it all works out. It's fine. Yeah. There's this long history of people building more technology to help improve other people's lives. I actually think about this a lot. I think about the people that made that computer. And I'll know them. Many of them probably long retired. But I am so grateful to them. And some people worked super hard to make this thing at the limits of technology. I got a copy of that on my eighth birthday and it totally changed my life. Yeah. And the lives of a lot of other people too. They worked super hard. They never like got a thank you from me, but I feel it to them very And it's really nice to get to add our brick to that long road of progress. Yeah. It's been a great year for OpenAI, not without some drama. Always. Yeah. We're good at that. What did you learn from sort of the ouster last fall and how do you feel about some of the departures? I mean teams do evolve, but how are you doing man? Attire but good. Yeah. It's we've kind of like speed run a medium sized or even kind of like pretty big sized tech company arc that would normally take like a decade and two years. Like ChatGPT is less than two years old. Yeah. And there's like a lot of painful stuff that comes with that. And there are, you know, any company as it scales goes through management teams at some rate. And you have to sort of the people who are really good at the zero to one phase are not necessarily people that are good at the one to 10 or the 10 to the hundred phase. We've also kind of like changed what we're gonna be, made plenty of mistakes along the way, done a few things really right, and that comes with a lot of change. And I think the goal of the company, the emergent AGI or whatever, however you wanna think about it is like just to keep making the best decisions we can at every stage. But it does lead to a lot of change. I hope that we are heading towards a period now of more calm, but I'm sure there will be other periods in the future where things are very dynamic again. So I guess how does OpenAI actually work right now? Mean the quality and the pace that you're pushing right now I think is beyond world class compared to a lot of the other really established software players who came before. This is the first time ever where I felt like we actually know what to do. I think from here to building an AGI will still take a huge amount of work. There are some known unknowns. But I think we basically know what to go to go do. And it'll take a while. It'll be hard, but that's tremendously exciting. I also think on the product side there's more to figure out but roughly we know what to shoot at and what we want to optimize for. That's a really exciting time. And when you have that clarity I think you can go pretty fast. Yeah. If you're willing to say we're gonna do these few things, we're gonna try to do them very well, and our research path is fairly clear, our infrastructure path is fairly clear, our product path is getting clearer. You can orient around that super well. We for a long time did not have that. We were a true research lab. And even when you know that, it's hard to act with the conviction on it because there's so many other good things you like to do. But the degree to which you can get everybody aligned and pointed at the same thing is a significant determinant in how fast you can move. I mean, it sounds like we went from level one to level two very recently and that was really powerful. And then we actually just had our o one hackathon at YC. Yeah, was so impressive. That was super fun. And then weirdly, one of the people who won, I think they came in third, was Camphor. And so CADCAM startup, did YC recently last year or two. And they were able to, during the hackathon, build something that would iteratively improve an airfoil from something that wouldn't fly to literally something that had Yeah, that was awesome. A competitive amount of lift. And that sort of sounds like level four, which is the innovator stage. It's very funny you say that. I had been telling people for a while, I thought that the level two to level three jump was gonna happen, But then the level three to level four jump level two to level three was gonna happen quickly. And then the level three to level four jump was somehow gonna be much harder and require some medium sized or larger new ideas. And that demo and a few others have convinced me that you can get a huge amount of innovation just by using these current models in really creative ways. Well yeah, what's interesting is basically Camphor already built the underlying software for CADCAM, and then language is sort of the interface to the large language model which then can use the software like tool use. And then if you combine that with the idea of code gen, that's kind of a scary crazy idea. Right? Like not only can the large language model code, but it can create tools for itself, and then compose those tools similar to Chain of Thoughts with o one. Yeah. Think things are gonna go a lot faster than people are appreciating right now. Yeah. Well, it's an exciting time to be alive, honestly. You know, you mentioned earlier that thing about discover all of physics. Always wanted to be a physicist. I wasn't smart enough to be a good one. Had to contribute in this other way. But the fact that somebody else, I really believe, is now gonna go solve all of physics with this stuff, I'm so excited to be alive for that. Let's get to level four. So happy for whoever that person is. Yeah. Do you wanna talk about level three, four, and five briefly? Yeah. So we realized that AGI had become this badly overloaded word and people meant all kinds of different things and we tried to just say, okay, here's our best guess roughly of the order of things. You have these level one systems which are these chatbots. There'd be level two that would come which would be these these reasoners. We think we got there earlier this year with the o one release. Three is agents' ability to go off and do these longer term tasks, you know, maybe like multiple interactions with an environment, asking people for help when they need it, working together, all of that. I think we're gonna get there faster than people expect. Four is innovators. That's like a scientist and, you know, that's ability to go explore like a not well understood phenomena over a long period of time and understand what's just Kind of go just figure it out. And then level five, this is the slightly amorphous, like do that but at the scale of a whole company or a whole organization or whatever. That's gonna be a pretty powerful thing. Yeah. And it feels kind of fractal, right? Like even the things you had to do to get to two sort of rhyme with level five in that you have multiple agents that then self correct that work together. I mean that kind of sounds like an organization to me just at a very micro level. Do you think that we'll have I mean, you famously talked about it. I think Jake talks about it. It's like, you will have companies that make billions of dollars per year and have less than a hundred employees, maybe 50, maybe 20 employees, maybe one. It does seem like that. I don't know what to make of that other than it's a great time to be a startup founder. But it does feel like that's happening to me. You know, it's like one person plus 10,000 GPUs. Pretty powerful. What advice do you have for people watching who either are about to start or just started their startup? Bet on this tech trend. Like bet on this trend. We are not near the saturation point. The models are gonna get so much better so quickly. What you can do as a startup founder with this versus what you could do without it is so wildly different. And the big companies, even the medium sized companies, even the startups that are a few years old, they're already on quarterly planning cycles. And Google is on a year or decade planning cycle. I don't know how they even do it anymore. But your advantage with speed and focus and conviction and the ability to react to how fast the technology is moving, that is the number one edge of a startup kind of ever but especially right now. So I would definitely like build something with AI and I would definitely like take advantage of the ability to see a new thing and build something that day rather than like put it into a quarterly planning cycle. I guess the other thing I would say is it is easy when there's a new technology platform to say, well, because I'm doing some of the AI, the laws of business don't apply to me. I have this magic technology and so I don't have to build a moat or a competitive edge or a better product. It's because I'm doing AI and you're not so that's all I need. And that's obviously not true. But what you can get are these short term explosions of growth by embracing a new technology more quickly than somebody else and remembering not to fall for that and that you still have to build something of enduring value. That's a good thing to keep in mind too. Yeah. Everyone can build an absolutely incredible demo right now but Everyone can build an incredible demo. But building a business, man, that's the brass ring. The rules still apply. You can do it faster than ever before and better than ever before, but you still have to build a business. What are you excited about in 2025? What's to come? AGI? Yeah. Excited for that. What am I excited for? Growing a kid. I'm more excited for that than I've ever been. Incredible. Yeah. Probably that. That's by far That's gonna be really good. That's the thing I'm most excited for ever in life. Yeah. It changes your life completely, so I cannot wait. Well, here's to building that better world for our kids and really hopefully the whole world. This was a lot of fun. Thanks for hanging out, Sam. Thank you."
  },
  {
    "name_video": "The AI Future Has Arrived: Here's What You Should Do About It",
    "description_video": "Dalton and Michael break down the steps you can take right now to leverage the latest tools and set yourself up for success in the age of AI.",
    "related_categories": [],
    "page_url": "/library/Lo-the-ai-future-has-arrived-here-s-what-you-should-do-about-it",
    "youtube_url": "https://youtube.com/watch?v=wRLTfC_PMKU",
    "mp3_file": "downloaded/The_AI_Future_Has_Arrived:_Here's_What_You_Should_Do_About_It.mp3",
    "mp3_content": "If you just look at the rate of change and the rate of new models coming out and new techniques Yes. It doesn't seem like we've hit the scaling wall. And again, if you if you believe that, which I happen to believe, and you just project forwards, this stuff is going to get better and better. Yeah. Hello. This is Dalton plus Michael. And today, we're gonna talk about AI. It's officially blowing our minds. AI is working. What have you seen? Yeah. If you were watching this video, you probably also agree that AI is working. You have the knowledge. But are you leveraging this knowledge? Like if you are living in the future yourself, what should you be doing differently knowing what's coming? Right? How can you prepare for the future? What's interesting is that we've seen stuff like this happen before. You know, we lived through the first static web pages. We lived through the dynamic web apps. We lived through smartphones happening. We lived through Bitcoin happening. Knowing that this is not a fad but a trend early is maybe one of the most strategic things you can know. So like, if you're watching this video, you have a gold mine, literal gold mine, of insight on how the world's going to change. And if you sit on information, you're not gonna able to take advantage of it. If you change something right now or more than one thing right now, you might look back ten years from now and say, oh, wow. Like like, my life worked out. Like, that was really really great. So let's go through some of the things you should do. Just to kinda give you some mental context, we can look back in time a little bit and we could say, imagine that you were using the first web browsers and you were using the first websites and you're like, oh, this is a thing. Imagine Yeah. Most people didn't have the web. No. But there were there were some folks that were very early on that stuff and they had a lot of extra leverage. A lot of leverage. Right? Imagine you were one of the first users of Gmail and you were like, oh my god, like a really responsive dynamic web app that's just like instantly like, oh, crap. Imagine you were the first users of iPhone. Yep. Imagine you were one of the people who saw Bitcoin come out its first year. Yep. Like, these are the kinds of like like Yeah. Like, were ways at the time with the benefit of hindsight to leverage that information Yes. To profoundly improve your lives or impact your lives. Right? Profoundly. Yes. And you were like, oh, this seems like a good thing and you and you acted on it, it can completely change your life. So you are early. Let's talk about what you should do. Yep. Right? So first, if you were ever interested in starting a company, I can't really imagine a better time. Yep. I would argue that like most of the best companies were created after this kind of tech sea change. Yep. Seeing the sea change and then dreaming what we could do with it. So, like, if you were ever inclined to start a company and people are saying to you, oh, this, like, AI thing is overhyped or, like, oh, there's too many. It's like Yeah. No. Again, you you can look to history. You needed there to be enough users and the tech to get good enough for internet startups Yes. To really take off. If you started an internet startup in '94, '90 '5, that would have been too early, think. Yes. But it was much better doing it later. Same with all these other platform shifts is there's now enough of an install base. There's now the models are actually good enough. The tools are good enough. The inference is good enough. Yeah. It still is like a good time. You can build applications that were unimaginable. And like, you know, we won't go into too many details, but like we literally have seen YC companies be transformed in the last six months. Yep. Like businesses that weren't working like Started working. Started working. And margins that were underwater are now suddenly positive. Yep. Customers that were lukewarm are now like, you're selling me magic. I would like to buy more of that. So don't let the haters like like was like like imagine the haters that were like, don't buy Bitcoin. It's a fad. It's like Yeah. It's gonna go to zero. It's like, like Not, you know, like expensive. That was expensive advice to follow. Exactly. I remember having a friend being like, Blackberry will never lose to iPhones. Like, oh, I'm like, you know, like, dude, like, don't listen to those people. Let's say and, know, of course, we should throw in a plug. Right? YC applications are open, you know, there are four batches a year. So, we can certainly help if you're interested. Let's say you don't wanna start a company. Probably should be considering where you wanna work Yeah. Knowing this knowledge. I would think really hard about where you choose to work. Yeah. You wanna work somewhere that is adopting these tools Yes. And is going to benefit from the adoption of the tools where you could be surrounded by people that are, very smart at adopting AI tools Yes. That you can learn from versus the folks that are just hoping this all goes away or that the AI good luck with that. Are lot of people that hope the Internet would go away. Yeah. Yeah. That was definitely a lot easier for business if e commerce didn't exist. That's right. A lot of newspapers. That was the plan. You know? Anyway, you also wanna work somewhere where you could be mentored by the folks that are really excellent. Right? If you're just imagining this is going to be very important skills in the future and for how we live our lives. Yeah. Working in place where the tools are great and the people using the tools are also great and can teach you about them. Yeah. That is really smart. Right? Again, imagine it's 02/2001 and you could work at a place like Google or another internet native company that was on the cutting edge of building internet software versus some insurance company or something. Know? Even if it's a programming job, there's very difference on how much you could learn and upskill yourself between those types of jobs. And I'd argue that, you know, startups are adopting these tools faster than big companies. So there's a really interesting question of like, are you gonna get more experience being a first ten or first twenty employee at a startup that's using AI versus working at that big company where using AI is a political decision and a PR decision and a bureaucratic nightmare, like be be careful because like the learning that's happening in startups right now is far outstripping what's happening in most large companies. Of course, are exceptions but in most. Let's talk about skills. Right? I remember there was just always this funny joke, within the first year of the App Store coming out where some big company was hiring iOS developers and they were like, oh, you need to have five years of experience building iOS apps. And everyone was like, that shit came out a year ago. Like but what's really cool at this moment is that, like, if you start learning today, you're almost at ground zero. Yep. And, like, there's so much leverage. Right? High school, college, post college, You know, you pointed this out when we were talking before. Dropping everything to become an iOS developer in 02/2010 was a strong It's a very smart idea. Like, if you saw the iPhone come out, you're like, oh, this is cool. I'm gonna go to, like, boot camp and teach myself to code and become an iOS programmer. Yeah. That was a really good career move. Or if you were a web developer inside of a company and they were spinning up a new iOS team. Join it. A very move. Or just building an app on the side. A lot of people built side projects. Yes. And that's how they learned to become iOS developers. Yes. And they benefit in tremendous ways. And I argue at any stage, like I said, pre college, college, post college, you can upscale yourself like I think another thing that's really cool is, again, is meta. You're probably watching this on YouTube. There are amazing YouTube videos of explaining how all this stuff worked. And in prior major platform shifts, had to read books or Know people. You know, know people or go to the right school or something like that. You can go watch people building in public, building models, explaining how transformers work. Yeah. You name it. There's a lot of stuff that's open source. And so if you are technical or aspiring to be technical, which you should be, go watch the videos and learn how all of this stuff works from scratch. It will profoundly help you for the rest of your life. I can't think of a downside to knowing how all this stuff works. No downside. Seriously. And I think what's so funny is like all of the trends, tech trends that we mentioned or breakthroughs mentioned before, all of them happen in public. This isn't happening in some back room you don't have access to. Yep. The issue is people being skeptical. It's not that it's not available for you to learn. So no. I think that's that's incredibly prescient. Yeah. There's no gatekeepers to learn this stuff. That's what we're trying to say. The only gatekeeper is ambivalence Yes. Or Or cynicism. Or cynicism or hearing, you know, negativity Yes. And buying into it. And negative people don't tend to get lucky. Nope. You know, they don't tend to have, really great stuff happen to them Nope. On accident. So, you know, maybe lean into positivity on this one. Yes. We're giving you the hint. I would say next, become a user. Right? Like many of these products are available and, you know, I remember previous waves of technology where people were like, oh, it's not ready yet. Oh, I'll wait. Like, oh, I don't need to switch. And I think this is different. You should be actively looking for better products. Like, mean, we remember when when Google came out and it was fundamentally a better Which is better. Web search product. And, like, there are a bunch people who are like, oh, web search, blah blah blah blah blah. And it's like, no. People had access to Google got more done. And so if you've been waiting, sign up. And and it's worth the money. Yep. Like, it's worth paying money. I mean, when I was, a founder working on consumer stuff, I would download every consumer app that came out. Literally. And I would study every onboarding flow. And I would study everything about the service. I would study the viral loops and just constantly be trying to challenge myself to make sure I knew more than anyone else about what the new products were. Yeah. And so And what they could do. Yeah. And so there's again, I don't know why you wouldn't be looking at every AI coding tool that comes out or every workflow tool that comes out Yes. And signing up and trying to earnestly use them and try to try to use them to get your job done, not just to research them as startups. Yeah. Be a real user. Be a real user. Get value. You're gonna learn. Again, you will be living in the future. Yeah. And and I would say this, like, there is a bit of a learning curve. Like, remember teaching my dad how to use Google, and it was counterintuitive that every question he had for me on the phone, all I would do is type that question in Google and produce an answer. Like, that wasn't, you know, that wasn't intuitive to him. There are some learning curves. Like, you know, I was I was having this, like, hilarious back and forth with an Elm agent, and I was realizing I am using this incredibly different than I use Google. Like, the things that I type, how I respond to answers, like, all of it is different. And I gotta be comfortable just kinda going a it's a small learning curve, but that's a learning curve. And then maybe last but not least, don't do nothing. Like, think that's the like, maybe the meta point of this entire video. Change something Yeah. In response to this. Yeah. You know something that other people don't know. Yes. Capitalize on that knowledge. Don't sit on it. Like it's the knowledge isn't gonna have any interest. You gotta do something with the knowledge. And then the earlier you do it, the more leverage you're gonna have. Now, a lot of people talk about the idea that maybe in this world being technical, being a programmer isn't strategic. What what do you think about that? Yeah. I mean, this is an opinion. We we all don't know, but I think all of the tools getting better means that some aspects of being a programmer, like having all the APIs memorized. Yeah. Maybe, okay, that part is less valuable. But I would argue knowing how all of this stuff works is going to be just more and more of a premium in modern society. Yes. Because someone has to fix this stuff when it breaks. And someone has to understand Yes. What the heck the AI is doing. Yes. Like to the extent all of your technical knowledge atrophies and you have no idea how this stuff works. It's just like a magic box. No. That is not a great place to be. And so in my opinion, really understanding how this stuff works at a low level will increase the value of you being a technical person. Yes. Massive. No one else will know how to debug it when things go wrong. Yes. And just because you start using cursor to program does not mean that people that have never programmed before are gonna be programming just as well as you. And so again, know there's different opinions. Maybe some people I've heard people predicting the death of programming as a career for many many many years more our lives before we before we were born. Again, maybe maybe, again, maybe I'm wrong. I just I wouldn't make that bet. I would bet on being extremely technical. Yeah. Just having a premium that will increase over time with the proliferation of these tools. Yeah. And that has been again, backwards looking, that has always been the case. Yeah. And if you're not technical, I can't imagine I mean, it's always been strategic to work with someone who is a programmer. It's still incredibly strategic. Never has it been more important to have a technical cofounder if you're not technical. Last point here. Right? We are seeing YC companies doing amazing things with the current models. We're kind of giving you a straightforward observation, not a prediction. But there is this question, is there another step change improvement coming? And, you know, let's push the issue of AGI aside. I think there's a big gap between step change improvement and AGI, but like, what is your prediction? How likely do you think it is that we have another step change that'll be here in the next year or two years? It seems like we are not near the wall. And if you just look at the rate of change and the rate of new models coming out and new techniques Yes. It doesn't seem like we've hit the scaling wall. And again, if you if you believe that, which I happen to believe, and you just project forwards, this stuff is going to get better and better. Yeah. And it already is getting it already works. Yeah. So Yeah. Hold on to your hat. Yeah. I think this is one of those moments. We've seen it with Internet adoption or smartphone adoption where it's like when the products get good, they go through this s curve where they start getting good. And I think that smart founders would assume that these products or the tools they have access to will get better over time. And I I I hate describing where that limit is. I think it's irrelevant really where that limit is, but like it's just an argument for why it's even more strategic to get involved today. Because like you're riding on a wave and almost everyone we know those who are successful found the right wave and rode it. And this is a good one. Alright. Great chat. Sounds good. Thanks."
  },
  {
    "name_video": "The 10 Trillion Parameter AI Model With 300 IQ",
    "description_video": "The hosts consider what a world with ultra-intelligent models would look like and what potential unlocks could be made possible.",
    "related_categories": [],
    "page_url": "/library/Ln-the-10-trillion-parameter-ai-model-with-300-iq",
    "youtube_url": "https://youtube.com/watch?v=lbJilIQhHko",
    "mp3_file": "downloaded/The_10_Trillion_Parameter_AI_Model_With_300_IQ.mp3",
    "mp3_content": "If o one is this magical, what does it actually mean for founders and builders? One argument is it's bad for builders because maybe o one is just so powerful that OpenAI will just capture all the value. You mean they're gonna capture a light cone of all future value? Yeah. They're gonna capture a light cone of all present, past, and future value. Oh my god. The alternative, more optimistic scenario is we see ourselves how much time the founder spend, especially during the batch, on getting prompts to work correctly, getting the outputs to be accurate. But if it becomes more deterministic and accurate, then they can just spend their time on bread and butter software things. The winners will just be whoever builds the best, like, user experience and gets all these, like, nitty gritty details correct. Welcome back to another episode of the Light Cone. We are sort of in this moment where OpenAI has raised the largest venture round ever, $6,600,000,000 with a b. Here's what Sarah Fryer, the CFO of OpenAI said about how they're gonna use the money. It's compute first, and it's not cheap. It's great talent, second. And then of course, it's all the normal operating expenses of a more traditional company. But I think there is no denying that you are we're on a a scaling law right now, where orders of magnitude matter. The next model is going to be an order of magnitude bigger, and the next one on and on. And so that does make it very capital intensive. So it's really about orders of magnitude. Let's live in the future. There's 10,000,000,000,000 parameters out there. 10,000,000,000,000 parameter large language models. Two orders of magnitude out from the state of the art today. What happens? Like, are people actually gonna be throwing queries and actually using these 10,000,000,000,000 parameter models? Seems like you'd be waiting, you know, ten minutes per token. Yeah. For a bit of context right now, the frontier models, I mean, they're not public exactly how many param parameters they have, but they're roughly in the five hundreds of billions ish, like, LAMA three, four zero five billion. Anthropic is speculated to be 500,000,000,000. GPT four o, roughly about around that much. Getting to 10,000,000,000,000, that's a two order magnitude. Right? I think the type of level of potential innovation could be the same leap we saw from GPT two, which was around 1,000,000,000 parameters that was released with the paper of a scaling loss, which was one of these seminal papers that people figure out, okay. This is transformer architecture that we figure What if we just throw a bunch of engineering and just do a lot of it? Where does this scale in this logarithmic type of scaling? Then this was proved out when GPT 3.5 or three got released. That was about a hundred billion parameters. So that's like that two order magnitude, and we saw what happened with that. That created this new flourishing era of AI companies, and we saw it. We experienced this back in 2023 when we started seeing all these companies building on top of GBD 3 point 5 that was starting to work, and it created this giant wealth. So we could probably expect if this scaling law continues, the feeling will be similar to what we felt from that year of transition in 2022 to 2023. Yeah. That was the moment when everything changed. So that would be pretty wild if that happens again. I think there's one interesting aspect to this, which is clearly the current generation state of the art models that are available, especially given o one chain of thoughts, they sort of basically rival normal intelligence. Like, you could make a strong case that AGI is basically already here. The majority of the tasks that, you know, 98% of knowledge workers do day to day, it is now possible for a software engineer, probably sitting in front of Cursor, to write something that gets to, you know, 90 to 98% accuracy and actually do what a null a human knowledge worker with a 20 IQ would be doing all day. And that's sort of writ large. Like, there are probably hundreds of companies that each of us have worked with over the past few years that are literally doing that day to day right now. You know, the weird interesting question is, like, at 10,000,000,000,000 parameters at, you know, 200 to 300 IQ, like, sort of ASI beyond what a normal human being normally could do, you know, what does that unlock? There's an a great article in The Atlantic with Terence Tao, sort of famously this Taiwanese mathematician who is, like, literally north of 200 IQ, and how he uses ChatGPT right now, and it's sort of unlocking new capabilities for him. There are some examples of this happening, you know, quite a few times in human history. Like, you could argue that nuclear power was that fission. You had to actually model theoretically that something like nuclear fission was possible before anyone, you know, experimentally tried to do it for your transforms. Yeah. Maybe the thing is if we think a lot of the capabilities right now are here, but it's not evenly distributed, if you go walk down the street and you talk to the random Joe, they don't feel the AI. They're just living their normal life, and stuff is still just normal. It hasn't changed. But I think the counterexample is just sometimes these discovery take time for it to really pan out. This is example we're discussing. Fourier transform was this mathematical representation that Joseph Fourier discovered in the eighteen hundreds. That was like a seminal thesis that he wrote about representing series of functions that were repeating in periods. And before Fourier transform, they were written as these long sums, series of sum that are very expensive to add them up and figure out how to really model the equation, basically. But he found this very elegant way that instead of just doing sums of series, you could basically collapse all these math function into sines and cosines wave that only need two variables, basically, the amplitude and the period, and you could represent every periodic signal and function. I mean, it's not really cool math, which is like how some of this LLM and use case sounds like, okay. Cool. They can do all this coding. But four year transform, it took another hundred and fifty years until the nineteen fifties. When people figure out what to do with this, it turned out that four year transform were super good at representing signals. And we need signals basically to represent everything in the analog world to be digital because bits are ones and zeros, and how do you compress that? And one of the big applications as well is radio waves and made telecommunication a lot more efficient, image representation, encoding, information theory. It just unlocks so much of the modern world, like the Internet and cell towers work because of this theory. But it took a hundred and fifty years until the average Joe could feel the Fourier transform. Interesting. That's a really powerful idea. I mean, that took a while then. I mean, apparently, in the nineteen fifties, that's the moment that color TV happened. So Unlocked by Fourier Transformers as well. That's right. If you apply it to the AI stuff that's happening today, though, it's like, one, where do you start the clock ticking from? Like, it's not clear if you start it from the chat GBT three moment two years ago or from just like all of the research that's been going on for decades. Like, we might actually just be we've talked about this before, but we might actually be like decades into this now, it's starting to hit like the inflection moment potentially. Yeah. For sure. I mean, if we run with Diana's example of fast Fourier transforms, like all the math that's underpinning all the this new AI stuff is linear algebra stuff that's like a hundred years old. Yeah. It just turns out how far you could push it. Probably have all the GPUs to compute it. I guess that's one potential way that these 10,000,000,000,000 parameter models actually alter the face of what humans are capable of. Like, they sort of unlock something about the nature of reality and our ability to model it. And then somehow it leads to either nuclear weapons or the color TV. The other big thing is just because this is all in software, like, compared to, like, Fourier transforms, like, a lot the applications we're seeing physical devices. Right? Like, record players or or or telephones, like you said. And so it takes a while for your technology to get adopted because you have to, like, buy your update device and all these things. Now we have, like, Facebook and Google who have, like, you know, pretty decent percentages, like, the world using their software already, like, as soon as these things start rolling out. And I feel that's another thing that's starting to be noticed is Meta in particular coming out with the meta RayBands, the consumer, like, device. Like, I think consumers, once this becomes something that's, like, visual in your, like, smart glasses plus, like, a voice app that you can talk to and it, like, is indistinguishable from a human being, like, that's gonna be a real change the world moment for me. They'll start feeling the AI once they can, like, talk to it all the time. I mean, it seems like there's really a bifurcation in what we might expect when we have this capability. At the extreme end, you're going to have people like Terence Tau pushing the edge and boundary of our understanding of our, you know, modelable world. And then, you know, maybe that's actually worth tens or hundreds of millions of dollars of inference to run these 10,000,000,000,000 parameter models. And then the more likely way this ends up being useful for the rest of us is actually in distillation. So taking, you know, there's some evidence that, for instance, Meta's four four zero five b was mostly use useful to make their 70,000,000,000 parameter model much much better. And so and you actually see this today. There is sort of this moment there where we thought that, know, people might just go to GPT four and distill out all the weights. And it seems like there's some evidence that certain governmental entities are doing that already. But GPT four itself and four you know, it became four o. OpenAI itself has now enabled distillation internal to its own API. So you can use o one, you can use even GPT four or four four o to distill it down into a much cheaper model that's internal to them, like g p four four o mini. And that's sort of their, you know, lock in capability. Yeah. I don't think this is talked much about, but it is interesting that you have these giant models, the 400 or 500, whatever, billion parameter models that are basically the teacher models because they're the mega train with everything and took forever. And they are the teacher model, master model that teaches a student model, which are these smaller ones that are faster and cheaper because doing inference for a four or five billion parameter model is very expensive. So we have evidence that all these distillation models are working. Companies in the batch, the they're building from the latest and greatest. They're not going for the giant model with all of the parameters and give me the biggest thing to do so that it works the best. We have evidence that's not the case. People are not going for the big model, and we actually have stats in the batch. I mean, Harsh, we kinda talked about them. Yeah. Jared ran some numbers on this, and it's it's fascinating. But I think the bigger meta point is even the fact that talking about the startups or the founders building this stuff are choosing, like, the smaller models versus the bigger models. I just have choice. And even, like, a year ago when this, like, entire industry started existing, like, everything was built on top of ChatGBT. Right? There was a was a % market share, the ChatGPT rapper meme. And I feel like we've, especially over the last six months, seen people start talking about the other models, like Claude and Sonnet being sort of this word-of-mouth for almost being better at cogen than chat GBT, and people are just starting to use different models. And so the numbers that Jared ran for the summer twenty four batch are fascinating because it seemed that that trend has just continued. Like, we have more diversification of LLMs and models that developers are building on top of. And some of the stuff that really stood out is Claude has even just in six months from the winter batch to summer batch has gone from, like, 5% developer market share to, like, 25%. Of companies in the batch. Yes. Of companies in the batch, which is huge. That's like I've never seen a jump like that. Right. Larm has gone from 0% to 8%. Like One thing that we know from running YC for a long time is that whatever the companies in the batch use is a very good predictor of what, like, the best companies in the world are using, and therefore, what products will be most successful. A lot of YC's most successful companies, you could have basically predicted which ones they would be based on just looking, basically, just running a poll of what the companies in the batch use. If we just take a take OpenAI's latest fundraise off the table and the latest, like, the o one model off the table for a second, it would seem like amongst developers and builders, OpenAI was losing. Like, they went from being the only game in town to just, like, bleeding market share to the other models at a pretty rapid rate. The interesting thing, though, is maybe they are coming back. Like, what's the stat that you pulled? It seems like or 15% of the batch are already using o one, even though it's not, like, fully available yet. Yeah. O one is only, like, two weeks old now. Yep. Yeah. And we're seeing some interesting things with o one. We're actually hosting right now in person right now as we speak downstairs a hackathon to give y c companies early access to o one, and Sam himself was here. Did the kick kickoff. There's a bunch of open AI researchers and engineers working on it. And it's only been about four hours of hacking, and we already heard of I already saw actually some demos as I was walking by to see some teams, and they already built things that were not possible before with any other model. Do you do you have some examples? One of the companies I'm working with is Freestyle. They're building a cloud solution fully built with TypeScript with if you're familiar with durable objects with this really cool framework to that that makes front end and back end seamless to develop, and it's really cool to use. What was cool about them is they've just been working on it for a couple hours, and I saw a demo that was mind blown. They basically got a version of Replit agent working with the product. All they had to prompt o one with was all their developer. Oh, sure. Some of their developer documentation and some of their code, and they could just prompt it, build me a web app that writes a to do list or this, and it would just boom. Just work. And it was able to reason and inference with the documentation and took a lot longer, but it arrived and built the actual app. What's interesting for us to talk about is if o one is this magical, what does it actually mean for founders and builders? And one argument is it's bad for builders because maybe o one is just so powerful that OpenAI will just capture all the value and everything that could be valuable and built on top of this stuff will just be owned by them. You mean they're gonna capture a light cone of all future value? Yeah. They're gonna capture a light cone of all present, past, and future value. Oh my god. The alternative more optimistic scenario is we see ourselves how much time the founder spend, especially during the batch, on the tooling around getting the problem, like, getting prompts to work correctly, getting the outputs to be accurate, human in the loop. Like, all of this time spent just getting the core product workings is not deterministic. But if it becomes more deterministic and accurate, then they can just spend their time on bread and butter software things, you know, like better UI, better customer experience, more sales, more relationships. In which case, it's like, it may be a better time to start now than ever because you don't even have like, maybe all of the knowledge you learn around how to get, like, the prompts accurate and working was just temporary knowledge that's no longer relevant as these things get more powerful. Actually, we had this conversation with Jake Heller from CaseText where getting the legal copilot to work to % was a huge unlock. And it was really hard. Yep. He, like, you know, we hated this whole talk about all the things he had to do to actually get the thing to be accurate enough. Yeah. Imagine if he didn't have to do any of that. If if they just on day one, you could be guaranteed a % accuracy. They as though you're just building a web app on top of a database, the barrier to entry to build these things goes way down. There's gonna be more competition than ever, and then it will probably just become look more like a traditional winner takes all software market. Garrett has an example. So there's a company, Drymerge Yeah. That you work with, and they went from 80% accuracy to pretty much a 99 or, for intents and purposes, a % using a one and unlocked a bunch of thing. You wanna talk about them? Yeah. Just by swapping out GPT four zero for for for o one. I think there might be an even more bullish version, Harge, which is that there are use cases right now that people are not able to use LLMs for because even though they're trying to get the accuracy high enough, they just can't get it accurate enough Mhmm. For to actually be rolled out in production. Like, especially if you think about, like, really mission critical jobs where the consequences of mistakes are dire, like, pretty hard to use LMs for that. As they keep getting more accurate, those applications will start to actually work. I guess there is a lot of evidence inside the YC greater portfolio. You know, I was meeting a company from 2017. I think I tweeted about them. They were, you know, $50,000,000 annualized revenue at that point, but growing 50% a year. A year or two ago, they were not profitable. They knew that they needed to raise more money, but in the year since, they automated about 60% of their customer support tickets, and they went from something that needed to raise another round imminently to something that was totally cash flow breakeven while still growing 50% year on year. That's sort of like the dream scenario for building enterprise value because you're big enough that, you know, you're a going concern, and then you're literally compounding your growth with, like, no additional capital coming in. So it's companies like that that actually end up becoming, like, half a billion, a billion dollars a year in revenue and, like, driving hundreds of millions of dollars in free cash flow. I mean, that's sort of the dream for founders at some level, and I think that that's one of the more dramatic examples that I've seen thus far. And I think it's sort of not an isolated case. You know how we're sort of talking it's, you know, 2024 now, and we're still in this overhang moment where companies sort of on this path raised way too much money at, you know, 30 x or 40 x, you know, next twelve months multiple revenue, seemingly struggling, but, you know, also never going to raise another round. Like, this is actually pretty good news for them because they actually can go from, like, not profitable to, you know, breakeven to then potentially very profitable. I think that narrative is not out there, and I think it's really, really good news for founders. I've already started to catch attention. Didn't know. Klarner, CEO, got a lot of attention a few weeks ago for I mean, it's not unclear how much of it is real or not, but at least they're pitching that they're just, you know, replacing their internal systems of records for HR and sales with home built or LLM create apps, at least was like the insinuation. Yeah. What is it? They got rid of Workday. Yeah. That was it. Yeah. That's pretty wild, honestly. I mean, so that's good. If you treat OpenAI as the Google of the next twenty years, you want to invest in Google and all the things that Google enabled like Airbnb. Google could do Airbnb. It probably won't. Yeah. Just from, like, I don't know, Coase's theorem of the firm, probably. It's just, like, too inefficient and too difficult. It requires too much domain expertise to actually pull that off. So what are sort of the new Googles that are getting built out? There's these vertical agents. What are some examples that we'll have that we could talk about? I loved working with this company called TaxGPT from the last YC batch. They started off actually really literally a rapper and, like, you know, it's in the name, TaxGPT. But my favorite example about them is, like, you know, it turned out that tax advice, you know, doing basic rag on you know, it's sort of like case text, actually. It was, you know, being able to do rag on existing case law and existing policy documents from the IRS or internationally. That was just sort of the wedge that got them in front of, you know, tens of thousands of accountant accountants and accounting firms. And now what they're doing is building an enterprise business on document upload. So you sort of, you know, get them for cheap or free for the thing that people are googling for. And then once they know about you and trust you, you get like this 10 or hundred thousand dollar a year ACV contract that then takes over real workflow that, you know, actually extinguishes tens to hundreds of hours of work per accountant. And another interesting thing about the o one model is we were just saying, originally, ChatGPT was the only thing you could build on top of. OpenAI was the only game in town. Then there were all these models. I think the sort of alpha leak we have here, like, right now in this room is downstairs, people are building at the cutting edge of o one that even the public doesn't have access to. And what we're seeing is that this is a real major step forward. Like, o one is going to be a big deal for any programmer engineer who is building an AI application. The interesting thing is, will this cycle repeat where it will give OpenAI a temporary lead, their market share will just, like, go, you know, back up towards a %. But then within six months, Lama will be updated. Claude will come up with its new release. Gemini will keep getting better, and they'll just be like, you know, four different models that have equivalent levels of reasoning. Or will this be like the first time OpenAI has a a true breakthrough? And I was just defining true breakthrough as something that's actually defensible. Like, if no one else can replicate it, then that puts them in a really powerful position. But we don't know. And I think that's what's interesting. It's like OpenAI seems like it is continually the one pushing the envelope, but they always seem to be the first ones to make major breakthroughs, but they have never been able to maintain the lead so far. I think the only thing that's interesting about o one is that it makes a lot of the GPU needs even bigger because it's moving a lot of the computation needs a lot higher for inference because it's taking a lot more time to do a lot of the inference. So I think it's gonna change also a lot of dynamics underneath for a lot of the companies building AI infrastructure as well, which is something food for thought. Seems like there are two different types of use cases. I believe they did just enable distillation from o one into four o. And so it's conceivable that for relatively rote and repeating use cases, you could just sort of use o one for the difficult ones, and then you distill it out and then you pay four o or four o mini prices from there. And then there again, there's this other type of problem that is like very specific. I mean, imagine most many code gen situations are a little bit more like that, where you need to pay like for the full o one experience because it's, you know, fairly detailed and specific. Depends who you're building for too. Right? If you're a enterprise software and you can pass the cost on to your customer and they can tolerate at a higher latency and don't care as much about it being instant, then you can just use maybe o one a lot. If you're putting, like, consumer apps, probably not. But talking of consumer apps, mean, the other thing that was striking about OpenAI's release releases like this real time voice API. Super cool. It's pretty remarkable. And I think the the most telling thing to me is that the ongoing usage based pricing is $9 per hour. And it sort of points to a sort of powerful thing. Like, if I were a macro trader, I would be very very bearish on countries that have that rely very heavily on call centers right now because, you know, $9 an hour is sort of right there at what a call center would cost. This is another thing we're definitely seeing within the batch. Right? Like, it's clear that voice is a almost like a killer app. Like, arguably, like, there's a company I just worked within this batch. I am they're in my group at least, Domu, just do sort of AI voice for debt collection, and their traction is just phenomenal. It's working incredibly well. A whole bunch of the voice apps in s twenty four were just, like, some of the fastest growing, like, just, like, explosive companies. It's it's a clear trend for s twenty four. And I remember working with companies in the prior two batches that tried to do voice, and it just, like, wasn't working well enough. Yeah. Like, the latency was too high. Exactly. Like, it got confused if, like with interruptions and things like that. And it's, like, just turned the corner where it's, like, finally working. There's another company I work with, Happy Robot, that landed on this idea that was doing a voice agent for coordinating all these phone calls for logistics. Think of a truck driver that needs to go from point a to point b. These are all, like, people just calling to check where you are. There's no, like, there's no, like, find my friends for it. And they started getting a lot of usage on this. And I think we talked a bit about this before that at this point, AI has passed Turing tests and is solving all of these very menial problems over the phone. That's pretty wild. I guess one thing that is maybe under discussed is to what degree the engineering teams that are in in these sort of incumbent industries, it feels like it's pretty binary either, you know, the vast majority of companies and organizations, especially the ones that were maybe founded four or more years ago, they actually don't take any of this seriously. Like, have literally no initiatives on this stuff. And I sort of wonder how generational it is. Like, I'm realizing that eng managers and VP of eng, like, they're probably my age now. I'm 43 now. And, you know, if I wasn't here seeing exactly what was happening, I would be sort of tempted to say, like, this is just the same old thing, AI. Yeah. Yeah. Yeah. But I I think it's the rate of improvement that people don't get if they're not as close to it as we are. I just think your average corporate enterprise person is certainly used to technology disrupting things, but over pretty long time frames. And if anything, they become cynical. So like, oh, the cloud. Like, cloud was such a buzzword for a long time. It totally did change our enterprise software is build and delivered, but it took like a decade or so. And so I I suspect everyone's feeling that way about AI. It's just your natural default mode is to be cynical. Oh, yeah. Like, it's not gonna be ready for a while. And then probably if you looked at this stuff even six months ago, like we were just talking about, if you looked at an AI voice app six months ago Oh, yeah. You're like, oh, this is this is years away from being anything that we need to take seriously. It's like, actually, like, three to four months later, like, it's like it's hit some real major inflection point. And I think that's what takes even people within tech, it's surprising all of us how quickly this stuff is moving. It's the fastest any tech has ever improved, I think. Yep. Certainly faster than processors, certainly faster than the cloud. And it's kind of fun to actually watch. It's been remarkable to actually see another example of this in the batch. So a lot of the technical founders, sometimes I sit with them and I just watch how they code, the before and the after before all of this wave of AI. Just standard. You have your IDE and things on the terminal. People ship fine. But the demos and products that we're seeing founders build during the batch is like a next level of polish. And when you see them and see them code, it's like they're living in the future. They're really not just like at this point, GitHub Copilot is already kinda old news. They're using the latest, greatest coding assistant. A lot of them perhaps using something like continue or Cursor. Right? But this is something Jared pulled out as well when we asked the founders Oh, the IDs. Right? Yeah. Yeah. We surveyed the summer '20 '4 founders, and half the batch is using Cursor compared to only 12% that's using GitHub Copilot. That was surprising to me. They're not even using the fully agentic coding agents like Replit. Haser's still sort of like Copilot phase stuff. But even just going from, like, GitHub copilot to Cursor, which is, like, the next step up in terms of, like, how much the actual AI does, is this, like, incredible breakthrough. They ship very quickly. I mean, this is evident today in the hackathon. I was impressed with what they built. I was looking at their editors, Cursor. It's like, cool. It's another sign where, like, the founders have the advantage. Right? Like, it feels to me again that when GitHub Copilot first came on the scene, it seemed it's GitHub plus Microsoft. It has all the developers, plus it has all the capital, plus it has all the access to, like, the inside track on OpenAI. How could any coding IED compete with them? It will just get subsumed. And my cursor has come out of nowhere and is, like, you know, according to our numbers, like, five times the size of, like, GitHub Copilot within the batch. Which again, like you were saying earlier, was like, the the startup founders are actually usually the taste makers on this kind of thing. I think there's certain types of businesses where it doesn't make sense to maybe go after startup founders as your early customers. But for developer tools, it definitely does. Like Stripe, AWS, both wanted to own YC batches in particular, and that worked out really well for them. So it's probably a really good sign for Cursor, honestly, that they have, like, such good penetration within the YC batch. Yeah. I I would definitely say Cursor is pretty awesome, but AltaVista was awesome too. Yep. I remember using that as a search engine, and there was another version, and the next version was 10 times better. And so this is the way it's gonna go. I mean, which the only people who win are actually developers because of all this competition. So I think, again, takes us to, like, the optimistic view of all of this stuff, which is as the models get more powerful, the winners will just be whoever builds the best, like, user experience and gets all these, like, nitty gritty details correct. And so that's why Cursor can be GitHub Copilot that has all the advantages. Altavista is a great example. Like, there's still like, Google still came along and crushed them. Right? So there's still room for someone to keep doing to Cursor what Cursor has done to GitHub Copilot. So let's get back to 10,000,000,000,000 parameters. What world do you think we will live in with this made real, with ASI or something approaching it? You know, what will humans actually do, and how much more awesome will it be? Well, I'll give a steel man for a really bullish case, which is that the thing that is holding back the rate of scientific and technological progress is arguably the number of smart people who can actually analyze all the information, that we already know about the world. There's millions of scientific papers already out there, an incredible amount of data, but, like, try reading all of it. It's far beyond the scale of any human's comprehension. And if we make the models smart enough that they can actually do original thinking and deep analysis with correct logic, and you could let loose an infinite a near infinite amount of intelligence on the near infinite infinite amount of data and knowledge that we have about the world. You can just imagine it just coming out with just crazy scientific discoveries, room temperature fusion, room temperature superconductors, time travel, flying cars, all the stuff that humans haven't been able to invent yet. Like, with enough intelligence, maybe we'll finally invent it all. Sign me up for that future. Sounds great. I totally agree with you. I think, you know, what this might be is not merely a bicycle for the mind. It might actually be a self driving car or even crazier, maybe a rocket to Mars. So with that, we'll see you guys next time."
  },
  {
    "name_video": "You Don’t Have To Be A Billionaire To Launch Satellites",
    "description_video": "In this conversation, YC Group Partners Jared Friedman and Diana Hu chat about building a satellite startup in today's environment — how far technology has come, how cheap it is, and how rapidly these companies can innovate now.",
    "related_categories": [],
    "page_url": "/library/Lm-you-don-t-have-to-be-a-billionaire-to-launch-satellites",
    "youtube_url": "https://youtube.com/watch?v=Q0Xs0lGgwVA",
    "mp3_file": "downloaded/You_Don’t_Have_To_Be_A_Billionaire_To_Launch_Satellites.mp3",
    "mp3_content": "Last year, the team at Astronis launched their first commercial satellite into space. One. Stage separation confirmed. Their smaller, low cost telecom satellites represent a major breakthrough for the aerospace industry. And they're also the first ever YC backed company to actually launch something into space. All of this had its beginning here in a small apartment in Downtown San Francisco. When I met you, eight years ago, you were just a guy who had an idea to build a satellite company. And now you're a guy who's actually built a satellite company. Yes. That is true. It was just me and Ryan just hanging out in an apartment. Turns out minimum viable product for a geostationary telecommunications spacecraft is not very minimal. So how does a small scrappy startup go from building satellites in a tiny apartment to launching satellites into space and being worth billions? We went to Astronus to find out. YC has funded some of the most successful hard tech companies of the last decade. I think there's a misconception that in order to start a hard tech company, maybe you have to be already a billionaire, like Elon Musk or Palmer Lucky or you need to be able to raise like tons of money from investors and why is he only invest $500,000? It's not obvious to a lot of people how you could use that to start a hard tech company. It's mind boggling how a company like Astronis that went through the batch made progress during the batch. Like, what can you do with so little when satellites cost, like, millions of dollars to, like, ship? So we visited the cofounders of Astronis to find out how they pulled it off. So John, you built a satellite company. That's insane. You're accustomed to this because you live in it every day. But to me, it's still insane that you actually did this. So let's start with the basics. What is Astronis? At Astronis, we build a special new kind of satellite that actually we think the first of its kind. So we build small satellites for high orbits. What's the path that took you here? How did you learn how to start a satellite company? I'm an aerospace engineer by by background. Did that job for a little while. Spent a little bit of time at at on some big satellite programs and just knew that that was not for me. Then there was a moment where we realized, hey, nobody is going and taking a new approach, new technology, next generation satellite designs for high orbits and specifically this this super valuable orbit called Geostation Orbit. So, Seedworth taking a crack at. How did you end up recruiting Ryan and turning this from an idea into a startup? Ryan and I met over twenty years ago. So we were both involved in this student organization called Students for the Exploration and Development of Space. We got to know each other through that and then reconnected when he moved to San Francisco to start a job at a company called Planet. Which is one of the like like pioneering space startups. Once he moved to San Francisco, we started talking about, you know, ideas for for new space companies. So you guys did kinda have the exact right backgrounds to do this because you've been working with all the biggest companies in the space, understanding, like, the business problems. And he was an early engineer at, the key early startup that, like, pioneered the idea that startups could build their own satellites. And so it makes sense. Yeah. I think it was definitely, like, a little bit of right place at the right time. So you had this idea. You recruited Ryan. You guys decided to work on this together. Yeah. How did this become a startup? How did how how did you take the first steps? Applying to YC was one of the first steps. Astronas did YC in winter sixteen. And winter twenty sixteen was a very special time to be starting an aerospace company. It was at the very beginning of when other founders, inspired in part by Elon Musk and the success of SpaceX, started starting their own aerospace companies. And it was right on the cutting edge, so it wasn't clear that it was possible for a YC style company that didn't have a billionaire founder to actually start an aerospace company. But it turns out that it was exactly the right time to do it. In fact, in 2016, YC funded three aerospace companies, Astronis, Boom, and Relativity Space that are now all billion dollar companies. John and Ryan got into YC, but they knew that they were facing long odds of being able to raise the large round at the end of YC that they needed to put a satellite into orbit. And so they responded by setting crazy ambitious goals for what they could accomplish during the batch so that they knew that if they could accomplish those goals, it would be impossible for investors to ignore them. How did you get started? I mean, what was kind of the day zero of it? So I guess one of the key things with especially building sort of these hard tech things and things that have to go, you know, something really far away in a very harsh environment was figuring out how can you start small, like minimum viable product and all that sort of stuff. Turns out minimum viable product for a geostationary telecommunications spacecraft is not very minimal. One of the things we decided we wanted to do from the earliest days was just draw a line in the sand and say we as a company are gonna put something in space and show that we can build a satellite and that it will work in space. Let's just figure out how to do that and do it at sort of the lowest possible cost, prove out maybe some early, you know, very early prototypes of of some of the new technology that we wanted to be using. And then when we joined YC, we had a meeting. I don't know if you remember this, but we had a meeting with with you and our other YC partner that was basically like, okay. You have three months until you can show up on demo day, and whatever you have on demo day, it better be as impressive as possible. Anything that doesn't get done until after demo day, forget about it. It won't matter. The investors won't hear about it because it won't have happened yet. So what are you gonna get done in three months? And we said we think we can build a first prototype satellite in three months. Kind of a lot of work, right, and it actually can take some companies years, but we had said, okay. We're gonna do this in three months. And so how can we show proof points both to external people, but also to ourselves to prove out that we have abilities to to show things. And so in those, like, three months, built that prototype version and then built the version that we then launched and were able to operate in 2018. How did you do that? Because you were you were building this in the apartment. Right? You know, a lot of the sort of core elements are are fundamentally kinda simple. And if you're really building this as a demo rather than for a production application, you can be flexible on what the requirements are and things like that. And knowing that this demo satellite is really just building something that's fairly basic just to prove out, can we build something? Can we integrate it? Can we deploy it to an ab operational environment? And then we can can we do some sort of basic demo with it. And we're able to that. We're able to do that relatively quickly. We built this first prototype satellite, and we brought it to demo day. It was such a smashing success that your demo day video is one of the ones that we continue to play for founders in new batches because it so perfectly encapsulates what a startup can do in three months if they're really ambitious and really hardworking and really determined to do something that other people might think is impossible. We are attacking a $122,000,000,000 a year market with low cost satellites. Please come talk to us if you wanna find out how much money you can make in space. Thank you. When we do our onboarding, actually, part of what we show is we show John's YC pitch. And it's always funny looking back at that and being like, wow. Yeah. That's, like, kind of fundamentally the same thing that we said, you know, way back then when it was just two of us, not that many months into starting the company. So I love the Astronis Demo Day presentation for a couple reasons. The first is it addresses the number one reason why anybody would not want to invest in astronauts, which is it seems impossible. They address that by showing that they've already done it. And the second is it addresses the other reason that people wouldn't want to invest in astronauts, which is that it kind of seems like it could be a science project and not really a good business. And investors want to fund stuff and actually make money. And John does a really good job of convincing the listener that this isn't a science project. This is a real business that could be very profitable. So John had practiced 50 times over three days and got different feedback and it paid off. They raised one of the largest seed rounds at YC ever at that time. And that seed round was enough for them to actually launch a satellite into space, but they still had to be scrappy because space is expensive. Coming out of the seed that we raised, at the end of demo day was when we moved into the apartment. 1,800 square feet. So, yeah, pretty small for for all the different things. But, you know, to build a spacecraft of this size, you don't necessarily need a huge amount of infrastructure in order to do that. And so we built it on, you know, IKEA desks that were fitted with all the different things and get some ESD mats and things like that, but, you know, able to sort of put it all together. We did wanna make sure that we were clean and had the right mindset when you're dealing with the space hardware, so we actually did build a cleanish room. The cleanish room was in fact basically a bunch of PVC piping with shower curtains, and then we sprayed the stuff called staticide, which allegedly would basically give it a little conductive layer to make sure that, you know, the big plastic curtains aren't going to generate a bunch of static and then, you know, zap our our things as they're coming into it. They kept making progress, kept selling, and kept growing without losing that scrappy spirit. And now, eight years later, they have more than 400 employees working out of a historic building at Pier 70 in an area that's quickly becoming a tech hub. And earlier this year, we visited their manufacturing facility while they were putting the finishing touches on on four brand new satellites. Behind this door is where the real magic happens. This is where the actual flight hardware is being built and assembled that is going to go into space. Let's check it out. Let's go check it out. These are panels that are in different stages of of being assembled into full satellites. What you can see right here is one of our most fully assembled satellites. Satellite. That is a satellite. That is getting very close to being ready to go into space. So one of the things that we've been most thrilled with is just being able to bring a lot of our testing in house. So for example over here, that is a vibe or a shaker table. That is to simulate the ride to space on the rocket. So, when the rocket is launching It's bumpy. We've all seen the movies. Yeah. It looks like a bumpy ride up there. And so, you have to test it. You have to test that your satellite can survive that. Uh-huh. And you can actually dial in pretty specifically exactly what types of vibration modes the satellite is gonna see specific to the exact rocket you're flying on. And it's an important test that we do before we ship the satellites out the door. So then through this door is a very important piece of test equipment. So these are what are called thermal vacuum chambers where we can test the satellite at hard vacuum before it ever goes into space. And they're big enough to put an entire satellite inside each one. And we have two of them, so we can do two satellites at the same time. So each of these tests is pretty significant. It can last for seven to ten days that the satellite is sitting there. It's on. It's got all the software running. It basically thinks it's in space. So we figured out can ion thruster tests inside of this chamber as well. That was also a huge win for us, was discovering essentially that we could do this test in house and use our existing facility and not have to send that to somewhere else. So what satellites are going to space this year? Yeah. So we are launching four satellites. These are launching together on a single rocket. One of the bigger rockets, this is the SpaceX Falcon nine. So we went and got our own dedicated Falcon nine launch. Oh, there's gonna be a dedicated Falcon nine launch. Just Astronus. Yes. I think we were one of the first new companies in history to go and get an entire dedicated Falcon nine. Getting those up, getting those operational, and, you know, taking this from the, you know, one to end and really getting that first thing going, which has been, you know, great for scaling up the design and the manufacturing side has been the focus over the past couple of years. And then, you know, this year later, we're going to get used to operating. Instead of operating one, we're gonna operate five. There's gonna be a lot of learnings and excitement and challenges with that, but we're looking forward to going through all of those. But we're not just doing that. We're also developing our next generation system, and so there's a whole bunch of different things that are in work between that, other new vehicles and programs. And so it's a it's a balancing act. You don't need to be Elon Musk to start a hard tech company. If you've got some domain experience, a great co founder, a scrappy mindset, and a lot of perseverance, regular people can actually start hard tech companies now too. I hope that hearing the story from Astranis inspires more people to start hard tech companies. Until next time, thanks for watching."
  },
  {
    "name_video": "Why OpenAI's o1 Is A Huge Deal",
    "description_video": "OpenAI’s newest model, o1, makes huge leaps forward in domains like mathematics and coding and scores big on many of the toughest benchmarks. The secret to its success? It represents an entirely new class of models designed to reason or “think through” complex problems.\n\nFor the very first episode of YC Decoded, we took a look inside.",
    "related_categories": [],
    "page_url": "/library/Ll-why-openai-s-o1-is-a-huge-deal",
    "youtube_url": "https://youtube.com/watch?v=Lv9bKyQgoHo",
    "mp3_file": "downloaded/Why_OpenAI's_o1_Is_A_Huge_Deal.mp3"
  },
  {
    "name_video": "Starting A Company? The Key Terms You Should Know",
    "description_video": "Dalton breaks down some of the most common terminology that you’ll come across in the startup world.",
    "related_categories": [],
    "page_url": "/library/Lk-starting-a-company-the-key-terms-you-should-know",
    "youtube_url": "https://youtube.com/watch?v=wH3TKpALlw4",
    "mp3_file": "downloaded/Starting_A_Company?_The_Key_Terms_You_Should_Know.mp3"
  },
  {
    "name_video": "Why Design Matters: Lessons from Stripe, Lyft and Airbnb",
    "description_video": "We spoke with Stripe's Head of Design, Katie Dill, about her design philosophy, and how important it is to instill a culture of design in your startup from day one.",
    "related_categories": [],
    "page_url": "/library/Lj-why-design-matters-lessons-from-stripe-lyft-and-airbnb",
    "youtube_url": "https://youtube.com/watch?v=CKfERe55CeA",
    "mp3_file": "downloaded/Why_Design_Matters:_Lessons_from_Stripe,_Lyft_and_Airbnb.mp3"
  },
  {
    "name_video": "How Do Billion Dollar Startups Start?",
    "description_video": "The Group Partners explore the humble origins of several top YC companies to try and identify common traits of the most successful founders.",
    "related_categories": [],
    "page_url": "/library/Li-how-do-billion-dollar-startups-start",
    "youtube_url": "https://youtube.com/watch?v=HB3l1BPi7zo",
    "mp3_file": "downloaded/How_Do_Billion_Dollar_Startups_Start?.mp3"
  },
  {
    "name_video": "Meta VS Apple: What Their Battle Means For AI Startups",
    "description_video": "In the first episode of the new series The Breakdown, Tom Blomfield and David Lieb look at the ongoing competition between Meta and Apple and what it means for AI startups, platform lock-in, building consumer products, and more.",
    "related_categories": [],
    "page_url": "/library/Lh-meta-vs-apple-what-their-battle-means-for-ai-startups",
    "youtube_url": "https://youtube.com/watch?v=NhrkiK1SggE",
    "mp3_file": "downloaded/Meta_VS_Apple:_What_Their_Battle_Means_For_AI_Startups.mp3"
  },
  {
    "name_video": "Why Vertical LLM Agents Are The New $1 Billion SaaS Opportunities",
    "description_video": "In this episode of the Lightcone, the hosts sit down with YC alum Jake Heller, the co-founder and CEO of Casetext (which sold to Thomson Reuters for $650 million in 2023) to discuss what it takes to build a successful vertical AI company.",
    "related_categories": [],
    "page_url": "/library/Lg-why-vertical-llm-agents-are-the-new-1-billion-saas-opportunities",
    "youtube_url": "https://youtube.com/watch?v=eBVi_sLaYsc",
    "mp3_file": "downloaded/Why_Vertical_LLM_Agents_Are_The_New_$1_Billion_SaaS_Opportunities.mp3"
  },
  {
    "name_video": "Stripe Head of Design Katie Dill Reviews Startup Websites",
    "description_video": "Stripe Head of Design Katie Dill reviews startup landing pages with a focus on creating sites that build trust, converts customers and brings joy to the user experience.",
    "related_categories": [],
    "page_url": "/library/Lf-stripe-head-of-design-katie-dill-reviews-startup-websites",
    "youtube_url": "https://youtube.com/watch?v=DY5Z-uZ6ZMc",
    "mp3_file": "downloaded/Stripe_Head_of_Design_Katie_Dill_Reviews_Startup_Websites.mp3"
  },
  {
    "name_video": "How To Find A Co-Founder",
    "description_video": "YC Group Partner Harj Taggar explains why you need a co-founder, when to bring them on, where you can find one, and how to maintain the relationship.",
    "related_categories": [],
    "page_url": "/library/Ld-how-to-find-a-co-founder",
    "youtube_url": "https://youtube.com/watch?v=Fk9BCr5pLTU",
    "mp3_file": "downloaded/How_To_Find_A_Co-Founder.mp3"
  },
  {
    "name_video": "What Founder Mode Really Means",
    "description_video": "Dalton and Michael break through the noise to find out what lessons can be learned from going all in on \"founder mode.\"",
    "related_categories": [],
    "page_url": "/library/Lc-what-founder-mode-really-means",
    "youtube_url": "https://youtube.com/watch?v=FlonCU9txXI",
    "mp3_file": "downloaded/What_Founder_Mode_Really_Means.mp3"
  },
  {
    "name_video": "Building The World's Best Image Diffusion Model",
    "description_video": "Suhail Doshi sits down with the hosts to talk about his experience building Playground, and what it takes to make a SOTA model.",
    "related_categories": [],
    "page_url": "/library/Lb-building-the-world-s-best-image-diffusion-model",
    "youtube_url": "https://youtube.com/watch?v=VyIOoqjm8HA",
    "mp3_file": "downloaded/Building_The_World's_Best_Image_Diffusion_Model.mp3"
  },
  {
    "name_video": "Signs Your Company Is Recovering From ZIRP",
    "description_video": "Dalton & Michael examine how to know whether your company is recovering from ZIRP and how to know if it may be time to leave and do something else.",
    "related_categories": [],
    "page_url": "/library/La-signs-your-company-is-recovering-from-zirp",
    "youtube_url": "https://youtube.com/watch?v=kVGvC7Ix_nc",
    "mp3_file": "downloaded/Signs_Your_Company_Is_Recovering_From_ZIRP.mp3"
  },
  {
    "name_video": "How To Convert Customers With Cold Emails",
    "description_video": "YC Group Partner Aaron Epstein shares expert advice on how to write cold emails that have all the right ingredients to get noticed and convert new customers.",
    "related_categories": [],
    "page_url": "/library/LZ-how-to-convert-customers-with-cold-emails",
    "youtube_url": "https://youtube.com/watch?v=7Kh_fpxP1yY",
    "mp3_file": "downloaded/How_To_Convert_Customers_With_Cold_Emails.mp3"
  },
  {
    "name_video": "The Times When Paranoia Fueled Technological Advancement",
    "description_video": "Dalton & Michael discuss the origins of some of the biggest innovations over the last 75 years.",
    "related_categories": [],
    "page_url": "/library/LY-the-times-when-paranoia-fueled-technological-advancement",
    "youtube_url": "https://youtube.com/watch?v=LHUnje0NLG0",
    "mp3_file": "downloaded/The_Times_When_Paranoia_Fueled_Technological_Advancement.mp3"
  },
  {
    "name_video": "How YC Was Created With Jessica Livingston",
    "description_video": "YC co-founder Jessica Livingston shares the stories and decisions of the early days that would form the foundations of YC as we know it today.",
    "related_categories": [],
    "page_url": "/library/LX-how-yc-was-created-with-jessica-livingston",
    "youtube_url": "https://youtube.com/watch?v=6u4JVz7iQTY",
    "mp3_file": "downloaded/How_YC_Was_Created_With_Jessica_Livingston.mp3"
  },
  {
    "name_video": "Why AI Hasn’t Blown Our Minds…Yet",
    "description_video": "Dalton and Michael explore the current state of AI tech and grapple with whether or not it lives up to their expectations.",
    "related_categories": [],
    "page_url": "/library/LW-why-ai-hasn-t-blown-our-minds-yet",
    "youtube_url": "https://youtube.com/watch?v=jyp-cHmpfgk",
    "mp3_file": "downloaded/Why_AI_Hasn’t_Blown_Our_Minds…Yet.mp3"
  },
  {
    "name_video": "How To Improve Cohort Retention",
    "description_video": "YC Group Partner David Lieb explains how to define cohorts, track active users and determine the appropriate time frame for measuring successful retention rates.",
    "related_categories": [],
    "page_url": "/library/LV-how-to-improve-cohort-retention",
    "youtube_url": "https://youtube.com/watch?v=VNxBZ7ka5J0",
    "mp3_file": "downloaded/How_To_Improve_Cohort_Retention.mp3"
  },
  {
    "name_video": "How To Live In The Social Media Matrix",
    "description_video": "Dalton and Michael discuss what to be aware of as we engage online and how we can leverage the social media matrix to our benefit. ",
    "related_categories": [],
    "page_url": "/library/LU-how-to-live-in-the-social-media-matrix",
    "youtube_url": "https://youtube.com/watch?v=RMW_33zyTK4",
    "mp3_file": "downloaded/How_To_Live_In_The_Social_Media_Matrix.mp3"
  },
  {
    "name_video": "Are We In An AI Hype Cycle?",
    "description_video": "The Lightcone hosts discuss where AI might be if the hype cycle is real and what may remain once the buzz wears off.",
    "related_categories": [],
    "page_url": "/library/LR-are-we-in-an-ai-hype-cycle",
    "youtube_url": "https://youtube.com/watch?v=_-5xJQ4U8g0",
    "mp3_file": "downloaded/Are_We_In_An_AI_Hype_Cycle?.mp3"
  },
  {
    "name_video": "How To Influence Decision Makers",
    "description_video": "Dalton and Michael discuss actions you can take to be more persuasive and create more favorable outcomes for yourself.",
    "related_categories": [],
    "page_url": "/library/LQ-how-to-influence-decision-makers",
    "youtube_url": "https://youtube.com/watch?v=8PB0l7x73rM",
    "mp3_file": "downloaded/How_To_Influence_Decision_Makers.mp3"
  },
  {
    "name_video": "Co-Founder Equity Mistakes to Avoid",
    "description_video": "Michael Seibel explains the ins and outs of co-founder equity, why it's important to be generous with that equity, and how to avoid bad advice that can lead to co-founder breakups.",
    "related_categories": [],
    "page_url": "/library/LP-co-founder-equity-mistakes-to-avoid",
    "youtube_url": "https://youtube.com/watch?v=DISocTmEwiI",
    "mp3_file": "downloaded/Co-Founder_Equity_Mistakes_to_Avoid.mp3"
  },
  {
    "name_video": "How Nothing Founder Carl Pei Built A Multi-Million Dollar Smartphone Brand In Just 2 Years",
    "description_video": "On this episode of The Main Function, Carl Pei reflects on the highs and lows that have come with the journey of pursuing excellence in hard tech.",
    "related_categories": [],
    "page_url": "/library/LO-how-nothing-founder-carl-pei-built-a-multi-million-dollar-smartphone-brand-in-just-2-years",
    "youtube_url": "https://youtube.com/watch?v=uZVyBc1CKN0",
    "mp3_file": "downloaded/How_Nothing_Founder_Carl_Pei_Built_A_Multi-Million_Dollar_Smartphone_Brand_In_Just_2_Years.mp3"
  },
  {
    "name_video": "Gmail Creator Paul Buchheit On AGI, Open Source Models, Freedom",
    "description_video": "The hosts sit down with Paul Buchheit, one of Google’s earliest employees, the creator of Gmail and a YC Group Partner.",
    "related_categories": [],
    "page_url": "/library/LN-gmail-creator-paul-buchheit-on-agi-open-source-models-freedom",
    "youtube_url": "https://youtube.com/watch?v=LSUviaN1eso",
    "mp3_file": "downloaded/Gmail_Creator_Paul_Buchheit_On_AGI,_Open_Source_Models,_Freedom.mp3"
  },
  {
    "name_video": "The Problem With Startup \"Experts\"",
    "description_video": "Dalton Caldwell and Michael Seibel discuss the phenomenon of local startup experts and why they may be doing a disservice to your entrepreneurial journey.",
    "related_categories": [],
    "page_url": "/library/LM-the-problem-with-startup-experts",
    "youtube_url": "https://youtube.com/watch?v=ClWQCm2h9iI",
    "mp3_file": "downloaded/The_Problem_With_Startup_\"Experts\".mp3"
  },
  {
    "name_video": "How To Price For B2B",
    "description_video": "YC Group Partner Tom Blomfield guides you on how to come up with a price and then justify that number to customers.",
    "related_categories": [],
    "page_url": "/library/LI-how-to-price-for-b2b",
    "youtube_url": "https://youtube.com/watch?v=4hjiRmgmHiU",
    "mp3_file": "downloaded/How_To_Price_For_B2B.mp3"
  },
  {
    "name_video": "Tarpit Ideas: The Sequel",
    "description_video": "Dalton and Michael dispel some misconceptions about what a tarpit idea actually is and how it applies to current tech trends like AI.",
    "related_categories": [],
    "page_url": "/library/LH-tarpit-ideas-the-sequel",
    "youtube_url": "https://youtube.com/watch?v=GU9iT7MW0rs",
    "mp3_file": "downloaded/Tarpit_Ideas:_The_Sequel.mp3"
  },
  {
    "name_video": "Why Startup Founders Should Launch Companies Sooner Than They Think",
    "description_video": "YC Partners discuss the common founder hesitation to launching and why it can be harmful to the journey and growth of a startup.",
    "related_categories": [],
    "page_url": "/library/LG-why-startup-founders-should-launch-companies-sooner-than-they-think",
    "youtube_url": "https://youtube.com/watch?v=Nsx5RDVKZSk",
    "mp3_file": "downloaded/Why_Startup_Founders_Should_Launch_Companies_Sooner_Than_They_Think.mp3"
  },
  {
    "name_video": "Enterprise Sales for Founders",
    "description_video": "Having led his startup, Optimizely, to $100M ARR, YC Group Partner Pete Koomen breaks down the enterprise sales funnel and shares his tips on how a technical founder can start closing real deals for their startup.",
    "related_categories": [],
    "page_url": "/library/LF-enterprise-sales-for-founders",
    "youtube_url": "https://youtube.com/watch?v=0fKYVl12VTA",
    "mp3_file": "downloaded/Enterprise_Sales_for_Founders.mp3"
  },
  {
    "name_video": "10 People + AI = Billion Dollar Company?",
    "description_video": "Could a staff of ten or less — with the help of AI — create a unicorn? ",
    "related_categories": [],
    "page_url": "/library/LD-10-people-ai-billion-dollar-company",
    "youtube_url": "https://youtube.com/watch?v=CKvo_kQbakU",
    "mp3_file": "downloaded/10_People_+_AI_=_Billion_Dollar_Company?.mp3"
  },
  {
    "name_video": "What Is ZIRP And How Did It Poison Startups?",
    "description_video": "Dalton and Michael talk about the economic phenomenon and the ripples it caused in the startup world.",
    "related_categories": [],
    "page_url": "/library/LC-what-is-zirp-and-how-did-it-poison-startups",
    "youtube_url": "https://youtube.com/watch?v=iMo5-4h_XwE",
    "mp3_file": "downloaded/What_Is_ZIRP_And_How_Did_It_Poison_Startups?.mp3"
  },
  {
    "name_video": "Standing Up For Startups - YC Goes To D.C.",
    "description_video": "Garry Tan sits down with YC's new Head of Public Policy, Luther Lowe, to discuss why YC is in D.C. advocating for the startup community.",
    "related_categories": [],
    "page_url": "/library/LA-standing-up-for-startups-yc-goes-to-d-c",
    "youtube_url": "https://youtube.com/watch?v=6WtdFqgsEY0",
    "mp3_file": "downloaded/Standing_Up_For_Startups_-_YC_Goes_To_D.C..mp3"
  },
  {
    "name_video": "Better AI Models, Better Startups [Lightcone Podcast Ep. 7]",
    "description_video": "There's been a lot of news lately about the updates to some of the largest foundational AI models. But what does this mean for startups? How will future product releases from the AI giants effect the companies built on top of them? The hosts of Lightcone discuss how founders can take advantage of these developments and avoid being steamrolled by the competition.",
    "related_categories": [],
    "page_url": "/library/L9-better-ai-models-better-startups-lightcone-podcast-ep-7",
    "youtube_url": "https://youtube.com/watch?v=4aMQPG9gPoM",
    "mp3_file": "downloaded/Better_AI_Models,_Better_Startups_[Lightcone_Podcast_Ep._7].mp3"
  },
  {
    "name_video": "YC's Group Partners Discuss Doing Things That Don't Scale",
    "description_video": "YC Partners discuss Paul Graham's \"Do Things That Don't Scale\" essay, its influence on Silicon Valley, and some prime examples of YC founders that embraced the mantra.",
    "related_categories": [],
    "page_url": "/library/L8-yc-s-group-partners-discuss-doing-things-that-don-t-scale",
    "youtube_url": "https://youtube.com/watch?v=IjPDIjge81o",
    "mp3_file": "downloaded/YC's_Group_Partners_Discuss_Doing_Things_That_Don't_Scale.mp3"
  },
  {
    "name_video": "How New Technology Creates New Businesses",
    "description_video": "When a major new technology comes out, huge new opportunities open up for founders that get in on the ground floor. In this episode of Dalton and Michael, we’ll talk about why this is that moment for AI, who will find those opportunities, and where to look for the people that’ll help you find them faster.",
    "related_categories": [],
    "page_url": "/library/L7-how-new-technology-creates-new-businesses",
    "youtube_url": "https://youtube.com/watch?v=KxjPgGLVJSg",
    "mp3_file": "downloaded/How_New_Technology_Creates_New_Businesses.mp3"
  },
  {
    "name_video": "The Untold Stories of Y Combinator with Co-Founder Jessica Livingston",
    "description_video": "Come hear the untold stories of Y Combinator with Co-Founder Jessica Livingston, and learn how she got started in her incredible career in startups.",
    "related_categories": [],
    "page_url": "/library/L6-the-untold-stories-of-y-combinator-with-co-founder-jessica-livingston",
    "youtube_url": "https://youtube.com/watch?v=oYFjKml9ptk",
    "mp3_file": "downloaded/The_Untold_Stories_of_Y_Combinator_with_Co-Founder_Jessica_Livingston.mp3"
  },
  {
    "name_video": "Why This Is The Perfect Time To Start A Startup [Lightcone Podcast LIVE]",
    "description_video": "In April 2024 YC hosted Startup School East, a one-day event in Boston for university students. As part of the event, the Lightcone Podcast (Garry, Harj, Diana, and Jared) did their first live stage recording — and here it is!",
    "related_categories": [],
    "page_url": "/library/L5-why-this-is-the-perfect-time-to-start-a-startup-lightcone-podcast-live",
    "youtube_url": "https://youtube.com/watch?v=0TNTlMZFTWw",
    "mp3_file": "downloaded/Why_This_Is_The_Perfect_Time_To_Start_A_Startup_[Lightcone_Podcast_LIVE].mp3"
  },
  {
    "name_video": "Does Your Startup Website Pass The First Impression Test?",
    "description_video": "When someone visits your website you only have a few seconds to convince them it’s worth their time. So how do you do that?",
    "related_categories": [],
    "page_url": "/library/L3-does-your-startup-website-pass-the-first-impression-test",
    "youtube_url": "https://youtube.com/watch?v=pqwOL6YfRIo",
    "mp3_file": "downloaded/Does_Your_Startup_Website_Pass_The_First_Impression_Test?.mp3"
  },
  {
    "name_video": "Consumer is back, What’s getting funded now, The vibes immaculate [Lightcone Podcast Ep. 6]",
    "description_video": "What's happening in startups right now and how can you get ahead of the curve? In this episode of the Lightcone podcast, we dive deep into the major trends we're seeing from the most recent batch of YC using data we've never shared publicly before. ",
    "related_categories": [],
    "page_url": "/library/L2-consumer-is-back-what-s-getting-funded-now-the-vibes-immaculate-lightcone-podcast-ep-6",
    "youtube_url": "https://youtube.com/watch?v=e1Yhs9BEOSw",
    "mp3_file": "downloaded/Consumer_is_back,_What’s_getting_funded_now,_The_vibes_immaculate_[Lightcone_Podcast_Ep._6].mp3"
  },
  {
    "name_video": "When Should You Trust Your Gut?",
    "description_video": "When you’re making important decisions as a founder — like what to build, or how it should work — should you spend lots of time gathering input from others or just trust your gut? ",
    "related_categories": [],
    "page_url": "/library/Kw-when-should-you-trust-your-gut",
    "youtube_url": "https://youtube.com/watch?v=2ViqdR5E2wU",
    "mp3_file": "downloaded/When_Should_You_Trust_Your_Gut?.mp3"
  },
  {
    "name_video": "Inside The Hard Tech Startups Turning Sci-Fi Into Reality [Lightcone Podcast Ep. 5]",
    "description_video": "In this latest episode of Lightcone, Garry, Diana, Harj and Jared talk about a number of YC’s hard tech companies, how far they’ve come since Day 1, and some of the ways they got there faster.",
    "related_categories": [],
    "page_url": "/library/Kq-inside-the-hard-tech-startups-turning-sci-fi-into-reality-lightcone-podcast-ep-5",
    "youtube_url": "https://youtube.com/watch?v=erDE2e69dlc",
    "mp3_file": "downloaded/Inside_The_Hard_Tech_Startups_Turning_Sci-Fi_Into_Reality_[Lightcone_Podcast_Ep._5].mp3"
  },
  {
    "name_video": "How to Survive the Crypto Boom & Bust Cycle",
    "description_video": "In this latest episode of The Main Function, you’ll hear about how CoinTracker, the time it nearly fell apart, and how they used a crypto winter to retool and emerge stronger than ever.",
    "related_categories": [],
    "page_url": "/library/Km-how-to-survive-the-crypto-boom-bust-cycle",
    "youtube_url": "https://youtube.com/watch?v=8-Zrhz1QKGo",
    "mp3_file": "downloaded/How_to_Survive_the_Crypto_Boom_&_Bust_Cycle.mp3"
  },
  {
    "name_video": "Building AI Models Faster And Cheaper Than You Think  [Lightcone Podcast Ep. 4]",
    "description_video": "Garry, Diana, Harj, and Jared discuss the strategies to build a foundational AI model with examples of YC companies doing just that. We also get an exclusive look at OpenAI's Sora!",
    "related_categories": [],
    "page_url": "/library/Kl-building-ai-models-faster-and-cheaper-than-you-think-lightcone-podcast-ep-4",
    "youtube_url": "https://youtube.com/watch?v=fmI_OciHV_8",
    "mp3_file": "downloaded/Building_AI_Models_Faster_And_Cheaper_Than_You_Think__[Lightcone_Podcast_Ep._4].mp3"
  },
  {
    "name_video": "Why Founders Shouldn't Think Like Investors",
    "description_video": "It’s easy to analyze your way out of taking the first step. It’s something we see a lot, particularly when founders try to choose what to build based on what they think VCs will like.",
    "related_categories": [],
    "page_url": "/library/Kk-why-founders-shouldn-t-think-like-investors",
    "youtube_url": "https://youtube.com/watch?v=SMi3JO-hsyY",
    "mp3_file": "downloaded/Why_Founders_Shouldn't_Think_Like_Investors.mp3"
  },
  {
    "name_video": "Where Is The REAL Cerebral Valley? [Lightcone Podcast Ep. 3]",
    "description_video": "On this latest episode of the Lightcone Podcast, Garry, Diana, Harj and Jared talk about “Cerebral Valley” and why San Francisco has become THE place to build an AI company.",
    "related_categories": [],
    "page_url": "/library/Kj-where-is-the-real-cerebral-valley-lightcone-podcast-ep-3",
    "youtube_url": "https://youtube.com/watch?v=wA0qC9D4LA0",
    "mp3_file": "downloaded/Where_Is_The_REAL_Cerebral_Valley?_[Lightcone_Podcast_Ep._3].mp3"
  },
  {
    "name_video": "Day in the Life of Y Combinator President & CEO Garry Tan during the first week of the batch",
    "description_video": "Come behind the scenes of Y Combinator during the very first week of the W24 batch.",
    "related_categories": [],
    "page_url": "/library/Kh-day-in-the-life-of-y-combinator-president-ceo-garry-tan-during-the-first-week-of-the-batch",
    "youtube_url": "https://youtube.com/watch?v=GctjcD17iI4",
    "mp3_file": "downloaded/Day_in_the_Life_of_Y_Combinator_President_&_CEO_Garry_Tan_during_the_first_week_of_the_batch.mp3"
  },
  {
    "name_video": "Building Confidence In Yourself and Your Ideas",
    "description_video": "One trait that many of the best founders share is conviction. You can be great at programming, sales, and raising funds — but if you don’t truly believe in what you’re building, you’re probably not going to make it.",
    "related_categories": [],
    "page_url": "/library/Kg-building-confidence-in-yourself-and-your-ideas",
    "youtube_url": "https://youtube.com/watch?v=al-15mMAS18",
    "mp3_file": "downloaded/Building_Confidence_In_Yourself_and_Your_Ideas.mp3"
  },
  {
    "name_video": "The Secrets of Y Combinator’s Early Success (with YC Co-Founder Jessica Livingston)",
    "description_video": "Y Combinator has created over $600B of value, but in 2005 it was just an idea. In this video YC Co-Founder Jessica Livingston joins Garry Tan to tell us some about the earliest days of Y Combinator.",
    "related_categories": [],
    "page_url": "/library/Ke-the-secrets-of-y-combinator-s-early-success-with-yc-co-founder-jessica-livingston",
    "youtube_url": "https://youtube.com/watch?v=YV2YE0XvhOs",
    "mp3_file": "downloaded/The_Secrets_of_Y_Combinator’s_Early_Success_(with_YC_Co-Founder_Jessica_Livingston).mp3"
  },
  {
    "name_video": "Apple Vision Pro: Startup Platform Of The Future? [Lightcone Podcast Ep. 2]",
    "description_video": "In this episode of the Lightcone Podcast, YC Group Partners discuss the launch of the Apple Vision Pro and the potential of this new platform for startups.",
    "related_categories": [],
    "page_url": "/library/Kd-apple-vision-pro-startup-platform-of-the-future-lightcone-podcast-ep-2",
    "youtube_url": "https://youtube.com/watch?v=a_n4yOqlWbA",
    "mp3_file": "downloaded/Apple_Vision_Pro:_Startup_Platform_Of_The_Future?_[Lightcone_Podcast_Ep._2].mp3"
  },
  {
    "name_video": "Stop Innovating (On The Wrong Things)",
    "description_video": "In this episode of Dalton & Michael we’ll discuss the downsides of trying to “innovate” on certain things and why that can make it LESS likely a company succeeds.",
    "related_categories": [],
    "page_url": "/library/Kc-stop-innovating-on-the-wrong-things",
    "youtube_url": "https://youtube.com/watch?v=FNwu440UxhU",
    "mp3_file": "downloaded/Stop_Innovating_(On_The_Wrong_Things).mp3"
  },
  {
    "name_video": "The Truth About Building AI Startups Today [Lightcone Podcast Ep. 1]",
    "description_video": "In the first episode of the Lightcone Podcast, YC Group Partners dig into everything they have learned working with the top founders building AI startups today. ",
    "related_categories": [],
    "page_url": "/library/Kb-the-truth-about-building-ai-startups-today-lightcone-podcast-ep-1",
    "youtube_url": "https://youtube.com/watch?v=TwDJhUJL-5o",
    "mp3_file": "downloaded/The_Truth_About_Building_AI_Startups_Today_[Lightcone_Podcast_Ep._1].mp3"
  },
  {
    "name_video": "Should your startup bootstrap or raise venture capital?",
    "description_video": "In this episode of Dalton & Michael, we’ll explain why this particular debate is a much simpler one than many make it out to be.",
    "related_categories": [],
    "page_url": "/library/KZ-should-your-startup-bootstrap-or-raise-venture-capital",
    "youtube_url": "https://youtube.com/watch?v=D81y-kh11oI",
    "mp3_file": "downloaded/Should_your_startup_bootstrap_or_raise_venture_capital?.mp3"
  },
  {
    "name_video": "Backstory: Tom Blomfield",
    "description_video": "There aren’t a ton of people in the world who can say they founded a billion dollar company. There are far fewer that can say they did it twice.\n\nYC Group Partner Tom Blomfield is one of them — and this is his story.",
    "related_categories": [],
    "page_url": "/library/KY-backstory-tom-blomfield",
    "youtube_url": "https://youtube.com/watch?v=QKPgBAnbc10",
    "mp3_file": "downloaded/Backstory:_Tom_Blomfield.mp3"
  },
  {
    "name_video": "Do technical founders need a business co-founder?",
    "description_video": "Every software company needs a technical co-founder. But what kind of co-founder does the technical founder need?",
    "related_categories": [],
    "page_url": "/library/KV-do-technical-founders-need-a-business-co-founder",
    "youtube_url": "https://youtube.com/watch?v=43RhhwpiSk0",
    "mp3_file": "downloaded/Do_technical_founders_need_a_business_co-founder?.mp3"
  },
  {
    "name_video": "Consumer Startup Metrics",
    "description_video": "In this episode of Startup School, YC Group Partner Tom Blomfield dives deeper into the metrics that matter most for consumer startups.",
    "related_categories": [],
    "page_url": "/library/KT-consumer-startup-metrics",
    "youtube_url": "https://youtube.com/watch?v=fdD4y4Civp4",
    "mp3_file": "downloaded/Consumer_Startup_Metrics.mp3"
  },
  {
    "name_video": "The asymmetric upside of being positive",
    "description_video": "In this episode of Dalton and Michael, we’ll discuss the best ways for founders to think about weighing optimism and pessimism in their day-to-day lives.",
    "related_categories": [],
    "page_url": "/library/KS-the-asymmetric-upside-of-being-positive",
    "youtube_url": "https://youtube.com/watch?v=vhXdUXmmhb4",
    "mp3_file": "downloaded/The_asymmetric_upside_of_being_positive.mp3"
  },
  {
    "name_video": "Key Startup Metrics",
    "description_video": "YC Group Partner Tom Blomfield discusses one of the most important elements of running any startup: metrics! Tom shares what key metrics to track and how to use them to make the best decisions for your company.",
    "related_categories": [],
    "page_url": "/library/KR-key-startup-metrics",
    "youtube_url": "https://youtube.com/watch?v=_mKeVGSqQac",
    "mp3_file": "downloaded/Key_Startup_Metrics.mp3"
  },
  {
    "name_video": "Garry Tan speaks at Stanford's Entrepreneurial Thought Leaders (ETL) lecture series",
    "description_video": "YC President Garry Tan joins Stanford’s ETL lecture series to outline his journey through startup land and what he’s learned so far.",
    "related_categories": [],
    "page_url": "/library/KQ-garry-tan-speaks-at-stanford-s-entrepreneurial-thought-leaders-etl-lecture-series",
    "youtube_url": "https://youtube.com/watch?v=Y4yMc99fpfY",
    "mp3_file": "downloaded/Garry_Tan_speaks_at_Stanford's_Entrepreneurial_Thought_Leaders_(ETL)_lecture_series.mp3"
  },
  {
    "name_video": "Five DevTool Startups Get Their Websites Reviewed",
    "description_video": "DevTools are more popular than ever. But having a great product isn't enough — you have to be able to convince developers to try it out. One of the best ways to do that is with a well designed website. For this episode of Design Review, Aaron Epstein and David Siegel will break down what that means.",
    "related_categories": [],
    "page_url": "/library/KP-five-devtool-startups-get-their-websites-reviewed",
    "youtube_url": "https://youtube.com/watch?v=CYdsh1FhpI4",
    "mp3_file": "downloaded/Five_DevTool_Startups_Get_Their_Websites_Reviewed.mp3"
  },
  {
    "name_video": "Does your tech startup really need a technical co-founder? Yes.",
    "description_video": "Based on the thousands of companies YC has funded over the years, companies lacking a technical co-founder underperform. In this episode of Dalton + Michael, we’ll discuss exactly why that is.",
    "related_categories": [],
    "page_url": "/library/KO-does-your-tech-startup-really-need-a-technical-co-founder-yes",
    "youtube_url": "https://youtube.com/watch?v=ZpKu2wvquWg",
    "mp3_file": "downloaded/Does_your_tech_startup_really_need_a_technical_co-founder?_Yes..mp3"
  },
  {
    "name_video": "How To NOT Get Screwed Over As A Software Engineer",
    "description_video": "The stories are true: technical founders (and early technical employees!) often end up with the short end of the stick when starting a company. In this episode of Dalton & Michael, we'll discuss how to keep that from happening to you.",
    "related_categories": [],
    "page_url": "/library/KF-how-to-not-get-screwed-over-as-a-software-engineer",
    "youtube_url": "https://youtube.com/watch?v=fcfVjd_oV1I",
    "mp3_file": "downloaded/How_To_NOT_Get_Screwed_Over_As_A_Software_Engineer.mp3"
  },
  {
    "name_video": "How to convert more visitors into customers",
    "description_video": "Getting people to visit your startup’s website is just step one. Getting them to actually sign up, buy something, or even just care to learn more is a whole different challenge — and it’s one where good design is crucial.",
    "related_categories": [],
    "page_url": "/library/KD-how-to-convert-more-visitors-into-customers",
    "youtube_url": "https://youtube.com/watch?v=tJTxDqjO4vg",
    "mp3_file": "downloaded/How_to_convert_more_visitors_into_customers.mp3"
  },
  {
    "name_video": "Is it time to quit your job at a unicorn?",
    "description_video": "If you’re an employee of a late-stage company right now, how would you know when it’s time to move on? There isn't an easy answer — but in this episode, Dalton + Michael share suggestions on the good/bad signs to look for.",
    "related_categories": [],
    "page_url": "/library/KA-is-it-time-to-quit-your-job-at-a-unicorn",
    "youtube_url": "https://youtube.com/watch?v=chAoH_AeGAg",
    "mp3_file": "downloaded/Is_it_time_to_quit_your_job_at_a_unicorn?.mp3"
  },
  {
    "name_video": "Why YC? We asked 50 founders why they applied to Y Combinator",
    "description_video": "Why do founders apply to YC? For this episode of Founder FAQ, we asked them!",
    "related_categories": [
      "YC"
    ],
    "page_url": "/library/K7-why-yc-we-asked-50-founders-why-they-applied-to-y-combinator",
    "youtube_url": "https://youtube.com/watch?v=HQjjgi6271k",
    "mp3_file": "downloaded/Why_YC?_We_asked_50_founders_why_they_applied_to_Y_Combinator.mp3"
  },
  {
    "name_video": "How Athelas is revolutionizing healthcare",
    "description_video": "Garry sits down with Athelas co-founder Tanay Tandon to hear how they built a revolutionary healthcare company.",
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "/library/K6-how-athelas-is-revolutionizing-healthcare",
    "youtube_url": "https://youtube.com/watch?v=9iSZ12osxHM",
    "mp3_file": "downloaded/How_Athelas_is_revolutionizing_healthcare.mp3"
  },
  {
    "name_video": "YC’s Group Partners share productivity tips and advice on actually getting things done",
    "description_video": "For this episode of Office Hours, YC's Group Partners are talking about productivity — what works for the founders they help, and, perhaps more importantly, what doesn’t.",
    "related_categories": [],
    "page_url": "/library/K5-yc-s-group-partners-share-productivity-tips-and-advice-on-actually-getting-things-done",
    "youtube_url": "https://youtube.com/watch?v=nF_YWdz6S0Y",
    "mp3_file": "downloaded/YC’s_Group_Partners_share_productivity_tips_and_advice_on_actually_getting_things_done.mp3"
  },
  {
    "name_video": "Backstory: Surbhi Sarna",
    "description_video": "Surbhi is a Group Partner at YC, where she mentors a generation of healthcare founders. Leading up to that is one of the most intense startup stories we’ve ever heard — but it’s one best told by Surbhi herself. Listen to her tell it in this debut episode of 'Backstory'.",
    "related_categories": [],
    "page_url": "/library/K2-backstory-surbhi-sarna",
    "youtube_url": "https://youtube.com/watch?v=R2fAYn8R318",
    "mp3_file": "downloaded/Backstory:_Surbhi_Sarna.mp3"
  },
  {
    "name_video": "Different startup stages and what they mean for you",
    "description_video": "In this video from 2022, YC’s Ryan Choi breaks down the different funding stages that startups go through and what each stage might look like for potential hires in terms of product maturity, compensation, etc.",
    "related_categories": [
      "Working at a Startup"
    ],
    "page_url": "/library/K1-different-startup-stages-and-what-they-mean-for-you",
    "youtube_url": "https://youtube.com/watch?v=_7bnpjJB9T0",
    "mp3_file": "downloaded/Different_startup_stages_and_what_they_mean_for_you.mp3"
  },
  {
    "name_video": "Sam Altman on how to pick which startup to work at",
    "description_video": "In this talk from 2018, Sam Altman (then president of Y Combinator, now CEO of OpenAI) shares his thoughts on when to take risks in your career, how to best use your time, and some of the unintuitive things he’s learned along the way.",
    "related_categories": [
      "Working at a Startup"
    ],
    "page_url": "/library/K0-sam-altman-on-how-to-pick-which-startup-to-work-at",
    "youtube_url": "https://youtube.com/watch?v=vLQRdv6OmJU",
    "mp3_file": "downloaded/Sam_Altman_on_how_to_pick_which_startup_to_work_at.mp3"
  },
  {
    "name_video": "Founder FAQ: 40+ AI startup founders on the current state of AI tech",
    "description_video": "At a recent meetup for Y Combinator founders working in AI, we asked them about the current state of AI technology—the good, the challenges, and best practices.",
    "related_categories": [],
    "page_url": "/library/Jz-founder-faq-40-ai-startup-founders-on-the-current-state-of-ai-tech",
    "youtube_url": "https://youtube.com/watch?v=TNgjY5twBIg",
    "mp3_file": "downloaded/Founder_FAQ:_40+_AI_startup_founders_on_the_current_state_of_AI_tech.mp3"
  },
  {
    "name_video": "Dalton & Michael: Why You Shouldn't Copy Your Tech Idols",
    "description_video": "For this episode of Dalton + Michael, we dig into why some advice givers might be tempted to say “Do as I say, not as I DID.”",
    "related_categories": [],
    "page_url": "/library/Jw-dalton-michael-why-you-shouldn-t-copy-your-tech-idols",
    "youtube_url": "https://youtube.com/watch?v=09mXPGVkfVA",
    "mp3_file": "downloaded/Dalton_&_Michael:_Why_You_Shouldn't_Copy_Your_Tech_Idols.mp3"
  },
  {
    "name_video": "Building a better mobile app",
    "description_video": "There’s a lot to think about when designing mobile apps, where seemingly small details can have a big impact. Viewers have been asking for a mobile-focused episode of Design Review — and here it is!",
    "related_categories": [
      "Design"
    ],
    "page_url": "/library/Jv-building-a-better-mobile-app",
    "youtube_url": "https://youtube.com/watch?v=4N55fVuxxOg",
    "mp3_file": "downloaded/Building_a_better_mobile_app.mp3"
  },
  {
    "name_video": "Garry's Channel: An interview with Kai Stinchcombe, founder of True Link Financial",
    "description_video": "Today we’re sitting down with my friend and YC/Initialized founder Kai Stinchcombe - the founder and CEO of True Link Financial. ",
    "related_categories": [],
    "page_url": "/library/Ju-garry-s-channel-an-interview-with-kai-stinchcombe-founder-of-true-link-financial",
    "youtube_url": "https://youtube.com/watch?v=BRp0C4P8pEM",
    "mp3_file": "downloaded/Garry's_Channel:_An_interview_with_Kai_Stinchcombe,_founder_of_True_Link_Financial.mp3"
  },
  {
    "name_video": "Garry's Channel: Why now? The key to million dollar startup ideas",
    "description_video": "As you think about whether you want to work on or at a startup, I want you to ask what great investors ask themselves all the time: WHY NOW?",
    "related_categories": [],
    "page_url": "/library/Jt-garry-s-channel-why-now-the-key-to-million-dollar-startup-ideas",
    "youtube_url": "https://youtube.com/watch?v=LioyyxLgfXQ",
    "mp3_file": "downloaded/Garry's_Channel:_Why_now?_The_key_to_million_dollar_startup_ideas.mp3"
  },
  {
    "name_video": "Garry's Channel: 3 steps for billion dollar startups (How Airbnb & DoorDash succeeded)",
    "description_video": "What society imposes on us is the wrong kind of thinking: one that is based on analogy and credentialism instead of first principles thinking. \n\nBut how do we break free? Here are 3 ways to do it.",
    "related_categories": [],
    "page_url": "/library/Js-garry-s-channel-3-steps-for-billion-dollar-startups-how-airbnb-doordash-succeeded",
    "youtube_url": "https://youtube.com/watch?v=viNZK9P40kY",
    "mp3_file": "downloaded/Garry's_Channel:_3_steps_for_billion_dollar_startups_(How_Airbnb_&_DoorDash_succeeded).mp3"
  },
  {
    "name_video": "Garry's Channel: How To DESIGN EVERYTHING if you don't know ANYTHING",
    "description_video": "5 steps that let you start designing anything, anywhere, regardless of whether or not you've ever done it before. ",
    "related_categories": [],
    "page_url": "/library/Jr-garry-s-channel-how-to-design-everything-if-you-don-t-know-anything",
    "youtube_url": "https://youtube.com/watch?v=K3Ctc1UN0bQ",
    "mp3_file": "downloaded/Garry's_Channel:_How_To_DESIGN_EVERYTHING_if_you_don't_know_ANYTHING.mp3"
  },
  {
    "name_video": "Garry's Channel: Should you be the CEO?",
    "description_video": "We were pitching A16z, with Marc Andreessen and Ben Horowitz. They asked us who was CEO. We said both. It was the wrong answer.",
    "related_categories": [],
    "page_url": "/library/Jq-garry-s-channel-should-you-be-the-ceo",
    "youtube_url": "https://youtube.com/watch?v=Xa6zsbXGQ5M",
    "mp3_file": "downloaded/Garry's_Channel:_Should_you_be_the_CEO?.mp3"
  },
  {
    "name_video": "Garry's Channel: Figma's $20B, 10 year overnight success",
    "description_video": "In this video we’ll look at some of the moments that were the hardest for Figma co-founder Dylan Field and his team as they built this incredible business from nothing.",
    "related_categories": [],
    "page_url": "/library/Jp-garry-s-channel-figma-s-20b-10-year-overnight-success",
    "youtube_url": "https://youtube.com/watch?v=Rb3QHKjOWqQ",
    "mp3_file": "downloaded/Garry's_Channel:_Figma's_$20B,_10_year_overnight_success.mp3"
  },
  {
    "name_video": "Garry's Channel: Flexport CEO Ryan Petersen on scaling a startup from zero to $8B",
    "description_video": "Garry sits down with Ryan Petersen, CEO of Flexport.",
    "related_categories": [],
    "page_url": "/library/Jo-garry-s-channel-flexport-ceo-ryan-petersen-on-scaling-a-startup-from-zero-to-8b",
    "youtube_url": "https://youtube.com/watch?v=lm3lfZza1ro",
    "mp3_file": "downloaded/Garry's_Channel:_Flexport_CEO_Ryan_Petersen_on_scaling_a_startup_from_zero_to_$8B.mp3"
  },
  {
    "name_video": "Garry's Channel: Billion dollar startups are better, faster, or cheaper",
    "description_video": "Facebook wasn't the first social network. So maybe being first doesn't matter. But, being better, faster, or cheaper? That matters a lot.",
    "related_categories": [],
    "page_url": "/library/Jn-garry-s-channel-billion-dollar-startup-ideas",
    "youtube_url": "https://youtube.com/watch?v=opkHJLVAM4A",
    "mp3_file": "downloaded/Garry's_Channel:_Billion_dollar_startups_are_better,_faster,_or_cheaper.mp3"
  },
  {
    "name_video": "Garry's Channel: How REAL movements start, then change the world",
    "description_video": "The moment you realize the world can be influenced by your actions, everything changes. But how do you make a real dent in the world? You don't need fancy tools. Just do it yourself.",
    "related_categories": [],
    "page_url": "/library/Jm-garry-s-channel-how-real-movements-start-then-change-the-world",
    "youtube_url": "https://youtube.com/watch?v=JbHip4tjEcg",
    "mp3_file": "downloaded/Garry's_Channel:_How_REAL_movements_start,_then_change_the_world.mp3"
  },
  {
    "name_video": "Garry's Channel: 6 Skills for Successful Startup Founders",
    "description_video": "You can't guarantee success, but you can increase the chances of it by working on these six skills for startup founders. ",
    "related_categories": [],
    "page_url": "/library/Jl-garry-s-channel-6-skills-for-successful-startup-founders",
    "youtube_url": "https://youtube.com/watch?v=WK_XwjhJl3k",
    "mp3_file": "downloaded/Garry's_Channel:_6_Skills_for_Successful_Startup_Founders.mp3"
  },
  {
    "name_video": "Garry's Channel: Coinbase CEO Brian Armstrong on cryptocurrency and the future of decentralization",
    "description_video": "Brian Armstrong started Coinbase in 2012 when bitcoin was $2 and almost no one knew what it was, let alone believed in it. ",
    "related_categories": [],
    "page_url": "/library/Jk-garry-s-channel-coinbase-ceo-brian-armstrong-on-cryptocurrency-and-the-future-of-decentralization",
    "youtube_url": "https://youtube.com/watch?v=UpbGbKQsTjc",
    "mp3_file": "downloaded/Garry's_Channel:_Coinbase_CEO_Brian_Armstrong_on_cryptocurrency_and_the_future_of_decentralization.mp3"
  },
  {
    "name_video": "Garry's Channel: YOU can beat Google the way Amazon does. Here’s how.",
    "description_video": "",
    "related_categories": [],
    "page_url": "/library/Jj-garry-s-channel-you-can-beat-google-the-way-amazon-does-here-s-how",
    "youtube_url": "https://youtube.com/watch?v=9Fq15k9QPv8",
    "mp3_file": "downloaded/Garry's_Channel:_YOU_can_beat_Google_the_way_Amazon_does._Here’s_how..mp3"
  },
  {
    "name_video": "Garry's Channel: Billion dollar startup ideas",
    "description_video": "What makes you new, different, and unique in the world will often be the exact thing that makes you succeed. Embrace your differences, and you’ll find something amazing in there.",
    "related_categories": [],
    "page_url": "/library/Ji-garry-s-channel-billion-dollar-startup-ideas",
    "youtube_url": "https://youtube.com/watch?v=3YKNr-LiblI",
    "mp3_file": "downloaded/Garry's_Channel:_Billion_dollar_startup_ideas.mp3"
  },
  {
    "name_video": "Garry's Channel: My $200 million startup mistake",
    "description_video": "It wasn't even a risky decision. I still said no, and it cost me $200M. ",
    "related_categories": [],
    "page_url": "/library/Jh-garry-s-channel-my-200-million-startup-mistake",
    "youtube_url": "https://youtube.com/watch?v=dtnG0ELjvcM",
    "mp3_file": "downloaded/Garry's_Channel:_My_$200_million_startup_mistake.mp3"
  },
  {
    "name_video": "Garry's Channel: LEARN, EARN or QUIT | My job/career advice",
    "description_video": "If you're not learning AND earning... it's time to move on.",
    "related_categories": [],
    "page_url": "/library/Jg-garry-s-channel-learn-earn-or-quit-my-job-career-advice",
    "youtube_url": "https://youtube.com/watch?v=eLelgy5zRv4",
    "mp3_file": "downloaded/Garry's_Channel:_LEARN,_EARN_or_QUIT_|_My_job/career_advice.mp3"
  },
  {
    "name_video": "Garry's Channel: How I turned $300k into $2 billion",
    "description_video": "The story behind Garry's investment in Coinbase.",
    "related_categories": [],
    "page_url": "/library/Jf-garry-s-channel-how-i-turned-300k-into-2-billion",
    "youtube_url": "https://youtube.com/watch?v=x5YApjnTG10",
    "mp3_file": "downloaded/Garry's_Channel:_How_I_turned_$300k_into_$2_billion.mp3"
  },
  {
    "name_video": "Garry's Channel: Stop chasing money -- Chase wealth",
    "description_video": "You want to get rich — but what you really want is wealth. Garry digs into the difference in this video.",
    "related_categories": [],
    "page_url": "/library/Je-garry-s-channel-stop-chasing-money-chase-wealth",
    "youtube_url": "https://youtube.com/watch?v=7Hdu4DlnLIk",
    "mp3_file": "downloaded/Garry's_Channel:_Stop_chasing_money_--_Chase_wealth.mp3"
  },
  {
    "name_video": "Dalton & Michael: Why Investors (Secretly) Love Y Combinator",
    "description_video": "How do investors really feel about YC? In this episode, Michael and Dalton dig in!",
    "related_categories": [],
    "page_url": "/library/Jd-dalton-michael-why-investors-secretly-love-y-combinator",
    "youtube_url": "https://youtube.com/watch?v=bgp5QZwuNQI",
    "mp3_file": "downloaded/Dalton_&_Michael:_Why_Investors_(Secretly)_Love_Y_Combinator.mp3"
  },
  {
    "name_video": "YC's Group Partners share their worst investor meetings",
    "description_video": "For this latest episode of Office Hours, the Group Partners are sharing stories from their worst investor meetings. We’ll outline some of the weird plays we’ve seen investors try to pull — but we’ll also confess times that we, as founders, bungled meetings we could’ve nailed.",
    "related_categories": [],
    "page_url": "/library/JT-yc-s-group-partners-share-their-worst-investor-meetings",
    "youtube_url": "https://youtube.com/watch?v=ljVan7CGBiE",
    "mp3_file": "downloaded/YC's_Group_Partners_share_their_worst_investor_meetings.mp3"
  },
  {
    "name_video": "How to Start a Startup: Diversity and inclusion at early stage startups ",
    "description_video": "Kat Manalac, Managing Outreach Officer at YC, hosts a panel to discuss the importance of diversity and inclusion in the workforce for early stage companies.",
    "related_categories": [
      "People",
      "Diversity + Inclusion"
    ],
    "page_url": "/library/JS-how-to-start-a-startup-diversity-and-inclusion-at-early-stage-startups",
    "youtube_url": "https://youtube.com/watch?v=v8b_urti6iQ",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Diversity_and_inclusion_at_early_stage_startups_.mp3"
  },
  {
    "name_video": "How to Start a Startup: Startup mechanics",
    "description_video": "In this lecture, YC Managing Director Kirsty  Nathoo covers the basic issues that almost all startups face in their earliest days.",
    "related_categories": [],
    "page_url": "/library/JR-how-to-start-a-startup-startup-mechanics",
    "youtube_url": "https://youtube.com/watch?v=2_IpVq6vKR0",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Startup_mechanics.mp3"
  },
  {
    "name_video": "How to Start a Startup: Talking to users",
    "description_video": "Emmett Shear, YC Partner and Co-founder/former CEO of Twitch, on how to talk to users and the questions you should ask them.",
    "related_categories": [
      "Customers",
      "Talking to Users"
    ],
    "page_url": "/library/JQ-how-to-start-a-startup-talking-to-users",
    "youtube_url": "https://youtube.com/watch?v=qAws7eXItMk",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Talking_to_users.mp3"
  },
  {
    "name_video": "How to Start a Startup: Building company culture, Part II",
    "description_video": "Ben Silberman (Co-founder of Pinterest), John Collison and Patrick Collison (Co-founders of Stripe) take Q&A from Sam Altman in Part II of a talk on hiring and building company culture.",
    "related_categories": [
      "People",
      "Culture"
    ],
    "page_url": "/library/JO-how-to-start-a-startup-building-company-culture-part-ii",
    "youtube_url": "https://youtube.com/watch?v=H8Dl8rZ6qwE",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Building_company_culture,_Part_II.mp3"
  },
  {
    "name_video": "How to Start a Startup: Building company culture, Part I",
    "description_video": "Brian Chesky, Founder of Airbnb, and Alfred Lin, Former COO of Zappos and Partner at Sequoia Capital discuss how to build a great company culture.",
    "related_categories": [
      "People",
      "Culture"
    ],
    "page_url": "/library/JN-how-to-start-a-startup-building-company-culture-part-i",
    "youtube_url": "https://youtube.com/watch?v=RfWgVWGEuGE",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Building_company_culture,_Part_I.mp3"
  },
  {
    "name_video": "How to Start a Startup: Raising money and succeeding long-term",
    "description_video": "Jess Lee, Aaron Harris, and Ali Rowghani discuss how to raise money effectively and scale successfully.",
    "related_categories": [],
    "page_url": "/library/JM-how-to-start-a-startup-raising-money-and-succeeding-long-term",
    "youtube_url": "https://youtube.com/watch?v=5ZXU84_sGXo",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Raising_money_and_succeeding_long-term.mp3"
  },
  {
    "name_video": "How to Start a Startup: Getting started, getting press, and doing things that don't scale",
    "description_video": "A talk from Stanley Tang (Doordash), Walker Williams (Teespring), and Justin Kan (Twitch).",
    "related_categories": [
      "Growth",
      "Press",
      "Becoming a Founder"
    ],
    "page_url": "/library/JL-how-to-start-a-startup-getting-started-getting-press-and-doing-things-that-don-t-scale",
    "youtube_url": "https://youtube.com/watch?v=oQOC-qy-GDY",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Getting_started,_getting_press,_and_doing_things_that_don't_scale.mp3"
  },
  {
    "name_video": "How to Start a Startup: Building products users love",
    "description_video": "",
    "related_categories": [
      "Product",
      "Building Product"
    ],
    "page_url": "/library/JK-how-to-start-a-startup-building-products-users-love",
    "youtube_url": "https://youtube.com/watch?v=sz_LgBAGYyo",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Building_products_users_love.mp3"
  },
  {
    "name_video": "How to Start a Startup: Before the startup",
    "description_video": "",
    "related_categories": [
      "Becoming a Founder"
    ],
    "page_url": "/library/JI-how-to-start-a-startup-before-the-startup",
    "youtube_url": "https://youtube.com/watch?v=ii1jcLg-eIQ",
    "mp3_file": "downloaded/How_to_Start_a_Startup:_Before_the_startup.mp3"
  },
  {
    "name_video": "The Main Function: How to go from startup dream to reality",
    "description_video": "",
    "related_categories": [],
    "page_url": "/library/JG-the-main-function-how-to-go-from-startup-dream-to-reality",
    "youtube_url": "https://youtube.com/watch?v=jNJQTIUyT9Y",
    "mp3_file": "downloaded/The_Main_Function:_How_to_go_from_startup_dream_to_reality.mp3"
  },
  {
    "name_video": "The Immigrant Journey Behind A Silicon Valley Success Story",
    "description_video": "Y Combinator CEO Garry Tan sits down with one of the best founders of a generation, Tracy Young. She cofounded Plangrid which sold to Autodesk for $875M, and is back with her new startup called Tigereye. ",
    "related_categories": [],
    "page_url": "/library/JF-the-immigrant-journey-behind-a-silicon-valley-success-story",
    "youtube_url": "https://youtube.com/watch?v=PZqt2Y84gf0",
    "mp3_file": "downloaded/The_Immigrant_Journey_Behind_A_Silicon_Valley_Success_Story.mp3"
  },
  {
    "name_video": "Founder FAQ: How did you get your first customer?",
    "description_video": "We asked 50+ co-founders from the latest YC batch the same question: How’d you get your first customer?",
    "related_categories": [
      "Customers"
    ],
    "page_url": "/library/JE-founder-faq-how-did-you-get-your-first-customer",
    "youtube_url": "https://youtube.com/watch?v=NZp5j5hvn9I",
    "mp3_file": "downloaded/Founder_FAQ:_How_did_you_get_your_first_customer?.mp3"
  },
  {
    "name_video": "Founder FAQ: How did you meet your co-founder?",
    "description_video": "We asked 50+ founders from YC’s latest batch the same question: How did you meet your co-founder?",
    "related_categories": [
      "Co-Founders"
    ],
    "page_url": "/library/JD-founder-faq-how-did-you-meet-your-co-founder",
    "youtube_url": "https://youtube.com/watch?v=IyhLAbqDw0k",
    "mp3_file": "downloaded/Founder_FAQ:_How_did_you_meet_your_co-founder?.mp3"
  },
  {
    "name_video": "Jessica Livingston on how to build the future",
    "description_video": "Jessica is a cofounder of Y Combinator.",
    "related_categories": [
      "YC"
    ],
    "page_url": "/library/JB-jessica-livingston-on-how-to-build-the-future",
    "youtube_url": "https://youtube.com/watch?v=nFOC-cgIWaY",
    "mp3_file": "downloaded/Jessica_Livingston_on_how_to_build_the_future.mp3"
  },
  {
    "name_video": "YC Application Tips: Include a demo",
    "description_video": "YC’s Stephanie Simon on why you should include a demo — even a rough one! — when you apply to Y Combinator.",
    "related_categories": [
      "YC",
      "Applying to YC"
    ],
    "page_url": "/library/J8-yc-application-tips-include-a-demo",
    "youtube_url": "https://youtube.com/watch?v=cV-MwxhRTNI",
    "mp3_file": "downloaded/YC_Application_Tips:_Include_a_demo.mp3"
  },
  {
    "name_video": "Garry Tan's tips for applying to YC",
    "description_video": "Garry Tan shares his tips for applying to Y Combinator.",
    "related_categories": [
      "YC",
      "Applying to YC"
    ],
    "page_url": "/library/J7-garry-tan-s-tips-for-applying-to-yc",
    "youtube_url": "https://youtube.com/watch?v=4wbCVN1yLyA",
    "mp3_file": "downloaded/Garry_Tan's_tips_for_applying_to_YC.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: Advantages of a first-time founder",
    "description_video": "Step inside the Group Partner Lounge to hear Y Combinator Group Partners Harj Taggar, Michael Seibel and Brad Flora discuss the advantages of being a first-time founder and the instances when it pays to have experience founding a startup in the past.",
    "related_categories": [
      "Becoming a Founder"
    ],
    "page_url": "/library/J6-inside-the-group-partner-lounge-advantages-of-a-first-time-founder",
    "youtube_url": "https://youtube.com/watch?v=bp_kMA-eTsE",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_Advantages_of_a_first-time_founder.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: The ideal customer",
    "description_video": "Step inside the Group Partner Lounge to hear Y Combinator Group Partners Harj Taggar, Michael Seibel and Brad Flora discuss the pros and cons of startups selling software to other startups. Or is there a better approach out there?",
    "related_categories": [
      "B2B",
      "Customers"
    ],
    "page_url": "/library/J5-inside-the-group-partner-lounge-the-ideal-customer",
    "youtube_url": "https://youtube.com/watch?v=Hwfu1zNwSWI",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_The_ideal_customer.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: Top ways startups waste money",
    "description_video": "Step inside the Group Partner Lounge to hear Y Combinator Group Partners Harj Taggar, Michael Seibel and Brad Flora discuss what startups waste money on—from marketing and sales to legal and hiring.",
    "related_categories": [
      "Finance",
      "Cash Burn",
      "Growth Stage"
    ],
    "page_url": "/library/J4-inside-the-group-partner-lounge-top-ways-startups-waste-money",
    "youtube_url": "https://youtube.com/watch?v=BtzUo6vL3Iw",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_Top_ways_startups_waste_money.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: Turning users into paid customers",
    "description_video": "Step inside the Group Partner Lounge to hear Y Combinator Group Partners Harj Taggar, Michael Seibel and Brad Flora discuss when you should start charging your users and some exceptions when you shouldn't.",
    "related_categories": [
      "Customers",
      "Talking to Users",
      "Early Stage"
    ],
    "page_url": "/library/J3-inside-the-group-partner-lounge-turning-users-into-paid-customers",
    "youtube_url": "https://youtube.com/watch?v=9pQJXR0Tcos",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_Turning_users_into_paid_customers.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: Don't make these hiring mistakes",
    "description_video": "Step inside the Group Partner Lounge to hear Y Combinator Group Partners Harj Taggar, Michael Seibel and Brad Flora discuss the many different mistakes founders make when they approach hiring for their startup and how to grow your team the correct way.",
    "related_categories": [
      "People",
      "Hiring"
    ],
    "page_url": "/library/J2-inside-the-group-partner-lounge-don-t-make-these-hiring-mistakes",
    "youtube_url": "https://youtube.com/watch?v=CUZ6PKJZvXE",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_Don't_make_these_hiring_mistakes.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: Investors said no, now what?",
    "description_video": "Step inside the Group Partner Lounge to hear Y Combinator Group Partners Harj Taggar, Michael Seibel and Brad Flora discuss how you should handle rejection from investors and why you should \"believe the no, not the why.\"",
    "related_categories": [
      "Fundraising"
    ],
    "page_url": "/library/J1-inside-the-group-partner-lounge-investors-said-no-now-what",
    "youtube_url": "https://youtube.com/watch?v=euZH0tVotPQ",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_Investors_said_no,_now_what?.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: When to launch your startup",
    "description_video": "Step inside the group partners' lounge to hear Y Combinator Partners Harj Taggar, Michael Seibel and Brad Flora discuss how startups should approach launching and the exceptions to the rules.",
    "related_categories": [
      "Growth",
      "Launch"
    ],
    "page_url": "/library/J0-inside-the-group-partner-lounge-when-to-launch-your-startup",
    "youtube_url": "https://youtube.com/watch?v=f0tPjcgcwnQ",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_When_to_launch_your_startup.mp3"
  },
  {
    "name_video": "Inside the Group Partner Lounge: How to compete with Amazon and Google",
    "description_video": "Step inside the Group Partner Lounge to hear Y Combinator Group Partners Harj Taggar, Michael Seibel and Brad Flora discuss the traps founders often fall into when looking at the competition.",
    "related_categories": [
      "Founder Psychology",
      "Startup Ideas"
    ],
    "page_url": "/library/Iz-inside-the-group-partner-lounge-how-to-compete-with-amazon-and-google",
    "youtube_url": "https://youtube.com/watch?v=tzsmJtKZ2No",
    "mp3_file": "downloaded/Inside_the_Group_Partner_Lounge:_How_to_compete_with_Amazon_and_Google.mp3"
  },
  {
    "name_video": "YC's Group Partners share their favorite pivot stories",
    "description_video": "In this first episode of our new series, Office Hours, Y Combinator Group Partners share their favorite stories of entrepreneurs who pivoted and went on to build game-changing companies.",
    "related_categories": [
      "Pivoting"
    ],
    "page_url": "/library/Iy-yc-s-group-partners-share-their-favorite-pivot-stories",
    "youtube_url": "https://youtube.com/watch?v=DmehFuCMtvc",
    "mp3_file": "downloaded/YC's_Group_Partners_share_their_favorite_pivot_stories.mp3"
  },
  {
    "name_video": "Critiquing startup websites with Instacart's first designer, Zain Ali",
    "description_video": "In this first episode of Design Review, Y Combinator Group Partner, Aaron Epstein, is joined by Zain Ali, Instacart's first product designer and former Design Lead at Y Combinator. They review the websites of three Y Combinator funded companies from the most recent W22 batch.",
    "related_categories": [
      "Design"
    ],
    "page_url": "/library/Ix-critiquing-startup-websites-with-instacart-s-first-designer-zain-ali",
    "youtube_url": "https://youtube.com/watch?v=gok9BZLMxDs",
    "mp3_file": "downloaded/Critiquing_startup_websites_with_Instacart's_first_designer,_Zain_Ali.mp3"
  },
  {
    "name_video": "Critiquing startup websites with Webflow CEO Vlad Magdalin",
    "description_video": "In this episode of Design Review, Y Combinator Group Partner, Aaron Epstein, is joined by the CEO of Webflow, Vlad Magdalin. They review the websites of three Y Combinator funded companies—as well as one website from our Youtube audience!",
    "related_categories": [
      "Design"
    ],
    "page_url": "/library/Iw-critiquing-startup-websites-with-webflow-ceo-vlad-magdalin",
    "youtube_url": "https://youtube.com/watch?v=B2JpZPSHaVM",
    "mp3_file": "downloaded/Critiquing_startup_websites_with_Webflow_CEO_Vlad_Magdalin.mp3"
  },
  {
    "name_video": "Critiquing AI startup websites with YC President Garry Tan",
    "description_video": "For this episode of Design Review, Group Partner Aaron Epstein invited YC President and CEO Garry Tan to break down what’s working (and what’s not) on the websites of five different AI startups.",
    "related_categories": [
      "Design"
    ],
    "page_url": "/library/Iv-critiquing-ai-startup-websites-with-yc-president-garry-tan",
    "youtube_url": "https://youtube.com/watch?v=uIYujpFmvo8",
    "mp3_file": "downloaded/Critiquing_AI_startup_websites_with_YC_President_Garry_Tan.mp3"
  },
  {
    "name_video": "Setting KPIs and goals",
    "description_video": "YC Visiting Partner Divya Bhat talks about how to set your KPIs (key metrics) and how to prioritize your time.",
    "related_categories": [
      "Early Stage",
      "Founder Psychology",
      "Time Management",
      "Growth",
      "KPI"
    ],
    "page_url": "/library/Iu-setting-kpis-and-goals",
    "youtube_url": "https://youtube.com/watch?v=6DTK9yDP6p0",
    "mp3_file": "downloaded/Setting_KPIs_and_goals.mp3"
  },
  {
    "name_video": "How to apply and succeed at YC",
    "description_video": "YC Group Partner Dalton Caldwell shares his strategies for how to think about applying to YC.",
    "related_categories": [
      "YC",
      "Applying to YC"
    ],
    "page_url": "/library/It-how-to-apply-and-succeed-at-yc",
    "youtube_url": "https://youtube.com/watch?v=B5tU2447OK8",
    "mp3_file": "downloaded/How_to_apply_and_succeed_at_YC.mp3"
  },
  {
    "name_video": "Tips for technical startup founders",
    "description_video": "YC Group Partner Diana Hu was the CTO of her YC startup Escher Reality, which was acquired by Niantic (makers of Pokemon Go). She shares her advice for being a technical founder at the earliest stages.",
    "related_categories": [
      "Early Stage",
      "Product",
      "MVP",
      "Technical"
    ],
    "page_url": "/library/Is-tips-for-technical-startup-founders",
    "youtube_url": "https://youtube.com/watch?v=rP7bpYsfa6Q",
    "mp3_file": "downloaded/Tips_for_technical_startup_founders.mp3"
  },
  {
    "name_video": "The best way to launch your startup",
    "description_video": "Kat Mañalac is the head of YC's Outreach team and advises early stage founders on their launches during the YC batch. She shares the multitude of ways to launch a product and how to get attention for them.",
    "related_categories": [
      "Early Stage",
      "Growth",
      "Launch"
    ],
    "page_url": "/library/Ir-the-best-way-to-launch-your-startup",
    "youtube_url": "https://youtube.com/watch?v=u36A-YTxiOw",
    "mp3_file": "downloaded/The_best_way_to_launch_your_startup.mp3"
  },
  {
    "name_video": "How to talk to users",
    "description_video": "YC often says \"talk to your users\", but actually doing that is surprisingly tricky. YC Group Partner Gustaf Alströmer gives advice on how to talk to both current and potential users, how to run a great user interview, and how to interpret the feedback in these conversations.",
    "related_categories": [
      "Customers",
      "Talking to Users"
    ],
    "page_url": "/library/Iq-how-to-talk-to-users",
    "youtube_url": "https://youtube.com/watch?v=z1iF1c8w5Lg",
    "mp3_file": "downloaded/How_to_talk_to_users.mp3"
  },
  {
    "name_video": "How to get your first customers",
    "description_video": "YC Partner & Former Head of Growth at Airbnb, Gustaf Alströmer, gives tactical advice to answer the question: how do I get my first customers?",
    "related_categories": [
      "Early Stage"
    ],
    "page_url": "/library/Ip-how-to-get-your-first-customers",
    "youtube_url": "https://youtube.com/watch?v=hyYCn_kAngI",
    "mp3_file": "downloaded/How_to_get_your_first_customers.mp3"
  },
  {
    "name_video": "How to build an MVP",
    "description_video": "Y Combinator Group Partner, Michael Seibel, explains how to build a minimum viable product (MVP) for your startup idea.",
    "related_categories": [
      "Product",
      "MVP"
    ],
    "page_url": "/library/Io-how-to-build-an-mvp",
    "youtube_url": "https://youtube.com/watch?v=QRZ_l7cVzzU",
    "mp3_file": "downloaded/How_to_build_an_MVP.mp3"
  },
  {
    "name_video": "Keys To Successful Co-Founder Relationships",
    "description_video": "Catheryn Li built the YC co-founder matching platform. This discussion with YC Visiting Partner Divya Bhat covers the importance of having a co-founder, how to get and vet one, and how to build a successful working relationship with your co-founder.",
    "related_categories": [
      "Co-Founders"
    ],
    "page_url": "/library/Im-keys-to-successful-co-founder-relationships",
    "youtube_url": "https://youtube.com/watch?v=A4SLDQDXdp0",
    "mp3_file": "downloaded/Keys_To_Successful_Co-Founder_Relationships.mp3"
  },
  {
    "name_video": "How startup fundraising works",
    "description_video": "YC Group Partner Brad Flora has seen startup fundraising from every angle: as a founder, as one of the most prolific angel investors in Silicon Valley, and now as a YC Group Partner. Brad has coached hundreds of companies on fundraising. In this talk, he shares stories and advice on how modern startup fundraising works.",
    "related_categories": [
      "Investors"
    ],
    "page_url": "/library/Il-how-startup-fundraising-works",
    "youtube_url": "https://youtube.com/watch?v=zBUhQPPS9AY",
    "mp3_file": "downloaded/How_startup_fundraising_works.mp3"
  },
  {
    "name_video": "Dalton & Michael: How future billionaires get sh*t done",
    "description_video": "Dalton Caldwell and Michael Seibel take a look at Paul Graham's essay \"Maker's Schedule, Manager's Schedule\" and share tips on how to be more effective and productive on the journey to creating a billion dollar business.",
    "related_categories": [
      "Founder Psychology",
      "Time Management",
      "Motivation"
    ],
    "page_url": "/library/Ik-dalton-michael-how-future-billionaires-get-sh-t-done",
    "youtube_url": "https://youtube.com/watch?v=ephzgxgOjR0",
    "mp3_file": "downloaded/Dalton_&_Michael:_How_future_billionaires_get_sh*t_done.mp3"
  },
  {
    "name_video": "Tarpit ideas - what are tarpit ideas & how to avoid them",
    "description_video": "Thinking of a new startup idea? Dalton Caldwell and Michael Seibel discuss the types of ideas to stay away from—what we commonly refer to as \"tarpit ideas.\"",
    "related_categories": [
      "Startup Ideas"
    ],
    "page_url": "/library/Ij-tarpit-ideas-what-are-tarpit-ideas-how-to-avoid-them",
    "youtube_url": "https://youtube.com/watch?v=GMIawSAygO4",
    "mp3_file": "downloaded/Tarpit_ideas_-_what_are_tarpit_ideas_&_how_to_avoid_them.mp3"
  },
  {
    "name_video": "Dalton & Michael: Most important lifestyle habits of successful founders",
    "description_video": "Dalton Caldwell and Michael Seibel discuss the best approaches to developing a healthy lifestyle that ultimately helps you run and grow a successful startup.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology",
      "Mental Health"
    ],
    "page_url": "/library/Ii-dalton-michael-most-important-lifestyle-habits-of-successful-founders",
    "youtube_url": "https://youtube.com/watch?v=0IShllkCHtY",
    "mp3_file": "downloaded/Dalton_&_Michael:_Most_important_lifestyle_habits_of_successful_founders.mp3"
  },
  {
    "name_video": "Dalton & Michael: Why you should leave your FAANG job",
    "description_video": "Dalton Caldwell and Michael Seibel discuss the struggles of working at FAANG (Facebook, Apple, Amazon, Netflix, Google) and how to strategize leaving a big tech job to become a founder at a startup.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology"
    ],
    "page_url": "/library/Ih-dalton-michael-why-you-should-leave-your-faang-job",
    "youtube_url": "https://youtube.com/watch?v=sM2reZib2RY",
    "mp3_file": "downloaded/Dalton_&_Michael:_Why_you_should_leave_your_FAANG_job.mp3"
  },
  {
    "name_video": "Dalton & Michael: Things that don't scale, the software edition",
    "description_video": "Dalton Caldwell and Michael Seibel on software hacks that don't scale. Companies discussed include Google, Facebook, Twitch, and imeem.",
    "related_categories": [
      "Product",
      "Building Product",
      "Experimentation"
    ],
    "page_url": "/library/Ig-dalton-michael-things-that-don-t-scale-the-software-edition",
    "youtube_url": "https://youtube.com/watch?v=TCPjk8Tpb5c",
    "mp3_file": "downloaded/Dalton_&_Michael:_Things_that_don't_scale,_the_software_edition.mp3"
  },
  {
    "name_video": "Dalton & Michael: What does it really mean to do things that don't scale?",
    "description_video": "Dalton Caldwell and Michael Seibel talk about Paul Graham's essay \"Do Things That Don't Scale\" and what it really means for founders",
    "related_categories": [
      "Becoming a Founder",
      "Product",
      "Building Product",
      "Experimentation"
    ],
    "page_url": "/library/If-dalton-michael-what-does-it-really-mean-to-do-things-that-don-t-scale",
    "youtube_url": "https://youtube.com/watch?v=4RMjQal_c4U",
    "mp3_file": "downloaded/Dalton_&_Michael:_What_does_it_really_mean_to_do_things_that_don't_scale?.mp3"
  },
  {
    "name_video": "Dalton & Michael: Will OpenAI kill all startups?",
    "description_video": "Will AI usher in a new generation of startups or is this the beginning of the end?",
    "related_categories": [
      "Becoming a Founder"
    ],
    "page_url": "/library/Ie-dalton-michael-will-openai-kill-all-startups",
    "youtube_url": "https://youtube.com/watch?v=smHw9kEwcgM",
    "mp3_file": "downloaded/Dalton_&_Michael:_Will_OpenAI_kill_all_startups?.mp3"
  },
  {
    "name_video": "Dalton & Michael: Setting smarter goals",
    "description_video": "Michael Seibel and Dalton Caldwell provide tips and strategies for setting goals that will help keep you and your new business focused on success—plus provide examples of bad goals to avoid as a startup.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology",
      "Decision Making"
    ],
    "page_url": "/library/Id-dalton-michael-setting-smarter-goals",
    "youtube_url": "https://youtube.com/watch?v=rE2XaBGHN2I",
    "mp3_file": "downloaded/Dalton_&_Michael:_Setting_smarter_goals.mp3"
  },
  {
    "name_video": "Dalton & Michael: The two mindsets that can kill your startup",
    "description_video": "Dalton Caldwell and Michael Seibel discuss the qualities that make a founder overly optimistic or far too pessimistic about their startup. Where is the right middle ground?",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology",
      "Decision Making"
    ],
    "page_url": "/library/Ic-dalton-michael-the-two-mindsets-that-can-kill-your-startup",
    "youtube_url": "https://youtube.com/watch?v=lJausFj_Dto",
    "mp3_file": "downloaded/Dalton_&_Michael:_The_two_mindsets_that_can_kill_your_startup.mp3"
  },
  {
    "name_video": "Dalton & Michael: What basic game theory teaches us about startups",
    "description_video": "Is your startup making a positive impact on the world or are your business practices a net negative in society?",
    "related_categories": [
      "Business Models",
      "Becoming a Founder"
    ],
    "page_url": "/library/Ib-dalton-michael-what-basic-game-theory-teaches-us-about-startups",
    "youtube_url": "https://youtube.com/watch?v=gUuQsMERjUc",
    "mp3_file": "downloaded/Dalton_&_Michael:_What_basic_game_theory_teaches_us_about_startups.mp3"
  },
  {
    "name_video": "Dalton & Michael: How to earn customers for life",
    "description_video": "Michael Seibel and Dalton Caldwell reveal how startups can gain a competitive advantage by doing something deceptively simple.",
    "related_categories": [
      "Customers",
      "Talking to Users"
    ],
    "page_url": "/library/Ia-dalton-michael-how-to-earn-customers-for-life",
    "youtube_url": "https://youtube.com/watch?v=LJay5YW4fLA",
    "mp3_file": "downloaded/Dalton_&_Michael:_How_to_earn_customers_for_life.mp3"
  },
  {
    "name_video": "Dalton & Michael: The student's guide to becoming a successful startup founder",
    "description_video": "Dalton Caldwell and Michael Seibel, two startup founders who started in their early 20s and are now top investors, sit down to share the hard-won advice they wish they had known back in high school.",
    "related_categories": [
      "Becoming a Founder",
      "College Students"
    ],
    "page_url": "/library/IZ-dalton-michael-the-student-s-guide-to-becoming-a-successful-startup-founder",
    "youtube_url": "https://youtube.com/watch?v=O5KCB2p6SB8",
    "mp3_file": "downloaded/Dalton_&_Michael:_The_student's_guide_to_becoming_a_successful_startup_founder.mp3"
  },
  {
    "name_video": "Dalton & Michael: The cult of conformity in Silicon Valley",
    "description_video": "Dalton and Michael offer advice about navigating a world that doesn't always reward nonconformists embarking on risky entrepreneurial journeys. Don't just think different, act different.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology",
      "Motivation"
    ],
    "page_url": "/library/IY-dalton-michael-the-cult-of-conformity-in-silicon-valley",
    "youtube_url": "https://youtube.com/watch?v=ia7IKW0yuG0",
    "mp3_file": "downloaded/Dalton_&_Michael:_The_cult_of_conformity_in_Silicon_Valley.mp3"
  },
  {
    "name_video": "Dalton & Michael: How to deal with setbacks",
    "description_video": "Dalton Caldwell and Michael Seibel discuss the best approaches to managing the many setbacks startup founders can face over the lifetime of starting and running a business.",
    "related_categories": [
      "Becoming a Founder"
    ],
    "page_url": "/library/IX-dalton-michael-how-to-deal-with-setbacks",
    "youtube_url": "https://youtube.com/watch?v=AWa4qZvtMuY",
    "mp3_file": "downloaded/Dalton_&_Michael:_How_to_deal_with_setbacks.mp3"
  },
  {
    "name_video": "Dalton & Michael: Elon Musk and the Midwit meme",
    "description_video": "Dalton Caldwell and Michael Seibel on the midwit meme, how it applies to startups, and the best example: Elon Musk.",
    "related_categories": [],
    "page_url": "/library/IW-dalton-michael-elon-musk-and-the-midwit-meme",
    "youtube_url": "https://youtube.com/watch?v=IYLVhk7yaaw",
    "mp3_file": "downloaded/Dalton_&_Michael:_Elon_Musk_and_the_Midwit_meme.mp3"
  },
  {
    "name_video": "Dalton & Michael: The truth about Y Combinator",
    "description_video": "With the YC S22 batch coming to a close, Dalton Caldwell and Michael Seibel reflect on the recent batch and their experience fundraising. The two group partners also clear up some misconceptions about Y Combinator based on feedback from founders.",
    "related_categories": [
      "YC"
    ],
    "page_url": "/library/IU-dalton-michael-the-truth-about-y-combinator",
    "youtube_url": "https://youtube.com/watch?v=DOez-RwJ7mg",
    "mp3_file": "downloaded/Dalton_&_Michael:_The_truth_about_Y_Combinator.mp3"
  },
  {
    "name_video": "Dalton & Michael: Why investors can’t fix your company",
    "description_video": "Dalton Caldwell and Michael Seibel on common pitfalls in the advice from different types of investors and why you, the founder, are ultimately responsible for the success of your company.",
    "related_categories": [],
    "page_url": "/library/IT-dalton-michael-why-investors-can-t-fix-your-company",
    "youtube_url": "https://youtube.com/watch?v=UqKzpLqXuI0",
    "mp3_file": "downloaded/Dalton_&_Michael:_Why_investors_can’t_fix_your_company.mp3"
  },
  {
    "name_video": "Dalton & Michael: Y Combinator is back in person",
    "description_video": "Dalton Caldwell and Michael Seibel provide an update on the upcoming Summer 2022 batch along with the changes and trends they've noticed in the startup world today.",
    "related_categories": [
      "Becoming a Founder",
      "YC"
    ],
    "page_url": "/library/IS-dalton-michael-y-combinator-is-back-in-person",
    "youtube_url": "https://youtube.com/watch?v=GiuxXzmvolU",
    "mp3_file": "downloaded/Dalton_&_Michael:_Y_Combinator_is_back_in_person.mp3"
  },
  {
    "name_video": "Dalton & Michael: Silicon Valley's cargo culting problem",
    "description_video": "In this episode Dalton and Michael break down the problem with cargo culting and offer advice on the right way to draw inspiration from other successful companies.",
    "related_categories": [
      "Becoming a Founder"
    ],
    "page_url": "/library/IR-dalton-michael-silicon-valley-s-cargo-culting-problem",
    "youtube_url": "https://youtube.com/watch?v=ECLJ95XNxA4",
    "mp3_file": "downloaded/Dalton_&_Michael:_Silicon_Valley's_cargo_culting_problem.mp3"
  },
  {
    "name_video": "Dalton & Michael: The hard conversations founders don't want to have",
    "description_video": "In this video, Y Combinator partners Michael Seibel and Dalton Caldwell discuss the importance of having honest and difficult conversations.",
    "related_categories": [
      "Becoming a Founder",
      "Founder Psychology"
    ],
    "page_url": "/library/IQ-dalton-michael-the-hard-conversations-founders-don-t-want-to-have",
    "youtube_url": "https://youtube.com/watch?v=hUbM-bURoJE",
    "mp3_file": "downloaded/Dalton_&_Michael:_The_hard_conversations_founders_don't_want_to_have.mp3"
  },
  {
    "name_video": "Dalton & Michael: Secrets You Can Learn From Your Customers",
    "description_video": "YC partners Michael Seibel and Dalton Caldwell discuss how spending real time with your users can unlock insights and growth.",
    "related_categories": [
      "Becoming a Founder",
      "Customers",
      "Talking to Users"
    ],
    "page_url": "/library/IP-dalton-michael-secrets-you-can-learn-from-your-customers",
    "youtube_url": "https://youtube.com/watch?v=IdwYMfM2QMs",
    "mp3_file": "downloaded/Dalton_&_Michael:_Secrets_You_Can_Learn_From_Your_Customers.mp3"
  },
  {
    "name_video": "Dalton & Michael: How generosity built tech giants",
    "description_video": "The core secret to startup success isn't fundraising or growth hacking - it's solving your customer's biggest problems. But most founders are afraid to really understand those problems. What if that fear is holding your startup back?",
    "related_categories": [
      "Becoming a Founder",
      "Business Models"
    ],
    "page_url": "/library/IO-dalton-michael-how-generosity-built-tech-giants",
    "youtube_url": "https://youtube.com/watch?v=RD5EAMOh7fE",
    "mp3_file": "downloaded/Dalton_&_Michael:_How_generosity_built_tech_giants.mp3"
  },
  {
    "name_video": "Dalton & Michael: Does Your Startup Need To Be In San Francisco?",
    "description_video": "Should you and your startup live in San Francisco? Y Combinator Partners, Michael Seibel and Dalton Caldwell, debate their different opinions on whether startups are more likely to succeed in the Golden City or elsewhere. Where do they find common ground?",
    "related_categories": [],
    "page_url": "/library/IN-dalton-michael-does-your-startup-need-to-be-in-san-francisco",
    "youtube_url": "https://youtube.com/watch?v=ZqGOCF4O6ks",
    "mp3_file": "downloaded/Dalton_&_Michael:_Does_Your_Startup_Need_To_Be_In_San_Francisco?.mp3"
  },
  {
    "name_video": "YC guide to business models",
    "description_video": "Here are the nine most common business models we see in startups with primary metrics to focus on and key takeaways for each.",
    "related_categories": [
      "Business Models"
    ],
    "page_url": "/library/Gh-yc-guide-to-business-models",
    "youtube_url": "https://youtube.com/watch?v=oWZbWzAyHAE",
    "mp3_file": "downloaded/YC_guide_to_business_models.mp3"
  },
  {
    "name_video": "Should you start a startup?",
    "description_video": "YC Group Partner Harj Taggar shares his advice on the types of people best suited to be startup founders and how to prepare to start a company in the future.",
    "related_categories": [
      "startup school",
      "Becoming a Founder",
      "Founder Psychology",
      "Founder Stories"
    ],
    "page_url": "/library/GV-should-you-start-a-startup",
    "youtube_url": "https://youtube.com/watch?v=BUE-icVYRFU",
    "mp3_file": "downloaded/Should_you_start_a_startup?.mp3"
  }
]