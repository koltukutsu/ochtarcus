[
  {
    "name_blog": "YC's essential startup advice",
    "description_blog": "Here is what we, at YC, consider the most important, most transformative advice for startups.",
    "authors": [
      "Geoff Ralston",
      "Michael Seibel"
    ],
    "related_categories": [
      "Becoming a Founder",
      "Early Stage",
      "Customers",
      "Talking to Users",
      "Growth",
      "Product",
      "Product Market Fit",
      "Fundraising",
      "Business Models",
      "Unit Economics"
    ],
    "page_url": "https://www.ycombinator.com/library/4D-yc-s-essential-startup-advice",
    "content": {
      "table_of_contents": [
        "The Pocket Guide of Essential YC Advice",
        "References",
        "Recommended Reading",
        "Translations"
      ],
      "whole_content": "A lot of the advice we give startups is tactical; meant to be helpful on a day to day or week to week basis. But some\nadvice is more fundamental. We’ve collected here what we at YC consider the most important, most transformative advice\nfor startups. Whether common sense or counter-intuitive, the guidance below will help most startups find their path to\nsuccess.\nThe first thing we always tell founders is to launch their product right away; for the simple reason that this is the\nonly way to fully understand customers’ problems and whether the product meets their needs. Surprisingly, launching a\nmediocre product as soon as possible, and then talking to customers and iterating, is much better than waiting to build\nthe “perfect” product. This is true as long as the product contains a “quantum of utility” for customers whose value\noverwhelms problems any warts might present.\nOnce launched, we suggest founders do things that don’t scale (\nDo Things That Don’t\nScale\nby Paul Graham\n1\n). Many\nstartup advisors persuade startups to scale way too early. This will require the building of technology and processes to\nsupport that scaling, which, if premature, will be a waste of time and effort. This strategy often leads to failure and\neven startup death. Rather, we tell startups to get their first customer by any means necessary, even by manual work\nthat couldn’t be managed for more than ten, much less 100 or 1000 customers. At this stage, founders are still trying to\nfigure out what needs to be built and the best way to do that is talk directly to customers. For example, the Airbnb\nfounders originally offered to “professionally” photograph the homes and apartments of their earliest customers in order\nto make their listings more attractive to renters. Then, they went and took the photographs themselves. The listings on\ntheir site improved, conversions improved, and they had amazing conversations with their customers. This was entirely\nunscalable, yet proved essential in learning how to build a vibrant marketplace.\nTalking to users usually yields a long, complicated list of features to build. One piece of advice that YC partner Paul\nBuchheit (PB) always gives in this case is to look for the “90/10 solution”. That is, look for a way in which you can\naccomplish 90% of what you want with only 10% of the work/effort/time. If you search hard for it, there is almost always\na 90/10 solution available. Most importantly, a 90% solution to a real customer problem which is available right away,\nis much better than a 100% solution that takes ages to build.\nAs companies begin to grow there are often tons of potential distractions. Conferences, dinners, meeting with venture\ncapitalists or large company corporate development types (\nDon’t Talk to Corp\nDev\nby Paul Graham\n2\n),\nchasing after press coverage and so on. (YC co-founder Jessica Livingston created a pretty comprehensive list of the\nwrong things on which to focus [\nHow Not To Fail\nby Jessica Livingston\n3\n.]) We always remind founders not to lose sight that the most\nimportant tasks for an early stage company are to write code and talk to users. For any company, software or otherwise,\nthis means that in order to make something people want: you must launch something, talk to your users to see if it\nserves their needs, and then take their feedback and iterate. These tasks should occupy almost all of your time/focus.\nFor great companies this cycle never ends. Similarly, as your company evolves there will be many times where founders\nare forced to choose between multiple directions for their company. Sam Altman always points out that it is nearly\nalways better to take the more ambitious path. It is actually extraordinary how often founders manage to avoid tackling\nthese sorts of problems and focus on other things. Sam calls this “fake work”, because it tends to be more fun than real\nwork (\nThe Post YC Slump\nby Sam\nAltman\n4\n).\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nWhen it comes to customers most founders don’t realize that they get to choose customers as much as customers get to\nchoose them. We often say that a small group of customers who love you is better than a large group who kind of like\nyou. In other words, recruiting 10 customers who have a burning problem is much better than 1000 customers who have a\npassing annoyance. It is easy to make mistakes when choosing your customers so sometimes it’s also critical for startups\nto fire their customers\n5\n. Some customers can cost way more than\nthey provide in either revenue or learning. For example,\nJustin.tv/Twitch\nonly became a breakout success when they\nfocused their efforts toward video game broadcasters and away from people trying to stream copy written content (\nUsers\nYou Don’t Want\nby Michael\nSeibel\n5\n.)\nGrowth is always a focus for startups, since a startup without growth is usually a failure. However, how and when to\ngrow is often misunderstood. YC is sometimes criticised for pushing companies to grow at all costs, but in fact we push\ncompanies to talk to their users, build what they want, and iterate quickly. Growth is a natural result of doing these\nthree things successfully. Yet, growth is not always the right choice. If you have not yet made something your customers\nwant - in other words, have found product market fit, it makes little sense to grow (\nThe Real Product Market\nFit\nby Michael\nSeibel\n6\n). Poor retention is always the result. Also, if you have an\nunprofitable product, growth merely drains cash from the company. As PB likes to say, it never makes sense to take 80\ncents from a customer and then hand them a dollar back. The fact that unit economics really matter shouldn’t come as a\nsurprise, but too many startups seem to forget this basic fact (\nUnit\nEconomics\nby Sam\nAltman\n7\n).\nStartup founders’ intuition will always be to do more whereas usually the best strategy is almost always to do less,\nreally well. For example, founders are frequently tempted to chase big deals with large companies which represent\namazing, company validating relationships. However, deals between large companies and tiny startups seldom end well for\nthe startup. They take too long, cost too much, and often fail completely. One of the hardest things about doing a\nstartup is choosing what to do, since you will always have an infinite list of things that could be done (\nStartup\nPriorities\nby Geoff\nRalston\n8\n). It is vital that very early a startup choose the one or\ntwo key metrics it will use to measure success, then founders should choose what to do based nearly exclusively on how\nthe task will impact those metrics. When your early stage product isn’t working it's often tempting to immediately build\nnew features in order to solve every problem the customer seems to have instead of talking to the customer and focusing\nonly on the most acute problem they have.\nFounders often find it surprising to hear that they shouldn’t worry if their company seems badly broken. It turns out\nthat nearly every startup has deep, fundamental issues, even those that will end up being billion dollar companies.\nSuccess is not determined by whether you are broken at the beginning, but rather what the founders do about the\ninevitable problems. Your job as a founder will often seem to be continuously righting a capsized ship. This is normal.\nIt is very difficult as a new startup founder not to obsess about competition, actual and potential. It turns out that\nspending any time worrying about your competitors is nearly always a very bad idea. We like to say that startup\ncompanies always die of suicide not murder. There will come a time when competitive dynamics are intensely important to\nthe success or failure of your company, but it is highly unlikely to be true in the first year or two.\nA few words on fundraising (\nA Guide to Seed Fundraising\nby\nGeoff Ralston\n9\n). The first, best bit of advice is to raise money\nas quickly as possible and then get back to work. It is often easy to actually see when a company is fundraising by\nlooking at their growth curve and when it flattens out they are raising money. Equally important is to understand that\nvaluation is not equal to success or even probability of success (\nFundraising Rounds are not\nMilestones\nby Michael\nSeibel\n10\n). Some of Y Combinator’s very best companies raised on\ntiny initial valuations (Airbnb, Dropbox, Twitch, are all good examples). By the way, it is vital to remember that the\nmoney you raise IS NOT your money. You have a fiduciary and ethical/moral duty to spend the money only to improve the\nprospects of your company.\nIt is also important to stay sane during the inevitable craziness of startup life. So we always tell founders to make\nsure they take breaks, spend time with friends and family, get enough sleep and exercise in between bouts of\nextraordinarily intense, focused work. Lastly, a brief word on failure. It turns out most companies fail fast because\nfounders fall out. The relationships with your cofounders matter more than you think and open, honest communications\nbetween founders makes future debacles much less likely. In fact, it turns out that one of the best things you can do to\nmake your startup successful, in fact, to be successful in life, is to simply be nice (\nMean People\nFail\nby Paul Graham\n11\n.)\nThe Pocket Guide of Essential YC Advice\nLaunch now\nBuild something people want\nDo things that don't scale\nFind the 90 / 10 solution\nFind 10-100 customers who love your product\nAll startups are badly broken at some point\nWrite code - talk to users\n\"It’s not your money\"\nGrowth is the result of a great product not the precursor\nDon’t scale your team/product until you have built something people want\nValuation is not equal to success or even probability of success\nAvoid long negotiated deals with big customers if you can\nAvoid big company corporate development queries - they will only waste time\nAvoid conferences unless they are the best way to get customers\nPre-product market fit - do things that don’t scale: remain small/nimble\nStartups can only solve one problem well at any given time\nFounder relationships matter more than you think\nSometimes you need to fire your customers (they might be killing you)\nIgnore your competitors, you will more likely die of suicide than murder\nMost companies don't die because they run out of money\nBe nice! Or at least don’t be a jerk\nGet sleep and exercise - take care of yourself\nReferences\n1.\nDo Things That Don’t Scale\nby Paul Graham\n↩\n2.\nDon’t Talk to Corp Dev\nby Paul Graham\n↩\n3.\nHow Not To Fail\nby Jessica Livingston\n↩\n4.\nThe Post YC Slump\nby Sam Altman\n↩\n5.\nUsers You Don’t Want\nby Michael\nSeibel\n↩\n6.\nThe Real Product Market Fit\nby\nMichael Seibel\n↩\n7.\nUnit Economics\nby Sam Altman\n↩\n8.\nStartup Priorities\nby Geoff Ralston\n↩\n9.\nA Guide to Seed Fundraising\nby\nGeoff Ralston.\n↩\n10.\nFundraising Rounds are not\nMilestones\nby Michael Seibel\n↩\n11.\nMean People Fail\nby Paul Graham\n↩\nRecommended Reading\n1.\nA Fundraising Survival Guide\nby Paul Graham\n2.\nHow to Raise Money\nby Paul Graham\n3.\nTaking Advice\nby Aaron Harris\nTranslations\nJapanese"
    }
  },
  {
    "name_blog": "A guide to seed fundraising",
    "description_blog": "The most comprehensive guide on why, when, and how to raise money for your startup.",
    "authors": [
      "Geoff Ralston"
    ],
    "related_categories": [
      "Fundraising",
      "Seed Round",
      "Investors"
    ],
    "page_url": "https://www.ycombinator.com/library/4A-a-guide-to-seed-fundraising",
    "content": {
      "table_of_contents": [
        "A Brief Glossary of Key Terms",
        "Sources"
      ],
      "whole_content": "Introduction\nStartup companies need to purchase equipment, rent offices, and hire staff. More importantly, they need to grow. In\nalmost every case they will require outside capital to do these things.\nThe initial capital raised by a company is typically called “seed” capital. This brief guide is a summary of what\nstartup founders need to know about raising the seed funds critical to getting their company off the ground.\nThis is not intended to be a complete guide to fundraising. It includes only the basic knowledge most founders will\nneed. The information comes from my experiences working at startups, investing in startups, and advising startups at Y\nCombinator and Imagine K12. YC partners naturally gain a lot of fundraising experience and YC founder Paul Graham (PG)\nhas written extensively on the topic\n1\n,\n2\n,\n3\n,\n4\n. His essays cover in more detail much of\nwhat is contained in this guide and are highly recommended reading.\nWhy Raise Money?\nWithout startup funding the vast majority of startups will die. The amount of money needed to take a startup to\nprofitability is usually well beyond the ability of founders and their friends and family to finance. A startup here\nmeans a company that is built to grow fast\n12\n. High growth companies almost always need to burn capital to\nsustain their growth prior to achieving profitability. A few startup companies do successfully bootstrap (self-fund)\nthemselves, but they are the exception. Of course, there are lots of great companies that aren’t startups. Managing\ncapital needs for such companies is not covered herein.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nCash not only allows startups to live and grow, a war chest is also almost always a competitive advantage in all ways\nthat matter: hiring key staff, public relations, marketing, and sales. Thus, most startups will almost certainly want to\nraise money. The good news is that there are lots of investors hoping to give the right startup money. The bad news is,\n“Fundraising is brutal”\n1\n. The process of raising that money is often long, arduous, complex, and ego\ndeflating. Nevertheless, it is a path almost all companies and founders must walk, but when is the time right to raise?\nWhen to Raise Money\nInvestors write checks when the idea they hear is compelling, when they are persuaded that the team of founders can\nrealize its vision, and that the opportunity described is real and sufficiently large. When founders are ready to tell\nthis story, they can raise money. And usually when you can raise money, you should.\nFor some founders it is enough to have a story and a reputation. However, for most it will require an idea, a product,\nand some amount of customer adoption, a.k.a. traction. Luckily, the software development ecosystem today is such that a\nsophisticated web or mobile product can be built and delivered in a remarkably short period of time at very low cost.\nEven hardware can be rapidly prototyped and tested.\nBut investors also need persuading. Usually a product they can see, use, or touch will not be enough. They will want to\nknow that there is product market fit and that the product is experiencing actual growth.\nTherefore, founders should raise money when they have figured out what the market opportunity is and who the customer\nis, and when they have delivered a product that matches their needs and is being adopted at an interestingly rapid rate.\nHow rapid is interesting? This depends, but a rate of 10% per week for several weeks is impressive. And to raise money\nfounders need to impress. For founders who can convince investors without these things, congratulations. For everyone\nelse, work on your product and talk to your users.\nHow Much to Raise?\nIdeally, you should raise as much money as you need to reach profitability, so that you’ll never have to raise money\nagain. If you succeed in this, not only will you find it easier to raise money in the future, you’ll be able to survive\nwithout new funding if the funding environment gets tight. That said, certain kinds of startups will need a follow-on\nround, such as those building hardware. Their goal should be to raise as much money as needed to get to their next\n“fundable” milestone, which will usually be 12 to 18 months later.\nIn choosing how much to raise you are trading off several variables, including how much progress that amount of money\nwill purchase, credibility with investors, and dilution. If you can manage to give up as little as 10% of your company\nin your seed round, that is wonderful, but most rounds will require up to 20% dilution and you should try to avoid more\nthan 25%. In any event, the amount you are asking for must be tied to a believable plan. That plan will buy you the\ncredibility necessary to persuade investors that their money will have a chance to grow. It is usually a good idea to\ncreate multiple plans assuming different amounts raised and to carefully articulate your belief that the company will be\nsuccessful whether you raise the full or some lesser amount. The difference will be how fast you can grow.\nOne way to look at the optimal amount to raise in your first round is to decide how many months of operation you want to\nfund. A rule of thumb is that an engineer (the most common early employee for Silicon Valley startups) costs all-in\nabout $15k per month. So, if you would like to be funded for 18 months of operations with an average of five engineers,\nthen you will need about 15k x 5 x 18 = $1.35mm. What if you are planning to hire for other positions as well? Don’t\nworry about it! This is just an estimate and will be accurate enough for whatever mix you hire. And here you have a\ngreat answer to the question: “How much are you raising?” Simply answer that you are raising for N months\n(usually 12-18) and will thus need $X, where X will usually be between $500k and $1.5 million. As noted above, you\nshould give multiple versions of N and a range for X, giving different possible growth scenarios based on how much you\nsuccessfully raise.\nThere is enormous variation in the amount of money raised by companies. Here we are concerned with early raises, which\nusually range from a few hundreds of thousands of dollars up to two million dollars. Most first rounds seem to cluster\naround six hundred thousand dollars, but largely thanks to increased interest from investors in seed, these rounds have\nbeen increasing in size over the last several years.\nFinancing Options\nStartup founders must understand the basic concepts behind venture financing. It would be nice if this was all very\nsimple and could be explained in a single paragraph. Unfortunately, as with most legal matters, that’s not possible.\nHere is a very high level summary, but it is worth your time to read more about the details and pros and cons of various\ntypes of financing and, importantly, the key terms of such deals that you need to be aware of, from preferences to\noption pools. The articles below are a decent start.\nVenture Hacks / Babk Nivi: Should I Raise Debt or Equity\nFred Wilson: Financing Options\nMark Suster on Convertible\nDebt\nAnnouncing the Safe\nVenture financing usually takes place in “rounds,” which have traditionally had names and a specific order. First\ncomes a seed round, then a Series A, then a Series B, then a Series C, and so on to acquisition or IPO. None of\nthese rounds are required and, for example, sometimes companies will start with a Series A financing (almost always\nan “equity round” as defined below). Recall that we are focusing here exclusively on seed, that very first venture\nround.\nMost seed rounds, at least in Silicon Valley, are now structured as either convertible debt or simple agreements for\nfuture equity (safes)\n17\n. Some early rounds are still done with equity, but in Silicon Valley they are now\nthe exception.\nConvertible Debt\nConvertible debt is a loan an investor makes to a company using an instrument called a convertible note. That loan\nwill have a principal amount (the amount of the investment), an interest rate (usually a minimum rate of 2% or so),\nand a maturity date (when the principal and interest must be repaid). The intention of this note is that it converts\nto equity (thus, “convertible”) when the company does an equity financing. These notes will also usually have a\n“Cap” or “Target Valuation” and / or a discount. A Cap is the maximum effective valuation that the owner of the\nnote will pay, regardless of the valuation of the round in which the note converts. The effect of the cap is that\nconvertible note investors usually pay a lower price per share compared to other investors in the equity round.\nSimilarly, a discount defines a lower effective valuation via a percentage off the round valuation. Investors see\nthese as their seed “premium” and both of these terms are negotiable. Convertible debt may be called at maturity, at\nwhich time it must be repaid with earned interest, although investors are often willing to extend the maturity dates\non notes.\nSafe\nConvertible debt has been almost completely replaced by the safe at YC and Imagine K12. A safe acts like convertible\ndebt without the interest rate, maturity, and repayment requirement. The negotiable terms of a safe will almost\nalways be simply the amount, the cap, and the discount, if any. There is a bit more complexity to any convertible\nsecurity, and much of that is driven by what happens when conversion occurs. I strongly encourage you to read the\nsafe primer\n18\n, which is available on\nYC’s site\n. The primer has\nseveral examples of what happens when a safe converts, which go a long way toward explaining how both convertible\ndebt and safes work in practice.\nEquity\nAn equity round means setting a valuation for your company (generally, the cap on the safes or notes is considered\nas a company’s notional valuation, although notes and safes can also be uncapped) and thus a per-share price, and\nthen issuing and selling new shares of the company to investors. This is always more complicated, expensive, and\ntime consuming than a safe or convertible note and explains their popularity for early rounds. It is also why you\nwill always want to hire a lawyer when planning to issue equity.\nTo understand what happens when new equity is issued, a simple example helps. Say you raise $1,000,000 on a\n$5,000,000 pre-money valuation. If you also have 10,000,000 shares outstanding then you are selling the shares at:\n$5,000,000 / 10,000,000 = 50 cents per share\nand you will thus sell...\n2,000,000 shares\nresulting in a new share total of...\n10,000,000 + 2,000,000 = 12,000,000 shares\nand a post-money valuation of...\n$0.50 * 12,000,000 = $6,000,000\nand dilution of...\n2,000,000 / 12,000,000 = 16.7%\nNot 20%!\nThere are several important components of an equity round with which you must become familiar when your company does\na priced round, including equity incentive plans (option pools), liquidation preferences, anti-dilution rights,\nprotective provisions, and more. These components are all negotiable, but it is usually the case that if you have\nagreed upon a valuation with your investors (next section), then you are not too far apart, and there is a deal to\nbe done. I won’t say more about equity rounds, since they are so uncommon for seed rounds.\nOne final note: whatever form of financing you do, it is always best to use well-known financing documents like YC's\nsafe. These documents are well understood by the investor community, and have been drafted to be fair, yet founder\nfriendly.\nValuation: What is my company worth?\nYou are two hackers with an idea, a few months of hacking’s worth of software, and several thousand users. What is\nyour company worth? It should be obvious that no formula will give you an answer. There can only be the most\nnotional sort of justification for any value at all. So, how do you set a value when talking to a potential\ninvestor? Why do some companies seem to be worth $20mm and some $4mm? Because investors were convinced that was what\nthey were (or will be in the near future) worth. It is that simple. Therefore, it is best to let the market set your\nprice and to find an investor to set the price or cap. The more investor interest your company generates, the higher\nyour value will trend.\nStill, it can be difficult in some circumstances to find an investor to tell you what you are worth. In this case\nyou can choose a valuation, usually by looking at comparable companies who have valuations. Please remember that the\nimportant thing in choosing your valuation is not to over-optimize. The objective is to find a valuation with which\nyou are comfortable, that will allow you to raise the amount you need to achieve your goals with acceptable\ndilution, and that investors will find reasonable and attractive enough to write you a check. Seed valuations tend\nto range from $2mm-$10mm, but keep in mind that the goal is not to achieve the best valuation, nor does a high\nvaluation increase your likelihood of success.\nInvestors: Angels & Venture Capitalists\nThe difference between an angel and a VC is that angels are amateurs and VCs are pros. VCs invest other people’s\nmoney and angels invest their own on their own terms. Although some angels are quite rigorous and act very much like\nthe pros, for the most part they are much more like hobbyists. Their decision making process is usually much\nfaster--they can make the call all on their own--and there is almost always a much larger component of emotion that\ngoes into that decision.\nVCs will usually require more time, more meetings, and will have multiple partners involved in the final decision.\nAnd remember, VCs see LOTS of deals and invest in very few, so you will have to stand out from a crowd.\nThe ecosystem for seed (early) financing is far more complex now than it was even five years ago. There are many new\nVC firms, sometimes called “super-angels,” or “micro-VC’s”, which explicitly target brand new, very early stage\ncompanies. There are also several traditional VCs that will invest in seed rounds. And there are a large number of\nindependent angels who will invest anywhere from $25k to $100k or more in individual companies. New fundraising\noptions have also arisen. For example,\nAngelList Syndicates\nlets angels pool their\nresources and follow a single lead angel.\nFundersClub\ninvests selectively\nlike a traditional VC, but lets angels become LPs in their VC funds to expand connections available to its founders.\nHow does one meet and encourage the interest of investors? If you are about to present at a demo day, you are going\nto meet lots of investors. There are few such opportunities to meet a concentrated and motivated group of seed\ninvestors. Besides a demo day, by far the best way to meet a venture capitalist or an angel is via a warm\nintroduction. Angels will also often introduce interesting companies to their own networks. Otherwise, find someone\nin your network to make an introduction to an angel or VC. If you have no other options, do research on VCs and\nangels and send as many as you can a\nbrief\n, but compelling summary of your business and opportunity (see\nDocuments You Need\nbelow).\nCrowdfunding\nThere are a growing number of new vehicles to raise money, such as\nAngelList\n,\nKickstarter\n,\nand\nWefunder\n. These crowdfunding sites can be used to launch a product, run a pre-sales campaign, or find\nventure funding. In exceptional cases, founders have used these sites as their dominant fundraising source, or as\nclear evidence of demand. They usually are used to fill in rounds that are largely complete or, at times, to\nreanimate a round that is having difficulty getting off the ground. The ecosystem around investing is changing\nrapidly, but when and how to use these new sources of funds will usually be determined by your success raising\nthrough more traditional means.\nMeeting Investors\nIf you are meeting investors at an investor day, remember that your goal is not to close--it is to get the next\nmeeting. Investors will seldom choose to commit the first day they hear your pitch, regardless of how brilliant it\nis. So book lots of meetings. Keep in mind that the hardest part is to get the first money in the company. In other\nwords, meet as many investors as possible but focus on those most likely to close. Always optimize for getting money\nsoonest (in other words, be greedy)\n2\n.\nThere are a few simple rules to follow when preparing to meet with investors. First, make sure you know your\naudience--do research on what they like to invest in and try to figure out why. Second, simplify your pitch to the\nessential--why this is a great product (demos are almost a requirement nowadays), why you are precisely the right\nteam to build it, and why together you should all dream about creating the next gigantic company. Next make sure you\nlisten carefully to what the investor has to say. If you can get the investor to talk more than you, your\nprobability of a deal skyrockets. In the same vein, do what you can to connect with the investor. This is one of the\nmain reasons to do research. An investment in a company is a long term commitment and most investors see lots of\ndeals. Unless they like you and feel connected to your outcome, they will most certainly not write a check.\nWho you are and how well you tell your story are most important when trying to convince investors to write that\ncheck. Investors are looking for compelling founders who have a believable dream and as much evidence as possible\ndocumenting the reality of that dream. Find a style that works for you, and then work as hard as necessary to get\nthe pitch perfect. Pitching is difficult and often unnatural for founders, especially technical founders who are\nmore comfortable in front of a screen than a crowd. But anyone will improve with practice, and there is no\nsubstitute for an extraordinary amount of practice. Incidentally, this is true whether you are preparing for a demo\nday or an investor meeting.\nDuring your meeting, try to strike a balance between confidence and humility. Never cross over into arrogance, avoid\ndefensiveness, but also don’t be a pushover. Be open to intelligent counterpoints, but stand up for what you believe\nand whether or not you persuade the investor just then, you’ll have made a good impression and will probably get\nanother shot.\nLastly, make sure you don’t leave an investor meeting without an attempted close or at very minimum absolute clarity\non next steps. Do not just walk out leaving things ambiguous.\nNegotiating and Closing the Deal\nA seed investment can usually be closed rapidly. As noted above, it is an advantage to use standard documents with\nconsistent terms, such as YC’s safe. Negotiation, and often there is none at all, can then proceed on one or two\nvariables, such as the valuation/cap and possibly a discount.\nDeals have momentum and there is no recipe towards building momentum behind your deal other than by telling a great\nstory, persistence, and legwork. You may have to meet with dozens of investors before you get that close. But to get\nstarted you just need to convince\n5\none of them. Once the first money is in, each subsequent close will get\nfaster and easier\n6\n.\nOnce an investor says that they are in, you are almost done. This is where you should rapidly close using a\nhandshake protocol\n19\n. If you fail at negotiating from this point on, it is probably your fault.\nNegotiations\nWhen you enter into a negotiation with a VC or an angel, remember that they are usually more experienced at it than\nyou are, so it is almost always better not to try to negotiate in real-time. Take requests away with you, and get\nhelp from YC or Imagine K12 partners, advisors, or legal counsel. But also remember that although certain requested\nterms can be egregious, the majority of things credible VCs and angels will ask for tend to be reasonable. Do not\nhesitate to ask them to explain precisely what they are asking for and why. If the negotiation is around valuation\n(or cap) there are, naturally, plenty of considerations, e.g. other deals you have already closed. However, it is\nimportant to remember that the valuation you choose at this early round will seldom matter to the success or failure\nof the company. Get the best deal you can get--but get the deal! Finally, once you get to yes, don’t wait around.\nGet the investor’s signature and cash as soon as possible. One reason safes are popular is because the closing\nmechanics are as simple as signing a document and then transferring funds. Once an investor has decided to invest,\nit should take no longer than a few minutes to exchange signed documents online (for example via\nClerky\nor\nIronclad\n) and execute a wire or send a check.\nDocuments You Need\nDo not spend too much time developing diligence documents for a seed round. If an investor is asking for too much\ndue diligence or financials, they are almost certainly someone to avoid. You will probably want an executive summary\nand a slide deck you can walk investors through and, potentially, leave behind so VCs can show to other partners.\nThe executive summary should be one or two pages (one is better) and should include vision, product, team (location,\ncontact info), traction, market size, and minimum financials (revenue, if any, and fundraising prior and current).\nGenerally make sure the slide deck is a coherent leave-behind. Graphics, charts, screenshots are more powerful than\nlots of words. Consider it a framework around which you will hang a more detailed version of your story. There is no\nfixed format or order, but the following parts are usually present. Create the pitch that matches you, how you\npresent, and how you want to represent your company. Also note that like the executive summary, there are lots of\nsimilar templates online if you don’t like this one.\n1.\nYour company / Logo / Tag Line\n2.\nYour Vision\n- Your most expansive take on why your new company exists.\n3.\nThe Problem\n- What are you solving for the customer--where is their pain?\n4.\nThe Customer\n- Who are they and perhaps how will you reach them?\n5.\nThe Solution\n- What you have created and why now is the right time.\n6.\nThe (huge) Market you are addressing\n- Total Available Market (TAM) >$1B if possible. Include the most\npersuasive evidence you have that this is real.\n7.\nMarket Landscape\n- including competition, macro trends, etc. Is there any insight you have that others do not?\n8.\nCurrent Traction\n- list key stats / plans for scaling and future customer acquisition.\n9.\nBusiness model\n- how users translate to revenue. Actuals, plans, hopes.\n10.\nTeam\n- who you are, where you come from and why you have what it takes to succeed. Pics and bios okay. Specify\nroles.\n11.\nSummary\n- 3-5 key takeaways (market size, key product insight, traction)\n12.\nFundraising\n- Include what you have already raised and what you are planning to raise now. Any financial\nprojections may go here as well. You can optionally include a summary product roadmap (6 quarters max) indicating what\nan investment buys.\nNext\nIt is worth pointing out that startup investing is rapidly evolving and it is likely that certain elements of this guide\nwill at some point become obsolete, so make sure to check for updates or future posts. There is now an extraordinary\namount of information available on raising venture money. Several sources are referenced and more are listed at the end\nof this document.\nFundraising is a necessary, and sometimes painful task most startups must periodically endure. A founder’s goal should\nalways be to raise as quickly as possible and this guide will hopefully help founders successfully raise their first\nround of venture financing. Often that will seem like a nearly impossible task and when it is complete, it will feel as\nthough you have climbed a very steep mountain. But you have been distracted by the brutality of fundraising and once you\nturn your attention back to the future you will realize it was only a small foothill on the real climb in front of you.\nIt is time to get back to work building your company.\nMany thanks to those whose knowledge or work have contributed to this document. Of course, any errors are all mine.\nPlease send any comments or questions to\n(redacted)\n.\nAppendix\nFundraising Rules to Follow\nGet fundraising over as soon as possible, and get back to building your product and company, but also…\nDon’t stop raising money too soon. If fundraising is difficult, keep fighting and stay alive.\nWhen raising, be “greedy”: breadth-first search weighted by expected value\n2\n. This means talk to as many people as\nyou can, prioritizing the ones that are likely to close.\nOnce someone says yes, don’t delay. Get docs signed and the money in the bank as soon as possible.\nAlways hustle for leads. If you are the hottest deal of the hour, that’s great, but everyone else needs to work like\ncrazy to get angels and other venture investors interested.\nNever screw anyone over. Hold yourself and others on your team to the highest ethical standards. The Valley is a\nvery small place, and a bad reputation is difficult to repair. Play it straight and you will never regret it. You’ll\nfeel better for it, too.\nInvestors have a lot of different ways to say no. The hardest thing for an entrepreneur is understanding when they\nare being turned down and being okay with it. PG likes to say, “If the soda is empty, stop making that awful sucking\nsound with the straw.” But remember that they might be a “yes” another time, so part on the best possible terms.\nDevelop a style that fits you and your company.\nStay organized. Co-founders should split tasks where possible. If necessary, use software like Asana to keep track\nof deals.\nHave a thick skin but strike the right balance between confidence and humility. And never be arrogant.\nWhat Not to Do While Communicating with Investors\nDON'T:\nBe dishonest in any way\nBe arrogant or unfriendly\nBe overly aggressive\nSeem indecisive - although it is okay to say you don’t know yet.\nTalk so much they cannot get a word in edgewise\nBe slow to follow-up or close a deal\nBreak an agreement, verbal or written\nCreate detailed financials\nUse ridiculous / silly market size numbers without clear justification\nClaim you know something that you don’t or be afraid to say you don’t know\nSpend time on the obvious\nGet caught up in unimportant minutiae - don’t let the meeting get away from you\nAsk for an NDA\nTry to play investors off each other when you are not a fundraising ninja\nTry to negotiate in real-time\nOver-optimize your valuation or worry too much about dilution\nTake a “No” personally\nA Brief Glossary of Key Terms\nThe term you are looking for is not here? Disagree with the definition? Go to\nInvestopedia\nfor a more authoritative source.\nAngel Investor\n- A (usually) wealthy private investor in startup companies.\nCap / Target Valuation\n- The maximum effective valuation for an investor in a convertible note.\nConvertible Note\n- This is a debt instrument that will convert into stock; usually preferred stock but sometimes\ncommon stock.\nCommon Stock\n- Capital stock typically issued to founders and employees, having the fewest, or no, rights,\nprivileges and preferences.\nDilution\n- The percentage an ownership share is decreased via the issuance of new shares.\nDiscount\n- A percentage discount from the pre-money valuation to give safe or note holders an effectively\nlower price.\nEquity Round\n- A financing round in which the investor purchases equity (stock) in the company.\nFully Diluted Shares\n- The total number of issued and outstanding shares of capital stock in the company,\nincluding outstanding warrants, option grants and other convertible securities.\nIPO\n- Initial Public Offering - the first sale of stock by a private company to the public.\nLead Investor\n- Usually the first and largest investor in a round who brings others into the round.\nLiquidation Preference\n- A legal provision in a company’s charter that allows stockholders with preferred stock\nto get their money out of a company before the holders of common stock in the event of an exit.\nMaturity Date\n- The date at which a promissory note becomes due (or at which it will automatically convert to\nstock in the case of a convertible note)\nEquity Incentive Plan / Option Pool\n- The shares allocated and set aside for grants to employees\nand consultants.\nPreferred Stock\n- Capital stock issued in a company that have specific rights, privileges and preferences\ncompared to the common stock. Convertible into common stock, either automatically (e.g., in an IPO) or at the option\nof the preferred stockholder (e.g., an acquisition).\nPre-money Valuation\n- The value of a company prior to when investor money is added.\nPro-rata rights (aka pre-emptive rights)\n- Contractual rights that allow the holder to maintain their percentage\nownership in subsequent financing rounds.\nProtective Provisions\n- Provisions in a company’s charter that give exclusive voting rights to holders of\npreferred stock. For example, the approval of these stockholders, voting separately from other stockholders, may be\nrequired for an acquisition.\nSafe\n- Simple Agreement for Future Equity - Y Combinator’s replacement for convertible debt.\nTAM\n- Total Available Market. In pitches, this is the estimated total revenue available for the product(s) you\nare selling.\nVenture Capitalist\n- A professional investor in companies, investing limited partners’ funds.\nSources\nA Fundraising Survival Guide\n,\nPaul Graham\nTechniques for surviving and succeeding at fundraising\nHow To Raise Money\n,\nPaul Graham\nDetailed thoughts on fundraising. A must read.\nThe Equity Equation\n,\nPaul Graham\nHow to decide if you should accept an offer from an investor\nThe Future of Startup Funding\n,\nPaul Graham\nHow startup funding is evolving\nHow to Convince Investors\n,\nPaul Graham\nHow to convince investors to invest in you\nInvestor Herd Dynamics\n,\nPaul Graham\nHow investors think about investing in early stage companies\n“Venture Deals”\n,\nFeld and\nMendelson\nEssential elements of a venture deal (book)\nRaising Money for a\nStartup\n,\nSal Khan\nStartup Fundraising from Sal Khan\nVenture Hacks: Debt or Equity,\nBabak Nivi\nDiscussion on debt vs. equity\nVenture Hacks: First Time\n,\nBabak Nivi\nAdvice for first time fundraisers.\nHow Much Money To Raise\n,\nFred Wilson\nAdvice on how much money to raise.\n“Startup = Growth”\n,\nPaul Graham\nDescription of a startup.\nVenture Hacks / Babk Nivi: Should I Raise Debt or Equity\nDiscussion of whether raising debt or equity is the best answer.\nFred Wilson: Financing Options\nAnother discussion of debt vs. equity\nMark Suster on Convertible\nDebt\nAn analysis of problems with convertible debt\nClerky Guide\nClerky docs and guides. A great place to start.\nAnnouncing the Safe\n,\nPaul\nGraham\nThe simple agreement for future equity. A replacement for convertible notes.\nThe Safe Primer\n,\nCarolynn Levy\nLots of detailed information on the safe and examples as to how it works in various cases.\nThe Handshake Deal Protocol\n,\nPaul Graham\nA standard protocol to help ensure that verbal commitments turn into transactions."
    }
  },
  {
    "name_blog": "How to build your seed round pitch deck",
    "description_blog": "Y Combinator has helped thousands of founders create pitch decks for their seed round fundraising. Here is the YC seed deck template that works.",
    "authors": [
      "Aaron Harris"
    ],
    "related_categories": [
      "Fundraising",
      "Pitch Deck",
      "Seed Round"
    ],
    "page_url": "https://www.ycombinator.com/library/2u-how-to-build-your-seed-round-pitch-deck",
    "content": {
      "table_of_contents": [],
      "whole_content": "Demo Day for our Winter 2018 batch is a week from today. We’re largely focused on preparing companies for their on-stage\npresentations, but are also working with them on slightly longer decks to use in follow-up conversations with investors.\nI’ve written about pitching before\n, and realized that what we were\nmissing was a clear template for how founders should lay out their stories through slides. The deck below is a template\nfor how I think companies should build seed decks. While the main target for this template is a company raising its seed\nround, the deck is not all that different from best practices for a Series A deck - which we’ll release next.\nThe key point to remember here is that founders should strive for clarity and concision. This is not the right place to\nwrite a treatise on your market or world philosophy. The simple truth is that there isn’t very much meaningful detail to\nexplore for most seed stage companies. When founders pretend that there is, their stories get muddled, and the investors\nget lost.\nFocus on narrative. The rest is commentary. (see footnote)\nThis is the title page. It has the name of your company, and a one line description of what you do.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThis is the only place in the deck where you can only have 1 slide for what you need to show. Any of the other slides in\nthis deck should be treated as a first slide of a set. If you can keep the set to n=1, that’s ideal, but if you need\nmore, that’s ok. You probably don’t want any set here where n > 3. This is a seed deck, remember.\nThis is where you clearly state the problem. Particulars of how this problem impacts real world people/businesses are\nvaluable.\nThis is the solution. You want to explain what you do very clearly, in as few words as possible. Describe the concrete\nbenefits you provide\nShow off your traction (if you have it). Make the numbers clear and meaningful. It’s unlikely your curve will be this\nsmooth. That’s ok.\nAdd some context next to the chart if you’ve got some great stats you want to add.\nGot more metrics? Awesome! Add them!\nTrick slide! Revenue would be better here, but this is ok.\nTell the investor what makes you so special, what makes this work, what your insights are. This might take more than one\nslide.\nBusiness model is important. You probably don’t know all the details yet, but you should know a lot of them. Lay it out.\nIf you need more space to dig into something complicated, add slides.\nWhat’s the market here? Is it going to be big? Will you make it big? How much money are you going to make off this\nthing? Convince the investor that they’re going to make lots of money with you\nTeam! So important at seed. Talk about what makes your team particularly well suited to the problem. This should be\nabout founders. Nobody cares about your advisors.\nTell the investor how much money you need, and what it gets you. If you can lay out where you’ll be inside of a year,\nwhich should make you Series A ready, that’s powerful\nfootnote: This deck is intentionally simple in design. Kevin Hale wrote a great piece about\nhow to design decks\nwell\n.\nThanks to Jared Friedman for suggesting that we put this together, and for reviewing it."
    }
  },
  {
    "name_blog": "How to set up, hire, and scale a growth strategy and team",
    "description_blog": "What does a growth team do and why should you set up a growth team? Growth experts share when to invest in growth, what the right growth KPIs are, how to manage growth, building a growth team, and how to get everyone in the company to care about growth.",
    "authors": [
      "Anu Hariharan"
    ],
    "related_categories": [
      "Growth",
      "People",
      "Hiring",
      "KPI",
      "Customers",
      "Retention"
    ],
    "page_url": "https://www.ycombinator.com/library/59-how-to-set-up-hire-and-scale-a-growth-strategy-and-team",
    "content": {
      "table_of_contents": [
        "When to Invest in Growth",
        "Retention Checklist",
        "Building Your Growth Team",
        "To Do: Your Growth Team's First Year",
        "Where Should the Growth Team Sit?",
        "The End Goal: Growth is in the Company's DNA"
      ],
      "whole_content": "with special contributions from Gustaf Alstromer\nAdvice from 25 preeminent growth experts at top startups\n\"Growth hacks,\" like Hotmail's\ninclusion of a signup\nlink\nin its user's default email signature, can be extremely helpful in driving viral growth early in a product's path to\nproduct market fit (PMF). However, sustaining long-term growth and reaching hundreds of millions of users requires a\nscientific approach to growth. In fact, growth experts resoundingly say that \"growth hacking\" isn't in their vocabulary\nor something they relate to their work. \"Hacking\" implies a haphazard / gut-driven approach, and the reality is quite\nthe opposite. Startups that have seen amazing growth have developed teams and processes that are intentional,\nexceedingly metrics-driven, and thrive on experimentation.\nTo foster a scientific approach to growth, we've recently seen many companies break away from a strictly functional\norganizational design (with product, engineering, marketing, etc.) to create a cross-functional growth team. Facebook\nis, by all accounts, the pioneer of the growth team. Its first growth team was formed a decade ago with 3 people whose\nimpact was immediately evident. Facebook launched the growth team when it had ~50 million monthly active users (with\nroughly flat month-on-month growth). The growth team and its surrounding program became a key driver of Facebook's rapid\nexpansion to 2 billion monthly active users today, as well as the evolution of the core Facebook product. Following\nFacebook's lead, most successful consumer startups have created growth teams. Interestingly, these teams have converged\naround many of the same best practices.\nThe Y Combinator Continuity team gets a lot of questions from founders on formalizing growth. Everyone is eager to\nunderstand when to hire their first dedicated growth product manager (PM), how to structure a growth team, and how to\nscale it over time.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nSo, we spent time with 25 growth experts, who have worked at companies (including Facebook, Airbnb, Uber, Stitch Fix,\nSquare, Slack and Instagram --\nfull list below\n),\nto identify best practices for establishing a growth program.\nHere are the topics covered in this guide:\nWhen to invest in growth\nCheck your retention (+ examples)\nGood retention / bad retention\nBuilding your growth team\nThe most common makeup\nThe ideal PM candidate\nThe ideal engineer candidate\nThe ideal data scientist candidate\nWhen to hire your initial growth team\nTo Do: Your growth team's first year\nSet an absolute goal and define key metrics (+\nexamples)\nIdentify growth channels (+ examples)\nEstablish systems & tools\nEstablish user research\nContinue to iterate\nWhere should the growth team sit?\nGrowth in your DNA\nThanks\nWhen to Invest in Growth\nA great way to waste money, resources, and jeopardize the future of your company is to invest in a growth program before\nyou've proven you can retain customers. In other words, it's best not to hire a full-fledged growth team (defined in\n\"\nBuilding Your Growth Team\n\" section) to put major ad\ndollars into growth until you've ensured you don't have a \"leaky bucket\" problem. If you you determine with the process\noutlined in this section that you haven't yet nailed retention, you can apply a growth approach to\nretention\n. For\nexample, Stitch Fix hired a retention focused PM to run experiments to improve retention before they invested in new\ncustomer acquisition\nCheck Your Retention\nStart with this retention checklist to help determine if you have good retention, which you should be able to tackle\nwith your core product team:\nRetention Checklist\nMetrics and Data You Need to See if You Have Good Retention\nTo Do\nExamples\n□\nPick the right set of metrics\nPick a leading indicator of revenue and repeat behavior. Don’t pick a vanity metric (like app downloads). If it’s a marketplace with two sides you need to have metrics for both the supply and the demand side.\nDemand side metrics:\n“Rebook rate” - % of customers that rebook after the first booking\n“Nights booked per user” - # of nights booked per user over time\nSupply side metrics:\n“Active hosts” - % of hosts that are active (i.e. have a booking)\n“Bookings per active host” - # of bookings per unique active host over time across cohorts\nDemand side metrics:\nRider retention - % of riders that ride after the first transaction\nTrips per active rider - # of rides/active rider over time\nSupply side metrics:\nDriver retention - % of drivers that drive after the first transaction\nTrips per active driver - # of rides/active driver over time\n□\nPick the right period for your cohort\nThis will be typically be a day, a week, or a month depending on the business (shorter time periods typically make sense for younger businesses, and longer ones for more mature businesses).\nIn Airbnb’s case given the velocity of use is low, and people don’t travel often, the focus is on measuring retention on an annual basis\nIn Uber’s case, given the velocity of use is high and people use it often, the focus is on measuring retention on a monthly and weekly basis\n□\nIdentify an intial user action within Period 1\n100% of the install base takes some action that is a leading indicator for revenue.\nFor Airbnb, this is booking a room for at least one night (only a portion of the install base “rebook” each year)\nFor Uber, this is equivalent to riding with Uber for the first time or driving with Uber for the first time\n□\nIdentify a follow-on user action in Period 2\nCalculate the % of install base that is still engaging in that action at period 2 (the following day, week, month, or year)\nIn the case of Airbnb, % of the install base each year that rebooked since initial action\nIn the case of Uber, % of riders that ride with Uber every month since initial action\nGood\nRetention vs. Bad Retention\nThe biggest question to ask at this point is: Is your retention good?\nTo determine if your retention is good, run through these 3 steps:\n1.\nStable long-term retention: Long-term retention should be stable and parallel to the x-axis (the y-axis\nrepresents the retention metric). It is common to see a dip after the first period (e.g., month 2 for\nhigh-velocity\n1\nproducts or year 2 for\nlow-velocity\n2\nproducts), but the most important thing is to make\nsure that the long-term retention is stable and parallel to the x-axis (see this in the Cohort Analysis graph below).\n2.\nLong-term retention in line with \"average or median\" benchmarks in your specific vertical: It is important to\nbenchmark your retention against companies in your specific vertical. For example, stable long-term retention of 10% is\npoor if you are a social network.\n3.\nNewer cohorts should perform better: \"Cohort\" refers to the group of new customers that started using your\nservice that particular month. Determine whether newer cohorts are performing progressively better than older cohorts.\nIf the retention of newer cohorts are better than older cohorts, it implies that you are improving your product and\nvalue proposition.\nBelow is an example of how Airbnb has performed–which would qualify as\ngreat\nretention. The graph below demonstrates\nstable long-term retention. Each new cohort did better than the previous one. For example, year 2 and year 3 retention\nrates are better than the year 1 retention rate. Airbnb's long-term retention rate is better than the median retention\nfrom competitors in the same vertical.\nIt is important to benchmark your retention against companies in your specific vertical. Below, we have included average\nlong-term retention targets for 5 business verticals.\nVertical\n3\nPeriod\nLong Term Period\nLong Term Target\nMedian\nSocial Network\n4\nMonthly\nMonth 12\n45% - 65%\n55%\nOn-Demand\nMonthly\nMonth 12\n20% - 30%\n22%\nTravel\nAnnual\nYear 2\n20% - 35%\n29%\nE-commerce\nMonthly\nMonth 12\n10% - 25%\n16%\nSubscription\nMonthly\nMonth 12\n25% - 35%\n33%\nOnce you've passed these checks and know that you have good retention, you can take the first steps to build your formal\ngrowth team, which we cover in the next section.\nBuilding Your Growth Team\nIn the early days at a company, pretty much everyone is responsible for growth as they are solidifying product market\nfit, and some companies treat this as a shared responsibility even past product market fit. The reason a company forms a\ndedicated growth team is to pour gasoline into product market fit by launching structured experiments to drive a desired\nbehavior/action.If you have proven sustainable retention, you can focus on building a dedicated team to improve\nretention even further while acquiring and activating and retaining incremental new users.\nHere's the most common makeup of an initial, Year 1 Growth Team:\nYear 1 Growth Team = 1 Growth-focused PM + 2-3 Growth Engineers + 1-2 Growth Data Scientists\nWhen to hire your initial growth team:\nMost companies made their first hire when they had about 15 engineers on the team working on product.\nIf you have strong retention, then the Growth PM (your first growth hire) is likely to be the 3rd or 4th PM on the\nteam. The most common mistake CEOs make is waiting too long before they hire a growth-focused PM.\nThe trend is moving toward investing in building a growth team earlier on, with many starting to invest as soon as they\nhave strong product market fit and retention. Additionally, there is considerable evidence supporting the argument that\na formal growth team created at the right time accelerates the growth trajectory of a product.\nA good growth team can also play the role of \"defense\" really well. Launch of new features and enhancements can often go\nsideways and impact usage. The growth team has the ability to understand the root cause within minutes (not days) and\ncourse correct the problem and thereby limit the negative impact. Facebook's growth team is considered one of the best\nat defense and this has consistently helped them differentiate from competition since the early days.\nYour first hires are critical as the initial team members will establish your company's experiment framework and growth\nculture. 100% of growth experts refer to the first few hires as \"magnets\" for hiring and scaling the team. It's no\naccident that many accomplished data scientists work at Stitch Fix as they are motivated to work and learn from the\nleadership of\nEric Colson\n(former VP of data science and engineering from\nNetflix and one of the early hires Stitch Fix made).\nWhile success cannot be attributed to the growth team alone, having a growth team in place early on helps accelerate the\noverall growth trajectory of the company.\nTypically, the first growth team hire is a Product Manager (PM). We found some strong trends in PMs, Engineers and Data\nScientist traits highlighted by growth experts who built successful growth teams:\nThe Ideal Growth PM Candidate\nData-oriented:\nThe ideal candidate is intensely data-driven and inquisitive. All of the experts we spoke with\nsaid this is a must-have. You want someone in this role who will constantly ask \"Why?\" - even when growth numbers\nare up. One of the experts we spoke to said, \"The scariest day is when numbers are down, the second scariest day is\nwhen numbers are up and you don't know why.\"\nPrior growth experience:\nIt's important that the PM has experience at a company focused on driving growth in a\ncompetitive space (\ne.g.,\ne-commerce, dating apps, gaming apps, social networks). This means that you won't be\nrecruiting out of a company like Google or Apple, as those teams didn't scale based on competitive growth\nstrategies. More than 90% of the experts mentioned that prior growth experience is an important characteristic for\nthe team lead to have.\nFormer startup founder\n(bonus)\n:\nInterestingly, 60% of growth experts in our interviews were former\nfounders. Why are they great PMs? Because people who've started companies tend to be able to think independently,\nare comfortable with taking risks, and have high levels of perseverance. This is important as many experiments will\nfail.\nExisting PM\n(bonus): If an\nexisting\nPM has the above characteristics, then you might have the opportunity to\nappoint them as the Growth PM (as Facebook and Slack did). The growth team has to work with all stakeholders within\nthe company and having someone who has already built up social capital within the company can accelerate the team's\nprogress. This is great, but not a must have. 40% of the growth leads we spoke with were already PMs at the company\nprior to leading the growth team. Others, like Airbnb and Uber, hired a Growth PM especially for this function.\nThe Ideal Growth Engineer Candidate\nSelf-starter:\nSince a big chunk of the work involves running experiments to determine what really works, the\nengineer should be proactive about coming up with their own hypotheses and experiments and iterating. Similar to the\ngrowth PM, they should have infinite curiosity and constantly ask “Why?” to uncover hidden insights.\nDoesn’t cry over lost code:\nThis is someone who should be very comfortable with experimentation, knowing that a\nlarge amount of work won’t make it into the final product.\n3.\nOK doing things that don’t scale:\nMany of the tests will be small and without much impact-- so an engineer who is\nfairly new - just 2-4 years of experience - might fit better with this mentality vs. someone one with many years of\nexperience that may train toward rigid requirements and roadmaps.\n4.\nGreat communicator:\nGrowth engineers should be particularly comfortable working with teams with several functions\ndesign, copywriting, data, etc.\nThe Ideal Data Scientist Candidate\nLastly, a data scientist is a vital hire for a well-rounded growth team. Data scientists are in such demand that\nAirbnb\nannounced\nrecently that they have an internal university dedicated to training up data scientists.\nFluency with experimental design and interpretation:\nSince growth is about running a lot of experiments -- more\nso than other data science roles -- it is important to test for this during the interview process. You can pose\nquestions like, \"Under a particular scenario, roughly how large of a sample size would you need?\" and \"How would you\ncorrect for multiple comparisons in this case?\" You can also pull together a sample data set and run through the\nanalysis live in a pair coding interview.\nCoding Ability:\nMore so than other data science roles, growth requires more work to get & prepare data. This is\nsimply because growth is often dealing with new data sets, and new data logging. Some suggested testing for this in\nan interview by doing live coding on cleaning up a data set together in Python or R.\nGreat Communication Skills:\nThe two most important elements of communication are (a) Communicating the results\nof experiments -- especially what can and what cannot be validly deduced from an experiment and (b) articulating the\npersuasive case for investing in certain growth initiatives. Someone with a strong business background and a strong\nfamiliarity with causal inference (econometric and experimental backgrounds are ideal).\nTo Do: Your Growth Team's First Year\nOnce you have a team, there are five key initiatives you (and the team) will need to tackle in the first year. Here they\nare with additional detail on each below.\nSet absolute goal (with CEO) & Define key metrics\nIdentify growth channels\nEstablish systems & tools\nEstablish user research\nContinue to iterate\n1. Set an absolute goal and define key metrics\nThe most important thing is to identify your absolute goal and drive every aspect of the funnel toward improving your\ngoal. Casey Winters, former Growth Product Lead at Pinterest, wrote an excellent\npost\nabout this. What we mean by\nabsolute\nis that goals cannot be percentage\nchanges or rate changes (for example, you should not have a goal like \"improve conversion rates by 10%\"). The goal needs\nto be an\nabsolute\nnumber. (For example, \"achieve 5M first-time room nights this year\"). Note that this is an absolute\nmilestone the entire team needs to hit.\nAn important next step is to break down an absolute goal into subgoals – for example, if Airbnb's goal is 15M\nincremental room nights per year, it would need to achieve sub-goals with an absolute number of bookings from both new\nusers and existing users. Jonathan Hsu, Partner at Social Capital (also part of Facebook's early growth team), has\nshared his\ngrowth accounting\nequation\n-- here's\nhow Airbnb's equation would break down:\n[x] Room Nights = [A] Room nights from new users + [B] Room nights from existing users\nSimilarly, Facebook's absolute goal of monthly active users (MAU) incorporates both new and existing users. Here's\nFacebook's growth accounting equation:\n[x] Monthly Active Users = [A] New monthly active users + [B] Retained monthly active users + [C] Resurrected\nmonthly active users\nFor marketplaces, the companies would have absolute goals (and sub-goals) for both the supply and demand sides, and\nsometimes companies will have separate teams working on each side. For example, in the case of Airbnb the supply side\nmetrics would include Host Activation, Quality and retention.\nAt times, teams make the goal too unrealistic or set it in such a way that it is too easy to achieve. The most common\nadvice from growth experts is to set a goal that is halfway between \"Sandbagging\" and \"Too hard to achieve\". You want to\nset something that is a stretch, but at the same time motivate the team such that it is realistic to achieve.\n100% of the growth experts said that the CEO must be aligned when setting and defining the absolute goal. The goal also\nneeds to be communicated with the entire company so all teams are aware what the company plans to accomplish that year.\nOften CEOs wait too long or don't fully endorse the goal and as a result, aligning teams within the company takes too\nlong. This could severely hinder the growth team's progress in the first year.\n2. Identify growth channels\nOnce an absolute goal and subgoals have been defined, the next step is for the team to identify channels for their first\nfew experiments. The most common framework growth experts use to identify channels is based on existing user behavior.\nThe two key questions to ask are the following:\nHow do customers find solutions / solve this issue today?\nHow do your best users use your product today? Can you do something to get more such users to discover the product\nquickly?\nThe below behaviors were highlighted by\nLinkedin's Aatif\nAwan\n,\nand we share some examples of companies that used those channels.\nUser Behavior\nChannels to Explore\nExample Companies\nTo use the product you need to connect with another user\nProduct itself\nFacebook, PayPal, Slack\nExisting users talk about the product\nReferrals, Community\nUber, Airbnb, Dropbox\nUse search to find a solution to their pain point\nSEO, SEM\nAirbnb\nLook for inspiration from experts\nAffiliate bloggers, Pinterest, Partnerships, Content\nStitch Fix, Glossier, Intercom\nHigh LTV users\nPaid acquisition (social, search, native, offline)\nAirbnb, Expedia, Uber\nNot every channel is relevant for all companies. Most products find 1-2 relevant channels early on that really work for\nthem. ~70% of experts mentioned that referrals were the top channel within the first year. Over time (as brand\nawareness increased) other online advertising channels were more fruitful.\nThere are some exceptions to this rule were referrals do not work as well. For example - you can't offer a $20 discount\nand expect team members to persuade other team members to join Slack.\n3. Establish Systems & Tools\nThe 4 most important elements you need to kick off a growth team are the following:\nClean data set\nto track key metrics and goals\nSegmentation tools\nto be able to understand and segment the customer and activity at a granular level\nRigorous experiment dashboard\nto analyze the experiment results and the statistical significance behind them\nPeer review process\nto discuss and analyze findings\nIt is critical for teams to have the right systems and tools in place to run experiments at scale. Especially key in the\nfirst year is the experiment dashboard. Experiment dashboards are essentially a single destination to track\nexperiments/results, and allow for easy analysis by lots of people at the company. Dashboards contain:\nExperiment group metrics\nControl group metrics\nA set of metrics defined to track and measure statistical significance\nThe dashboard helps the team to run various experiments and test the results before proposing every single idea to be\nadded to the product. As the growth team scales, the number of engineers increase and it becomes unwieldy without an\nexperiment dashboard. A company at scale typically runs\n1 experiment per growth engineer per week\n. With that future\nstate in mind, it's vital to start early with a solid growth experiment dashboard. The dashboard also becomes an\ninvaluable archive of past experiments that is also immensely helpful when adding new team members or iterating on past\nexperiments.\n100% of the experts we spoke with emphasized their decision to build their\nown internal tools\nat scale. Initially, you\ncan use tools like\nMixpanel\n,\nOptimizely\n,\nSuperset\nand\nChartio\nto track your experiments.\nHere's a screenshot of Airbnb's internal experiment dashboard:\nIt can take several iterations to formalize the experiment dashboard. For example - one of the experts cited that the\nexperiment dashboard was formalized after several iterations only after they had ~25 to 30 growth engineers on the\nteam.\nPeer review & Individual Experimentation\nTeams often set up an internal experiment review process on a biweekly basis. Team members present their hypothesis and\nshare the results of the experiment they ran to test the hypothesis. Peers ask a lot of questions to decide whether they\nagree or disagree with the findings. Growth teams that run 100+ experiments per year cite that only a third of their\nexperiments turn out to be positive.\nThough the success rate is only 20% to 30%, the point of this exercise is to encourage engineers to take more risks.\nA common contention is whether engineers are allowed to run experiments independently. Companies in their early stages\noften encourage engineers to run growth experiments on their own. However some of them require PM oversight as they\nscale, especially as they get more rigid with quality standards.\nAnother important element is to make sure you set heuristics for the growth team. Growth teams are constantly testing\nhypotheses and running experiments. One of the most common heuristic experts use is:\n\"Don't test things you wouldn't\nship to everybody\"\n4. Establish User Research\nData alone cannot answer all the questions. It is equally important to have user researchers in place to really\nunderstand what is happening behind the numbers.\nYour first 100M users will look a lot different from the second 100M users. Therefore it is important to do the\nfollowing:\nSolicit real time feedback from users\nUse tools like\nInspectlet\nto track UX\nMeet users outside of San Francisco, especially if it was your first core market. Other markets will look a lot\ndifferent from SF\nPay attention to how users use the product internationally. There may be cultural nuances in addition to language\ngaps (for example, people in Japan do not like to post photos of people without their permission and products may\nneed to adapt to local taste).\nDocument every single use case. What is perfectly normal for one group can be very different for another group of\nusers.\nAs you scale it is important to add dedicated user researchers to the growth team\n5. Continue to Iterate\nWhile the above roadmap items will help set the foundation for a strong growth program, a lot of the tools, processes\nand systems will evolve at scale.\nWhere Should the Growth Team Sit?\nThis has been the biggest source of debate among companies. Facebook pioneered the concept of a separate growth team\n(meaning: Growth is essentially a department within the company). The rationale behind it was if they didn't assign sole\nresponsibility for growth of MAUs, then no one would own it. This has worked very well for Facebook, which recently\nhit 2 billion MAUs (the only social network in the world to have achieved this). Facebook was also really good at\nclarifying responsibilities across various teams. Advocates of separate growth teams cite that it is important for the\nHead of Growth to report directly to the CEO.\nHowever other companies like Uber, Airbnb and Slack, started with separate growth teams but later merged them with\nproduct team. Growth is not about just looking at data to drive insight. The growth team also experiments and makes\nsubtle changes to the product to fuel growth, and this becomes increasingly important at scale. Therefore, advocates of\nthis approach cite that it is crucial that the product and growth teams are within the same org. In these cases the Head\nof Growth reports to Head of Product.\nTraditionally, a company's marketing team has been responsible for driving user acquisition (and the associated budget),\nso this is sometimes a default department in which to house a growth team. Often this evolves from prior functions that\nhave lived in the marketing department (like performance marketing and user acquisition). In these cases, the Head of\nGrowth would report to the Head of Marketing. The general sentiment about this approach is that the line of reporting is\na bit rooted in the past, and most growth experts cited this as the least-favorable option.\nThe commonality, regardless of their department, is that the growth team can be more than 100 cross-functional people.\nIt is roughly composed of the following:\n10% Product Managers\n50% Engineers,\n10%-15% Data Scientists,\n10% Product Marketing,\n10%-15% Designers\n~5% Researchers\nThe End Goal: Growth is in the Company's DNA\nHopefully, when you're ready to create a scalable growth program, this will be helpful. This is the newest frontier in\nthe cross-section of marketing and product, so it's still evolving. When done right, an amazing growth program will\npermeate the entire organization, making an evidence-based mindset part of the company's DNA.\nIf you have any other growth program advice to share, please reach out\n@YCombinator\nor\n@AnuHariharan\non Twitter or on Hacker News.\nI want to thank the growth experts who have pioneered this practice and whose combined insights allowed us to draw these\ntrends:\nGustaf Alstromer\n, Former Product lead, growth, at\nAirbnb\n(who recently\njoined us as a Partner at\nYC\n)\nMerci-Victoria Grace\n, Growth Lead at\nSlack\nEd Baker\n, Former Head of Growth at\nUber\nMike Duboe\n, Head of Growth at\nStitch Fix\nCasey Winters\n, Former Growth Product Lead at\nPinterest\nGeorge Lee\n, Former Head of Growth at\nInstagram\nJulie Zhou\n, Former Head of growth at YikYak\nRay Ko\n, Partner at\nSocial Capital\nand Former Director of Growth @\nFacebook\nJonathan Hsu\n, Partner at\nSocial\nCapital\n, Former Data Scientist @\nFacebook\nBeau Hartshorne\n, Former Growth Engineer at\nFacebook\nJohn McDonnell\n, Data Science Manager at\nStitch\nFix\nSlater Stich\n, Former Data Scientist at\nSquare\nMax Mullen\n, Cofounder at\nInstacart\nFareed Mosavat\n, Senior PM, Growth at\nSlack\nOthman Laraki\n, Cofounder Color Genomics, Former VP of Product @\nTwitter\nDennis Goedegebuure\n, VP of Growth & SEO @\nFanatics\nAnd several others who opted to stay anonymous\nThank you also to Sharon Pope, Nic Dardenne, Craig Cannon, Ali Rowghani, Daniel Gackle and Scott Bell for contributing\nto this guide.\nNotes\n1.\nHigh velocity implies frequent usage - for example daily, weekly or even\nmonthly.\n↩\n2.\nLow velocity implies occasional usage -for example, annually or once in 6\nmonths.\n↩\n3.\nSecond Measure (anonymized credit card transaction data) unless otherwise\nstated.\n↩\n4.\nBusiness insider;\nhttp://www.businessinsider.com/whatsapp-engagement-chart-2014-2\n.\n↩"
    }
  },
  {
    "name_blog": "How to design a better pitch deck",
    "description_blog": "Investors invest in teams not slides. Your slides should make your ideas more clear. Here are design principles to follow when creating your pitch deck and story.",
    "authors": [
      "Kevin Hale"
    ],
    "related_categories": [
      "Fundraising",
      "Pitch Deck",
      "YC",
      "YC Demo Day"
    ],
    "page_url": "https://www.ycombinator.com/library/4T-how-to-design-a-better-pitch-deck",
    "content": {
      "table_of_contents": [],
      "whole_content": "The following is an adaption of a presentation I give to YC startups before we have them create their presentation\nslide decks for Demo Day.\nHere’s how to make a solid Demo Day slide deck. The thing to remember is that you already have everything you need to\ncreate a great presentation.\nThere are probably 100 reasons why your company is great, but people can only really remember a few of them after a\nshort presentation or pitch. With each one of you, we sat down and figured out the 5 to 7 most important ideas people\nshould know about your startup. These 5 to 7 points are the ones you want investors to remember.\nAs you experienced for yourselves from\nPrototype Day\n1.\n, you’ll be lucky if they can\nremember even 1 or 2 of those points in the context of 100 other companies also presenting alongside you.\nIf you just communicate your points clearly, you’ll do better than 99% of startups. Because before anyone can remember,\nthey have to understand. Here’s how I make things easy to understand:\nI make it legible.\nI make it simple.\nI make it obvious.\nHere’s how to get people to\nnot\nunderstand:\nMaking it illegible.\nMaking it complicated.\nMaking it subtle.\nI’m going to hammer this in with some repetition: Your slides should\nNOT\nbe illegible, complicated, or subtle.\nSlides should be legible, simple, and obvious.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThis is when I give a word of warning before moving forward in my presentation.\nThis presentation has too many damn\nslides.\nIf this was an actual Demo Day presentation, I’d have stopped a few slides ago. This is a visual essay, which\nis very different. Please don’t make a visual essay.\nLegibility\nAlright, let’s talk about legible slides. If they can’t read it, they won’t be able to understand it. At Demo Day, the\nroom will be filled with over 500 people. They can’t all sit in the front row. A good number of them are old-ish people,\nso their eyesight may not be the best.\nLegible slides are ones that even old people sitting in the back row with bad eyesight can read. Here’s how you do that:\nUse large type.\nBold text.\nA simple font.\nWith good contrast from the background.\nAlso, text at the top is easier to read from the back of the room. Let’s run through some examples.\nThis is not exactly terrible. The problem is the contrast and the positioning of the text. Let's try it again.\nIt's better, but there's lots of other text on this slide that's not optimized for legibility because we've allowed the\nscreenshot to be a constraint. Here's a version I know everyone will be able to read from the back of the room.\nThe following slide comes from\nShred Video\n. It's from their Prototype Day presentation\n(\nthanks guys for giving me permission to use this\n) and it's the one that's supposed to explain what their startup is\nbuilding.\nAs you can see (or not see), the text is too small and too skinny. The text that actually explains what they do is also\nat the\nbottom of the slide\n. Their technology is amazing. Shred's software can\nautomatically edit videos from hours of raw footage into something that looks like it was made by a professional in just\na few seconds. Unfortunately, they've basically hidden it in light gray at the bottom of the slide. By Demo Day, their\ndescription simplified and the text they used to describe it was large and in charge.\nSimplicity\nLet’s talk about simple slides. Simple ideas are easy to understand.\nBut what does that exactly mean? Well, simple and complex share the same word origin.\nThe word ‘plex’ means braid or twist or fold.\nSimple ideas are ones that aren’t intertwined with other ideas. They are one fold. They are one idea. A simple slide,\ntherefore, expresses one idea. Do not crowd your slides with multiple ideas. That’s how you make it complex. Some ideas\nmay take more than one slide to express a point, but you should try hard to do it in one.\nSince you only have 5-7 ideas you want to get across to investors, you shouldn’t have too many slides. Demo Day slides\nideally have only about 5-7 slides.\nLet's look at another example from one of our startups. Here’s a very early version of a slide from\nAfrostream\nexplaining what they do.\nThey've put two ideas here trying to convey what exactly they've built and who it's for. Unfortunately, there's just too\nmuch text here. It might have been okay if they had just put the highlighted portions, but they made a very common\nmistake that I see a lot of startups make. They've tried to pack in all the little nuances of their business into this\nslide. The result is a slide that no one can easily remember.\nContrast this with the slide they end up using on Demo Day to explain their startup:\nAhhhh, it's like a breath of fresh air. Short, sweet, and easy to recollect. Once you decide what idea you're going to\ntry to convey on a slide, you've got to figure out how to make sure your audience finds that idea. The best way to help\npeople find the one idea on each slide is to make it obvious.\nObviousness\nLet’s talk about obvious slides. Obvious slides are ones that can be understood at a glance. Here’s a simple test you\ncan use to test if a slide is obvious: Show it to a stranger and ask them to tell you what it means. If they don’t\nimmediately\nsay your idea, you lose.\nThis is because ideas that are obvious are very fast to understand. Why do we care about the speed of understanding?\nWell, for a Demo Day presentation the following two things make it very tricky for you.\nYou only have 2 minutes and 30 seconds.\nPeople are easily distracted.\nIn fact, investors are even more easily distracted than most other people. They are easily distracted because they are\nimpatient. If they don’t get your point right away, they will check their email.\nWe can’t force investors to stare and listen to you the entire time. And to be honest, it’s hard to focus intently on\nover 100 presentations even if it’s your job. Have some empathy! The way to mitigate this is to make sure any slide you\nshow can be immediately understood. That way they’ll just get it when they look up from checking their email.\nHere’s how I make things obvious: I start by making it\nlegible\nand\nsimple\n. (See two points above.) Then I try to\nmake my idea\nexplicit\n. Here’s an example:\nmarkdown: That slide isn’t explicit. You can probably guess and figure out it represents some kind of growth graph, but\nit isn’t immediately clear.\nThis is better, but the idea I want to express could be more in your face.\nBoom. It's like I put CliffsNotes right on the slide. No need to guess how my startup is doing, I made it explicit.\nHere’s another variation from one of our startups.\nWithout the caption, you’d have to study the graph to get to that conclusion. Just writing it out like that means I\nbarely have to look at the graph at all.\nAnother way I make my slides obvious is to avoid distractions in my slides. Now, when I say distractions, I mean\ninformation distractions. Here’s one way to show how Dropbox works:\nNot bad, but not obvious. The problem is people can’t understand that slide immediately. Why? Well, there’s a lot of\ninformation on that slide. See?\nAll that crap takes time to comprehend. There’s actually a law of human interaction called\nHick's\nLaw\nthat describes how each piece of information we add to a problem comes\nat a cost–-increasing the number of choices will increase the time it takes to make a decision logarithmically.\nTo me, diagrams are like little mazes for ideas. It usually makes the path to the idea you want to express too long. And\nyou don’t want investors wasting time trying to figure out a diagram. You want investors to just understand\nimmediately—immediately why you’re awesome. So the path to the idea should be straight and quick.\nHere’s some other distractions you should avoid in your slides.\nToo much text.\nExcessive explanations and caveats.\nExcessive branding per slide.\nPhotos with no titles or captions.\nAnimations.\nTransitions.\nMemes.\nSubtle humor.\nAccidental humor.\nBasically, don’t try to make the slides the thing they’ll remember.\nInvestors invest in teams not slides. Your slides should make\nyour\nideas more clear. Don’t let your slides distract\ninvestors from what you’re saying out loud. You want them to be impressed by you. Not your slides.\nThere is, however, one exception I have for this rule: when your point is to show complexity or to overwhelm the\naudience. This usually happens when a startup wants to talk about how hard a problem is that they're solving. I’ll give\nyou an example from\nMagic’s\nslide deck.\nOn that slide they make the point that their software abstracts away thousands of services into a single interface. To\nbring the point home, they show a slide of every on demand service they could think of in every industry, market and\nvertical organized on a grid.\nNormally, it's not ideal to show a slide of every potential competitor out on the market. The logos, however, represent\nthe problem. For users to take advantage of all these services, they'd have to create an account for every single one.\nIt's a discovery and usability issue. Each logo also represents every business Magic is now able to charge a premium on\ntop of to solve their users' problems. It's overwhelming for a reason and that's usually when it's okay to bend the\nrules.\nFucking Screenshots\nLet’s talk about screenshots. I usually hate screenshots in Demo Day presentations. Screenshots are almost always\nillegible, complex, and non-obvious. They break all 3 rules! The text in most interfaces are too small (not legible).\nMost interfaces do multiple things (not simple). Most screenshots take longer than a glance to understand (not obvious).\nThey are the worst.\nHere is a Google image search for\n‘screenshots’\n:\nCan you understand any of those images immediately? Nay.\nIf you’re trying to show what you do, I recommend showing the most simplified version of it. A bulleted list of steps is\nmy favorite technique for this.\nThat slide is far better at explaining the ease of use of\nSparkGift's\nproduct than any\nworkflow they could show from their actual interface. Sometimes a company can get lucky and explain what they do in two\npoints. Here's how\nMeadow\ndid it:\nIn my opinion, this slide is far better than any combination of buttons, links and chrome they could have put up there\nto express the same idea.\nThe frustration I have for screenshots in pitch decks goes for screencasts and videos as well. Think twice before trying\nto use either one.\nAlright, so there’s probably a lot more you can do to improve your slide deck, but this is a pretty good start. Again,\nhere’s how to make a solid Demo Day slide deck:\nMake it legible. - Make it simple. - Make it obvious.\nIf you just do these three things, you’ll have a presentation that anyone can probably understand. And since\nunderstanding is the foundation for getting someone excited enough to want to talk to you afterwards, it’s a good place\nto start.\nTwo weeks into a batch we hold an event called Prototype Day for all the startups to present to one another for the\nfirst time. What they realize quickly is how bad they are at describing their startups in a way that gets even their\nbatchmates to remember.\n↪"
    }
  },
  {
    "name_blog": "Three paths in the tech industry: founder, executive, or employee",
    "description_blog": "When thinking about tech as a career, there are three paths. Michael discusses the pros, cons and useful strategies for each role.",
    "authors": [
      "Michael Seibel"
    ],
    "related_categories": [
      "Becoming a Founder",
      "College Students"
    ],
    "page_url": "https://www.ycombinator.com/library/4h-three-paths-in-the-tech-industry-founder-executive-or-employee",
    "content": {
      "table_of_contents": [
        "Founder",
        "Executive (Senior Manager at a Large Company)",
        "Employee (individual contributor / middle manager)"
      ],
      "whole_content": "When people ask me for tech career advice I find it helpful to lay out the three paths I’ve encountered most in my\ncareer: founder, executive, and employee. I’m leaving out investor because the best path to being an investor that I’ve\nseen starts with being successful (or failing) at one of these three first.\nBelow I’ll outline what I see as the pros/cons and useful strategies for each role.\nI wrote this post though because when I talk to people about their careers I’m surprised at how often they focus on only\none of these paths without taking the time to consider other options. Often when they get advice, people tell them to\nfollow the path that they followed (as a YC partner and former founder, I’m very guilty of this).\nI don’t attach value judgements to these three paths. In my ten years in The Bay Area I’ve seen friends lead successful\nand fulfilled lives following all three.\nFounder\nPro\n• Work on something you’re passionate about\n• Bring something new into the world\n• High level of responsibility often inspires extreme productivity\n• Choose the people you work with\n• Learn new skills at an extremely fast pace\nCon\n• Incredibly stressful. Even success hurts\n• Probably won’t maximize your personal earnings\n• significant financial/skillset/location hurdles to get started\n• Large scale success often requires decade plus commitment\n• Commitment level can significantly hurt personal relationships\nStrategy for People Who Want to be Founders\nYour initial goal is to accumulate the prerequisites to being a founder.\n1.\nIdentify potential teammates you can work with who have the required technical skills to help you build your\nMVP.\n2.\nFigure out the financial plan. I.e. Do you have enough money in savings, do you have friends/family who can\nprovide seed investment, can you bootstrap, can you reduce your spending and save enough give yourself 6-12 months to\nwork on your idea?\n3.\nIdentify a problem that you and your potential teammates are passionate about solving.\n4.\nThe least important (but still required) is having an idea on how of how to solve the problem.\nMany people who want to be founders have one or more of these prerequisites missing. A popular mistake is trying to\nhustle\naround\na missing prerequisite instead of\nsolving the underlying issue\n. If your team doesn’t have the\ntechnical skills to build your MVP, don’t work with a dev shop. Make friends with people who do have these skills.\nConvince them to join you.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nOften times there are hard barriers preventing people from starting a company. In these cases my best advice is to move\nto a tech hub (preferably the Bay Area) and work for a tech company until you can save the money, make friends with the\nright potential teammates, or discover the problem that you are passionate about. It usually takes at least 10 years to\nbuild a large and impactful company. It’s fine to delay your start date in order to give yourself the best chance of\nsuccess.\nNotice that one of the prerequisites isn’t experience. Experience is over-valued (not completely unimportant - but\nmassively over-valued) by people who are thinking about starting a company. In almost all cases, no matter what\nknowledge you bring to the table, you will learn most of what you need to know about your problem, your customer, and\nthe best solution after you start your company.\nExecutive (Senior Manager at a Large Company)\nPro\n• Stable income/benefits/etc.\n• High level of prestige (only very successful founders have more prestige)\n• A higher likelihood of having a huge impact (given that most startups fail).\n• Doesn’t require building a team and acquiring money to get started\nCon\n• Producing results isn't necessarily how you move up the corporate ladder. Internal politics are usually as important,\nif not more so.\n• Success can be hampered or even prevented by others inside of your organization\n• Requires the ability to pick companies that will be growing and successful for a long time\n• Takes a long time to get a significant amount of responsibility\nStrategies for People Who Want to be Executives\nI actually see two strategies within this path.\nThe first strategy is to pick a company that is growing quickly. If you do manage to pick a company like this early,\nthen you’ll get more responsibility as the company grows - I also assume you are a friendly and productive team player.\nFor example, if you were one of the first 100 people at Facebook and you stayed there for ten years, you would have many\nopportunities to become an executive. The hard part here is that picking a company that will grow rapidly for many years\nis extremely difficult (in many ways your task is similar to a VC).\nThe other path is to go to work for a more established company. The people I’ve seen do this effectively don’t think\nabout working their way up within one company alone. They often think about moving diagonally up between a set of\nestablished name brand companies until they eventually land in an executive role. For example, you start out of college\nat Google, get hired at Dropbox as a team lead, move to Yahoo to become a director, move back to Google - so on and so\nforth.\nPeople on the executive path either have to think like VCs and pick a company that is going to be one of the winners\nover the next 10 years, or have their head on a swivel to constantly look for better and better opportunities both\ninside and outside of their current company.\nEmployee (individual contributor / middle manager)\nPro\n• Stable income/benefits/etc.\n• More work and fewer meetings\n• More often directly affecting the customer through your work\n• With a high demand skill-set you have flexibility in where/how much you work\n• Often have more time to spend with friends and family\nCon\n• Productivity can be blocked by bad management\n• You often don’t have control what you work on\n• Often don’t get a voice in major decisions - even when you “know the right answer”\n• It’s harder to become very wealthy\n• It can be boring\n• If you don’t maintain a high demand skillset or your productivity drops it’s easier to be fired\nStrategies for People Who Want to be Employees\nYour strategy for picking a place to work is similar to an exec’s. You either need to spot and join a quickly growing\ncompany or find a way into a well known successful company. It’s much easier to go between brand name companies when you\nstart with a brand name company. Also, in my experience, it’s much easier to optimize this path as a software developer.\nThe last thing I’ll say is it takes time to be good at each role. When you’re in college there is this idea that you\nshould take your 20s to discover yourself and the find the work that is most enjoyable to you. The problem is that if it\ntakes 5-10 years to truly get good at something and you spend 10 years discovering what you want to get good at…it’s\ngoing to take a long time for you to feel like a highly skilled productive person (and to recieve the rewards that come\nwith this). It’s not that you shouldn’t explore, it’s that you need to understand the costs of that exploration and plan\naccordingly.\nThanks to Daniel Gross, Aaron Harris, and Craig Cannon for reading drafts of this post."
    }
  },
  {
    "name_blog": "Startups for students",
    "description_blog": "The guide is informed by hundreds of hours of talks, blog posts and essays we've written for students who are interested in starting or working at startups. We talk about why (and why not) you should start a startup, what to do in college if you're interested in starting a company, and how to choose which startup to work for.",
    "authors": [
      "Tamanna Khemani",
      "Kat Mañalac"
    ],
    "related_categories": [
      "Becoming a Founder",
      "College Students",
      "Working at a Startup"
    ],
    "page_url": "https://www.ycombinator.com/library/D0-startups-for-students",
    "content": {
      "table_of_contents": [
        "1. Why Start a Startup?",
        "2. Why Not Start a Startup",
        "3. Bad Reasons For Not Starting a Startup",
        "4. Why Work At a Startup",
        "5. Startup School",
        "6. Applying to YC",
        "7. Alternatives to Starting a Startup",
        "8. Frequently Asked Questions From Students"
      ],
      "whole_content": "Introduction\nIn his 2007 essay “\nWhy to Not Not Start a Startup\n,” YC co-founder Paul Graham\nwrote about how common uncertainty was among people considering starting a company. “There's nothing wrong with being\nunsure,” he noted. “You’re part of a grand tradition.” When Y Combinator launched in 2005,\nstarting a startup was an\nunusual career path for recent graduates\n. It was hard to be taken seriously by\ninvestors if you didn’t have an MBA or years of experience in business or tech. To get a sense of how many startups were\nin the world, look at TechCrunch in 2005. It published about 40 company launches per month, and YC itself only got a\ncouple hundred applications for its first batches.\nThe world has changed since then. Today we get tens of thousands of applications per year. On any given day you can look\non Product Hunt and see dozens of new companies launch. Taking a chance and starting a startup is not the foreign\nconcept it once was.\nWhile it has become more common for people around the world to start startups, there are many more who could consider\nstartups as an option. For example, lots of folks choose a career in finance or as an engineer at a big company without\nconsidering other options. Whether you know you want to become a founder or are more interested in finding a job at a\nstartup, we want to equip you with the best resources for getting started.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nIn this guide, we’ll discuss why you should think about starting a startup and why you should consider not starting a\nstartup. We’ll also talk about what you should do in college and walk-through some tips for applying to Y Combinator.\nAnd if it turns out being a founder isn’t for you, we’ll talk about how to choose the right company and the benefits of\nworking at a startup.\n1.\nWhy Start a Startup?\nStartups are not for everyone. The hours are long, the route to success is often unconventional, and it is certainly not\na surefire way to make a large sum of money. Roughly 90 percent of startups end in failure. (YC is an exception; over 50\npercent of YC companies that are over five years old are still alive). Why would anyone choose this as a career?\nAsk Yourself Three Questions\n“There is a certain type of person who only works at their peak capacity when there is no predictable path to follow,”\nYC alum and group partner Michael Seibel writes in his essay,\nWhy Should I Start a\nStartup?\n“The odds of success are low, and they\nhave to take personal responsibility for failure.”\nTo determine if a startup is right for you, Michael recommends asking yourself these three things:\nDo I like being the underdog?\nDo I seek hard challenges most people shy away from?\nDo I thrive taking personal responsibility for success or failure?\n“If you answer yes three times, then maybe starting a startup is for you,” he writes. “I cannot promise that doing a\ntech startup will make you rich but I can promise that it is one of the most challenging things you can choose to do.”\nStarting a startup is both awesomely challenging, and often the most rewarding journey you will ever take.\nFind a Problem You’re Obsessed With Solving\nSome of the most successful companies in YC history formed when founders confronted a real world issue. Airbnb began\nin 2007 when Brian Chesky and Joe Gebbia were having trouble paying rent, so they bought a few air mattresses and\ncharged people $80 per night to sleep on them during a busy convention in San Francisco. In 2010, Patrick and John\nCollison began working on the side project that would later become Stripe after Patrick became fed up with how hard it\nwas to accept financial payments on the internet. The founders of Gusto started their company because they were\nfrustrated by the inefficiencies in payroll for small businesses.\nYou don’t necessarily need to start with a specific idea. Simply take a look at your own life, identify a problem, and\nthen build a solution. You might be surprised how many others have the same problem too.\nBe Prepared to Own Every Success and Every Failure\nSteve Jobs once said, “It’s more fun to be a pirate than join the Navy.” Part of the appeal of startups is the ability\nto run fast with a lean team that operates without bureaucracy. But it also means there’s no corporate cushion either.\nAs a founder you’re responsible for every setback when things go wrong, but at the same time, you will stand to gain\nmore than any corporate job could ever offer if your startup is successful.\n2.\nWhy Not Start a Startup\nYou’re Still in School\nStartups take an enormous amount of time and energy. If you decide to build one while still enrolled in college, your\ngrades and social life will almost certainly suffer.\nThat being said, it’s not impossible. The founders of Panorama Education formed their edtech company while they were\nundergraduates at Yale. Co-founder Aaron Feurer says he spent over forty hours a week building Panorama and, by the time\nhe graduated, they had amassed hundreds of thousands of dollars in revenue.\nThis kind of success is very difficult to achieve and highly uncommon. Also, keep in mind that if your startup begins to\nscale, you’ll most likely have to drop out. There are, however, benefits to staying in college, and later we’ll share\nthe best ways to prepare to start a company while you’re in school.\nIt’s Difficult\nBuilding a company from scratch is mentally and emotionally taxing, and it’s usually too much for one person to manage.\nThe odds are against you too — as we mentioned before, nine out of 10 startups fail in their first year — and the ones\nthat do succeed face immense challenges.\nYou Have No Co-Founder\nIf you look at YC’s\ntop companies\nlist, only 7.9 percent were founded by\nsolo founders. A co- founder not only gives you someone to split tasks with, but also helps you bear the emotional\nweight of building a startup, and can fill gaps in expertise. One co-founder might be a talented programmer while the\nother is great at sales.\nCollege is an ideal place to find a co-founder. But if you’ve exhausted both your first and second level networks and\nstill haven’t found the right person to start a company with,\nYC’s new co-founder matching\nplatform\ncan pair you with a co-founder based on skills, interests,\nand location.\nYou’re Not Ready for the Commitment\nEven if you’re successful,\nit will take years\nfor your company to\nhave an exit or IPO. While it’s impossible to predict exactly how long, you should prepare yourself to work relentlessly\nfor as long as a decade on your startup. If spending time on things like travel and hobbies right now is more appealing\nthan starting your own company, that's ok. But it’s probably not the ideal time for you to start a startup.\nYou Need Structure\nThe structure inherent in large corporations has some benefits. Managers and bosses can act as mentors, and being part\nof a large collaborative team can sometimes coax out brilliant ideas from smart people. But if you need structure to\nthrive, a startup may not be the ideal place for you.\nYou Hate Uncertainty\nAt a startup, there is no clear linear path to success. If the idea of uncertainty gives you hives, don't do a startup.\n3. Bad Reasons For Not Starting a Startup\nAt Y Combinator\nwe put more emphasis on the team than the\nidea\nbecause time and time again we’ve seen companies pivot\nafter they discovered a newer, more urgent problem to solve. Reddit, Brex, and Segment were all accepted into YC as\ncompletely different concepts before pivoting into the companies they are today.\nIf you’re unsure of an idea to work on, we have the following resources to help you begin.\nStartup School: How to Get Startup Ideas\nStartup School: How to Evaluate Startup\nIdeas\nPaul Graham: How to Get Startup Ideas\nYour Parents Want You\nto Get a Real Job\nParental pressure seems like less of a problem for startup founders (at least in the US) today than it was a decade ago.\nWhen\nThe Social Network\ncame out in 2012, YC got a massive spike in applications. We sometimes joke that\nThe Social\nNetwork\nwas the cultural inflection point where parents realized startups could be a viable and lucrative career\noption. If your parents are still skeptical about a career in startups, show them stories about\nBrex\n,\nStripe\n,\nEmbark\nand\nScale\nAI\n. These companies,\nfounded by people in their 20s, are all massively successful and now worth billions of dollars.\nYou Have Student Loans\nIt’s not impossible to start a company if you have a lot of student debt. But it is a lot harder. Having large student\nloan payments every month certainly makes a well paying job at a big company more enticing. And once you have steady\nincome, it’s easy to start racking up additional expenses like nice cars, fancy vacations, and luxury apartments.\nLeaving a salary behind is tough.\nWhile it’s true that start-ups only rarely generate great wealth, it’s also important to remember being part of a\nstartup is typically a force multiplier for experience, knowledge, and ability to execute — all things that will\nincrease earning potential.\n4. Why Work At a Startup\nThere’s no better way to learn about startups than by working at one — especially a YC startup. You’ll gain experience\nbuilding products that people love, talk to customers directly, and get a transparent view of the business. (And it\nmight just become the next Airbnb, DoorDash, or Coinbase.)\nHere’s the best way to gain that experience.\nVisit YC’s Work at a Startup\nYC’s\nWork at a Startup\nhelps you apply to multiple startups with the same resume\nand also allows founders to get in touch with you directly if they think your skills might be a good fit for a role. If\nyou’re looking for an internship, YC companies also list active internships on the\nYC internships\npage\n.\nDetermine the Right Company\nFind a startup that’s solving a problem that’s interesting to you. Are you obsessed with mitigating the impacts of\nclimate change? Or maybe you want to focus on the intersection of robotics and biotech?\nYC’s Work at a Startup jobs\npage\nlists positions at thousands of companies working on the world’s toughest\nchallenges.\nIf you find a startup that interests you but doesn’t look like it’s hiring, reach out to the founders. A single email\ncan open doors you might not even realize are there.\nRead\nhere\nfor more tips on what a\ngood outreach message might look like.\nDecide What Stage Startup is Right For You\nFor an internship, we recommend being at a post series A company. There’s more structure and more capacity for\nmentorship. However, if there’s a particular founder you’d really like to learn from, or if you’re a very self-directed\nlearner and worker who thrives in ever-changing environments, a seed stage company could be a good option.\nAsk The Founders These Questions\nIf possible, get in touch with the founders and ask the following questions. The responses will give you valuable\ninsight on what your experience will be like and what you’ll learn.\nWhat will I work on during this internship?\nTo maximize learning, get a sense of the projects you’ll be working on and the skills you’ll be developing. This might\ninclude contributing to the tech stack, helping increase metrics, or working closely with customers. Bonus if the\nproject ships at the end of your internship — you’ll have something concrete to add to your resume.\nWill I get to see how the business is doing?\nHow much do I get to interact with customers?\nOne of the benefits of working at a startup is the transparency of a small team and being closer to the business. (Many\nengineers at large companies never even know who their customers are!) Talking to customers not only allows you to see\nhow the business is improving — or not improving — but is also a key skill set when you’re running your own startup.\nWhat will I learn from the people I’m working with?\nWhether it’s an internship or your first full-time position, bosses, coworkers, or even the founders are a great\nresource for helping you grow and learn. Carefully study their strengths — are they good at analytics, product\ndevelopment, building MVPs, or performing customer interviews? — and use that to understand what skills you’ll need to\ncultivate.\nLastly, if you’re looking for a full-time role, we also recommend asking about runway and burn rate. This will tell you\nif the startup is in a good funding situation and show how transparent the founders are. You can\nread more about both\nhere.\n5.\nStartup School\nIf you’re interested in starting a startup but haven’t decided on what to work on, you can explore\nStartup\nSchool\n’s Aspiring Founders track. This free, online course runs for six weeks and is\ndesigned for anyone thinking about founding a startup — students, engineers, creatives — but not actively working on one\nright now.\nThe curriculum features lectures like “\nHow to Get Startup\nIdeas\n” and “\nHow to Plan an\nMVP\n”. It also includes exercises that can help put what\nyou’ve learned into practice.\nOnce you’re ready to start working on your company in earnest, a good next step is to check out the rest of\nStartup\nSchool\n’s curriculum. This program, which we also offer for free, consists of founders\nwho can help you learn about startups, build a product, and track growth. They also run periodic build sprints that many\nfounders utilize as a catalyst for launching a company.\nAdditionally there’s also a free repository of content at the\nYC Library\n, which\nincludes more than 15 years worth of startup advice, podcasts, and essays.\n6.\nApplying to YC\nYC accepts applications year-round, and it’s never too early to apply.\nOnce you’re ready to work on your startup full time, you can\napply for the next\nbatch\nof Y Combinator.\nWhy Y Combinator?\nLifetime Support\nThe Y Combinator program doesn't end on demo day. We continue to assist founders from idea through IPO and beyond. YC\nstarts with teaching founders the basics of\nstarting a company\n,\nfinding\ncustomers\n,\nraising angel investments\n, and\nhiring their first employees\n. Then we help founders secure\nSeries A and B\nfunding\nscale their\ncompanies\n, and hire an executive team. Once a YC company has scaled\nto a certain level, we may\ninvest in later stage rounds\n.\nCommunity\nY Combinator boasts the strongest and deepest founder community in the world. For the 6,000+ YC alumni, there’s always\nsomeone to help guide them through every stage of their business; and with over 3,000 companies funded, founders have a\nbuilt-in cohort of customers ready to try their products and services.\nWell Known Resources\nBeing part of Y Combinator will give your company numerous advantages in a highly competitive market. YC companies tend\nto raise more money from better investors and achieve higher valuations. Our applications are open to anyone — you don’t\nneed to be well connected in the tech or investment world to be accepted. Our team dispenses meaningful advice on\neverything from growth strategies to overcoming technical hurdles to communicating with press and media.\nSecret Resources\nSome of the lesser known advantages to being part of Y Combinator are access to the massive, vibrant YC alumni network,\nthe YC-only hiring platform,\nWork at a Startup\n, plus better deals and more customers.\nWhat is a day in the life of a founder in the batch?\nEvery day will have its own unique chaos. In general, expect to be writing code, talking to users, solving problems, and\nparticipating in weekly batch events, group activities, and office hours.\nWhat does YC look for in companies and founders?\nThere’s no magic template for creating founders or companies. We do, however, often find these qualities in the most\nsuccessful ones.\nTechnical Ability\nWe like to see teams that have the ability to build, usually that means having a technical founder.\nA Drive to Build\nWe do fund ideas. About 60 percent of the companies we fund don’t have a launched product, but we like founders who have\nan inclination for action and are making fast progress on what they’re working on.\nPersistence and Resilience\nA number of companies apply to YC multiple times before being accepted. These days, about 50 percent of the companies we\nfund have applied more than once. If a founder applies a second time, it’s important they show they’ve made progress on\ntheir company. This signals a founder is serious about building a startup.\nWhat stage and sector does YC invest in?\nWe have companies in each batch that don’t have a fully formed idea and companies that have millions of dollars in\nrevenue.\nWe invest in companies from a broad range of industries ranging from consumer apps to biotech to SAAS. See the whole\nrange of companies and industries\nhere\n.\nWhat are the requirements to apply to YC?\nY Combinator is open to everyone and\nthe application is free\n.\nAre there different requirements for international founders?\nThere are no different requirements for international founders. For the Summer 2021 batch, about half of the companies\nwere internationally based.\nDo I need a business plan?\nYou do not need a business plan to apply to YC. Our application process usually helps founders understand more about why\nand what they are trying to build.\nTip:\nBe concise and explain your idea simply.\n7.\nAlternatives to Starting a Startup\nIf you’ve decided that being a startup founder isn’t right for you, there are still many other avenues open in the tech\nindustry. Here’s a few resources that can help.\nFinding the Right Career Path\nThree Paths in the Tech Industry: Founder, Executive, or\nEmployee\nby\nMichael Siebel\nCareer and Resume Advice: Student Edition\nby\nRyan Choi\nAdvice for Job Seekers on Resumes and Reaching\nOut\nby Ryan Choi\nAdvice on Choosing a Startup\nHow to Pick Which Startup to Work At\nby\nJustin Kan and Sam Altman\nChoosing a Startup to Work At\nby Harj Taggar\nWhy You Should or Should Not Work at a\nStartup\nby Justin Kan\nSalary + Equity\nThink about Equity\nby Jessica Livingston\nRoles at Startups For Recent Grads\nWork at a Startup Internships\nWork at a Startup Jobs\nUltimately, you should join a startup if learning trumps stability, if experience beats structure, and if building\nthings wins out over a steady paycheck. It doesn’t matter if the company succeeds or fails, when you join a startup\nyou’re going to gain knowledge and experiences that you will find nowhere else.\n8.\nFrequently Asked Questions From Students\nWhat Classes Should I Be Taking in College?\nThere are no specific classes where you will learn to be a founder. Take courses you enjoy and work on projects that\ninterest you. These experiences will likely teach you more than anything in academia.\nDoes it Matter What Degree I Have?\nNot really. If you enjoy coding, having a computer science or engineering degree is the best way to set yourself up for\nsuccess. If engineering is not something you want to focus on, college is a great place to find people who have skills\nthat are complementary to yours. That being said, if you want to run a software company, we recommend teaching yourself\nthe basics of coding, even if you’re not planning to be the CTO. Understanding how software works is a critical part of\nbuilding and running a technology company.\nWhat Skills Should I Be Learning?\nYou don’t need to go to a specific school or have a specific degree to be a good founder. However, developing these\nthree skills in college will undoubtedly help in a career as a founder later on.\nCoding\nLearn to code and become friends with technical folks. You can’t build a software enabled company without software.\nCommunication\nLearn to convey your ideas clearly and simply. Think of it this way: even if you’re working on something enormously\ncomplex you have to be able to explain it in a way your grandparents will understand.\nPeople Skills\nBuild your network. Meet potential co-founders. Gain a deeper understanding of what people's needs are. As a founder,\nit’s crucial to talk to users so you can better solve their problems.\nHow Should I Spend My Time at School?\nFor most, college is a one time experience and we encourage you to enjoy it. It’s the ideal period to explore subjects\nthat fascinate you and find like minded people you enjoy working with.\nCollege is one of the best places to meet a potential co-founder. Build your network and become friends with people who\nyou could potentially work with in the future.\nAlso, don’t forget that you also have access to the entire world. Experts in all kinds of fields — technology, business,\nscience — are usually happy to help college students.\nFor more advice on how to spend your time during university read\nA Letter to College\nStudents\nby Michael Siebel.\nCan I Still be a Founder Without a Technical Background?\nYC has funded some startups that don’t have a technical co-founder. Roughly ten percent of the companies in every batch\nare founded by a non-technical founder. However, if you look at\nYC’s Top\nCompanies\nlist you’ll only see 3 companies founded by a non-technical\nfounder: Flexport, SnapDocs and UpKeep. If you are non-technical, we highly recommend finding a technical co-founder if\nyou’re building a software company. With someone technical on the team, you can move quickly and have a greater chance\nof success.\nHow Do I Meet a Cofounder?\nThe most common way people meet their co-founders is through school and work. We looked at the top performing YC\ncompanies to see how the founders connected with each other. Here’s the breakdown:\nYC’s TOP COMPANIES (68 entries)\nWe also looked at how women met their co-founders >>\nWOMEN FOUNDERS (78 entries)\n*\nA good way to get started is working on projects or extracurricular activities with your classmates.\nYC’s Startup School also recently launched a\nco-founder matching\nplatform\n. We pair you with co-founders based on your preferences for\ninterests, skills, location, and more. While we don’t suggest you immediately start a company with someone you meet on\nthis platform, it is a great way to connect with like-minded people who are interested in starting a company. You still\nneed to do the hard work of building a strong, trusting relationship.\nFor more on transforming a school project into business, read\nFrom Student Side Project to\nStartup\nby Paul Dornier co-founder of\nMeetingbird.\nHow do I decide on the idea?\nWhen landing on a concept for a startup, keep these three items in mind. But as we’ve said before, ideas can easily be\nchanged.\n1.\nIntention matters\nWe’ve found the best YC founders are solving problems that they or a loved one have personally faced. Think about\nwhy you want to solve the problem you’re solving. Will you care about it a decade from now?\n2.\nDon't follow the mainstream\nDoing something because it’s considered “cool'' will likely not be successful. When Coinbase was founded in 2012,\ncryptocurrencies were very much a fringe idea. Today it’s pretty likely your grandmother has heard of Bitcoin.\n3.\nSolve for needs\nIt’s tricky to balance an understanding of what people want versus what they need. Focus on what people are actually\nwilling to spend their time or money on, not just what they say they want.\nFor more, watch\nHow to Build the Future with YC’s Sam\nAltman\n.\nI’ve built something. How do I get my first users or customers?\n1.\nCollege campus.\nA great part of being on a college campus is that you have easy access to a large pool of potential customers who\nare likely to try something new.\n2.\nFriends and family.\nAsk everyone you know – aunts, grandparents, cousins, friends, acquaintances — to use your product. This will help\nyou determine your ideal demographic.\nShould I charge for my product?\nCharge for your product as soon as possible. The amount doesn’t need to be very much, but charging will help you\nunderstand how much value you’re creating and how much people are willing to spend on what you’re building.\nHow do I convince my parents that starting a startup is a smart idea?\nShare stories of successful young founders. John and Patrick Collison were 19 and 21 respectively when they started\nStripe. Alex Rodrigues of Embark Trucks was just 19 when he founded his company.\nInform them how startup experience is valuable, even if the company fails. There will always be corporate jobs and many\nYC founders join big companies when their startups shutter.\nAlso remind them startups are easier when you’re younger. It’s true you can start a startup at any age, but when you\nhave lots of energy and little commitments, it’s much easier to spend time building.\nShould I finish my degree or dropout and pursue my startup?\nWe tell most students to finish their degree. But if the only thing you can do is think about your startup and you’re\nspending all your free time working on it, it might be worth considering dropping out."
    }
  },
  {
    "name_blog": "Does co-founder matching work? ",
    "description_blog": "Does co-founder matching work? It did for these three YC companies. Read about how the founders of Seer, Sequin, and Kiwi Biosciences used YC's co-founder matching platform to complete their founding team.",
    "authors": [
      "Catheryn Li"
    ],
    "related_categories": [
      "Founder Stories",
      "Co-Founders"
    ],
    "page_url": "https://www.ycombinator.com/library/Cq-does-co-founder-matching-work",
    "content": {
      "table_of_contents": [],
      "whole_content": "We launched the co-founder matching platform to help founders find their co-founders. When you sign up, you tell us\nabout yourself and what you’re looking for, and we show you profiles that most closely match your ideal co-founder. If\nyou message a candidate and they accept, we match the two of you.\nCo-founder matching has also seen success with brand-new companies. Two pairs of co-founders met through the platform\nearlier this year, worked together on trial projects, became fully committed co-founders, applied to YC, and were\naccepted into the Summer 2021 batch!\nSequin\n(YC S21) is one of these companies. Vrinda Gupta had left her job after\nlaunching credit cards like the Chase Sapphire Reserve at Visa to work on a product to help women build credit. She\nspent a year working as a solo founder, and, in that time, raised a pre-seed and built an MVP. She knew she needed a\ntechnical co-founder who was mission driven, had fintech expertise, and was in it for the long haul.\nThat person was Mark Thomas. He had ten years of engineering experience at Paypal, cared deeply about gender equity, and\nspent six years as CTO of family-oriented startups. They had an instant connection and arranged to meet in person soon\nafter. Vrinda recalls, “We met the day after we matched, and the day after, and then the day after that.”\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nTogether, they went through YC’s batch this summer and\nraised\n$5.7M\n.\nKiwi Biosciences\n(YC S21) has a similar story. Anjie Liu started the company to\nsolve her own pains with irritable bowel syndrome. She had a founding scientist to tackle R&D, but wanted a co-founder\nto help her build a consumer brand and commercialize the product.\nWhen Anjie saw David Hachuel’s profile on YC co-founder matching, she knew that he was “exactly what [she] was looking\nfor.” David had previously sold a startup in the same space, and was immediately interested in her idea.\nThey took a very structured approach to co-founder matching. Both founders answered all 50 questions posed in\nFirst\nRound’s co-founder\nquestionnaire\n. They found deep\nalignment on “all the important things” (conflict resolution, vision for culture, etc.). When their month-long trial\nended and it came time to say go or no-go, the decision was easy.\nAnjie and David worked remotely for four months and finally met in person after getting into YC. They went through YC\nand\nraised\n$1.5M\n.\nWe’re ecstatic about the companies who met through our co-founder matching and we’re excited to see the platform\ncontinue to grow and support more awesome founders in the future!\nLooking for a co-founder? Check out the platform at\nwww.ycombinator.com/cofounder-matching\n."
    }
  },
  {
    "name_blog": "Billionaires build",
    "description_blog": "YC's Paul Graham shares advice for acing the YC interview.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/9M-billionaires-build",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/ace.html\nDecember 2020\nAs I was deciding what to write about next, I was surprised to find that two separate essays I'd been planning to write\nwere actually the same.\nThe first is about how to ace your Y Combinator interview. There has been so much nonsense written about this topic that\nI've been meaning for years to write something telling founders the truth.\nThe second is about something politicians sometimes say — that the only way to become a billionaire is by exploiting\npeople — and why this is mistaken.\nKeep reading, and you'll learn both simultaneously.\nI know the politicians are mistaken because it was my job to predict which people will become billionaires. I think I\ncan truthfully say that I know as much about how to do this as anyone. If the key to becoming a billionaire — the\ndefining feature of billionaires — was to exploit people, then I, as a professional billionaire scout, would surely\nrealize this and look for people who would be good at it, just as an NFL scout looks for speed in wide receivers.\nBut aptitude for exploiting people is not what Y Combinator looks for at all. In fact, it's the opposite of what they\nlook for. I'll tell you what they do look for, by explaining how to convince Y Combinator to fund you, and you can see\nfor yourself.\nWhat YC looks for, above all, is founders who understand some group of users and can make what they want. This is so\nimportant that it's YC's motto: \"Make something people want.\"\nA big company can to some extent force unsuitable products on unwilling customers, but a startup doesn't have the power\nto do that. A startup must sing for its supper, by making things that genuinely delight its customers. Otherwise it will\nnever get off the ground.\nHere's where things get difficult, both for you as a founder and for the YC partners trying to decide whether to fund\nyou. In a market economy, it's hard to make something people want that they don't already have. That's the great thing\nabout market economies. If other people both knew about this need and were able to satisfy it, they already would be,\nand there would be no room for your startup.\nWhich means the conversation during your YC interview will have to be about something new: either a new need, or a new\nway to satisfy one. And not just new, but uncertain. If it were certain that the need existed and that you could satisfy\nit, that certainty would be reflected in large and rapidly growing revenues, and you wouldn't be seeking seed funding.\nSo the YC partners have to guess both whether you've discovered a real need, and whether you'll be able to satisfy it.\nThat's what they are, at least in this part of their job: professional guessers. They have 1001 heuristics for doing\nthis, and I'm not going to tell you all of them, but I'm happy to tell you the most important ones, because these can't\nbe faked; the only way to \"hack\" them would be to do what you should be doing anyway as a founder.\nhe first thing the partners will try to figure out, usually, is whether what you're making will ever be something a lot\nof people want. It doesn't have to be something a lot of people want now. The product and the market will both evolve,\nand will influence each other's evolution. But in the end there has to be something with a huge market. That's what the\npartners will be trying to figure out: is there a path to a huge market? [1]\nSometimes it's obvious there will be a huge market. If\nBoom\nmanages to ship an airliner\nat all, international airlines will have to buy it. But usually it's not obvious. Usually the path to a huge market is\nby growing a small market. This idea is important enough that it's worth coining a phrase for, so let's call one of\nthese small but growable markets a \"larval market.\"\nThe perfect example of a larval market might be Apple's market when they were founded in 1976. In 1976, not many people\nwanted their own computer. But more and more started to want one, till now every 10 year old on the planet wants a\ncomputer (but calls it a \"phone\").\nThe ideal combination is the group of founders who are\n\"living in the future\"\nin the sense of being at the leading edge of some kind of change, and who are building something they themselves want.\nMost super-successful startups are of this type. Steve Wozniak wanted a computer. Mark Zuckerberg wanted to engage\nonline with his college friends. Larry and Sergey wanted to find things on the web. All these founders were building\nthings they and their peers wanted, and the fact that they were at the leading edge of change meant that more people\nwould want these things in the future.\nBut although the ideal larval market is oneself and one's peers, that's not the only kind. A larval market might also be\nregional, for example. You build something to serve one location, and then expand to others.\nThe crucial feature of the initial market is that it exist. That may seem like an obvious point, but the lack of it is\nthe biggest flaw in most startup ideas. There have to be some people who want what you're building right now, and want\nit so urgently that they're willing to use it, bugs and all, even though you're a small company they've never heard of.\nThere don't have to be many, but there have to be some. As long as you have some users, there are straightforward ways\nto get more: build new features they want, seek out more people like them, get them to refer you to their friends, and\nso on. But these techniques all require some initial seed group of users.\nSo this is one thing the YC partners will almost certainly dig into during your interview. Who are your first users\ngoing to be, and how do you know they want this? If I had to decide whether to fund startups based on a single question,\nit would be \"How do you know people want this?\"\nThe most convincing answer is \"Because we and our friends want it.\" It's even better when this is followed by the news\nthat you've already built a prototype, and even though it's very crude, your friends are using it, and it's spreading by\nword of mouth. If you can say that and you're not lying, the partners will switch from default no to default yes.\nMeaning you're in unless there's some other disqualifying flaw.\nThat is a hard standard to meet, though. Airbnb didn't meet it. They had the first part. They had made something they\nthemselves wanted. But it wasn't spreading. So don't feel bad if you don't hit this gold standard of convincingness. If\nAirbnb didn't hit it, it must be too high.\nIn practice, the YC partners will be satisfied if they feel that you have a deep understanding of your users' needs. And\nthe Airbnbs did have that. They were able to tell us all about what motivated hosts and guests. They knew from\nfirst-hand experience, because they'd been the first hosts. We couldn't ask them a question they didn't know the answer\nto. We ourselves were not very excited about the idea as users, but we knew this didn't prove anything, because there\nwere lots of successful startups we hadn't been excited about as users. We were able to say to ourselves \"They seem to\nknow what they're talking about. Maybe they're onto something. It's not growing yet, but maybe they can figure out how\nto make it grow during YC.\" Which they did, about three weeks into the batch.\nThe best thing you can do in a YC interview is to teach the partners about your users. So if you want to prepare for\nyour interview, one of the best ways to do it is to go talk to your users and find out exactly what they're thinking.\nWhich is what you should be doing anyway.\nThis may sound strangely credulous, but the YC partners want to rely on the founders to tell them about the market.\nThink about how VCs typically judge the potential market for an idea. They're not ordinarily domain experts themselves,\nso they forward the idea to someone who is, and ask for their opinion. YC doesn't have time to do this, but if the YC\npartners can convince themselves that the founders both (a) know what they're talking about and (b) aren't lying, they\ndon't need outside domain experts. They can use the founders themselves as domain experts when evaluating their own\nidea.\nThis is why YC interviews aren't pitches. To give as many founders as possible a chance to get funded, we made\ninterviews as short as we could: 10 minutes. That is not enough time for the partners to figure out, through the\nindirect evidence in a pitch, whether you know what you're talking about and aren't lying. They need to dig in and ask\nyou questions. There's not enough time for sequential access. They need random access. [2]\nThe worst advice I ever heard about how to succeed in a YC interview is that you should take control of the interview\nand make sure to deliver the message you want to. In other words, turn the interview into a pitch. ⟨elaborate\nexpletive⟩. It is so annoying when people try to do that. You ask them a question, and instead of answering it, they\ndeliver some obviously prefabricated blob of pitch. It eats up 10 minutes really fast.\nThere is no one who can give you accurate advice about what to do in a YC interview except a current or former YC\npartner. People who've merely been interviewed, even successfully, have no idea of this, but interviews take all sorts\nof different forms depending on what the partners want to know about most. Sometimes they're all about the founders,\nother times they're all about the idea. Sometimes some very narrow aspect of the idea. Founders sometimes walk away from\ninterviews complaining that they didn't get to explain their idea completely. True, but they explained enough.\nSince a YC interview consists of questions, the way to do it well is to answer them well. Part of that is answering them\ncandidly. The partners don't expect you to know everything. But if you don't know the answer to a question, don't try to\nbullshit your way out of it. The partners, like most experienced investors, are professional bullshit detectors, and you\nare (hopefully) an amateur bullshitter. And if you try to bullshit them and fail, they may not even tell you that you\nfailed. So it's better to be honest than to try to sell them. If you don't know the answer to a question, say you don't,\nand tell them how you'd go about finding it, or tell them the answer to some related question.\nIf you're asked, for example, what could go wrong, the worst possible answer is \"nothing.\" Instead of convincing them\nthat your idea is bullet-proof, this will convince them that you're a fool or a liar. Far better to go into gruesome\ndetail. That's what experts do when you ask what could go wrong. The partners know that your idea is risky. That's what\na good bet looks like at this stage: a tiny probability of a huge outcome.\nDitto if they ask about competitors. Competitors are rarely what kills startups. Poor execution does. But you should\nknow who your competitors are, and tell the YC partners candidly what your relative strengths and weaknesses are.\nBecause the YC partners know that competitors don't kill startups, they won't hold competitors against you too much.\nThey will, however, hold it against you if you seem either to be unaware of competitors, or to be minimizing the threat\nthey pose. They may not be sure whether you're clueless or lying, but they don't need to be.\nThe partners don't expect your idea to be perfect. This is seed investing. At this stage, all they can expect are\npromising hypotheses. But they do expect you to be thoughtful and honest. So if trying to make your idea seem perfect\ncauses you to come off as glib or clueless, you've sacrificed something you needed for something you didn't.\nIf the partners are sufficiently convinced that there's a path to a big market, the next question is whether you'll be\nable to find it. That in turn depends on three things: the general qualities of the founders, their specific expertise\nin this domain, and the relationship between them. How determined are the founders? Are they good at building things?\nAre they resilient enough to keep going when things go wrong? How strong is their friendship?\nThough the Airbnbs only did ok in the idea department, they did spectacularly well in this department. The story of how\nthey'd funded themselves by making Obama- and McCain-themed breakfast cereal was the single most important factor in our\ndecision to fund them. They didn't realize it at the time, but what seemed to them an irrelevant story was in fact\nfabulously good evidence of their qualities as founders. It showed they were resourceful and determined, and could work\ntogether.\nIt wasn't just the cereal story that showed that, though. The whole interview showed that they cared. They weren't doing\nthis just for the money, or because startups were cool. The reason they were working so hard on this company was because\nit was their project. They had discovered an interesting new idea, and they just couldn't let it go.\nMundane as it sounds, that's the most powerful motivator of all, not just in startups, but in most ambitious\nundertakings: to be\ngenuinely interested\nin what you're building. This is what\nreally drives billionaires, or at least the ones who become billionaires from starting companies. The company is their\nproject.\nOne thing few people realize about billionaires is that all of them could have stopped sooner. They could have gotten\nacquired, or found someone else to run the company. Many founders do. The ones who become really rich are the ones who\nkeep working. And what makes them keep working is not just money. What keeps them working is the same thing that keeps\nanyone else working when they could stop if they wanted to: that there's nothing else they'd rather do.\nThat, not exploiting people, is the defining quality of people who become billionaires from starting companies. So\nthat's what YC looks for in founders: authenticity. People's motives for starting startups are usually mixed. They're\nusually doing it from some combination of the desire to make money, the desire to seem cool, genuine interest in the\nproblem, and unwillingness to work for someone else. The last two are more powerful motivators than the first two. It's\nok for founders to want to make money or to seem cool. Most do. But if the founders seem like they're doing it\njust\nto\nmake money or\njust\nto seem cool, they're not likely to succeed on a big scale. The founders who are doing it for the\nmoney will take the first sufficiently large acquisition offer, and the ones who are doing it to seem cool will rapidly\ndiscover that there are much less painful ways of seeming cool. [3]\nY Combinator certainly sees founders whose m.o. is to exploit people. YC is a magnet for them, because they want the YC\nbrand. But when the YC partners detect someone like that, they reject them. If bad people made good founders, the YC\npartners would face a moral dilemma. Fortunately they don't, because bad people make bad founders. This exploitative\ntype of founder is not going to succeed on a large scale, and in fact probably won't even succeed on a small one,\nbecause they're always going to be taking shortcuts. They see YC itself as a shortcut.\nTheir exploitation usually begins with their own cofounders, which is disastrous, since the cofounders' relationship is\nthe foundation of the company. Then it moves on to the users, which is also disastrous, because the sort of early\nadopters a successful startup wants as its initial users are the hardest to fool. The best this kind of founder can hope\nfor is to keep the edifice of deception tottering along until some acquirer can be tricked into buying it. But that kind\nof acquisition is never very big. [4]\nIf professional billionaire scouts know that exploiting people is not the skill to look for, why do some politicians\nthink this is the defining quality of billionaires?\nI think they start from the feeling that it's wrong that one person could have so much more money than another. It's\nunderstandable where that feeling comes from. It's in our DNA, and even in the DNA of other species.\nIf they limited themselves to saying that it made them feel bad when one person had so much more money than other\npeople, who would disagree? It makes me feel bad too, and I think people who make a lot of money have a moral obligation\nto use it for the common good. The mistake they make is to jump from feeling bad that some people are much richer than\nothers to the conclusion that there's no legitimate way to make a very large amount of money. Now we're getting into\nstatements that are not only falsifiable, but false.\nThere are certainly some people who become rich by doing bad things. But there are also plenty of people who behave\nbadly and don't make that much from it. There is no correlation — in fact, probably an inverse correlation — between how\nbadly you behave and how much money you make.\nThe greatest danger of this nonsense may not even be that it sends policy astray, but that it misleads ambitious people.\nCan you imagine a better way to destroy social mobility than by telling poor kids that the way to get rich is by\nexploiting people, while the rich kids know, from having watched the preceding generation do it, how it's really done?\nI'll tell you how it's really done, so you can at least tell your own kids the truth. It's all about users. The most\nreliable way to become a billionaire is to start a company that\ngrows fast\n, and the\nway to grow fast is to make what users want. Newly started startups have no choice but to delight users, or they'll\nnever even get rolling. But this never stops being the lodestar, and bigger companies take their eye off it at their\nperil. Stop delighting users, and eventually someone else will.\nUsers are what the partners want to know about in YC interviews, and what I want to know about when I talk to founders\nthat we funded ten years ago and who are billionaires now. What do users want? What new things could you build for them?\nFounders who've become billionaires are always eager to talk about that topic. That's how they became billionaires.\nNotes\n[1] The YC partners have so much practice doing this that they sometimes see paths that the founders themselves\nhaven't seen yet. The partners don't try to seem skeptical, as buyers in transactions often do to increase their\nleverage. Although the founders feel their job is to convince the partners of the potential of their idea, these roles\nare not infrequently reversed, and the founders leave the interview feeling their idea has more potential than they\nrealized.\n[2] In practice, 7 minutes would be enough. You rarely change your mind at minute 8. But 10 minutes is socially\nconvenient.\n[3] I myself took the first sufficiently large acquisition offer in my first startup, so I don't blame founders for\ndoing this. There's nothing wrong with starting a startup to make money. You need to make money somehow, and for some\npeople startups are the most efficient way to do it. I'm just saying that these are not the startups that get really\nbig.\n[4] Not these days, anyway. There were some big ones during the Internet Bubble, and indeed some big IPOs.\nThanks\nto Trevor Blackwell, Jessica Livingston, Robert Morris, Geoff Ralston, and Harj Taggar for reading drafts of\nthis."
    }
  },
  {
    "name_blog": "How to convince investors",
    "description_blog": "You need three things: formidable founders, a promising market, and some evidence of success so far.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/98-how-to-convince-investors",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/convince.html\nAugust 2013\nWhen people hurt themselves lifting heavy things, it's usually because they try to lift with their back. The right way\nto lift heavy things is to let your legs do the work. Inexperienced founders make the same mistake when trying to\nconvince investors. They try to convince with their pitch. Most would be better off if they let their startup do the\nwork — if they started by understanding why their startup is worth investing in, then simply explained this well to\ninvestors.\nInvestors are looking for startups that will be very successful. But that test is not as simple as it sounds. In\nstartups, as in a lot of other domains, the distribution of outcomes follows a power law, but in startups the curve is\nstartlingly steep. The big successes are so big they\ndwarf\nthe rest. And since\nthere are only a handful each year (the conventional wisdom is 15), investors treat \"big success\" as if it were binary.\nMost are interested in you if you seem like you have a chance, however small, of being one of the 15 big successes, and\notherwise not. [1]\n(There are a handful of angels who'd be interested in a company with a high probability of being moderately successful.\nBut angel investors like big successes too.)\nHow do you seem like you'll be one of the big successes? You need three things: formidable founders, a promising market,\nand (usually) some evidence of success so far.\nFormidable\nThe most important ingredient is formidable founders. Most investors decide in the first few minutes whether you seem\nlike a winner or a loser, and once their opinion is set it's hard to change. [2] Every startup has reasons both to\ninvest and not to invest. If investors think you're a winner they focus on the former, and if not they focus on the\nlatter. For example, it might be a rich market, but with a slow sales cycle. If investors are impressed with you as\nfounders, they say they want to invest because it's a rich market, and if not, they say they can't invest because of the\nslow sales cycle.\nThey're not necessarily trying to mislead you. Most investors are genuinely unclear in their own minds why they like or\ndislike startups. If you seem like a winner, they'll like your idea more. But don't be too smug about this weakness of\ntheirs, because you have it too; almost everyone does.\nThere is a role for ideas of course. They're fuel for the fire that starts with liking the founders. Once investors like\nyou, you'll see them reaching for ideas: they'll be saying \"yes, and you could also do x.\" (Whereas when they don't like\nyou, they'll be saying \"but what about y?\")\nBut the foundation of convincing investors is to seem formidable, and since this isn't a word most people use in\nconversation much, I should explain what it means. A formidable person is one who seems like they'll get what they want,\nregardless of whatever obstacles are in the way. Formidable is close to confident, except that someone could be\nconfident and mistaken. Formidable is roughly justifiably confident.\nThere are a handful of people who are really good at seeming formidable — some because they actually are very formidable\nand just let it show, and others because they are more or less con artists. [3] But most founders, including many who\nwill go on to start very successful companies, are not that good at seeming formidable the first time they try\nfundraising. What should they do? [4]\nWhat they should not do is try to imitate the swagger of more experienced founders. Investors are not always that good\nat judging technology, but they're good at judging confidence. If you try to act like something you're not, you'll just\nend up in an uncanny valley. You'll depart from sincere, but never arrive at convincing.\nTruth\nThe way to seem most formidable as an inexperienced founder is to stick to the truth. How formidable you seem isn't a\nconstant. It varies depending on what you're saying. Most people can seem confident when they're saying \"one plus one is\ntwo,\" because they know it's true. The most diffident person would be puzzled and even slightly contemptuous if they\ntold a VC \"one plus one is two\" and the VC reacted with skepticism. The magic ability of people who are good at seeming\nformidable is that they can do this with the sentence \"we're going to make a billion dollars a year.\" But you can do the\nsame, if not with that sentence with some fairly impressive ones, so long as you convince yourself first.\nThat's the secret. Convince yourself that your startup is worth investing in, and then when you explain this to\ninvestors they'll believe you. And by convince yourself, I don't mean play mind games with yourself to boost your\nconfidence. I mean truly evaluate whether your startup is worth investing in. If it isn't, don't try to raise money.\n[5] But if it is, you'll be telling the truth when you tell investors it's worth investing in, and they'll sense that.\nYou don't have to be a smooth presenter if you understand something well and tell the truth about it.\nTo evaluate whether your startup is worth investing in, you have to be a domain expert. If you're not a domain expert,\nyou can be as convinced as you like about your idea, and it will seem to investors no more than an instance of the\nDunning-Kruger effect. Which in fact it will usually be. And investors can tell fairly quickly whether you're a domain\nexpert by how well you answer their questions. Know everything about your market. [6]\nWhy do founders persist in trying to convince investors of things they're not convinced of themselves? Partly because\nwe've all been trained to.\nWhen my friends Robert Morris and Trevor Blackwell were in grad school, one of their fellow students was on the\nreceiving end of a question from their faculty advisor that we still quote today. When the unfortunate fellow got to his\nlast slide, the professor burst out:\nWhich one of these conclusions do you actually believe?\nOne of the artifacts of the way schools are organized is that we all get trained to talk even when we have nothing to\nsay. If you have a ten page paper due, then ten pages you must write, even if you only have one page of ideas. Even if\nyou have no ideas. You have to produce something. And all too many startups go into fundraising in the same spirit. When\nthey think it's time to raise money, they try gamely to make the best case they can for their startup. Most never think\nof pausing beforehand to ask whether what they're saying is actually convincing, because they've all been trained to\ntreat the need to present as a given — as an area of fixed size, over which however much truth they have must needs be\nspread, however thinly.\nThe time to raise money is not when you need it, or when you reach some artificial deadline like a Demo Day. It's when\nyou can convince investors, and not before. [7]\nAnd unless you're a good con artist, you'll never convince investors if you're not convinced yourself. They're far\nbetter at detecting bullshit than you are at producing it, even if you're producing it unknowingly. If you try to\nconvince investors before you've convinced yourself, you'll be wasting both your time.\nBut pausing first to convince yourself will do more than save you from wasting your time. It will force you to organize\nyour thoughts. To convince yourself that your startup is worth investing in, you'll have to figure out why it's worth\ninvesting in. And if you can do that you'll end up with more than added confidence. You'll also have a provisional\nroadmap of how to succeed.\nMarket\nNotice I've been careful to talk about whether a startup is worth investing in, rather than whether it's going to\nsucceed. No one knows whether a startup is going to succeed. And it's a good thing for investors that this is so,\nbecause if you could know in advance whether a startup would succeed, the stock price would already be the future price,\nand there would be no room for investors to make money. Startup investors know that every investment is a bet, and\nagainst pretty long odds.\nSo to prove you're worth investing in, you don't have to prove you're going to succeed, just that you're a sufficiently\ngood bet. What makes a startup a sufficiently good bet? In addition to formidable founders, you need a plausible path to\nowning a big piece of a big market. Founders think of startups as ideas, but investors think of them as markets. If\nthere are x number of customers who'd pay an average of $y per year for what you're making, then the total addressable\nmarket, or TAM, of your company is $xy. Investors don't expect you to collect all that money, but it's an upper bound on\nhow big you can get.\nYour target market has to be big, and it also has to be capturable by you. But the market doesn't have to be big yet,\nnor do you necessarily have to be in it yet. Indeed, it's often better to start in a\nsmall\nmarket that will either turn into a big one or from which you can move into a\nbig one. There just has to be some plausible sequence of hops that leads to dominating a big market a few years down the\nline.\nThe standard of plausibility varies dramatically depending on the age of the startup. A three month old company at Demo\nDay only needs to be a promising experiment that's worth funding to see how it turns out. Whereas a two year old company\nraising a series A round needs to be able to show the experiment worked. [8]\nBut every company that gets really big is \"lucky\" in the sense that their growth is due mostly to some external wave\nthey're riding, so to make a convincing case for becoming huge, you have to identify some specific trend you'll benefit\nfrom. Usually you can find this by asking \"why now?\" If this is such a great idea, why hasn't someone else already done\nit? Ideally the answer is that it only recently became a good idea, because something changed, and no one else has\nnoticed yet.\nMicrosoft for example was not going to grow huge selling Basic interpreters. But by starting there they were perfectly\npoised to expand up the stack of microcomputer software as microcomputers grew powerful enough to support one. And\nmicrocomputers turned out to be a really huge wave, bigger than even the most optimistic observers would have predicted\nin 1975.\nBut while Microsoft did really well and there is thus a temptation to think they would have seemed a great bet a few\nmonths in, they probably didn't. Good, but not great. No company, however successful, ever looks more than a pretty good\nbet a few months in. Microcomputers turned out to be a big deal, and Microsoft both executed well and got lucky. But it\nwas by no means obvious that this was how things would play out. Plenty of companies seem as good a bet a few months in.\nI don't know about startups in general, but at least half the startups we fund could make as good a case as Microsoft\ncould have for being on a path to dominating a large market. And who can reasonably expect more of a startup than that?\nRejection\nIf you can make as good a case as Microsoft could have, will you convince investors? Not always. A lot of VCs would have\nrejected Microsoft. [9] Certainly some rejected Google. And getting rejected will put you in a slightly awkward\nposition, because as you'll see when you start fundraising, the most common question you'll get from investors will be\n\"who else is investing?\" What do you say if you've been fundraising for a while and no one has committed yet? [10]\nThe people who are really good at acting formidable often solve this problem by giving investors the impression that\nwhile no investors have committed yet, several are about to. This is arguably a permissible tactic. It's slightly\ndickish of investors to care more about who else is investing than any other aspect of your startup, and misleading them\nabout how far along you are with other investors seems the complementary countermove. It's arguably an instance of\nscamming a scammer. But I don't recommend this approach to most founders, because most founders wouldn't be able to\ncarry it off. This is the single most common lie told to investors, and you have to be really good at lying to tell\nmembers of some profession the most common lie they're told.\nIf you're not a master of negotiation (and perhaps even if you are) the best solution is to tackle the problem head-on,\nand to explain why investors have turned you down and why they're mistaken. If you know you're on the right track, then\nyou also know why investors were wrong to reject you. Experienced investors are well aware that the best ideas are also\nthe scariest. They all know about the VCs who rejected Google. If instead of seeming evasive and ashamed about having\nbeen turned down (and thereby implicitly agreeing with the verdict) you talk candidly about what scared investors about\nyou, you'll seem more confident, which they like, and you'll probably also do a better job of presenting that aspect of\nyour startup. At the very least, that worry will now be out in the open instead of being a gotcha left to be discovered\nby the investors you're currently talking to, who will be proud of and thus attached to their discovery. [11]\nThis strategy will work best with the best investors, who are both hard to bluff and who already believe most other\ninvestors are conventional-minded drones doomed always to miss the big outliers. Raising money is not like applying to\ncollege, where you can assume that if you can get into MIT, you can also get into Foobar State. Because the best\ninvestors are much smarter than the rest, and the best startup ideas look initially like\nbad\nideas\n, it's not uncommon for a startup to be rejected by all the VCs\nexcept the best ones. That's what happened to Dropbox. Y Combinator started in Boston, and for the first 3 years we ran\nalternating batches in Boston and Silicon Valley. Because Boston investors were so few and so timid, we used to ship\nBoston batches out for a second Demo Day in Silicon Valley. Dropbox was part of a Boston batch, which means all those\nBoston investors got the first look at Dropbox, and none of them closed the deal. Yet another backup and syncing thing,\nthey all thought. A couple weeks later, Dropbox raised a series A round from Sequoia. [12]\nDifferent\nNot understanding that investors view investments as bets combines with the ten page paper mentality to prevent founders\nfrom even considering the possibility of being certain of what they're saying. They think they're trying to convince\ninvestors of something very uncertain — that their startup will be huge — and convincing anyone of something like that\nmust obviously entail some wild feat of salesmanship. But in fact when you raise money you're trying to convince\ninvestors of something so much less speculative — whether the company has all the elements of a good bet — that you can\napproach the problem in a qualitatively different way. You can convince yourself, then convince them.\nAnd when you convince them, use the same matter-of-fact language you used to convince yourself. You wouldn't use vague,\ngrandiose marketing-speak among yourselves. Don't use it with investors either. It not only doesn't work on them, but\nseems a mark of incompetence. Just be concise. Many investors explicitly use that as a test, reasoning (correctly) that\nif you can't explain your plans concisely, you don't really understand them. But even investors who don't have a rule\nabout this will be bored and frustrated by unclear explanations. [13]\nSo here's the recipe for impressing investors when you're not already good at seeming formidable:\nMake something worth investing in.\nUnderstand why it's worth investing in.\nExplain that clearly to investors.\nIf you're saying something you know is true, you'll seem confident when you're saying it. Conversely, never let pitching\ndraw you into bullshitting. As long as you stay on the territory of truth, you're strong. Make the truth good, then just\ntell it.\nNotes\n[1] There's no reason to believe this number is a constant. In fact it's our explicit goal at Y Combinator to increase\nit, by encouraging people to start startups who otherwise wouldn't have.\n[2] Or more precisely, investors decide whether you're a loser or possibly a winner. If you seem like a winner, they\nmay then, depending on how much you're raising, have several more meetings with you to test whether that initial\nimpression holds up.\nBut if you seem like a loser they're done, at least for the next year or so. And when they decide you're a loser they\nusually decide in way less than the 50 minutes they may have allotted for the first meeting. Which explains the\nastonished stories one always hears about VC inattentiveness. How could these people make investment decisions well when\nthey're checking their messages during startups' presentations? The solution to that mystery is that they've already\nmade the decision.\n[3] The two are not mutually exclusive. There are people who are both genuinely formidable, and also really good at\nacting that way.\n[4] How can people who will go on to create giant companies not seem formidable early on? I think the main reason is\nthat their experience so far has trained them to keep their wings folded, as it were. Family, school, and jobs encourage\ncooperation, not conquest. And it's just as well they do, because even being Genghis Khan is probably 99% cooperation.\nBut the result is that most people emerge from the tube of their upbringing in their early twenties compressed into the\nshape of the tube. Some find they have wings and start to spread them. But this takes a few years. In the beginning even\nthey don't know yet what they're capable of.\n[5] In fact, change what you're doing. You're investing your own time in your startup. If you're not convinced that\nwhat you're working on is a sufficiently good bet, why are you even working on that?\n[6] When investors ask you a question you don't know the answer to, the best response is neither to bluff nor give up,\nbut instead to explain how you'd figure out the answer. If you can work out a preliminary answer on the spot, so much\nthe better, but explain that's what you're doing.\n[7] At YC we try to ensure startups are ready to raise money on Demo Day by encouraging them to ignore investors and\ninstead focus on their companies till about a week before. That way most reach the stage where they're sufficiently\nconvincing well before Demo Day. But not all do, so we also give any startup that wants to the option of deferring to a\nlater Demo Day.\n[8] Founders are often surprised by how much harder it is to raise the next round. There is a qualitative difference\nin investors' attitudes. It's like the difference between being judged as a kid and as an adult. The next time you raise\nmoney, it's not enough to be promising. You have to be delivering results.\nSo although it works well to show growth graphs at either stage, investors treat them differently. At three months, a\ngrowth graph is mostly evidence that the founders are effective. At two years, it has to be evidence of a promising\nmarket and a company tuned to exploit it.\n[9] By this I mean that if the present day equivalent of the 3 month old Microsoft presented at a Demo Day, there\nwould be investors who turned them down. Microsoft itself didn't raise outside money, and indeed the venture business\nbarely existed when they got started in 1975.\n[10] The best investors rarely care who else is investing, but mediocre investors almost all do. So you can use this\nquestion as a test of investor quality.\n[11] To use this technique, you'll have to find out why investors who rejected you did so, or at least what they claim\nwas the reason. That may require asking, because investors don't always volunteer a lot of detail. Make it clear when\nyou ask that you're not trying to dispute their decision — just that if there is some weakness in your plans, you need\nto know about it. You won't always get a real reason out of them, but you should at least try.\n[12] Dropbox wasn't rejected by all the East Coast VCs. There was one firm that wanted to invest but tried to lowball\nthem.\n[13] Alfred Lin points out that it's doubly important for the explanation of a startup to be clear and concise,\nbecause it has to convince at one remove: it has to work not just on the partner you talk to, but when that partner\nre-tells it to colleagues.\nWe consciously optimize for this at YC. When we work with founders create a Demo Day pitch, the last step is to imagine\nhow an investor would sell it to colleagues.\nThanks\nto Marc Andreessen, Sam Altman, Patrick Collison, Ron Conway, Chris Dixon, Alfred Lin, Ben Horowitz, Steve\nHuffman, Jessica Livingston, Greg Mcadoo, Andrew Mason, Geoff Ralston, Yuri Sagalov, Emmett Shear, Rajat Suri, Garry\nTan, Albert Wenger, Fred Wilson, and Qasar Younis for reading drafts of this."
    }
  },
  {
    "name_blog": "Do things that don't scale",
    "description_blog": "Startups take off because the founders make them take off. Almost all startups are fragile initially. It's important to recruit users manually.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/96-do-things-that-don-t-scale",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/ds.html\nJuly 2013\nOne of the most common types of advice we give at Y Combinator is to do things that don't scale. A lot of would-be\nfounders believe that startups either take off or don't. You build something, make it available, and if you've made a\nbetter mousetrap, people beat a path to your door as promised. Or they don't, in which case the market must not exist.\n[1]\nActually startups take off because the founders make them take off. There may be a handful that just grew by themselves,\nbut usually it takes some sort of push to get them going. A good metaphor would be the cranks that car engines had\nbefore they got electric starters. Once the engine was going, it would keep going, but there was a separate and\nlaborious process to get it going.\nRecruit\nThe most common unscalable thing founders have to do at the start is to recruit users manually. Nearly all startups have\nto. You can't wait for users to come to you. You have to go out and get them.\nStripe is one of the most successful startups we've funded, and the problem they solved was an urgent one. If anyone\ncould have sat back and waited for users, it was Stripe. But in fact they're famous within YC for aggressive early user\nacquisition.\nStartups building things for other startups have a big pool of potential users in the other companies we've funded, and\nnone took better advantage of it than Stripe. At YC we use the term \"Collison installation\" for the technique they\ninvented. More diffident founders ask \"Will you try our beta?\" and if the answer is yes, they say \"Great, we'll send you\na link.\" But the Collison brothers weren't going to wait. When anyone agreed to try Stripe they'd say \"Right then, give\nme your laptop\" and set them up on the spot.\nThere are two reasons founders resist going out and recruiting users individually. One is a combination of shyness and\nlaziness. They'd rather sit at home writing code than go out and talk to a bunch of strangers and probably be rejected\nby most of them. But for a startup to succeed, at least one founder (usually the CEO) will have to spend a lot of time\non sales and marketing. [2]\nThe other reason founders ignore this path is that the absolute numbers seem so small at first. This can't be how the\nbig, famous startups got started, they think. The mistake they make is to underestimate the power of compound growth. We\nencourage every startup to measure their progress by weekly\ngrowth rate\n. If you\nhave 100 users, you need to get 10 more next week to grow 10% a week. And while 110 may not seem much better than 100,\nif you keep growing at 10% a week you'll be surprised how big the numbers get. After a year you'll have 14,000 users,\nand after 2 years you'll have 2 million.\nYou'll be doing different things when you're acquiring users a thousand at a time, and growth has to slow down\neventually. But if the market exists you can usually start by recruiting users manually and then gradually switch to\nless manual methods. [3]\nAirbnb is a classic example of this technique. Marketplaces are so hard to get rolling that you should expect to take\nheroic measures at first. In Airbnb's case, these consisted of going door to door in New York, recruiting new users and\nhelping existing ones improve their listings. When I remember the Airbnbs during YC, I picture them with rolly bags,\nbecause when they showed up for tuesday dinners they'd always just flown back from somewhere.\nFragile\nAirbnb now seems like an unstoppable juggernaut, but early on it was so fragile that about 30 days of going out and\nengaging in person with users made the difference between success and failure.\nThat initial fragility was not a unique feature of Airbnb. Almost all startups are fragile initially. And that's one of\nthe biggest things inexperienced founders and investors (and reporters and know-it-alls on forums) get wrong about them.\nThey unconsciously judge larval startups by the standards of established ones. They're like someone looking at a newborn\nbaby and concluding \"there's no way this tiny creature could ever accomplish anything.\"\nIt's harmless if reporters and know-it-alls dismiss your startup. They always get things wrong. It's even ok if\ninvestors dismiss your startup; they'll change their minds when they see growth. The big danger is that you'll dismiss\nyour startup yourself. I've seen it happen. I often have to encourage founders who don't see the full potential of what\nthey're building. Even Bill Gates made that mistake. He returned to Harvard for the fall semester after starting\nMicrosoft. He didn't stay long, but he wouldn't have returned at all if he'd realized Microsoft was going to be even a\nfraction of the size it turned out to be. [4]\nThe question to ask about an early stage startup is not \"is this company taking over the world?\" but \"how big could this\ncompany get if the founders did the right things?\" And the right things often seem both laborious and inconsequential at\nthe time. Microsoft can't have seemed very impressive when it was just a couple guys in Albuquerque writing Basic\ninterpreters for a market of a few thousand hobbyists (as they were then called), but in retrospect that was the optimal\npath to dominating microcomputer software. And I know Brian Chesky and Joe Gebbia didn't feel like they were en route to\nthe big time as they were taking \"professional\" photos of their first hosts' apartments. They were just trying to\nsurvive. But in retrospect that too was the optimal path to dominating a big market.\nHow do you find users to recruit manually? If you build something to solve\nyour own\nproblems\n, then you only have to find your peers, which is usually\nstraightforward. Otherwise you'll have to make a more deliberate effort to locate the most promising vein of users. The\nusual way to do that is to get some initial set of users by doing a comparatively untargeted launch, and then to observe\nwhich kind seem most enthusiastic, and seek out more like them. For example, Ben Silbermann noticed that a lot of the\nearliest Pinterest users were interested in design, so he went to a conference of design bloggers to recruit users, and\nthat worked well. [5]\nDelight\nYou should take extraordinary measures not just to acquire users, but also to make them happy. For as long as they could\n(which turned out to be surprisingly long), Wufoo sent each new user a hand-written thank you note. Your first users\nshould feel that signing up with you was one of the best choices they ever made. And you in turn should be racking your\nbrains to think of new ways to delight them.\nWhy do we have to teach startups this? Why is it counterintuitive for founders? Three reasons, I think.\nOne is that a lot of startup founders are trained as engineers, and customer service is not part of the training of\nengineers. You're supposed to build things that are robust and elegant, not be slavishly attentive to individual users\nlike some kind of salesperson. Ironically, part of the reason engineering is traditionally averse to handholding is that\nits traditions date from a time when engineers were less powerful — when they were only in charge of their narrow domain\nof building things, rather than running the whole show. You can be ornery when you're Scotty, but not when you're Kirk.\nAnother reason founders don't focus enough on individual customers is that they worry it won't scale. But when founders\nof larval startups worry about this, I point out that in their current state they have nothing to lose. Maybe if they go\nout of their way to make existing users super happy, they'll one day have too many to do so much for. That would be a\ngreat problem to have. See if you can make it happen. And incidentally, when it does, you'll find that delighting\ncustomers scales better than you expected. Partly because you can usually find ways to make anything scale more than you\nwould have predicted, and partly because delighting customers will by then have permeated your culture.\nI have never once seen a startup lured down a blind alley by trying too hard to make their initial users happy.\nBut perhaps the biggest thing preventing founders from realizing how attentive they could be to their users is that\nthey've never experienced such attention themselves. Their standards for customer service have been set by the companies\nthey've been customers of, which are mostly big ones. Tim Cook doesn't send you a hand-written note after you buy a\nlaptop. He can't. But you can. That's one advantage of being small: you can provide a level of service no big company\ncan. [6]\nOnce you realize that existing conventions are not the upper bound on user experience, it's interesting in a very\npleasant way to think about how far you could go to delight your users.\nExperience\nI was trying to think of a phrase to convey how extreme your attention to users should be, and I realized Steve Jobs had\nalready done it: insanely great. Steve wasn't just using \"insanely\" as a synonym for \"very.\" He meant it more literally\n— that one should focus on quality of execution to a degree that in everyday life would be considered pathological.\nAll the most successful startups we've funded have, and that probably doesn't surprise would-be founders. What novice\nfounders don't get is what insanely great translates to in a larval startup. When Steve Jobs started using that phrase,\nApple was already an established company. He meant the Mac (and its documentation and even packaging — such is the\nnature of obsession) should be insanely well designed and manufactured. That's not hard for engineers to grasp. It's\njust a more extreme version of designing a robust and elegant product.\nWhat founders have a hard time grasping (and Steve himself might have had a hard time grasping) is what insanely great\nmorphs into as you roll the time slider back to the first couple months of a startup's life. It's not the product that\nshould be insanely great, but the experience of being your user. The product is just one component of that. For a big\ncompany it's necessarily the dominant one. But you can and should give users an insanely great experience with an early,\nincomplete, buggy product, if you make up the difference with attentiveness.\nCan, perhaps, but should? Yes. Over-engaging with early users is not just a permissible technique for getting growth\nrolling. For most successful startups it's a necessary part of the feedback loop that makes the product good. Making a\nbetter mousetrap is not an atomic operation. Even if you start the way most successful startups have, by building\nsomething you yourself need, the first thing you build is never quite right. And except in domains with big penalties\nfor making mistakes, it's often better not to aim for perfection initially. In software, especially, it usually works\nbest to get something in front of users as soon as it has a quantum of utility, and then see what they do with it.\nPerfectionism is often an excuse for procrastination, and in any case your initial model of users is always inaccurate,\neven if you're one of them. [7]\nThe feedback you get from engaging directly with your earliest users will be the best you ever get. When you're so big\nyou have to resort to focus groups, you'll wish you could go over to your users' homes and offices and watch them use\nyour stuff like you did when there were only a handful of them.\nFire\nSometimes the right unscalable trick is to focus on a deliberately narrow market. It's like keeping a fire contained at\nfirst to get it really hot before adding more logs.\nThat's what Facebook did. At first it was just for Harvard students. In that form it only had a potential market of a\nfew thousand people, but because they felt it was really for them, a critical mass of them signed up. After Facebook\nstopped being for Harvard students, it remained for students at specific colleges for quite a while. When I interviewed\nMark Zuckerberg at Startup School, he said that while it was a lot of work creating course lists for each school, doing\nthat made students feel the site was their natural home.\nAny startup that could be described as a marketplace usually has to start in a subset of the market, but this can work\nfor other startups as well. It's always worth asking if there's a subset of the market in which you can get a critical\nmass of users quickly. [8]\nMost startups that use the contained fire strategy do it unconsciously. They build something for themselves and their\nfriends, who happen to be the early adopters, and only realize later that they could offer it to a broader market. The\nstrategy works just as well if you do it unconsciously. The biggest danger of not being consciously aware of this\npattern is for those who naively discard part of it. E.g. if you don't build something for yourself and your friends, or\neven if you do, but you come from the corporate world and your friends are not early adopters, you'll no longer have a\nperfect initial market handed to you on a platter.\nAmong companies, the best early adopters are usually other startups. They're more open to new things both by nature and\nbecause, having just been started, they haven't made all their choices yet. Plus when they succeed they grow fast, and\nyou with them. It was one of many unforeseen advantages of the YC model (and specifically of making YC big) that B2B\nstartups now have an instant market of hundreds of other startups ready at hand.\nMeraki\nFor\nhardware startups\nthere's a variant of doing things that don't scale that we\ncall \"pulling a Meraki.\" Although we didn't fund Meraki, the founders were Robert Morris's grad students, so we know\ntheir history. They got started by doing something that really doesn't scale: assembling their routers themselves.\nHardware startups face an obstacle that software startups don't. The minimum order for a factory production run is\nusually several hundred thousand dollars. Which can put you in a catch-22: without a product you can't generate the\ngrowth you need to raise the money to manufacture your product. Back when hardware startups had to rely on investors for\nmoney, you had to be pretty convincing to overcome this. The arrival of crowdfunding (or more precisely, preorders) has\nhelped a lot. But even so I'd advise startups to pull a Meraki initially if they can. That's what Pebble did. The\nPebbles\nassembled\nthe first several hundred\nwatches themselves. If they hadn't gone through that phase, they probably wouldn't have sold $10 million worth of\nwatches when they did go on Kickstarter.\nLike paying excessive attention to early customers, fabricating things yourself turns out to be valuable for hardware\nstartups. You can tweak the design faster when you're the factory, and you learn things you'd never have known\notherwise. Eric Migicovsky of Pebble said one of the things he learned was \"how valuable it was to source good screws.\"\nWho knew?\nConsult\nSometimes we advise founders of B2B startups to take over-engagement to an extreme, and to pick a single user and act as\nif they were consultants building something just for that one user. The initial user serves as the form for your mold;\nkeep tweaking till you fit their needs perfectly, and you'll usually find you've made something other users want too.\nEven if there aren't many of them, there are probably adjacent territories that have more. As long as you can find just\none user who really needs something and can act on that need, you've got a toehold in making something people want, and\nthat's as much as any startup needs initially. [9]\nConsulting is the canonical example of work that doesn't scale. But (like other ways of bestowing one's favors\nliberally) it's safe to do it so long as you're not being paid to. That's where companies cross the line. So long as\nyou're a product company that's merely being extra attentive to a customer, they're very grateful even if you don't\nsolve all their problems. But when they start paying you specifically for that attentiveness — when they start paying\nyou by the hour — they expect you to do everything.\nAnother consulting-like technique for recruiting initially lukewarm users is to use your software yourselves on their\nbehalf. We did that at Viaweb. When we approached merchants asking if they wanted to use our software to make online\nstores, some said no, but they'd let us make one for them. Since we would do anything to get users, we did. We felt\npretty lame at the time. Instead of organizing big strategic e-commerce partnerships, we were trying to sell luggage and\npens and men's shirts. But in retrospect it was exactly the right thing to do, because it taught us how it would feel to\nmerchants to use our software. Sometimes the feedback loop was near instantaneous: in the middle of building some\nmerchant's site I'd find I needed a feature we didn't have, so I'd spend a couple hours implementing it and then resume\nbuilding the site.\nManual\nThere's a more extreme variant where you don't just use your software, but are your software. When you only have a small\nnumber of users, you can sometimes get away with doing by hand things that you plan to automate later. This lets you\nlaunch faster, and when you do finally automate yourself out of the loop, you'll know exactly what to build because\nyou'll have muscle memory from doing it yourself.\nWhen manual components look to the user like software, this technique starts to have aspects of a practical joke. For\nexample, the way Stripe delivered \"instant\" merchant accounts to its first users was that the founders manually signed\nthem up for traditional merchant accounts behind the scenes.\nSome startups could be entirely manual at first. If you can find someone with a problem that needs solving and you can\nsolve it manually, go ahead and do that for as long as you can, and then gradually automate the bottlenecks. It would be\na little frightening to be solving users' problems in a way that wasn't yet automatic, but less frightening than the far\nmore common case of having something automatic that doesn't yet solve anyone's problems.\nBig\nI should mention one sort of initial tactic that usually doesn't work: the Big Launch. I occasionally meet founders who\nseem to believe startups are projectiles rather than powered aircraft, and that they'll make it big if and only if\nthey're launched with sufficient initial velocity. They want to launch simultaneously in 8 different publications, with\nembargoes. And on a tuesday, of course, since they read somewhere that's the optimum day to launch something.\nIt's easy to see how little launches matter. Think of some successful startups. How many of their launches do you\nremember? All you need from a launch is some initial core of users. How well you're doing a few months later will depend\nmore on how happy you made those users than how many there were of them. [10]\nSo why do founders think launches matter? A combination of solipsism and laziness. They think what they're building is\nso great that everyone who hears about it will immediately sign up. Plus it would be so much less work if you could get\nusers merely by broadcasting your existence, rather than recruiting them one at a time. But even if what you're building\nreally is great, getting users will always be a gradual process — partly because great things are usually also novel,\nbut mainly because users have other things to think about.\nPartnerships too usually don't work. They don't work for startups in general, but they especially don't work as a way to\nget growth started. It's a common mistake among inexperienced founders to believe that a partnership with a big company\nwill be their big break. Six months later they're all saying the same thing: that was way more work than we expected,\nand we ended up getting practically nothing out of it. [11]\nIt's not enough just to do something extraordinary initially. You have to make an extraordinary\neffort\ninitially. Any\nstrategy that omits the effort — whether it's expecting a big launch to get you users, or a big partner — is ipso facto\nsuspect.\nVector\nThe need to do something unscalably laborious to get started is so nearly universal that it might be a good idea to stop\nthinking of startup ideas as scalars. Instead we should try thinking of them as pairs of what you're going to build,\nplus the unscalable thing(s) you're going to do initially to get the company going.\nIt could be interesting to start viewing startup ideas this way, because now that there are two components you can try\nto be imaginative about the second as well as the first. But in most cases the second component will be what it usually\nis — recruit users manually and give them an overwhelmingly good experience — and the main benefit of treating startups\nas vectors will be to remind founders they need to work hard in two dimensions. [12]\nIn the best case, both components of the vector contribute to your company's DNA: the unscalable things you have to do\nto get started are not merely a necessary evil, but change the company permanently for the better. If you have to be\naggressive about user acquisition when you're small, you'll probably still be aggressive when you're big. If you have to\nmanufacture your own hardware, or use your software on users's behalf, you'll learn things you couldn't have learned\notherwise. And most importantly, if you have to work hard to delight users when you only have a handful of them, you'll\nkeep doing it when you have a lot.\nNotes\n[1] Actually Emerson never mentioned mousetraps specifically. He wrote \"If a man has good corn or wood, or boards, or\npigs, to sell, or can make better chairs or knives, crucibles or church organs, than anybody else, you will find a broad\nhard-beaten road to his house, though it be in the woods.\"\n[2] Thanks to Sam Altman for suggesting I make this explicit. And no, you can't avoid doing sales by hiring someone to\ndo it for you. You have to do sales yourself initially. Later you can hire a real salesperson to replace you.\n[3] The reason this works is that as you get bigger, your size helps you grow. Patrick Collison wrote \"At some point,\nthere was a very noticeable change in how Stripe felt. It tipped from being this boulder we had to push to being a train\ncar that in fact had its own momentum.\"\n[4] One of the more subtle ways in which YC can help founders is by calibrating their ambitions, because we know\nexactly how a lot of successful startups looked when they were just getting started.\n[5] If you're building something for which you can't easily get a small set of users to observe — e.g. enterprise\nsoftware — and in a domain where you have no connections, you'll have to rely on cold calls and introductions. But\nshould you even be working on such an idea?\n[6] Garry Tan pointed out an interesting trap founders fall into in the beginning. They want so much to seem big that\nthey imitate even the flaws of big companies, like indifference to individual users. This seems to them more\n\"professional.\" Actually it's better to embrace the fact that you're small and use whatever advantages that brings.\n[7] Your user model almost couldn't be perfectly accurate, because users' needs often change in response to what you\nbuild for them. Build them a microcomputer, and suddenly they need to run spreadsheets on it, because the arrival of\nyour new microcomputer causes someone to invent the spreadsheet.\n[8] If you have to choose between the subset that will sign up quickest and those that will pay the most, it's usually\nbest to pick the former, because those are probably the early adopters. They'll have a better influence on your product,\nand they won't make you expend as much effort on sales. And though they have less money, you don't need that much to\nmaintain your target growth rate early on.\n[9] Yes, I can imagine cases where you could end up making something that was really only useful for one user. But\nthose are usually obvious, even to inexperienced founders. So if it's not obvious you'd be making something for a market\nof one, don't worry about that danger.\n[10] There may even be an inverse correlation between launch magnitude and success. The only launches I remember are\nfamous flops like the Segway and Google Wave. Wave is a particularly alarming example, because I think it was actually a\ngreat idea that was killed partly by its overdone launch.\n[11] Google grew big on the back of Yahoo, but that wasn't a partnership. Yahoo was their customer.\n[12] It will also remind founders that an idea where the second component is empty — an idea where there is nothing\nyou can do to get going, e.g. because you have no way to find users to recruit manually — is probably a bad idea, at\nleast for those founders.\nThanks\nto Sam Altman, Paul Buchheit, Patrick Collison, Kevin Hale, Steven Levy, Jessica Livingston, Geoff Ralston,\nand Garry Tan for reading drafts of this."
    }
  },
  {
    "name_blog": "Default alive or default dead",
    "description_blog": "Assuming expenses remain constant and revenue growth continues on trend, will your company make it to profitability on the money you have left? Are you default alive or dead?",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/95-default-alive-or-default-dead",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/aord.html\nOctober 2015\nWhen I talk to a startup that's been operating for more than 8 or 9 months, the first thing I want to know is almost\nalways the same. Assuming their expenses remain constant and their revenue growth is what it has been over the last\nseveral months, do they make it to profitability on the money they have left? Or to put it more dramatically, by default\ndo they live or die?\nThe startling thing is how often the founders themselves don't know. Half the founders I talk to don't know whether\nthey're default alive or default dead.\nIf you're among that number, Trevor Blackwell has made a handy\ncalculator\nyou can use to find\nout.\nThe reason I want to know first whether a startup is default alive or default dead is that the rest of the conversation\ndepends on the answer. If the company is default alive, we can talk about ambitious new things they could do. If it's\ndefault dead, we probably need to talk about how to save it. We know the current trajectory ends badly. How can they get\noff that trajectory?\nWhy do so few founders know whether they're default alive or default dead? Mainly, I think, because they're not used to\nasking that. It's not a question that makes sense to ask early on, any more than it makes sense to ask a 3 year old how\nhe plans to support himself. But as the company grows older, the question switches from meaningless to critical. That\nkind of switch often takes people by surprise.\nI propose the following solution: instead of starting to ask too late whether you're default alive or default dead,\nstart asking too early. It's hard to say precisely when the question switches polarity. But it's probably not that\ndangerous to start worrying too early that you're default dead, whereas it's very dangerous to start worrying too\nlate.\nThe reason is a phenomenon I wrote about earlier: the\nfatal pinch\n. The fatal\npinch is default dead + slow growth + not enough time to fix it. And the way founders end up in it is by not realizing\nthat's where they're headed.\nThere is another reason founders don't ask themselves whether they're default alive or default dead: they assume it will\nbe easy to raise more money. But that assumption is often false, and worse still, the more you depend on it, the falser\nit becomes.\nMaybe it will help to separate facts from hopes. Instead of thinking of the future with vague optimism, explicitly\nseparate the components. Say \"We're default dead, but we're counting on investors to save us.\" Maybe as you say that, it\nwill set off the same alarms in your head that it does in mine. And if you set off the alarms sufficiently early, you\nmay be able to avoid the fatal pinch.\nIt would be safe to be default dead if you could count on investors saving you. As a rule their interest is a function\nof growth. If you have steep revenue growth, say over 5x a year, you can start to count on investors being interested\neven if you're not profitable. [1] But investors are so fickle that you can never do more than start to count on them.\nSometimes something about your business will spook investors even if your growth is great. So no matter how good your\ngrowth is, you can never safely treat fundraising as more than a plan A. You should always have a plan B as well: you\nshould know (as in write down) precisely what you'll need to do to survive if you can't raise more money, and precisely\nwhen you'll have to switch to plan B if plan A isn't working.\nIn any case, growing fast versus operating cheaply is far from the sharp dichotomy many founders assume it to be. In\npractice there is surprisingly little connection between how much a startup spends and how fast it grows. When a startup\ngrows fast, it's usually because the product hits a nerve, in the sense of hitting some big need straight on. When a\nstartup spends a lot, it's usually because the product is expensive to develop or sell, or simply because they're\nwasteful.\nIf you're paying attention, you'll be asking at this point not just how to avoid the fatal pinch, but how to avoid being\ndefault dead. That one is easy: don't hire too fast. Hiring too fast is by far the biggest killer of startups that raise\nmoney. [2]\nFounders tell themselves they need to hire in order to grow. But most err on the side of overestimating this need rather\nthan underestimating it. Why? Partly because there's so much work to do. Naive founders think that if they can just hire\nenough people, it will all get done. Partly because successful startups have lots of employees, so it seems like that's\nwhat one does in order to be successful. In fact the large staffs of successful startups are probably more the effect of\ngrowth than the cause. And partly because when founders have slow growth they don't want to face what is usually the\nreal reason: the product is not appealing enough.\nPlus founders who've just raised money are often encouraged to overhire by the VCs who funded them. Kill-or-cure\nstrategies are optimal for VCs because they're protected by the portfolio effect. VCs want to blow you up, in one sense\nof the phrase or the other. But as a founder your incentives are different. You want above all to survive. [3]\nHere's a common way startups die. They make something moderately appealing and have decent initial growth. They raise\ntheir first round fairly easily, because the founders seem smart and the idea sounds plausible. But because the product\nis only moderately appealing, growth is ok but not great. The founders convince themselves that hiring a bunch of people\nis the way to boost growth. Their investors agree. But (because the product is only moderately appealing) the growth\nnever comes. Now they're rapidly running out of runway. They hope further investment will save them. But because they\nhave high expenses and slow growth, they're now unappealing to investors. They're unable to raise more, and the company\ndies.\nWhat the company should have done is address the fundamental problem: that the product is only moderately appealing.\nHiring people is rarely the way to fix that. More often than not it makes it harder. At this early stage, the product\nneeds to evolve more than to be \"built out,\" and that's usually easier with fewer people. [4]\nAsking whether you're default alive or default dead may save you from this. Maybe the alarm bells it sets off will\ncounteract the forces that push you to overhire. Instead you'll be compelled to seek growth in other ways. For example,\nby\ndoing things that don't scale\n, or by redesigning the product in the way only\nfounders can. And for many if not most startups, these paths to growth will be the ones that actually work.\nAirbnb waited 4 months after raising money at the end of Y Combinator before they hired their first employee. In the\nmeantime the founders were terribly overworked. But they were overworked evolving Airbnb into the astonishingly\nsuccessful organism it is now.\nNotes\n[1] Steep usage growth will also interest investors. Revenue will ultimately be a constant multiple of usage, so x%\nusage growth predicts x% revenue growth. But in practice investors discount merely predicted revenue, so if you're\nmeasuring usage you need a higher growth rate to impress investors.\n[2] Startups that don't raise money are saved from hiring too fast because they can't afford to. But that doesn't mean\nyou should avoid raising money in order to avoid this problem, any more than that total abstinence is the only way to\navoid becoming an alcoholic.\n[3] I would not be surprised if VCs' tendency to push founders to overhire is not even in their own interest. They\ndon't know how many of the companies that get killed by overspending might have done well if they'd survived. My guess\nis a significant number.\n[4] After reading a draft, Sam Altman wrote:\n\"I think you should make the hiring point more strongly. I think it's roughly correct to say that YC's most successful\ncompanies have never been the fastest to hire, and one of the marks of a great founder is being able to resist this\nurge.\"\nPaul Buchheit adds:\n\"A related problem that I see a lot is premature scaling—founders take a small business that isn't really working (bad\nunit economics, typically) and then scale it up because they want impressive growth numbers. This is similar to\nover-hiring in that it makes the business much harder to fix once it's big, plus they are bleeding cash really fast.\"\nThanks\nto Sam Altman, Paul Buchheit, Joe Gebbia, Jessica Livingston, and Geoff Ralston for reading drafts of this."
    }
  },
  {
    "name_blog": "Be relentlessly resourceful",
    "description_blog": "Make something people want' is the destination, but 'be relentlessly resourceful' is how you get there.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/94-be-relentlessly-resourceful",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/relres.html\nMarch 2009\nA couple days ago I finally got being a good startup founder down to two words: relentlessly resourceful.\nTill then the best I'd managed was to get the opposite quality down to one: hapless. Most dictionaries say hapless means\nunlucky. But the dictionaries are not doing a very good job. A team that outplays its opponents but loses because of a\nbad decision by the referee could be called unlucky, but not hapless. Hapless implies passivity. To be hapless is to be\nbattered by circumstances—to let the world have its way with you, instead of having your way with the world. [1]\nUnfortunately there's no antonym of hapless, which makes it difficult to tell founders what to aim for. \"Don't be\nhapless\" is not much of rallying cry.\nIt's not hard to express the quality we're looking for in metaphors. The best is probably a running back. A good running\nback is not merely determined, but flexible as well. They want to get downfield, but they adapt their plans on the\nfly.\nUnfortunately this is just a metaphor, and not a useful one to most people outside the US. \"Be like a running back\" is\nno better than \"Don't be hapless.\"\nBut finally I've figured out how to express this quality directly. I was writing a talk for\ninvestors\n, and I had to explain what to look for in founders. What\nwould someone who was the opposite of hapless be like? They'd be relentlessly resourceful. Not merely relentless. That's\nnot enough to make things go your way except in a few mostly uninteresting domains. In any interesting domain, the\ndifficulties will be novel. Which means you can't simply plow through them, because you don't know initially how hard\nthey are; you don't know whether you're about to plow through a block of foam or granite. So you have to be resourceful.\nYou have to keep trying new things.\nBe relentlessly resourceful.\nThat sounds right, but is it simply a description of how to be successful in general? I don't think so. This isn't the\nrecipe for success in writing or painting, for example. In that kind of work the recipe is more to be actively curious.\nResourceful implies the obstacles are external, which they generally are in startups. But in writing and painting\nthey're mostly internal; the obstacle is your own obtuseness. [2]\nThere probably are other fields where \"relentlessly resourceful\" is the recipe for success. But though other fields may\nshare it, I think this is the best short description we'll find of what makes a good startup founder. I doubt it could\nbe made more precise.\nNow that we know what we're looking for, that leads to other questions. For example, can this quality be taught? After\nfour years of trying to teach it to people, I'd say that yes, surprisingly often it can. Not to everyone, but to many\npeople. [3] Some people are just constitutionally passive, but others have a latent ability to be relentlessly\nresourceful that only needs to be brought out.\nThis is particularly true of young people who have till now always been under the thumb of some kind of authority. Being\nrelentlessly resourceful is definitely not the recipe for success in big companies, or in most schools. I don't even\nwant to think what the recipe is in big companies, but it is certainly longer and messier, involving some combination of\nresourcefulness, obedience, and building alliances.\nIdentifying this quality also brings us closer to answering a question people often wonder about: how many startups\nthere could be. There is not, as some people seem to think, any economic upper bound on this number. There's no reason\nto believe there is any limit on the amount of newly created wealth consumers can absorb, any more than there is a limit\non the number of theorems that can be proven. So probably the limiting factor on the number of startups is the pool of\npotential founders. Some people would make good founders, and others wouldn't. And now that we can say what makes a good\nfounder, we know how to put an upper bound on the size of the pool.\nThis test is also useful to individuals. If you want to know whether you're the right sort of person to start a startup,\nask yourself whether you're relentlessly resourceful. And if you want to know whether to recruit someone as a cofounder,\nask if they are.\nYou can even use it tactically. If I were running a startup, this would be the phrase I'd tape to the mirror. \"Make\nsomething people want\" is the destination, but \"Be relentlessly resourceful\" is how you get there.\nNotes\n[1] I think the reason the dictionaries are wrong is that the meaning of the word has shifted. No one writing a\ndictionary from scratch today would say that hapless meant unlucky. But a couple hundred years ago they might have.\nPeople were more at the mercy of circumstances in the past, and as a result a lot of the words we use for good and bad\noutcomes have origins in words about luck.\nWhen I was living in Italy, I was once trying to tell someone that I hadn't had much success in doing something, but I\ncouldn't think of the Italian word for success. I spent some time trying to describe the word I meant. Finally she said\n\"Ah! Fortuna!\"\n[2] There are aspects of startups where the recipe is to be actively curious. There can be times when what you're\ndoing is almost pure discovery. Unfortunately these times are a small proportion of the whole. On the other hand, they\nare in research too.\n[3] I'd almost say to most people, but I realize (a) I have no idea what most people are like, and (b) I'm\npathologically optimistic about people's ability to change.\nThanks\nto Trevor Blackwell and Jessica Livingston for reading drafts of this."
    }
  },
  {
    "name_blog": "A student's guide to startups",
    "description_blog": "The pros and cons of starting a startup in (or soon after) college. Pros: stamina, poverty, rootlessness, colleagues, ignorance. Cons: building stuff that looks like class projects.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/93-a-student-s-guide-to-startups",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/mit.html\nOctober 2006\n(This essay is derived from a talk at MIT.)\nTill recently graduating seniors had two choices: get a job or go to grad school. I think there will increasingly be a\nthird option: to start your own startup. But how common will that be?\nI'm sure the default will always be to get a job, but starting a startup could well become as popular as grad school. In\nthe late 90s my professor friends used to complain that they couldn't get grad students, because all the undergrads were\ngoing to work for startups. I wouldn't be surprised if that situation returns, but with one difference: this time\nthey'll be starting their own instead of going to work for other people's.\nThe most ambitious students will at this point be asking: Why wait till you graduate? Why not start a startup while\nyou're in college? In fact, why go to college at all? Why not start a startup instead?\nA year and a half ago I gave a\ntalk\nwhere I said that the average age of the\nfounders of Yahoo, Google, and Microsoft was 24, and that if grad students could start startups, why not undergrads? I'm\nglad I phrased that as a question, because now I can pretend it wasn't merely a rhetorical one. At the time I couldn't\nimagine why there should be any lower limit for the age of startup founders. Graduation is a bureaucratic change, not a\nbiological one. And certainly there are undergrads as competent technically as most grad students. So why shouldn't\nundergrads be able to start startups as well as grad students?\nI now realize that something does change at graduation: you lose a huge excuse for failing. Regardless of how complex\nyour life is, you'll find that everyone else, including your family and friends, will discard all the low bits and\nregard you as having a single occupation at any given time. If you're in college and have a summer job writing software,\nyou still read as a student. Whereas if you graduate and get a job programming, you'll be instantly regarded by everyone\nas a programmer.\nThe problem with starting a startup while you're still in school is that there's a built-in escape hatch. If you start a\nstartup in the summer between your junior and senior year, it reads to everyone as a summer job. So if it goes nowhere,\nbig deal; you return to school in the fall with all the other seniors; no one regards you as a failure, because your\noccupation is student, and you didn't fail at that. Whereas if you start a startup just one year later, after you\ngraduate, as long as you're not accepted to grad school in the fall the startup reads to everyone as your occupation.\nYou're now a startup founder, so you have to do well at that.\nFor nearly everyone, the opinion of one's peers is the most powerful motivator of all—more powerful even than the\nnominal goal of most startup founders, getting rich. [1] About a month into each funding cycle we have an event called\nPrototype Day where each startup presents to the others what they've got so far. You might think they wouldn't need any\nmore motivation. They're working on their cool new idea; they have funding for the immediate future; and they're playing\na game with only two outcomes: wealth or failure. You'd think that would be motivation enough. And yet the prospect of a\ndemo pushes most of them into a rush of activity.\nEven if you start a startup explicitly to get rich, the money you might get seems pretty theoretical most of the time.\nWhat drives you day to day is not wanting to look bad.\nYou probably can't change that. Even if you could, I don't think you'd want to; someone who really, truly doesn't care\nwhat his peers think of him is probably a psychopath. So the best you can do is consider this force like a wind, and set\nup your boat accordingly. If you know your peers are going to push you in some direction, choose good peers, and\nposition yourself so they push you in a direction you like.\nGraduation changes the prevailing winds, and those make a difference. Starting a startup is so hard that it's a close\ncall even for the ones that succeed. However high a startup may be flying now, it probably has a few leaves stuck in the\nlanding gear from those trees it barely cleared at the end of the runway. In such a close game, the smallest increase in\nthe forces against you can be enough to flick you over the edge into failure.\nWhen we first started\nY Combinator\nwe encouraged people to start startups while they were\nstill in college. That's partly because Y Combinator began as a kind of summer program. We've kept the program shape—all\nof us having dinner together once a week turns out to be a good idea—but we've decided now that the party line should be\nto tell people to wait till they graduate.\nDoes that mean you can't start a startup in college? Not at all. Sam Altman, the co-founder of\nLoopt\n, had just finished his sophomore year when we funded them, and Loopt is probably the most\npromising of all the startups we've funded so far. But Sam Altman is a very unusual guy. Within about three minutes of\nmeeting him, I remember thinking \"Ah, so this is what Bill Gates must have been like when he was 19.\"\nIf it can work to start a startup during college, why do we tell people not to? For the same reason that the probably\napocryphal violinist, whenever he was asked to judge someone's playing, would always say they didn't have enough talent\nto make it as a pro. Succeeding as a musician takes determination as well as talent, so this answer works out to be the\nright advice for everyone. The ones who are uncertain believe it and give up, and the ones who are sufficiently\ndetermined think \"screw that, I'll succeed anyway.\"\nSo our official policy now is only to fund undergrads we can't talk out of it. And frankly, if you're not certain, you\nshould\nwait. It's not as if all the opportunities to start companies are going to be gone if you don't do it now.\nMaybe the window will close on some idea you're working on, but that won't be the last idea you'll have. For every idea\nthat times out, new ones become feasible. Historically the opportunities to start startups have only increased with\ntime.\nIn that case, you might ask, why not wait longer? Why not go work for a while, or go to grad school, and then start a\nstartup? And indeed, that might be a good idea. If I had to pick the sweet spot for startup founders, based on who we're\nmost excited to see applications from, I'd say it's probably the mid-twenties. Why? What advantages does someone in\ntheir mid-twenties have over someone who's 21? And why isn't it older? What can 25 year olds do that 32 year olds can't?\nThose turn out to be questions worth examining.\nPlus\nIf you start a startup soon after college, you'll be a young founder by present standards, so you should know what the\nrelative advantages of young founders are. They're not what you might think. As a young founder your strengths are:\nstamina, poverty, rootlessness, colleagues, and ignorance.\nThe importance of stamina shouldn't be surprising. If you've heard anything about startups you've probably heard about\nthe long hours. As far as I can tell these are universal. I can't think of any successful startups whose founders\nworked 9 to 5. And it's particularly necessary for younger founders to work long hours because they're probably not as\nefficient as they'll be later.\nYour second advantage, poverty, might not sound like an advantage, but it is a huge one. Poverty implies you can live\ncheaply, and this is critically important for startups. Nearly every startup that fails, fails by running out of money.\nIt's a little misleading to put it this way, because there's usually some other underlying cause. But regardless of the\nsource of your problems, a low burn rate gives you more opportunity to recover from them. And since most startups make\nall kinds of mistakes at first, room to recover from mistakes is a valuable thing to have.\nMost startups end up doing something different than they planned. The way the successful ones find something that works\nis by trying things that don't. So the worst thing you can do in a startup is to have a rigid, pre-ordained plan and\nthen start spending a lot of money to implement it. Better to operate cheaply and give your ideas time to evolve.\nRecent grads can live on practically nothing, and this gives you an edge over older founders, because the main cost in\nsoftware startups is people. The guys with kids and mortgages are at a real disadvantage. This is one reason I'd bet on\nthe 25 year old over the 32 year old. The 32 year old probably is a better programmer, but probably also has a much more\nexpensive life. Whereas a 25 year old has some work experience (more on that later) but can live as cheaply as an\nundergrad.\nRobert Morris and I were 29 and 30 respectively when we started Viaweb, but fortunately we still lived like 23 year\nolds. We both had roughly zero assets. I would have loved to have a mortgage, since that would have meant I had a\nhouse\n. But in retrospect having nothing turned out to be convenient. I wasn't tied down and I was used to living\ncheaply.\nEven more important than living cheaply, though, is thinking cheaply. One reason the Apple II was so popular was that it\nwas cheap. The computer itself was cheap, and it used cheap, off-the-shelf peripherals like a cassette tape recorder for\ndata storage and a TV as a monitor. And you know why? Because Woz designed this computer for himself, and he couldn't\nafford anything more.\nWe benefitted from the same phenomenon. Our prices were daringly low for the time. The top level of service was $300 a\nmonth, which was an order of magnitude below the norm. In retrospect this was a smart move, but we didn't do it because\nwe were smart. $300 a month seemed like a lot of money to us. Like Apple, we created something inexpensive, and\ntherefore popular, simply because we were poor.\nA lot of startups have that form: someone comes along and makes something for a tenth or a hundredth of what it used to\ncost, and the existing players can't follow because they don't even want to think about a world in which that's\npossible. Traditional long distance carriers, for example, didn't even want to think about VoIP. (It was coming, all the\nsame.) Being poor helps in this game, because your own personal bias points in the same direction technology evolves\nin.\nThe advantages of rootlessness are similar to those of poverty. When you're young you're more mobile—not just because\nyou don't have a house or much stuff, but also because you're less likely to have serious relationships. This turns out\nto be important, because a lot of startups involve someone moving.\nThe founders of Kiko, for example, are now en route to the Bay Area to start their next startup. It's a better place for\nwhat they want to do. And it was easy for them to decide to go, because neither as far as I know has a serious\ngirlfriend, and everything they own will fit in one car—or more precisely, will either fit in one car or is crappy\nenough that they don't mind leaving it behind.\nThey at least were in Boston. What if they'd been in Nebraska, like Evan Williams was at their age? Someone wrote\nrecently that the drawback of Y Combinator was that you had to move to participate. It couldn't be any other way. The\nkind of conversations we have with founders, we have to have in person. We fund a dozen startups at a time, and we can't\nbe in a dozen places at once. But even if we could somehow magically save people from moving, we wouldn't. We wouldn't\nbe doing founders a favor by letting them stay in Nebraska. Places that aren't\nstartup\nhubs\nare toxic to startups. You can tell that from indirect evidence. You\ncan tell how hard it must be to start a startup in Houston or Chicago or Miami from the microscopically small number,\nper capita, that succeed there. I don't know exactly what's suppressing all the startups in these towns—probably a\nhundred subtle little things—but something must be. [2]\nMaybe this will change. Maybe the increasing cheapness of startups will mean they'll be able to survive anywhere,\ninstead of only in the most hospitable environments. Maybe 37signals is the pattern for the future. But maybe not.\nHistorically there have always been certain towns that were centers for certain industries, and if you weren't in one of\nthem you were at a disadvantage. So my guess is that 37signals is an anomaly. We're looking at a pattern much older than\n\"Web 2.0\" here.\nPerhaps the reason more startups per capita happen in the Bay Area than Miami is simply that there are more founder-type\npeople there. Successful startups are almost never started by one person. Usually they begin with a conversation in\nwhich someone mentions that something would be a good idea for a company, and his friend says, \"Yeah, that is a good\nidea, let's try it.\" If you're missing that second person who says \"let's try it,\" the startup never happens. And that\nis another area where undergrads have an edge. They're surrounded by people willing to say that. At a good college\nyou're concentrated together with a lot of other ambitious and technically minded people—probably more concentrated than\nyou'll ever be again. If your nucleus spits out a neutron, there's a good chance it will hit another nucleus.\nThe number one question people ask us at Y Combinator is: Where can I find a co-founder? That's the biggest problem for\nsomeone starting a startup at 30. When they were in school they knew a lot of good co-founders, but by 30 they've either\nlost touch with them or these people are tied down by jobs they don't want to leave.\nViaweb was an anomaly in this respect too. Though we were comparatively old, we weren't tied down by impressive jobs. I\nwas trying to be an artist, which is not very constraining, and Robert, though 29, was still in grad school due to a\nlittle interruption in his academic career back in 1988. So arguably the Worm made Viaweb possible. Otherwise Robert\nwould have been a junior professor at that age, and he wouldn't have had time to work on crazy speculative projects with\nme.\nMost of the questions people ask Y Combinator we have some kind of answer for, but not the co-founder question. There is\nno good answer. Co-founders really should be people you already know. And by far the best place to meet them is school.\nYou have a large sample of smart people; you get to compare how they all perform on identical tasks; and everyone's life\nis pretty fluid. A lot of startups grow out of schools for this reason. Google, Yahoo, and Microsoft, among others, were\nall founded by people who met in school. (In Microsoft's case, it was high school.)\nMany students feel they should wait and get a little more experience before they start a company. All other things being\nequal, they should. But all other things are not quite as equal as they look. Most students don't realize how rich they\nare in the scarcest ingredient in startups, co-founders. If you wait too long, you may find that your friends are now\ninvolved in some project they don't want to abandon. The better they are, the more likely this is to happen.\nOne way to mitigate this problem might be to actively plan your startup while you're getting those n years of\nexperience. Sure, go off and get jobs or go to grad school or whatever, but get together regularly to scheme, so the\nidea of starting a startup stays alive in everyone's brain. I don't know if this works, but it can't hurt to try.\nIt would be helpful just to realize what an advantage you have as students. Some of your classmates are probably going\nto be successful startup founders; at a great technical university, that is a near certainty. So which ones? If I were\nyou I'd look for the people who are not just smart, but incurable\nbuilders\n. Look for the people who keep starting\nprojects, and finish at least some of them. That's what we look for. Above all else, above academic credentials and even\nthe idea you apply with, we look for people who build things.\nThe other place co-founders meet is at work. Fewer do than at school, but there are things you can do to improve the\nodds. The most important, obviously, is to work somewhere that has a lot of smart, young people. Another is to work for\na company located in a startup hub. It will be easier to talk a co-worker into quitting with you in a place where\nstartups are happening all around you.\nYou might also want to look at the employment agreement you sign when you get hired. Most will say that any ideas you\nthink of while you're employed by the company belong to them. In practice it's hard for anyone to prove what ideas you\nhad when, so the line gets drawn at code. If you're going to start a startup, don't write any of the code while you're\nstill employed. Or at least discard any code you wrote while still employed and start over. It's not so much that your\nemployer will find out and sue you. It won't come to that; investors or acquirers or (if you're so lucky) underwriters\nwill nail you first. Between t = 0 and when you buy that yacht,\nsomeone\nis going to ask if any of your code legally\nbelongs to anyone else, and you need to be able to say no. [3]\nThe most overreaching employee agreement I've seen so far is Amazon's. In addition to the usual clauses about owning\nyour ideas, you also can't be a founder of a startup that has another founder who worked at Amazon—even if you didn't\nknow them or even work there at the same time. I suspect they'd have a hard time enforcing this, but it's a bad sign\nthey even try. There are plenty of other places to work; you may as well choose one that keeps more of your options\nopen.\nSpeaking of cool places to work, there is of course Google. But I notice something slightly frightening about Google:\nzero startups come out of there. In that respect it's a black hole. People seem to like working at Google too much to\nleave. So if you hope to start a startup one day, the evidence so far suggests you shouldn't work there.\nI realize this seems odd advice. If they make your life so good that you don't want to leave, why not work there?\nBecause, in effect, you're probably getting a local maximum. You need a certain activation energy to start a startup. So\nan employer who's fairly pleasant to work for can lull you into staying indefinitely, even if it would be a net win for\nyou to leave. [4]\nThe best place to work, if you want to start a startup, is probably a startup. In addition to being the right sort of\nexperience, one way or another it will be over quickly. You'll either end up rich, in which case problem solved, or the\nstartup will get bought, in which case it it will start to suck to work there and it will be easy to leave, or most\nlikely, the thing will blow up and you'll be free again.\nYour final advantage, ignorance, may not sound very useful. I deliberately used a controversial word for it; you might\nequally call it innocence. But it seems to be a powerful force. My Y Combinator co-founder Jessica Livingston is just\nabout to publish a book of\ninterviews\nwith startup founders, and I\nnoticed a remarkable pattern in them. One after another said that if they'd known how hard it would be, they would have\nbeen too intimidated to start.\nIgnorance can be useful when it's a counterweight to other forms of stupidity. It's useful in starting startups because\nyou're capable of more than you realize. Starting startups is harder than you expect, but you're also capable of more\nthan you expect, so they balance out.\nMost people look at a company like Apple and think, how could I ever make such a thing? Apple is an institution, and I'm\njust a person. But every institution was at one point just a handful of people in a room deciding to start something.\nInstitutions are made up, and made up by people no different from you.\nI'm not saying everyone could start a startup. I'm sure most people couldn't; I don't know much about the population at\nlarge. When you get to groups I know well, like hackers, I can say more precisely. At the top schools, I'd guess as many\nas a quarter of the CS majors could make it as startup founders if they wanted.\nThat \"if they wanted\" is an important qualification—so important that it's almost cheating to append it like\nthat—because once you get over a certain threshold of intelligence, which most CS majors at top schools are past, the\ndeciding factor in whether you succeed as a founder is how much you want to. You don't have to be that smart. If you're\nnot a genius, just start a startup in some unsexy field where you'll have less competition, like software for human\nresources departments. I picked that example at random, but I feel safe in predicting that whatever they have now, it\nwouldn't take genius to do better. There are a lot of people out there working on boring stuff who are desperately in\nneed of better software, so however short you think you fall of Larry and Sergey, you can ratchet down the coolness of\nthe idea far enough to compensate.\nAs well as preventing you from being intimidated, ignorance can sometimes help you discover new ideas.\nSteve\nWozniak\nput this very strongly:\nAll the best things that I did at Apple came from (a) not having money and (b) not having done it before, ever. Every\nsingle thing that we came out with that was really great, I'd never once done that thing in my life.\nWhen you know nothing, you have to reinvent stuff for yourself, and if you're smart your reinventions may be better than\nwhat preceded them. This is especially true in fields where the rules change. All our ideas about software were\ndeveloped in a time when processors were slow, and memories and disks were tiny. Who knows what obsolete assumptions are\nembedded in the conventional wisdom? And the way these assumptions are going to get fixed is not by explicitly\ndeallocating them, but by something more akin to garbage collection. Someone ignorant but smart will come along and\nreinvent everything, and in the process simply fail to reproduce certain existing ideas.\nMinus\nSo much for the advantages of young founders. What about the disadvantages? I'm going to start with what goes wrong and\ntry to trace it back to the root causes.\nWhat goes wrong with young founders is that they build stuff that looks like class projects. It was only recently that\nwe figured this out ourselves. We noticed a lot of similarities between the startups that seemed to be falling behind,\nbut we couldn't figure out how to put it into words. Then finally we realized what it was: they were building class\nprojects.\nBut what does that really mean? What's wrong with class projects? What's the difference between a class project and a\nreal startup? If we could answer that question it would be useful not just to would-be startup founders but to students\nin general, because we'd be a long way toward explaining the mystery of the so-called real world.\nThere seem to be two big things missing in class projects: (1) an iterative definition of a real problem and (2)\nintensity.\nThe first is probably unavoidable. Class projects will inevitably solve fake problems. For one thing, real problems are\nrare and valuable. If a professor wanted to have students solve real problems, he'd face the same paradox as someone\ntrying to give an example of whatever \"paradigm\" might succeed the Standard Model of physics. There may well be\nsomething that does, but if you could think of an example you'd be entitled to the Nobel Prize. Similarly, good new\nproblems are not to be had for the asking.\nIn technology the difficulty is compounded by the fact that real startups tend to discover the problem they're solving\nby a process of evolution. Someone has an idea for something; they build it; and in doing so (and probably only by doing\nso) they realize the problem they should be solving is another one. Even if the professor let you change your project\ndescription on the fly, there isn't time enough to do that in a college class, or a market to supply evolutionary\npressures. So class projects are mostly about implementation, which is the least of your problems in a startup.\nIt's not just that in a startup you work on the idea as well as implementation. The very implementation is different.\nIts main purpose is to refine the idea. Often the only value of most of the stuff you build in the first six months is\nthat it proves your initial idea was mistaken. And that's extremely valuable. If you're free of a misconception that\neveryone else still shares, you're in a powerful position. But you're not thinking that way about a class project.\nProving your initial plan was mistaken would just get you a bad grade. Instead of building stuff to throw away, you tend\nto want every line of code to go toward that final goal of showing you did a lot of work.\nThat leads to our second difference: the way class projects are measured. Professors will tend to judge you by the\ndistance between the starting point and where you are now. If someone has achieved a lot, they should get a good grade.\nBut customers will judge you from the other direction: the distance remaining between where you are now and the features\nthey need. The market doesn't give a shit how hard you worked. Users just want your software to do what they need, and\nyou get a zero otherwise. That is one of the most distinctive differences between school and the real world: there is no\nreward for putting in a good effort. In fact, the whole concept of a \"good effort\" is a fake idea adults invented to\nencourage kids. It is not found in nature.\nSuch lies seem to be helpful to kids. But unfortunately when you graduate they don't give you a list of all the lies\nthey told you during your education. You have to get them beaten out of you by contact with the real world. And this is\nwhy so many jobs want work experience. I couldn't understand that when I was in college. I knew how to program. In fact,\nI could tell I knew how to program better than most people doing it for a living. So what was this mysterious \"work\nexperience\" and why did I need it?\nNow I know what it is, and part of the confusion is grammatical. Describing it as \"work experience\" implies it's like\nexperience operating a certain kind of machine, or using a certain programming language. But really what work experience\nrefers to is not some specific expertise, but the elimination of certain habits left over from childhood.\nOne of the defining qualities of kids is that they flake. When you're a kid and you face some hard test, you can cry and\nsay \"I can't\" and they won't make you do it. Of course, no one can make you do anything in the grownup world either.\nWhat they do instead is fire you. And when motivated by that you find you can do a lot more than you realized. So one of\nthe things employers expect from someone with \"work experience\" is the elimination of the flake reflex—the ability to\nget things done, with no excuses.\nThe other thing you get from work experience is an understanding of what work is, and in particular, how intrinsically\nhorrible it is. Fundamentally the equation is a brutal one: you have to spend most of your waking hours doing stuff\nsomeone else wants, or starve. There are a few places where the work is so interesting that this is concealed, because\nwhat other people want done happens to coincide with what you want to work on. But you only have to imagine what would\nhappen if they diverged to see the underlying reality.\nIt's not so much that adults lie to kids about this as never explain it. They never explain what the deal is with money.\nYou know from an early age that you'll have some sort of job, because everyone asks what you're going to \"be\" when you\ngrow up. What they don't tell you is that as a kid you're sitting on the shoulders of someone else who's treading water,\nand that starting working means you get thrown into the water on your own, and have to start treading water yourself or\nsink. \"Being\" something is incidental; the immediate problem is not to drown.\nThe relationship between work and money tends to dawn on you only gradually. At least it did for me. One's first thought\ntends to be simply \"This sucks. I'm in debt. Plus I have to get up on monday and go to work.\" Gradually you realize that\nthese two things are as tightly connected as only a market can make them.\nSo the most important advantage 24 year old founders have over 20 year old founders is that they know what they're\ntrying to avoid. To the average undergrad the idea of getting rich translates into buying Ferraris, or being admired. To\nsomeone who has learned from experience about the relationship between money and work, it translates to something way\nmore important: it means you get to opt out of the brutal equation that governs the lives of 99.9% of people. Getting\nrich means you can stop treading water.\nSomeone who gets this will work much harder at making a startup succeed—with the proverbial energy of a drowning man, in\nfact. But understanding the relationship between money and work also changes the way you work. You don't get money just\nfor working, but for doing things other people want. Someone who's figured that out will automatically focus more on the\nuser. And that cures the other half of the class-project syndrome. After you've been working for a while, you yourself\ntend to measure what you've done the same way the market does.\nOf course, you don't have to spend years working to learn this stuff. If you're sufficiently perceptive you can grasp\nthese things while you're still in school. Sam Altman did. He must have, because Loopt is no class project. And as his\nexample suggests, this can be valuable knowledge. At a minimum, if you get this stuff, you already have most of what you\ngain from the \"work experience\" employers consider so desirable. But of course if you really get it, you can use this\ninformation in a way that's more valuable to you than that.\nNow\nSo suppose you think you might start a startup at some point, either when you graduate or a few years after. What should\nyou do now? For both jobs and grad school, there are ways to prepare while you're in college. If you want to get a job\nwhen you graduate, you should get summer jobs at places you'd like to work. If you want to go to grad school, it will\nhelp to work on research projects as an undergrad. What's the equivalent for startups? How do you keep your options\nmaximally open?\nOne thing you can do while you're still in school is to learn how startups work. Unfortunately that's not easy. Few if\nany colleges have classes about startups. There may be business school classes on entrepreneurship, as they call it over\nthere, but these are likely to be a waste of time. Business schools like to talk about startups, but philosophically\nthey're at the opposite end of the spectrum. Most books on startups also seem to be useless. I've looked at a few and\nnone get it right. Books in most fields are written by people who know the subject from experience, but for startups\nthere's a unique problem: by definition the founders of successful startups don't need to write books to make money. As\na result most books on the subject end up being written by people who don't understand it.\nSo I'd be skeptical of classes and books. The way to learn about startups is by watching them in action, preferably by\nworking at one. How do you do that as an undergrad? Probably by sneaking in through the back door. Just hang around a\nlot and gradually start doing things for them. Most startups are (or should be) very cautious about hiring. Every hire\nincreases the burn rate, and bad hires early on are hard to recover from. However, startups usually have a fairly\ninformal atmosphere, and there's always a lot that needs to be done. If you just start doing stuff for them, many will\nbe too busy to shoo you away. You can thus gradually work your way into their confidence, and maybe turn it into an\nofficial job later, or not, whichever you prefer. This won't work for all startups, but it would work for most I've\nknown.\nNumber two, make the most of the great advantage of school: the wealth of co-founders. Look at the people around you and\nask yourself which you'd like to work with. When you apply that test, you may find you get surprising results. You may\nfind you'd prefer the quiet guy you've mostly ignored to someone who seems impressive but has an attitude to match. I'm\nnot suggesting you suck up to people you don't really like because you think one day they'll be successful. Exactly the\nopposite, in fact: you should only start a startup with someone you like, because a startup will put your friendship\nthrough a stress test. I'm just saying you should think about who you really admire and hang out with them, instead of\nwhoever circumstances throw you together with.\nAnother thing you can do is learn skills that will be useful to you in a startup. These may be different from the skills\nyou'd learn to get a job. For example, thinking about getting a job will make you want to learn programming languages\nyou think employers want, like Java and C++. Whereas if you start a startup, you get to pick the language, so you have\nto think about which will actually let you get the most done. If you use that test you might end up learning Ruby or\nPython instead.\nBut the most important skill for a startup founder isn't a programming technique. It's a knack for understanding users\nand figuring out how to give them what they want. I know I repeat this, but that's because it's so important. And it's a\nskill you can learn, though perhaps habit might be a better word. Get into the habit of thinking of software as having\nusers. What do those users want? What would make them say wow?\nThis is particularly valuable for undergrads, because the concept of users is missing from most college programming\nclasses. The way you get taught programming in college would be like teaching writing as grammar, without mentioning\nthat its purpose is to communicate something to an audience. Fortunately an audience for software is now only an http\nrequest away. So in addition to the programming you do for your classes, why not build some kind of website people will\nfind useful? At the very least it will teach you how to write software with users. In the best case, it might not just\nbe preparation for a startup, but the startup itself, like it was for Yahoo and Google.\nNotes\n[1] Even the desire to protect one's children seems weaker, judging from things people have historically done to their\nkids rather than risk their community's disapproval. (I assume we still do things that will be regarded in the future as\nbarbaric, but historical abuses are easier for us to see.)\n[2] Worrying that Y Combinator makes founders move for 3 months also suggests one underestimates how hard it is to\nstart a startup. You're going to have to put up with much greater inconveniences than that.\n[3] Most employee agreements say that any idea relating to the company's present or potential future business belongs\nto them. Often as not the second clause could include any possible startup, and anyone doing due diligence for an\ninvestor or acquirer will assume the worst.\nTo be safe either (a) don't use code written while you were still employed in your previous job, or (b) get your\nemployer to renounce, in writing, any claim to the code you write for your side project. Many will consent to (b) rather\nthan lose a prized employee. The downside is that you'll have to tell them exactly what your project does.\n[4] Geshke and Warnock only founded Adobe because Xerox ignored them. If Xerox had used what they built, they would\nprobably never have left PARC.\nThanks\nto Jessica Livingston and Robert Morris for reading drafts of this, and to Jeff Arnold and the SIPB for\ninviting me to speak."
    }
  },
  {
    "name_blog": "Why smart people have bad ideas",
    "description_blog": "You come up with a random idea, plunge into it, then at each point (a day, a week, a month) feel you've put so much time into it that this must be THE idea.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/91-why-smart-people-have-bad-ideas",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/bronze.html\nApril 2005\nThis summer, as an experiment, some friends and I are giving\nseed funding\nto a bunch of new\nstartups. It's an experiment because we're prepared to fund younger founders than most investors would. That's why we're\ndoing it during the summer—so even college students can participate.\nWe know from Google and Yahoo that grad students can start successful startups. And we know from experience that some\nundergrads are as capable as most grad students. The accepted age for startup founders has been creeping downward. We're\ntrying to find the lower bound.\nThe deadline has now passed, and we're sifting through 227 applications. We expected to divide them into two categories,\npromising and unpromising. But we soon saw we needed a third: promising people with unpromising ideas. [1]\nThe Artix Phase\nWe should have expected this. It's very common for a group of founders to go through one lame idea before realizing that\na startup has to make something people will pay for. In fact, we ourselves did.\nViaweb wasn't the first startup Robert Morris and I started. In January 1995, we and a couple friends started a company\ncalled Artix. The plan was to put art galleries on the Web. In retrospect, I wonder how we could have wasted our time on\nanything so stupid. Galleries are not especially\nexcited\nabout being on the Web even\nnow, ten years later. They don't want to have their stock visible to any random visitor, like an antique store. [2]\nBesides which, art dealers are the most technophobic people on earth. They didn't become art dealers after a difficult\nchoice between that and a career in the hard sciences. Most of them had never seen the Web before we came to tell them\nwhy they should be on it. Some didn't even have computers. It doesn't do justice to the situation to describe it as a\nhard\nsell\n; we soon sank to building sites for free, and it was hard to convince galleries even to do that.\nGradually it dawned on us that instead of trying to make Web sites for people who didn't want them, we could make sites\nfor people who did. In fact, software that would let people who wanted sites make their own. So we ditched Artix and\nstarted a new company, Viaweb, to make software for building online stores. That one succeeded.\nWe're in good company here. Microsoft was not the first company Paul Allen and Bill Gates started either. The first was\ncalled Traf-o-data. It does not seem to have done as well as Micro-soft.\nIn Robert's defense, he was skeptical about Artix. I dragged him into it. [3] But there were moments when he was\noptimistic. And if we, who were 29 and 30 at the time, could get excited about such a thoroughly boneheaded idea, we\nshould not be surprised that hackers aged 21 or 22 are pitching us ideas with little hope of making money.\nThe Still Life Effect\nWhy does this happen? Why do good hackers have bad business ideas?\nLet's look at our case. One reason we had such a lame idea was that it was the first thing we thought of. I was in New\nYork trying to be a starving artist at the time (the starving part is actually quite easy), so I was haunting galleries\nanyway. When I learned about the Web, it seemed natural to mix the two. Make Web sites for galleries—that's the\nticket!\nIf you're going to spend years working on something, you'd think it might be wise to spend at least a couple days\nconsidering different ideas, instead of going with the first that comes into your head. You'd think. But people don't.\nIn fact, this is a constant problem when you're painting still lifes. You plonk down a bunch of stuff on a table, and\nmaybe spend five or ten minutes rearranging it to look interesting. But you're so impatient to get started painting that\nten minutes of rearranging feels very long. So you start painting. Three days later, having spent twenty hours staring\nat it, you're kicking yourself for having set up such an awkward and boring composition, but by then it's too late.\nPart of the problem is that big projects tend to grow out of small ones. You set up a still life to make a quick sketch\nwhen you have a spare hour, and days later you're still working on it. I once spent a month painting three versions of a\nstill life I set up in about four minutes. At each point (a day, a week, a month) I thought I'd already put in so much\ntime that it was too late to change.\nSo the biggest cause of bad ideas is the still life effect: you come up with a random idea, plunge into it, and then at\neach point (a day, a week, a month) feel you've put so much time into it that this must be\nthe\nidea.\nHow do we fix that? I don't think we should discard plunging. Plunging into an idea is a good thing. The solution is at\nthe other end: to realize that having invested time in something doesn't make it good.\nThis is clearest in the case of names. Viaweb was originally called Webgen, but we discovered someone else had a product\ncalled that. We were so attached to our name that we offered him\n5% of the company\nif he'd let us have it. But he\nwouldn't, so we had to think of another. [4] The best we could do was Viaweb, which we disliked at first. It was like\nhaving a new mother. But within three days we loved it, and Webgen sounded lame and old-fashioned.\nIf it's hard to change something so simple as a name, imagine how hard it is to garbage-collect an idea. A name only has\none point of attachment into your head. An idea for a company gets woven into your thoughts. So you must consciously\ndiscount for that. Plunge in, by all means, but remember later to look at your idea in the harsh light of morning and\nask: is this something people will pay for? Is this, of all the things we could make, the thing people will pay most\nfor?\nMuck\nThe second mistake we made with Artix is also very common. Putting galleries on the Web seemed cool.\nOne of the most valuable things my father taught me is an old Yorkshire saying: where there's muck, there's brass.\nMeaning that unpleasant work pays. And more to the point here, vice versa. Work people like doesn't pay well, for\nreasons of supply and demand. The most extreme case is developing programming languages, which doesn't pay at all,\nbecause people like it so much they do it for free.\nWhen we started Artix, I was still ambivalent about business. I wanted to keep one foot in the art world. Big, big,\nmistake. Going into business is like a hang-glider launch: you'd better do it wholeheartedly, or not at all. The purpose\nof a company, and a startup especially, is to make money. You can't have divided loyalties.\nWhich is not to say that you have to do the most disgusting sort of work, like spamming, or starting a company whose\nonly purpose is patent litigation. What I mean is, if you're starting a company that will do something cool, the aim had\nbetter be to make money and maybe be cool, not to be cool and maybe make money.\nIt's hard enough to make money that you can't do it by accident. Unless it's your first priority, it's unlikely to\nhappen at all.\nHyenas\nWhen I probe our motives with Artix, I see a third mistake: timidity. If you'd proposed at the time that we go into the\ne-commerce business, we'd have found the idea terrifying. Surely a field like that would be dominated by fearsome\nstartups with five million dollars of VC money each. Whereas we felt pretty sure that we could hold our own in the\nslightly less competitive business of generating Web sites for art galleries.\nWe erred ridiculously far on the side of safety. As it turns out, VC-backed startups are not that fearsome. They're too\nbusy trying to spend all that\nmoney\nto get software written. In 1995,\nthe e-commerce business was very competitive as measured in press releases, but not as measured in software. And really\nit never was. The big fish like Open Market (rest their souls) were just consulting companies pretending to be product\ncompanies [5], and the offerings at our end of the market were a couple hundred lines of Perl scripts. Or could have\nbeen implemented as a couple hundred lines of Perl; in fact they were probably tens of thousands of lines of C++ or\nJava. Once we actually took the plunge into e-commerce, it turned out to be surprisingly easy to compete.\nSo why were we afraid? We felt we were good at programming, but we lacked confidence in our ability to do a mysterious,\nundifferentiated thing we called \"business.\" In fact there is no such thing as \"business.\" There's selling, promotion,\nfiguring out what people want, deciding how much to charge, customer support, paying your bills, getting customers to\npay you, getting incorporated, raising money, and so on. And the combination is not as hard as it seems, because some\ntasks (like raising money and getting incorporated) are an O(1) pain in the ass, whether you're big or small, and others\n(like selling and promotion) depend more on energy and imagination than any kind of special training.\nArtix was like a hyena, content to survive on carrion because we were afraid of the lions. Except the lions turned out\nnot to have any teeth, and the business of putting galleries online barely qualified as carrion.\nA Familiar Problem\nSum up all these sources of error, and it's no wonder we had such a bad idea for a company. We did the first thing we\nthought of; we were ambivalent about being in business at all; and we deliberately chose an impoverished market to avoid\ncompetition.\nLooking at the applications for the Summer Founders Program, I see signs of all three. But the first is by far the\nbiggest problem. Most of the groups applying have not stopped to ask: of all the things we could do, is\nthis\nthe one\nwith the best chance of making money?\nIf they'd already been through their Artix phase, they'd have learned to ask that. After the reception we got from art\ndealers, we were ready to. This time, we thought, let's make something people want.\nReading the\nWall Street Journal\nfor a week should give anyone ideas for two or three new startups. The articles are\nfull of descriptions of problems that need to be solved. But most of the applicants don't seem to have looked far for\nideas.\nWe expected the most common proposal to be for multiplayer games. We were not far off: this was the second most common.\nThe most common was some combination of a blog, a calendar, a dating site, and Friendster. Maybe there is some new\nkiller app to be discovered here, but it seems perverse to go poking around in this fog when there are valuable,\nunsolved problems lying about in the open for anyone to see. Why did no one propose a new scheme for micropayments? An\nambitious project, perhaps, but I can't believe we've considered every alternative. And newspapers and magazines are\n(literally) dying for a solution.\nWhy did so few applicants really think about what customers want? I think the problem with many, as with people in their\nearly twenties generally, is that they've been trained their whole lives to jump through predefined hoops. They've\nspent 15-20 years solving problems other people have set for them. And how much time deciding what problems would be\ngood to solve? Two or three course projects? They're good at solving problems, but bad at choosing them.\nBut that, I'm convinced, is just the effect of training. Or more precisely, the effect of grading. To make grading\nefficient, everyone has to solve the same problem, and that means it has to be decided in advance. It would be great if\nschools taught students how to choose problems as well as how to solve them, but I don't know how you'd run such a class\nin practice.\nCopper and Tin\nThe good news is, choosing problems is something that can be learned. I know that from experience. Hackers can learn to\nmake things customers want. [6]\nThis is a controversial view. One expert on \"entrepreneurship\" told me that any startup had to include business people,\nbecause only they could focus on what customers wanted. I'll probably alienate this guy forever by quoting him, but I\nhave to risk it, because his email was such a perfect example of this view:\n80% of MIT spinoffs succeed\nprovided\nthey have at least one management person in the team at the start. The business\nperson represents the \"voice of the customer\" and that's what keeps the engineers and product development on track.\nThis is, in my opinion, a crock. Hackers are perfectly capable of hearing the voice of the customer without a business\nperson to amplify the signal for them. Larry Page and Sergey Brin were grad students in computer science, which\npresumably makes them \"engineers.\" Do you suppose Google is only good because they had some business guy whispering in\ntheir ears what customers wanted? It seems to me the business guys who did the most for Google were the ones who\nobligingly flew Altavista into a hillside just as Google was getting started.\nThe hard part about figuring out what customers want is figuring out that you need to figure it out. But that's\nsomething you can learn quickly. It's like seeing the other interpretation of an ambiguous picture. As soon as someone\ntells you there's a rabbit as well as a duck, it's hard not to see it.\nAnd compared to the sort of problems hackers are used to solving, giving customers what they want is easy. Anyone who\ncan write an optimizing compiler can design a UI that doesn't confuse users, once they\nchoose\nto focus on that\nproblem. And once you apply that kind of brain power to petty but profitable questions, you can create wealth very\nrapidly.\nThat's the essence of a startup: having brilliant people do work that's beneath them. Big companies try to hire the\nright person for the job. Startups win because they don't—because they take people so smart that they would in a big\ncompany be doing \"research,\" and set them to work instead on problems of the most immediate and mundane sort. Think\nEinstein designing refrigerators. [7]\nIf you want to learn what people want, read Dale Carnegie's_How to Win Friends and Influence People._ [8] When a\nfriend recommended this book, I couldn't believe he was serious. But he insisted it was good, so I read it, and he was\nright. It deals with the most difficult problem in human experience: how to see things from other people's point of\nview, instead of thinking only of yourself.\nMost smart people don't do that very well. But adding this ability to raw brainpower is like adding tin to copper. The\nresult is bronze, which is so much harder that it seems a different metal.\nA hacker who has learned what to make, and not just how to make, is extraordinarily powerful. And not just at making\nmoney: look what a small group of volunteers has achieved with Firefox.\nDoing an Artix teaches you to make something people want in the same way that not drinking anything would teach you how\nmuch you depend on water. But it would be more convenient for all involved if the Summer Founders didn't learn this on\nour dime—if they could skip the Artix phase and go right on to make something customers wanted. That, I think, is going\nto be the real experiment this summer. How long will it take them to grasp this?\nWe decided we ought to have T-Shirts for the SFP, and we'd been thinking about what to print on the back. Till now we'd\nbeen planning to use\nIf you can read this, I should be working.\nbut now we've decided it's going to be\nMake something people want.\nNotes\n[1] SFP applicants: please don't assume that not being accepted means we think your idea is bad. Because we want to\nkeep the number of startups small this first summer, we're going to have to turn down some good proposals too.\n[2] Dealers try to give each customer the impression that the stuff they're showing him is something special that only\na few people have seen, when in fact it may have been sitting in their racks for years while they tried to unload it on\nbuyer after buyer.\n[3] On the other hand, he was skeptical about Viaweb too. I have a precise measure of that, because at one point in\nthe first couple months we made a bet: if he ever made a million dollars out of Viaweb, he'd get his ear pierced. We\ndidn't let him\noff\n, either.\n[4] I wrote a program to generate all the combinations of \"Web\" plus a three letter word. I learned from this that\nmost three letter words are bad: Webpig, Webdog, Webfat, Webzit, Webfug. But one of them was Webvia; I swapped them to\nmake Viaweb.\n[5] It's much easier to sell services than a product, just as it's easier to make a living playing at weddings than by\nselling recordings. But the margins are greater on products. So during the Bubble a lot of companies used consulting to\ngenerate revenues they could attribute to the sale of products, because it made a better story for an IPO.\n[6] Trevor Blackwell presents the following recipe for a startup: \"Watch people who have money to spend, see what\nthey're wasting their time on, cook up a solution, and try selling it to them. It's surprising how small a problem can\nbe and still provide a profitable market for a solution.\"\n[7] You need to offer especially large rewards to get great people to do tedious work. That's why startups always pay\nequity rather than just salary.\n[8] Buy an\nold\ncopy from the 1940s or 50s instead of the current edition, which has been rewritten to suit present fashions. The\noriginal edition contained a few unPC ideas, but it's always better to read an original book, bearing in mind that it's\na book from a past era, than to read a new version sanitized for your protection.\nThanks\nto Bill Birch, Trevor Blackwell, Jessica Livingston, and Robert Morris for reading drafts of this."
    }
  },
  {
    "name_blog": "How to Get Startup Ideas",
    "description_blog": "The very best startup ideas tend to have three things in common: they're something the founders themselves want, that they themselves can build, and that few others realize are worth doing.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/8z-how-to-get-startup-ideas",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/startupideas.html\nNovember 2012\nThe way to get startup ideas is not to try to think of startup ideas. It's to look for problems, preferably problems you\nhave yourself.\nThe very best startup ideas tend to have three things in common: they're something the founders themselves want, that\nthey themselves can build, and that few others realize are worth doing. Microsoft, Apple, Yahoo, Google, and Facebook\nall began this way.\nProblems\nWhy is it so important to work on a problem you have? Among other things, it ensures the problem really exists. It\nsounds obvious to say you should only work on problems that exist. And yet by far the most common mistake startups make\nis to solve problems no one has.\nI made it myself. In 1995 I started a company to put art galleries online. But galleries didn't want to be online. It's\nnot how the art business works. So why did I spend 6 months working on this stupid idea? Because I didn't pay attention\nto users. I invented a model of the world that didn't correspond to reality, and worked from that. I didn't notice my\nmodel was wrong until I tried to convince users to pay for what we'd built. Even then I took embarrassingly long to\ncatch on. I was attached to my model of the world, and I'd spent a lot of time on the software. They had to want it!\nWhy do so many founders build things no one wants? Because they begin by trying to think of startup ideas. That m.o. is\ndoubly dangerous: it doesn't merely yield few good ideas; it yields bad ideas that sound plausible enough to fool you\ninto working on them.\nAt YC we call these \"made-up\" or \"sitcom\" startup ideas. Imagine one of the characters on a TV show was starting a\nstartup. The writers would have to invent something for it to do. But coming up with good startup ideas is hard. It's\nnot something you can do for the asking. So (unless they got amazingly lucky) the writers would come up with an idea\nthat sounded plausible, but was actually bad.\nFor example, a social network for pet owners. It doesn't sound obviously mistaken. Millions of people have pets. Often\nthey care a lot about their pets and spend a lot of money on them. Surely many of these people would like a site where\nthey could talk to other pet owners. Not all of them perhaps, but if just 2 or 3 percent were regular visitors, you\ncould have millions of users. You could serve them targeted offers, and maybe charge for premium features. [1]\nThe danger of an idea like this is that when you run it by your friends with pets, they don't say \"I would\nnever\nuse\nthis.\" They say \"Yeah, maybe I could see using something like that.\" Even when the startup launches, it will sound\nplausible to a lot of people. They don't want to use it themselves, at least not right now, but they could imagine other\npeople wanting it. Sum that reaction across the entire population, and you have zero users. [2]\nWell\nWhen a startup launches, there have to be at least some users who really need what they're making — not just people who\ncould see themselves using it one day, but who want it urgently. Usually this initial group of users is small, for the\nsimple reason that if there were something that large numbers of people urgently needed and that could be built with the\namount of effort a startup usually puts into a version one, it would probably already exist. Which means you have to\ncompromise on one dimension: you can either build something a large number of people want a small amount, or something a\nsmall number of people want a large amount. Choose the latter. Not all ideas of that type are good startup ideas, but\nnearly all good startup ideas are of that type.\nImagine a graph whose x axis represents all the people who might want what you're making and whose y axis represents how\nmuch they want it. If you invert the scale on the y axis, you can envision companies as holes. Google is an immense\ncrater: hundreds of millions of people use it, and they need it a lot. A startup just starting out can't expect to\nexcavate that much volume. So you have two choices about the shape of hole you start with. You can either dig a hole\nthat's broad but shallow, or one that's narrow and deep, like a well.\nMade-up startup ideas are usually of the first type. Lots of people are mildly interested in a social network for pet\nowners.\nNearly all good startup ideas are of the second type. Microsoft was a well when they made Altair Basic. There were only\na couple thousand Altair owners, but without this software they were programming in machine language. Thirty years later\nFacebook had the same shape. Their first site was exclusively for Harvard students, of which there are only a few\nthousand, but those few thousand users wanted it a lot.\nWhen you have an idea for a startup, ask yourself: who wants this right now? Who wants this so much that they'll use it\neven when it's a crappy version one made by a two-person startup they've never heard of? If you can't answer that, the\nidea is probably bad. [3]\nYou don't need the narrowness of the well per se. It's depth you need; you get narrowness as a byproduct of optimizing\nfor depth (and speed). But you almost always do get it. In practice the link between depth and narrowness is so strong\nthat it's a good sign when you know that an idea will appeal strongly to a specific group or type of user.\nBut while demand shaped like a well is almost a necessary condition for a good startup idea, it's not a sufficient one.\nIf Mark Zuckerberg had built something that could only ever have appealed to Harvard students, it would not have been a\ngood startup idea. Facebook was a good idea because it started with a small market there was a fast path out of.\nColleges are similar enough that if you build a facebook that works at Harvard, it will work at any college. So you\nspread rapidly through all the colleges. Once you have all the college students, you get everyone else simply by letting\nthem in.\nSimilarly for Microsoft: Basic for the Altair; Basic for other machines; other languages besides Basic; operating\nsystems; applications; IPO.\nSelf\nHow do you tell whether there's a path out of an idea? How do you tell whether something is the germ of a giant company,\nor just a niche product? Often you can't. The founders of Airbnb didn't realize at first how big a market they were\ntapping. Initially they had a much narrower idea. They were going to let hosts rent out space on their floors during\nconventions. They didn't foresee the expansion of this idea; it forced itself upon them gradually. All they knew at\nfirst is that they were onto something. That's probably as much as Bill Gates or Mark Zuckerberg knew at first.\nOccasionally it's obvious from the beginning when there's a path out of the initial niche. And sometimes I can see a\npath that's not immediately obvious; that's one of our specialties at YC. But there are limits to how well this can be\ndone, no matter how much experience you have. The most important thing to understand about paths out of the initial idea\nis the meta-fact that these are hard to see.\nSo if you can't predict whether there's a path out of an idea, how do you choose between ideas? The truth is\ndisappointing but interesting: if you're the right sort of person, you have the right sort of hunches. If you're at the\nleading edge of a field that's changing fast, when you have a hunch that something is worth doing, you're more likely to\nbe right.\nIn\nZen and the Art of Motorcycle Maintenance\n, Robert Pirsig says:\nYou want to know how to paint a perfect painting? It's easy. Make yourself perfect and then just paint naturally.\nI've wondered about that passage since I read it in high school. I'm not sure how useful his advice is for painting\nspecifically, but it fits this situation well. Empirically, the way to have good startup ideas is to become the sort of\nperson who has them.\nBeing at the leading edge of a field doesn't mean you have to be one of the people pushing it forward. You can also be\nat the leading edge as a user. It was not so much because he was a programmer that Facebook seemed a good idea to Mark\nZuckerberg as because he used computers so much. If you'd asked most 40 year olds in 2004 whether they'd like to publish\ntheir lives semi-publicly on the Internet, they'd have been horrified at the idea. But Mark already lived online; to him\nit seemed natural.\nPaul Buchheit says that people at the leading edge of a rapidly changing field \"live in the future.\" Combine that with\nPirsig and you get:\nLive in the future, then build what's missing.\nThat describes the way many if not most of the biggest startups got started. Neither Apple nor Yahoo nor Google nor\nFacebook were even supposed to be companies at first. They grew out of things their founders built because there seemed\na gap in the world.\nIf you look at the way successful founders have had their ideas, it's generally the result of some external stimulus\nhitting a prepared mind. Bill Gates and Paul Allen hear about the Altair and think \"I bet we could write a Basic\ninterpreter for it.\" Drew Houston realizes he's forgotten his USB stick and thinks \"I really need to make my files live\nonline.\" Lots of people heard about the Altair. Lots forgot USB sticks. The reason those stimuli caused those founders\nto start companies was that their experiences had prepared them to notice the opportunities they represented.\nThe verb you want to be using with respect to startup ideas is not \"think up\" but \"notice.\" At YC we call ideas that\ngrow naturally out of the founders' own experiences \"organic\" startup ideas. The most successful startups almost all\nbegin this way.\nThat may not have been what you wanted to hear. You may have expected recipes for coming up with startup ideas, and\ninstead I'm telling you that the key is to have a mind that's prepared in the right way. But disappointing though it may\nbe, this is the truth. And it is a recipe of a sort, just one that in the worst case takes a year rather than a\nweekend.\nIf you're not at the leading edge of some rapidly changing field, you can get to one. For example, anyone reasonably\nsmart can probably get to an edge of programming (e.g. building mobile apps) in a year. Since a successful startup will\nconsume at least 3-5 years of your life, a year's preparation would be a reasonable investment. Especially if you're\nalso looking for a cofounder. [4]\nYou don't have to learn programming to be at the leading edge of a domain that's changing fast. Other domains change\nfast. But while learning to hack is not necessary, it is for the forseeable future sufficient. As Marc Andreessen put\nit, software is eating the world, and this trend has decades left to run.\nKnowing how to hack also means that when you have ideas, you'll be able to implement them. That's not absolutely\nnecessary (Jeff Bezos couldn't) but it's an advantage. It's a big advantage, when you're considering an idea like\nputting a college facebook online, if instead of merely thinking \"That's an interesting idea,\" you can think instead\n\"That's an interesting idea. I'll try building an initial version tonight.\" It's even better when you're both a\nprogrammer and the target user, because then the cycle of generating new versions and testing them on users can happen\ninside one head.\nNoticing\nOnce you're living in the future in some respect, the way to notice startup ideas is to look for things that seem to be\nmissing. If you're really at the leading edge of a rapidly changing field, there will be things that are obviously\nmissing. What won't be obvious is that they're startup ideas. So if you want to find startup ideas, don't merely turn on\nthe filter \"What's missing?\" Also turn off every other filter, particularly \"Could this be a big company?\" There's\nplenty of time to apply that test later. But if you're thinking about that initially, it may not only filter out lots of\ngood ideas, but also cause you to focus on bad ones.\nMost things that are missing will take some time to see. You almost have to trick yourself into seeing the ideas around\nyou.\nBut you\nknow\nthe ideas are out there. This is not one of those problems where there might not be an answer. It's\nimpossibly unlikely that this is the exact moment when technological progress stops. You can be sure people are going to\nbuild things in the next few years that will make you think \"What did I do before x?\"\nAnd when these problems get solved, they will probably seem flamingly obvious in retrospect. What you need to do is turn\noff the filters that usually prevent you from seeing them. The most powerful is simply taking the current state of the\nworld for granted. Even the most radically open-minded of us mostly do that. You couldn't get from your bed to the front\ndoor if you stopped to question everything.\nBut if you're looking for startup ideas you can sacrifice some of the efficiency of taking the status quo for granted\nand start to question things. Why is your inbox overflowing? Because you get a lot of email, or because it's hard to get\nemail out of your inbox? Why do you get so much email? What problems are people trying to solve by sending you email?\nAre there better ways to solve them? And why is it hard to get emails out of your inbox? Why do you keep emails around\nafter you've read them? Is an inbox the optimal tool for that?\nPay particular attention to things that chafe you. The advantage of taking the status quo for granted is not just that\nit makes life (locally) more efficient, but also that it makes life more tolerable. If you knew about all the things\nwe'll get in the next 50 years but don't have yet, you'd find present day life pretty constraining, just as someone from\nthe present would if they were sent back 50 years in a time machine. When something annoys you, it could be because\nyou're living in the future.\nWhen you find the right sort of problem, you should probably be able to describe it as\nobvious\n, at least to you. When\nwe started Viaweb, all the online stores were built by hand, by web designers making individual HTML pages. It was\nobvious to us as programmers that these sites would have to be generated by software. [5]\nWhich means, strangely enough, that coming up with startup ideas is a question of seeing the obvious. That suggests how\nweird this process is: you're trying to see things that are obvious, and yet that you hadn't seen.\nSince what you need to do here is loosen up your own mind, it may be best not to make too much of a direct frontal\nattack on the problem — i.e. to sit down and try to think of ideas. The best plan may be just to keep a background\nprocess running, looking for things that seem to be missing. Work on hard problems, driven mainly by curiosity, but have\na second self watching over your shoulder, taking note of gaps and anomalies. [6]\nGive yourself some time. You have a lot of control over the rate at which you turn yours into a prepared mind, but you\nhave less control over the stimuli that spark ideas when they hit it. If Bill Gates and Paul Allen had constrained\nthemselves to come up with a startup idea in one month, what if they'd chosen a month before the Altair appeared? They\nprobably would have worked on a less promising idea. Drew Houston did work on a less promising idea before Dropbox: an\nSAT prep startup. But Dropbox was a much better idea, both in the absolute sense and also as a match for his skills.\n[7]\nA good way to trick yourself into noticing ideas is to work on projects that seem like they'd be cool. If you do that,\nyou'll naturally tend to build things that are missing. It wouldn't seem as interesting to build something that already\nexisted.\nJust as trying to think up startup ideas tends to produce bad ones, working on things that could be dismissed as \"toys\"\noften produces good ones. When something is described as a toy, that means it has everything an idea needs except being\nimportant. It's cool; users love it; it just doesn't matter. But if you're living in the future and you build something\ncool that users love, it may matter more than outsiders think. Microcomputers seemed like toys when Apple and Microsoft\nstarted working on them. I'm old enough to remember that era; the usual term for people with their own microcomputers\nwas \"hobbyists.\" BackRub seemed like an inconsequential science project. The Facebook was just a way for undergrads to\nstalk one another.\nAt YC we're excited when we meet startups working on things that we could imagine know-it-alls on forums dismissing as\ntoys. To us that's positive evidence an idea is good.\nIf you can afford to take a long view (and arguably you can't afford not to), you can turn \"Live in the future and build\nwhat's missing\" into something even better:\nLive in the future and build what seems interesting.\nSchool\nThat's what I'd advise college students to do, rather than trying to learn about \"entrepreneurship.\" \"Entrepreneurship\"\nis something you learn best by doing it. The examples of the most successful founders make that clear. What you should\nbe spending your time on in college is ratcheting yourself into the future. College is an incomparable opportunity to do\nthat. What a waste to sacrifice an opportunity to solve the hard part of starting a startup — becoming the sort of\nperson who can have organic startup ideas — by spending time learning about the easy part. Especially since you won't\neven really learn about it, any more than you'd learn about sex in a class. All you'll learn is the words for things.\nThe clash of domains is a particularly fruitful source of ideas. If you know a lot about programming and you start\nlearning about some other field, you'll probably see problems that software could solve. In fact, you're doubly likely\nto find good problems in another domain: (a) the inhabitants of that domain are not as likely as software people to have\nalready solved their problems with software, and (b) since you come into the new domain totally ignorant, you don't even\nknow what the status quo is to take it for granted.\nSo if you're a CS major and you want to start a startup, instead of taking a class on entrepreneurship you're better off\ntaking a class on, say, genetics. Or better still, go work for a biotech company. CS majors normally get summer jobs at\ncomputer hardware or software companies. But if you want to find startup ideas, you might do better to get a summer job\nin some unrelated field. [8]\nOr don't take any extra classes, and just build things. It's no coincidence that Microsoft and Facebook both got started\nin January. At Harvard that is (or was) Reading Period, when students have no classes to attend because they're supposed\nto be studying for finals. [9]\nBut don't feel like you have to build things that will become startups. That's premature optimization. Just build\nthings. Preferably with other students. It's not just the classes that make a university such a good place to crank\noneself into the future. You're also surrounded by other people trying to do the same thing. If you work together with\nthem on projects, you'll end up producing not just organic ideas, but organic ideas with organic founding teams — and\nthat, empirically, is the best combination.\nBeware of research. If an undergrad writes something all his friends start using, it's quite likely to represent a good\nstartup idea. Whereas a PhD dissertation is extremely unlikely to. For some reason, the more a project has to count as\nresearch, the less likely it is to be something that could be turned into a startup. [10] I think the reason is that\nthe subset of ideas that count as research is so narrow that it's unlikely that a project that satisfied that constraint\nwould also satisfy the orthogonal constraint of solving users' problems. Whereas when students (or professors) build\nsomething as a side-project, they automatically gravitate toward solving users' problems — perhaps even with an\nadditional energy that comes from being freed from the constraints of research.\nCompetition\nBecause a good idea should seem obvious, when you have one you'll tend to feel that you're late. Don't let that deter\nyou. Worrying that you're late is one of the signs of a good idea. Ten minutes of searching the web will usually settle\nthe question. Even if you find someone else working on the same thing, you're probably not too late. It's exceptionally\nrare for startups to be killed by competitors — so rare that you can almost discount the possibility. So unless you\ndiscover a competitor with the sort of lock-in that would prevent users from choosing you, don't discard the idea.\nIf you're uncertain, ask users. The question of whether you're too late is subsumed by the question of whether anyone\nurgently needs what you plan to make. If you have something that no competitor does and that some subset of users\nurgently need, you have a beachhead. [11]\nThe question then is whether that beachhead is big enough. Or more importantly, who's in it: if the beachhead consists\nof people doing something lots more people will be doing in the future, then it's probably big enough no matter how\nsmall it is. For example, if you're building something differentiated from competitors by the fact that it works on\nphones, but it only works on the newest phones, that's probably a big enough beachhead.\nErr on the side of doing things where you'll face competitors. Inexperienced founders usually give competitors more\ncredit than they deserve. Whether you succeed depends far more on you than on your competitors. So better a good idea\nwith competitors than a bad one without.\nYou don't need to worry about entering a \"crowded market\" so long as you have a thesis about what everyone else in it is\noverlooking. In fact that's a very promising starting point. Google was that type of idea. Your thesis has to be more\nprecise than \"we're going to make an x that doesn't suck\" though. You have to be able to phrase it in terms of something\nthe incumbents are overlooking. Best of all is when you can say that they didn't have the courage of their convictions,\nand that your plan is what they'd have done if they'd followed through on their own insights. Google was that type of\nidea too. The search engines that preceded them shied away from the most radical implications of what they were doing —\nparticularly that the better a job they did, the faster users would leave.\nA crowded market is actually a good sign, because it means both that there's demand and that none of the existing\nsolutions are good enough. A startup can't hope to enter a market that's obviously big and yet in which they have no\ncompetitors. So any startup that succeeds is either going to be entering a market with existing competitors, but armed\nwith some secret weapon that will get them all the users (like Google), or entering a market that looks small but which\nwill turn out to be big (like Microsoft). [12]\nFilters\nThere are two more filters you'll need to turn off if you want to notice startup ideas: the unsexy filter and the schlep\nfilter.\nMost programmers wish they could start a startup by just writing some brilliant code, pushing it to a server, and having\nusers pay them lots of money. They'd prefer not to deal with tedious problems or get involved in messy ways with the\nreal world. Which is a reasonable preference, because such things slow you down. But this preference is so widespread\nthat the space of convenient startup ideas has been stripped pretty clean. If you let your mind wander a few blocks down\nthe street to the messy, tedious ideas, you'll find valuable ones just sitting there waiting to be implemented.\nThe schlep filter is so dangerous that I wrote a separate essay about the condition it induces, which I called\nschlep\nblindness\n. I gave Stripe as an example of a startup that benefited from turning\noff this filter, and a pretty striking example it is. Thousands of programmers were in a position to see this idea;\nthousands of programmers knew how painful it was to process payments before Stripe. But when they looked for startup\nideas they didn't see this one, because unconsciously they shrank from having to deal with payments. And dealing with\npayments is a schlep for Stripe, but not an intolerable one. In fact they might have had net less pain; because the fear\nof dealing with payments kept most people away from this idea, Stripe has had comparatively smooth sailing in other\nareas that are sometimes painful, like user acquisition. They didn't have to try very hard to make themselves heard by\nusers, because users were desperately waiting for what they were building.\nThe unsexy filter is similar to the schlep filter, except it keeps you from working on problems you despise rather than\nones you fear. We overcame this one to work on Viaweb. There were interesting things about the architecture of our\nsoftware, but we weren't interested in ecommerce per se. We could see the problem was one that needed to be solved\nthough.\nTurning off the schlep filter is more important than turning off the unsexy filter, because the schlep filter is more\nlikely to be an illusion. And even to the degree it isn't, it's a worse form of self-indulgence. Starting a successful\nstartup is going to be fairly laborious no matter what. Even if the product doesn't entail a lot of schleps, you'll\nstill have plenty dealing with investors, hiring and firing people, and so on. So if there's some idea you think would\nbe cool but you're kept away from by fear of the schleps involved, don't worry: any sufficiently good idea will have as\nmany.\nThe unsexy filter, while still a source of error, is not as entirely useless as the schlep filter. If you're at the\nleading edge of a field that's changing rapidly, your ideas about what's sexy will be somewhat correlated with what's\nvaluable in practice. Particularly as you get older and more experienced. Plus if you find an idea sexy, you'll work on\nit more enthusiastically. [13]\nRecipes\nWhile the best way to discover startup ideas is to become the sort of person who has them and then build whatever\ninterests you, sometimes you don't have that luxury. Sometimes you need an idea now. For example, if you're working on a\nstartup and your initial idea turns out to be bad.\nFor the rest of this essay I'll talk about tricks for coming up with startup ideas on demand. Although empirically\nyou're better off using the organic strategy, you could succeed this way. You just have to be more disciplined. When you\nuse the organic method, you don't even notice an idea unless it's evidence that something is truly missing. But when you\nmake a conscious effort to think of startup ideas, you have to replace this natural constraint with self-discipline.\nYou'll see a lot more ideas, most of them bad, so you need to be able to filter them.\nOne of the biggest dangers of not using the organic method is the example of the organic method. Organic ideas feel like\ninspirations. There are a lot of stories about successful startups that began when the founders had what seemed a crazy\nidea but \"just knew\" it was promising. When you feel that about an idea you've had while trying to come up with startup\nideas, you're probably mistaken.\nWhen searching for ideas, look in areas where you have some expertise. If you're a database expert, don't build a chat\napp for teenagers (unless you're also a teenager). Maybe it's a good idea, but you can't trust your judgment about that,\nso ignore it. There have to be other ideas that involve databases, and whose quality you can judge. Do you find it hard\nto come up with good ideas involving databases? That's because your expertise raises your standards. Your ideas about\nchat apps are just as bad, but you're giving yourself a Dunning-Kruger pass in that domain.\nThe place to start looking for ideas is things you need. There\nmust\nbe things you need. [14]\nOne good trick is to ask yourself whether in your previous job you ever found yourself saying \"Why doesn't someone make\nx? If someone made x we'd buy it in a second.\" If you can think of any x people said that about, you probably have an\nidea. You know there's demand, and people don't say that about things that are impossible to build.\nMore generally, try asking yourself whether there's something unusual about you that makes your needs different from\nmost other people's. You're probably not the only one. It's especially good if you're different in a way people will\nincreasingly be.\nIf you're changing ideas, one unusual thing about you is the idea you'd previously been working on. Did you discover any\nneeds while working on it? Several well-known startups began this way. Hotmail began as something its founders wrote to\ntalk about their previous startup idea while they were working at their day jobs. [15]\nA particularly promising way to be unusual is to be young. Some of the most valuable new ideas take root first among\npeople in their teens and early twenties. And while young founders are at a disadvantage in some respects, they're the\nonly ones who really understand their peers. It would have been very hard for someone who wasn't a college student to\nstart Facebook. So if you're a young founder (under 23 say), are there things you and your friends would like to do that\ncurrent technology won't let you?\nThe next best thing to an unmet need of your own is an unmet need of someone else. Try talking to everyone you can about\nthe gaps they find in the world. What's missing? What would they like to do that they can't? What's tedious or annoying,\nparticularly in their work? Let the conversation get general; don't be trying too hard to find startup ideas. You're\njust looking for something to spark a thought. Maybe you'll notice a problem they didn't consciously realize they had,\nbecause you know how to solve it.\nWhen you find an unmet need that isn't your own, it may be somewhat blurry at first. The person who needs something may\nnot know exactly what they need. In that case I often recommend that founders act like consultants — that they do what\nthey'd do if they'd been retained to solve the problems of this one user. People's problems are similar enough that\nnearly all the code you write this way will be reusable, and whatever isn't will be a small price to start out certain\nthat you've reached the bottom of the well. [16]\nOne way to ensure you do a good job solving other people's problems is to make them your own. When Rajat Suri of E la\nCarte decided to write software for restaurants, he got a job as a waiter to learn how restaurants worked. That may seem\nlike taking things to extremes, but startups are extreme. We love it when founders do such things.\nIn fact, one strategy I recommend to people who need a new idea is not merely to turn off their schlep and unsexy\nfilters, but to seek out ideas that are unsexy or involve schleps. Don't try to start Twitter. Those ideas are so rare\nthat you can't find them by looking for them. Make something unsexy that people will pay you for.\nA good trick for bypassing the schlep and to some extent the unsexy filter is to ask what you wish someone else would\nbuild, so that you could use it. What would you pay for right now?\nSince startups often garbage-collect broken companies and industries, it can be a good trick to look for those that are\ndying, or deserve to, and try to imagine what kind of company would profit from their demise. For example, journalism is\nin free fall at the moment. But there may still be money to be made from something like journalism. What sort of company\nmight cause people in the future to say \"this replaced journalism\" on some axis?\nBut imagine asking that in the future, not now. When one company or industry replaces another, it usually comes in from\nthe side. So don't look for a replacement for x; look for something that people will later say turned out to be a\nreplacement for x. And be imaginative about the axis along which the replacement occurs. Traditional journalism, for\nexample, is a way for readers to get information and to kill time, a way for writers to make money and to get attention,\nand a vehicle for several different types of advertising. It could be replaced on any of these axes (it has already\nstarted to be on most).\nWhen startups consume incumbents, they usually start by serving some small but important market that the big players\nignore. It's particularly good if there's an admixture of disdain in the big players' attitude, because that often\nmisleads them. For example, after Steve Wozniak built the computer that became the Apple I, he felt obliged to give his\nthen-employer Hewlett-Packard the option to produce it. Fortunately for him, they turned it down, and one of the reasons\nthey did was that it used a TV for a monitor, which seemed intolerably déclassé to a high-end hardware company like HP\nwas at the time. [17]\nAre there groups of\nscruffy\nbut sophisticated users like the early\nmicrocomputer \"hobbyists\" that are currently being ignored by the big players? A startup with its sights set on bigger\nthings can often capture a small market easily by expending an effort that wouldn't be justified by that market alone.\nSimilarly, since the most successful startups generally ride some wave bigger than themselves, it could be a good trick\nto look for waves and ask how one could benefit from them. The prices of gene sequencing and 3D printing are both\nexperiencing Moore's Law-like declines. What new things will we be able to do in the new world we'll have in a few\nyears? What are we unconsciously ruling out as impossible that will soon be possible?\nOrganic\nBut talking about looking explicitly for waves makes it clear that such recipes are plan B for getting startup ideas.\nLooking for waves is essentially a way to simulate the organic method. If you're at the leading edge of some rapidly\nchanging field, you don't have to look for waves; you are the wave.\nFinding startup ideas is a subtle business, and that's why most people who try fail so miserably. It doesn't work well\nsimply to try to think of startup ideas. If you do that, you get bad ones that sound dangerously plausible. The best\napproach is more indirect: if you have the right sort of background, good startup ideas will seem obvious to you. But\neven then, not immediately. It takes time to come across situations where you notice something missing. And often these\ngaps won't seem to be ideas for companies, just things that would be interesting to build. Which is why it's good to\nhave the time and the inclination to build things just because they're interesting.\nLive in the future and build what seems interesting. Strange as it sounds, that's the real recipe.\nNotes\n[1] This form of bad idea has been around as long as the web. It was common in the 1990s, except then people who had\nit used to say they were going to create a portal for x instead of a social network for x. Structurally the idea is\nstone soup: you post a sign saying \"this is the place for people interested in x,\" and all those people show up and you\nmake money from them. What lures founders into this sort of idea are statistics about the millions of people who might\nbe interested in each type of x. What they forget is that any given person might have 20 affinities by this standard,\nand no one is going to visit 20 different communities regularly.\n[2] I'm not saying, incidentally, that I know for sure a social network for pet owners is a bad idea. I know it's a\nbad idea the way I know randomly generated DNA would not produce a viable organism. The set of plausible sounding\nstartup ideas is many times larger than the set of good ones, and many of the good ones don't even sound that plausible.\nSo if all you know about a startup idea is that it sounds plausible, you have to assume it's bad.\n[3] More precisely, the users' need has to give them sufficient activation energy to start using whatever you make,\nwhich can vary a lot. For example, the activation energy for enterprise software sold through traditional channels is\nvery high, so you'd have to be a_lot_better to get users to switch. Whereas the activation energy required to switch\nto a new search engine is low. Which in turn is why search engines are so much better than enterprise software.\n[4] This gets harder as you get older. While the space of ideas doesn't have dangerous local maxima, the space of\ncareers does. There are fairly high walls between most of the paths people take through life, and the older you get, the\nhigher the walls become.\n[5] It was also obvious to us that the web was going to be a big deal. Few non-programmers grasped that in 1995, but\nthe programmers had seen what GUIs had done for desktop computers.\n[6] Maybe it would work to have this second self keep a journal, and each night to make a brief entry listing the gaps\nand anomalies you'd noticed that day. Not startup ideas, just the raw gaps and anomalies.\n[7] Sam Altman points out that taking time to come up with an idea is not merely a better strategy in an absolute\nsense, but also like an undervalued stock in that so few founders do it.\nThere's comparatively little competition for the best ideas, because few founders are willing to put in the time\nrequired to notice them. Whereas there is a great deal of competition for mediocre ideas, because when people make up\nstartup ideas, they tend to make up the same ones.\n[8] For the computer hardware and software companies, summer jobs are the first phase of the recruiting funnel. But if\nyou're good you can skip the first phase. If you're good you'll have no trouble getting hired by these companies when\nyou graduate, regardless of how you spent your summers.\n[9] The empirical evidence suggests that if colleges want to help their students start startups, the best thing they\ncan do is leave them alone in the right way.\n[10] I'm speaking here of IT startups; in biotech things are different.\n[11] This is an instance of a more general rule: focus on users, not competitors. The most important information about\ncompetitors is what you learn via users anyway.\n[12] In practice most successful startups have elements of both. And you can describe each strategy in terms of the\nother by adjusting the boundaries of what you call the market. But it's useful to consider these two ideas separately.\n[13] I almost hesitate to raise that point though. Startups are businesses; the point of a business is to make money;\nand with that additional constraint, you can't expect you'll be able to spend all your time working on what interests\nyou most.\n[14] The need has to be a strong one. You can retroactively describe any made-up idea as something you need. But do\nyou really need that recipe site or local event aggregator as much as Drew Houston needed Dropbox, or Brian Chesky and\nJoe Gebbia needed Airbnb?\nQuite often at YC I find myself asking founders \"Would you use this thing yourself, if you hadn't written it?\" and you'd\nbe surprised how often the answer is no.\n[15] Paul Buchheit points out that trying to sell something bad can be a source of better ideas:\n\"The best technique I've found for dealing with YC companies that have bad ideas is to tell them to go sell the product\nASAP (before wasting time building it). Not only do they learn that nobody wants what they are building, they very often\ncome back with a real idea that they discovered in the process of trying to sell the bad idea.\"\n[16] Here's a recipe that might produce the next Facebook, if you're college students. If you have a connection to one\nof the more powerful sororities at your school, approach the queen bees thereof and offer to be their personal IT\nconsultants, building anything they could imagine needing in their social lives that didn't already exist. Anything that\ngot built this way would be very promising, because such users are not just the most demanding but also the perfect\npoint to spread from.\nI have no idea whether this would work.\n[17] And the reason it used a TV for a monitor is that Steve Wozniak started out by solving his own problems. He, like\nmost of his peers, couldn't afford a monitor.\nThanks\nto Sam Altman, Mike Arrington, Paul Buchheit, John Collison, Patrick Collison, Garry Tan, and Harj Taggar for\nreading drafts of this, and Marc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan, Mike Moritz and Kevin Systrom for\nanswering my questions about startup history."
    }
  },
  {
    "name_blog": "Before the startup",
    "description_blog": "YC's Paul Graham explains that startups are counterintuive and all-consuming, and he boils down his advice to two words: just learn.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/8y-before-the-startup",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/before.html\nOctober 2014\n(This essay is derived from a guest lecture in Sam Altman's\nstartup class\nat\nStanford. It's intended for college students, but much of it is applicable to potential founders at other ages.)\nOne of the advantages of having kids is that when you have to give advice, you can ask yourself \"what would I tell my\nown kids?\" My kids are little, but I can imagine what I'd tell them about startups if they were in college, and that's\nwhat I'm going to tell you.\nStartups are very counterintuitive. I'm not sure why. Maybe it's just because knowledge about them hasn't permeated our\nculture yet. But whatever the reason, starting a startup is a task where you can't always trust your instincts.\nIt's like skiing in that way. When you first try skiing and you want to slow down, your instinct is to lean back. But if\nyou lean back on skis you fly down the hill out of control. So part of learning to ski is learning to suppress that\nimpulse. Eventually you get new habits, but at first it takes a conscious effort. At first there's a list of things\nyou're trying to remember as you start down the hill.\nStartups are as unnatural as skiing, so there's a similar list for startups. Here I'm going to give you the first part\nof it — the things to remember if you want to prepare yourself to start a startup.\nCounterintuitive\nThe first item on it is the fact I already mentioned: that startups are so weird that if you trust your instincts,\nyou'll make a lot of mistakes. If you know nothing more than this, you may at least pause before making them.\nWhen I was running Y Combinator I used to joke that our function was to tell founders things they would ignore. It's\nreally true. Batch after batch, the YC partners warn founders about mistakes they're about to make, and the founders\nignore them, and then come back a year later and say \"I wish we'd listened.\"\nWhy do the founders ignore the partners' advice? Well, that's the thing about counterintuitive ideas: they contradict\nyour intuitions. They seem wrong. So of course your first impulse is to disregard them. And in fact my joking\ndescription is not merely the curse of Y Combinator but part of its raison d'etre. If founders' instincts already gave\nthem the right answers, they wouldn't need us. You only need other people to give you advice that surprises you. That's\nwhy there are a lot of ski instructors and not many running instructors. [1]\nYou can, however, trust your instincts about people. And in fact one of the most common mistakes young founders make is\nnot to do that enough. They get involved with people who seem impressive, but about whom they feel some misgivings\npersonally. Later when things blow up they say \"I knew there was something off about him, but I ignored it because he\nseemed so impressive.\"\nIf you're thinking about getting involved with someone — as a cofounder, an employee, an investor, or an acquirer — and\nyou have misgivings about them, trust your gut. If someone seems slippery, or bogus, or a jerk, don't ignore it.\nThis is one case where it pays to be self-indulgent. Work with people you genuinely like, and you've known long enough\nto be sure.\nExpertise\nThe second counterintuitive point is that it's not that important to know a lot about startups. The way to succeed in a\nstartup is not to be an expert on startups, but to be an expert on your users and the problem you're solving for them.\nMark Zuckerberg didn't succeed because he was an expert on startups. He succeeded despite being a complete noob at\nstartups, because he understood his users really well.\nIf you don't know anything about, say, how to raise an angel round, don't feel bad on that account. That sort of thing\nyou can learn when you need to, and forget after you've done it.\nIn fact, I worry it's not merely unnecessary to learn in great detail about the mechanics of startups, but possibly\nsomewhat dangerous. If I met an undergrad who knew all about convertible notes and employee agreements and (God forbid)\nclass FF stock, I wouldn't think \"here is someone who is way ahead of their peers.\" It would set off alarms. Because\nanother of the characteristic mistakes of young founders is to go through the motions of starting a startup. They make\nup some plausible-sounding idea, raise money at a good valuation, rent a cool office, hire a bunch of people. From the\noutside that seems like what startups do. But the next step after rent a cool office and hire a bunch of people is:\ngradually realize how completely fucked they are, because while imitating all the outward forms of a startup they have\nneglected the one thing that's actually essential: making something people want.\nGame\nWe saw this happen so often that we made up a name for it: playing house. Eventually I realized why it was happening.\nThe reason young founders go through the motions of starting a startup is because that's what they've been trained to do\nfor their whole lives up to that point. Think about what you have to do to get into college, for example.\nExtracurricular activities, check. Even in college classes most of the work is as artificial as running laps.\nI'm not attacking the educational system for being this way. There will always be a certain amount of fakeness in the\nwork you do when you're being taught something, and if you measure their performance it's inevitable that people will\nexploit the difference to the point where much of what you're measuring is artifacts of the fakeness.\nI confess I did it myself in college. I found that in a lot of classes there might only be 20 or 30 ideas that were the\nright shape to make good exam questions. The way I studied for exams in these classes was not (except incidentally) to\nmaster the material taught in the class, but to make a list of potential exam questions and work out the answers in\nadvance. When I walked into the final, the main thing I'd be feeling was curiosity about which of my questions would\nturn up on the exam. It was like a game.\nIt's not surprising that after being trained for their whole lives to play such games, young founders' first impulse on\nstarting a startup is to try to figure out the tricks for winning at this new game. Since fundraising appears to be the\nmeasure of success for startups (another classic noob mistake), they always want to know what the tricks are for\nconvincing investors. We tell them the best way to\nconvince investors\nis to\nmake a startup that's actually doing well, meaning\ngrowing fast\n, and then\nsimply tell investors so. Then they want to know what the tricks are for growing fast. And we have to tell them the best\nway to do that is simply to make something people want.\nSo many of the conversations YC partners have with young founders begin with the founder asking \"How do we...\" and the\npartner replying \"Just...\"\nWhy do the founders always make things so complicated? The reason, I realized, is that they're looking for the trick.\nSo this is the third counterintuitive thing to remember about startups: starting a startup is where gaming the system\nstops working. Gaming the system may continue to work if you go to work for a big company. Depending on how broken the\ncompany is, you can succeed by sucking up to the right people, giving the impression of productivity, and so on. [2]\nBut that doesn't work with startups. There is no boss to trick, only users, and all users care about is whether your\nproduct does what they want. Startups are as impersonal as physics. You have to make something people want, and you\nprosper only to the extent you do.\nThe dangerous thing is, faking does work to some degree on investors. If you're super good at sounding like you know\nwhat you're talking about, you can fool investors for at least one and perhaps even two rounds of funding. But it's not\nin your interest to. The company is ultimately doomed. All you're doing is wasting your own time riding it down.\nSo stop looking for the trick. There are tricks in startups, as there are in any domain, but they are an order of\nmagnitude less important than solving the real problem. A founder who knows nothing about fundraising but has made\nsomething users love will have an easier time raising money than one who knows every trick in the book but has a flat\nusage graph. And more importantly, the founder who has made something users love is the one who will go on to succeed\nafter raising the money.\nThough in a sense it's bad news in that you're deprived of one of your most powerful weapons, I think it's exciting that\ngaming the system stops working when you start a startup. It's exciting that there even exist parts of the world where\nyou win by doing good work. Imagine how depressing the world would be if it were all like school and big companies,\nwhere you either have to spend a lot of time on bullshit things or lose to people who do. [3] I would have been\ndelighted if I'd realized in college that there were parts of the real world where gaming the system mattered less than\nothers, and a few where it hardly mattered at all. But there are, and this variation is one of the most important things\nto consider when you're thinking about your future. How do you win in each type of work, and what would you like to win\nby doing? [4]\nAll-Consuming\nThat brings us to our fourth counterintuitive point: startups are all-consuming. If you start a startup, it will take\nover your life to a degree you cannot imagine. And if your startup succeeds, it will take over your life for a long\ntime: for several years at the very least, maybe for a decade, maybe for the rest of your working life. So there is a\nreal opportunity cost here.\nLarry Page may seem to have an enviable life, but there are aspects of it that are unenviable. Basically at 25 he\nstarted running as fast as he could and it must seem to him that he hasn't stopped to catch his breath since. Every day\nnew shit happens in the Google empire that only the CEO can deal with, and he, as CEO, has to deal with it. If he goes\non vacation for even a week, a whole week's backlog of shit accumulates. And he has to bear this uncomplainingly, partly\nbecause as the company's daddy he can never show fear or weakness, and partly because billionaires get less than zero\nsympathy if they talk about having difficult lives. Which has the strange side effect that the difficulty of being a\nsuccessful startup founder is concealed from almost everyone except those who've done it.\nY Combinator has now funded several companies that can be called big successes, and in every single case the founders\nsay the same thing. It never gets any easier. The nature of the problems change. You're worrying about construction\ndelays at your London office instead of the broken air conditioner in your studio apartment. But the total volume of\nworry never decreases; if anything it increases.\nStarting a successful startup is similar to having kids in that it's like a button you push that changes your life\nirrevocably. And while it's truly wonderful having kids, there are a lot of things that are easier to do before you have\nthem than after. Many of which will make you a better parent when you do have kids. And since you can delay pushing the\nbutton for a while, most people in rich countries do.\nYet when it comes to startups, a lot of people seem to think they're supposed to start them while they're still in\ncollege. Are you crazy? And what are the universities thinking? They go out of their way to ensure their students are\nwell supplied with contraceptives, and yet they're setting up entrepreneurship programs and startup incubators left and\nright.\nTo be fair, the universities have their hand forced here. A lot of incoming students are interested in startups.\nUniversities are, at least de facto, expected to prepare them for their careers. So students who want to start startups\nhope universities can teach them about startups. And whether universities can do this or not, there's some pressure to\nclaim they can, lest they lose applicants to other universities that do.\nCan universities teach students about startups? Yes and no. They can teach students about startups, but as I explained\nbefore, this is not what you need to know. What you need to learn about are the needs of your own users, and you can't\ndo that until you actually start the company. [5] So starting a startup is intrinsically something you can only really\nlearn by doing it. And it's impossible to do that in college, for the reason I just explained: startups take over your\nlife. You can't start a startup for real as a student, because if you start a startup for real you're not a student\nanymore. You may be nominally a student for a bit, but you won't even be that for long. [6]\nGiven this dichotomy, which of the two paths should you take? Be a real student and not start a startup, or start a real\nstartup and not be a student? I can answer that one for you. Do not start a startup in college. How to start a startup\nis just a subset of a bigger problem you're trying to solve: how to have a good life. And though starting a startup can\nbe part of a good life for a lot of ambitious people, age 20 is not the optimal time to do it. Starting a startup is\nlike a brutally fast depth-first search. Most people should still be searching breadth-first at 20.\nYou can do things in your early 20s that you can't do as well before or after, like plunge deeply into projects on a\nwhim and travel super cheaply with no sense of a deadline. For unambitious people, this sort of thing is the dreaded\n\"failure to launch,\" but for the ambitious ones it can be an incomparably valuable sort of exploration. If you start a\nstartup at 20 and you're sufficiently successful, you'll never get to do it. [7]\nMark Zuckerberg will never get to bum around a foreign country. He can do other things most people can't, like charter\njets to fly him to foreign countries. But success has taken a lot of the serendipity out of his life. Facebook is\nrunning him as much as he's running Facebook. And while it can be very cool to be in the grip of a project you consider\nyour life's work, there are advantages to serendipity too, especially early in life. Among other things it gives you\nmore options to choose your life's work from.\nThere's not even a tradeoff here. You're not sacrificing anything if you forgo starting a startup at 20, because you're\nmore likely to succeed if you wait. In the unlikely case that you're 20 and one of your side projects takes off like\nFacebook did, you'll face a choice of running with it or not, and it may be reasonable to run with it. But the usual way\nstartups take off is for the founders to\nmake them\ntake off, and it's gratuitously\nstupid to do that at 20.\nTry\nShould you do it at any age? I realize I've made startups sound pretty hard. If I haven't, let me try again: starting a\nstartup is really hard. What if it's too hard? How can you tell if you're up to this challenge?\nThe answer is the fifth counterintuitive point: you can't tell. Your life so far may have given you some idea what your\nprospects might be if you tried to become a mathematician, or a professional football player. But unless you've had a\nvery strange life you haven't done much that was\nlike\nbeing a startup founder.\nStarting a startup will change you a lot. So what you're trying to estimate is not just what you are, but what you could\ngrow into, and who can do that?\nFor the past 9 years it was my job to predict whether people would have what it took to start successful startups. It\nwas easy to tell how smart they were, and most people reading this will be over that threshold. The hard part was\npredicting how tough and ambitious they would become. There may be no one who has more experience at trying to predict\nthat, so I can tell you how much an expert can know about it, and the answer is: not much. I learned to keep a\ncompletely open mind about which of the startups in each batch would turn out to be the stars.\nThe founders sometimes think they know. Some arrive feeling sure they will ace Y Combinator just as they've aced every\none of the (few, artificial, easy) tests they've faced in life so far. Others arrive wondering how they got in, and\nhoping YC doesn't discover whatever mistake caused it to accept them. But there is little correlation between founders'\ninitial attitudes and how well their companies do.\nI've read that the same is true in the military — that the swaggering recruits are no more likely to turn out to be\nreally tough than the quiet ones. And probably for the same reason: that the tests involved are so different from the\nones in their previous lives.\nIf you're absolutely terrified of starting a startup, you probably shouldn't do it. But if you're merely unsure whether\nyou're up to it, the only way to find out is to try. Just not now.\nIdeas\nSo if you want to start a startup one day, what should you do in college? There are only two things you need initially:\nan idea and cofounders. And the m.o. for getting both is the same. Which leads to our sixth and last counterintuitive\npoint: that the way to get startup ideas is not to try to think of startup ideas.\nI've written a whole\nessay\non this, so I won't repeat it all here. But\nthe short version is that if you make a conscious effort to think of startup ideas, the ideas you come up with will not\nmerely be bad, but bad and plausible-sounding, meaning you'll waste a lot of time on them before realizing they're\nbad.\nThe way to come up with good startup ideas is to take a step back. Instead of making a conscious effort to think of\nstartup ideas, turn your mind into the type that startup ideas form in without any conscious effort. In fact, so\nunconsciously that you don't even realize at first that they're startup ideas.\nThis is not only possible, it's how Apple, Yahoo, Google, and Facebook all got started. None of these companies were\neven meant to be companies at first. They were all just side projects. The best startups almost have to start as side\nprojects, because great ideas tend to be such outliers that your conscious mind would reject them as ideas for\ncompanies.\nOk, so how do you turn your mind into the type that startup ideas form in unconsciously? (1) Learn a lot about things\nthat matter, then (2) work on problems that interest you (3) with people you like and respect. The third part,\nincidentally, is how you get cofounders at the same time as the idea.\nThe first time I wrote that paragraph, instead of \"learn a lot about things that matter,\" I wrote \"become good at some\ntechnology.\" But that prescription, though sufficient, is too narrow. What was special about Brian Chesky and Joe Gebbia\nwas not that they were experts in technology. They were good at design, and perhaps even more importantly, they were\ngood at organizing groups and making projects happen. So you don't have to work on technology per se, so long as you\nwork on problems demanding enough to stretch you.\nWhat kind of problems are those? That is very hard to answer in the general case. History is full of examples of young\npeople who were working on important problems that\nno one else\nat the time\nthought were important, and in particular that their parents didn't think were important. On the other hand, history is\neven fuller of examples of parents who thought their kids were wasting their time and who were right. So how do you know\nwhen you're working on real stuff? [8]\nI know how\nI\nknow. Real problems are interesting, and I am self-indulgent in the sense that I always want to work on\ninteresting things, even if no one else cares about them (in fact, especially if no one else cares about them), and find\nit very hard to make myself work on boring things, even if they're supposed to be important.\nMy life is full of case after case where I worked on something just because it seemed interesting, and it turned out\nlater to be useful in some worldly way.\nY Combinator itself\nwas something I only\ndid because it seemed interesting. So I seem to have some sort of internal compass that helps me out. But I don't know\nwhat other people have in their heads. Maybe if I think more about this I can come up with heuristics for recognizing\ngenuinely interesting problems, but for the moment the best I can offer is the hopelessly question-begging advice that\nif you have a taste for genuinely interesting problems, indulging it energetically is the best way to prepare yourself\nfor a startup. And indeed, probably also the best way to live. [9]\nBut although I can't explain in the general case what counts as an interesting problem, I can tell you about a large\nsubset of them. If you think of technology as something that's spreading like a sort of fractal stain, every moving\npoint on the edge represents an interesting problem. So one guaranteed way to turn your mind into the type that has good\nstartup ideas is to get yourself to the leading edge of some technology — to cause yourself, as Paul Buchheit put it, to\n\"live in the future.\" When you reach that point, ideas that will seem to other people uncannily prescient will seem\nobvious to you. You may not realize they're startup ideas, but you'll know they're something that ought to exist.\nFor example, back at Harvard in the mid 90s a fellow grad student of my friends Robert and Trevor wrote his own voice\nover IP software. He didn't mean it to be a startup, and he never tried to turn it into one. He just wanted to talk to\nhis girlfriend in Taiwan without paying for long distance calls, and since he was an expert on networks it seemed\nobvious to him that the way to do it was turn the sound into packets and ship it over the Internet. He never did any\nmore with his software than talk to his girlfriend, but this is exactly the way the best startups get started.\nSo strangely enough the optimal thing to do in college if you want to be a successful startup founder is not some sort\nof new, vocational version of college focused on \"entrepreneurship.\" It's the classic version of college as education\nfor its own sake. If you want to start a startup after college, what you should do in college is learn powerful things.\nAnd if you have genuine intellectual curiosity, that's what you'll naturally tend to do if you just follow your own\ninclinations. [10]\nThe component of entrepreneurship that really matters is domain expertise. The way to become Larry Page was to become an\nexpert on search. And the way to become an expert on search was to be driven by genuine curiosity, not some ulterior\nmotive.\nAt its best, starting a startup is merely an ulterior motive for curiosity. And you'll do it best if you introduce the\nulterior motive toward the end of the process.\nSo here is the ultimate advice for young would-be startup founders, boiled down to two words: just learn.\nNotes\n[1] Some founders listen more than others, and this tends to be a\npredictor of\nsuccess\n. One of the things I remember about the Airbnbs during YC is how intently\nthey listened.\n[2] In fact, this is one of the reasons startups are possible. If big companies weren't plagued by internal\ninefficiencies, they'd be proportionately more effective, leaving less room for startups.\n[3] In a startup you have to spend a lot of time on\nschleps\n, but this sort of\nwork is merely unglamorous, not bogus.\n[4] What should you do if your true calling is gaming the system? Management consulting.\n[5] The company may not be incorporated, but if you start to get significant numbers of users, you've started it,\nwhether you realize it yet or not.\n[6] It shouldn't be that surprising that colleges can't teach students how to be good startup founders, because they\ncan't teach them how to be good employees either.\nThe way universities \"teach\" students how to be employees is to hand off the task to companies via internship programs.\nBut you couldn't do the equivalent thing for startups, because by definition if the students did well they would never\ncome back.\n[7] Charles Darwin was 22 when he received an invitation to travel aboard the HMS Beagle as a naturalist. It was only\nbecause he was otherwise unoccupied, to a degree that alarmed his family, that he could accept it. And yet if he hadn't\nwe probably would not know his name.\n[8] Parents can sometimes be especially conservative in this department. There are some whose definition of important\nproblems includes only those on the critical path to med school.\n[9] I did manage to think of a heuristic for detecting whether you have a taste for interesting ideas: whether you\nfind known boring ideas intolerable. Could you endure studying literary theory, or working in middle management at a\nlarge company?\n[10] In fact, if your goal is to start a startup, you can stick even more closely to the ideal of a liberal education\nthan past generations have. Back when students focused mainly on getting a job after college, they thought at least a\nlittle about how the courses they took might look to an employer. And perhaps even worse, they might shy away from\ntaking a difficult class lest they get a low grade, which would harm their all-important GPA. Good news: users\ndon't\ncare\nwhat your GPA was. And I've never heard of investors caring either. Y\nCombinator certainly never asks what classes you took in college or what grades you got in them.\nThanks\nto Sam Altman, Paul Buchheit, John Collison, Patrick Collison, Jessica Livingston, Robert Morris, Geoff\nRalston, and Fred Wilson for reading drafts of this."
    }
  },
  {
    "name_blog": "Why to not not start a startup",
    "description_blog": "YC's Paul Graham discusses common reasons why people are reluctant to start a company.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/8x-why-to-not-not-start-a-startup",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/notnot.html\nMarch 2007\n(This essay is derived from talks at the 2007 Startup School and the Berkeley CSUA.)\nWe've now been doing Y Combinator long enough to have some data about success rates. Our first batch, in the summer\nof 2005, had eight startups in it. Of those eight, it now looks as if at least four succeeded. Three have been acquired:\nReddit\nwas a merger of two, Reddit and Infogami, and a third was acquired that we can't talk about\nyet. Another from that batch was\nLoopt\n, which is doing so well they could probably be acquired in\nabout ten minutes if they wanted to.\nSo about half the founders from that first summer, less than two years ago, are now rich, at least by their standards.\n(One thing you learn when you get rich is that there are many degrees of it.)\nI'm not ready to predict our success rate will stay as high as 50%. That first batch could have been an anomaly. But we\nshould be able to do better than the oft-quoted (and probably made up) standard figure of 10%. I'd feel safe aiming\nat 25%.\nEven the founders who fail don't seem to have such a bad time. Of those first eight startups, three are now probably\ndead. In two cases the founders just went on to do other things at the end of the summer. I don't think they were\ntraumatized by the experience. The closest to a traumatic failure was Kiko, whose founders kept working on their startup\nfor a whole year before being squashed by Google Calendar. But they ended up happy. They sold their software on eBay for\na quarter of a million dollars. After they paid back their angel investors, they had about a year's salary each. [1]\nThen they immediately went on to start a new and much more exciting startup,\nJustin.TV\n.\nSo here is an even more striking statistic: 0% of that first batch had a terrible experience. They had ups and downs,\nlike every startup, but I don't think any would have traded it for a job in a cubicle. And that statistic is probably\nnot an anomaly. Whatever our long-term success rate ends up being, I think the rate of people who wish they'd gotten a\nregular job will stay close to 0%.\nThe big mystery to me is: why don't more people start startups? If nearly everyone who does it prefers it to a regular\njob, and a significant percentage get rich, why doesn't everyone want to do this? A lot of people think we get thousands\nof applications for each funding cycle. In fact we usually only get several hundred. Why don't more people apply? And\nwhile it must seem to anyone watching this world that startups are popping up like crazy, the number is small compared\nto the number of people with the necessary skills. The great majority of programmers still go straight from college to\ncubicle, and stay there.\nIt seems like people are not acting in their own interest. What's going on? Well, I can answer that. Because of Y\nCombinator's position at the very start of the venture funding process, we're probably the world's leading experts on\nthe psychology of people who aren't sure if they want to start a company.\nThere's nothing wrong with being unsure. If you're a hacker thinking about starting a startup and hesitating before\ntaking the leap, you're part of a grand tradition. Larry and Sergey seem to have felt the same before they started\nGoogle, and so did Jerry and Filo before they started Yahoo. In fact, I'd guess the most successful startups are the\nones started by uncertain hackers rather than gung-ho business guys.\nWe have some evidence to support this. Several of the most successful startups we've funded told us later that they only\ndecided to apply at the last moment. Some decided only hours before the deadline.\nThe way to deal with uncertainty is to analyze it into components. Most people who are reluctant to do something have\nabout eight different reasons mixed together in their heads, and don't know themselves which are biggest. Some will be\njustified and some bogus, but unless you know the relative proportion of each, you don't know whether your overall\nuncertainty is mostly justified or mostly bogus.\nSo I'm going to list all the components of people's reluctance to start startups, and explain which are real. Then\nwould-be founders can use this as a checklist to examine their own feelings.\nI admit my goal is to increase your self-confidence. But there are two things different here from the usual\nconfidence-building exercise. One is that I'm motivated to be honest. Most people in the confidence-building business\nhave already achieved their goal when you buy the book or pay to attend the seminar where they tell you how great you\nare. Whereas if I encourage people to start startups who shouldn't, I make my own life worse. If I encourage too many\npeople to apply to Y Combinator, it just means more work for me, because I have to read all the applications.\nThe other thing that's going to be different is my approach. Instead of being positive, I'm going to be negative.\nInstead of telling you \"come on, you can do it\" I'm going to consider all the reasons you aren't doing it, and show why\nmost (but not all) should be ignored. We'll start with the one everyone's born with.\n1. Too young\nA lot of people think they're too young to start a startup. Many are right. The median age worldwide is about 27, so\nprobably a third of the population can truthfully say they're too young.\nWhat's too young? One of our goals with Y Combinator was to discover the lower bound on the age of startup founders. It\nalways seemed to us that investors were too conservative here—that they wanted to fund professors, when really they\nshould be funding grad students or even undergrads.\nThe main thing we've discovered from pushing the edge of this envelope is not where the edge is, but how fuzzy it is.\nThe outer limit may be as low as 16. We don't look beyond 18 because people younger than that can't legally enter into\ncontracts. But the most successful founder we've funded so far, Sam Altman, was 19 at the time.\nSam Altman, however, is an outlying data point. When he was 19, he seemed like he had a 40 year old inside him. There\nare other 19 year olds who are 12 inside.\nThere's a reason we have a distinct word \"adult\" for people over a certain age. There is a threshold you cross. It's\nconventionally fixed at 21, but different people cross it at greatly varying ages. You're old enough to start a startup\nif you've crossed this threshold, whatever your age.\nHow do you tell? There are a couple tests adults use. I realized these tests existed after meeting Sam Altman, actually.\nI noticed that I felt like I was talking to someone much older. Afterward I wondered, what am I even measuring? What\nmade him seem older?\nOne test adults use is whether you still have the kid flake reflex. When you're a little kid and you're asked to do\nsomething hard, you can cry and say \"I can't do it\" and the adults will probably let you off. As a kid there's a magic\nbutton you can press by saying \"I'm just a kid\" that will get you out of most difficult situations. Whereas adults, by\ndefinition, are not allowed to flake. They still do, of course, but when they do they're ruthlessly pruned.\nThe other way to tell an adult is by how they react to a challenge. Someone who's not yet an adult will tend to respond\nto a challenge from an adult in a way that acknowledges their dominance. If an adult says \"that's a stupid idea,\" a kid\nwill either crawl away with his tail between his legs, or rebel. But rebelling presumes inferiority as much as\nsubmission. The adult response to \"that's a stupid idea,\" is simply to look the other person in the eye and say \"Really?\nWhy do you think so?\"\nThere are a lot of adults who still react childishly to challenges, of course. What you don't often find are kids who\nreact to challenges like adults. When you do, you've found an adult, whatever their age.\n2. Too inexperienced\nI once wrote that startup founders should be at least 23, and that people should work for another company for a few\nyears before starting their own. I no longer believe that, and what changed my mind is the example of the startups we've\nfunded.\nI still think 23 is a better age than 21. But the best way to get experience if you're 21 is to start a startup. So,\nparadoxically, if you're too inexperienced to start a startup, what you should do is start one. That's a way more\nefficient cure for inexperience than a normal job. In fact, getting a normal job may actually make you less able to\nstart a startup, by turning you into a tame animal who thinks he needs an office to work in and a product manager to\ntell him what software to write.\nWhat really convinced me of this was the Kikos. They started a startup right out of college. Their inexperience caused\nthem to make a lot of mistakes. But by the time we funded their second startup, a year later, they had become extremely\nformidable. They were certainly not tame animals. And there is no way they'd have grown so much if they'd spent that\nyear working at Microsoft, or even Google. They'd still have been diffident junior programmers.\nSo now I'd advise people to go ahead and start startups right out of college. There's no better time to take risks than\nwhen you're young. Sure, you'll probably fail. But even failure will get you to the ultimate goal faster than getting a\njob.\nIt worries me a bit to be saying this, because in effect we're advising people to educate themselves by failing at our\nexpense, but it's the truth.\n3. Not determined enough\nYou need a lot of determination to succeed as a startup founder. It's probably the single best predictor of success.\nSome people may not be determined enough to make it. It's hard for me to say for sure, because I'm so determined that I\ncan't imagine what's going on in the heads of people who aren't. But I know they exist.\nMost hackers probably underestimate their determination. I've seen a lot become visibly more determined as they get used\nto running a startup. I can think of several we've funded who would have been delighted at first to be bought for $2\nmillion, but are now set on world domination.\nHow can you tell if you're determined enough, when Larry and Sergey themselves were unsure at first about starting a\ncompany? I'm guessing here, but I'd say the test is whether you're sufficiently driven to work on your own projects.\nThough they may have been unsure whether they wanted to start a company, it doesn't seem as if Larry and Sergey were\nmeek little research assistants, obediently doing their advisors' bidding. They started projects of their own.\n4. Not smart enough\nYou may need to be moderately smart to succeed as a startup founder. But if you're worried about this, you're probably\nmistaken. If you're smart enough to worry that you might not be smart enough to start a startup, you probably are.\nAnd in any case, starting a startup just doesn't require that much intelligence. Some startups do. You have to be good\nat math to write Mathematica. But most companies do more mundane stuff where the decisive factor is effort, not brains.\nSilicon Valley can warp your perspective on this, because there's a cult of smartness here. People who aren't smart at\nleast try to act that way. But if you think it takes a lot of intelligence to get rich, try spending a couple days in\nsome of the fancier bits of New York or LA.\nIf you don't think you're smart enough to start a startup doing something technically difficult, just write enterprise\nsoftware. Enterprise software companies aren't technology companies, they're sales companies, and sales depends mostly\non effort.\n5. Know nothing about business\nThis is another variable whose coefficient should be zero. You don't need to know anything about business to start a\nstartup. The initial focus should be the product. All you need to know in this phase is how to build things people want.\nIf you succeed, you'll have to think about how to make money from it. But this is so easy you can pick it up on the\nfly.\nI get a fair amount of flak for telling founders just to make something great and not worry too much about making money.\nAnd yet all the empirical evidence points that way: pretty much 100% of startups that make something popular manage to\nmake money from it. And acquirers tell me privately that revenue is not what they buy startups for, but their strategic\nvalue. Which means, because they made something people want. Acquirers know the rule holds for them too: if users love\nyou, you can always make money from that somehow, and if they don't, the cleverest business model in the world won't\nsave you.\nSo why do so many people argue with me? I think one reason is that they hate the idea that a bunch of twenty year olds\ncould get rich from building something cool that doesn't make any money. They just don't want that to be possible. But\nhow possible it is doesn't depend on how much they want it to be.\nFor a while it annoyed me to hear myself described as some kind of irresponsible pied piper, leading impressionable\nyoung hackers down the road to ruin. But now I realize this kind of controversy is a sign of a good idea.\nThe most valuable truths are the ones most people don't believe. They're like undervalued stocks. If you start with\nthem, you'll have the whole field to yourself. So when you find an idea you know is good but most people disagree with,\nyou should not merely ignore their objections, but push aggressively in that direction. In this case, that means you\nshould seek out ideas that would be popular but seem hard to make money from.\nWe'll bet a seed round you can't make something popular that we can't figure out how to make money from.\n6. No cofounder\nNot having a cofounder is a real problem. A startup is too much for one person to bear. And though we differ from other\ninvestors on a lot of questions, we all agree on this. All investors, without exception, are more likely to fund you\nwith a cofounder than without.\nWe've funded two single founders, but in both cases we suggested their first priority should be to find a cofounder.\nBoth did. But we'd have preferred them to have cofounders before they applied. It's not super hard to get a cofounder\nfor a project that's just been funded, and we'd rather have cofounders committed enough to sign up for something super\nhard.\nIf you don't have a cofounder, what should you do? Get one. It's more important than anything else. If there's no one\nwhere you live who wants to start a startup with you, move where there are people who do. If no one wants to work with\nyou on your current idea, switch to an idea people want to work on.\nIf you're still in school, you're surrounded by potential cofounders. A few years out it gets harder to find them. Not\nonly do you have a smaller pool to draw from, but most already have jobs, and perhaps even families to support. So if\nyou had friends in college you used to scheme about startups with, stay in touch with them as well as you can. That may\nhelp keep the dream alive.\nIt's possible you could meet a cofounder through something like a user's group or a conference. But I wouldn't be too\noptimistic. You need to work with someone to know whether you want them as a cofounder. [2]\nThe real lesson to draw from this is not how to find a cofounder, but that you should start startups when you're young\nand there are lots of them around.\n7. No idea\nIn a sense, it's not a problem if you don't have a good idea, because most startups change their idea anyway. In the\naverage Y Combinator startup, I'd guess 70% of the idea is new at the end of the first three months. Sometimes\nit's 100%.\nIn fact, we're so sure the founders are more important than the initial idea that we're going to try something new this\nfunding cycle. We're going to let people apply with no idea at all. If you want, you can answer the question on the\napplication form that asks what you're going to do with \"We have no idea.\" If you seem really good we'll accept you\nanyway. We're confident we can sit down with you and cook up some promising project.\nReally this just codifies what we do already. We put little weight on the idea. We ask mainly out of politeness. The\nkind of question on the application form that we really care about is the one where we ask what cool things you've made.\nIf what you've made is version one of a promising startup, so much the better, but the main thing we care about is\nwhether you're good at making things. Being lead developer of a popular open source project counts almost as much.\nThat solves the problem if you get funded by Y Combinator. What about in the general case? Because in another sense, it\nis a problem if you don't have an idea. If you start a startup with no idea, what do you do next?\nSo here's the brief recipe for getting startup ideas. Find something that's missing in your own life, and supply that\nneed—no matter how specific to you it seems. Steve Wozniak built himself a computer; who knew so many other people would\nwant them? A need that's narrow but genuine is a better starting point than one that's broad but hypothetical. So even\nif the problem is simply that you don't have a date on Saturday night, if you can think of a way to fix that by writing\nsoftware, you're onto something, because a lot of other people have the same problem.\n8. No room for more startups\nA lot of people look at the ever-increasing number of startups and think \"this can't continue.\" Implicit in their\nthinking is a fallacy: that there is some limit on the number of startups there could be. But this is false. No one\nclaims there's any limit on the number of people who can work for salary at 1000-person companies. Why should there be\nany limit on the number who can work for equity at 5-person companies? [3]\nNearly everyone who works is satisfying some kind of need. Breaking up companies into smaller units doesn't make those\nneeds go away. Existing needs would probably get satisfied more efficiently by a network of startups than by a few\ngiant, hierarchical organizations, but I don't think that would mean less opportunity, because satisfying current needs\nwould lead to more. Certainly this tends to be the case in individuals. Nor is there anything wrong with that. We take\nfor granted things that medieval kings would have considered effeminate luxuries, like whole buildings heated to spring\ntemperatures year round. And if things go well, our descendants will take for granted things we would consider\nshockingly luxurious. There is no absolute standard for material wealth. Health care is a component of it, and that\nalone is a black hole. For the foreseeable future, people will want ever more material wealth, so there is no limit to\nthe amount of work available for companies, and for startups in particular.\nUsually the limited-room fallacy is not expressed directly. Usually it's implicit in statements like \"there are only so\nmany startups Google, Microsoft, and Yahoo can buy.\" Maybe, though the list of acquirers is a lot longer than that. And\nwhatever you think of other acquirers, Google is not stupid. The reason big companies buy startups is that they've\ncreated something valuable. And why should there be any limit to the number of valuable startups companies can acquire,\nany more than there is a limit to the amount of wealth individual people want? Maybe there would be practical limits on\nthe number of startups any one acquirer could assimilate, but if there is value to be had, in the form of upside that\nfounders are willing to forgo in return for an immediate payment, acquirers will evolve to consume it. Markets are\npretty smart that way.\n9. Family to support\nThis one is real. I wouldn't advise anyone with a family to start a startup. I'm not saying it's a bad idea, just that I\ndon't want to take responsibility for advising it. I'm willing to take responsibility for telling 22 year olds to start\nstartups. So what if they fail? They'll learn a lot, and that job at Microsoft will still be waiting for them if they\nneed it. But I'm not prepared to cross moms.\nWhat you can do, if you have a family and want to start a startup, is start a consulting business you can then gradually\nturn into a product business. Empirically the chances of pulling that off seem very small. You're never going to produce\nGoogle this way. But at least you'll never be without an income.\nAnother way to decrease the risk is to join an existing startup instead of starting your own. Being one of the first\nemployees of a startup is a lot like being a founder, in both the good ways and the bad. You'll be roughly 1/n^2\nfounder, where n is your employee number.\nAs with the question of cofounders, the real lesson here is to start startups when you're young.\n10. Independently wealthy\nThis is my excuse for not starting a startup. Startups are stressful. Why do it if you don't need the money? For every\n\"serial entrepreneur,\" there are probably twenty sane ones who think \"Start another company? Are you crazy?\"\nI've come close to starting new startups a couple times, but I always pull back because I don't want four years of my\nlife to be consumed by random schleps. I know this business well enough to know you can't do it half-heartedly. What\nmakes a good startup founder so dangerous is his willingness to endure infinite schleps.\nThere is a bit of a problem with retirement, though. Like a lot of people, I like to work. And one of the many weird\nlittle problems you discover when you get rich is that a lot of the interesting people you'd like to work with are not\nrich. They need to work at something that pays the bills. Which means if you want to have them as colleagues, you have\nto work at something that pays the bills too, even though you don't need to. I think this is what drives a lot of serial\nentrepreneurs, actually.\nThat's why I love working on Y Combinator so much. It's an excuse to work on something interesting with people I like.\n11. Not ready for commitment\nThis was my reason for not starting a startup for most of my twenties. Like a lot of people that age, I valued freedom\nmost of all. I was reluctant to do anything that required a commitment of more than a few months. Nor would I have\nwanted to do anything that completely took over my life the way a startup does. And that's fine. If you want to spend\nyour time travelling around, or playing in a band, or whatever, that's a perfectly legitimate reason not to start a\ncompany.\nIf you start a startup that succeeds, it's going to consume at least three or four years. (If it fails, you'll be done a\nlot quicker.) So you shouldn't do it if you're not ready for commitments on that scale. Be aware, though, that if you\nget a regular job, you'll probably end up working there for as long as a startup would take, and you'll find you have\nmuch less spare time than you might expect. So if you're ready to clip on that ID badge and go to that orientation\nsession, you may also be ready to start that startup.\n12. Need for structure\nI'm told there are people who need structure in their lives. This seems to be a nice way of saying they need someone to\ntell them what to do. I believe such people exist. There's plenty of empirical evidence: armies, religious cults, and so\non. They may even be the majority.\nIf you're one of these people, you probably shouldn't start a startup. In fact, you probably shouldn't even go to work\nfor one. In a good startup, you don't get told what to do very much. There may be one person whose job title is CEO, but\ntill the company has about twelve people no one should be telling anyone what to do. That's too inefficient. Each person\nshould just do what they need to without anyone telling them.\nIf that sounds like a recipe for chaos, think about a soccer team. Eleven people manage to work together in quite\ncomplicated ways, and yet only in occasional emergencies does anyone tell anyone else what to do. A reporter once asked\nDavid Beckham if there were any language problems at Real Madrid, since the players were from about eight different\ncountries. He said it was never an issue, because everyone was so good they never had to talk. They all just did the\nright thing.\nHow do you tell if you're independent-minded enough to start a startup? If you'd bristle at the suggestion that you\naren't, then you probably are.\n13. Fear of uncertainty\nPerhaps some people are deterred from starting startups because they don't like the uncertainty. If you go to work for\nMicrosoft, you can predict fairly accurately what the next few years will be like—all too accurately, in fact. If you\nstart a startup, anything might happen.\nWell, if you're troubled by uncertainty, I can solve that problem for you: if you start a startup, it will probably\nfail. Seriously, though, this is not a bad way to think about the whole experience. Hope for the best, but expect the\nworst. In the worst case, it will at least be interesting. In the best case you might get rich.\nNo one will blame you if the startup tanks, so long as you made a serious effort. There may once have been a time when\nemployers would regard that as a mark against you, but they wouldn't now. I asked managers at big companies, and they\nall said they'd prefer to hire someone who'd tried to start a startup and failed over someone who'd spent the same time\nworking at a big company.\nNor will investors hold it against you, as long as you didn't fail out of laziness or incurable stupidity. I'm told\nthere's a lot of stigma attached to failing in other places—in Europe, for example. Not here. In America, companies,\nlike practically everything else, are disposable.\n14. Don't realize what you're avoiding\nOne reason people who've been out in the world for a year or two make better founders than people straight from college\nis that they know what they're avoiding. If their startup fails, they'll have to get a job, and they know how much jobs\nsuck.\nIf you've had summer jobs in college, you may think you know what jobs are like, but you probably don't. Summer jobs at\ntechnology companies are not real jobs. If you get a summer job as a waiter, that's a real job. Then you have to carry\nyour weight. But software companies don't hire students for the summer as a source of cheap labor. They do it in the\nhope of recruiting them when they graduate. So while they're happy if you produce, they don't expect you to.\nThat will change if you get a real job after you graduate. Then you'll have to earn your keep. And since most of what\nbig companies do is boring, you're going to have to work on boring stuff. Easy, compared to college, but boring. At\nfirst it may seem cool to get paid for doing easy stuff, after paying to do hard stuff in college. But that wears off\nafter a few months. Eventually it gets demoralizing to work on dumb stuff, even if it's easy and you get paid a lot.\nAnd that's not the worst of it. The thing that really sucks about having a regular job is the expectation that you're\nsupposed to be there at certain times. Even Google is afflicted with this, apparently. And what this means, as everyone\nwho's had a regular job can tell you, is that there are going to be times when you have absolutely no desire to work on\nanything, and you're going to have to go to work anyway and sit in front of your screen and pretend to. To someone who\nlikes work, as most good hackers do, this is torture.\nIn a startup, you skip all that. There's no concept of office hours in most startups. Work and life just get mixed\ntogether. But the good thing about that is that no one minds if you have a life at work. In a startup you can do\nwhatever you want most of the time. If you're a founder, what you want to do most of the time is work. But you never\nhave to pretend to.\nIf you took a nap in your office in a big company, it would seem unprofessional. But if you're starting a startup and\nyou fall asleep in the middle of the day, your cofounders will just assume you were tired.\n15. Parents want you to be a doctor\nA significant number of would-be startup founders are probably dissuaded from doing it by their parents. I'm not going\nto say you shouldn't listen to them. Families are entitled to their own traditions, and who am I to argue with them? But\nI will give you a couple reasons why a safe career might not be what your parents really want for you.\nOne is that parents tend to be more conservative for their kids than they would be for themselves. This is actually a\nrational response to their situation. Parents end up sharing more of their kids' ill fortune than good fortune. Most\nparents don't mind this; it's part of the job; but it does tend to make them excessively conservative. And erring on the\nside of conservatism is still erring. In almost everything, reward is proportionate to risk. So by protecting their kids\nfrom risk, parents are, without realizing it, also protecting them from rewards. If they saw that, they'd want you to\ntake more risks.\nThe other reason parents may be mistaken is that, like generals, they're always fighting the last war. If they want you\nto be a doctor, odds are it's not just because they want you to help the sick, but also because it's a prestigious and\nlucrative career. [4] But not so lucrative or prestigious as it was when their opinions were formed. When I was a kid\nin the seventies, a doctor was\nthe\nthing to be. There was a sort of golden triangle involving doctors,\nMercedes 450SLs, and tennis. All three vertices now seem pretty dated.\nThe parents who want you to be a doctor may simply not realize how much things have changed. Would they be that unhappy\nif you were Steve Jobs instead? So I think the way to deal with your parents' opinions about what you should do is to\ntreat them like feature requests. Even if your only goal is to please them, the way to do that is not simply to give\nthem what they ask for. Instead think about why they're asking for something, and see if there's a better way to give\nthem what they need.\n16. A job is the default\nThis leads us to the last and probably most powerful reason people get regular jobs: it's the default thing to do.\nDefaults are enormously powerful, precisely because they operate without any conscious choice.\nTo almost everyone except criminals, it seems an axiom that if you need money, you should get a job. Actually this\ntradition is not much more than a hundred years old. Before that, the default way to make a living was by farming. It's\na bad plan to treat something only a hundred years old as an axiom. By historical standards, that's something that's\nchanging pretty rapidly.\nWe may be seeing another such change right now. I've read a lot of economic history, and I understand the startup world\npretty well, and it now seems to me fairly likely that we're seeing the beginning of a change like the one from farming\nto manufacturing.\nAnd you know what? If you'd been around when that change began (around 1000 in Europe) it would have seemed to nearly\neveryone that running off to the city to make your fortune was a crazy thing to do. Though serfs were in principle\nforbidden to leave their manors, it can't have been that hard to run away to a city. There were no guards patrolling the\nperimeter of the village. What prevented most serfs from leaving was that it seemed insanely risky. Leave one's plot of\nland? Leave the people you'd spent your whole life with, to live in a giant city of three or four thousand complete\nstrangers? How would you live? How would you get food, if you didn't grow it?\nFrightening as it seemed to them, it's now the default with us to live by our wits. So if it seems risky to you to start\na startup, think how risky it once seemed to your ancestors to live as we do now. Oddly enough, the people who know this\nbest are the very ones trying to get you to stick to the old model. How can Larry and Sergey say you should come work as\ntheir employee, when they didn't get jobs themselves?\nNow we look back on medieval peasants and wonder how they stood it. How grim it must have been to till the same fields\nyour whole life with no hope of anything better, under the thumb of lords and priests you had to give all your surplus\nto and acknowledge as your masters. I wouldn't be surprised if one day people look back on what we consider a normal job\nin the same way. How grim it would be to commute every day to a cubicle in some soulless office complex, and be told\nwhat to do by someone you had to acknowledge as a boss—someone who could call you into their office and say \"take a\nseat,\" and you'd sit! Imagine having to ask\npermission\nto release software to users. Imagine being sad on Sunday\nafternoons because the weekend was almost over, and tomorrow you'd have to get up and go to work. How did they stand\nit?\nIt's exciting to think we may be on the cusp of another shift like the one from farming to manufacturing. That's why I\ncare about startups. Startups aren't interesting just because they're a way to make a lot of money. I couldn't care less\nabout other ways to do that, like speculating in securities. At most those are interesting the way puzzles are. There's\nmore going on with startups. They may represent one of those rare, historic shifts in the way\nwealth\nis created.\nThat's ultimately what drives us to work on Y Combinator. We want to make money, if only so we don't have to stop doing\nit, but that's not the main goal. There have only been a handful of these great economic shifts in human history. It\nwould be an amazing hack to make one happen faster.\nNotes\n[1] The only people who lost were us. The angels had convertible debt, so they had first claim on the proceeds of the\nauction. Y Combinator only got 38 cents on the dollar.\n[2] The best kind of organization for that might be an open source project, but those don't involve a lot of face to\nface meetings. Maybe it would be worth starting one that did.\n[3] There need to be some number of big companies to acquire the startups, so the number of big companies couldn't\ndecrease to zero.\n[4] Thought experiment: If doctors did the same work, but as impoverished outcasts, which parents would still want\ntheir kids to be doctors?\nThanks\nto Trevor Blackwell, Jessica Livingston, and Robert Morris for reading drafts of this, to the founders of\nZenter for letting me use their web-based PowerPoint killer even though it isn't launched yet, and to Ming-Hay Luk of\nthe Berkeley CSUA for inviting me to speak."
    }
  },
  {
    "name_blog": "The hardest lessons for startups to learn",
    "description_blog": "Seven counterintuitive lessons about startups — from releasing early to not getting your hopes up.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/8w-the-hardest-lessons-for-startups-to-learn",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/startuplessons.html\nApril 2006\n(This essay is derived from a talk at the 2006\nStartup School\n.)\nThe startups we've funded so far are pretty quick, but they seem quicker to learn some lessons than others. I think it's\nbecause some things about startups are kind of counterintuitive.\nWe've now\ninvested\nin enough companies that I've learned a trick for determining which points\nare the counterintuitive ones: they're the ones I have to keep repeating.\nSo I'm going to number these points, and maybe with future startups I'll be able to pull off a form of Huffman coding.\nI'll make them all read this, and then instead of nagging them in detail, I'll just be able to say:\nnumber four!\n1. Release Early.\nThe thing I probably repeat most is this recipe for a startup: get a version 1 out fast, then improve it based on users'\nreactions.\nBy \"release early\" I don't mean you should release something full of bugs, but that you should release something\nminimal. Users hate bugs, but they don't seem to mind a minimal version 1, if there's more coming soon.\nThere are several reasons it pays to get version 1 done fast. One is that this is simply the right way to write\nsoftware, whether for a startup or not. I've been repeating that since 1993, and I haven't seen much since to contradict\nit. I've seen a lot of startups die because they were too slow to release stuff, and none because they were too quick.\n[1]\nOne of the things that will surprise you if you build something popular is that you won't know your users.\nReddit\nnow has almost half a million unique visitors a month. Who are all those people? They have\nno idea. No web startup does. And since you don't know your users, it's dangerous to guess what they'll like. Better to\nrelease something and let them tell you.\nWufoo\ntook this to heart and released their form-builder before the underlying database. You can't\neven drive the thing yet, but 83,000 people came to sit in the driver's seat and hold the steering wheel. And Wufoo got\nvaluable feedback from it: Linux users complained they used too much Flash, so they rewrote their software not to. If\nthey'd waited to release everything at once, they wouldn't have discovered this problem till it was more deeply wired\nin.\nEven if you had no users, it would still be important to release quickly, because for a startup the initial release acts\nas a shakedown cruise. If anything major is broken-- if the idea's no good, for example, or the founders hate one\nanother-- the stress of getting that first version out will expose it. And if you have such problems you want to find\nthem early.\nPerhaps the most important reason to release early, though, is that it makes you work harder. When you're working on\nsomething that isn't released, problems are intriguing. In something that's out there, problems are alarming. There is a\nlot more urgency once you release. And I think that's precisely why people put it off. They know they'll have to work a\nlot harder once they do. [2]\n2. Keep Pumping Out Features.\nOf course, \"release early\" has a second component, without which it would be bad advice. If you're going to start with\nsomething that doesn't do much, you better improve it fast.\nWhat I find myself repeating is \"pump out features.\" And this rule isn't just for the initial stages. This is something\nall startups should do for as long as they want to be considered startups.\nI don't mean, of course, that you should make your application ever more complex. By \"feature\" I mean one unit of\nhacking-- one quantum of making users' lives better.\nAs with exercise, improvements beget improvements. If you run every day, you'll probably feel like running tomorrow. But\nif you skip running for a couple weeks, it will be an effort to drag yourself out. So it is with hacking: the more ideas\nyou implement, the more ideas you'll have. You should make your system better at least in some small way every day or\ntwo.\nThis is not just a good way to get development done; it is also a form of marketing. Users love a site that's constantly\nimproving. In fact, users expect a site to improve. Imagine if you visited a site that seemed very good, and then\nreturned two months later and not one thing had changed. Wouldn't it start to seem lame? [3]\nThey'll like you even better when you improve in response to their comments, because customers are used to companies\nignoring them. If you're the rare exception-- a company that actually listens-- you'll generate fanatical loyalty. You\nwon't need to advertise, because your users will do it for you.\nThis seems obvious too, so why do I have to keep repeating it? I think the problem here is that people get used to how\nthings are. Once a product gets past the stage where it has glaring flaws, you start to get used to it, and gradually\nwhatever features it happens to have become its identity. For example, I doubt many people at Yahoo (or Google for that\nmatter) realized how much better web mail could be till Paul Buchheit showed them.\nI think the solution is to assume that anything you've made is far short of what it could be. Force yourself, as a sort\nof intellectual exercise, to keep thinking of improvements. Ok, sure, what you have is perfect. But if you had to change\nsomething, what would it be?\nIf your product seems finished, there are two possible explanations: (a) it is finished, or (b) you lack imagination.\nExperience suggests (b) is a thousand times more likely.\n3. Make Users Happy.\nImproving constantly is an instance of a more general rule: make users happy. One thing all startups have in common is\nthat they can't force anyone to do anything. They can't force anyone to use their software, and they can't force anyone\nto do deals with them. A startup has to sing for its supper. That's why the successful ones make great things. They have\nto, or die.\nWhen you're running a startup you feel like a little bit of debris blown about by powerful winds. The most powerful wind\nis users. They can either catch you and loft you up into the sky, as they did with Google, or leave you flat on the\npavement, as they do with most startups. Users are a fickle wind, but more powerful than any other. If they take you up,\nno competitor can keep you down.\nAs a little piece of debris, the rational thing for you to do is not to lie flat, but to curl yourself into a shape the\nwind will catch.\nI like the wind metaphor because it reminds you how impersonal the stream of traffic is. The vast majority of people who\nvisit your site will be casual visitors. It's them you have to design your site for. The people who really care will\nfind what they want by themselves.\nThe median visitor will arrive with their finger poised on the Back button. Think about your own experience: most links\nyou follow lead to something lame. Anyone who has used the web for more than a couple weeks has been\ntrained\nto click\non Back after following a link. So your site has to say \"Wait! Don't click on Back. This site isn't lame. Look at this,\nfor example.\"\nThere are two things you have to do to make people pause. The most important is to explain, as concisely as possible,\nwhat the hell your site is about. How often have you visited a site that seemed to assume you already knew what they\ndid? For example, the corporate site that says the company makes\nenterprise content management solutions for business that enable organizations to unify people, content and processes\nto minimize business risk, accelerate time-to-value and sustain lower total cost of ownership.\nAn established company may get away with such an opaque description, but no startup can. A startup should be able to\nexplain in one or two sentences exactly what it does. [4] And not just to users. You need this for everyone:\ninvestors, acquirers, partners, reporters, potential employees, and even current employees. You probably shouldn't even\nstart a company to do something that can't be described compellingly in one or two sentences.\nThe other thing I repeat is to give people everything you've got, right away. If you have something impressive, try to\nput it on the front page, because that's the only one most visitors will see. Though indeed there's a paradox here: the\nmore you push the good stuff toward the front, the more likely visitors are to explore further. [5]\nIn the best case these two suggestions get combined: you tell visitors what your site is about by\nshowing\nthem. One of\nthe standard pieces of advice in fiction writing is \"show, don't tell.\" Don't say that a character's angry; have him\ngrind his teeth, or break his pencil in half. Nothing will explain what your site does so well as using it.\nThe industry term here is \"conversion.\" The job of your site is to convert casual visitors into users-- whatever your\ndefinition of a user is. You can measure this in your growth rate. Either your site is catching on, or it isn't, and you\nmust know which. If you have decent growth, you'll win in the end, no matter how obscure you are now. And if you don't,\nyou need to fix something.\n4. Fear the Right Things.\nAnother thing I find myself saying a lot is \"don't worry.\" Actually, it's more often \"don't worry about this; worry\nabout that instead.\" Startups are right to be paranoid, but they sometimes fear the wrong things.\nMost visible disasters are not so alarming as they seem. Disasters are normal in a startup: a founder quits, you\ndiscover a patent that covers what you're doing, your servers keep crashing, you run into an insoluble technical\nproblem, you have to change your name, a deal falls through-- these are all par for the course. They won't kill you\nunless you let them.\nNor will most competitors. A lot of startups worry \"what if Google builds something like us?\" Actually big companies are\nnot the ones you have to worry about-- not even Google. The people at Google are smart, but no smarter than you; they're\nnot as motivated, because Google is not going to go out of business if this one product fails; and even at Google they\nhave a lot of bureaucracy to slow them down.\nWhat you should fear, as a startup, is not the established players, but other startups you don't know exist yet. They're\nway more dangerous than Google because, like you, they're cornered animals.\nLooking just at existing competitors can give you a false sense of security. You should compete against what someone\nelse\ncould\nbe doing, not just what you can see people doing. A corollary is that you shouldn't relax just because you\nhave no visible competitors yet. No matter what your idea, there's someone else out there working on the same thing.\nThat's the downside of it being easier to start a startup: more people are doing it. But I disagree with Caterina Fake\nwhen she says that makes this a bad time to start a startup. More people are starting startups, but not as many more as\ncould. Most college graduates still think they have to get a job. The average person can't ignore something that's been\nbeaten into their head since they were three just because serving web pages recently got a lot cheaper.\nAnd in any case, competitors are not the biggest threat. Way more startups hose themselves than get crushed by\ncompetitors. There are a lot of ways to do it, but the three main ones are internal disputes, inertia, and ignoring\nusers. Each is, by itself, enough to kill you. But if I had to pick the worst, it would be ignoring users. If you want a\nrecipe for a startup that's going to die, here it is: a couple of founders who have some great idea they know everyone\nis going to love, and that's what they're going to build, no matter what.\nAlmost everyone's initial plan is broken. If companies stuck to their initial plans, Microsoft would be selling\nprogramming languages, and Apple would be selling printed circuit boards. In both cases their customers told them what\ntheir business should be-- and they were smart enough to listen.\nAs Richard Feynman said, the imagination of nature is greater than the imagination of man. You'll find more interesting\nthings by looking at the world than you could ever produce just by thinking. This principle is very powerful. It's why\nthe best abstract painting still falls short of Leonardo, for example. And it applies to startups too. No idea for a\nproduct could ever be so clever as the ones you can discover by smashing a beam of prototypes into a beam of users.\n5. Commitment Is a Self-Fulfilling Prophecy.\nI now have enough experience with startups to be able to say what the most important quality is in a startup founder,\nand it's not what you might think. The most important quality in a startup founder is determination. Not intelligence--\ndetermination.\nThis is a little depressing. I'd like to believe Viaweb succeeded because we were smart, not merely determined. A lot of\npeople in the startup world want to believe that. Not just founders, but investors too. They like the idea of inhabiting\na world ruled by intelligence. And you can tell they really believe this, because it affects their investment\ndecisions.\nTime after time VCs invest in startups founded by eminent professors. This may work in biotech, where a lot of startups\nsimply commercialize existing research, but in software you want to invest in students, not professors. Microsoft,\nYahoo, and Google were all founded by people who dropped out of school to do it. What students lack in experience they\nmore than make up in dedication.\nOf course, if you want to get rich, it's not enough merely to be determined. You have to be smart too, right? I'd like\nto think so, but I've had an experience that convinced me otherwise: I spent several years living in New York.\nYou can lose quite a lot in the brains department and it won't kill you. But lose even a little bit in the commitment\ndepartment, and that will kill you very rapidly.\nRunning a startup is like walking on your hands: it's possible, but it requires extraordinary effort. If an ordinary\nemployee were asked to do the things a startup founder has to, he'd be very indignant. Imagine if you were hired at some\nbig company, and in addition to writing software ten times faster than you'd ever had to before, they expected you to\nanswer support calls, administer the servers, design the web site, cold-call customers, find the company office space,\nand go out and get everyone lunch.\nAnd to do all this not in the calm, womb-like atmosphere of a big company, but against a backdrop of constant disasters.\nThat's the part that really demands determination. In a startup, there's always some disaster happening. So if you're\nthe least bit inclined to find an excuse to quit, there's always one right there.\nBut if you lack commitment, chances are it will have been hurting you long before you actually quit. Everyone who deals\nwith startups knows how important commitment is, so if they sense you're ambivalent, they won't give you much attention.\nIf you lack commitment, you'll just find that for some mysterious reason good things happen to your competitors but not\nto you. If you lack commitment, it will seem to you that you're unlucky.\nWhereas if you're determined to stick around, people will pay attention to you, because odds are they'll have to deal\nwith you later. You're a local, not just a tourist, so everyone has to come to terms with you.\nAt Y Combinator we sometimes mistakenly fund teams who have the attitude that they're going to give this startup thing a\nshot for three months, and if something great happens, they'll stick with it-- \"something great\" meaning either that\nsomeone wants to buy them or invest millions of dollars in them. But if this is your attitude, \"something great\" is very\nunlikely to happen to you, because both acquirers and investors judge you by your level of commitment.\nIf an acquirer thinks you're going to stick around no matter what, they'll be more likely to buy you, because if they\ndon't and you stick around, you'll probably grow, your price will go up, and they'll be left wishing they'd bought you\nearlier. Ditto for investors. What really motivates investors, even big VCs, is not the hope of good returns, but the\nfear of missing out. [6] So if you make it clear you're going to succeed no matter what, and the only reason you need\nthem is to make it happen a little faster, you're much more likely to get money.\nYou can't fake this. The only way to convince everyone that you're ready to fight to the death is actually to be ready\nto.\nYou have to be the right kind of determined, though. I carefully chose the word determined rather than stubborn, because\nstubbornness is a disastrous quality in a startup. You have to be determined, but flexible, like a running back. A\nsuccessful running back doesn't just put his head down and try to run through people. He improvises: if someone appears\nin front of him, he runs around them; if someone tries to grab him, he spins out of their grip; he'll even run in the\nwrong direction briefly if that will help. The one thing he'll never do is stand still. [7]\n6. There Is Always Room.\nI was talking recently to a startup founder about whether it might be good to add a social component to their software.\nHe said he didn't think so, because the whole social thing was tapped out. Really? So in a hundred years the only social\nnetworking sites will be the Facebook, MySpace, Flickr, and\nDel.icio.us\n? Not likely.\nThere is always room for new stuff. At every point in history, even the darkest bits of the dark ages, people were\ndiscovering things that made everyone say \"why didn't anyone think of that before?\" We know this continued to be true up\ntill 2004, when the Facebook was founded-- though strictly speaking someone else did think of that.\nThe reason we don't see the opportunities all around us is that we adjust to however things are, and assume that's how\nthings have to be. For example, it would seem crazy to most people to try to make a better search engine than Google.\nSurely that field, at least, is tapped out. Really? In a hundred years-- or even twenty-- are people still going to\nsearch for information using something like the current Google? Even Google probably doesn't think that.\nIn particular, I don't think there's any limit to the number of startups. Sometimes you hear people saying \"All these\nguys starting startups now are going to be disappointed. How many little startups are Google and Yahoo going to buy,\nafter all?\" That sounds cleverly skeptical, but I can prove it's mistaken. No one proposes that there's some limit to\nthe number of people who can be employed in an economy consisting of big, slow-moving companies with a couple thousand\npeople each. Why should there be any limit to the number who could be employed by small, fast-moving companies with ten\neach? It seems to me the only limit would be the number of people who want to work that hard.\nThe limit on the number of startups is not the number that can get acquired by Google and Yahoo-- though it seems even\nthat should be unlimited, if the startups were actually worth buying-- but the amount of wealth that can be created. And\nI don't think there's any limit on that, except cosmological ones.\nSo for all practical purposes, there is no limit to the number of startups. Startups make wealth, which means they make\nthings people want, and if there's a limit on the number of things people want, we are nowhere near it. I still don't\neven have a flying car.\n7. Don't Get Your Hopes Up.\nThis is another one I've been repeating since long before Y Combinator. It was practically the corporate motto at\nViaweb.\nStartup founders are naturally optimistic. They wouldn't do it otherwise. But you should treat your optimism the way\nyou'd treat the core of a nuclear reactor: as a source of power that's also very dangerous. You have to build a shield\naround it, or it will fry you.\nThe shielding of a reactor is not uniform; the reactor would be useless if it were. It's pierced in a few places to let\npipes in. An optimism shield has to be pierced too. I think the place to draw the line is between what you expect of\nyourself, and what you expect of other people. It's ok to be optimistic about what you can do, but assume the worst\nabout machines and other people.\nThis is particularly necessary in a startup, because you tend to be pushing the limits of whatever you're doing. So\nthings don't happen in the smooth, predictable way they do in the rest of the world. Things change suddenly, and usually\nfor the worse.\nShielding your optimism is nowhere more important than with deals. If your startup is doing a deal, just assume it's not\ngoing to happen. The VCs who say they're going to invest in you aren't. The company that says they're going to buy you\nisn't. The big customer who wants to use your system in their whole company won't. Then if things work out you can be\npleasantly surprised.\nThe reason I warn startups not to get their hopes up is not to save them from being\ndisappointed\nwhen things fall\nthrough. It's for a more practical reason: to prevent them from leaning their company against something that's going to\nfall over, taking them with it.\nFor example, if someone says they want to invest in you, there's a natural tendency to stop looking for other investors.\nThat's why people proposing deals seem so positive: they\nwant\nyou to stop looking. And you want to stop too, because\ndoing deals is a pain. Raising money, in particular, is a huge time sink. So you have to consciously force yourself to\nkeep looking.\nEven if you ultimately do the first deal, it will be to your advantage to have kept looking, because you'll get better\nterms. Deals are dynamic; unless you're negotiating with someone unusually honest, there's not a single point where you\nshake hands and the deal's done. There are usually a lot of subsidiary questions to be cleared up after the handshake,\nand if the other side senses weakness-- if they sense you need this deal-- they will be very tempted to screw you in the\ndetails.\nVCs and corp dev guys are professional negotiators. They're trained to take advantage of weakness. [8] So while\nthey're often nice guys, they just can't help it. And as pros they do this more than you. So don't even try to bluff\nthem. The only way a startup can have any leverage in a deal is genuinely not to need it. And if you don't believe in a\ndeal, you'll be less likely to depend on it.\nSo I want to plant a hypnotic suggestion in your heads: when you hear someone say the words \"we want to invest in you\"\nor \"we want to acquire you,\" I want the following phrase to appear automatically in your head:\ndon't get your hopes\nup.\nJust continue running your company as if this deal didn't exist. Nothing is more likely to make it close.\nThe way to succeed in a startup is to focus on the goal of getting lots of users, and keep walking swiftly toward it\nwhile investors and acquirers scurry alongside trying to wave money in your face.\nSpeed, not Money\nThe way I've described it, starting a startup sounds pretty stressful. It is. When I talk to the founders of the\ncompanies we've funded, they all say the same thing: I knew it would be hard, but I didn't realize it would be this\nhard.\nSo why do it? It would be worth enduring a lot of pain and stress to do something grand or heroic, but just to make\nmoney? Is making money really that important?\nNo, not really. It seems ridiculous to me when people take business too seriously. I regard making money as a boring\nerrand to be got out of the way as soon as possible. There is nothing grand or heroic about starting a startup per se.\nSo why do I spend so much time thinking about startups? I'll tell you why. Economically, a startup is best seen not as a\nway to get rich, but as a way to work faster. You have to make a living, and a startup is a way to get that done\nquickly, instead of letting it drag on through your whole life. [9]\nWe take it for granted most of the time, but human life is fairly miraculous. It is also palpably short. You're given\nthis marvellous thing, and then poof, it's taken away. You can see why people invent gods to explain it. But even to\npeople who don't believe in gods, life commands respect. There are times in most of our lives when the days go by in a\nblur, and almost everyone has a sense, when this happens, of wasting something precious. As Ben Franklin said, if you\nlove life, don't waste time, because time is what life is made of.\nSo no, there's nothing particularly grand about making money. That's not what makes startups worth the trouble. What's\nimportant about startups is the speed. By compressing the dull but necessary task of making a living into the smallest\npossible time, you show respect for life, and there is something grand about that.\nNotes\n[1] Startups can die from releasing something full of bugs, and not fixing them fast enough, but I don't know of any\nthat died from releasing something stable but minimal very early, then promptly improving it.\n[2] I know this is why I haven't released Arc. The moment I do, I'll have people nagging me for features.\n[3] A web site is different from a book or movie or desktop application in this respect. Users judge a site not as a\nsingle snapshot, but as an animation with multiple frames. Of the two, I'd say the rate of improvement is more important\nto users than where you currently are.\n[4] It should not always tell this to users, however. For example, MySpace is basically a replacement mall for\nmallrats. But it was wiser for them, initially, to pretend that the site was about bands.\n[5] Similarly, don't make users register to try your site. Maybe what you have is so valuable that visitors should\ngladly register to get at it. But they've been trained to expect the opposite. Most of the things they've tried on the\nweb have sucked-- and probably especially those that made them register.\n[6] VCs have rational reasons for behaving this way. They don't make their money (if they make money) off their median\ninvestments. In a typical fund, half the companies fail, most of the rest generate mediocre returns, and one or two\n\"make the fund\" by succeeding spectacularly. So if they miss just a few of the most promising opportunities, it could\nhose the whole fund.\n[7] The attitude of a running back doesn't translate to soccer. Though it looks great when a forward dribbles past\nmultiple defenders, a player who persists in trying such things will do worse in the long term than one who passes.\n[8] The reason Y Combinator never negotiates valuations is that we're not professional negotiators, and don't want to\nturn into them.\n[9] There are two ways to do\nwork you love\n: (a) to make money, then work on\nwhat you love, or (b) to get a job where you get paid to work on stuff you love. In practice the first phases of both\nconsist mostly of unedifying schleps, and in (b) the second phase is less secure.\nThanks\nto Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica Livingston, and Robert Morris for reading drafts of\nthis."
    }
  },
  {
    "name_blog": "The equity equation",
    "description_blog": "YC's Paul Graham introduces a general formula for deciding if trading away stock in your company is worth it.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/8u-the-equity-equation",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/equity.html\nJuly 2007\nAn investor wants to give you money for a certain percentage of your startup. Should you take it? You're about to hire\nyour first employee. How much stock should you give him?\nThese are some of the hardest questions founders face. And yet both have the same answer:\n1/(1 - n)\nWhenever you're trading stock in your company for anything, whether it's money or an employee or a deal with another\ncompany, the test for whether to do it is the same. You should give up n% of your company if what you trade it for\nimproves your average outcome enough that the (100 - n)% you have left is worth more than the whole company was\nbefore.\nFor example, if an investor wants to buy half your company, how much does that investment have to improve your average\noutcome for you to break even? Obviously it has to double: if you trade half your company for something that more than\ndoubles the company's average outcome, you're net ahead. You have half as big a share of something worth more than twice\nas much.\nIn the general case, if n is the fraction of the company you're giving up, the deal is a good one if it makes the\ncompany worth more than 1/(1 - n).\nFor example, suppose Y Combinator offers to fund you in return for 7% of your company. In this case, n is .07 and 1/(1 -\nn) is 1.075. So you should take the deal if you believe we can improve your average outcome by more than 7.5%. If we\nimprove your outcome by 10%, you're net ahead, because the remaining .93 you hold is worth .93 x 1.1 = 1.023. [1]\nOne of the things the equity equation shows us is that, financially at least, taking money from a top VC firm can be a\nreally good deal. Greg Mcadoo from Sequoia recently said at a YC dinner that when Sequoia invests alone they like to\ntake about 30% of a company. 1/.7 = 1.43, meaning that deal is worth taking if they can improve your outcome by more\nthan 43%. For the average startup, that would be an extraordinary bargain. It would improve the average startup's\nprospects by more than 43% just to be able to\nsay\nthey were funded by Sequoia, even if they never actually got the\nmoney.\nThe reason Sequoia is such a good deal is that the percentage of the company they take is artificially low. They don't\neven try to get market price for their investment; they limit their holdings to leave the founders enough stock to feel\nthe company is still theirs.\nThe catch is that Sequoia gets about 6000 business plans a year and funds about 20 of them, so the odds of getting this\ngreat deal are 1 in 300. The companies that make it through are not average startups.\nOf course, there are other factors to consider in a VC deal. It's never just a straight trade of money for stock. But if\nit were, taking money from a top firm would generally be a bargain.\nYou can use the same formula when giving stock to employees, but it works in the other direction. If i is the average\noutcome for the company with the addition of some new person, then they're worth n such that i = 1/(1 - n). Which means\nn = (i - 1)/i.\nFor example, suppose you're just two founders and you want to hire an additional hacker who's so good you feel he'll\nincrease the average outcome of the whole company by 20%. n = (1.2 - 1)/1.2 = .167. So you'll break even if you\ntrade 16.7% of the company for him.\nThat doesn't mean 16.7% is the right amount of stock to give him. Stock is not the only cost of hiring someone: there's\nusually salary and overhead as well. And if the company merely breaks even on the deal, there's no reason to do it.\nI think to translate salary and overhead into stock you should multiply the annual rate by about 1.5. Most startups grow\nfast or die; if you die you don't have to pay the guy, and if you grow fast you'll be paying next year's salary out of\nnext year's valuation, which should be 3x this year's. If your valuation grows 3x a year, the total cost in stock of a\nnew hire's salary and overhead is 1.5 years' cost at the present valuation. [2]\nHow much of an additional margin should the company need as the \"activation energy\" for the deal? Since this is in\neffect the company's profit on a hire, the market will determine that: if you're a hot opportunity, you can charge\nmore.\nLet's run through an example. Suppose the company wants to make a \"profit\" of 50% on the new hire mentioned above. So\nsubtract a third from 16.7% and we have 11.1% as his \"retail\" price. Suppose further that he's going to cost $60k a year\nin salary and overhead, x 1.5 = $90k total. If the company's valuation is $2 million, $90k is 4.5%. 11.1% - 4.5% = an\noffer of 6.6%.\nIncidentally, notice how important it is for early employees to take little salary. It comes right out of stock that\ncould otherwise be given to them.\nObviously there is a great deal of play in these numbers. I'm not claiming that stock grants can now be reduced to a\nformula. Ultimately you always have to guess. But at least know what you're guessing. If you choose a number based on\nyour gut feel, or a table of typical grant sizes supplied by a VC firm, understand what those are estimates of.\nAnd more generally, when you make any decision involving equity, run it through 1/(1 - n) to see if it makes sense. You\nshould always feel richer after trading equity. If the trade didn't increase the value of your remaining shares enough\nto put you net ahead, you wouldn't have (or shouldn't have) done it.\nNotes\n[1] This is why we can't believe anyone would think Y Combinator was a bad deal. Does anyone really think we're so\nuseless that in three months we can't improve a startup's prospects by 7.5%?\n[2] The obvious choice for your present valuation is the post-money valuation of your last funding round. This\nprobably undervalues the company, though, because (a) unless your last round just happened, the company is presumably\nworth more, and (b) the valuation of an early funding round usually reflects some other contribution by the investors.\nThanks\nto Sam Altman, Trevor Blackwell, Paul Buchheit, Hutch Fishman, David Hornik, Paul Kedrosky, Jessica\nLivingston, Gary Sabot, and Joshua Schachter for reading drafts of this."
    }
  },
  {
    "name_blog": "The 18 mistakes that kill startups",
    "description_blog": "YC's Paul Graham on the biggest mistakes for startups: not making something users want.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/8t-the-18-mistakes-that-kill-startups",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/startupmistakes.html\nOctober 2006\nIn the Q & A period after a recent talk, someone asked what made startups fail. After standing there gaping for a few\nseconds I realized this was kind of a trick question. It's equivalent to asking how to make a startup succeed — if you\navoid every cause of failure, you succeed — and that's too big a question to answer on the fly.\nAfterwards I realized it could be helpful to look at the problem from this direction. If you have a list of all the\nthings you shouldn't do, you can turn that into a recipe for succeeding just by negating. And this form of list may be\nmore useful in practice. It's easier to catch yourself doing something you shouldn't than always to remember to do\nsomething you should. [1]\nIn a sense there's just one mistake that kills startups: not making something users want. If you make something users\nwant, you'll probably be fine, whatever else you do or don't do. And if you don't make something users want, then you're\ndead, whatever else you do or don't do. So really this is a list of 18 things that cause startups not to make something\nusers want. Nearly all failure funnels through that.\n1. Single Founder\nHave you ever noticed how few successful startups were founded by just one person? Even companies you think of as having\none founder, like Oracle, usually turn out to have more. It seems unlikely this is a coincidence.\nWhat's wrong with having one founder? To start with, it's a vote of no confidence. It probably means the founder\ncouldn't talk any of his friends into starting the company with him. That's pretty alarming, because his friends are the\nones who know him best.\nBut even if the founder's friends were all wrong and the company is a good bet, he's still at a disadvantage. Starting a\nstartup is too hard for one person. Even if you could do all the work yourself, you need colleagues to brainstorm with,\nto talk you out of stupid decisions, and to cheer you up when things go wrong.\nThe last one might be the most important. The low points in a startup are so low that few could bear them alone. When\nyou have multiple founders, esprit de corps binds them together in a way that seems to violate conservation laws. Each\nthinks \"I can't let my friends down.\" This is one of the most powerful forces in human nature, and it's missing when\nthere's just one founder.\n2. Bad Location\nStartups prosper in some places and not others. Silicon Valley dominates, then Boston, then Seattle, Austin, Denver, and\nNew York. After that there's not much. Even in New York the number of startups per capita is probably a 20th of what it\nis in Silicon Valley. In towns like Houston and Chicago and Detroit it's too small to measure.\nWhy is the falloff so sharp? Probably for the same reason it is in other industries. What's the sixth largest fashion\ncenter in the US? The sixth largest center for oil, or finance, or publishing? Whatever they are they're probably so far\nfrom the top that it would be misleading even to call them centers.\nIt's an interesting question why cities\nbecome\nstartup hubs, but the\nreason startups prosper in them is probably the same as it is for any industry: that's where the experts are. Standards\nare higher; people are more sympathetic to what you're doing; the kind of people you want to hire want to live there;\nsupporting industries are there; the people you run into in chance meetings are in the same business. Who knows exactly\nhow these factors combine to boost startups in Silicon Valley and squish them in Detroit, but it's clear they do from\nthe number of startups per capita in each.\n3. Marginal Niche\nMost of the groups that apply to Y Combinator suffer from a common problem: choosing a small, obscure niche in the hope\nof avoiding competition.\nIf you watch little kids playing sports, you notice that below a certain age they're afraid of the ball. When the ball\ncomes near them their instinct is to avoid it. I didn't make a lot of catches as an eight year old outfielder, because\nwhenever a fly ball came my way, I used to close my eyes and hold my glove up more for protection than in the hope of\ncatching it.\nChoosing a marginal project is the startup equivalent of my eight year old strategy for dealing with fly balls. If you\nmake anything good, you're going to have competitors, so you may as well face that. You can only avoid competition by\navoiding good ideas.\nI think this shrinking from big problems is mostly unconscious. It's not that people think of grand ideas but decide to\npursue smaller ones because they seem safer. Your unconscious won't even let you think of grand ideas. So the solution\nmay be to think about ideas without involving yourself. What would be a great idea for\nsomeone else\nto do as a\nstartup?\n4. Derivative Idea\nMany of the applications we get are imitations of some existing company. That's one source of ideas, but not the best.\nIf you look at the origins of successful startups, few were started in imitation of some other startup. Where did they\nget their ideas? Usually from some specific, unsolved problem the founders identified.\nOur startup made software for making online stores. When we started it, there wasn't any; the few sites you could order\nfrom were hand-made at great expense by web consultants. We knew that if online shopping ever took off, these sites\nwould have to be generated by software, so we wrote some. Pretty straightforward.\nIt seems like the best problems to solve are ones that affect you personally. Apple happened because Steve Wozniak\nwanted a computer, Google because Larry and Sergey couldn't find stuff online, Hotmail because Sabeer Bhatia and Jack\nSmith couldn't exchange email at work.\nSo instead of copying the Facebook, with some variation that the Facebook rightly ignored, look for ideas from the other\ndirection. Instead of starting from companies and working back to the problems they solved, look for problems and\nimagine the company that might solve them. [2] What do people complain about? What do you wish there was?\n5. Obstinacy\nIn some fields the way to succeed is to have a vision of what you want to achieve, and to hold true to it no matter what\nsetbacks you encounter. Starting startups is not one of them. The stick-to-your-vision approach works for something like\nwinning an Olympic gold medal, where the problem is well-defined. Startups are more like science, where you need to\nfollow the trail wherever it leads.\nSo don't get too attached to your original plan, because it's probably wrong. Most successful startups end up doing\nsomething different than they originally intended — often so different that it doesn't even seem like the same company.\nYou have to be prepared to see the better idea when it arrives. And the hardest part of that is often discarding your\nold idea.\nBut openness to new ideas has to be tuned just right. Switching to a new idea every week will be equally fatal. Is there\nsome kind of external test you can use? One is to ask whether the ideas represent some kind of progression. If in each\nnew idea you're able to re-use most of what you built for the previous ones, then you're probably in a process that\nconverges. Whereas if you keep restarting from scratch, that's a bad sign.\nFortunately there's someone you can ask for advice: your users. If you're thinking about turning in some new direction\nand your users seem excited about it, it's probably a good bet.\n6. Hiring Bad Programmers\nI forgot to include this in the early versions of the list, because nearly all the founders I know are programmers. This\nis not a serious problem for them. They might accidentally hire someone bad, but it's not going to kill the company. In\na pinch they can do whatever's required themselves.\nBut when I think about what killed most of the startups in the e-commerce business back in the 90s, it was bad\nprogrammers. A lot of those companies were started by business guys who thought the way startups worked was that you had\nsome clever idea and then hired programmers to implement it. That's actually much harder than it sounds — almost\nimpossibly hard in fact — because business guys can't tell which are the good programmers. They don't even get a shot at\nthe best ones, because no one really good wants a job implementing the vision of a business guy.\nIn practice what happens is that the business guys choose people they think are good programmers (it says here on his\nresume that he's a Microsoft Certified Developer) but who aren't. Then they're mystified to find that their startup\nlumbers along like a World War II bomber while their competitors scream past like jet fighters. This kind of startup is\nin the same position as a big company, but without the advantages.\nSo how do you pick good programmers if you're not a programmer? I don't think there's an answer. I was about to say\nyou'd have to find a good programmer to help you hire people. But if you can't recognize good programmers, how would you\neven do that?\n7. Choosing the Wrong Platform\nA related problem (since it tends to be done by bad programmers) is choosing the wrong platform. For example, I think a\nlot of startups during the Bubble killed themselves by deciding to build server-based applications on Windows. Hotmail\nwas still running on FreeBSD for years after Microsoft bought it, presumably because Windows couldn't handle the load.\nIf Hotmail's founders had chosen to use Windows, they would have been swamped.\nPayPal only just dodged this bullet. After they merged with\nX.com\n, the new CEO wanted to switch to\nWindows — even after PayPal cofounder Max Levchin showed that their software scaled only 1% as well on Windows as Unix.\nFortunately for PayPal they switched CEOs instead.\nPlatform is a vague word. It could mean an operating system, or a programming language, or a \"framework\" built on top of\na programming language. It implies something that both supports and limits, like the foundation of a house.\nThe scary thing about platforms is that there are always some that seem to outsiders to be fine, responsible choices and\nyet, like Windows in the 90s, will destroy you if you choose them. Java applets were probably the most spectacular\nexample. This was supposed to be the new way of delivering applications. Presumably it killed just about 100% of the\nstartups who believed that.\nHow do you pick the right platforms? The usual way is to hire good programmers and let them choose. But there is a trick\nyou could use if you're not a programmer: visit a top computer science department and see what they use in research\nprojects.\n8. Slowness in Launching\nCompanies of all sizes have a hard time getting software done. It's intrinsic to the medium; software is always 85%\ndone. It takes an effort of will to push through this and get something released to users. [3]\nStartups make all kinds of excuses for delaying their launch. Most are equivalent to the ones people use for\nprocrastinating in everyday life. There's something that needs to happen first. Maybe. But if the software were 100%\nfinished and ready to launch at the push of a button, would they still be waiting?\nOne reason to launch quickly is that it forces you to actually\nfinish\nsome quantum of work. Nothing is truly finished\ntill it's released; you can see that from the rush of work that's always involved in releasing anything, no matter how\nfinished you thought it was. The other reason you need to launch is that it's only by bouncing your idea off users that\nyou fully understand it.\nSeveral distinct problems manifest themselves as delays in launching: working too slowly; not truly understanding the\nproblem; fear of having to deal with users; fear of being judged; working on too many different things; excessive\nperfectionism. Fortunately you can combat all of them by the simple expedient of forcing yourself to launch\nsomething\nfairly quickly.\n9. Launching Too Early\nLaunching too slowly has probably killed a hundred times more startups than launching too fast, but it is possible to\nlaunch too fast. The danger here is that you ruin your reputation. You launch something, the early adopters try it out,\nand if it's no good they may never come back.\nSo what's the minimum you need to launch? We suggest startups think about what they plan to do, identify a core that's\nboth (a) useful on its own and (b) something that can be incrementally expanded into the whole project, and then get\nthat done as soon as possible.\nThis is the same approach I (and many other programmers) use for writing software. Think about the overall goal, then\nstart by writing the smallest subset of it that does anything useful. If it's a subset, you'll have to write it anyway,\nso in the worst case you won't be wasting your time. But more likely you'll find that implementing a working subset is\nboth good for morale and helps you see more clearly what the rest should do.\nThe early adopters you need to impress are fairly tolerant. They don't expect a newly launched product to do everything;\nit just has to do\nsomething\n.\n10. Having No Specific User in Mind\nYou can't build things users like without understanding them. I mentioned earlier that the most successful startups seem\nto have begun by trying to solve a problem their founders had. Perhaps there's a rule here: perhaps you create wealth in\nproportion to how well you understand the problem you're solving, and the problems you understand best are your own.\n[4]\nThat's just a theory. What's not a theory is the converse: if you're trying to solve problems you don't understand,\nyou're hosed.\nAnd yet a surprising number of founders seem willing to assume that someone, they're not sure exactly who, will want\nwhat they're building. Do the founders want it? No, they're not the target market. Who is? Teenagers. People interested\nin local events (that one is a perennial tarpit). Or \"business\" users. What business users? Gas stations? Movie studios?\nDefense contractors?\nYou can of course build something for users other than yourself. We did. But you should realize you're stepping into\ndangerous territory. You're flying on instruments, in effect, so you should (a) consciously shift gears, instead of\nassuming you can rely on your intuitions as you ordinarily would, and (b) look at the instruments.\nIn this case the instruments are the users. When designing for other people you have to be empirical. You can no longer\nguess what will work; you have to find users and measure their responses. So if you're going to make something for\nteenagers or \"business\" users or some other group that doesn't include you, you have to be able to talk some specific\nones into using what you're making. If you can't, you're on the wrong track.\n11. Raising Too Little Money\nMost successful startups take funding at some point. Like having more than one founder, it seems a good bet\nstatistically. How much should you take, though?\nStartup funding is measured in time. Every startup that isn't profitable (meaning nearly all of them, initially) has a\ncertain amount of time left before the money runs out and they have to stop. This is sometimes referred to as runway, as\nin \"How much runway do you have left?\" It's a good metaphor because it reminds you that when the money runs out you're\ngoing to be airborne or dead.\nToo little money means not enough to get airborne. What airborne means depends on the situation. Usually you have to\nadvance to a visibly higher level: if all you have is an idea, a working prototype; if you have a prototype, launching;\nif you're launched, significant growth. It depends on investors, because until you're profitable that's who you have to\nconvince.\nSo if you take money from investors, you have to take enough to get to the next step, whatever that is. [5]\nFortunately you have some control over both how much you spend and what the next step is. We advise startups to set both\nlow, initially: spend practically nothing, and make your initial goal simply to build a solid prototype. This gives you\nmaximum flexibility.\n12. Spending Too Much\nIt's hard to distinguish spending too much from raising too little. If you run out of money, you could say either was\nthe cause. The only way to decide which to call it is by comparison with other startups. If you raised five million and\nran out of money, you probably spent too much.\nBurning through too much money is not as common as it used to be. Founders seem to have learned that lesson. Plus it\nkeeps getting cheaper to start a startup. So as of this writing few startups spend too much. None of the ones we've\nfunded have. (And not just because we make small investments; many have gone on to raise further rounds.)\nThe classic way to burn through cash is by hiring a lot of people. This bites you twice: in addition to increasing your\ncosts, it slows you down—so money that's getting consumed faster has to last longer. Most hackers understand why that\nhappens; Fred Brooks explained it in The Mythical Man-Month.\nWe have three general suggestions about hiring: (a) don't do it if you can avoid it, (b) pay people with equity rather\nthan salary, not just to save money, but because you want the kind of people who are committed enough to prefer that,\nand (c) only hire people who are either going to write code or go out and get users, because those are the only things\nyou need at first.\n13. Raising Too Much Money\nIt's obvious how too little money could kill you, but is there such a thing as having too much?\nYes and no. The problem is not so much the money itself as what comes with it. As one VC who spoke at Y Combinator said,\n\"Once you take several million dollars of my money, the clock is ticking.\" If VCs fund you, they're not going to let you\njust put the money in the bank and keep operating as two guys living on ramen. They want that money to go to work. [6]\nAt the very least you'll move into proper office space and hire more people. That will change the atmosphere, and not\nentirely for the better. Now most of your people will be employees rather than founders. They won't be as committed;\nthey'll need to be told what to do; they'll start to engage in office politics.\nWhen you raise a lot of money, your company moves to the suburbs and has kids.\nPerhaps more dangerously, once you take a lot of money it gets harder to change direction. Suppose your initial plan was\nto sell something to companies. After taking VC money you hire a sales force to do that. What happens now if you realize\nyou should be making this for consumers instead of businesses? That's a completely different kind of selling. What\nhappens, in practice, is that you don't realize that. The more people you have, the more you stay pointed in the same\ndirection.\nAnother drawback of large investments is the time they take. The time required to raise money grows with the amount.\n[7] When the amount rises into the millions, investors get very cautious. VCs never quite say yes or no; they just\nengage you in an apparently endless conversation. Raising VC scale investments is thus a huge time sink — more work,\nprobably, than the startup itself. And you don't want to be spending all your time talking to investors while your\ncompetitors are spending theirs building things.\nWe advise founders who go on to seek VC money to take the first reasonable deal they get. If you get an offer from a\nreputable firm at a reasonable valuation with no unusually onerous terms, just take it and get on with building the\ncompany. [8] Who cares if you could get a 30% better deal elsewhere? Economically, startups are an all-or-nothing\ngame. Bargain-hunting among investors is a waste of time.\n14. Poor Investor Management\nAs a founder, you have to manage your investors. You shouldn't ignore them, because they may have useful insights. But\nneither should you let them run the company. That's supposed to be your job. If investors had sufficient vision to run\nthe companies they fund, why didn't they start them?\nPissing off investors by ignoring them is probably less dangerous than caving in to them. In our startup, we erred on\nthe ignoring side. A lot of our energy got drained away in disputes with investors instead of going into the product.\nBut this was less costly than giving in, which would probably have destroyed the company. If the founders know what\nthey're doing, it's better to have half their attention focused on the product than the full attention of investors who\ndon't.\nHow hard you have to work on managing investors usually depends on how much money you've taken. When you raise VC-scale\nmoney, the investors get a great deal of control. If they have a board majority, they're literally your bosses. In the\nmore common case, where founders and investors are equally represented and the deciding vote is cast by neutral outside\ndirectors, all the investors have to do is convince the outside directors and they control the company.\nIf things go well, this shouldn't matter. So long as you seem to be advancing rapidly, most investors will leave you\nalone. But things don't always go smoothly in startups. Investors have made trouble even for the most successful\ncompanies. One of the most famous examples is Apple, whose board made a nearly fatal blunder in firing Steve Jobs.\nApparently even Google got a lot of grief from their investors early on.\n15. Sacrificing Users to (Supposed) Profit\nWhen I said at the beginning that if you make something users want, you'll be fine, you may have noticed I didn't\nmention anything about having the right business model. That's not because making money is unimportant. I'm not\nsuggesting that founders start companies with no chance of making money in the hope of unloading them before they tank.\nThe reason we tell founders not to worry about the business model initially is that making something people want is so\nmuch harder.\nI don't know why it's so hard to make something people want. It seems like it should be straightforward. But you can\ntell it must be hard by how few startups do it.\nBecause making something people want is so much harder than making money from it, you should leave business models for\nlater, just as you'd leave some trivial but messy feature for version 2. In version 1, solve the core problem. And the\ncore problem in a startup is how to\ncreate wealth\n(= how much people want\nsomething x the number who want it), not how to convert that wealth into money.\nThe companies that win are the ones that put users first. Google, for example. They made search work, then worried about\nhow to make money from it. And yet some startup founders still think it's irresponsible not to focus on the business\nmodel from the beginning. They're often encouraged in this by investors whose experience comes from less malleable\nindustries.\nIt\nis\nirresponsible not to think about business models. It's just ten times more irresponsible not to think about the\nproduct.\n16. Not Wanting to Get Your Hands Dirty\nNearly all programmers would rather spend their time writing code and have someone else handle the messy business of\nextracting money from it. And not just the lazy ones. Larry and Sergey apparently felt this way too at first. After\ndeveloping their new search algorithm, the first thing they tried was to get some other company to buy it.\nStart a company? Yech. Most hackers would rather just have ideas. But as Larry and Sergey found, there's not much of a\nmarket for ideas. No one trusts an idea till you embody it in a product and use that to grow a user base. Then they'll\npay big time.\nMaybe this will change, but I doubt it will change much. There's nothing like users for convincing acquirers. It's not\njust that the risk is decreased. The acquirers are human, and they have a hard time paying a bunch of young guys\nmillions of dollars just for being clever. When the idea is embodied in a company with a lot of users, they can tell\nthemselves they're buying the users rather than the cleverness, and this is easier for them to swallow. [9]\nIf you're going to attract users, you'll probably have to get up from your computer and go find some. It's unpleasant\nwork, but if you can make yourself do it you have a much greater chance of succeeding. In the first batch of startups we\nfunded, in the summer of 2005, most of the founders spent all their time building their applications. But there was one\nwho was away half the time talking to executives at cell phone companies, trying to arrange deals. Can you imagine\nanything more painful for a hacker? [10] But it paid off, because this startup seems the most successful of that group\nby an order of magnitude.\nIf you want to start a startup, you have to face the fact that you can't just hack. At least one hacker will have to\nspend some of the time doing business stuff.\n17. Fights Between Founders\nFights between founders are surprisingly common. About 20% of the startups we've funded have had a founder leave. It\nhappens so often that we've reversed our attitude to vesting. We still don't require it, but now we advise founders to\nvest so there will be an orderly way for people to quit.\nA founder leaving doesn't necessarily kill a startup, though. Plenty of successful startups have had that happen. [11]\nFortunately it's usually the least committed founder who leaves. If there are three founders and one who was lukewarm\nleaves, big deal. If you have two and one leaves, or a guy with critical technical skills leaves, that's more of a\nproblem. But even that is survivable. Blogger got down to one person, and they bounced back.\nMost of the disputes I've seen between founders could have been avoided if they'd been more careful about who they\nstarted a company with. Most disputes are not due to the situation but the people. Which means they're inevitable. And\nmost founders who've been burned by such disputes probably had misgivings, which they suppressed, when they started the\ncompany. Don't suppress misgivings. It's much easier to fix problems before the company is started than after. So don't\ninclude your housemate in your startup because he'd feel left out otherwise. Don't start a company with someone you\ndislike because they have some skill you need and you worry you won't find anyone else. The people are the most\nimportant ingredient in a startup, so don't compromise there.\n18. A Half-Hearted Effort\nThe failed startups you hear most about are the spectacular flameouts. Those are actually the elite of failures. The\nmost common type is not the one that makes spectacular mistakes, but the one that doesn't do much of anything — the one\nwe never even hear about, because it was some project a couple guys started on the side while working on their day jobs,\nbut which never got anywhere and was gradually abandoned.\nStatistically, if you want to avoid failure, it would seem like the most important thing is to quit your day job. Most\nfounders of failed startups don't quit their day jobs, and most founders of successful ones do. If startup failure were\na disease, the CDC would be issuing bulletins warning people to avoid day jobs.\nDoes that mean you should quit your day job? Not necessarily. I'm guessing here, but I'd guess that many of these\nwould-be founders may not have the kind of determination it takes to start a company, and that in the back of their\nminds, they know it. The reason they don't invest more time in their startup is that they know it's a bad investment.\n[12]\nI'd also guess there's some band of people who could have succeeded if they'd taken the leap and done it full-time, but\ndidn't. I have no idea how wide this band is, but if the winner/borderline/hopeless progression has the sort of\ndistribution you'd expect, the number of people who could have made it, if they'd quit their day job, is probably an\norder of magnitude larger than the number who do make it. [13]\nIf that's true, most startups that could succeed fail because the founders don't devote their whole efforts to them.\nThat certainly accords with what I see out in the world. Most startups fail because they don't make something people\nwant, and the reason most don't is that they don't try hard enough.\nIn other words, starting startups is just like everything else. The biggest mistake you can make is not to try hard\nenough. To the extent there's a secret to success, it's not to be in denial about that.\nNotes\n[1] This is not a complete list of the causes of failure, just those you can control. There are also several you\ncan't, notably ineptitude and bad luck.\n[2] Ironically, one variant of the Facebook that might work is a facebook exclusively for college students.\n[3] Steve Jobs tried to motivate people by saying \"Real artists ship.\" This is a fine sentence, but unfortunately not\ntrue. Many famous works of art are unfinished. It's true in fields that have hard deadlines, like architecture and\nfilmmaking, but even there people tend to be tweaking stuff till it's yanked out of their hands.\n[4] There's probably also a second factor: startup founders tend to be at the leading edge of technology, so problems\nthey face are probably especially valuable.\n[5] You should take more than you think you'll need, maybe 50% to 100% more, because software takes longer to write\nand deals longer to close than you expect.\n[6] Since people sometimes call us VCs, I should add that we're not. VCs invest large amounts of other people's money.\nWe invest small amounts of our own, like angel investors.\n[7] Not linearly of course, or it would take forever to raise five million dollars. In practice it just feels like it\ntakes forever.\nThough if you include the cases where VCs don't invest, it would literally take forever in the median case. And maybe we\nshould, because the danger of chasing large investments is not just that they take a long time. That's the\nbest\ncase.\nThe real danger is that you'll expend a lot of time and get nothing.\n[8] Some VCs will offer you an artificially low valuation to see if you have the balls to ask for more. It's lame that\nVCs play such games, but some do. If you're dealing with one of those you should push back on the valuation a bit.\n[9] Suppose YouTube's founders had gone to Google in 2005 and told them \"Google Video is badly designed. Give us $10\nmillion and we'll tell you all the mistakes you made.\" They would have gotten the royal raspberry. Eighteen months later\nGoogle paid $1.6 billion for the same lesson, partly because they could then tell themselves that they were buying a\nphenomenon, or a community, or some vague thing like that.\nI don't mean to be hard on Google. They did better than their competitors, who may have now missed the video boat\nentirely.\n[10] Yes, actually: dealing with the government. But phone companies are up there.\n[11] Many more than most people realize, because companies don't advertise this. Did you know Apple originally had\nthree founders?\n[12] I'm not dissing these people. I don't have the determination myself. I've twice come close to starting startups\nsince Viaweb, and both times I bailed because I realized that without the spur of poverty I just wasn't willing to\nendure the stress of a startup.\n[13] So how do you know whether you're in the category of people who should quit their day job, or the presumably\nlarger one who shouldn't? I got to the point of saying that this was hard to judge for yourself and that you should seek\noutside advice, before realizing that that's what we do. We think of ourselves as investors, but viewed from the other\ndirection Y Combinator is a service for advising people whether or not to quit their day job. We could be mistaken, and\nno doubt often are, but we do at least bet money on our conclusions.\nThanks\nto Sam Altman, Jessica Livingston, Greg McAdoo, and Robert Morris for reading drafts of this."
    }
  },
  {
    "name_blog": "Startup = growth",
    "description_blog": "A startup is a company designed to grow fast. Everything else we associate with startups follows from growth.",
    "authors": [
      "Paul Graham"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/8s-startup-growth",
    "content": {
      "table_of_contents": [],
      "whole_content": "The\noriginal\nversion\nof\nthis\nessay\nis\navailable\nat\nhttp://www.paulgraham.com/growth.html\nSeptember 2012\nA startup is a company designed to grow fast. Being newly founded does not in itself make a company a startup. Nor is it\nnecessary for a startup to work on technology, or take venture funding, or have some sort of \"exit.\" The only essential\nthing is growth. Everything else we associate with startups follows from growth.\nIf you want to start one it's important to understand that. Startups are so hard that you can't be pointed off to the\nside and hope to succeed. You have to know that growth is what you're after. The good news is, if you get growth,\neverything else tends to fall into place. Which means you can use growth like a compass to make almost every decision\nyou face.\nRedwoods\nLet's start with a distinction that should be obvious but is often overlooked: not every newly founded company is a\nstartup. Millions of companies are started every year in the US. Only a tiny fraction are startups. Most are service\nbusinesses — restaurants, barbershops, plumbers, and so on. These are not startups, except in a few unusual cases. A\nbarbershop isn't designed to grow fast. Whereas a search engine, for example, is.\nWhen I say startups are designed to grow fast, I mean it in two senses. Partly I mean designed in the sense of intended,\nbecause most startups fail. But I also mean startups are different by nature, in the same way a redwood seedling has a\ndifferent destiny from a bean sprout.\nThat difference is why there's a distinct word, \"startup,\" for companies designed to grow fast. If all companies were\nessentially similar, but some through luck or the efforts of their founders ended up growing very fast, we wouldn't need\na separate word. We could just talk about super-successful companies and less successful ones. But in fact startups do\nhave a different sort of DNA from other businesses. Google is not just a barbershop whose founders were unusually lucky\nand hard-working. Google was different from the beginning.\nTo grow rapidly, you need to make something you can sell to a big market. That's the difference between Google and a\nbarbershop. A barbershop doesn't scale.\nFor a company to grow really big, it must (a) make something lots of people want, and (b) reach and serve all those\npeople. Barbershops are doing fine in the (a) department. Almost everyone needs their hair cut. The problem for a\nbarbershop, as for any retail establishment, is (b). A barbershop serves customers in person, and few will travel far\nfor a haircut. And even if they did, the barbershop couldn't accomodate them. [1]\nWriting software is a great way to solve (b), but you can still end up constrained in (a). If you write software to\nteach Tibetan to Hungarian speakers, you'll be able to reach most of the people who want it, but there won't be many of\nthem. If you make software to teach English to Chinese speakers, however, you're in startup territory.\nMost businesses are tightly constrained in (a) or (b). The distinctive feature of successful startups is that they're\nnot.\nIdeas\nIt might seem that it would always be better to start a startup than an ordinary business. If you're going to start a\ncompany, why not start the type with the most potential? The catch is that this is a (fairly) efficient market. If you\nwrite software to teach Tibetan to Hungarians, you won't have much competition. If you write software to teach English\nto Chinese speakers, you'll face ferocious competition, precisely because that's such a larger prize. [2]\nThe constraints that limit ordinary companies also protect them. That's the tradeoff. If you start a barbershop, you\nonly have to compete with other local barbers. If you start a search engine you have to compete with the whole world.\nThe most important thing that the constraints on a normal business protect it from is not competition, however, but the\ndifficulty of coming up with new ideas. If you open a bar in a particular neighborhood, as well as limiting your\npotential and protecting you from competitors, that geographic constraint also helps define your company. Bar +\nneighborhood is a sufficient idea for a small business. Similarly for companies constrained in (a). Your niche both\nprotects and defines you.\nWhereas if you want to start a startup, you're probably going to have to think of something fairly novel. A startup has\nto make something it can deliver to a large market, and ideas of that type are so valuable that all the obvious ones are\nalready taken.\nThat space of ideas has been so thoroughly picked over that a startup generally has to work on something everyone else\nhas overlooked. I was going to write that one has to make a conscious effort to find ideas everyone else has overlooked.\nBut that's not how most startups get started. Usually successful startups happen because the founders are sufficiently\ndifferent from other people that ideas few others can see seem obvious to them. Perhaps later they step back and notice\nthey've found an idea in everyone else's blind spot, and from that point make a deliberate effort to stay there. [3]\nBut at the moment when successful startups get started, much of the innovation is unconscious.\nWhat's different about successful founders is that they can see different problems. It's a particularly good combination\nboth to be good at technology and to face problems that can be solved by it, because technology changes so rapidly that\nformerly bad ideas often become good without anyone noticing. Steve Wozniak's problem was that he wanted his own\ncomputer. That was an unusual problem to have in 1975. But technological change was about to make it a much more common\none. Because he not only wanted a computer but knew how to build them, Wozniak was able to make himself one. And the\nproblem he solved for himself became one that Apple solved for millions of people in the coming years. But by the time\nit was obvious to ordinary people that this was a big market, Apple was already established.\nGoogle has similar origins. Larry Page and Sergey Brin wanted to search the web. But unlike most people they had the\ntechnical expertise both to notice that existing search engines were not as good as they could be, and to know how to\nimprove them. Over the next few years their problem became everyone's problem, as the web grew to a size where you\ndidn't have to be a picky search expert to notice the old algorithms weren't good enough. But as happened with Apple, by\nthe time everyone else realized how important search was, Google was entrenched.\nThat's one connection between startup ideas and technology. Rapid change in one area uncovers big, soluble problems in\nother areas. Sometimes the changes are advances, and what they change is solubility. That was the kind of change that\nyielded Apple; advances in chip technology finally let Steve Wozniak design a computer he could afford. But in Google's\ncase the most important change was the growth of the web. What changed there was not solubility but bigness.\nThe other connection between startups and technology is that startups create new ways of doing things, and new ways of\ndoing things are, in the broader sense of the word, new technology. When a startup both begins with an idea exposed by\ntechnological change and makes a product consisting of technology in the narrower sense (what used to be called \"high\ntechnology\"), it's easy to conflate the two. But the two connections are distinct and in principle one could start a\nstartup that was neither driven by technological change, nor whose product consisted of technology except in the broader\nsense. [4]\nRate\nHow fast does a company have to grow to be considered a startup? There's no precise answer to that. \"Startup\" is a pole,\nnot a threshold. Starting one is at first no more than a declaration of one's ambitions. You're committing not just to\nstarting a company, but to starting a fast growing one, and you're thus committing to search for one of the rare ideas\nof that type. But at first you have no more than commitment. Starting a startup is like being an actor in that respect.\n\"Actor\" too is a pole rather than a threshold. At the beginning of his career, an actor is a waiter who goes to\nauditions. Getting work makes him a successful actor, but he doesn't only become an actor when he's successful.\nSo the real question is not what growth rate makes a company a startup, but what growth rate successful startups tend to\nhave. For founders that's more than a theoretical question, because it's equivalent to asking if they're on the right\npath.\nThe growth of a successful startup usually has three phases:\nThere's an initial period of slow or no growth while the startup tries to figure out what it's doing.\nAs the startup figures out how to make something lots of people want and how to reach those people, there's a period\nof rapid growth.\nEventually a successful startup will grow into a big company. Growth will slow, partly due to internal limits and\npartly because the company is starting to bump up against the limits of the markets it serves. [5]\nTogether these three phases produce an S-curve. The phase whose growth defines the startup is the second one, the\nascent. Its length and slope determine how big the company will be.\nThe slope is the company's growth rate. If there's one number every founder should always know, it's the company's\ngrowth rate. That's the measure of a startup. If you don't know that number, you don't even know if you're doing well or\nbadly.\nWhen I first meet founders and ask what their growth rate is, sometimes they tell me \"we get about a hundred new\ncustomers a month.\" That's not a rate. What matters is not the absolute number of new customers, but the ratio of new\ncustomers to existing ones. If you're really getting a constant number of new customers every month, you're in trouble,\nbecause that means your growth rate is decreasing.\nDuring Y Combinator we measure growth rate per week, partly because there is so little time before Demo Day, and partly\nbecause startups early on need frequent feedback from their users to tweak what they're doing. [6]\nA good growth rate during YC is 5-7% a week. If you can hit 10% a week you're doing exceptionally well. If you can only\nmanage 1%, it's a sign you haven't yet figured out what you're doing.\nThe best thing to measure the growth rate of is revenue. The next best, for startups that aren't charging initially, is\nactive users. That's a reasonable proxy for revenue growth because whenever the startup does start trying to make money,\ntheir revenues will probably be a constant multiple of active users. [7]\nCompass\nWe usually advise startups to pick a growth rate they think they can hit, and then just try to hit it every week. The\nkey word here is \"just.\" If they decide to grow at 7% a week and they hit that number, they're successful for that week.\nThere's nothing more they need to do. But if they don't hit it, they've failed in the only thing that mattered, and\nshould be correspondingly alarmed.\nProgrammers will recognize what we're doing here. We're turning starting a startup into an optimization problem. And\nanyone who has tried optimizing code knows how wonderfully effective that sort of narrow focus can be. Optimizing code\nmeans taking an existing program and changing it to use less of something, usually time or memory. You don't have to\nthink about what the program should do, just make it faster. For most programmers this is very satisfying work. The\nnarrow focus makes it a sort of puzzle, and you're generally surprised how fast you can solve it.\nFocusing on hitting a growth rate reduces the otherwise bewilderingly multifarious problem of starting a startup to a\nsingle problem. You can use that target growth rate to make all your decisions for you; anything that gets you the\ngrowth you need is ipso facto right. Should you spend two days at a conference? Should you hire another programmer?\nShould you focus more on marketing? Should you spend time courting some big customer? Should you add x feature? Whatever\ngets you your target growth rate. [8]\nJudging yourself by weekly growth doesn't mean you can look no more than a week ahead. Once you experience the pain of\nmissing your target one week (it was the only thing that mattered, and you failed at it), you become interested in\nanything that could spare you such pain in the future. So you'll be willing for example to hire another programmer, who\nwon't contribute to this week's growth but perhaps in a month will have implemented some new feature that will get you\nmore users. But only if (a) the distraction of hiring someone won't make you miss your numbers in the short term, and\n(b) you're sufficiently worried about whether you can keep hitting your numbers without hiring someone new.\nIt's not that you don't think about the future, just that you think about it no more than necessary.\nIn theory this sort of hill-climbing could get a startup into trouble. They could end up on a local maximum. But in\npractice that never happens. Having to hit a growth number every week forces founders to act, and acting versus not\nacting is the high bit of succeeding. Nine times out of ten, sitting around strategizing is just a form of\nprocrastination. Whereas founders' intuitions about which hill to climb are usually better than they realize. Plus the\nmaxima in the space of startup ideas are not spiky and isolated. Most fairly good ideas are adjacent to even better\nones.\nThe fascinating thing about optimizing for growth is that it can actually discover startup ideas. You can use the need\nfor growth as a form of evolutionary pressure. If you start out with some initial plan and modify it as necessary to\nkeep hitting, say, 10% weekly growth, you may end up with a quite different company than you meant to start. But\nanything that grows consistently at 10% a week is almost certainly a better idea than you started with.\nThere's a parallel here to small businesses. Just as the constraint of being located in a particular neighborhood helps\ndefine a bar, the constraint of growing at a certain rate can help define a startup.\nYou'll generally do best to follow that constraint wherever it leads rather than being influenced by some initial\nvision, just as a scientist is better off following the truth wherever it leads rather than being influenced by what he\nwishes were the case. When Richard Feynman said that the imagination of nature was greater than the imagination of man,\nhe meant that if you just keep following the truth you'll discover cooler things than you could ever have made up. For\nstartups, growth is a constraint much like truth. Every successful startup is at least partly a product of the\nimagination of growth. [9]\nValue\nIt's hard to find something that grows consistently at several percent a week, but if you do you may have found\nsomething surprisingly valuable. If we project forward we see why.\nA company that grows at 1% a week will grow 1.7x a year, whereas a company that grows at 5% a week will grow 12.6x. A\ncompany making $1000 a month (a typical number early in YC) and growing at 1% a week will 4 years later be making $7900\na month, which is less than a good programmer makes in salary in Silicon Valley. A startup that grows at 5% a week will\nin 4 years be making $25 million a month. [10]\nOur ancestors must rarely have encountered cases of exponential growth, because our intuitions are no guide here. What\nhappens to fast growing startups tends to surprise even the founders.\nSmall variations in growth rate produce qualitatively different outcomes. That's why there's a separate word for\nstartups, and why startups do things that ordinary companies don't, like raising money and getting acquired. And,\nstrangely enough, it's also why they fail so frequently.\nConsidering how valuable a successful startup can become, anyone familiar with the concept of expected value would be\nsurprised if the failure rate weren't high. If a successful startup could make a founder $100 million, then even if the\nchance of succeeding were only 1%, the expected value of starting one would be $1 million. And the probability of a\ngroup of sufficiently smart and determined founders succeeding on that scale might be significantly over 1%. For the\nright people — e.g. the young Bill Gates — the probability might be 20% or even 50%. So it's not surprising that so many\nwant to take a shot at it. In an efficient market, the number of failed startups should be proportionate to the size of\nthe successes. And since the latter is huge the former should be too. [11]\nWhat this means is that at any given time, the great majority of startups will be working on something that's never\ngoing to go anywhere, and yet glorifying their doomed efforts with the grandiose title of \"startup.\"\nThis doesn't bother me. It's the same with other high-beta vocations, like being an actor or a novelist. I've long since\ngotten used to it. But it seems to bother a lot of people, particularly those who've started ordinary businesses. Many\nare annoyed that these so-called startups get all the attention, when hardly any of them will amount to anything.\nIf they stepped back and looked at the whole picture they might be less indignant. The mistake they're making is that by\nbasing their opinions on anecdotal evidence they're implicitly judging by the median rather than the average. If you\njudge by the median startup, the whole concept of a startup seems like a fraud. You have to invent a bubble to explain\nwhy founders want to start them or investors want to fund them. But it's a mistake to use the median in a domain with so\nmuch variation. If you look at the average outcome rather than the median, you can understand why investors like them,\nand why, if they aren't median people, it's a rational choice for founders to start them.\nDeals\nWhy do investors like startups so much? Why are they so hot to invest in photo-sharing apps, rather than solid\nmoney-making businesses? Not only for the obvious reason.\nThe test of any investment is the ratio of return to risk. Startups pass that test because although they're appallingly\nrisky, the returns when they do succeed are so high. But that's not the only reason investors like startups. An ordinary\nslower-growing business might have just as good a ratio of return to risk, if both were lower. So why are VCs interested\nonly in high-growth companies? The reason is that they get paid by getting their capital back, ideally after the startup\nIPOs, or failing that when it's acquired.\nThe other way to get returns from an investment is in the form of dividends. Why isn't there a parallel VC industry that\ninvests in ordinary companies in return for a percentage of their profits? Because it's too easy for people who control\na private company to funnel its revenues to themselves (e.g. by buying overpriced components from a supplier they\ncontrol) while making it look like the company is making little profit. Anyone who invested in private companies in\nreturn for dividends would have to pay close attention to their books.\nThe reason VCs like to invest in startups is not simply the returns, but also because such investments are so easy to\noversee. The founders can't enrich themselves without also enriching the investors. [12]\nWhy do founders want to take the VCs' money? Growth, again. The constraint between good ideas and growth operates in\nboth directions. It's not merely that you need a scalable idea to grow. If you have such an idea and don't grow fast\nenough, competitors will. Growing too slowly is particularly dangerous in a business with network effects, which the\nbest startups usually have to some degree.\nAlmost every company needs some amount of funding to get started. But startups often raise money even when they are or\ncould be profitable. It might seem foolish to sell stock in a profitable company for less than you think it will later\nbe worth, but it's no more foolish than buying insurance. Fundamentally that's how the most successful startups view\nfundraising. They could grow the company on its own revenues, but the extra money and help supplied by VCs will let them\ngrow even faster. Raising money lets you\nchoose\nyour growth rate.\nMoney to grow faster is always at the command of the most successful startups, because the VCs need them more than they\nneed the VCs. A profitable startup could if it wanted just grow on its own revenues. Growing slower might be slightly\ndangerous, but chances are it wouldn't kill them. Whereas VCs need to invest in startups, and in particular the most\nsuccessful startups, or they'll be out of business. Which means that any sufficiently promising startup will be offered\nmoney on terms they'd be crazy to refuse. And yet because of the scale of the successes in the startup business, VCs can\nstill make money from such investments. You'd have to be crazy to believe your company was going to become as valuable\nas a high growth rate can make it, but some do.\nPretty much every successful startup will get acquisition offers too. Why? What is it about startups that makes other\ncompanies want to buy them? [13]\nFundamentally the same thing that makes everyone else want the stock of successful startups: a rapidly growing company\nis valuable. It's a good thing eBay bought Paypal, for example, because Paypal is now responsible for 43% of their sales\nand probably more of their growth.\nBut acquirers have an additional reason to want startups. A rapidly growing company is not merely valuable, but\ndangerous. If it keeps expanding, it might expand into the acquirer's own territory. Most product acquisitions have some\ncomponent of fear. Even if an acquirer isn't threatened by the startup itself, they might be alarmed at the thought of\nwhat a competitor could do with it. And because startups are in this sense doubly valuable to acquirers, acquirers will\noften pay more than an ordinary investor would. [14]\nUnderstand\nThe combination of founders, investors, and acquirers forms a natural ecosystem. It works so well that those who don't\nunderstand it are driven to invent conspiracy theories to explain how neatly things sometimes turn out. Just as our\nancestors did to explain the apparently too neat workings of the natural world. But there is no secret cabal making it\nall work.\nIf you start from the mistaken assumption that Instagram was worthless, you have to invent a secret boss to force Mark\nZuckerberg to buy it. To anyone who knows Mark Zuckerberg, that is the reductio ad absurdum of the initial assumption.\nThe reason he bought Instagram was that it was valuable and dangerous, and what made it so was growth.\nIf you want to understand startups, understand growth. Growth drives everything in this world. Growth is why startups\nusually work on technology — because ideas for fast growing companies are so rare that the best way to find new ones is\nto discover those recently made viable by change, and technology is the best source of rapid change. Growth is why it's\na rational choice economically for so many founders to try starting a startup: growth makes the successful companies so\nvaluable that the expected value is high even though the risk is too. Growth is why VCs want to invest in startups: not\njust because the returns are high but also because generating returns from capital gains is easier to manage than\ngenerating returns from dividends. Growth explains why the most successful startups take VC money even if they don't\nneed to: it lets them choose their growth rate. And growth explains why successful startups almost invariably get\nacquisition offers. To acquirers a fast-growing company is not merely valuable but dangerous too.\nIt's not just that if you want to succeed in some domain, you have to understand the forces driving it. Understanding\ngrowth is what starting a startup\nconsists\nof. What you're really doing (and to the dismay of some observers, all\nyou're really doing) when you start a startup is committing to solve a harder type of problem than ordinary businesses\ndo. You're committing to search for one of the rare ideas that generates rapid growth. Because these ideas are so\nvaluable, finding one is hard. The startup is the embodiment of your discoveries so far. Starting a startup is thus very\nmuch like deciding to be a research scientist: you're not committing to solve any specific problem; you don't know for\nsure which problems are soluble; but you're committing to try to discover something no one knew before. A startup\nfounder is in effect an economic research scientist. Most don't discover anything that remarkable, but some discover\nrelativity.\nNotes\n[1] Strictly speaking it's not lots of customers you need but a big market, meaning a high product of number of\ncustomers times how much they'll pay. But it's dangerous to have too few customers even if they pay a lot, or the power\nthat individual customers have over you could turn you into a de facto consulting firm. So whatever market you're in,\nyou'll usually do best to err on the side of making the broadest type of product for it.\n[2] One year at Startup School David Heinemeier Hansson encouraged programmers who wanted to start businesses to use a\nrestaurant as a model. What he meant, I believe, is that it's fine to start software companies constrained in (a) in the\nsame way a restaurant is constrained in (b). I agree. Most people should not try to start startups.\n[3] That sort of stepping back is one of the things we focus on at Y Combinator. It's common for founders to have\ndiscovered something intuitively without understanding all its implications. That's probably true of the biggest\ndiscoveries in any field.\n[4] I got it wrong in\n\"How to Make Wealth\"\nwhen I said that a startup was a\nsmall company that takes on a hard technical problem. That is the most common recipe but not the only one.\n[5] In principle companies aren't limited by the size of the markets they serve, because they could just expand into\nnew markets. But there seem to be limits on the ability of big companies to do that. Which means the slowdown that comes\nfrom bumping up against the limits of one's markets is ultimately just another way in which internal limits are\nexpressed.\nIt may be that some of these limits could be overcome by changing the shape of the organization — specifically by\nsharding it.\n[6] This is, obviously, only for startups that have already launched or can launch during YC. A startup building a new\ndatabase will probably not do that. On the other hand, launching something small and then using growth rate as\nevolutionary pressure is such a valuable technique that any company that could start this way probably should.\n[7] If the startup is taking the Facebook/Twitter route and building something they hope will be very popular but from\nwhich they don't yet have a definite plan to make money, the growth rate has to be higher, even though it's a proxy for\nrevenue growth, because such companies need huge numbers of users to succeed at all.\nBeware too of the edge case where something spreads rapidly but the churn is high as well, so that you have good net\ngrowth till you run through all the potential users, at which point it suddenly stops.\n[8] Within YC when we say it's ipso facto right to do whatever gets you growth, it's implicit that this excludes\ntrickery like buying users for more than their lifetime value, counting users as active when they're really not,\nbleeding out invites at a regularly increasing rate to manufacture a perfect growth curve, etc. Even if you were able to\nfool investors with such tricks, you'd ultimately be hurting yourself, because you're throwing off your own compass.\n[9] Which is why it's such a dangerous mistake to believe that successful startups are simply the embodiment of some\nbrilliant initial idea. What you're looking for initially is not so much a great idea as an idea that could evolve into\na great one. The danger is that promising ideas are not merely blurry versions of great ones. They're often different in\nkind, because the early adopters you evolve the idea upon have different needs from the rest of the market. For example,\nthe idea that evolves into Facebook isn't merely a subset of Facebook; the idea that evolves into Facebook is a site for\nHarvard undergrads.\n[10] What if a company grew at 1.7x a year for a really long time? Could it not grow just as big as any successful\nstartup? In principle yes, of course. If our hypothetical company making $1000 a month grew at 1% a week for 19 years,\nit would grow as big as a company growing at 5% a week for 4 years. But while such trajectories may be common in, say,\nreal estate development, you don't see them much in the technology business. In technology, companies that grow slowly\ntend not to grow as big.\n[11] Any expected value calculation varies from person to person depending on their utility function for money. I.e.\nthe first million is worth more to most people than subsequent millions. How much more depends on the person. For\nfounders who are younger or more ambitious the utility function is flatter. Which is probably part of the reason the\nfounders of the most successful startups of all tend to be on the young side.\n[12] More precisely, this is the case in the biggest winners, which is where all the returns come from. A startup\nfounder could pull the same trick of enriching himself at the company's expense by selling them overpriced components.\nBut it wouldn't be worth it for the founders of Google to do that. Only founders of failing startups would even be\ntempted, but those are writeoffs from the VCs' point of view anyway.\n[13] Acquisitions fall into two categories: those where the acquirer wants the business, and those where the acquirer\njust wants the employees. The latter type is sometimes called an HR acquisition. Though nominally acquisitions and\nsometimes on a scale that has a significant effect on the expected value calculation for potential founders, HR\nacquisitions are viewed by acquirers as more akin to hiring bonuses.\n[14] I once explained this to some founders who had recently arrived from Russia. They found it novel that if you\nthreatened a company they'd pay a premium for you. \"In Russia they just kill you,\" they said, and they were only partly\njoking. Economically, the fact that established companies can't simply eliminate new competitors may be one of the most\nvaluable aspects of the rule of law. And so to the extent we see incumbents suppressing competitors via regulations or\npatent suits, we should worry, not because it's a departure from the rule of law per se but from what the rule of law is\naiming at.\nThanks\nto Sam Altman, Marc Andreessen, Paul Buchheit, Patrick Collison, Jessica Livingston, Geoff Ralston, and Harj\nTaggar for reading drafts of this."
    }
  },
  {
    "name_blog": "How to prioritize features",
    "description_blog": "Emmet Shear shares his mental frameworks for prioritizing building features that work to figure out what to build next on your product, drawing from his experience building Justin.tv and Twitch.",
    "authors": [
      "Emmett Shear"
    ],
    "related_categories": [
      "Product",
      "Feature Prioritization",
      "Building Product"
    ],
    "page_url": "https://www.ycombinator.com/library/8p-how-to-prioritize-features",
    "content": {
      "table_of_contents": [],
      "whole_content": "There are three different mental frameworks for prioritizing building features I've seen that work to figure out what to\nbuild next on your product: Built For Me, where you design a product for yourself as the most enthusiastic customer;\nSwitch To Us, where you design a product for a set of existing and potential customers you talk to directly; and Three\nNumbers Matter, where you pick three measurable focus areas and iterate over time. In my experience startups progress\nthrough each framework in order, one after another, as the type of challenge shifts.\nJustin.tv\nwas\na Built For Me startup originally, as we had the idea we wanted to make a live reality TV show and built the underlying\ntechnology for ourselves first. Twitch was Built For Me in the beginning in the same way, as the only part of\nJustin.tv\nI really personally enjoyed was the video game streaming. However when we started working\non Twitch in earnest, I relied primarily on Switch To Us because our primary customers were streamers and I wasn’t a\nstreamer. Later we developed a Three Numbers Matter approach that's driven most development since.\nBuilt for me:\nYou are the primary exemplar user of your own product\nIn many ways, the hardest thing to do is to \"know thyself\". That's exactly what this requires. You're an\nenthusiastic user of your own product. Deeply introspect and figure out what you wish it did instead. Build that.\nWhat would you find delightful or fun or useful? Make it happen!\nWorks best when you truly do love your product. I managed the viewer side of the Twitch experience this way for a\nlong time, because I really do love watching Twitch.\nWorks best for small teams. It's hard to communicate intuitive introspective understanding to other people. You can\ncreate a small team inside of a big company, but it's difficult to get even a medium-sized organization aligned with\nthis approach.\nWorks best if you have good intuitive access to your desires. Some people find themselves wanting what they \"should\"\nwant, rather than what they actually want. You need to be able to guess what you’ll truly actually want, not what\nyou think you’re supposed to want. It’s important to note that “I think I want this because it’s what I believe I’m\nsupposed to want” feels subjectively very much like “I want this”, because human introspection is very unreliable.\nSwitch to us:\nPeople are already doing the behavior you want elsewhere, you want them to do it with you instead.\nInterview as 5-6 dedicated users each from your service, from each competing service, from closely-adjacent\nservices. Ask them if they've tried your product, tried multiple products. I’ve included a list of potentially\nuseful interview questions at the end of this document.\nYou'll wind up with 50 or so interviews. Categorize the responses and score them in a spreadsheet. Look for\npatterns. Consider doubling down on your strengths, and shoring up obvious weaknesses. Pick stuff that will drive\nswitches to your product from competitors. Probably target one competitor at a time. Things you can build or change\nfast are much better than things that take a long time, because customers don’t care how hard something is to build\njust how effective it is for their problem. But don’t shy away from hard problems if that’s what’s necessary.\nThe key to running effective interviews is to use the interviews to understand the problem, and based on what you\nlearn to generate ideas for solving it. Validating an idea you already have is an anti-goal. You can’t improve an\nidea through any amount of validation. The goal of this process is to have better ideas as much as it is to\nprioritize them. If you generate your ideas from the problems and opportunities your customers face, you’ll have\nbetter ideas and a stronger intuitive sense of their priority. I did a talk on how to do this effectively:\nhttps://www.youtube.com/watch?v=qAws7eXItMk\nWorks best when your product is very important to your customers. Streamers on Twitch have strong opinions about\nwhat makes a good streaming service that they can articulate very clearly and where they can weight tradeoffs. They\nthink like \"prosumers\" or \"SMBs\" rather than consumers. Vs. say SnapChat, where the average user may have no idea\nwhat it is about SnapChat that they like exactly. Why do I find reddit so addictive? The reddit PMs might know, but\nI certainly don't.\nWorks best when you're selling a better mousetrap, rather than inventing the mousetrap category. Twitch was a better\nmousetrap for streamers on other streaming services, we weren't inventing live streaming as a category. Wouldn't\nhave worked for us at\nJustin.tv\nwhen there were no existing live streamers because we were the\nfirst live streaming service.\nThree numbers matter:\nThere are a few key drivers that make using your product better or worse.\nTalk to your customers, look at the data, and identify the three most important qualities of the product for your\ncustomer. For Amazon, for example, the three drivers are lower prices, more selection of products, and faster/more\nreliable shipping. Amazon focuses on finding ways to drive down prices, add new categories of products or new\nversions of products, and improving the speed and convenience of shipping. Of course other things matter too, but\nideas that move those three things are given priority for product progress. At Twitch, our three metrics are\naudience size, positive interactions, and money. Twitch focuses on ways to help streamers grow the size of their\naudience, interact with that audience in more fun and connected ways, and earn more money per viewer.\nThree is a magic number for focus. The truth is that your product is complex and there are many things you need to\nimprove and it’s always tempting to add focus areas. Empirically, three seems to be the maximum number of focus\nareas that people can keep in mind consistently. Think about how lists like “X, Y, and Z” feels natural, but “W, X,\nY, and Z” does not.\nYou can have a bonus fourth focus area as well: Stuff You Have To Do. PCI compliance is usually not a company focus,\nbut failing it as a payment processor will still kill you. Your product needs to stay up, enough downtime will kill\nyou. You can probably think of dozens of more examples. This stuff needs to be done and should be done, but should\nnot be included in the top level three metrics.\nThis approach tends to be recursive. There are 3 metrics that matter at the top level. Driving each of those metrics\ncan be further decomposed, and each can have 3 sub-drivers.\nYou'll wind up with three areas of investment. Come up with a metric for each (these will evolve over time...revisit\nthem every few months), and start trying to move it. Choose your split by intuition...maybe it's 33/33/33, maybe\nit's 50/25/25, depends if you think one area is more important right now.\nWorks best when people choose your product for measurable reasons (price, audience size, speed) and almost not at\nall when people choose your product for difficult-to-measure ones (fun, connection, love, community). Good for\nmaking utilitarian things, less good for making games and toys and beautiful UX.\nOperational excellence (good uptime, efficient use of employee labor, security, etc) is important for every company.\nBut for a startup, it’s rare that you can win through pure operational excellence. Usually you need to do just\nenough operational excellence that it’s acceptable to your customers, and then focus on delivering on what your\ncustomers really care about. Sometimes one of the primary values for your company is that it’s low latency, or high\nsecurity, or super reliable, and that aspect of operational excellence becomes a key goal. But even then, most\naspects of operational excellence need to be run on a “good enough” basis early on.\nWhile Twitch has been running primarily on a Three Numbers Matter approach, we go back to Switch To Us periodically for\nnew customer segments. For example, as we started working to launch our new music category, we started talking to\nartists who livestreamed elsewhere online to understand what their needs were. Solving for those needs drove our\nroadmap, rather than a metric driven Three Numbers Matter approach. As the category grows, we have begun to identify the\nset of metrics that matter most for us and we will begin to transition towards Three Numbers Matter instead.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nCertain problems don't fit any of these frameworks. What do you do if you're building a brand new mousetrap, which\npeople like your product for difficult-to-measure reasons, and you're not the end-user of it yourself? It's really\nreally hard! So these constrain the space of problems where it's possible to build good stuff reliably. This constrains\nbig companies more than small ones, due to the difficulty of scaling up Built For Me. So you either find big companies\nworking on products where the important drivers are easy to measure, or you find them working on incremental innovation\nin existing categories. Unless of course, the CEO is the lead designer like Steve Jobs at Apple, where you get a big\ncompany escaping the dilemma and doing ground-breaking category creation for a product that's great for\ndifficult-to-measure reasons. The ongoing popularity of “hack day” or “hack week” within larger organizations fits into\nthis framework as well. Hack week is all about unleashing the Built For Me capacity latent inside any organization, by\nreverting to a more startup-like approach with small teams and intuitive decisions. This also explains why a lot of the\nbiggest startups (though certainly not all) started with the Built For Me approach. It gives you an automatic advantage\nagainst big incumbents who can't use the same method.\nGood Interview Questions for Switch To Us:\nWhat do you like about your current solution?\nWhat don’t you like about it?\nHow did you wind up choosing your current solution?\nWhat were you doing before?\nWhat would you do if you were the CEO of the current company’s product you’re using?\nWhat’s the single most annoying thing about your current solution?\nWhat’s the single coolest new thing about your current solution?\nIs there anything that would convince you to switch to using our product immediately if we built it? If so, what is\nit?\nIf you had a magic wand and could create any experience you wanted in this area, how would it work?\nWhat’s one thing about your current solution that’s surprisingly hard?\nRemember to follow up with “interesting, tell me more” or “why is that?” or “can you elaborate?” as appropriate.\nPeople know more than they think they do, they just need a good interviewer to draw it out of them."
    }
  },
  {
    "name_blog": "How to spin your scientific research out of a university and into a startup",
    "description_blog": "Here is advice for people who have done scientific research at a university and are considering starting a company to commercialize it.",
    "authors": [
      "Jared Friedman"
    ],
    "related_categories": [
      "Science + Biotech",
      "Becoming a Founder",
      "Academia to Startup"
    ],
    "page_url": "https://www.ycombinator.com/library/8f-how-to-spin-your-scientific-research-out-of-a-university-and-into-a-startup",
    "content": {
      "table_of_contents": [
        "Deciding who should spin out",
        "Deciding when to spin out",
        "Splitting up Equity",
        "Negotiating with tech transfer offices",
        "After the spinout",
        "Notes"
      ],
      "whole_content": "This is advice for people who have done scientific research at a university and are considering starting a company to\ncommercialize it.\nAt YC, we've funded more than 75 companies in this situation. We also recently went on a\nBio\nTour\nwhere we went around to research universities and talked with\nhundreds of students and professors in the life sciences about commercializing their research. These are the most common\ntopics founders have asked us about.\nDeciding who should spin out\nIn a typical spin-out situation, there are several people who worked on the research, including a mix of students, post\ndocs and faculty. The first thing you need to decide is who is going to work on the company and who is going to stay at\nthe university.\nA lot of scientific founders have misconceptions about how to structure their founding team. Here are the most common\nones.\nMisconception 1. You can start a company while continuing your academic career\nHere is a blunt fact that often makes founders uncomfortable: your company has little chance of success unless someone\nwho worked on the original research is willing to leave their university role to start this company.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nIf you are a student graduating soon, you can just wait until you graduate; that’s a perfect time to start a company.\nBut otherwise, at some point you will have to make an intentional decision to leave so you can run the company.\nMisconception 2. You should find a CEO to run the company\nToo many scientists believe that they should remain in academia and find a CEO to start a company around their\ninvention. This is almost always a bad idea. For one, it’s hard to find a great CEO to run a company at this early\nstage. Truly great CEOs are scarce, and they usually have much better opportunities available to them than running an\nidea-stage startup with no funding. As a result, most scientists that try this approach either never find a CEO or end\nup settling for a mediocre one. It’s even worse if your university tries to find a CEO for you.\nBut even if you could draft any person in the world to run your company, it still probably wouldn’t be a good idea. The\nbest CEO for this stage is one of the people who did the original research. The people who did the original research\nwill be far more invested in the success of the venture than any outsider. They are also far more qualified to build a\ncompany around it because their domain knowledge of the field is much more valuable than whatever general business\nskills an outside CEO would bring.\nA related misconception is believing that the research is done and that all that’s left is to commercialize it. If this\nwere true, perhaps an outside CEO would make sense. However, it rarely works out that way. Usually you find that the\nthing the market wants is not quite the thing that you’ve invented, and that more research needs to be done. The\noriginal inventors can take this feedback and make adjustments; an outside CEO will just be stuck.\nMisconception 3. You need someone with business experience on the founding team\nMany scientists think that to start a company you need someone with prior business and financial experience. This is\njust not the case. In the first couple of years, there is typically very little \"business\" to be done, and whatever\nbusiness skills you need you will pick up along the way. Most of the scientists we fund at Y Combinator have no prior\nexperience in business.\nPeople who work in business like to make it sound hard, as if business were like quantum physics, a field that needed to\nbe studied for years to master. The fact is, it's not even close.\nMisconception 4: You should raise money first, then leave the university\nOften, people are unsure of whether they want to risk leaving a stable academic role to pursue a startup. So they take\ntheir idea and pitch it to some local VC firms. They figure if it's a good idea, the VC firms will fund them, validating\nthe idea and giving them a smooth transition out of their university job and into a well-funded company.\nWhile VC firms will occasionally fund spin-outs this way, usually they don't. Unfortunately, too many founders get\nturned down by VCs and conclude that their idea must be bad and give up. Actually, the issue is that it's just too early\nat this point to raise money from VCs.\nTypically, founders will need to work full-time on their company for 1+ years before it is ready to raise a\nmulti-million dollar round from VCs. In the meantime, they sustain themselves by self-funding from their savings,\ngetting government research grants, raising a small amount from friends and family, or raising a small \"pre-seed\" round\nfrom angel investors, accelerators, or seed funds.\nFounders who won't quit their job before they raise money often get stuck in a catch-22. They are waiting for an\ninvestor to take a bet on them before they quit their job. But the investors are waiting for the founders to believe\nenough in their own company to quit their job!\nWhat I recommend\nThe ideal situation is that two or more people from the lab who did the work leave together to start the company as\ncofounders. One full-time founder is also ok. One of the people who leave to start the company should be the CEO.\nIn many cases, other people who were involved in the research want to remain behind at the university but still\ncontribute in some way. That’s fine. Those are often called “academic cofounders” or “scientific cofounders” and they\ncan still be very helpful. But the founders who are going to be full-time are the most important.\nDeciding when to spin out\nIn the early stages of developing a new technology, you’ll make faster progress still at the university, taking\nadvantage of university resources. It’s the ideal place to do the initial experiments to prove that your idea could\nwork. You can even do some testing of market demand for a new product, through programs like NSF I-Corps or just by\ncalling up potential customers/stakeholders. At some point, though, that will flip, and being at a university will start\nto slow you down, because universities are not set up to commercialize technologies.\nIt’s possible to leave too early and possible to wait too long before leaving. Unquestionably, though, the far more\ncommon mistake is to wait too long.\nMost founders wait too long because leaving is scary. Academia is a comforting environment. No one is pressuring you to\nleave and leaving seems risky so the natural thing to do is to keep delaying it. There's a temptation to make the\ntechnology perfect before spinning out, and there's always \"one more experiment\" you could do. If you don't stop this\ncycle, you'll never leave.\nOften after people do leave, they realize that a lot of the work they did in the last year was wasted, because some of\ntheir assumptions about what the market wanted were wrong. They also realize that they are now moving so much faster as\na company that they could have saved months of time by spinning out a year earlier.\nSplitting up Equity\nAfter you've decided who is going to be full-time on the startup and what everyone's role will be, you'll want to split\nup equity.\nAs important as this decision is, founders often don't have a good framework for making it. Here is the framework I\nrecommend. It has just two rules\n1\n.\nFounders who will be working on the company full-time should get equal or nearly equal amounts of equity.\nFounders who will be leaving their job to work on the company full-time should get much more equity than founders\nwho are going to remain in academia. Academic cofounders should typically own no more than 10% unless they are going\nto continue to be hands-on\n2\n.\nMy colleague Michael Seibel previously wrote a\ngreat\nessay\nabout why rule #1 is so important.\nRule #2 is important because it is the full-time founders who will invest years of their life exclusively in making the\ncompany successful, and they need to have enough ownership that it makes sense for them to do that.\nThe biggest conceptual mistake I see scientific founding teams make here is that they think the purpose of allocating\nequity is to reward past contributions, when actually it’s mainly to anticipate future ones.\nHere's a blunt fact about starting a company. If you are going to make a new company successful, you will probably have\nto work on it for 7-10 years post spin-out. That's a long time!\nIf you are just spinning out of a university now, you might feel like you're halfway done, but actually you are on\nmile 2 of a 26 mile marathon. The academic founders may have been instrumental in the first mile, but it is the\nfull-time founders who will be primarily taking you the other 25. The equity split between founders has to reflect the\nexpected contributions over the whole marathon.\nOne consequence of this is that your equity split in the new company will not necessarily have any relation to your\nseniority within the original academic team. It’s often the case that the people leaving are more junior, while the\nsenior people / faculty remain. In that case, the founders who leave will end up with much more equity than their former\nboss. This can be an awkward conversation, but it’s entirely sensible.\nNegotiating with tech transfer offices\nIf you are going to commercialize research started at a university, you will probably need to negotiate the rights to\nthe intellectual property. The group at a university that does that is the technology transfer\noffice.\n3\nIn the past, tech transfer offices had a well-deserved bad reputation. They were known for being slow and bureaucratic,\nand for forcing onerous terms onto fragile young startups. Many times the terms they insisted on strangled the very\ncompanies they were trying to create. There was so little transparency in the industry, it was hard for founders to know\nwhat terms were fair.\nFortunately, things have gotten better. There is now much more information available for founders. Tech transfer groups\nat the universities in major startup hubs like Harvard, MIT and Stanford now give startups reasonable terms (though they\nstill take too long to do it). At universities that have not seen many successful spin-outs, it's hit-or-miss. A few\nuniversities are now using “\nexpress\nlicense\nagreements\n”, preset\nagreements that require little to no negotiation; hopefully this will become more common.\nThere are typically four key terms\n4\nin these agreements.\nEquity. Typically the university will get equity in the company. This is ok as long as it is not too much. 3-5% is\ntypical. Above 10% will cause problems.\n5\n,\n6\nRoyalty. This means that you pay a percentage of revenue or profits to the university. If this is too high, it can\naffect the viability of the company to raise money and operate. Ideally you would make this zero. If you can't do\nthat, try to keep it < 5%, and to have it terminate after a certain number of years and/or a certain level of\npayments.\nMilestone payments. I.e., \"You owe us $250K when the company raises its first $10M\", or “You owe us $500K when you\nreach Phase II clinical trials”. Because cash is scarce in the early days of a startup, you want to keep these as\nlow as possible. You should never need to spend more than a few percent of the money you raise.\nExclusivity. If a license is not exclusive, the university could theoretically turn around and license the same IP\nto a big company to go compete with you. This sounds like a real problem, but often it’s not. For many inventions,\nin practice other companies won’t know how to use the IP and won’t value it until you've done years of work further\ndeveloping it (at which point the university-owned IP isn’t\nsufficient).\n7\nIt may be optimal to have a non-exclusive license\ninitially with an option to make it exclusive later, or a right of first refusal clause.\nHere is some advice for negotiating these agreements.\nYou should get in touch with founders of other companies that have recently negotiated agreements with the same office.\nFind out what terms they got and ask for advice on negotiating strategy. You can also ask investors, lawyers, and\nadvisors. You should get as many data points as possible.\nIf you’re a student or post doc, it’s valuable to have the buy-in of the professor running your lab. Professors have\nsway at universities and will give you leverage over a stubborn tech transfer office. You also want to make sure that\nthey don’t have any competing plans to do their own spin-out with the technology. Often by getting them onboard as an\nadvisor early, they will be helpful in securing a good deal, and they’ll also give you credibility with investors.\nIf the agreement feels too onerous, ask yourself if you need it at all. It might be cheaper to recreate something\nsimilar on the company’s time.\n8\nMore dramatically, you might end up not even using what you’re planning to license, because startups pivot all the time.\nI’ve worked with many companies that fought tooth and nail over their tech transfer agreement, only to find that a year\nlater they'd totally changed their approach and abandoned the IP they fought so hard to license! One way to protect\nagainst this is to ensure that any royalties are directly tied to the use of the technology.\nConsider taking an option to license the IP in the future, rather than negotiating a full license agreement now. An\noption is often much cheaper and simpler to get, and allows you to defer the final negotiation for six to twelve months.\nThat also gives you time to see how much you are using the original IP before committing to licensing it.\nBeware of well-meaning but bad advice from university entrepreneurship offices. Some entrepreneurship offices at\nuniversities are great, but unfortunately some are not. Worse, some have their own agendas, like helping local\ninvestors. Consider whether the people you’re talking to have a track record of many truly successful companies when\nlistening to their advice.\nStart the conversation with this office as early as possible. This will give you more time to work out an agreement and\nalso let you find out the lay of the land.\nDon't wait for the agreement to start the company. Getting an agreement can take 6 months or longer. Many investors\n(including YC) will fund companies before they have an agreement in place. The more progress you make on the company,\nthe more leverage you have in the negotiation.\nAfter the spinout\nYou’ll need to incorporate your company. If you are based in the US (and possibly even if you aren’t), you’ll want to\nincorporate as a Delaware C Corporation, no matter which state you are physically\nin.\n9\nIt may well make sense to continue collaborating with your lab. They may produce new work which you want to license.\nIn some cases, you may want to continue doing experimental work using university labs. University core facilities are\ncommonly available to companies, albeit for higher fees. It’s possible to save a lot of money using university resources\ninstead of buying equivalents commercially. That’s fine, as long as it isn’t slowing you down significantly and doesn’t\ncreate IP issues. Unfortunately there is often a tradeoff between speed and cost.\nA big adjustment for founders from academia is internalizing a different incentive structure. In academia, you’re\nrewarded for new discoveries and for publications. In startups, there is zero reward for new discoveries and hardly any\nfor publications. In startups, the only thing that you are rewarded for is making tangible progress towards a\ncommercially valuable product.\nA side effect is that in startups, there is no intrinsic reward for doing something new or difficult. Any time there is\na shortcut where you can copy or buy something that already exists, you should take it. In startups, you want the “new\npart” of what you are doing to be as small as possible, and everything else to be as boring and low risk as possible.\nAnother big adjustment is the pace. In startups, you are racing against the clock. If you don’t hit milestones before\nyour current funding runs out, your company will run out of money and die. That kind of hard constraint forces focus\nlike nothing else. As a result, founders who leave academia to do YC often tell us they got more done in the three month\nYC batch than the prior year.\nIf that’s made startups sound stressful, they are, if only because so much is at stake. When you’re starting your own\ncompany, the highs are higher and the lows are lower than any regular job. If you want to learn more about what it feels\nlike, there’s a great essay called “\nWhat Startups Are Really Like\n”.\nThere has\nnever been a better time\nto start a biotech or hard-tech company.\nThere is\nfar more funding available\nnow than ever before, and a well developed ecosystem to support\nfounders at every stage. Today most grad students and postdocs choose between staying in academia and getting a job in\nindustry. We think there will increasingly be a third option: to start their own company.\nThanks\nI couldn’t have written this without the help of many YC founders who did spin-outs themselves. Special thanks to Uri\nLopatin, Birgitt Boschitsch, Aaron Lazarus, Alexis Rovner, Juan Medina, Glenn Markov, John Ramunas, Wesley Wiersen,\nLindsay Amos, Ravi Pamnani, and Andrew Jajack for reading drafts of this.\nNotes\n1.\nSeparately, it’s also very important for all founders to have a\nvesting\nschedule\nfor their shares. It should vest over at least four\nyears.\n↩\n2.\nBeing “hands-on” means more than giving advice. It means spending at least 1 day / week doing\nactive work for the company - writing grants, being in the lab, going to sales meetings, etc. Their equity vesting\nshould be tied to them continuing to take a hands-on role.\n↩\n3.\nThe names vary a little - sometimes it’s called the “office of technology licensing”, or the\n“innovation office”, but I’ll use this term.\n↩\n4.\nHere are some less critical but still common terms and quick advice for them: (5) patent\nprosecution - you should have control of the patent filing and patent strategy, (6) sublicensing - likely important for\nyou to be able to sublicense, (7) funding requirements - try to avoid, (8) upfront and annual fees - ok if relatively\nsmall, (9) rights to future IP coming out of the same lab - may or may not be worth it, (10) pro rata rights so the\nuniversity can invest to maintain their ownership - acceptable if the university can decide quickly and if it only\napplies to priced rounds, not convertible securities.\n↩\n5.\nSometimes the terms call for a “percentage of proceeds from any liquidity event” instead. This\nis worse than equity because it can’t be diluted. So if your university insists on this because they can’t accept\nequity, it should be a very small percentage, about ⅓ of the equivalent equity percentage.\n↩\n6.\nAnother wrinkle is anti-dilution clauses where these equity percentages don’t dilute until\nyou’ve raised $xM.\n↩\n7.\nRelated to this, some universities require a “marketing period” where they shop the invention\naround to other potential buyers but usually this is a formality because they rarely get interest.\n↩\n8.\nAlso, if you have a reasonable path to recreating it, that can give you leverage over a tech\ntransfer office. If they know you are busily working on recreating it, the value of the license deal goes down every\nday.\n↩\n9.\nTwo easy options for doing this are\nhttp://clerky.com/\nand\nhttps://stripe.com/atlas.[↩][7]"
    }
  },
  {
    "name_blog": "How to build a great Series A pitch and deck",
    "description_blog": "YC's Janelle Tam on how to put together a great Series A pitch and deck.",
    "authors": [
      "Janelle Tam"
    ],
    "related_categories": [
      "Series A"
    ],
    "page_url": "https://www.ycombinator.com/library/8d-how-to-build-a-great-series-a-pitch-and-deck",
    "content": {
      "table_of_contents": [
        "What’s the purpose of a Series A pitch?",
        "Starting Exercise",
        "Deck Outline",
        "Pitch Practice",
        "Presenting Over Video",
        "Refining Your Deck"
      ],
      "whole_content": "As YC’s Series A Program Manager, my job is to help YC founders raise their Series As. After spending hundreds of hours\nworking 1:1 with founders to workshop their pitches and decks, I’ve found myself giving the same feedback repeatedly.\nI’ve decided to compile that feedback into a single post and make it available to any founder looking to put together\na great Series A pitch and deck. Every single piece of feedback given here is something we’ve told one of our founders\ninternally.\nWhat’s the purpose of a Series A pitch?\nThe purpose of a Series A pitch is to show investors why they should invest in your business. It should provide a clear\nand concise overview of the business you’ve built, and then paint a picture of where that business could go and why\nraising money will help you get there.\nLet’s break this down:\n\"Why they should invest\"\n- This is an investor pitch, not a customer pitch. Investors may not have encountered\nthe problem you’re solving, and won’t intuitively understand how your product solves it. That’s why good pitches\ndo 3 key things: they explain the problem your customers face and the impact it has on them, they show how your\nproduct solves this need and makes your customer’s life better, and they demonstrate why doing so is a good\nbusiness.\n“Clear and concise”\n- Think of investor attention as a limited resource that you need to spend wisely. Making\nyour pitch as simple and straightforward as possible minimizes the time required to understand your business.\nInvestors should be able to glance at each slide and immediately understand the point that is being made. The best\npitchers use plain English and avoid jargon as much as possible. Where jargon is necessary, they define each term\nclearly the first time they use it (and modulate this based on how much domain expertise their audience has.)\n“Overview”\n: Your goal is not to download everything about your business, but to tantalize investors with enough\ninformation to keep them interested. Leave room for questions. A successful pitch lays the groundwork for a\nsubsequent productive, in-depth conversation. Pitches should be 15-20 minutes, with the goal of setting the stage\nfor the subsequent 40-45 minute discussion. On that note, if investors aren’t asking questions or engaging at all,\nthat’s a red flag — it likely means your slides are too complicated for them to understand enough to even be curious\nabout what you’re saying.\n“Of the business you’ve built”\n: Start by talking about what you’ve already built. Compared to your seed round,\nit’s harder to raise an A based purely on promise. Investors will want to know what you have to show for the time\nand money you already had.\n“Paint a picture of where it’s going”\n: Getting investors to believe your vision starts by showing how your\npresent reality is trending towards it. Once you’ve established that you’ve already built something impressive, then\nyou have the credibility you need to show how it could grow into a massive company. Venture capitalists are looking\nfor outsize returns, so they have to believe your company can get there.\n“Why raising money will help you get there”\n: The deck should make clear that the obstacle to your growth is\nactually money (not incompetence, poor product quality, a lack of product-market fit, etc.). The deck should end by\nmaking this explicit and showing how you plan to invest that money to get you to the next level.\nStarting Exercise\nStart by writing out your narrative as a list of bullet points. The more concise, the better - aim for 10-15 bullet\npoints max. In YC, we call this your “fundraising vertebrae”. YC founders should be familiar with this process from\nDemo Day preparations.\nUnder each bullet point, list the data points you have as evidence that your argument is true. For example, if the\npoint is that you acquire customers profitably, your subpoints would be numbers around what % of your acquisition is\norganic vs. paid, what your CAC/LTV or payback per customer is etc.\nBuild your deck around this list. Each bullet point is one slide. The high level point is the slide’s title, and the\ndata points comprise the content of the slide that help prove your point is true. If you’re trying to make more than\none point per slide, your slide is too complicated. By extension, your deck should range from 10-15 slides, not\nincluding your appendix. See below for a more detailed explanation of how to structure each slide.\nWrite out a list of questions investors could ask, especially metrics, and make sure you can answer every one of\nthem in a clear and credible way. Have data to support where available. You need to demonstrate a solid grasp of\nyour business to be taken seriously as a founder.\nDeck Outline\nTitle (1 slide)\nYour title slide should list your company name or logo and a one sentence description of what you do. Anyone reading\nyour one-liner should immediately be able to picture what you do in their head. This means it should be:\nConcrete:\nExample - “Reinventing agriculture” vs. “We build and operate robot greenhouses” - “Reinventing” is\ntoo abstract and “agriculture” is so broad that I don’t get any new information about what you do.\nUse terms common enough for a layperson to understand:\nExample -“Creating behavior change among nicotine\naddicts” vs. “Help people quit smoking” - “behavior change” may be a specific, meaningful term to psychology PhDs\nand healthcare executives, but that meaning will likely be lost on the average person.\nSpecific to what YOU do:\nExample - “Plant-based dairy” vs. “We make plant-based cheese” - in the first case,\nit’s unclear what you do around plant-based dairy. Do you produce or distribute it? What kind of dairy products?\nYour one-liner should make clear what your market is.\nTraction (teaser, 1 slide)\nAt every point during your pitch, investors are going to be evaluating whether you are worth their time. Putting this\nslide early grabs the investor’s attention and convinces them that your presentation is worth listening closely to.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nIt also provides a smooth lead in from your one-liner (“We help people quit smoking. Our product is so good that in just\nthe past 2 years, we’ve reached 500k WAU growing at 20% m/m.”) and transitions well into your problem (“The reason\npeople need this product is that smoking is the leading cause of lung cancer…”).\nProblem (1 slide)\nOutline the problem you’re solving. How does the world currently work for your customers, and what’s wrong with it?\nMake sure it’s a problem your specific product actually solves.\nThe problem slide is a setup for the solution slide,\nwhich goes over how you solve this problem. The solution you present needs to seem like a natural fit for the problem\nyou’re solving.\nBad problem statement: “Americans spend $400B on mental health problems.” There’s no way a tiny startup can solve\nthis $400B mental health problem - each startup only focuses on a piece of it.\nGood problem statement: “x Americans need therapy but can’t pay for it…” This carves out a specific part of the\nproblem you’re focused on - lack of access to therapy. This sets up your solution slide to focus on how you’re\nmaking therapy more affordable.\nPresent the problem from your customer’s perspective.\nYour customer is whoever is paying you for your product. This\ndistinction is especially important if the people that use your product are different from the people paying you for\nyour product. For example:\nHealthcare - you’re usually paid by insurers even though your users are patients\nEmployee benefits - you’re usually paid by employers (specifically, HR departments) even though your users are\nemployees\nIf you’re a marketplace, you have to pick one perspective to talk about the problem from. It typically makes sense to\ntalk about the side of the marketplace you’ve prioritized solving for. For example, if you’re pitching Airbnb, is the\nproblem that landlords want to find short-term renters, or that it’s hard for short-term renters to find a place to\nstay?\nExplain how the world currently works. Aim to show, not tell.\nSome problems investors are familiar with; for others,\nyou need to show them that the problem actually exists. The best way to do this is to tell the story of what currently\nhappens in a concrete and specific way.\nBad problem statement: “Medical billing is broken.” This is vague. If I disagree with this statement, there are no\ndata points or examples to show me why I’m wrong. Even if I agree with this statement, I may not believe medical\nbilling is broken for the same reasons you do.\nGood problem statement: “Here’s how medical billing works today: patients need to do X very inconvenient steps,\nwhich takes Y months of delay in reimbursement and results in only Z% of claims being approved…”\nSolution (1 slide)\nNow that you’ve described how the world works, explain what you do and how it changes the way the world works. What do\nyou do to fix the problem you just outlined?\nDo a side by side comparison.\nYour problem slide perfectly sets you up for this. It’s one of the clearest ways we’ve\nfound to demonstrate exactly how you change your customer’s experience in a concrete way, and therefore, what value you\nprovide to her.\nQuantify your impact with numbers.\nThis goes back to showing, not telling. Don’t tell me you have the fastest /\neasiest / cheapest product on the market, actually show me numbers around the speed, ease of price of your product vs.\nthe status quo.\nHere’s an example of these 2 points in action:\nProblem slide: “When businesses want to verify the identity of other businesses, they had to manually look up\nbusinesses in X databases. This process took Y days and Z% of these results were inaccurate.”\nSolution slide: “With us, all businesses have to do is submit a query to just one database - ours. This process\ntakes A days and is B% accurate. This means they can verify C% more people D times faster.”\nFocus on what you do right now, not what you plan to do in the future.\nToo often I’ve listened to pitches where\nfounders paint a vision of an awesome-sounding product, only to be disappointed when I poke at it and realize they’ve\nonly really built the very first piece. This comes across to investors like you’re compensating for not actually having\naccomplished much - and investors will discount these hand-wavy hypotheticals to zero because you haven’t actually done\nit.\nDon’t just tell me what your product can do, tell me how your customer actually uses it and why that’s valuable to\nthem.\nIn this vein, showing screenshots of the product or long lists of features is rarely helpful. Explain just\nenough of what the product does to show how it solves your customer’s problem and changes their experience. For example:\n“We have a database of 100k entries” → “Our database allows customers to verify someone’s identity with X% accuracy\nin Y minutes.”\n“Here’s a screenshot of what our recruiting CRM looks like” → “Our recruiting CRM allows customers to tabulate and\nreport what their hiring funnel looks like at every stage of the process in real-time, allowing them to immediately\nflag problems.”\nTraction (in-depth, a few slides)\nTraction 1:\nTraction 2:\nTraction 3:\nYour numbers should tell a story. The story should start with the most important metric to investors. If you have\nrevenue, this should be revenue. When you present revenue, make sure you explain how you earn that revenue - i.e. your\nbusiness model. This helps investors understand what drives your revenue, and therefore how your revenue might change\nbased on various factors.\nThe specifics of what numbers to report depend on your business, but ultimately the purpose of all of these numbers are\nto convince the investor of an argument. (This is why our starting exercise above begins by deciding what arguments you\nneed to make in your pitch, and then collecting the data points that show those arguments are right.) Here’s a common\nnarrative in traction sections specifically tailored to enterprise and consumer companies:\nWe have revenue that’s growing really fast (revenue plus growth rate), based on a solid business model (key revenue\ndrivers, margins and how those margins are tracking over time)\nWe’re great at acquiring customers (customer acquisition) and are able to do this profitably (unit economics)\nFor enterprise sales, key numbers could include: sales cycle, average contract value, salesperson efficiency,\netc.\nFor consumer, key numbers could include: breakdown of organic vs. paid acquisition, CAC/LTV, distribution\nchannels, conversion rates etc.\nThey love our product (engagement and retention)\nFor enterprise sales, key numbers could include: time to onboard, % adoption within organization, churn etc.\nFor consumer, key numbers could include: DAU/WAU/MAU, retention after one day/week/month, average amount of time\nspent on platform, average spend etc.\nFor hardtech and biotech companies, this section might focus on numbers showing the efficacy of the technology you’ve\ndeveloped, how many patents you’ve filed, how many partnerships or LOIs you’ve signed and what the value and terms of\nthose commitments are, or a specific milestone you’ve hit (for example, filing your 510(k) or IND application).\nShow trends.\nWhat’s more important than where your traction is at this point in time is where it’s going. Your\ncurrent scale matters in that you need to hit a certain scale for investors to trust that growth: you might start off\ngrowing 25% m/m off a base of $200k, but it’s sustaining that growth when you hit $1m that’s impressive. More important,\nhowever, is how those numbers are changing over time. This is why a monthly or quarterly graph is better than a summed\nup annual number. You also need to show at least 4-6 months of this trend for it to be believable (see our article on\nThe Importance of Trends).\nThis is also why the amount of time it took you to accomplish these milestones is crucial context: it shows the speed at\nwhich you move. That’s why we tell companies that the longer they’ve been around, the more they have to have done. The\nbenchmarks\nwe compiled in our Series A guide are based on the\ntypical timeline of raising your Series A 18-24 months after your seed, but if you’ve been around for longer, you’ll\nneed to have to have more to show for it.\nPresent numbers clearly and concisely.\nFounders typically fall into 3 traps:\nThrowing reams of numbers at investors:\ninformation overload makes it hard to digest any information at all. Your\njob is to guide investors to the most important parts of your business. A good way to do this is to identify what\nyour “hero facts” are. These are headline numbers that prove a key point you want to make. They should stick in\ninvestor’s minds after the pitch, and be what they use when pitching you to their partners.\nToo few numbers:\nat the Series A, you need to have data to show you’ve made good on the promises you made at the\nseed. At best, not being detailed enough with your data wastes precious time making the investor dig for it; at\nworst, it feels like you’re hiding your numbers because you think they’re weak.\nUnclear numbers\n: making your numbers hard to understand, usually due to either calculating or presenting them\nconfusingly.\nCalculating numbers confusingly diminishes your credibility. It suggests you either don’t understand how to\ncalculate the number correctly (i.e. incompetence) or are not being forthright about what these numbers actually\nmean (i.e. dishonesty). A classic example of this is showing cumulative numbers. Almost every time I’ve seen\ncumulative numbers in a Series A deck, it’s because founders are trying to hide their monthly/quarterly numbers\nbecause they don’t think they’re strong enough.\nPresenting them confusingly limits investor understanding of your business. At best, it takes awhile for the\ninvestor to grok what’s going on; at worst, they zone out and never actually get to understand what your numbers\nmean. A classic example of this is using double axis graphs - time is always wasted in clarifying which line\ngoes with which axis, and then figuring out what those lines mean.\nHere are a couple of good rules of thumb to avoid falling into these traps.\nGraphs should be understandable at first glance. If it requires a deeper explanation to understand, it’s too\ncomplex.\nBe very clear about exactly what your numbers are measuring. When you say users, are you talking about\nmonthly actives or daily actives? When you say revenue, are you talking about gross or net?\nMarket (1 slide)\nShow how big of an opportunity you’re tackling. We usually suggest a bottoms-up calculation. A general formula for this\nis:\nnumber of prospective customers x value of each customer to you\nA bottoms-up calculation should rely on real numbers gleaned from your current business - the number of prospective\ncustomers is based on the customer segments you currently serve, and the value of each customer should be based on their\nactual value to you right now. Top down numbers from reports are often not specific enough to the market your product\nplays in, especially if you’re tackling a subset of the market, or if you’re creating an entirely new segment. If you’re\ncreating a category, it’s also useful to show a couple good analogies of massive companies that have done similar things\nthat you can pattern match against.\nCompetition (1 slide)\nShow why you’re 10x better than everyone else trying to do what you’re trying to do. The key here is to convince the\ninvestor that you have a high enough moat to make your business defensible against competitors.\nVision (1 slide)\nShow how you become a $10B company. This is a thought exercise we used to make all of the companies in our Series A\nprogram do to expand their ambition as much as possible. Here’s where you can dream and talk about all of the\nhypotheticals you’ve judiciously kept from the first part of your deck. You’ve spent the past 10 or so slides building\nyour credibility by demonstrating the incredible business you’ve already created. Now when you talk about the future,\ninvestors are more likely to believe you.\nTeam (1 slide)\nIf your team is one of your comparative advantages, then this should be your second or third slide. A team is a\ncomparative advantage if:\nYou have had a successful prior exit (e.g. started and sold a previous company for >$100M).\nYou are one of the few people in the world uniquely equipped to start this company. This is typically true for\nbiotech or hardtech companies where domain expertise is critical. (e.g. PhD in cellular immunology, former senior\nexecutive at Amgen, ex-professor of electrical engineering)\nOtherwise, this slide has 2 goals:\nTo show who the founders are and why they’re the right people to start and grow this company\nTo show how great of a team you’ve recruited, and demonstrate that you’re able to hire the skill sets you need to\nexecute on your vision\nAs before, try to quantify the quality of your team by showing impressive logos, educational degrees, or years of\nexperience. If there are some particularly awesome accomplishments (e.g. I built out unicorn X’s growth team), call it\nout. Remove anything else - yes, this means leaving off the headshots for every employee in your 12 person team.\nIf you’ve been lean (e.g. accomplished everything with only a team of 4) or capital efficient (e.g spent $1m to get to\n$1.2m ARR), this is a good place to highlight it. You can also optionally add a slide with your advisors (if they’re\nimpressive and especially if your company requires domain expertise) and existing investors. Just beware of signaling\nrisk - if you include a Series A fund on the list of existing investors, you’ll be asked whether or not they’re leading\nyour round. If the answer is yes, then why are you giving the pitch? If the answer is no or that you’re not sure, that\ncould be a negative signal. In general, best to leave those logos off.\nUse of Funds (1 slide)\nThe ask is the climax of your whole deck. It’s what everything else has been building towards, so be sure to include it\n(weirdly, I’ve seen many decks without one). It should cover how much you are raising, what you will use it for (on a\nhigh level), and where that will get you in 18-24 months (the typical time horizon for raising your next round) in terms\nof your traction.\nAppendix (as many slides as necessary)\nThe appendix should include ammunition for the subsequent Q&A/conversation that follows the pitch. If you’ve done the\nstarting exercise outlined above, you should have a list of questions that investors might ask. Where having a visual\naid would help, create a slide to answer each of the questions on your list. Other good things to include in your\nappendix are financial projections and a more detailed use of funds. This section will expand significantly once you\nstart pitching, as you develop more content to answer investor questions that arise.\nA note on design\nOptimize for clarity and understanding, not beauty. Deck design should be focused on aiding comprehension over being\naesthetically pleasing. In our experience, this usually means keeping it as simple and bare-bones as possible. Avoid\nanything that might distract from your main point. Two of the most common culprits here are fancy, complicated diagrams\nthat are hard to understand or colorful images that look nice but don’t help illustrate your point.\nPitch Practice\nOnce you have your deck, it’s time to practice. Reach out to angels or other founders that have raised their Series A to\nset up practice pitches. A good format is to schedule an hour with a 20 minute pitch, a 20 minute conversation, and 20\nminutes of feedback. Here’s how we’d suggest running it:\nDuring the pitch section, time yourself. Is your pitch 20 minutes or less? Pay attention to how you felt during\npitching - did you feel confident? Convinced of what you were saying?\nDuring the conversation section, note what kind of conversation you’re having, and whether it was the kind of\nconversation you wanted to set up with your pitch. What are things you wanted your audience to ask about that they\ndidn’t? What are pieces they asked about that you hadn’t thought about and need to better prepare for?\nDuring the feedback section, ask your audience (these are questions we suggest YC founders ask during Demo Day pitch\npractice):\nWere you confused? If so, when?\nWere you bored? If so, when?\nDid my deck help or hurt?\nWhat are a couple hard questions I need great answers to?\nAnother good way to test individual slides is to flash the slide to a friend who’s never seen it before, and ask them to\ntell you what point the slide is making. If it isn’t immediately understandable, you have some work to do.\nPresenting Over Video\nMost initial pitches now happen over video (though some may progress to socially distanced hangouts, based on investors’\nindividual preferences). This changes the dynamics of your pitch. Here are some important things to do when pitching\nover a video call:\nTurn on your video.\nRevamp your video and audio set up.\nMake sure you’re looking into the camera, not to another screen set up on the side.\nMake sure your face is well lit (one founder found the ring lights that TikTokers use to be a cheap and easy way\nto upgrade your lighting), at an attractive angle (please, not up your nostrils), and that you have a\nnon-distracting background (use Zoom backgrounds if necessary).\nMake sure your audio is working well, and that you have a quiet room to take the call in.\nOne person should pitch. This is almost always better, but it is especially true for pitches over video call.\nSwitching speakers is usually confusing and hard to coordinate, especially if the two founders are in different\nplaces. However, it’s often useful for another founder to come to answer questions and take notes.\nRecord and watch yourself on video to see how you’re coming across. You’re going to have to overcompensate in energy\nand verve to make up for the fact that you’re a tiny box in a corner of the screen.\nHave a rough outline of a script: we suggest writing out at least a bullet-pointed script (if you’ve done the\nstarting exercise, you already have an outline of one). This script helps make sure you hit all the important points\nin the right order. Plus, the benefit of pitching over a video call is that you can have it in front of you during\nthe pitch without the investor knowing. If you know that you tend to be long-winded, writing out a word-for-word\nscript can help you figure out how to convey your points concisely. However, avoid just reading off of it -- you\nwant your pitch to come across as natural and conversational.\n[If needed] Hire a pitch or speaking coach, especially if you know you’re not a great presenter.\nRefining Your Deck\nWe suggest setting aside 1-2 hours every day of your fundraise to go over how each meeting went and use that to improve\nyour deck and pitch. Here’s a set of questions to ask yourself after each pitch:\nWhat did investors seem to get most excited or energized by? Usually, this is indicated by where they asked the most\nquestions or were the most attentive. Would it help to emphasize this in future pitches?\nWhat parts did they seem to zone out in? This could be because you weren’t explaining it well, or they didn’t buy\nwhat you were saying. Is there anything you could do to make this section clearer or more compelling?\nWhat objections were raised, and did you have a well thought through, convincing answer to them? Look at your\nvertebrae - what pieces of it seemed to be the weakest or least compelling to the investor? Is there data you can\npull, slides you can create, examples you can give, or people you can talk to that will help you better respond to\nthese concerns?\n​"
    }
  },
  {
    "name_blog": "On starting and scaling aerospace company Boom",
    "description_blog": "Blake Scholl is founder and CEO of Boom Technology (YC W16). He discusses deciding to start a hard tech company, innovation in aviation, applying to YC, advice for hard tech companies and more.",
    "authors": [
      "Blake Scholl"
    ],
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "https://www.ycombinator.com/library/5Q-on-starting-and-scaling-aerospace-company-boom",
    "content": {
      "table_of_contents": [],
      "whole_content": "Blake Scholl\nis founder and CEO of\nBoom Technology\n(YC\nW16).\nDiscussed:\nDeciding to Start a Supersonic Airplane Company; Innovation in Aviation; Blake's Career Before Boom;\nDeciding Whether or Not to Do YC; Being a Hard Tech Company in YC; Meeting with Richard Branson; Demo Day; Advice for\nOther Hard Tech Companies.\nCraig:\nLet's start with the most simple question. What does Boom do?\nBlake:\nBoom is building supersonic passenger airplanes that lots of people can afford to\nfly. Fifty years after the design of the Concorde, we finally have the technology to make high-speed travel economical\nfor airlines and affordable for passengers. We're gonna make the planet more accessible.\nCraig:\nAnd where did the idea come from?\nBlake:\nWell, the idea of supersonic travel isn't new, obviously. I've been a pilot since I\nwas in college though I never got to fly on Concorde. It's really a unique story in technology that we've had a\ncapability and then we've actually gone backwards. Our phones are better, our computers are better, we're about to have\ncars that drive themselves and genetically-engineered medicine, and yet we're still flying at 1960 speeds. We had a\nsupersonic airplane but we never took it mainstream. I'm unaware of any other story in technology that's like this.\nIf you look back at the history of entrepreneurship and innovation in aviation, all of the big breakthroughs have come\nfrom founder-led companies. The first airplane was created by bicycle entrepreneurs, but also the first practical\nairliner, the DC-3, and the first jetliner, the De Havilland Comet, were all created by companies that were run by their\nfounders. The last new commercial aircraft company was founded 1921. The last founder retired from the industry in 1958,\nwhich, coincidentally or not, was also the year we had the first jetliner.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nSince then the Boeings and Airbuses of the world have been... optimizing. They've been taking the same basic designs and\nmaking them more efficient and safer, and in doing so they've completely swapped out the technology stack. They've made\nthe machinery more efficient, but they haven't improved human capability. I believe very strongly that if we want more\nhuman capability, we need entrepreneurs, we need founders, and we need new companies.\nCraig:\nWhy do you believe the founders make the difference?\nBlake:\nFounders have vision. Founders start things to make the world a better place.\nFounders take risks. They make bold bets. By contrast, the CEO of Boeing thinks they overshot on the 787 and has\npublicly said that their policy is \"no more moonshots.\" And this is from the company that was literally in the moonshot\nbusiness!\nCraig:\nWow. So you were a pilot before YC but that wasn’t your job, right?\nBlake:\nYeah. I've loved airplanes since I was a kid, but it never really occurred to me to\nbe in aviation as a career. I went to school for computer science and had a first career doing ecommerce and mobile. If\nyou ask my closest friends, they'll tell you that I've been talking about maybe doing supersonics for 10 years. My first\nstartup was acquired by Groupon, and truth be told, there's nothing like working on Internet coupons to make you yearn\nto work on something you really love, that you feel could make a difference in the world.\nSo after I left Groupon I started to make a list of all the startup ideas in descending order of how awesome it would be\nif they worked and completely leaving aside everything else. And I figured, \"Well, I'll cross things off the list and\nI'll end up working on idea number five. It'll be, like, a rental car company or something.\" And, as luck had it, the\nmore I got into supersonics, the more I learned that it's not crazy, and actually the time is now.\nCraig:\nSo what made you decide to apply to YC?\nBlake:\nAt first I was really skeptical about YC. Isn’t YC for mobile social apps? How\ncould they help a supersonic airplane startup? But Sam put me in touch with other hard tech founders who had done YC.\nThey raved about the experience and how YC can help normalize and catalyze ideas that are off the beaten path. I\nconcluded that YC might not help with the airplane building piece of our business, but they’d help with a lot of other\npieces, like getting and demonstrating traction and raising capital. In the early days, capital was the biggest risk at\nBoom—there was a very real risk that we’d never get the money to build anything, and that the company would come and go\nwithout ever really starting.\nYC turned out to be one of the best things I've ever done. Boom would probably not be here today if it weren't for YC,\nin so many ways. In YC, they basically gave us two big pieces of advice and it was exactly what we needed. Number\none–get your ass out of stealth mode, it's not helping you. And number two–go sell some airplanes.\nAnd I was like, \"Okay, I don't know how 10 guys in a basement who say they're building supersonic jets are going to sell\nanything to airlines, but I could try.\" And it turns out you can.\nCraig:\nYour first deal was with Virgin, right?\nBlake:\nYeah, the advice that we got from our group partners during YC was, \"Show up on\ndemo day with sales or your goose is pretty cooked.\" So I looked at my sales pipeline and it was like United, Delta,\nLufthansa, and Air China. At that point, we had like eight or nine weeks to demo day and I’m like, \"There's no way I'm\nclosing Lufthansa by demo day. Just not going to happen. I'll be lucky if I close Lufthansa in nine years, let alone\nnine weeks.\" So, I'm like, \"Okay, well it's either gonna be a startup airline or it's gonna be Virgin.\"\nSo we decided to focus all of our sales efforts on startups and Virgin. There have been some startup airlines that have\ndone all business class. And so we went after all the guys who are either currently operating, are starting, or have\nstarted in the past all-business-class airlines. And we got one of them to do an LOI.\nUp to literally 24 hours before our slot on stage at demo day two, all we had was an LOI from a startup. If we had been\non demo day one, the history of the company would be different, but because we were on demo day two we got an email from\nVirgin on the night of demo day one that said, \"You can announce the following… We'll take the first 10 airplanes, and\nwe've got options on them. And through Virgin Galactic, we're gonna help you build it.\"\nI fell off my chair and almost screamed. I had to read the thing three times before I would tell the team because I\ndidn't believe it. And so, we went from what could have been the biggest laughingstock at demo day, to the team who\nshowed up with five billion in LOIs, a record that probably won’t be broken soon.\nCraig:\nThat’s amazing. Do you have any tips for achieving that sale that quickly?\nBlake:\nThe biggest sales advice we got during YC was, \"Be persistent. Be more persistent\nthan you think you should be. Be so persistent that you're sure you're being annoying. And you'll feel like you must be\nannoying, but when you have that feeling that means you're probably doing it right.\" And that worked.\nThe other thing that happened was, we went after Richard Branson directly. And we made sure we had two different avenues\nto him so that one of them couldn't block us.\nWe had friends in Virgin Galactic that were supporting us and we had astronaut Mark Kelly, who hangs out with Richard,\non our advisory board. And Mark was, like, working Richard for us. What ended up happening was, in February, about six\nweeks before demo day, Virgin Galactic was rolling out their new spaceship. We got an email in to Richard that said,\n\"Hey, the Boom guys are gonna be in Mojave for the spaceship rollout, you should meet with them while they're there.\"\nAnd then we reached out to the Virgin Galactic guys and said, \"Hey, we're gonna be in town to see Richard, can we come\nto your rollout?\"\nCraig:\n[Laugher]\nBlake:\nSo we got the Richard meeting and we basically crashed the rollout. I had to fight\nmy way past the 18-year-olds that were, like, blocking and checking the invite list but we met with Richard. We had,\nlike, 15 minutes over breakfast with him and his mom. And we showed him what we were doing, and we said, \"Look, we're\nnot asking for your money, we're asking, 'When this flies, do you want a Virgin logo on it?'\" And I think that was key.\nYou gotta ask for the right thing. When you have a deal that's probably gonna be hard to close–ask for what's really\ngonna help you. We told Richard, \"Look, if you're a customer we'll get the money elsewhere. We don't need the money from\nyou.\" And that was crucial.\nThe other thing that was crucial was having a deadline. For us that was demo day. And if you know anything about Virgin,\nyou know they really care about their brand, they really care about publicity, and we told them, \"We are launching the\ncompany on demo day, and either you can be part of it or not.\" And it would not have happened if we hadn't had that\nbelievable deadline. And they had all heard of Y Combinator, and they took demo day actually a lot more seriously than I\nthought they would, and they really wanted to be part of it.\nBlake:\nIf I had to boil all that down, I would say, be fricking persistent, have a\ndeadline, and if you're in a hurry, make the deal as sweet as you possibly can for the other side.\nCraig:\nGreat. And, just to jump back a little bit, I love that comment you made about\nselling internet coupons making you want to start a startup. What advice would you give to someone at a job that's\npretty cush but they feel like they should go do something more interesting?\nBlake:\nI believe you have to find something in the world that you desperately want to\nexist. Startups are hard - all startups are hard - and I think what makes the difference many times is are you working\non something that is so meaningful to you, that it is worth it for you to go through hell to make it happen? Because all\nstartups are going to go through hell. I'm unaware of a single one that hasn't, and the question is, \"Is it worth it?\"\nPick something that's going to be worth it, to you, personally. Stack the deck in your favor. Stack the deck such that\nyou will be motivated and when you look at what you can possibly create versus staying at Google or Facebook or Amazon,\nit should pale in comparison.\nIf you haven't found that, don't start a startup just to start a startup. I did that my first time and it was a horrible\nidea. Start a startup when you're like, \"I must make this happen.\" And something that I've come to believe personally is\nthat the bigger the idea actually, the easier it can be because it motivates you. It motivates the people around you.\nYou can attract better people to come and work with you on it. The team we have around us at Boom is phenomenal, and we\nwouldn't have it if we were building an app or a small airplane, even. We're able to get these people because everyone\nlooks at what we're building, and they're like, \"I can tell my grandkids about this! It’s either we're going to fail or\nwe're going to change the world. There's no in between.\"\nI think there are a lot of ideas out there of that scale that people pass on it because they think it's too hard. Or\nsometimes the most important problems are kind of hiding in plain sight, and we're so used to them we don't see them.\nI'd love to see more founders just go for broke on that stuff. Maybe that's the wrong metaphor, but, you know, find big\nideas and go after big ideas.\nCraig:\nYeah. I think we could fund bigger bets–maybe even slightly crazy people. Even if\none in a thousand of those companies worked out it’d have such a huge impact.\nBlake:\nI mean, I wasn't dinging YC for that. YC's doing that better than, I think, anybody\nelse already. But I agree. It’s also not just about what gets funded, it's about who we inspire, and what we inspire\nthem to do.\nCraig:\nDefinitely. So I’m interested in talking about your experience at YC. Do you have\nany advice for hardware companies in YC?\nBlake:\nI think the thing that makes a hardware company a little bit different at YC is you\nhave to figure out what you can build that you're going to show at demo day. And for a software company, it's probably\nrelatively easy to figure out an MVP, for a hardware company you've got things that have a longer lead time. It might\nnot be possible to have your product done or in the market or even have a working demo. You should figure out really\nearly on something that both is and looks like actual, substantive progress towards the product.\nWhen we were brainstorming on this, most of the ideas we came up with first were, like, \"Well this is the most\nmeaningful technical progress, but no one's gonna be able to appreciate it because it's like, 'Oh, in our simulations we\nget a lift-drag ratio that's hitting a critical threshold' right? And, that's actually super meaningful, but no one's\ngonna understand it or believe it or get excited about it.” Then there was a bunch of stuff that was in the category of\nkinda just for show. Like, we talked about building a flight simulator.\nWe ended up working on the aerodynamics and then we built a model of the airplane and made it look great. And we can\ntalk about, like, \"Look at this. You can see these innovations in the model. That's why it works. That's why this is\npossible.\" And, you know, that was concrete for people. We basically did the high-level design of the jet engine and\nmade a 3D printed model of it and then we actually physically brought to demo day the engine. One of the three engines\nthat will power the first airplane. And people, of course, were like, \"OMG, jet engine.\"\nCraig:\nYeah, it's a nerd magnet.\nBlake:\nExactly. And we found and bought the one that we were gonna fly. So, it wasn't\nbullshit. So, I think that's my biggest thing–find the thing that you're gonna get done in three months that is progress\nand looks like progress.\nCraig:\nThat is an excellent point. Okay, last question. What are your favorite books,\nmovies, podcasts... any type of media, really.\nBlake:\nI mean, far and away my favorite book is\nAtlas\nShrugged\n, and it's probably not an accident that all the\nheroes in Atlas Shrugged are also pilots. Not an accident for me, personally, anyway.\nLet's see, what else... I love things that give you insight into the basics of a field, even if you're not in it. I like\nlearning about biology on the side. There's a defunct podcast called\nFutures in Biotech\nthat, if you are not a biologist but you think biotech is cool, look up Futures in Biotech. Listen to all the old\nepisodes, they have amazing guests, and you'll feel like you know enough about biotech to kind of appreciate it. What\nelse? I'm trying to think of what's not a standard recommendation.\nCraig:\nIt doesn't have to be non-standard.\nBlake:\nIn that case,\nThe Hard Thing About Hard\nThings\nis good.\nThe Innovator's\nDilemma\n, everyone talks about\nit, I wonder how many people actually read it. You should actually read it. You should know what disruptive innovation\nactually means."
    }
  },
  {
    "name_blog": "On starting a company from a hackathon project",
    "description_blog": "Athelas (YC S16) makes low cost devices that enable rapid blood diagnostics. Here's the story of how Athelas began as a small hardware prototype at a YC Hackathon and grew into a real shippable product.",
    "authors": [
      "Tanay Tandon"
    ],
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "https://www.ycombinator.com/library/4x-on-starting-a-company-from-a-hackathon-project",
    "content": {
      "table_of_contents": [],
      "whole_content": "A couple years ago,\nAthelas\n(YC S16) started as a proof-of-concept project built overnight at\nYC Hacks 2014\n. This month we started shipping our first devices\nto patients and hospitals around the country. We learned a lot in the process and wanted to share a few thoughts here.\nThe device is a low-cost imager that enables rapid blood diagnostics through computer vision instead of traditional\nlab-based techniques. Going from a hacked together hardware prototype to shippable product (especially in the medical\nfield) was a progression in dimensionality at every stage, and it’s quite interesting now to look back at day 1.\nThe first version that began at the hackathon used a rubber piece and spherical magnifier attached to a smartphone\ncamera. A blood sample would be held (by a toilet paper roll) underneath, the camera would take a couple images, then\nproduce the computer vision rendered malaria cell counts. In design this is quite similar to a\nvan Leeuwenhoek\nmicroscope\n(considered one of the earliest microscopes ever\nbuilt) which was used to see microorganisms for the first time in human history. There were a few examples of this\nsetup, and I spent the first couple hours of the hackathon getting it to work consistently on my phone.\nAbove: A few excerpts from a writeup I did on Athelas a few months after the hackathon.\nThe real focus of the hack was writing segmentation and template matching approaches, combined with a fast random forest\nmodel implementation that learned to classify extracted versions of the Red Blood Cells (RBCs). Cell boundaries would be\nrecognized, then fed into the classier to identify whether a parasitical cell (like Malaria or Trypanosoma) was present.\nThis made for a fun demo, where a sample slide would have malaria tagged in it, but a normal person’s blood would not.\nWhile functioning and a neat trick, someone needed to be physically holding the camera in place, the slide had to be\nmoved around, with the lighting often being hard to fix. At the end of the day it was a nice experimental toy you might\nsee someone post as a video on Facebook.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nBut we were sure it could be more. The core idea was - if we made it broad-ranging and easy enough for anyone to use -\nwhy not have a simple blood screen in every doctor’s office, nursing facility, or even home? After heading back to\nschool, this idea consumed us and we decided to continue it - but as a product - not just a demo. That meant creating an\nautomated blood processing mechanism to generate a stained peripheral smear, a more robust computer vision approach for\ndifferent cell types, automated mechanisms to image the whole sample without holding the slide in place, and most\nimportantly - clinical validation.\nDeepika (my cofounder) worked to perfect the fast staining mechanism and come up with a way to coat them on plastic\nstrips that could be ready to use out of the box. She worked mostly in-lab, synthesizing dozens of versions of the stain\ncompound, and observing empirically the quality of cell rendering. The other side of this problem was ensuring that the\nstrip could easily be compressed to create a ‘monolayer’, or single layer of cells that enables statistically\nrepresentative imaging.\nAbove: An excerpt from “The marching velocity of the capillary meniscus in a microchannel”, a sample of work we\nreferenced when attempting to model the flow in our channel to generate a monolayer. This capillary design was\neventually shelved for a future iteration.\nIn the meantime, I focused on building a higher resolution optical set up in a still cheap, but stand-alone device. As\nsuch, we could focus on monitoring more prevalent cell-types like Leukocytes and Platelets (beyond just malaria). The\nheart of it was an actuation system, coupled with gaussian edge autofocusing algorithms to ensure that our cells were\nbeing captured in a consistent fashion. Here’s a prototype midway through:\nFurthermore, we started assembling a training set of data from public CDC images, blood smears collected from\nresearchers at Stanford and UCSF - often hand labeled by me or a pathologist. From there, we were able to employ\ntraditional computer vision and deep learning approaches to recognize and classify cell types based on previous,\nhuman-guided examples.\nCell body extraction post hough transform, first pass, pre-segmentation and classification\nThe first set of progress was slow. College workload at Stanford + rising costs of our hardware iterations often made it\ndifficult for us to operate with the iteration speeds a normal product needs. Finals often meant days going by without\nany tangible progress whatsoever. But we put together a tangible, usable v1, that could grab images of a stained blood\nsample, and process.\nSee the demo here\n.\nThen this summer, things came full circle to that orange building in Mountain View, as we joined the summer batch at Y\nCombinator. Our time (now full time on the project) was focused on our clinical validation locally and at the FEMAP\nfamily hospital, to run a first set of usages within a hospital system. The goal was proving the system on just one\naspect first: White Blood Cell counts. By grabbing images of samples on our strip, and then running the algorithms we\nshowed how our counts were correlating with high accuracy to the gold standard Beckman Counter across 350 patients,\ncombined with\na set of bench precision studies\n.\nAn interesting aspect was showing how our drop to drop precision\n(something of much recent\ninterest)\nwas clinically acceptable versus other systems operating on drops.\nCoulter counters (traditional cell counting systems) work by flowing particles through a jeweled aperture a few microns\nin diameter, and recording impedance to register particle size - and as a result, particle classification. At the crux\nof it,\nhigher impedance = larger particle size\n.\nCoulter Counting Principle diagram source:\ncyto.purdue.edu\nAthelas’s computer vision approach, however, focuses wholly on the image and nucleation patterns. As such, the\nparticulate matter or lymph that can often confuse a Coulter system (especially in diluted quantities), is simply\nclassified by the vision as a non-leukocyte cellular body (not a white blood cell, but some other, un-classified\nartifact in the blood sample).\nThe trial showed high inter-rater agreement (100% 5-class inter rater agreement) between the two systems, we submitted\nour data off to the FDA for Class 2 510k approval, and are now distributing our Class 1 version of the system for rapid\nWhite Blood Cell monitoring. See more at\nathelas.com\n.\nAs we integrate new blood tests into the system over the coming months (concussion monitoring, inflammation tracking,\nurinary tract infection, platelets, more cell counts), our key growing challenge will be working with the existing\nclinical and medical community to help guide adoption and usage. These coming months will focus on getting our $250\ndevices into as many point-of-care locations, homes, and clinical settings as possible.\nWe’re always looking for awesome people to meet and hackers to join our growing team, so shoot me an email if you want\nto chat about anything: tanay [at]\ngetathelas.com"
    }
  },
  {
    "name_blog": "Navigating success for your startup",
    "description_blog": "Different people accept different outcomes for their startup; it's all a matter of what you want to do. If you want to shoot for the billion dollar outcome, then perhaps fundraising from VCs is the right move. But if you don't or what you have cannot get there, then sometimes it's much better for you to not sell any of your equity.",
    "authors": [
      "Sam Altman"
    ],
    "related_categories": [
      "Fundraising",
      "Valuations"
    ],
    "page_url": "https://www.ycombinator.com/library/4s-navigating-success-for-your-startup",
    "content": {
      "table_of_contents": [],
      "whole_content": "When you start a startup, you get pushed off the side of a cliff with a bag of aerospace\nparts.\n1\nYou hope they are the parts for a spaceship, and they look\nlike they might be, but it’s impossible to tell when they’re all in a bag.\nSo you start figuring out how the parts fit together as you fall. Every once in a while, it turns out you do have the\nparts for a spaceship—the market is huge, you have a great product, there’s a natural monopoly, and you have a credible\npath to be the winner. In that case, there’s plenty of advice available for you.\nMuch of the time, you don’t have the parts to make anything at all, and should just try to hit the ground as gently as\npossible.\nBut a reasonable amount of the time, it turns out you have the parts for an airplane. An airplane is still a cool and\nvaluable thing to build, but if you try to fly an airplane to the moon you are going to be in a world of hurt. This is\ntrue regardless of how well you build and fly that airplane.\nIn this case, you can figure out how to go get a new bag of parts (a new market, a new product, a very different\nstrategy, etc.), and keep trying to build a spaceship, or just decide to have a really good airplane. Some people are\nwilling to risk everything they’ve built for the chance to go the moon, and again, there’s plenty of advice out there\nfor those people. But many rational people are happy with the airplane they’ve built, and there’s not much advice about\nwhat to do in this situation.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nLet’s define a “really good airplane” as a company that has profitability within reach and is on track to be worth $100\nmillion with several more years of hard work. This is nothing to be ashamed of—quite the opposite, obviously. This is a\ntriumph by almost any metric. This is what happens to most very lucky, very smart, very determined people who decide to\nstart a startup and have everything go their way except happening upon a perfect market.\nThe most important thing to understand is that this is where founders and investors often get misaligned. Many startup\ninvestors are looking for spaceships–airplanes don’t matter much to them, though they matter quite a bit to the\nfounders. Your existing investors will usually be willing to take almost any amount of risk to see if you can somehow\nturn an airplane into a spaceship (but often there’s not much more advice offered than “point your plane at the moon,\nburn more fuel, and let’s see what happens”).\nBe frank and realistic with your existing investors; you will eventually persuade them that a small multiple is better\nthan a loss. The best investors understand how venture investing works and don’t fight over outcomes like this (in fact,\nmany of them will treat you extra-generously in the hopes of funding your next company). But as a general rule, the\nlonger you delude your investors here, the worse shape you’ll be in.\nThe second most important thing to understand is that raising too much money or raising money at too high a valuation\ncan severely limit your optionality. Very often I’ve seen cases where founders know in their hearts they have an\nairplane but are able to convince good investors it might still be a spaceship. This really causes a lot of heartache,\nand often precludes your opportunity for a good acquisition later.\nThe answer to this is simple in theory but the temptation is difficult to resist in practice. Don’t raise a lot of money\nat a high price when you think the company is probably not going to increase another 10x in value and you’d be pretty\nhappy selling the company soon. It usually means that you have to change how you run the company, and it may mean that\nyou need to find a path to profitability with the money you currently have. But it’s far less painful to deal with this\nnow rather than putting the company in a position that will preclude the option you think is best.\nFinally, you may want to begin to think about how to position the company for an eventual acquisition. Companies get\nbought, not sold—it’s very difficult to force an acquisition to happen, and nearly impossible if you haven’t built\nsomething legitimately valuable (somehow, this fact surprises founders who decide ‘we’d like to get acquired’ almost\nevery time…). But beginning to develop relationships with potential acquirers is a good idea—it usually takes a long\ntime, and personal relationships usually help.\nAnd remember that this is still an outcome to be very proud of. And if you want, you can always start another company.\nSilicon Valley is filled with people who had one or several mid-success companies before eventually hitting it out of\nthe park.\nNotes\n1.\nThanks to David Weiden for this metaphor.\n↩"
    }
  },
  {
    "name_blog": "Later stage advice for startups",
    "description_blog": "There are many common issues founders face in the later stages of their startups. Here's a condensed list of what they are and how to get ahead of them sooner than later.",
    "authors": [
      "Sam Altman"
    ],
    "related_categories": [
      "Growth Stage"
    ],
    "page_url": "https://www.ycombinator.com/library/4q-later-stage-advice-for-startups",
    "content": {
      "table_of_contents": [],
      "whole_content": "I want to discuss a few topics that later stage startups face when they’re 12-24 months in and doing well. I've adapted\na lot of this from the final lecture I gave in\nHow To Start a Startup\n.\nManagement\nBefore product/market fit, your number one job is to build a great product. But as your company grows past ~25\nemployees, your main job shifts from building a great product to building a great company.\nThere is very little management in the beginning, and that actually works well. When there are fewer than ~20\nemployees, most companies have everyone report to the founder. That's optimal in the early stage.\nBut what works well at 20 employees can be disastrous at 40. You want to be aware that you will need structure in place\nbefore it’s painfully necessary.\nYou shouldn’t make the structure complicated. To start, all you need is for every employee to know who their manager is\nand for everyone to have exactly one manager. Every manager should know who their direct reports are, and you should try\nto cluster people into teams that make sense.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nClarity and simplicity are important–I wouldn't try to innovate on management structure. Don't make it complicated or\nconvoluted. It’s also really important to have a clear mission and clear goals– the better job you do with these, the\nless management will feel overbearing.\nBeyond structure, there are a few other management cases where founders often fail:\nSenior People:\nIn the early days, hiring senior people is usually a mistake. As the company starts to scale though,\nit’s actually valuable to add senior people/executives to the team that have built companies before. Don't be afraid\nto do this.\nNot Delegating:\nAs companies start to scale, many founders take on too much personally instead of assigning work to\nother people. This can work for a while, but as your company keeps growing, you become stretched thin and things get\ndone poorly. It's really important to delegate work and hire needed people as you approach your breaking points.\nDelegating Poorly:\nMany founders try to delegate by having employees do all the grunt work, but then still try to make\nall the decisions. This doesn't work well–both for scalability, and for making your employees most effective. Instead,\nempower employees to make their own decisions. Let them know how you think about a problem, but let them own the\ndecision process. You should feel comfortable trusting them if you've hired the right people.\nIf done right, it’s safe to delegate most things; especially delegate the stuff you don’t want to do. Try not to\ndelegate the one thing you really want to remain involved with though–if it’s something you enjoy or think will benefit\na lot from having you involved, you’ll be more satisfied.\nPersonal Organization:\nIt's really important to develop a way to keep track of what you need to do and what you need\nto follow up on with others. It's not critical to figure this out when you're just starting out and focusing on product,\nbut it's crucial as you become a manager.\nCommunicating:\nAfter a certain point you can't have one-on-one conversations with everyone. To handle this, learn to\ncommunicate in clear, succinct writing, and share it with everyone. It's one of the highest leverage things you can do,\nand it scales to thousands of people. ‘All hands’ meetings with all employees at least once a month can be a really\neffective way to communicate too, and it’s still a really good idea to have one-on-ones with your direct reports.\nHR\nMost founders ignore HR in the first phase of a startup, but it’s a huge mistake to continue ignoring it as you\ntransition to a later stage. Good HR will help you scale much faster.\nGood HR means three things: a clear management structure, a way for people to talk about workplace issues and concerns,\nand pathways for people to evolve in their careers.\nAn important component of creating pathways is performance feedback. It can be light, but it should happen frequently.\nIt helps people a lot when people can regularly hear how they are doing--good or bad.\nIt should also be clear how performance ties to compensation. People talk, and they will eventually find out co-workers'\ncompensation levels. If it's all over the place, it can be a complete disaster. Compensation bands let people know how\nmuch they should fairly be making–for example, a mid-level engineer will know she falls in a certain range, and a senior\nengineer in another. They keep things fair and help avoid a lot of crazy negotiation.\nEquity is also a very important component of compensation. YC company data suggests that most successful companies give\nout a lot of equity.\nI typically tell founders that they should plan to give away 3-5% of their company each year for the ten years from\nfounding. It's a lot of stock but you should be doing this to keep your people motivated and aligned.\nIt's also a really good idea to do this with\nrefresher\ngrants\nfor existing employees approaching their\nvesting cliffs, and you should get a plan in place for this early. You never want an employee in a place where they\nstart thinking about leaving because they’ve vested three out of their four years.Always stay in front of people's'\nvesting schedules.\nIn preparation for the longer term, make sure to monitor your team for burnout. Building a company really is a marathon\nand you cannot sustain people working 100 hour weeks in perpetuity. You want them to go on vacation, have new\nchallenges, and do new things.\nIf things are going well, the 12-24 month mark is also a good time to put in place a hiring process. And once you have\nproduct/market fit (but not sooner), you should hire a full-time recruiter–getting the best people is arguably the most\nimportant thing to do, and you want to be as effective at this as possible.\nA couple other HR tips:\nBuild a Diverse Team:\nEven before the 12-24 month mark, it's worth thinking about how to build a team of diverse\nperspectives. You want unity of vision, but diversity of backgrounds is good. Myopic culture is typically less\neffective.\nAnnounce Offers:\nUp to a few hundred employees, try announcing every potential job offer on an internal mailing list.\nIf you do it, very often someone in the company will know something good or bad about the prospective employee.\nStructure Onboarding:\nHave a program in place to ramp up new employees. That way when someone starts, you know what\ntheir first week looks like and how they’ll be trained.\nBuild Paths for Early Employees:\nAs a company grows, you want to be very proactive in thinking what the path may be\nfor the original 10 to 15 employees. They may not be appropriate for newly needed executive roles, but you want them to\nbe happy–they're probably loved by their peers, and very productive. So be proactive and talk to them about their path\nvery directly. Sit down with them and ask how they want their careers inside the company to progress.\nCompany Productivity\nBuilding a company that is able to innovate repeatedly is the hardest thing in business. Most companies do one great\nthing then stop innovating. Great founders work very hard to overcome this.\nAlignment is key–companies become unproductive because people are either not on the same page, or they don't understand\nthe priorities. If you can keep the entire team aligned in the same direction, you have won over half the battle.\nStart getting there with a very clear mission, roadmap, and goals. Everyone in the company should know what the roadmap\nis for the next 3-6 months or even a year.\nThere’s a classic test I love to give companies struggling with scaling– I'll ask the founders a simple question: “If I\nasked 10 employees what the top three goals are for the company, would they say the same thing?\" 100 percent of the time\nthe founders say yes. I'll then go and do it, and 100 percent of the time no two employees say the same thing.\nFounders are always surprised by this because they think they communicate their ideas effectively. In reality, they’re\nnot communicating their ideas as clearly or as frequently as they should. It's critical to make a habit of reiterating\nyour roadmap and goals so people can understand and internalize them.\nSimilarly, transparent communication is really important. It’s critical for founders to have a management meeting with\ndirect reports every week. it’s a good idea to have all hands meetings with the entire company at least once a month.\nUse these to go through the roadmap of the entire company, the immediate three month trajectory, and how the immediate\ntrajectory plays into the longer term goals.\nOther longer term productivity tips\nDo Offsites:\nTake your best people outside the normal workspace for a weekend where everyone has time to just talk and\nthink through the bigger picture. People have interesting ideas when they’re out of the day-to-day.\nGet Legal Docs in Order:\nIf you assign someone to go through and collect every agreement that the company has ever\nsigned, you will save a lot of future headaches.\nStart Doing Financial Planning and Analysis (FP&A):\nIf you have someone build a really great model of the business,\nyou can optimize and understand how things are working at a level that most people totally miss. Most people don't hire\nsomeone to work on this until they have a few hundred employees, but it’s worth doing sooner.\nHire a Fundraiser:\nA full-time fundraiser is another role I think is worth hiring much earlier than most recommend. If\nyou hire someone really great after your B round and their full-time job is to prepare for the C round, you’ll almost\ncertainly get better results than if you hire an investment banker later on. You'll also end up paying way less money\nand take a much smaller dilution.\nPay Attention to Unit Economics:\nSooner rather than later, you need to figure out how to make more money from each\nuser than you spend. Most great companies historically have had good unit economics soon after they began monetizing,\neven if the company as a whole lost money for a long period of time. It can be tempting to paper over a problem with the\nbusiness by spending more money instead of fixing the product or service, but this is a major trap.\nWatch Your Runway:\nEven if unit economics look great, you’ve got to make sure there’s money in the bank. Don’t ever\nget down to just a couple months of cash in the bank.\nFounder Psychology\nAs you keep working on your company, it will almost certainly get harder. The highs are higher but the lows keep getting\nlower.\nAs you become more successful, people start rooting against you. Journalists and people on the internet will find ways\nto pick apart what you're doing, and it sucks to read. Early on, you’ve got to figure out how to ignore the haters.\nAlso early on, it's good to start thinking about how long a journey your startup will be. Very few founders make an\nactual long term commitment to what they're building, and the ones that do have a huge advantage. Have a strategy that\nassumes you will work on your company for the next 10 years--it can be an extreme advantage that few founders leverage.\nAnd remember to take vacation yourself. We often see founders that go three or four years without ever taking a real\nvacation. That may work for a year or two, but you will burn out.\nFinally, don't lose focus. Focus is what made you successful in the first place. There are a lot of reasons people lose\nfocus--burnout is certainly one, and talking to potential acquirers is another very dangerous one. Don’t become\ndistracted.\nMarketing & PR\nWe tell companies to ignore marketing and PR for a long time. Press will not make your startup.\nBut, as you start to be successful, it becomes something that founders need to spend time on. Once your product is\nworking, switch from not caring about it to caring about it a little bit.\nNever outsource the key messaging of the company to a PR firm or your head of marketing. You should figure out what the\nmessage of the company is going to be yourself.\nI'd also recommend getting to know key journalists. No journalist wants to talk to a PR firm; they're much happier to\nhear from the founder. Pick three or four journalists that you develop really close relationships with that like and\nunderstand you, then contact them yourself; they'll actually pay attention and care about the company.\nDealmaking\n12-24 months in is also when business development can start to matter. This certainly assumes though that you've already\nbuilt a great product.\nIf you're getting into business development deals, make sure to develop personal connections with whomever you're trying\nto do big deals with. No one wants to feel like they're being used transactionally, so make sure to show you actually\ncare about the person you're dealing with.\nThat said, make sure you set up competitive situations. This is a basic principle of negotiation, and most founders\nlearn this from fundraising. You get good terms and deals done when you have a competitive situation and you stay\npersistent.\nThe final point I'll make is that you have to ask for what you want. If you want something in a deal, don’t be afraid to\nsay so. Most of the time you won't get laughed out of the room, and you might actually get it.\nIt’s worth saying again–the later-stage is a different beast than when you first start your company, and you need to be\naware of that. Pay close attention to when you cross that point, and put things in place accordingly.\nIn a nutshell, have clear, simply-structured management that people understand. Set up ways for people to advance their\ncareers and be rewarded. Make sure to focus on what most needs your attention, and get good at delegating what doesn’t.\nCommunicate clearly within the company, and set a roadmap so people know where to point their efforts.\nThere’s obviously a lot to it, but keeping these in-mind can help a lot. And again, don’t worry about these things when\nyou’re starting out–stay focused on making a great product."
    }
  },
  {
    "name_blog": "Before growing your startup",
    "description_blog": "Startups are defined by growth, but growth isn't step one in building a great company. If you focus on trying to grow before you make a product people love, you are unlikely to succeed.",
    "authors": [
      "Sam Altman"
    ],
    "related_categories": [
      "Growth",
      "Product",
      "MVP",
      "Product Market Fit",
      "Customers",
      "Retention"
    ],
    "page_url": "https://www.ycombinator.com/library/4p-before-growing-your-startup",
    "content": {
      "table_of_contents": [],
      "whole_content": "Startups are defined by growth\n, but growth isn't step one in building a great\ncompany. If you focus on trying to grow before you make a product people love, you are unlikely to succeed.\nWe’ve said this before, but it's worth repeating–many founders hurt their companies by focusing on growth too soon.\nI'm not saying don't grow at all–getting people to use your product, even in its earliest form, will help you better\nunderstand what your customers want. But focusing too heavily on growth before you've built something people love leads\nto the leaky bucket problem. You can get users to come in the door, but they don't stay, and likely won't return.\nIf you first make sure your product is loved, it will be much easier to grow. Users will be easier to retain, and\nthey’ll tell others about what you've made. Your users essentially become a free marketing and sales force for you.\nYour chances of building a giant company are much higher when you have a product that spreads by word of mouth.\nFacebook, for example, had a product people talked about obsessively from the start. Airbnb slogged for 1000 days before\ndiscovering how to make their product loved. Once they had that, it grew exponentially by word of mouth, and that still\ncontinues today.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThis is true for enterprise and hard tech companies, too– your sales process becomes much easier when word has spread\nthat what you're making is great.\nIf your product isn't loved, you might get early users, but growth will get hard later on. You'll have to rely on\ninorganic means like ads, marketing, or PR to maintain your growth, and this gets very hard to sustain. And the larger\nyou grow, the harder it becomes to course correct. Once your company is a big moving battleship, it becomes really hard\nto be nimble and quickly make the aggressive changes you need; your range of options becomes limited.\nSo, if you're already growing a company around a mediocre product, fix it now. Don't try to avoid the problem by raising\ncapital for growth– the problems will still be there, with higher expectations.\nAnd if you're just starting out, take the time to build a product your users love, no matter how long it takes. When\nthey actively recommend your product to friends, you're in the right place.\n1\nNotes\n1\nNet Promoter Score can be a good way to measure user love too.\n↩"
    }
  },
  {
    "name_blog": "Enterprise sales for hackers",
    "description_blog": "Many hackers-turned-founders understand that sales are an important and valuable skill, but shy away from doing it out of fear and uncertainty. But being a great enterprise salesperson requires the same skill set as being a great hacker — you just need to reframe how you think about sales.",
    "authors": [
      "Ryan Junee"
    ],
    "related_categories": [
      "Early Stage",
      "Growth",
      "Enterprise Sales"
    ],
    "page_url": "https://www.ycombinator.com/library/4m-enterprise-sales-for-hackers",
    "content": {
      "table_of_contents": [],
      "whole_content": "Many hackers-turned-founders understand that sales is an important and valuable skill, but shy away from doing it out of\nfear and uncertainty.\nWhat if I told you that being a great enterprise salesperson requires the same skill set as being a great hacker? You\njust need to reframe how you think about sales.\nBefore I get started, I want to point out that this article is focused on early stage companies — those who are still in\nthe \"wild west\" stage of figuring things out and do not yet have an established repeatable sales process and\norganization. That said, I assume you have found product-market fit, or are close to\nit.\n1\nHackers are experts at understanding complex systems and bending them to their\nwill.\n2\nLarge enterprise sales requires the same skill set, but\napplied to a different kind of system.\n3\nWhere a computer system is\na complex network of\nhardware and software\n, a large enterprise is a complex network of\npeople and\nprocesses\n— and it can be understood and influenced in the same way. The emergent behavior of a corporation is\nthe result of incentives and structured rules amongst its constituent people, much like the output of a computer system\nis the result of structured rules and data flows between pieces of code.\nEnterprise sales, then, involves understanding and influencing the components (people) of the system in order to produce\nthe desired behavior (buying your product.) Every system (company) is different, and so you need to develop a systematic\napproach to hacking (selling to) them.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThis is especially true in the early stages of a startup. A mature company has generally figured out how to hack most of\nthe possible systems in its target market and has created scripted processes to make it a rinse-and-repeat sales model.\nTo follow the analogy through, in this way you can consider the typical \"coin operated\" sales person at a mature company\nto be more akin to a\nscript kiddie\nthan a hacker.\nUsually the more complex the system, the more satisfaction the hacker feels when he or she pwns it. Great news:\nEnterprise sales systems are really complex, and hacking them can be much more difficult than hacking computer systems.\nThis is because the components don’t always operate according to structured, rational rules. They are humans with\nemotions, which means you also have to understand their motivations, hopes and fears. If that additional chaos isn’t\nenough, consider that the feedback cycle is much slower when hacking an enterprise vs. hacking a computer system. This\nmeans you need to be much more methodical in your approach -- brute force is generally not an option -- and you don’t\nhave as many chances to make mistakes.\nBelow I will offer some tips on hacking the enterprise. But first, it’s useful to point out some of the typical objects\n(people) you can expect to encounter in the system and their respective incentives and concerns:\nChampion.\nA champion is your ally within the target company. He or she will have have deep familiarity with the\npain your product solves, and will hope that your product is the solution. When you give your pitch, you will find\nthe champion nodding along and completing your sentences for you.\nThe champion will do everything he or she can to get your product deployed at the company, but their influence\ndepends on their seniority and authority. While line-level champions are great, you also need to find champions who\nare director-level and above. Champions may become so excited they will want to quit and join your company (it has\nhappened to me multiple times), and in any case, a champion often acts as if they are one of your employees — they\nare your guy/gal on the inside.\nThese people are gold. Find them early and build strong relationships quickly.\nDetractor.\nThe opposite of a champion is a detractor. For some reason, these folks really don’t want to see your\nsolution deployed at the company. Maybe it threatens their job. Maybe they are already invested in a competing\nproduct. Maybe they built the solution that is currently being used. Figure out who these folks are early, and\ngenerally try to stay off their radar. You need to rally enough support from champions and other parts of the\norganization to overpower any detractors.\nIT.\nThere are two types of IT organizations you may run into: The risk avoidant organization that perceives\nchange as threatening and risky for the business, and thus shies away from it, and the forward-thinking IT\norganization that is programmed for risk taking and embracing change. Unfortunately, the former is a lot more common\nthan the latter at large enterprises, and for this reason it’s usually a good strategy to avoid talking to IT\n(unless your product’s users are in IT.) It’s usually easier to get a meeting with IT compared to a business unit,\nbut be warned, these meetings can end up leading you astray. Some IT groups don’t actually understand the true needs\nof the business — I’ve been burned by this in the past, building features that IT have asked for in order to get a\ndeal done only to discover when putting the product in front of actual users that it wasn’t what they wanted.\nYour strategy should generally be to avoid IT until required to go through security reviews and other approvals, and\nby this time you should have the business units \"pulling\" you so strongly that IT can’t slow things down for too\nlong. There are of course exceptions to every rule. I have worked with some phenomenal IT people in the past who\nended up being real champions and helping us get deployed across different parts of the business.\nProcurement.\nIf you are lucky enough to convince a decision maker/budget holder to buy your product, you will\nusually be handed over to procurement to negotiate the deal. Get ready for some pain, because usually these folks\nare incentivized to get the lowest price possible (though there are always exceptions.) Just make sure you are\nprepared to \"give\" them something — once they extract their pound of flesh they will get out of the way. This is one\nreason why a lot of enterprise software has a ridiculously high \"list price\", but discounting by 80% or more is\nstandard practice.\nLegal.\nAs you run the gauntlet you will likely encounter legal next. Their weapon of choice is often\nexhaustion — sending back endless redlines over clauses in the contract that in reality won’t have much impact.\nYour best strategy here is to decide up front what you really care about and what you are willing to give on.\nAfter you’ve done a round or two of redlines, a good strategy is to have a frank and authentic discussion listing\nout those things that you care about, and give in on the stuff that won’t really make a difference for you. That,\ncombined with strong support from your champion (who should be in the background telling legal to hurry up and get\nthe deal done), will help you close out the negotiation and get a signature.\nFinance.\nYou may not need to interact with finance directly, as they may just talk to procurement, but it’s\nimportant to aware of the motivations of the finance team. One thing they are thinking about is the budget and\nbudget cycle. For example, you may find that the finance team prefers to pay more money up front to use up some of\nthis quarter’s budget, rather than to space out payments over time. Also important is whether they have a preference\nfor capex or opex, which will influence whether they prefer to make a lump sum payment for a purchase of software vs\npaying monthly license fees. This affects your pricing model as well as the structure of your sales team and comp\nplans.\nNow that you have some sense about what the components of the enterprise system look like here are a few tips for\nhacking it:\nUncover the motivations of every player.\nIn the beginning you should devote a lot of time to listening and learning. Map out the people in your target company,\ndraw a diagram. Just like a great hacker spends a lot of time poking around, exploring and understanding how a system\nworks before attempting to influence it, you need to spend a lot of time really understanding the organization,\nmotivations and interactions.\nBuild strong relationships with your champion(s).\nWhen doing a large enterprise deal it will fall through before it closes, maybe more than once. You will need to lean on\nyour champions to revive the deal and keep it moving. You need to turn these champions into your friends — you should be\nable to text them any time of night and ask for their help. Your champions are your best entry point into influencing\nthe system.\nHire the right type of sales people.\nNow that you understand what selling to the enterprise is like, you should make sure you hire the right people given the\nstage of your company. Personally I tend to optimize for skills and raw characteristics over experience. An especially\ncommon problem is hiring the wrong fit for your stage - for example, hiring a \"coin operated\" script kiddie salesperson\nout of a large company when you really need a hacker. You want people who are comfortable with uncertainty, who can\nlearn quickly, and have strong intuitive and intellectual intelligence to understand the system well enough to influence\nit.\nKeep your map front and center.\nYou spent time mapping out the system in advance. Now, you must always keep it in mind, especially when strange things\nseem to be happening. Go back and evaluate the different people, their motivations, and their interactions. Figure out\nhow to play the system to your advantage, and inject the right messages in the right places. Position your product in\nthe right way to the right people at the right time. This is where the art of selling comes into play so I can’t give\nconcrete tactical advice here, other than to draw your awareness to the fact that it is where most of the magic happens\nin sales.\nEngage on many fronts.\nIt’s a good practice to create pairs of relationships. For example, pair executives at your company with executives at\nthe customer, your engineers with their IT and security folks, your product people with their business unit leaders etc.\nThat said, always make sure one person (usually the account executive) is overseeing and coordinating all the\ninteractions.\nInstrument your process.\nIt’s important to instrument your sales process (collecting data and generating reports) in the same way you would use a\npacket sniffer or debugger when hacking. You need to measure your sales process in order to improve it.\nDon’t forget that companies are people too.\nIt may seem like one organization selling to another organization. But really, decisions are made by people, and people\ndon’t always act rationally. You can use this to your advantage by building the right relationships as described above,\nor it can blindside you and cause a deal to blow up if you don’t have the correct understanding of the people involved\nin the system. Remember that friendships lead to partnerships. Remember also that friendships often transcend the\nemployer. By nurturing these relationships they will pay off across multiple companies.\nI hope this perspective on enterprise sales encourages more hacker founders to get out there and sell their products\nmore effectively.\nRyan Junee is an entrepreneur, startup advisor, and investor. Currently he is the founder and CEO of industrial\nenterprise collaboration app\nParsable\n. Previously, he founded Inporia (W11) and Omnisio\n(W08), which was acquired by Google. Junee holds a BE in Computer Engineering from the University of Sydney, and an MSEE\nin Electrical Engineering from Stanford.\nNotes\n1\nIn this article I’m talking about a very specific phase of the enterprise sales\ncycle — going from a qualified lead to a closed deal. I presume you already have a good product and have found\nproduct-market fit (or are close.) If this isn’t the case, there has been plenty written online about finding\nproduct-market fit. I recommend starting\nhere\n.\nThis article is also not about prospecting or finding/identifying the right customers -- which is actually where you\nshould spend a large amount of your effort, so as not to waste time chasing dead ends.\n2\n“To programmers, 'hacker' connotes mastery in the most literal sense: someone who can make a\ncomputer do what he wants — whether the computer wants to or not.” —\nPaul Graham\n3\nIn this article I’m really talking about selling to large enterprise companies: Think\nFortune 500, high-touch complex sales with with lots of people involved; $1M+ deals. This is often called \"elephant\nhunting.\"\nThanks to Eugene Levitsky, Ab Belani and Harish Srinivasan for reading drafts of this article."
    }
  },
  {
    "name_blog": "Advice for job seekers on resumes and reaching out",
    "description_blog": "To help job seekers, YC's Ryan Choi spends a lot of time doing 1-1s and resume reviews. Here are his most common pieces of advice for those on the job search.",
    "authors": [
      "Ryan Choi"
    ],
    "related_categories": [
      "Working at a Startup"
    ],
    "page_url": "https://www.ycombinator.com/library/4l-advice-for-job-seekers-on-resumes-and-reaching-out",
    "content": {
      "table_of_contents": [],
      "whole_content": "To help job seekers amid this crisis, I’m spending a lot of time doing 1-1s and resume reviews. Below are my most common\npieces of advice.\nMail us your resume (\nworkatastartup@ycombinator.com\n) if you want\nfeedback or pointers. And if you’re looking for a job, check out our active jobs list on\nWork at a\nStartup\n, which makes it simple to browse the 400+ YC companies that are well-funded and\nactively hiring, including larger ones like\nGusto\n,\nBrex\nand\nStripe\n.\nResume: For each position on your resume, be sure to cover what, how and impact.\nWhat did you work on?\nAssume that recruiters and hiring managers don’t know much about your last company or\nrole. So provide a brief description about the product line or initiative, so they can find you the right role or\nteam.\nHow did you get your work done?\nWith each position, be sure to include technologies you used — programming\nlanguages, frameworks, libraries, etc. Do not dump them all into one big “Technology” section at the bottom of your\nresume. Technology is very contextual and time-specific: my SOAP/XML-RPC work at Salesforce made sense 20 years ago,\nbut it makes no sense for a modern web stack today. Also, provide team size and departments you worked with. It’s\nuseful for a hiring manager to know if you’ve successfully worked cross-functionally — with product, designers, ops,\nand more.\nWhat impact did you have?\nShare your impact on the business — growth numbers, cost savings, sales increase,\nmarketing distribution. This shows you’ve been given responsibility — and delivered — to benefit the business.\nLastly, do some spring cleaning. Remove side projects that don’t necessarily match the job, especially if there are more\nrecent examples on your resume. For example, if you’re a lead of a team in your current role, having leadership roles\nfrom 10+ years ago in college isn’t as relevant. And trim down each position to 3-4 bullet points, maximum. It makes it\neasier for the recruiter/hiring manager to read it all, and shows you can be concise and direct.\nCold outreach: Highlight 2-3 things you’d be excited to work on at the company — and why.\nWhen applying to a position, be sure to suggest ways you’d be excited to contribute; include these suggestions on your\nresume, cover letter or in an intro email. Being a genuine user is a huge plus. These things can helps you stand out\nfrom the hundreds of other resumes in the recruiter’s inbox.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nAt Twitter, I hired a few people who stood out because they showed initiative: suggesting strong product\nideas/improvements, outlining plans for go-to-market, or even writing sample code showcasing skills and interest. And I\npractice this myself; when I interviewed at Lyft, I reversed engineered the API and built a small SDK to perform common\ntasks. It took a couple nights learning WireShark, but it ultimately helped me land the job.\nConsidering startups: Ask about runway & burn rate.\nMany YC startups are well funded (some even with $10M+ raised) and offer benefits and job security equal to more\nestablished companies. If you’re considering startups, know what to ask about, like runway and burn rate.\nRunway\nis the number of months the startup has to operate, based on money raised and revenue. There is no\n“right” answer, but you likely want to work somewhere with enough runway to weather this pandemic, and still get\nthe business in good shape after that (if it’s not already).\nBurn rate\nis the company’s monthly spend. During my time at Zuora, we made it a goal to be “in the black” (not\nburning more than we were earning), and it helped us survive the 2009 market crash. Not all startups have the luxury\nof early revenue, but knowing the financial levers to the company will help you understand the business (and how the\nfounders think about it).\nYou should be discussing these things with the founders at least at the offer stage, if not earlier. We tell YC founders\nto be transparent with this information, not just because it’s the right thing to do, but also because it helps\nestablish mutual trust. You should be wary of founders — YC or otherwise — who are not forthcoming and honest, as a\nreflection of what to expect later down the road.\nThe silver lining of the current job market is that 1.) there are still a lot of great companies that are actively\nhiring (including hundreds of YC companies), and 2.) job offers have not yet decreased — mostly because many of the\nlarger companies are still competing for good talent.\nHopefully the above helps you stand out and get conversations going. At YC, we’ll continue to share more on job hunting,\nincluding interviewing and negotiating offers. Reach out if YC or I can help. You got this."
    }
  },
  {
    "name_blog": "Guide to product development",
    "description_blog": "This is a guide to running your product development process. This will help you rapidly iterate, measure, test, and improve your product while fully engaging your team.",
    "authors": [
      "Michael Seibel"
    ],
    "related_categories": [
      "Product",
      "Building Product",
      "Feature Prioritization",
      "Management"
    ],
    "page_url": "https://www.ycombinator.com/library/4e-guide-to-product-development",
    "content": {
      "table_of_contents": [],
      "whole_content": "Before\nJustin.tv\ngrew into Twitch and Socialcam we spent years with a broken understanding of how to build product. We\nhad meandering product meetings where we didn’t write down our decisions. We didn’t carefully spec new products so team\nmembers often had slightly different ideas about what we were building. We always wanted to build fully formed products\ninstead of MVPs. And we rarely spec’d the analytics for new products so we often didn’t know how they were performing\npost-launch.\nDevelopment cycles often ran months. We were sick of the new feature by the time we launched them so we didn’t iterate.\nOur product roadmap was so long that team members weren’t excited to brainstorm new products because it was unclear if\nthey would ever be built. And most horribly, product decisions were made exclusively by the founders in a\nnon-transparent process. Things were a mess.\nIn this post I’m going to cover product development cycle fundamentals that I learned to help solve all of the problems\nabove. This will help you rapidly iterate, measure, test, and improve your product while fully engaging your team. This\nis not that same as shipping an MVP. I’m assuming you’ve released an MVP and are figuring out what to do next, which is\nwhere most startups spend most of their time.\nDefine Your Development Cycle Length\nYour development cycle should be dictated by your product. At Socialcam we were\nbuilding for iOS so we settled on a two week cycle, which allowed us to thoroughly test before releasing to the App\nStore. If you’re doing a web app your cycle can be shorter, if it’s hardware it might be longer. The key is to structure\nthe cycle so that teammates stay excited and still feel like they can brainstorm new ideas.\nDetermine Your Goal(s) and Identify the Product Lead\nWe ran one and only one team meeting. It was the product\nmeeting and it happened on the first day of the dev cycle. Sometimes this meeting would go for five hours (sorry).\nEvery product meeting was focused around one of three goals:\nIncreasing content creation\nIncreasing new users\nIncreasing retention\nWhichever goal we chose would be the focus of the meeting and, therefore, the next two weeks.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nAs the product person on the team my role was to protect and improve the dev cycle and moderate the product meetings to\nensure all team members felt comfortable contributing. Oftentimes just getting the opportunity to voice your idea and\nhaving it written on the board - even if it isn’t built - massively increases buy-in of the process.\nOrganized and Inclusive Brainstorm\nWhile we were brainstorming, ideas would be written on the whiteboard in one of\nthe following categories: new features/feature iterations, maintenance, and A/B tests. Everyone was expected to\ncontribute. Debates or putting down other people’s ideas wasn’t permitted. This was the time when everyone felt free to\ncontribute without fear of judgement. The product lead is responsible for creating and maintaining that environment.\nFrom there each brainstormed item would be graded by the engineer in the meeting as easy (several can be done in a day),\nmedium (half a day for one person), and hard (most of the dev cycle). No item could be so hard that it would last into\nanother cycle and if it was, we’d break it into smaller chunks. Usually this grading would be done item by item by the\nengineer with the most experience in that specific area. iOS features were ranked by the iOS guy and so on and so forth.\nThis really helped non-technical people understand which of their ideas were easy to build and which were hard. With\nthis realization they often got better at thinking up easier and easier MVPs of their ideas. These easy ideas would then\nget built and, if they worked, would be iterated upon.\nBuilding a Consensus\nOnce we’d written our ideas out we began to pick what we would work in through consensus. We\nwould start with the hard ideas–it was easy to form consensus because we knew we could only do one and because we knew\nthat we would start a new dev cycle in two weeks. Then medium and then easy. Developing that consensus wasn’t very hard\nbecause everyone had the opportunity to suggest their own ideas and because there was a clear goal and objective\nmeasurement of how long each idea would take to build. This process allowed you to grade the quality of your own idea\nand didn’t allow personalities to bully their pet ideas through.\nClear Spec and Clear Measurements of Success\nAfterwards we would spec out each of the items on our list in detail\nand assign each item to a team member (or multiple team members). We would also spec the stats we needed to track in\norder to measure how effective the feature was. We would never release a feature without releasing the analytics for\nthat feature and understanding what specific measurable result we wanted to create. Finally, we separated out the need\nto haves from the nice to haves on the list. If there wasn’t time, the nice to haves would not be built. After that was\ndone we would take a picture of the whiteboard and delete it. We didn’t have a product roadmap outside of these two\nweeks and every product meeting we would start from scratch with the new goal, new analytics data from our last two\nweeks, and also often new insights from in-person user testing, which we tried to do once a month.\nWorking During the Development Cycle\nFor me, work after the first monday of the development cycle was a silent\naffair. My job was to get all the business and operations tasks done. Then I’d dig through Mixpanel looking for\ninteresting product insights or potential bugs. Finally, I also ran monthly user testing sessions in our office. My\nteammates - engineers and a designer - would work quietly and quickly knowing they had projects with limited scopes that\nwere well spec’d out. Finally, during the last three days of every development cycle we would all stop building and\ntest. We had a testing list in Excel that included manual tests for all of our basic functionality. Every cycle we added\ntests for new features built in that cycle and we tested all items on our testing list twice. Everyone on the team\ntested and we often had competitions for who could test the fastest and who found the most bugs. Testing sucks so it’s\nimportant that the burden is shared.\nThe Results\nAt the end of the day, Socialcam did not achieve our dream of being the “Instagram for Video”. In fact\nwhat we should have built looks a lot closer to Snapchat. But this process did allow us to iterate extremely quickly. As\na result we were able to produce a laundry list of cool features very quickly: video filters, video borders, video\ntitles, video soundtracks, video feed optimizations, multiple visual redesigns, user profiles, recommended channels,\nfront back camera switching during a video, and much much more. It also allowed us to experiment with growth features\nthat produced 16 million downloads in about 3 months and over 100 million people watching video on our website during\nthe same period of time. Most importantly though, we did all of this work quickly, efficiently, without major arguments,\nissues with founder commitment, or really any team problems at all. Sometimes I wonder what would have happened if\ninstead of selling the company we kept building for another year… But that’s another story.\nThank you Jared, Geoff, and Craig for helping me with this post, Ammon and Guillaume my co-founders at Socialcam, and\nJustin, Emmett, and Kyle for surviving all the pain from the good old days at\nJustin.tv\n."
    }
  },
  {
    "name_blog": "A letter to college students",
    "description_blog": "These are the decisions people commonly make during college that have the most negative effects on their ability to start a startup. Avoid them.",
    "authors": [
      "Michael Seibel"
    ],
    "related_categories": [
      "Becoming a Founder",
      "College Students"
    ],
    "page_url": "https://www.ycombinator.com/library/4d-a-letter-to-college-students",
    "content": {
      "table_of_contents": [],
      "whole_content": "I often talk to people who want to start startups in their late 20s and 30s, but can’t.\nSome decision they made when they were younger is either blocking or creating a serious barrier to their success. These\nare the decisions people commonly make that have the most negative effects on their ability to start a startup:\nThey didn’t learn how to write code.\nThey never met anyone who knew how to write code in college.\nThey significantly increased their expenses early in life, didn’t save, and now can’t afford to begin their company.\nThey created roots post-college in a city that is not startup friendly.\nHere is the advice that they would have given their younger selves, if they could go back in time:\nLearn to code.\nThis doesn’t mean you have to be a Computer Science major. But college offers a great opportunity\nto learn the basics upon which you can build later in life. Being a programmer gives you the ability to work in any\nindustry and start a company in any industry. You don’t have to be the best developer, and you don’t have to write\ncode your entire life if you don’t want to -- but knowing how to code gives you the proverbial golden ticket to the\nWilly Wonka\nfactory of the technology industry. The number one barrier to starting a tech startup is not knowing\nhow to code.\nMeet people with real skills.\nCollege gives students the opportunity to show their ability across a wide range\nof useful skills. There are designers, programmers, sales people, scientists, etc., all around you. Take the\nopportunity to make friends with people who have different skills than your own. It's very likely that these people\ncould become your cofounders or early employees one day.\nHave fun.\nRemember that for most successful founders, college grades and accolades had almost nothing to do with\ntheir future success. Personally, the greatest career opportunity college gave me was the chance to make friendships\nwith really smart people. So get out of the dorm room or the library and be social.\nTake responsibility.\nCollege is a great opportunity to learn more about how you operate within a group setting.\nJoin the leadership group of a club where you are forced to execute on a real world task (organize a conference,\ncreate a publication, do volunteer work, play on a sports team, etc.) Learn what you are good and bad at when it\ncomes to working with others.\nBe ready to hit the ground running.\nIn American culture today it's seen as acceptable to use your 20s to find\nyourself. I firmly disagree with this idea. Your 20s are your most valuable working years: You often have very few\nobligations (no family), a very low burn rate (you’re used to living in a dorm), and you are still young enough to\nmeet new people and learn new skills. Use college to to get the partying out of your system and spend your 20s\nworking hard.\nBe your own career counselor.\nCareer counseling at most universities is really really bad. Many students\nliterally have no idea what they want to do when they graduate from college. Instead of putting all your raw effort\ninto your coursework and grades, use some of your time at school to figure out what you want to do when you\ngraduate. You can always change your mind, but having a plan is better than no plan.\nIt's okay to ignore your parents.\nMany folks choose to pursue a certain career because of parental pressure and\npoor career counseling. The number of doctors and lawyers I know who really don’t love their jobs or their lives is\nastounding. It's okay for you to make a career choice on your own -- even if your parents are paying for college.\nBe careful with student debt.\nMore and more, student debt is forcing people away from startups and into big\ncompanies. Once you make that decision, it is easy to spin up additional expenses (buying a car, renting a nice\napartment, etc) and price yourself out of starting a company. Making a choice of a college is hard, but there are\nmany expensive private schools that don’t offer good financial aid. They promise that the logo on your resume will\nbe valuable -- but in the end, these schools are probably worth avoiding. The best private schools are generous with\nfinancial aid.\nI wish my college dean had given this advice to me during freshman year, instead of whatever “bright college years”\nstuff I had to endure. Good luck out there, and remember that if you are between the ages of 22 and 32 you are in your\nbest startup years. Every year you are not doing a startup you are losing 10% of this prime time.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply"
    }
  },
  {
    "name_blog": "Getting press for your startup",
    "description_blog": "Treating PR like business development means developing relationships with reporters as people, getting introduced through warm connections instead of cold emails, and creating a fair value exchange. Here's the process YC companies follow when they're ready for press.",
    "authors": [
      "Michael Seibel"
    ],
    "related_categories": [
      "Growth",
      "Press"
    ],
    "page_url": "https://www.ycombinator.com/library/4c-getting-press-for-your-startup",
    "content": {
      "table_of_contents": [],
      "whole_content": "Michael Seibel, Y Combinator CEO, on press strategies for startups.\nThe best press advice I ever got was from Mike Arrington and M.G. Siegler while they were speaking at an SV Angel CEO\nconference. They said:\nTreat PR like biz dev.\nOnce I heard that, everything clicked. Before then I’d wasted mental energy thinking there were special rules for\ntalking to the press and getting great stories for my company. I needed cool and catchy subject lines for my emails. I\nshould have a list of a hundred reporters that I blast with new story ideas. I should write press releases. Needless to\nsay most of these efforts ended in failure. Sound familiar?\nTreating PR like business development means developing relationships with reporters as people, getting introduced\nthrough warm connections instead of cold emails, and creating a fair value exchange. Here’s the process I advise YC\ncompanies to follow when they’re ready for press.\nStep One: Generate News\nMany founders pitch reporters profiles and stories about their company that could be written today, next week, or next\nmonth. Everyone wants a “profile piece” on their startup but most of the time those stories aren’t valuable to\nreporters. What makes a valuable story is news.\nWhat is News?\nNews is timely. It makes more sense to talk about it today rather than tomorrow. News attracts attention now and that’s\nwhat reporters want. News for most startups can be broken up into these 4 categories:\n1. Product Launches and Features\nThese are things coming out today. Not yesterday, not tomorrow, today. Think Instagram Stories or Facebook Timeline.\nTypically you are looking for user facing features. In my last company, Socialcam, we would reach out to the press when\nwe released video filters, the ability to add soundtracks to videos, or user profiles.\n2. Product/Sales Milestones\nThis could be hitting\na million users\n, $100k MRR, or maybe\na million\nguests per night\n.\nIt’s important for this number to be as big as possible (relative to your size of startup) and I’d recommend you\nsandbag this number - i.e. wait until you’re 25% past the milestone to announce - so that you’re that much closer to\nannouncing the next milestone.\n3. Significant BD Deals or Customers\nDid you just get a team at Airbnb or Instacart to start using your product or service? Did you\npartner with\nGM\nto build a\nnetwork of self-driving cars? If you have their permission you should consider announcing it.\n4. Fundraising\nFor better or worse, fundraising is conflated with traction/success so it is a topic people want to read about. If you\nhave raised an angel round or series A/B/etc. most reporters will consider this news and potential employees will notice\nit, too.\nNote:\nMany of the examples I’ve used might seem a little aggressive for an early stage startup. My goal is not to\ndiscourage you but to provide examples that will be generally understood. If you have any new product, milestone, deal,\nor investment round you should strongly consider pitching it.\nStep Two: Make Your Own Press Contacts\nReporters want to talk to CEOs and co-founders--not PR people. As an early stage startup founder you should be building\nreporter relationships and making pitches. Your success rate will go up and you will actually spend less time and money\non PR. Take it from me--we spent over $100,000 on PR agencies and PR people as an early stage startup before we figured\nthis out.\nHow Do I Make Press Contacts?\nDon’t spray and pray. It’s stupid.\nThe best method to meet a tech reporter is by having the CEO or a co-founder get a warm intro. If you’re a YC founder,\nthe YC founder network is super helpful for these. The reporter you want to meet has definitely written about someone\nyou know. Have them intro you. Proper etiquette is to ask your friend for an intro to only one reporter. If you aren’t a\nYC founder, make friends with other startups and reach out to your startup community for warm intros.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nHere’s what should be in your intro. The reporter should be able to read it and reply in thirty seconds.\nNews. Describe your news in one sentence.\nFor an\nexclusive\n: Let the reporter know\nyou’re offering an exclusive.\nFor an\nembargo\n: Say when you’re making the announcement. Include the\ndate and time.\nA request for a twenty minute call. Be courteous. You don’t need to meet in person.\nWhen you get the reporter on the phone, be ready with three to five reasons why your news and your company is important.\nMake them clear and then, at the end of your call, offer your notes and any relevant collateral (screenshots, graphs,\nlogos, pictures, etc). This will provide you with an opportunity to be courteous\nand\nprovide reporters with the\nlanguage you prefer.\nStep Three: Pitch Those Contacts an Exclusive\nAlmost all startups should be offering their story as an exclusive to one tech reporter at a time. Your target audience\ninvestors, potential employees, motivated customers, early adopters - exist in high concentration in just a few tech\noutlets. Getting blanket coverage across a bunch of tech blogs is often not worth the struggle and can piss people off\nwhen embargoes are broken.\nStep Four: Share News at a Consistent Cadence\nThere is a philosophy in the PR world that the number of press mentions per story is an important metric. This causes\nthem to put all the best news in one story, infrequently, and try to get the most reporters to write about it at once.\nFor startups I actually think this isn’t the best strategy.\nFor me, the benefits of PR are hard to measure but they do exist. It’s like funding basic research in science, you can’t\npredict the advances but they do happen when you invest consistently over time.\nTo see real startup PR results you’re better off getting one story every month or every other month versus one huge\nstory every year. To do that, don’t combine all of your news into one story, spread it out across multiple stories. Also\nwhen you are looking at your stats or sitting in product meetings with your team, keep an eye out for potential news\nthat you can pitch. I tell YC startups to maintain a queue of 3-5 pieces of news that you will want to announce in the\ncoming 6 months. It takes the pressure off you if one of those pieces of news doesn’t get picked up, and it helps you\nkeep a regular cadence of positive news about your company in the press.\nOther Things to Keep in Mind\nJust like BD, don’t expect to get every meeting and story. When a reporter says “no”, ask yourself why. Were you\nreally\ngiving them news and doing all the other things right? If you’re doing all those things well, you should have\na 25-50% success rate.\nAfter six to twelve months of keeping up a good cadence and sharing real news, you should be relatively friendly with\ntwo to five reporters. In other words, they’ve written about your company enough that you’ve probably met them in person\nand certainly they’ll reply to most of your emails.\nLater on in your startup’s life there will hopefully become a point when press organically pays attention to your\ncompany and wants to proactively write about what you are doing––Dropbox and Airbnb are great examples. At this point,\noftentimes it is strategic to start creating distance between the CEO/Founders and the press. This is when PR people can\nbe very helpful. They create a buffer that allows you to be more strategic about what you announce, when, and to whom.\nLastly, remember that doing PR is a very small part of being a good CEO/Founder. Make sure you aren’t dedicating more\nthan 5% of your time to press and don’t expect PR to create observable miracles (tons of users, customers, investment\noffers, etc). Most of the benefit I’ve received from PR only became obvious weeks or months after a story was posted.\nThanks to Kat Manalac and Craig Cannon for contributing to this article."
    }
  },
  {
    "name_blog": "A standard and clean Series A term sheet",
    "description_blog": "YC has seen thousands of Series A term sheets, and we know what good terms look like. This is what a Series A term sheet looks like with standard and clean terms from a good Silicon Valley VC.",
    "authors": [
      "Jason Kwon",
      "Aaron Harris"
    ],
    "related_categories": [
      "Fundraising",
      "Fundraising Docs",
      "Series A"
    ],
    "page_url": "https://www.ycombinator.com/library/4P-a-standard-and-clean-series-a-term-sheet",
    "content": {
      "table_of_contents": [],
      "whole_content": "While working with companies in YC’s Series A program, we’ve noticed a common problem: founders don’t know what “good”\nlooks like in a term sheet. This makes sense, because it is often, literally, the first time in their careers that\nthey’ve seen one. This puts founders at a significant disadvantage because VCs see term sheets all the time and know\nwhat to expect. Because we’ve invested in so many founders over the years and have seen hundreds of Series A term\nsheets, we know what “good” looks like. We work with our founders to understand where terms diverge from “good”, what\nthey can do about that divergence, and when and how it makes sense to negotiate.\nBelow is what a Series A term sheet looks like with standard and clean terms from a good Silicon Valley VC. Bracketed\nitems (besides the names of the company and lead investor) are always or frequently negotiated. Items not in brackets\nare sometimes negotiated, but this has more to do with the idiosyncratic features of the company or the situation, and\ngenerally aren’t terms that parties intend to heavily bargain over during the negotiation.\nOne of the critical things you’ll notice is that we didn’t put in standard pricing. While the lead in a Series A round\ngenerally wants 20% of the company, pricing can flex up and down depending on the leverage held by each side. We think\nprice is an important term, but too specific to each raise to try to create a standard. We’re more concerned with terms\naround control and structure that are less familiar to founders, and therefore more prone to cause confusion and\ntrouble.\nNote: this term sheet doesn’t belong to any particular VC -- we drafted it -- but it does substantively reflect what we\nsee most often. Founders with a lot of negotiating leverage can sometimes do better, and the converse is true too.\nYou can also download the Word version of the doc from this page.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nIt may be surprising to see everything covered in a single page.\n1\nThis wasn’t always the case, but became\ncommon over the last decade as some investors decided to make their term sheets more user friendly by shortening the\nlegalese as if to say, “We aren’t going to get bogged down in the minutiae. We’re going to make this easy, friendly,\nstandard and fast.”\nThis leads us to the most important thing to understand about the term sheet: it’s another way in which your Series A\ninvestor might be telling you something. A contract allocates risks between the parties, so the terms the investor\ninsists on can sometimes say a lot about the investor’s perceived risks. These perceived risks show up in a couple of\nways.\nThe first way relates to control terms. We don’t mean the set of investor vetoes in the “Voting Rights” section, which\nare pretty standard fare,\n2\nbut rather issues of board composition and the investor’s ability to block or\ndictate operational decisions made by the board. The board structure in this term sheet is founder-friendly because the\nfounders retain board control 2-1.\n3\nThe way in which founders most often lose control at the Series A is\nwith a 2-2-1 board structure, i.e. 2 founders, 2 investors and an independent board member. The loss of board control is\nmost significant because it means the founders can be fired from their own company.\n4\nAnother way in which\nfounders lose some control is a term that doesn’t appear in the standard example above, which is a separate provision\nthat says the investor director’s approval is required for operational decisions like setting the annual budget,\nhiring/firing executives, pivoting the business, adding new lines of business, etc. When boards are set up to take power\naway from founders, the investor’s outward justification will frequently be reasons of governance or accountability. But\nthe more power that’s taken away, the more it’s undeniable that the investor is attempting to structure away a perceived\nrisk. So when an investor says that they’re committed to partnering with you for the long-term - or that they’re betting\neverything on you - but then tells you something else with the terms that they insist on, believe the terms.\nThe other way perceived risks manifest is if a term sheet includes non-standard or “dirty” economic terms. Here, the\nterm sheet example is instructive not for what it contains but what it\ndoesn’t\n. Examples of such terms would be:\nLiquidation preference greater than 1x -- the investor gets back more than its invested capital first.\nParticipating preferred -- the investor double-dips by getting its money back plus its pro rata portion of exit\nproceeds, rather than choosing between the two.\nCumulative dividends -- the investor compounds its liquidation preference every year by X%, which increases the\neconomic hurdle that has to be cleared before founders and employees see any value.\nWarrant coverage -- the investor gets extra fully diluted ownership without paying for it at the agreed upon\nvaluation.\nThese are all ways of adding structure to reduce typical venture risk, either directly by boosting the investor’s\ndownside economics, or indirectly by juicing the upside outcomes. The investor is essentially saying, “I’m sort of\nafraid of losing my money.” It can also foreshadow how they might behave when things aren’t going well, such as pushing\nyou to sell when you don’t want to, or dial back risk when it’s important to take it. Good investors would rather\naddress economic risks by negotiating valuation, and are otherwise happy to give standard terms because they know that\nthe real money in venture is not made with structure, but by building long-term value, which they are confident in their\nability to help you do.\nThe last thing to remember is that your Series A documents are a foundation and precedent for the terms of future\nrounds. Good foundations make the next term sheet and financing round fast and simple, as future investors just step\ninto the same straightforward terms. Doing the opposite complicates future fundraises, such as future investors asking\nfor the same structure-heavy terms, existing investors refusing to drop terms that subsequent investors want removed as\na precondition of investing, etc. Unwinding bad terms is difficult, and oftentimes impossible.\nThat said, the point is to get a clean deal, not to cycle a lot to get the perfect deal. No one ever built an enduring\ncompany just by winning their Series A negotiation. Also, even if you can’t get everything right or the way you want it,\nyou always have the power to execute. If you do that, the value you build can outrun suboptimal terms or establish\nleverage to renegotiate later. So don’t lose sight of the ultimate goal: closing fast and getting back to work.\nNotes\n1.\nSome great investors still send longer term sheets, but this has more to do with their preference for going a bit\ndeeper into the details at this stage, rather than deferring this until the definitive documents. The definitive\ndocuments are derived from the term sheet and are the much longer (100+ pages) binding contracts that everyone signs and\ncloses on. It’s common to negotiate a few additional points at this stage, though deviation from anything explicitly\naddressed in the term sheet is definitely re-trading. Also, in a few places, this term sheet refers to certain terms as\nbeing “standard.” That may seem vague and circular, but term sheets frequently do describe certain terms that way. What\nthat really means is that there’s an accepted practice of what appears in the docs for these terms among the lawyers who\nspecialize in startups and venture deals, so make sure your lawyer (and the investor’s lawyer) fit that\ndescription.\n↩\n2.\nThe two most impactful investor vetoes in this section are the veto on a financing, which is covered by clauses\n(ii) and (iii), and the veto on a sale of the company, which is in clause (vii). We point these out because the concrete\nimplications of these clauses aren’t facially obvious, and because most term sheets use similar technical jargon for\nthese vetoes.\n↩\n3.\nThe founders implicitly control those 2 seats because they’re designated by a majority of common, and founders\ngenerally control a majority of common for a long time. In even more founder-friendly term sheets, those 2 seats may be\ndesignated by the founders themselves (as individuals).\n↩\n4.\nWhether being fired from the company as an employee also triggers the removal of the founder from the board is a\nseparate question and depends on what was negotiated in the financing documents. Sometimes a founder’s right to vote her\nshares to appoint a director will be conditioned on the founder being currently employed by the company. Whenever\nconditions are attached to your rights to vote on anything, make sure to ask your lawyer to walk you through the various\nscenarios in which those conditions matter and how they can hurt you.\n↩\nThis is not legal advice.\nThanks to Carolynn Levy, Jon Levy, and Nicole Cadman for their comments on this."
    }
  },
  {
    "name_blog": "How biotech startup funding will change in the next 10 years",
    "description_blog": "The landscape of funding for biotech startups is changing. What happened for software companies 10 years ago is happening to biotech today. Here's why more people will be able to start biotech companies moving forward.",
    "authors": [
      "Jared Friedman"
    ],
    "related_categories": [
      "Fundraising",
      "Science + Biotech"
    ],
    "page_url": "https://www.ycombinator.com/library/4L-how-biotech-startup-funding-will-change-in-the-next-10-years",
    "content": {
      "table_of_contents": [],
      "whole_content": "Back when YC was getting started about 10 years ago, Paul Graham wrote\nsome\nessays\nthat predicted the\nway startup fundraising would change in the next decade - accurately, it turns out. Paul Graham predicted that there\nwould be way more startups, that they’d be cheaper to start, that new kinds of investors would fund them, that founders\nwould be more technical, and that founders would keep control of their companies. All of those seem to have come true.\nI've noticed that raising money for a biotech or other life\nscience\n1\ncompany in 2019 looks a lot like raising money for a tech\ncompany 10 years ago. Since then, fundamental forces caused fundraising for tech companies to change dramatically. I see\nthose same forces that Paul Graham wrote about happening with biotech companies now. And I believe that they are going\nto change biotech fundraising very much the way they changed tech company fundraising.\nHow tech startup fundraising changed from 2005 to now\nIn 2005, when Y Combinator started, there was already a well developed ecosystem of venture capital firms in Silicon\nValley and Boston. But access to those venture capital firms was limited.\nVCs preferred to fund companies that already seemed like a sure bet - in other words, were far along. They also\npreferred to fund MBAs with previous executive experience and shied away from unproven teams with technical founders.\nBecause they had a lock on the funding market, they asked for onerous financial terms and often replaced founders with\nfavored executives. The only model of institutional seed funding was the “business incubator” model, where VC firms\nwould fund well-connected founders they knew and incubate them in their office.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThen, the cost to start a tech company plummeted. It plummeted because new infrastructure was created: a combination of\nopen source software, modern web frameworks, SaaS developer tools, cloud hosting, and better distribution channels. This\nmeant that a lot of technical founders, who couldn't raise money from VCs off a PowerPoint, were able to launch a\nproduct and get users with minimal funding. Once they had proven that their idea had merit, they could use their\ntraction to raise funding.\nCompanies like this now only needed a small amount of money to get started, but there wasn’t any place to get it,\nbecause institutional investors didn’t make small investments. This was the key insight that led to the creation of YC,\nand also to the hundreds of institutional seed funds that sprung up to take advantage of the new opportunity. Easy\naccess to flexible, institutional seed funding led to an explosion of tech startups, and today this is the default path\nfor tech startups to get started.\nBecause these companies wouldn’t raise VC until they were much further along and had leverage, the balance of power\nshifted. Founders increasingly retained control of their company. Investors lost the power to fire founders and bring in\nfavored executives. And when they did, they realized something surprising: despite their inexperience, the founders were\noften the right people to run the company.\n2\nWhat’s happening now with biotech companies\nToday, early stage biotech funding is dominated by the “venture creation model”. In the venture creation model, the VC\nfirm creates the company. They have an initial idea and put together a team of favored executives, often from their pool\nof entrepreneurs-in-residence, to run it. The startup is typically incubated out of the VC’s offices. The VC invests a\nlarge amount of money upfront and takes a controlling ownership stake.\nJust as VC-incubated tech companies made sense when tech companies were expensive to start, this model made sense when\nthe cost to start a biotech company was high. Until recently, no one could get anything done before a VC wrote a $10M\ncheck, so this was the only way to get started.\nBut that’s no longer the case. Just like new infrastructure brought down the cost to start a tech company, new\ninfrastructure has brought down the cost of doing biology dramatically. Today, founders can make real progress proving a\nconcept for a biotech company for much less, often as little as $100K. There are\nlow\ncost\nCROs\nthat will do scientific work for a fee. Companies like\nScience\nExchange\nmake access to CROs and scientific supplies instantaneous and cost effective\nto small companies. It’s easy to rent\nfully equipped\nlab\nspace\nby the bench, and there are\ncompanies\nto help you\nstock it\n. Affordable lab robots from companies like\nOpenTrons\nmake it possible to automate batch experiments, and computational drug discovery from companies like\nAtomwise\nallows some experiments to be done completely in silico. Companies like\nCognition\nIP\nare bringing down the cost of filing patents, and companies like\nEnzyme\nare streamlining FDA submission.\nBecause of this infrastructure, bio companies routinely clear major scientific hurdles during YC’s short program. Often\ntherapeutics companies are able to show that their concept is effective in animal models. Diagnostic companies can show\nsuccess with human samples. Synthetic biology companies successfully engineer cell lines.\nI’ll give a couple of examples from recent YC companies.\nIn 2015, Jose Mejia Oneto was an MD/PhD who left orthopaedic surgery residency to pursue an idea for a way to localize\nthe delivery of chemotherapy. When Jose applied to YC, he had developed the technique in academia but hadn't yet tried\napplying it to therapeutics in animals. When he was admitted to YC, he founded\nShasqi\n. Using\njust the funding from YC, he was able to show in less than three months in a breast cancer mouse model that his\nlocalized delivery outperformed conventional chemo.\nAthelas\nmakes a device that does at-home blood tests for oncology patients, using a new computer\nvision based technique. The founders Tanay and Deepika started the company while still in college and were able to make\na working prototype with just $40K in investment. During YC they were able to run a 350 patient initial study that\nshowed very good results. Their device is now FDA cleared, and they’re serving thousands of\npatients.\n3\nOf course, running clinical trials for drugs remains very\nexpensive\n4\n, and biotech companies will ultimately need to raise\ntons of money to deliver on their initial promise. But this is not too different from tech companies. The biggest YC\n(software) companies have each raised over $1B. The important part is that these companies were able to\nget started\nwith less than $100K and to de-risk their idea enough to raise more money later.\nPredictions for the future\nBecause you can start cheaply, it’s now possible to start a biotech company the way people start a tech company. By\nraising money incrementally, rather than a giant amount upfront, you can keep control of your company. And you can work\non your own idea, not just ideas that VCs come up with.\nThis new path has drawn a new kind of biotech founder. Many of the biotech founders we see at YC are grad students or\npostdocs\n5\n. Previously their career options were to stay in academia\nor to join a big pharma company. Starting their own company is now a viable third option.\nIf this plays out the way it did in 2005, we'll see an explosion in the funding options for biotech companies. Many\ntraditional biotech investors are still looking for the controlling legal terms that went out of vogue in tech in the\nearly 2000's. But just like what happened with tech investing, a new crop of biotech and tech/biotech crossover funds\nhave created a vibrant new bio seed investor ecosystem. As a result, YC bio companies now typically raise $1-5M seed\nrounds after each batch.\nEven more exciting, this would mean we're still at the beginning of an explosion in the number of biotech companies. And\nmore of these companies will look like tech companies: instead of being run by VCs and hired execs, they’ll be run by\nthe founders who care about their ideas, and who will sustain that passion building companies they love and that change\nthe world for the better.\nNotes\n1.\nIt’s common to use the word “biotech” to describe specifically therapeutics companies. I use it\nthis way as well, but most of this post applies to all life science companies - anything related to\nbiology.\n↩\n2.\nActually, this trend started with top VCs earlier, basically for the reasons Ben Horowitz\nwrote about\nin 2010. But I think the rise of institutional\nseed funding accelerated it.\n↩\n3.\nThe point here is not that these companies will ultimately succeed—we don't know that yet. My\npoint is that with just a seed investment and a few months, they managed to go as far along the curve as companies that\nhad to raise millions of dollars before.\n↩\n4.\nThough companies like YC’s\nCurebase\nand\nNucleus\nin Australia are chipping away at that.\n↩\n5.\nCertainly not all of them. We’ve also backed many founders who came out of industry, along with\nMD’s and faculty.\n↩\nThanks to Dan Gackle, Abe Heifets, Elizabeth Iorns, Stephanie Simon, Geoff Ralston, Diego Rey, Uri Lopatin, Ethan\nPerlstein, Joe Betts-Lacroix, Jose Mejia Oneto, Tanay Tandon, and Thomas Folliard for reading drafts of this."
    }
  },
  {
    "name_blog": "How to hire your first engineer",
    "description_blog": "Here is advice for early stage startup founders who are hiring their first engineer.",
    "authors": [
      "Harj Taggar"
    ],
    "related_categories": [
      "Early Stage",
      "Technical",
      "Engineering",
      "People",
      "Hiring",
      "Recruiting"
    ],
    "page_url": "https://www.ycombinator.com/library/4H-how-to-hire-your-first-engineer",
    "content": {
      "table_of_contents": [
        "Personal Networks",
        "Hiring Marketplaces",
        "Generate Inbound",
        "Cold Outreach",
        "Recruiters",
        "Meetups",
        "Agencies",
        "Conclusion"
      ],
      "whole_content": "Harj Taggar\nis cofounder of\nTriplebyte\n(YC S15).\nTriplebyte helps great engineers find work at the fastest growing companies in the world, with the least amount of time\nand effort.\nFor a more detailed, process-oriented on hiring engineers, also see\nYC's How to Hire\nHandbook\n.\n------------------------------------------------\nThis post is advice for early stage startup founders who are hiring their first engineer. At this stage traditional\nrecruiting methods e.g. hiring a recruiter won't work as well for you as they do for larger companies.\nHiring your first engineer at a startup is incredibly hard. As a founder you're already stretched dangerously thin on\ntime. There are bugs to fix, customers to close and any number of urgent existential fires that demand your full\nattention. You know you should be spending more time on hiring but it's a battle to find it.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThe bad news is even once you find the time, much of it will feel like wasted effort. Hiring isn't the kind of work that\nprovides you constant dopamine hits. It involves a lot of dead ends and frustration.\nStart by being clear on what exactly you're looking for. I'd recommend listing all the specific criteria your dream hire\nwould have. This will be a combination of technical (are they a good engineer?) and non technical (would I work\nproductively with them?). Then mark each candidate you interview against all these criteria and rigorously debate if you\nthink they have enough strengths in some areas to make up for weaknesses in others.\nIn practice hiring decisions invariably involve tradeoffs. You could trade quality for speed by rejecting solid\ncandidates to wait for the dream one. Or you could trade money for time by paying a candidate above market rate to join\nnow. Founders should be aware of all these tradeoffs and make the one that's best for your circumstances.\nOnce you know what you're looking for, you're ready to start finding candidates. I'll go through the strategies\navailable, starting with what I believe is most effective and working through to the least.\nNote: As the founder of a hiring platform I'm not neutral in discussing their effectiveness. I have articulated both\ntheir advantages and disadvantages and we did make our own first engineering hire through\nTriplebyte\n.\nPersonal Networks\nThis is the most important source by far. Once your startup scales it'll become less important as you'll have more\nbudget to spend on recruiting tools and building a recruiting team. At the start though it's where you should\nexclusively focus your energy and only consider other sources when you've exhausted all possibilities here.\nHiring someone you've already worked with is your best option because you already know if you'll like working with them.\nHow much you enjoy working with any single person matters less as you grow larger but for your first hire it could be\nthe difference between persevering to success and shutting down the company. (Caveat: startups are also uniquely\nstressful environments and there's still some probability you might not enjoy working with your friend under this kind\nof stress as much as when you were both at a bigger company).\nYou'll also have a better chance to convince someone you know to take a risk and join you. Asking anyone to join as your\nfirst hire is asking for an order of magnitude greater commitment than pitching an investor to invest. With personal\nconnections you'll know what would most motivate them to join and you can lean on friends to help convince them to make\nthe leap.\nYet I'm surprised by how often founders don't fully explore their personal networks for hiring. It's easy to be quick in\nassuming that none of your friends are available before even asking them. It's understandable. Asking your friends to\nleave their jobs and take a risk with you is scary. It's also more awkward to be rejected by your friends than\nstrangers. Still, if you're optimizing for the success of your startup you'll have to put this aside. Here's a plan you\ncould follow:\nMake a list of the best engineers you know, whether you think they're available or not. Go through your Facebook and\nLinkedIn to jog your memory.\nInvite them to lunch or dinner with them to talk about your startup.\nMake the ask - would you consider joining us?.\nWhatever they answer, ask a follow up question - if you did join us, which engineers would you most want to hire?.\nAsk for an introduction to those people.\nRepeat 2 - 5 with each of the introductions.\nRepeat 1 - 6 ad infinitum, I know public company founders who still do this. Expect to be spending at least a third\nof your time on this alone.\nFor your first three engineering hires I'd recommend focusing exclusively on personal network hiring. As your team grows\nthough you'll start thinking more about the composition and diversity of your team. Hiring through your personal network\nusually isn't the best option for this and the larger a team grows the harder it becomes to change the balance. After\nyour first three hires, I'd suggest continue to work your personal network and supplementing with the strategies below\nto meet candidates your own network wouldn't reach.\nHiring Marketplaces\nNewer recruiting startups like us (Triplebyte) and Hired operate as marketplaces. There's candidates on one side and\ncompanies on the other. The value to candidates is increasing their number of options and to companies it's reducing\ntheir time to make hires.\nThese marketplaces are strictly inferior to using personal networks for your first hire. The good ones can attract high\nquality candidates but most will want to work somewhere that already has an engineering team. They also charge a fee per\nhire that will usually be around $25,000 for an experienced engineer. Whether that's good value for you depends on how\nmuch funding you've raised and how much founder time you'd have to spend on making that hire.\nCandidates on these marketplaces are also speaking with multiple companies so you'll face competition. You can get\nsuccess though (we've had startups make their first hire on Triplebyte). Your results will depend heavily on how\neffective your pitch and closing process is. I've seen a lot of variance in how effective companies are at this. An\nengineer hired at\nGusto\n(YC W12) through Triplebyte\nblogged\nabout how much difference there is between companies in just being responsive to him. To get the most from a hiring\nmarketplace you need a polished pitch for why your company is an exciting place to work and a speedy process for moving\nthem from first call to interview and offer.\nDespite the disadvantages I still rank (good) hiring marketplaces as your second best option because they provide quick\naccess to a pool of vetted, skilled engineers. The candidates on these marketplaces are mostly motivated to move jobs\nright now. You can quickly get on the phone to make your pitch and start interviewing the interested ones. This also\nhelps you practice and improve both your pitch and calibration on what exactly you're looking for. Getting better at\npitching will increase your success at hiring in general.\nSome of the marketplaces will also do a rigorous technical evaluation of the candidates before accepting them onto the\nmarketplace. If that evaluation is done well, you can skip your own pre-onsite technical screening and expect a higher\nconversion rate of onsite interviews to offer which saves you time. (The average direct to onsite to offer rate for\nTriplebyte candidates is 40% vs the industry standard of 20%).\nGenerate Inbound\nAs an early stage startup you likely won't get much organic inbound interest from good engineers. The quickest way to\ngenerate this is posting on job sites. However most job sites aren't frequented by high-quality engineers. They'll get\nyou volume, not quality and volume alone isn't what you want. The majority of job applicants for any job posting are\nbelow the bar and it creates more work for you to filter them. The job postings I would recommend trying are on sites\nwith a sizable engineering audience e.g.\nStack Overflow Jobs\n, the monthly Hacker News\n“Who is hiring?\"\nthread (Hacker News job postings themselves are only\navailable to YC companies) and\nAngel List\n.\nYou can also create content that appeals to engineers to generate inbound interest. This is especially easy if you're\nworking on a particularly exciting idea e.g. self-driving cars. As soon as you publicly announce what you're doing\nyou'll get a burst of inbound applications. As this type of startup you'll always have a hiring advantage by having an\neasier time getting press and building brand recognition.\nDeveloper tool companies also have an advantage. Your product is already interesting to engineers and you should be\ninvesting in writing good quality blog posts about it - both to attract customers and for hiring. Set a goal of writing\nan article that's Hacker News front page worthy at least once a month.\nIf you're not either of these types of companies you can still blog about the technical choices you've made. Have you\nmade any controversial or unusual choices in your stack? If so, write about them. You may alienate some engineers who\ndisagree but you may also capture the full attention of a few who agree strongly e.g. Cognito have especially strong\nviews on testing and wrote about how they use mutation testing\n(\nhttps://blog.cognitohq.com/how-to-write-better-code-using-mutation-testing/\n). Not only does this get the attention of\npotential candidates, it creates content that you can also use include in cold outreach (more on that later).\nA more time-intensive option is creating interactive content like coding challenges or puzzles, the Netflix algorithm\ncontest being the most famous example. This can definitely work, Robby Walker, founder of Cue (acquired by Apple), wrote\nabout how this worked well for them here\n(\nhttps://techcrunch.com/2013/03/08/programming-challenges-benefit-job-seekers-and-employers/\n). It's a high-risk\nstrategy though. If you can't design something genuinely interesting then spending time on this will be a boondoggle. If\nyou're confident in your ability to make something interesting then go for it but run your idea by some engineering\nfriends first to see if it sparks interest.\nFinally your inbound conversion will increase the higher quality your job posting is. Invest time in making it stand\nout. Larger companies default to generic job postings that all look and sound the same (often because they're literally\nusing the same software to create them). As a startup you can do better. You could make your job posting personal by\nwriting in the first person as founder about why you started this company. You could use an informal tone that doesn't\nread like corporate boilerplate. Experiment with what feels right but move away from blandness.\nCold Outreach\nCold outreach is messaging engineers online. This could be on career/recruiting specific platforms like LinkedIn or\nplaces where engineers spend time like Hacker News and GitHub. (One advantage a technical founding team has here is\nthey'll already know where the best places are to look).\nThe challenge with cold outreach, especially on recruiting-specific platforms like LinkedIn, is the overwhelming number\nof messages good engineers receive on them. For your message to stand out from the crowd you need to put in work to make\nit personalized. Greg Brockman has some great advice (\nhttps://stripe.com/blog/startup-advice-cold-recruiting\n) on this.\nYou'll also see a greater return if you can hunt down email addresses rather than sending messages. If you're looking at\nprofiles on LinkedIn, use the Connectifer (\nhttps://www.connectifier.com/\n) Chrome extension to get them. Otherwise do\nwhat you can to find an email address (sometimes people include them in their forum profiles or try finding a personal\nwebsite that might have contact information). If you have any press articles or noteworthy mentions, I'd link to these\nin the message too. You also need to follow up and expect it'll take two or three emails before you get a reply.\nThis approach is how the majority of technical hiring at larger companies is done. Teams of recruiters reach out to\ncandidates and optimize their messaging over time to get more responses. There are tools to help you with this\noptimization e.g. Sourceress and ZenSourcer. If you send enough messages this approach will work and can result in great\nhires. If you reach people just before they've started interviewing and move quickly, you'll have a much higher chance\nof closing them.\nThe disadvantage is it's very time consuming and will feel draining. The majority of your messages won't get replied and\nyou'll be tempted to give up. You'll have to commit to spending a certain amount of time per day sending emails and\nmessages. One time saving trick you can consider is giving someone else access to your email and paying them to send the\nmessages on your behalf then you handle the replies. How comfortable you feel doing that is of course your call.\nIt's hard to estimate how quickly you might be able to hire through cold outreach. If you're lucky you could get the\nright person in for an interview next week. More realistically, I'd expect this approach to take up to 6 months before\nit results in a hire.\nRecruiters\nHiring a technical recruiter to make your first engineering hire is hard to make work. The strategy they'll probably use\nis cold outreach and it's unlikely they'll achieve higher response rates than messages coming from a founder.\nWhat a recruiter does have more of than you is time and focus. They can send more messages per day and this could get\nmore candidates replying if the gap between their effectiveness and yours is narrow enough. My recommendation if you go\ndown this route would be to find recruiters who work on a contract basis. You can agree on a rate per hour, how many\nhours they'll work per week and for what period of time. Then if they're producing candidates, great. If not, you cancel\nthe contract. Anecdotally, I'm noticing a trend where more of the best recruiters at companies are starting to work as\nindependent contractors for multiple startups.\nBefore working with a recruiter make sure you've invested time in really training them on how to pitch your company\nwell. I'd give them all the information they need, give them a day to prepare and then ask them to pitch it back to you.\nOnly work with them if they do this well.\nMeetups\nMeetups are difficult to rank on this list because their effectiveness has high variance depending on both the type of\nevent and the type of person you are. Meetups that are primarily business conferences with corporate sponsors who send\nalong some members of their IT department are almost certainly a complete waste of time. Smaller, informal meetups with\na deeply technical agenda where people bring laptops and code can be great. Even these will still only be an effective\nstrategy if you're either:\n(1) An engineer who can gain the respect of other engineers through technical conversation. (2) A highly charismatic\npersonality\nYou need to honestly decide if you're either of these. If you're unsure whether you are (2), you probably aren't. If\nyou're (1) and tend to avoid group meetups, you'll have to get over this if you're the only technical founder.\nConvincing engineers to join is one sales job you can't delegate entirely to your cofounder.\nEven if you attend great technical meetups and you're the right type of personality, it's still unlikely you'll make a\ngood hire quickly through this channel. The better meetups have fewer people and they're primarily not there to find a\njob. It's a good way to build a network of smart people, which will become valuable as you scale, but not a good bet to\nsolve your problem right now.\nAgencies\nTraditional recruiting agencies tend to have bad adverse selection bias on the candidates they can engage. Most good\nengineers won't work with them and the engineers that do are being sent out to as many companies as possible. I can't\nthink of a startup I know that made their first engineering hire through a recruiting agency. While I'm sure there are\ncounter examples, it's more likely using an agency will suck up a lot of your time with little ROI. The best agencies\ntend to focus more on executive level hiring which won't be helpful for you.\nConclusion\nAs I said at the start, hiring your first engineer is incredibly hard unless you're lucky enough to have a friend you\ncan convince to join. To make any other strategy work you need to treat hiring like you did fundraising and start by\nrefining your message and pitch. Candidates think differently to investors and you'll need to tweak the message that\nworked for your fundraise e.g. candidates will think less about your market size and more about your most interesting\nproduct challenges.\nOnce you understand what resonates most about your company with engineers you can switch gears to working through\nchannels to get that message out to potential candidates. Then be prepared for a lot of struggle and rejection until you\nfind the right person. Good luck!\nIf there are any other strategies you've tried with success that should be added here, please do email me\n(\n(redacted)\n), I'd love to hear them.\nIf you're hiring engineers and would like to try Triplebyte,\nuse this link\nto\nsign up and you'll get a special $15,000 hiring fee for your first hire"
    }
  },
  {
    "name_blog": "Convincing engineers to join your team",
    "description_blog": "Once you've found an engineer you want to hire, the final step is presenting them an offer to join your team and convincing them to accept it. This is advice for increasing the percentage of the offers you make that are accepted.",
    "authors": [
      "Harj Taggar"
    ],
    "related_categories": [
      "People",
      "Compensation",
      "Management",
      "CTO",
      "Early Stage",
      "Technical",
      "Engineering",
      "Hiring",
      "Recruiting"
    ],
    "page_url": "https://www.ycombinator.com/library/4G-convincing-engineers-to-join-your-team",
    "content": {
      "table_of_contents": [
        "Speed",
        "Technical Phone Screen",
        "Onsite Interview",
        "Making The Offer",
        "Culture",
        "Closing",
        "Exploding Offers",
        "Big Company Competition and Bay Area Relocation",
        "Feedback and Iterate"
      ],
      "whole_content": "Harj Taggar\nis cofounder of\nTriplebyte\n(YC S15). Triplebyte\nhelps great engineers find work at the fastest growing companies in the world, with the least amount of time and\neffort.\nOnce you've found an engineer you want to hire, the final step is presenting them an offer to join your team and\nconvincing them to accept it. This post offers advice for increasing the percentage of the offers you make that are\naccepted. Since working on Triplebyte I've been surprised by just how much variance there is in this rate among\ncompanies. Companies that use Triplebyte have acceptance rates ranging from as low as 10% to as high as 90%.\nGenerating an offer for an engineer is expensive. It takes time to source good candidates and then hours of your\nengineering team's time doing technical phone screens and onsite interviews. You'll likely need to complete five onsite\ninterviews to generate a single offer (the industry standard onsite interview to offer rate for engineers is\naround 20%). Assuming six hours of engineering time spent interviewing that's 30 hours of engineering productivity lost.\nGiven this cost it makes economic sense to work as hard as you can to get your offers accepted.\nThe work to increase your offer acceptance rate begins well before presenting the offer itself. It starts with designing\na great candidate experience at each step leading up to the offer. Every interaction a candidate has with you must\nbalance your need to extract signal from them while still getting them excited about joining. This begins with doing\nsomething seemingly simple - being responsive.\nSpeed\nRead this\nblog\npost\nto\nget an engineer's perspective on the importance of speed and responsiveness in their job search process. Being fast and\nresponsive seems like obvious advice and yet we still see companies move slowly and miss out on good people. There's two\nreasons this happens.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThe first is entropy. Maintaining an organized system for managing candidates is hard. It will naturally trend towards\ndisorder unless you work really hard against it. This is especially true for larger companies with more people and\nprocesses. As a smaller startup speed is a huge advantage you have over them when competing for engineers.\nMake this easier for yourself by using software to manage and track the status of your candidates. At first you can use\nsomething simple like a spreadsheet or Airtable. As you grow and need to setup interview panels to gather feedback from\ninterviewers you should graduate to a real ATS (Applicant Tracking System) like\nLever\n. Make it clear\nwho has responsibility for reviewing and acting on candidates every day.\nThe second reason is psychological. It's easy to believe that candidates who drop out because you were slow weren't\ninterested in your company anyway. This is bad reasoning and will make you miss out on good candidates. Managing a job\nsearch process quickly becomes overwhelming, especially for the best candidates with the most options. To even have the\nchance to close the best candidates treat every candidate dropping out before you replied them as a failure, not a lucky\nescape.\nWith an organized and responsive process in place you can now focus on optimizing the quality of each candidate\ninteraction. This starts with the first call.\nFirst Call\nThe first call with a candidate typically lasts for about 25 minutes. I'd recommend the following agenda:\nIntroduce yourself, the company and what you work on.\nAsk the candidate to introduce themselves and talk about what's important to them in their next role (if you did the\ninitial outreach and they're not actively looking, you can soften this to e.g. “how do you think about developing\nyour career and skills in the future?”).\nAsk questions about their skills and experiences to see if they match with what you're looking for.\nPitch the work being done at the company and why it's an exciting time to join now.\nFinish with answering any questions they have and explain what the next steps in your hiring process are.\nIt's common to leave asking the candidate what they're looking for until the end of the call. I think that's suboptimal\nbecause you miss the opportunity to tailor your pitch around it throughout the call.\nIf you're an early stage company (less than 20 people) a founder should always be doing this call with engineering\ncandidates. Commonly you'll have one technical founder and one non-technical/sales founder. I'd recommend the sales\nfounder do these calls even if they can't speak in detail about the technical challenges. This gives the technical\nfounder more uninterrupted time to build (\nmaker vs manager schedule\n).\nThe sales founder should at least have enough sales ability to convince engineers to meet the technical founder in\nperson to learn more about the technology.\nAs you grow you'll hire a recruiter and typically they'll do these calls. I'd recommend doing the following to best set\nthem up for success:\nAsk your recruiter to send you a monthly report on number of first calls they're doing and the % that opt'ed out of\ncoming onsite. Have your recruiter keep a list of reasons why candidates said they wouldn't move forward and\ncontinually review these with them to improve the pitch.\nAssign one engineer to train your recruiter on how to talk about the interesting technical challenges at the\ncompany. Have them listen to mock pitches, give feedback, and repeat. I often see companies give their recruiter no\nhelp in learning how to best pitch the company and then complain when they see low conversions. That's not fair to\nthem nor optimal for you.\nAsking technical vetting questions is difficult for recruiters as they're usually not technical. This is usually the\nmost awkward aspect of the interactions between engineers and recruiters. Give your recruiter support and structure\nso they can do this well. I'd advise giving them specific technical questions to ask. One idea I've seen companies\nuse to good effect is making them multiple choice format so the recruiter can read out the answers and ask the\ncandidate to pick one that fits best. This helps your recruiter feel confident and provide a better candidate\nexperience.\nIf you're working on a deeply technical product that doesn't yet have marquee customers or traction, I'd actually\nrecommend having an engineer do these first calls, at least for particularly promising candidates. In this case your\nmain selling point is the depth of your technical challenges and it'll be very hard to find a recruiter who can\npitch those well.\nTechnical Phone Screen\nIf the first call goes well you'll usually move the candidate forward to a technical phone screen with an engineer\n(companies that use Triplebyte will skip these phone screens and move straight to the onsite). These phone screens are\nusually 45 minutes of the candidate working through a coding problem and screen sharing. I'd recommend allotting one\nfull hour for the phone screen. 45 minutes for working through a technical problem and up to 15 minutes for a\nconversation between the candidate and engineer to ask each other questions.\nIdeally you want to select the engineers who are best at pitching your company for these phone screens. There are also\nways to make the experience more candidate friendly e.g. letting them pick from several problems to solve during the\ncall. This creates some more work for you but if a candidate can show their strength on a problem they enjoy they'll\nhave a more positive feeling towards you. You can also let them code in their own environment and screen share with you\ninstead of using an artificial environment (though some of these e.g. Coderpad do have advantages of better\ncollaboration and recording features).\nIf the technical phone screen goes well, the next step is the onsite interview.\nOnsite Interview\nThe onsite interview will be the first time a candidate meets your team in person. Their experience throughout the day\nwill be a huge deciding factor in where they end up. It's important to think through the details of the candidate\nexperience when setting up your onsite. Start with the basic logistics and be sure to:\nSend an email ahead of time with clear directions to the office.\nAssign someone to greet them when they arrive\nHave somewhere they can hang out if they arrive early (even if it's just a spare desk and chair)\nA standard onsite interview agenda will typically look like this:\nQuick welcome and talking through the agenda for the day (5 minutes)\nTechnical interview 1 (1 hour)\nTechnical interview 2 (1 hour)\nLunch (1 hour)\nTechnical interview 3 (1 hour)\nTechnical interview 4 (1 hour)\nBehavioral / culture interview (45 mins)\nClosing Q&A for them to ask about the company (25 minutes)\nIf you're early stage I'd recommend having at least one of the founders involved in the closing Q&A. It can also be a\ngood idea to include a demo or roadmap section here at the end. Give the candidate a sneak preview of a new feature\nyou're working on or talk through the most exciting upcoming projects so they finish the day feeling excited about your\nfuture momentum.\nWe asked engineers using Triplebyte what caused them to have bad experiences during onsite interviews. Almost all the\nreplies centered on their interactions with the interviewers. The top three complaints were interviewers being (1)\nunprepared and not knowing anything about them (2) not being familiar with the technical questions they asked and (3)\nbeing determined to prove their intelligence to the interviewee.\nIt's unlikely an engineer will accept your offer if they had a bad interaction with an interviewer. I'd make the\nimportance of providing a good interview experience a part of your company culture. You can start by writing a simple\ninterviewing guide for your team that emphasizes the importance of being on-time, prepared and friendly when\ninterviewing. You can also only pick the engineers who are friendliest and best at representing your company as\ninterviewers.\nFor question familiarity, have a centralized question bank that interviewers work through together before using them on\ncandidates. For more ideas on the kind of content and questions you can use in technical interviews, my co-founder Ammon\nwrote a detailed post on\nhow to interview engineers\n.\nIt's also great to do something that makes lunch a chance for the candidate to get to know the team. At Triplebyte we\nSlack our team in the morning that a candidate is interviewing and ask people to head over to the lunch table at the\nsame time. Our office manager introduces the candidate to the team and we do an icebreaker where the candidate gets to\nask a question which everyone goes around and answers (we tell them to think of this ahead of time and make it\nlighthearted). It's a good way for them to get to know the team and is usually quite fun. We've had candidates tell us\nthis experience was the deciding factor in joining.\nMaking The Offer\nAfter a successful onsite you'll make the formal offer and the work to get it accepted really starts. The first step is\nmaking sure you actually present the offer details. A complaint we hear from Triplebyte candidates is being asked how\nlikely they would be to accept an offer before knowing the actual offer details. The reality is that compensation\ndetails are a large factor in where people decide to work and you can't expect someone to know if they want to work for\nyou without giving them that data.\nCreate a formal offer letter template that includes these details:\nSalary and benefits\nSigning bonus details (if applicable)\nHealth insurance details (include a link to the policy documents)\n401(k) details, if any\nVacation policy details\nEquity\nTotal number of shares/stock options presented\nTotal number of shares outstanding\n% ownership that represents\nExercise price for options\nVesting schedule details\nWhen presenting the offer I'd recommend doing things in the following order:\nStep One: Call to tell them they'll be receiving an offer\nHave the hiring manager (if you're early stage that's the founder) call the candidate as soon as possible after the\nonsite. Do it the same day if you can. Tell them the day went really well and you'd love to make them an offer to join\nthe team. Mention specific reasons why you're excited about them joining the team and reference what they did well\nduring the day. You could even have multiple people on the call and ask each of them to mention a specific reason they'd\nbe excited to work with the candidate. Tell them the next step will be you (or a recruiter) calling them back to talk\nthrough offer details.\nStep Two: Call with offer details\nCall the next day to talk them through the offer details. Explaining salary and benefits is fairly straightforward. For\nequity, before giving any details, ask them how familiar they are with equity concepts like stock options or RSUs.\nIf they have little familiarity, do not overwhelm them with information on the call. Give them a quick explanation\nof how equity works. Talk them through the numbers of your offer and tell them you'll send them some resources on\nequity to read through on their own time.\nIf they're experienced with equity, then go straight into the numbers and ask if they have any questions about the\ndetails they'd like you to talk more about.\nTell them you'll be sending through the formal offer letter, documenting all these details, via email shortly. They\nshould take some time to digest that and the next step would be a follow up call to talk through their thoughts. Offer\nsome times for that call right then.\nIt's tempting to push hard for a decision on this call. I'd recommend not doing that to avoid the candidate feeling\npressured. This will make it harder for you to stay engaged with them as they go through the decision making process.\nIt's fine to ask them if they have any initial thoughts or questions and then move on if they seem hesitant to go into\ndetails. It is also ok to ask them about their decision making timeline if you haven't discussed that already.\nCulture\nNow the offer has been presented it's time to focus on closing. To be effective at closing candidates you need to work\nhard at selling them on the most exciting reasons to join. This sounds obvious but there is a temptation to stop if the\ncandidate doesn't seem immediately excited or asks probing questions about your business. The reality is that working at\nyour company will seem more exciting to you than the candidate because you've had time and data to build up that\nexcitement. Now you have to pull out all the stops to transfer that excitement.\nIt's common at this stage for candidates to start probing more deeply into questions about your company culture. They're\ntrying to build a picture of what it will be like to work with you on a daily basis. We've observed at Triplebyte that\nmost companies use fairly generic descriptions of their culture. This is optimal for not offending candidates but won't\nmake your company stand out. To use your culture as a differentiator you'll need to take some risk. You could try\ndescribing your culture with tradeoffs e.g. don't just say you're “collaborative”, say you're willing to trade the\nupside of collaboration (better ideas and execution) for the downsides (reduced personal autonomy to just do things).\nDepending on the content you choose, being different in describing your culture could backfire or it could give you a\nhiring advantage with the right candidates. Whichever approach you take, make sure you and your team are prepared to\ntalk in detail about this with candidates. Sounding unprepared about culture is itself a negative signal about how much\nthe company cares about and values its team.\nClosing\nMake sure to get your team involved in the closing process. Ask everyone who met the candidate during the onsite to send\nthem a follow up email with specific reasons they enjoyed it and offering to talk with them again. If you're small it's\nok if this is literally the entire company. If you have multiple teams and you already know which team the candidate\nwould be working on, make sure that team reaches out. Encourage them to talk about the details of what the first two\nweeks would look like and who would help get them ramped up. Nitty gritty details will make the offer feel more real and\nwe've seen this be the deciding factor for candidates.\nIf you're early stage, include your investors in every engineering offer you make. Then become selective as you grow and\nthe hiring pace picks up. Choose the investor you think will be most likely to effectively sell that candidate and give\nthe candidate context on why you thought that in the intro email. Don't pick an investor who isn't up to date and\nfamiliar with the details about your company.\nAlso think about more than just closing the candidate. Think about their personal circumstances and other decision\nmakers involved. The best recruiters we work with at Triplebyte are continually taking notes about this and referring\nback to them to take action. I've seen a great recruiter learn early on that the candidate's wife was reluctant to move\nlocation because she was worried it'd negatively impact her medical career. The recruiter spent time researching places\nshe could work, gathered contact information and compensation data, and asked to speak with the wife to share it. The\ncandidate accepted the offer shortly afterwards.\nWhat matters most during the closing process is how long its been since your last communication with the candidate. You\nneed to strike a balance between proactively following up without being overbearing. It's good to find reasons to reach\nout again that aren't asking “have you decided yet?” even if you both know what the real agenda is. For example you\ncould send them links to recent news stories you think they'd be interested in based on what you learnt about them\nduring the onsite. If you're doing team events send them an invitation to join. Your goal is to stay near the top of\ntheir mind as they're deciding but not suffocate them.\nExploding Offers\nOne tactic companies use for closing is putting an aggressive deadline on the offer e.g. we need a final decision within\na week. I'd advise against this because good candidates with multiple options will push back. It's also something an\nexperienced recruiter at a competing company can use as ammunition against you. If a candidate tells them about your\ndeadline they might respond well I'd question the culture that company is trying to build if they only want to hire\npeople who can decide quickly. We want everyone to be sure this is the best place for them over the long term and would\nnever pressure someone into rushing their decision.\nA softer version you can try is an expiring signing bonus. We've seen this be effective and have used it ourselves with\nsuccess at Triplebyte. The way I'd present this would be We want you to take all the time you need to make the right\ndecision for you (and your family). At the same time we can't leave offers hanging out there indefinitely as things can\nchange rapidly at a startup. If you are able to make a final decision by X date, we'd be able to offer you a $X,000\nsigning bonus.\nBig Company Competition and Bay Area Relocation\nThere are two common scenarios that present unique closing challenges - competing against big companies (Facebook and\nGoogle especially) and candidates considering relocation to the Bay Area. I'll talk through some advice on handling\nboth.\nAs a startup it's hard to compete with Facebook and Google compensation packages, especially for senior engineers.\nUnless you're also a public company, you won't be able to compete on total compensation. Still, you can win - we've seen\nstartups successfully compete against them on Triplebyte. These are the arguments we've found are most successful:\nLearning\n: You learn the fastest by being given real decision making responsibility. Large companies won't give you\nthis kind of responsibility for years, they need to have checks and balances in place to ensure no single person -\nespecially a new hire - could cause too much damage. Fast growing startups don't have this luxury and you'll be\nthrown straight into making decisions that could materially affect the trajectory of the company.\nCareer Progression\n: Silicon Valley and the technology industry are unique because you can rise up through the\nranks of a company faster than anywhere else (e.g. the Chief Product Officer of Facebook ($500bn market cap) is 36\nyears old). This only happens by joining a startup that grows fast and keeps throwing more responsibilities at you.\nGive the candidate examples of how this has already been happening for people at your startup and paint a specific\npicture of how the candidate could progress over the next few years with you.\nOpportunity cost\n: At any point in time there will always be the safe option of working at a public technology\ncompany. The names might change but the experience of working at one is fungible. The experience of working at\nstartups can vary wildly and you should present your startup as a unique opportunity right now because of the team\nand market. They can always go back to the big company experience if it doesn't work out.\nMentorship\n: One concern engineers, especially juniors, can have about working at a smaller startup is they won't\nlearn best practices and the “right” way to do things. It will help a lot if you have experienced engineers on your\nteam who would be willing to provide mentorship. If you do be sure to tell the candidate this.\nFor candidates who would need to relocate to the Bay Area, they may be frightened by the cost of living, which has both\nincreased in dollars and frequency of press coverage. While this is ultimately a personal decision for the candidate I\nhave been surprised by how often even engineers don't take an analytical approach to running the numbers to be sure what\ntheir actual cost of living would be. You can be proactive about this. Don't assume that when a candidate says they\ndon't think they can afford to live in the Bay Area that they've run through the numbers. If you really want them to\njoin then spend time helping them think through this. You can create a spreadsheet template with cost of living\nassumptions and work through this together with them to figure out what their real monthly income would be. We also\nwrote a\nblog post\ntalking\nthrough the pros and cons in detail that you could share.\nFeedback and Iterate\nNo company has a 100% offer acceptance rate and you will inevitably miss out on closing candidates you really wanted.\nThat's an inevitable part of hiring and it sucks. Use every rejected offer as an opportunity to gather data on how you\ncan improve your hiring process and pitch. Do a quick exit interview with each candidate and ask for feedback on why\nthey made the decision and their general feedback on the quality of your hiring process. Review these regularly with\nyour team and use them to iterate and improve your interviewing and closing process over time.\nIf you treat optimizing this process like you would optimizing your product you will see improved conversions and have\nmore success hiring. Good luck!\nIf you're hiring engineers and would like to try Triplebyte,\nuse this link\nto\nsign up and you'll get a special $15,000 hiring fee for your first hire"
    }
  },
  {
    "name_blog": "The hidden forces behind China's content king Toutiao",
    "description_blog": "Toutiao, a news aggregator, has quickly become one of the top apps in China. Learn how it grew into its popularity and why users use it more often than any other daily app.",
    "authors": [
      "Anu Hariharan"
    ],
    "related_categories": [
      "International",
      "China",
      "Growth",
      "Consumer"
    ],
    "page_url": "https://www.ycombinator.com/library/3x-the-hidden-forces-behind-china-s-content-king-toutiao",
    "content": {
      "table_of_contents": [
        "1: Mind the gap, seize the opportunity",
        "2: A data network effect deliberately built across the entire system",
        "3. From content aggregation to content destination",
        "4. Unencumbered by formats",
        "5. Early monetization and alignment with product"
      ],
      "whole_content": "Special contributions from\nLuke Pryor\nand\nBrad\nLightcap\n.\nDisclosure: I’m a personal investor in Toutiao.\nUsing Machine and Deep Learning to Create and Serve Content, China’s Toutiao Created a Product with Engagement Similar\nto that of Social Networks - All without a Social Graph\nToutiao, one of the flagship products of Bytedance*, may be the largest app you’ve never heard of–it’s like every news\nfeed you read, YouTube, and TechMeme in one. Over 120M people in China use it each day. Yet what’s most interesting\nabout Toutiao isn’t that people consume such varied content all in one place… it’s\nhow\nToutiao serves it up. Without\nany explicit user inputs, social graph, or product purchase history to rely on, Toutiao offers a personalized, high\nquality-content feed for each user that is powered by machine and deep learning algorithms.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nGoing a step further than merely serving up content, Toutiao’s algorithms also create content: During the 2016 Olympics,\na Toutiao bot wrote original news coverage, publishing stories on major events more quickly than traditional media\noutlets. The bot-written articles enjoyed read rates (# of reads and # of impressions) in line with those produced at\na slower speed and higher cost by human writers on average.\nThe average user spends more than\n74 minutes\neach day in Toutiao -- that’s more than the average user spends on\nFacebook\n1\n, and more than twice what they spend on\nSnapchat\n2\n. More than half that time is spent watching short-form\nvideos; this coupled with over 10 billion video views per day makes Toutiao the YouTube of China (along with, of course,\neverything else it offers).\nHow did Toutiao do this? Especially without massive consumer platforms at scale like those orchestrated by Chinese\nconglomerates Alibaba, Baidu, and Tencent? In this post I’ll explore how Toutiao got to 120M daily active users. Toutiao\ndoesn’t attribute its growth to any one factor, but rather to the interplay between many tactical and strategic\ndecisions it made starting at launch; specifically, five key advantages, all of which I have outlined below. And while\n“super apps” aren’t as common in the U.S., I believe there are specific lessons in this case that can inspire others\nin building their own products and platforms.\nBut first, a bit of background\nToutiao launched in 2012. The app uses machine and deep learning algorithms to source and surface content that users\nwill find most interesting. Toutiao’s underlying technology learns about readers through their usage – taps, swipes,\ntime spent on each article, time of the day the user reads, pauses, comments, interactions with the content and location\n– but doesn’t require any explicit input from the user and is not built on their social graph. Today, each user is\nmeasured across millions of dimensions and the result is a personalized, extensive, and high-quality content feed for\nevery user, each time they open the app.\nSources: Snapchat - S-1 filing. Instagram -\nRecode\n. Facebook - Q1 2016 earnings report.\nThe Five Hidden Forces Behind Toutiao\n1: Mind the gap, seize the opportunity\nWhile timing is everything for a startup, it takes deliberate effort to build an addictive app. Toutiao’s timing was\nfortuitous, but its exploitation of this unique moment was deliberate. Toutiao launched as smartphone use was taking off\nin China: mobile penetration increased from nearly nothing in 2010 to 65%\nby 2014\n3\n. Moreover, many of the largest content providers had not\nyet developed mobile apps or mobile-friendly sites, meaning that true mobile-optimized information and entertainment was\nrare. By mid-2012, there were only six significant news apps on the Chinese Android platform. Four of them were direct\nextensions of existing news portals with limited mobile optimization, and the other two were aggregators that relied\nexclusively on slow and impersonal editor input to determine what stories to show. Further, the Chinese audience's\ndemand for content (both articles and videos) was underserved by Chinese social networks such as WeChat and Weibo.\nWeChat launched as a messenger and to this day has a closed social network (i.e. sharing/moments are private to friends\nonly).\nToutiao stepped into this gap with an easy-to-use, personalized, informative, and addictive mobile-first app. From the\noutset, Toutiao was extremely easy to start using – all it took was a download. There was no need to create an account\nand password, to link it to social media (unless the user so desired), or to provide information on interests or\npreferences. The app’s simple design also made it intuitive to use with no prior knowledge or tutorials. For any app,\ndriving initial engagement – moving from downloads to DAUs – is notoriously difficult. It’s typical to lose users at\nevery step of the process due to discouragement, confusion, or annoyance.\nThe name of the app Jinri Toutiao (meaning “today’s headlines” in Chinese) and the icon of the app were catchy for\nusers, resulting in excellent user growth. It was also the first time various news articles were aggregated in one\nplace. From the very early days, Toutiao tracked information about each user - their taps, swipes, time spent per\narticle and location to power the recommendation engine which we will discuss later in the post. One month after launch,\nToutiao became a personalized news aggregator for several of its users. The product, the only one of its kind and\ndelicately designed at that time, led to a rapid growth. They hit 1M DAUs only four months after launch. Toutiao gave\nnew internet users something to “do” when their mobile time was still up for grabs. Toutiao updated the app almost\nweekly throughout its first year, as it consistently innovated, iterated, and improved its features and algorithms, and\nthis resulted in improved retention over time.\nIn the years that followed, competition for user share of attention on mobile would drastically increase – the number of\nmobile apps available in China more than tripled in the three years from 2012\nto 2015\n4\n. But Toutiao’s early lead meant that, by the time\ncompetitors arrived, it already had an important and valuable foothold.\nThe image below shows the personalized feed of two different users.\n2: A data network effect deliberately built across the entire system\nYou can have all the algorithms in the world, but without an addictive product there is no data, and without data, no\nalgorithm can make the system better. Matt Turck has written about the power of the data network\nhere\n. Simply put, the more users use your product, the more\ndata they contribute. The more data they contribute, the smarter your product becomes. The smarter your product is\n(e.g., better personalization, recommendations), the better it serves your users and they are more likely to come back\noften and contribute more data — thus creating a virtuous cycle.\nBy building an addictive product, Toutiao generates engagement data from their users. That data is fed into Toutiao’s\nalgorithms, which in turn further refines the products’ quality. Ultimately, the company plans to use this virtuous\ncycle to optimize every stage of what they call the “content lifecycle”: Creation, Curation, Recommendation and\nInteraction.\nCreation\nEver since the invention of written language, content creation has been the exclusive domain of humans. Toutiao looks to\nchange that. It’s begun with Xiaomingbot, an artificial intelligence that has already published more than 8,000 stories\non the platform to-date. It debuted during the Olympics in 2016, where it published stories on major events more quickly\n(approximately 2 seconds after the event ended) than traditional media outlets. Indeed, the bot-authored articles\nenjoyed read rates (# of reads and # of impressions) in-line with those produced at a slower speed and higher cost by\nhuman writers on average.\nBelow is a screenshot of an article written by the Xiaomingbot describing the results of the tennis match between Andy\nMurray and Juan Martin Del Potro during the 2016 Olympics.\nTo achieve this, Toutiao had to overcome a couple of significant technical challenges:\nFirst, writing stories on Olympic game results required data, and Toutiao pulled it from three sources: [a] real time\nscore updates from the Olympics organization, [b] images from an image-gathering-company it had recently acquired to\nfind relevant visual media, and [c] monitoring live text commentary about the game. It also started with four sports —\nTable Tennis, Tennis, Badminton and Women’s Soccer — that were easier to recap from a technical standpoint (Table\nTennis, Tennis and Badminton are “turn-based” games and the rules of the games are simpler vs. other sports. Unique\naccess to a high-quality data source for Women’s Soccer made that the fourth game covered.)\nSecond, Toutiao had to figure out how to combine data from these three sources to ensure an internally consistent and\nrelevant story. This was a much larger challenge than even accessing and interpreting the data in the first place. Any\nselected image needed to be relevant to the results of the event, and also appropriate for the takeaways from the\ncommentary. This, in turn, required Toutiao’s AI team to integrate natural language processing capabilities with\ncontextual image recognition. They ended up with a combination of a grammar-based representation for generating story\ntemplates, a ranking algorithm to select relevant sentences from live text commentary, and an image-text matching\nalgorithm to tie it all together. The system also employs convolutional neural networks to analyze content in candidate\nimages. By training on historical data, the model is able to pick the most relevant and visually appealing image for the\nstory. They also use sequence-to-sequence deep learning algorithms to summarize existing stories into daily highlights\nand suggest better titles for articles.The system employs recurrent neural networks to compute vector representation for\nsentences and these sentence vectors are further fed into a ranking model to pick concise summaries for each article.\nThe products of these efforts – 450 published stories with 500-1,000 words during the Rio Olympics – that were hugely\nsuccessful. They enjoyed read rates (# of reads divided by # of impressions) on par with those produced at a slower\nspeed and higher cost by human writers. Toutiao has extended this capability beyond sports to over 8,000 stories\nto-date, and is working hard to close some of the remaining technical loopholes that make human writers recognizable.\nCuration\nA major engagement driver for Toutiao in its early days was “soft news”– areas like celebrity gossip, pop culture and\nlifestyle articles. This was no accident. Contrary to official news, which was distributed by well-known state-owned\nnews sources, soft content was distributed across the internet on a plethora of individual sites. In short, there was no\ncentral place to access the content: users who were looking for it would have to invest meaningful time in visiting\ndifferent sites, and had no assurance they were getting the most interesting information. Toutiao changed that. In\nowning, centralizing, and optimizing the distribution, it reduced the time a user needed to find content to nearly zero,\nand it increased their confidence that they were reading the most interesting stories. This created real value for\nusers.\nAt its core, content curation is a two-sided problem: the curator must find content, in addition to serving it to its\nusers. The first requires visiting websites, identifying stories, and collecting relevant metadata. The second requires\ncontinuously updating a central repository of stories, and creating as many personalized versions as possible. Both are\nprocess-intensive tasks where algorithms have a distinct advantage over humans. Toutiao’s only meaningful competition in\nthis space when it launched were web portals where human editors handled this work, and Toutiao’s use of algorithms gave\nit a major advantage over the manual competition.\nThe speed with which the system could do what took human editors much longer translated directly into value for\nToutiao’s users. Toutiao could gather more content more quickly and at a lower cost, creating a major advantage in a\nbusiness were customer value is directly tied to content quality, relevance and refresh rate. The use of algorithms also\nmeant that each user could have their own, interest based and continuously updated profile – something that no human\neditor would ever have the time to do.\nToutiao also uses algorithms to identify and filter out low-quality content. A content distribution platform is only as\ngood as the content it distributes. The days of mass-distributed cookie-cutter content (e.g., newspapers, magazines) are\nover. In Toutiao’s world, the distribution platform only serves what is interesting to its users. False reporting and\nspam are major issues in the media industry. Toutiao’s underlying technology uses a text classification algorithm to\ndetermine if an article is fake news, uses clickbait titles, or doesn’t meet Toutiao’s quality standards. Here, Toutiao\nalso leans on user moderators to flag fake articles and employs human moderators to arbitrate on disputed reporting.\nRecommendation\nContent recommendation is the feature for which Toutiao is best-known, and to which it owes much of its success and\nreputation. The use of machine and deep learning algorithms at this stage of the content lifecycle is what has sets\nToutiao apart from its peers, and is key to driving continued user growth and retention.\nThe question that the recommendation engine is trying to solve is simple:\nwhat are the one hundred articles the\nplatform can recommend to each user that are most likely to result in continued engagement?\nThis is a question with\nmajor consequences – the AI team has recognized that 100 headlines is a retention “threshold” (users that do not retain\nlong-term tend to drop off dramatically after seeing ~100 headlines, similar to Facebook’s “10 friends” rule). It is\nalso a question that humans are unsuited to answer: no human editor could ever regularly and quickly identify the\noptimal set of headlines for every one of the app’s new users.\nAs simple as the question may be, the solution is complex. For every new user, Toutiao blends signals from three key\nareas to create a feed that it hopes is engaging and will push users over the 100-headline threshold:\nUser profiles: are initially built based on the app’s understanding of the user’s demographics (their age, location,\ngender, and socio-economic status)\nContent: to understand the content of articles, Toutiao turns to natural language processing to determine if the\narticle is trending, whether it is long or short, and the timeliness of the article (some articles are evergreen\nwhile others have a very short half-life)\nContext: pertain to location-related data (localities like geography, weather, local news, etc.)\nThe underlying algorithms must then identify the strongest statistical match between the user’s profile, its own content\nprofile, and context, and it must do this on a continual basis. This matching is meant to optimize the percent of\narticles a user reads (clicks on) and the percent of articles that a user finishes (measured by the time spent on the\npage). When a user first opens the app, the system uses the basic data in the profile for the matching: a user in\nSilicon Valley, for example, may be more likely to click on articles about tech. The system also makes sure to show a\nvariety of articles to assess interest/disinterest– in doing so, can help users discover previously unknown content and\ntest their potential interests. Over time, as the app collects user information, these recommendations get further and\nfurther refined. The engine learns quickly – for most users, it takes less than one day to successfully learn their\ninterests (indicated by 80% read rates). The result is the case of strong user retention (>45%) that is similar to\nsocial networks and one of the largest time spent per user apps in the world.\nInteraction\nAs Toutiao has grown, interaction on the platform has become more and more central to its user value proposition. Rather\nthan leaving it to the users to find each other, Toutiao uses underlying algorithms to help enable meaningful\nconnections. Nowhere is this more relevant than in its recently developed question-and-answer feature, where the AI team\nwas tasked with developing a matching engine that links a question-asker with someone who can answer them. Toutiao\nrecently published a\npaper\nfor the ACL conference touting these results. Their\nproposed “Conditional Focused Neural Question Answering with Large-Scale Knowledge Bases approach” achieves an accuracy\nof 75.7% on a data set of 108K questions, and outperforms the current state of the art (better than the Memory Network\nand LTG-CNN methods on the benchmark dataset) by an 11.8% margin.\nToutiao’s underlying technology not only creates a better user experience, but also serves to strengthen the company’s\ncompetitive moat. More compelling content and interactions meant users would spend more time on the platform, and the\nmore time they spent on the platform the better the use of algorithms became. The smarter the system is, the better it\ncan distribute content – and the more content creators it attracts. This, in turn, drives more users to the platform.\nAnd thus is born a strong data network effect - the power of the system grows exponentially with the scale of the\nsystem. There are competitors who have launched since then (especially after seeing Toutiao’s success), however it has\nbeen difficult to match the accuracy and efficacy of the Toutiao recommendation engine leading to continued rapid growth\nfor Toutiao.\n3. From content aggregation to content destination\nIt is not uncommon to see apps strive to move from content aggregation to content destination. However it is extremely\nchallenging from a brand and creative strategy to make that happen. Here is how Toutiao did it. Toutiao offered two\nsignificant benefits to content contributors over the platforms.\nStrong incentives via revenue sharing\nthat enabled writers to make money from very early on. In 2014, Toutiao rolled\nout incentive programs to attract more content creators to the platform. These ranged from offering office space, tools,\nminimum guarantees per month if they hit certain key milestones (e.g., # of articles, read rates) to sharing revenue\nvia monetization. Toutiao began monetizing via ads since 2014 and this enabled revenue sharing opportunities with their\ncontent contributors.\nThis was the function that launched Toutiao, but as it has grown, Toutiao has transitioned into a deeper platform for\ncontent generation, consumption, and connections. Today, it hosts more than 800,000 Toutiaohao accounts – professional\nmedia outlets, bloggers, and influencers who use the platform to share articles, images, and videos with Toutiao users .\nIt hosts many more users sharing short posts through Wei Toutiao. The result is the wide variety of content that Toutiao\nhosts today ranging from news to stocks to science to relationships. Top 20 categories account for only 60% of the\ncontent supply and no single category contributes over 10% of the content.\nBelow is an example of a variety of content that a user can choose from (the screenshot only displays the 40 of the 50+\nchannels users can choose from):\nLarger and more relevant audience\nthan other platforms that directly translated to increasing brand presence for\ncontent contributors. Almost all contributors create and distribute content on all platforms. But for many contributors,\nthey have the ability to attract more traffic from Toutiao due to the strong recommendation engine. One example is \"\n欢子tv“ ( Huanzi TV). This creator creates short videos about folks' lives and customs in the countryside of China.\nEach of his videos has an average of 700,000 views, while the views in his Wechat official account is less than 1/40 of\nthat on Toutiao. Toutiao has enabled the long tail of contributors to reach their most relevant audience more seamlessly\nthan any other platform in China.\n4. Unencumbered by formats\nInstead of being stubborn about their core format (e.g., listicles, long form content and news), Toutiao was quick to\nexpand to other formats when the data suggested they should. In 2015, at the time where most video platforms in China\nare focusing on long-form videos, Toutiao added video capability and started to support PGC short video content\n(typically 1-5 mins) on its platform. Toutiao had observed an increase in supply of video content in 2014 as\nconnectivity and infrastructure had improved significantly by 2014. Additionally, Toutiao rolled out several incentive\nprograms to promote video content creation on its platform. The transition from text to image to video was similar to\nwhat most US platforms have seen to date.\nLater in March 2016, Toutiao launched Toutiao Video (which is now renamed to Watermelon Video), a separate PGC short\nvideo app powered by the same algorithm engine as Toutiao. Similar to written content, the underlying algorithms\nrecommend the most relevant videos to users based on their interest graph. Toutiao is now the \"go-to platform\" for PGC\nshort video content. More than half of its 74 mins daily usage for each user is spent watching short-form videos and\nToutiao is close to exceeding 10 billion video views every day.\n5. Early monetization and alignment with product\nToutiao has reached unprecedented scale in revenue in a short time frame (5 years since launch and 3 years since they\nbegan monetizing) and it is remarkable that they are doing it without leveraging any social graph or product purchase\nhistory. Toutiao is on target to hit more than 15B RMB (>$2.2B USD) in revenue this year - one of the fastest growing\napps in terms of revenue in the history of the internet.\nOf the many things that Toutiao does, one element that is core to its model more than any other: it is good at\nidentifying what its users want to see. It is fitting, then, that its business model maps perfectly to that strength.\nToutiao generates revenue by matching relevant ads to users, using the same proprietary technology behind their content\ntargeting. This has three important benefits:\nFirst, it reduced the impact of monetization on the user experience – and may have actually improved the experience!\nUsers typically consider ads as intrusive and degrading to their experience, but ads aligned with user preferences are\nless so. In serving ads that are highly relevant to a user’s interests, Toutiao in many ways acts as a product discovery\nmechanism.\nThe second is that it increased the rates that Toutiao could charge advertisers. One of the key problems in advertising\nis identifying how to selectively place your ads in front of the highest potential customers, and advertisers spend\ncountless hours and enormous sums of money trying to target effectively. Toutiao’s technology, which solves this\ntargeting problem natively, represented a solution and saves advertisers from paying a big premium for it.\nThird, since the primary use case is to read and view content, users are more receptive to seeing relevant targeted ads\nand therefore there is more inventory available to advertisers.\nThe combination of all these three factors results in much better CTRs (Click Through Rates) on Toutiao vs. competitors.\nThird party survey data estimates Toutiao’s CTRs to be 200% better than its peers.\nImpact on the Future of Content Discovery\nToutiao is chipping away at their end goal, which is essentially to wipe away the concept of search and just serve up\naggregated, hyper-relevant content. We’ve seen “content aggregators” come and go in the U.S. but it is possible that\nthey are an idea whose time is yet to come – and that better algorithms will be the catalyst for success. Facebook and\nTwitter are both critical sources for consumption of news in the U.S. today. The other giant in the room here is Google,\nwhich in July announced that the feed in its mobile app would be increasing its use of machine learning to better show\ntheir users the information they will find most relevant and interesting – a feed that incorporates all types of news.\nSpecial thanks to the Toutiao team, Sharon Pope, Craig Cannon, Sonal Chokshi, Kat Manalac, Daniel Gross, and Ram\nParameswaran for reading multiple drafts of this essay.\n*About Bytedance\nFounded in March 2012 in Beijing, Bytedance is at the global forefront of innovating artificial intelligence\ntechnologies. Bytedance is dedicated to optimizing the connection of people with information, as well as promoting\ncontent creation and communications. Its flagship product, Toutiao, is the largest AI-powered content discovery platform\nin China, it delivers personalized content recommendations to every user based on their interests. Bytedance owns a\nseries of products celebrated by the users around the world, including Topbuzz, Flipagram and a series of UGC short\nvideo apps.\nBytedance established an AI Lab in 2016, leveraging extensive and complex datasets to conduct state-of-the-art research\nin artificial intelligence.\nNotes\n1.\nSource: Facebook Q1 2016 Earnings Call.\n↩\n2.\nSource:\nhttp://time.com/4272935/snapchat-users-usage-time-app-advertising/\n.\n↩\n3.\nSource:\nhttp://www.businessinsider.com/china-has-more-smartphone-users-than-us-brazil-and-indonesia-combined-2015-7\n.\n↩\n4.\nSource:\nhttps://www.statista.com/statistics/315485/china-number-of-mobile-apps-available/\n.\n↩"
    }
  },
  {
    "name_blog": "How to create and manage a board",
    "description_blog": "Best practices in creating and managing a board, including how to create board decks, preparing and running board meetings, and overcoming board issues.",
    "authors": [
      "Anu Hariharan"
    ],
    "related_categories": [
      "Board Management",
      "Growth Stage",
      "Investors"
    ],
    "page_url": "https://www.ycombinator.com/library/3w-how-to-create-and-manage-a-board",
    "content": {
      "table_of_contents": [
        "Managing Your Board",
        "Leveraging Your Board & Navigating Issues",
        "Final Thoughts"
      ],
      "whole_content": "With special contributions from Nic Dardenne\nOne of the most common questions we hear from founders is “How do I manage my board?” It’s something that provokes\nanxiety, because this is the first time the founder/CEO is subject to external supervision, and the board has powers\nthat include the firing of the CEO and the senior management. It is natural to feel this way. So, in this post, I’m\nsharing the collective wisdom of the YC community to help guide founders on best practices in managing a\nboard––including running board meetings and overcoming board issues. Where possible, I’ve included specific examples\ndrawn from YC companies and partners - of how companies have handled board issues.\nBut first, what’s the purpose of a board? The main role of a board is to help guide the company through major decisions,\nsuch as hiring and firing senior management; approving corporate actions (e.g. compensation, stock options, and budget);\nand offering guidance on strategic decisions that impact the business longer term. As a legal matter, every Delaware\ncorporation must have a board once it starts operating. At the start, this consists of the founders and the board\nfunctions mostly just as the technical body for approving corporate actions that must follow certain formalities (e.g.\noption grants). When people refer to setting up a board, what they usually mean is the process of adding outside\ndirectors, after the company raises money. These may be investor directors or independent directors.\nA note on board composition\nIf you need to have a board, who should be on it? Since the answer depends so much on the particular company and\nindustry, we won’t spend much time on board composition in this post, but the short answer is that the investors who\nlead your Series A and Series B rounds will typically join the board (later-stage growth stage investors don’t tend to\nask for board seats).\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nA smaller company will have 3-5 board seats and a public company board will have 7-9 seats. The composition tends to\nsignificantly change a few years before going public, beginning with recruiting independent board members. Later, as the\ncompany grows, specific topical expertise committees (e.g., audit and compensation) will also be formed.\nBut in terms of how to pick the\nright\nboard members - for an early stage company - the #1 attribute you need is\ntrust. And the only way you build trust is with time. We recommend getting to know partners at VC firms on your list at\nleast 6 to 9 months before your fundraise. Mathilde Colin, the CEO of Front, shares her experience doing this\nhere\n.\nBefore you add new board members, you should have a sense of their strengths, their weaknesses, and whether you would\nwant to work with them for 10+ years––that’s how long some of these boards may last, given the median time to IPO. So,\nhow do you get to know who these people really are beyond spending time with them? One thing you can do is check\nreferences with founders that those investors have worked with - just as with recruiting any talent.\nInterestingly, many founders feel that this reference check and balance may be causing many VCs to be less transparent\nin terms of providing feedback with the founders they work with - since they’re afraid of getting bad feedback and\nlosing their next investment opportunity - so a number of founders have started bringing on independents much sooner.\nIn their series B, Atrium founder Justin Kan added YC partner Michael Seibel––a former co-founder of his at\nJustin.tv\n.\nSimilarly, the Brex founders (Henrique and Pedro) added TFG Founder/CEO Victor Lazarte, another founder from Brazil who\nhas known them since the age of 16. The Faire founders (Max, Marcelo, and Daniele) added Brian Grassadonia, who leads\nSquare Cash and was their former manager at Square. These are all examples of CEOs’ desire for deeply trusted\nindependent board directors. Many of these relationships are likened to family relationships, where the family privately\nshares the kind of direct feedback no one else will. However this does not mean you add your friend to your board. You\nneed someone you really trust, who is 100% independent, and has the ability to help both you and your team as you scale\nthe company.\nManaging Your Board\nBelow, I’ve tried sharing our advice for managing your board - from how often to meet, to the materials you need - in\norder to ensure a useful and productive group discussion.\nMeeting Schedule\nAt the Series A stage, most meetings tend to be informal (like 1:1s), ranging anywhere from bi-weekly to even\nbi-monthly. By the time you reach the Series B stage, however, you should establish a regular meeting cadence: Every\nquarter, with all meetings scheduled a year in advance to ensure all board members can attend. Ideally, only in person!\nAgenda and length\nAs the CEO it is your job to set and own the agenda for the board meeting, which can last about 3 hours.\nBe careful not to treat board meetings as a status update meeting, but rather as a meeting where you can openly discuss\nstrategic or tough topics. That’s why the best CEOs tend to allot only the first 45 mins for sharing\nhighlights/lowlights and KPIs (Key Performance Indicators), and then use the rest of the time to deep dive on no more\nthan 1-2 strategic topics.\nHere’s an example agenda from the last board meeting I attended for Gusto (a company that offers payroll, benefits and\nHR for Small and Medium Businesses)––shared with their permission of course!\nHighlights / Lowlights (10 mins)\nPerformance / KPIs (50 mins)\nStrategic topic 1: Gusto 3 Year Strategic Plan (45 mins)\nStrategic topic 2: Engineering Org - Current and Future (45 mins)\nClosed Session - 30 mins (e.g., Any board matters such as approvals, sensitive topics, and feedback)\nWhat this shows is that the company spends no more than 1/3rd of the time on the state of the business, and then the\nmajority of the time on the strategic issues that shape its future. I also recommend identifying and aligning on key\nKPIs with your board members early as it helps the company standardize reporting across board meetings. It also “trains”\nboard members to efficiently process the most important ones quickly - focusing on the “why” (why did or didn’t you hit\ncertain goals?) - so they can turn to more strategic matters.\nWhat really allows Gusto to pull off their strategic focus within their board meeting, however, happens\noutside\nthe\nboard meeting: (1) They do a lot of prep work on the areas where they’re seeking input. Ideally this is a topic you’re\nalready discussing with your executive team so the materials can be leveraged for multiple discussions; and (2) They\nsend out a pre-read version of their board deck at least a week in advance, collecting questions from each board member\nin a Google Doc three days before the meeting. The Gusto team then answers all those questions in the Google Doc by the\nmorning of the board meeting, so the subsequent discussion\ninside\nthe board meeting can focus on the two most\nstrategic topics.\nGetting through the entire agenda effectively requires strict time management. Consider assigning formal time-keeping\nresponsibilities to a rotating member in the room.\nElements of a board deck\nThe board deck is just a tool for discussion, not an end in and of itself. For the principles of what goes into a board\ndeck, Bryan Schrier from Sequoia has a great post\nhere\n.\nThis seems obvious, but is underrated: The structure of the board deck should align with the agenda of the meeting. For\nexample, Gusto’s board decks are 30-50 pages long and typically have the following sections:\nHighlights / Lowlights - 1 page\nPerformance / KPIs - 15 to 20 pages\nStrategic topic 1: Gusto 3 Year Strategic Plan - 5 to 10 pages\n○ Options they considered\n○ Decision framework\n○ Product roadmap they plan to pursue\n○ Product areas they don’t plan to pursue\n○ Known vs. Unknown risks\n○ Initial assessment of economic value to the business\n○ Discussion on overall thinking and plan\nStrategic topic 2: Engineering Org - 5 to 10 pages\n○ Current Engineering Org\n○ Hiring Scale\n○ Future Engineering Org (18 months)\n○ Talent Assessment\n○ Talent Plan: Retention, Development and Recruitment Opportunities\nClosed Session (no slides)\nAppendix\n○ Health of the organization (10 slides): Hiring metrics by department, Close rates, and Employee Pulse Survey -\nResults\nBehind the scenes preparation\nCompanies usually start planning a month in advance for the board meeting. In the case of Brex, the co-founders, CFO,\nand Chief of Staff align on the list of topics at least a month in advance and kick off a process to pull the materials\ntogether. The CFO leads the charge, working with executives across the company to align on inputs and topics for\ndiscussion.\nHere’s an example of a prep email sent by the Brex CFO to the team 28 days in advance of the board meeting, because\nobviously they are working on other things as well so they need that much time to prepare materials in between.\nT-28 days:\n○ Founders/Chief of Staff: Identify the two strategic topics for discussion with the board\n○ Share with executive team to align on topics for discussion\nT-18 days\n○ Founders/CFO/Finance team:Outline topics and write/collect content to be covered\n○ Share draft deck with end of month close data with executive team\nT-11 days\n○ Execs comment/edit and provide feedback to Finance Team\n○ Finance Team finalizes the deck including formatting\n○ Final review if deck and backup data sent to founders and CFO\nT-7 days\n○ Review and final run of edits\n○ Distribute deck to Board of Directors (BoD)\nT-4 days\n○ BoD submits questions (particularly on KPIs)\nT-2 days\n○ Brex consolidates and answers all questions from BoD\nT-0\n○ Set expectations upfront (which sections you want to spend the most time and where do you need more feedback)\nInvolving the executive team in board meetings\nPost-Series B, most companies will have an executive leadership team that helps the CEO scale and grow the company.\nNote, the general counsel and/or outside counsel can also be invited as part of this. It is important for at least one\nof the GC and/or outside counsel to attend all your board meetings to capture notes and discuss any sensitive issues\nthat require attorney-client privilege.\nSince the board is tasked with scaling and governance, it is important for execs to get to know the board (and vice\nversa). There are two approaches here: (1) Ask your leadership team to attend the entire board meeting; or (2) Ask only\nthose executives who have a section to present to the board join the meeting for a particular agenda item, for about 45\nminutes.\nThe problem with the first approach of inviting all executives to the meeting is the board meeting can turn into a\npresentation vs. a discussion. It also becomes challenging for the founders and the CEO to discuss sensitive matters\ndirectly.\nThat’s why I prefer the latter approach, where specific execs join just for that agenda item (usually about 45 minutes).\nThis approach achieves three things: a meatier discussion on the strategic issue at hand; the executives hear the\nboard’s feedback directly; and more time at the end of the meeting for the CEO and the board to discuss other\nsensitive matters on their own.\nRemember: The board meeting is not about selling to your board members. Of course, you want to show off great work and\ncelebrate milestones. But, your board is already bought in, and the highest leverage on their time - and yours! - is in\nhelping you get to the next milestone.\nMonthly updates\nIn addition to quarterly in-person board meetings, it’s a good practice to send a 2-page monthly update email (sample\nhere\n) to the board at the beginning of every month. The email\nusually includes a summary of last month’s performance; a hiring update; a section outlining burning issues; and a\nsection with specific asks for help.\nBrex always makes two specific asks in their monthly emails: potential introductions to business partners/customers, and\nhelp with key roles they are looking to fill. In their monthly investor update, GitLab will ask for introductions to\nspecific individuals at companies who can be potential customers -- they also applaud specific investors who have helped\nthem in the past, putting pressure on the entire board to do the same.\nGetting into a good rhythm of sending monthly updates accomplishes three things: (1) Board members will go above and\nbeyond to help you with your specific asks; (2) The board is better prepared for the in-person board meetings; and (3)\nIt is a great way for you as the CEO to take a step back and reflect on the most important elements of your business and\nobjectively measure how well you are doing as a company. Often writing vs. talking is more effective for showcasing your\nclarity of thought, and written narrative is more compelling in sharing ideas than bullet points and slides, as Jeff\nBezos has argued\nabout\nmemos\n.\nBonus: Letter to the board\nIn fact, some CEOs may even use the board meeting as an opportunity to take a step back and write a letter to the board.\nFor example, Peter Reinhardt, CEO of Segment, writes a 3-5 page memo that focuses on highlights, lowlights, and areas\nwhere he would like to spend more time vs. where he’s spending time today. He prefers the written format vs. slides in\nthe deck as it allows him to reflect on the quarter and articulate the company's future. More importantly, he focuses on\nhis own strengths and weaknesses and what he could be doing better as a CEO.\nFaire often uses the written memo format to discuss the strategic priorities during the board meeting. The memo sets the\ncontext for the discussion, articulates their decision framework, and explains why they are recommending a particular\napproach. They also write down all the uncertainties and blind spots they have when it comes to making that decision.\nNot only do these memos help the board prepare for the discussion, but they help the CEO create a record of the quality\nof their decision-making processes.\nLeveraging Your Board & Navigating Issues\nMost issues boil down to communication, which is why following the best practices outlined so far can help smooth the\nway. However, there are a lot of incremental opportunities CEOs may leave on the table when it comes to\nmanaging/leveraging their boards -- as well as obstacles that come up from frictions or specific issues. I’ll share our\ncollective advice on navigating these below.\nMixed messages\nConflicting viewpoints are a good thing! The job of the board is to push you on your strategy and to ask questions that\nhelp you sharpen your thinking. As a CEO you should welcome conflicting opinions and should not feel pressure to get the\nboard to come to a consensus decision.\nHowever, if the conflict reaches a point where it is hard to move the conversation forward, offer to take the\nconversation offline and set up 1:1’s or small group meetings to understand the conflicting views. After understanding\nconflicting viewpoints, use a decision-making framework (as an example see one below) to guide the discussion.\nA YC CEO recently shared how two board members had strong, directly conflicting opinions about the order in which they\nshould pursue new products. The CEO took the discussion offline and came up with a decision-making framework (e.g.\neconomic value, resources, cash needs, and competitive threat) to decide which path they were going to take. Coming up\nwith the framework also made it quite clear which path was the right one for the company, and why. Sometimes the answer\nis not very clear but a framework is helpful when you decide to go against the board’s advice. Your board members will\nnever be as close to the business to make that decision. While board members provide important input all CEOs should\nseriously consider, the CEO has the authority to make the best decision on behalf of the company. As long as you have a\nclear decision-making framework, your board members will understand when you disagree. Also with time if you are more\nright than wrong about your decisions, the board will be willing to disagree and commit to the path forward.\nAsking board members for help\nAs you get a better sense of the areas where different board members can be most helpful - whether it’s helping recruit\nexecs, offering fundraising advice, or other areas - don’t hesitate to follow up directly with them outside of board\nmeetings on those topics.\nMany CEOs seem to think it’s important to update every board member 1:1 on every topic. To which I say: NO! Not every\nboard member needs to be in the loop on every topic or issue; it’s an ineffective use of everyone’s time, including\nyours. I also think it is a poor use of time to update every board member 1:1 before every board meeting. Unless there\nare sensitive topics that need to be discussed before hand, don’t waste time doing 1:1 calls with board members to get\neveryone on the same page. Allow your board members to challenge you and the team during the board meetings and\nencourage conflicting views to help flesh out your thinking.\nBalancing helpfulness vs control\nBe cautious of board members who are trying to make decisions for you. A board member’s job is to help you think through\nthe issues by offering tools or decision frameworks––not to give you all the answers on how to run your business.\nIn fact, great board members will often refrain from stating opinions; instead, they ask questions to help flesh out a\nCEO’s thinking. My fellow board member at Brex, Micky Malka of Ribbit Capital, does this: Even if the CEO asks for his\nopinion on, say, “What should our typical credit loss rate be?”, Micky would respond with examples of 10 startups in\nRibbit’s portfolio and their trajectory along credit loss rates; share pros and cons of each approach; yet refrain from\ngiving one definitive answer. In doing so, he empowers the founders to make the decision.\nProblem (overbearing / unhelpful) board members\nAs mentioned earlier, backchannel checks are a great way to test for quality and helpfulness, so take the time to do\nthis. But, if you still end up getting stuck with an unhelpful board member, the best way to handle this is to first\nmeet 1:1 and share that feedback, constructively (not unlike running a feedback meeting with your peers or direct\nreports).\nBe sure to focus on the issue at hand - don’t make it personal and/or scattered - and share specific examples from past\nboard meetings where their feedback was not helpful. If you have a good relationship with other members of the board,\nyou can also work with them to understand how to raise the issue with the unhelpful board member.\nIn some cases, board members may step in and give feedback to fellow board members. But be careful about a board member\nwho tries to work around the CEO. One YC company recently faced this - the board member started having direct meetings\nwith senior management without the CEOs knowledge and jumped to conclusions without full context. This put the CEO in a\nreally tough spot. The CEO used this as an opportunity to have 1:1 conversations with other board members, gather\nfeedback, and directly approach the board member who was being disruptive. It took about 6 months to get the situation\nresolved and trust was re-established. The CEO worked with the rest of the board to set up a decision framework on when\nand how the board can intervene. Use every challenging situation as an opportunity to improve your existing processes.\nRemoving board members\nThis one is really hard! The situation arises when a board member is destructive to the company - trying to meddle,\nmicromanage, act like an operator running the company - and sometimes even leaking information to the press. If you have\ntried everything (such as talking to the board member directly) and are convinced that your board member is destructive\nto the company, then you have a couple of options. I suggest the following, either (1) Approach someone senior at the\nfirm (where the board member works) and seek a replacement or (2) Add more board members (independent or via new\ninvestment rounds) who can be a sounding board and help address some of the issues.\nIf you pursue option (1), you will burn bridges with the board member and potentially the firm. If your company is not\nin good standing (\ni.e.\n, metrics don’t look good, and potential doesn’t look great) then it will be hard to find a\nreplacement. You will likely be stuck with your current board member. However, if your company is doing well then you\nhave more negotiating leverage than you think. If your company is one of the best performing companies in the VC’s\nportfolio, the firm will work hard to find you the board member that you want.\nIf you pursue option (2), you can leverage other board members to push back when the unhelpful board member is giving\nadvice that is not productive and could hurt the company. At the end of the day, you don’t have to listen to the board’s\nadvice if you are convinced that it does more harm than good.\nThat said, as a founder and CEO you should work to understand the gravity of the situation. Board members have the right\nintent––their job and their incentives are aligned to set the company up for success. If all your board members are\nechoing the same feedback and you are not listening, then the problem is likely you. Some CEOs bring their executive\ncoach to one or two board meetings to get feedback on board dynamics. This may also help calibrate your perception of\nthe board members around the table. I have also seen a few CEOs seek bi-annual feedback from the entire board via the\nexecutive coach.\nFinal Thoughts\nMany CEOs get nervous at the idea of board meetings. But they’re a good thing. They remind you that you are not alone.\nYour board of directors - when composed and managed well - is dedicated to your company’s success, which means they will\nchallenge you to make better decisions but are on your side as long as you are being ethical and doing the right thing\nfor the company. And of course, what is considered an effective board will evolve over time as the company matures. But,\nyou can be intentional in building the right team of advisors up front, using the best practices outlined above. If\nknowing is half the battle, why not enlist the best help you can get?\nSpecial thanks to Justin Kan, Sonal Chokshi, Ali Rowghani, Daniel Gackle, Adora Cheung, Craig Cannon, Gusto, Brex,\nConvoy and Faire founders for reading multiple drafts of this essay. Thank you to numerous YC founders for sharing their\nperspectives on this topic."
    }
  },
  {
    "name_blog": "How WeChat grew to be the #1 app in the world",
    "description_blog": "Here is a deep dive into the growth strategy that led to WeChat scaling to over a billion users.",
    "authors": [
      "Anu Hariharan"
    ],
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "https://www.ycombinator.com/library/3t-how-wechat-grew-to-be-the-1-app-in-the-world",
    "content": {
      "table_of_contents": [],
      "whole_content": "Founders are increasingly pointing to Asia when asked for an example of a product they aspire to create, and WeChat is\nvery often that aspirational product. My friend and former colleague\nConnie\nChan\ndescribed WeChat as “\nthe one app to rule them\nall\n”. It dominates the Chinese mobile market with 889 million\nmonthly active users\n1\n. The WeChat platform has completely evolved\nthe way Chinese people communicate and socialize online, and it has also changed the way they pay each other and pay for\ntheir groceries. WeChat is no longer just an app. And while WeChat’s blazing success has been concentrated in China,\neveryone\nin the Western world has experienced WeChat’s work, as the service has inspired a new category of “messaging\nas a platform.” You don’t have to look hard to see hints of WeChat in other messaging platforms such as Apple’s iMessage\nor Facebook’s Messenger platform.\nWe partnered up with\nChina Tech Insights\n, a research group within Tencent\n(WeChat’s parent company) to understand how WeChat drives its\n889 Million\nmonthly active users to use the app an\naverage of\n50+ minutes, and 9 to 11 separate times, per day\n2\n.\nTo put that in context, it is the same as the “combined time” users spend across a portfolio of Facebook apps, including\nInstagram, Facebook and Facebook messenger, on a daily basis\n3\n.\nThis post dives into the growth strategy that led to key WeChat milestones, lessons learned and gives insight into the\nmethod behind the madness as WeChat scaled from 0 to 800M+ MAUs in less than 6 years. Unlike AOL and Yahoo, Tencent is\none of the few companies to have evolved its messaging product portfolio successfully from a web/desktop product to a\nmobile/messaging platform.\nLesson 1: Build Your Own Competition\nTencent Started WeChat (mobile-first messenger) as a side project, and it ended up reinventing messaging in China.\nTencent was already one of China’s top internet companies in 2010, and the biggest social company even before WeChat was\nlaunched. Many Chinese people grew up using Tencent’s QQ, a popular desktop messaging app (similar to ICQ and AOL\nInstant Messenger). At the time, Tencent’s products had ~650M\n4\nmonthly active Instant Messenger accounts. Recognizing the growing importance of mobile, the company created a mobile\nversion of QQ in 2008, but the app was weighted down by desktop-centric features (e.g., multiple user statuses, large\nfile transfers, embedded services such as music streaming, etc.) back then.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nTencent made a bold decision: it put together a small skunkworks team from the QQ Mail team, its\ncore\nproduct at the\ntime, to a new mobile app that could potentially\ncompete\nwith other product teams from other divisions within Tencent.\nThis team of only seven engineers went on to create the first version of WeChat in just three months\n. WeChat\nlaunched in January of 2011 as a simple messaging and photo sharing app. This lean and relentlessly focused team very\nquickly launched what would become the most transformational mobile service in China.\nWeChat was not the first mobile messaging app when it launched. Xiaomi’s MiTalk was the leader at the time with 5M\nregistered users. Due to the intense competition, WeChat did not see much growth right after its initial launch. WeChat\nrealized they had to offer more than just chat to enable users to switch from other mobile chat solutions to WeChat. In\nMay 2011, 3 months after launch, WeChat turned on voice messaging, allowing people to send short audio notes (similar to\nthe native iPhone iMessage feature that came out 3.5 years later). The inspiration to add voice messaging came from\nTalkBox and Kakao Talk. Using voice messaging was strategic because the native mobile keyboard to type Chinese\ncharacters at the time was not easy to use and consumers found sending voice notes intuitive, personal and convenient\nfor daily life. As one of the first messengers to offer voice, text and photos in a combined solution, it enabled WeChat\ndaily downloads to spike to 50k-60k consistently.\nToday Mobile QQ continues to cater to a younger user base and has 652M\nMAUs\n5\nas of December 2016. Tencent proactively worked to\ndifferentiate the user experience between the two platforms, with QQ offering more features for entertainment (e.g.,\nanimated video stickers, facial beautifying tools). Conversely, WeChat remains focused on offering useful services that\nits users access in daily life (e.g., Content subscription and paying utility bills).\nThis lesson is reminiscent of Amazon’s move to cannibalize its own book sales with an e-reader / e-books (foreseeing the\ntrend toward digital content) and Uber’s move from town cars to UberX. If you don’t create a culture of disrupting\nyourself, then a competitor is likely to disrupt you.\nLesson 2: Design For Groups (“Group Effect”)\nAn individual user’s behavior can be quite distinct from how they behave when in a group. To identify these\ngroup-effect opportunities, WeChat closely observed how users behaved among groups of friends and strangers in everyday\nlife. WeChat did not lean on more traditional forms of user research, such as surveys, interviews or following\ncompetition.\nAllen Zhang (Founder of WeChat) has been adamant about developing the product around “Group Effect” (i.e., an individual\nuser’s behavior alone can be quite distinct from how they behave when in a group). So, the WeChat team pays attention to\nhow a feature may be adopted by a group of users vs. an individual user. This in turn also increases the rate of\nadoption - as more users adopt these features, other users also hop on the bandwagon.\nWeChat, like most social networks, realized early on that they needed to solve for the issue of having zero friends on\nday one. Simultaneously, in the U.S., Facebook was famously relentless about getting users to their first 10 friends\nwithin 14 days, which their data showed was the key to long-term retention. WeChat found success with a slightly\ndifferent approach to keep people engaged via a feature called “\nPeople Nearby\n”, which was a simulation of the real\nworld. People could see other “People Nearby” users (who were not yet on their contact list) nearby through the\napp\n6\n. The location-enabled feature satisfied users’ curiosity about\nknowing what’s going on around them and at the same time, boosted their sense of community on the platform. It also\nhelped boost the pace of user acquisition to over 100k+ per day\n7\n.\nAfter launching People Nearby, WeChat also rolled out account linking between WeChat and QQ, enabling users to import\ntheir existing social graph on QQ to WeChat. Importantly, the team only exposed the importing feature to those who were\nalready using both products, so that users were able to use both services for their differentiated purposes. This move\nrose the tide on messaging users overall, pushing the number of registered users on the platform up to 50M by\nNovember 2011, allowing WeChat to overtake Xiaomi’s MiTalk as the leading messaging app in China.\nShake\nwhich utilized both the GPS and accelerometer had people shaking their phones to find a random person to chat\nwith. The feature served two purposes: a) give people a way to engage when they’re new to the product, and b) it had the\nside benefit of creating a take-notice element to WeChat in the offline world, very much like people on Pokemon Go.\nLaunched in October of 2011, Shake was used over 100M times\n8\nin the\nfirst month of launch. This feature was critical to scale initially, and used as a creative growth strategy, but it is\nnot popular today since most people in China are already connected to their friends and coworkers in WeChat. “\nMessage\nin a Bottle\n” allowed users to exchange random messages by throwing a virtual bottle in the sea and when a user picked\nit up, they were connected.\nIn November 2011, after launching all these important new features that facilitated group interactions, the new user\nacquisition of WeChat hit a new record of 200k in a day\n9\n.\nLesson 3: Extend Features from Users’ Inner Desires\nWeChat paid attention to the motivation behind communication nuances and cultural behaviors to give users more than\nthey could ever think to ask for in a usability study. Allen Zhang was passionate about keying into the inner desires\nbehind an exhibited behavior, which often led to features that fit naturally into users’ worlds.\nDuring WeChat’s second year, it launched\nMoments\n(the Chinese translation means “friend circles”), a photo-sharing\nfeature to visually share your story with a private group of friends. Unlike the Facebook News Feed, comments and likes\non a particular post can only be seen by “mutual friends” and not by “friend of friends.” This was deliberate and\ninspired by Path, a U.S.-based photo sharing and messaging app that launched in 2010 and limited a user’s social network\nto a certain number of close friends and connections with strong ties. Instead of exactly replicating what Path did,\nWeChat understood that the true motivation behind this use case and drew a parallel with an old Chinese philosophy\ncalled “circle cultures,” meaning smaller circles are much stronger at the core and as the circles get bigger, the ties\nget weaker.\nA team of only 10 people spent 4 months making over 30 versions of WeChat Moments before deciding on a version to\nlaunch. This showcases the efficiency with which the product iteration took place. WeChat always kept their product\ndevelopment team lean since this brought a relentless focus on the features they were working on. Though there are a few\nnew features, the core product functions are not very different from the version originally launched.\nSince the early days, many WeChat users shared content from external blogs and news sites via chat and Moments. The\nWeChat team was eager to bring that content in house and let creators connect natively with their audience. Its solution\nwas\nWeChat Official Accounts (OA)\n. Released in 2012, OAs seamlessly allowed a “one-way follow” similar to Twitter\n(and competing with Weibo) for fans to effectively “subscribe” to content from their favorite celebrities. However,\nunlike Twitter or Weibo, celebrities could send text, voice and video updates to their fans that looked like regular\nWeChat messages and created a feeling of a personal and private conversation. This resulted in many celebrities setting\nup their WeChat OAs even though they had millions of followers on Weibo.\nThe success of celebrity OAs prompted WeChat to expand the feature to accounts for brands and businesses. This has\nallowed publishers to directly broadcast valuable content on a regular basis to their fans although the frequency is\nlimited. OAs also enable users to communicate with service providers (e.g., housekeeping) to do everything from booking\na service, to customer care, feedback and Q&A. Where Twitter/Weibo were tools for businesses to broadcast and brand,\nWeChat (via OAs) became a channel for direct communication with customers.\nSticker Store\nwas a way for users to express themselves when communicating with each other (similar to what Apple\nrolled out on iMessage many years later). However, WeChat was the first to create a marketplace for illustrators who can\nearn tip money via “rewards” from WeChat users who like their stickers. Users could choose to reward any amount up to\nRMB 200 ($25 USD). The marketplace enabled healthy competition among illustrators to compete for the top spot (and\nenriched the quality of the WeChat user experience along the way).\nLesson 4: Big Ideas Come From Solving Your Own Problems\nY Combinator has long advised founders to be an avid user of the product and solve their own problems. While WeChat\nwas sitting comfortably at the 300M MAU mark, a simple feature to help their own management team give out Red Packets\nafter Chinese New Year would help them nearly double.\nWeChat Red Packets\noriginates from one of Tencent’s company custom and broader Cantonese tradition that every\nmanager in the company gives each employee a red envelope with a small cash gift on the first work day after the Chinese\nNew Year holiday. As the company expanded, it became exhausting for some managers to give out so many Red Packets so\nthey asked for technical solution to solve the issue – they had no idea that the result would become the prototype of\nWeChat Red Packet.\nThe first version of WeChat Red Packets was developed by a team of 20 in 3 weeks. It was tested internally on WeChat OA\nusers and was immediately well-received. Instead of releasing multiple versions of a product, WeChat team is an avid\nuser of its own products. Often they use the product in the middle of the night as a “single user” to pay attention to\ndetails and identify bugs early on. They also observe how friends and family use the product before it is released. From\nNew Year’s Eve in 2014 through 4pm on the day after, over 5M users used WeChat Red Packets.\nWeChat Red Packets today has several different versions, including one with a random cash amount and one with a fixed\ncash amount – with the random packets, each recipient gets a random fraction of the total amount initially sent by the\nsender (no more than RMB 200, USD 29 each to avoid bribery). This makes receiving a Red Packet in the presence of a\ngroup of people like a lottery combined with a fortune cookie – you have no idea how much money you will receive before\nyou open the packet, and getting more than others can be a sign of good luck. This good luck implication also makes it a\nperfect game among close acquaintances at a party. This is another example of the “Group Effect” in practice. Since Red\nPackets are sent within group chats, the rate of adoption increased as more users received it.\nThe substantial growth was observed in 2015 with over 1B Red Packets sent during the Chinese New Year holiday. The\ngrowth of WeChat Pay was initially driven by close tight knit social circles - friends and family sending money to each\nother and they were willing to connect their bank accounts to do the same. This important move was necessary to build\ntrust among users and to inculcate the user behavior to drive mobile payments before extending this feature to more\nshallow circles like paying merchants, online and offline stores. The payment network was boosted even further by a\npartnership with Didi (China’s version of Uber) to facilitate in-app payment for WeChat customers’ Didi rides. This\npartnership opened up a broader universe of payment partners who now work with WeChat enable in-app payments for\neverything from cell phone bills to utility fees.\nIn only two years, WeChat Pay has become the most significant player in the Chinese payments landscape, is used for a\nmultitude of actions - used for everything from Red Packets to offline payments. As of 2016, Tencent has 600M mobile\npayment MAUs and over 600M average daily payment transactions.\nLesson 5: Monetize Subtly\nMonetization and User Growth are not mutually exclusive. WeChat has always been ready for monetization and even uses\nit as a lever to improve the overall product experience.\nGame Center\nbridged WeChat with the core expertise of the broader Tencent team to allow people to play games within\nthe messaging platform. While similar on the surface to other game stores like Line and Kakao, WeChat took the element\nof social gaming to a new level - where people flooded to play games en masse. This subtle feature change benefitted\nboth game creators and WeChat. A Tencent game called Rhythm Master, for example, had 700k DAUs a year after release, but\nexploded to 17M DAUs (>20x growth) after launching it in Game Center.\nLaunched in January of 2015,\nWeChat Moment’s native ads\nwere an important part of WeChat’s business model. While\nthis was not a key driver of growth, it did not limit the growth trajectory of WeChat either. To minimize the impact on\nuser experience, WeChat limited the number of native ads shown in a user’s WeChat Moments feed to one per day (compared\nwith Facebook’s limit of\none ad every ~10\nposts\nin News Feed).\nAn example of Airbnb’s native ad in WeChat Moments feed\nIf a user double clicks on the Airbnb ad they will see 3 or 4 photos with text sharing the story, which is very\nsimilar to what WeChat moments offers with friends.\nUsers interact with and share ads similar to how they share posts from their friends, which is uncommon on other social\nnetworks. For example, if you\ntap on the ad\n, you can see\nthat the Airbnb ad is similar to a visual story and feels native in “Moments.” The “likes and comments” can only be seen\nby mutual friends and not by “friends of friends.” Despite restricting both ad load and limiting the conversation to\nonly mutual friends, the above Airbnb ad, received more than 1.8M views after it was shared, saw a 5x increase in click\nthrough rate, and drove a 600% increase in new sign-ups after it was shared by users.\nWeChat even adapted the classic\ncoupon\nmodel to a friend-based endorsement model for products and services. When a\nuser redeems a coupon offered by a vendor during an offline purchase, the user can opt-in to share the offer with their\nfriends resulting in all of the user’s friends being able to view and use the same offer. Vendors can also reward a user\nwho redeemed a coupon by giving the user another coupon for use and sharing, thereby extending the exposure of their\nproducts and services. Thus WeChat established a coupon credit system for vendors to purchase credits from WeChat for\npromoting their services through this coupon sharing model.\nLesson 6: Measure What\nYou\nValue, Not What You’re\nSupposed\nto\nWeChat defies the popular belief that growth is all about user growth. Instead they think about growth as increasing\nvalue (e.g., the number of tasks WeChat can do in the daily lives of users).\nUnlike other social products, WeChat does not only measure growth by number of users or messages sent. Instead they also\nfocus on measuring how deeply is the product engaged in every aspect of daily life (e.g., the number of tasks WeChat can\nhelp with in a day). While WeChat does have KPIs, these are typically shared only among department heads. The\ndrumbeat-message engineers receive every day is “are you creating\nmore\nvalue for the user?” In support of this goal to\nbe a tool through which people accomplish their daily tasks, WeChat puts limits on how many friends you have, how many\npromotional messages you can see, how much engagement they display from your social circles -- ultimately they see this\nas noise that may distract from the utility of WeChat.\nWeChat’s elevation of the QR code as a link from the offline became the lynchpin for China’s online-to-offline boom\nin 2015. Previously, to engage with a service or brand, a user would have to search or enter a website address. WeChat’s\nPony Ma says of QR codes, “it is a label of abundant online information attached to the offline world”. This logic\nexplains why WeChat chose to promote QR codes in the first place. QR codes never took off in the U.S. for three key\nreasons: (1) the #1 phone and the #1 social app didn’t allow you to scan QR codes. (2) Because of this, people had to\ndownload dedicated scanner apps, and then the QR code would take them to a mobile website, which is arguably more\ncumbersome than simply typing in the URL or searching for the brand on social media. (3) Early use cases focused on\nlow-value, marketing related content and at times was merely spam. So, even though QR codes would’ve been U.S.\nmarketers’ dream, it was a few steps too far to be useful.\nWith the established adoption of QR codes, WeChat launched “\nMini Programs\n” as an extension of WeChat Official\nAccounts designed to enable users to access services in a more frictionless way just like the web browser did (there was\nno need to download a program to access a service in the PC era). Similarly Mini Programs is the tool that allows users\nto open those “apps” and take an action online (like placing an order or paying for merchandise) without requiring to\ndownload or install the app. Think of a local restaurant or a local store in your city - they now don’t need to design\ntheir own apps. Instead they can be part of WeChat Mini Programs. They are deliberately meant to be discovered via\nsocial connections or the offline world by scanning a QR code. WeChat claims this user-friendly flow drives higher\npurchasing conversion rates (though it is still early). Many of these use cases are low velocity use cases compared to\nday-to-day messaging.\nLesson 7: Don’t Play Favorites With Features\nOne of WeChat’s core product tenets is it is a “tool” holding up utility-oriented qualities (highly functional, quick\nand easy to use) as vital to the product experience.\nMost product managers are focused on building “sticky” features and driving retention metrics. However, Zhang actively\nworries about users spending too much time in any one feature since this could prevent users from doing other valuable\nthings (such as paying bills….which you can do on WeChat). In fact WeChat believes that a good product will encourage\nuser efficiency - i.e., enable users to complete the task quickly in the most efficient way and exit. Zhang compares\nthis to Google - once the user finds the right link, Google sends the user directly to the desired site. While it is\nheartening to see users browsing the content on Moments, the team gets worried if they see too much time being spent on\nmarketing content on Moments at any point in time because low quality content can distract users and reduce value long\nterm. As a result, WeChat limits the amount of marketing content on Moments. Similarly, WeChat restricts the number of\nbroadcast messages that can be sent from Subscription Accounts by brands and businesses to one per day. In fact these\nbroadcast messages don’t even generate a push notification since it would impact the user experience.\nDespite the deep and diverse set of features and services available in WeChat, the product team has maintained a very\nsimple UI. The app has only 4 tabs: chat, contacts, discover, and me. They’ve been very disciplined in keeping the app\nto only 4 tabs, as whenever they experiment with adding one, the left-most tab sees conversion rates drop by 20-30%.\nTo summarize, the WeChat team found ways to be scrappy, compete with their own products, built features that answered\ncultural needs and emphasized group interactions and most of all they have relentlessly focused on creating a simple\ntool that could extend into the hands of every mobile consumer. At this point, WeChat is not only an app -- it is simply\nthe internet. Which makes it easy to see why WeChat is becoming an inspiration to many hopeful startups.\nThanks to\nRhea Liu\nand the rest of the Tencent team for partnering with us to share\nfirst hand the learnings from WeChat. Thanks also to\nConnie Chan\n,\nJonathan\nHsu\n,\nYanyun Xiao\n,\nBen\nRubin\n,\nRam Parameswaran\n,\nSonal\nChokshi\n,\nSam Altman\n,\nAli\nRowghani\n,\nBrad Lightcap\n,\nSharon\nPope\n,\nCraig Cannon\n,\nSimon\nLu\n, and\nNic Dardenne\nfor reading multiple drafts of this\nessay.\nNotes\n1.\nSource: MAU accounts based on Tencent data as of 2016.\n↩\n2.\nSource: iResearch, Jiguang.\n↩\n3.\nSource: Facebook Q1 2016 Earnings Call.\n↩\n4.\nSource: Tencent Annual Report 2010.\n↩\n5.\nSource: Tencent Annual Results for 2016; Smart Device MAU of QQ.\n↩\n6.\nNote: Users not using “People Nearby” would not appear.\n↩\n7.\nSource: The Story Of Tencent by Xiaobo Wu.\n↩\n8.\nSource: The Story Of Tencent by Xiaobo Wu.\n↩\n9.\nSource: The Story Of Tencent by Xiaobo Wu.\n↩"
    }
  },
  {
    "name_blog": "The second job of a startup CEO",
    "description_blog": "A CEO's first job is to build a product users love; the second job is to build a company to maximize the opportunity that the product has surfaced. The future of your startup depends on how you transition from phase one to phase two.",
    "authors": [
      "Ali Rowghani"
    ],
    "related_categories": [
      "Management",
      "CEO",
      "People",
      "Culture",
      "Growth Stage",
      "Leadership"
    ],
    "page_url": "https://www.ycombinator.com/library/3k-the-second-job-of-a-startup-ceo",
    "content": {
      "table_of_contents": [],
      "whole_content": "Successful startups go through three broad phases as they scale, and a startup CEO’s job changes dramatically in each\nphase. A CEO’s first job is to build a product users love; the second job is to build a company to maximize the\nopportunity that the product has surfaced; and the third is to harvest the profits of the core business to invest in\ntransformative new product ideas. This blog post describes how to become a great Phase 2 CEO by focusing on the highest\nleverage tasks that only the CEO can accomplish. As YC’s Continuity team, we’ve seen many Phase 1 CEOs transition\nsuccessfully into Phase 2, and some who have not. The future of your startup depends on which kind you are.\nYour First Creation is a Product, Your Second Creation is a Company\nA CEO’s first job is to build a great product and find a small group of people who love it and use it\nenthusiastically.\n1\nA Phase 1 startup CEO is the Doer-in-Chief. You\nmust be deeply involved in both building the product (observing/interacting with users, writing code, designing product\nspecs) and acquiring users/customers. Delegation should not be a word in your vocabulary. If you succeed, it’s because\nyour deep involvement and unique vision give the company a perspective and drive that few others have. The other\nimperative for a Phase 1 CEO is to conserve money in order to extend the time to iterate and improve the product.\nMost startups fail because they are not able to create a product that users love enough to abandon existing\nalternatives. Success in this first phase means discovering more demand for your product than your small team can\nhandle. When this happens, you have to shift your focus as CEO to building a company that can capture and maximize the\ndemand that your product has surfaced. Company-building becomes the CEO’s primary job in a Phase 2 startup. The company\nyou build is your second creation and will be your lasting legacy as a founder.\nAs a Phase 2 CEO, you need to transition from “Doer-in-Chief” to “Company-Builder-in-Chief.” This is how you scale as a\nCEO, and CEO scaling is the first step in company-building. For most founders, this is very difficult. When you’ve been\na successful Doer-in-Chief, it’s hard to stop. It’s hard to stop coding, designing product specs, and interacting with\ncustomers on a daily basis. It’s hard to stop answering support tickets, doing all the product demos, and debugging the\nlatest build. It’s even hard to delegate the random and sometimes menial tasks that you’ve accumulated over the years\nbecause they were “no one’s job.” But you have to stop doing all of these things so that you can safeguard your time for\nhigh leverage tasks that only CEOs can do.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nThis transition can cause confusion and even friction with your team, who can suddenly wonder what you are doing if\nyou’re no longer committing code or why you’re suddenly delegating a bunch of menial tasks that you’d been doing for\nyears. But once your startup reaches 20-30 people, you’ll have to spend more time leading (i.e., directing the\nactivities of others). And since time is finite, the only way to lead more is do less. Without delegating, you simply\nwon’t have time to focus on company-building and you’ll end up slowing everyone else down.\nIt may seem impossible at first, but you can eventually delegate day-to-day responsibility for everything you did in\nPhase 1, even Product. You obviously can’t drop everything overnight, but your job is to replace yourself by hiring\npeople better than you into leadership positions. As David Rusenko, the co-founder and CEO of Weebly has said, “Often,\nthe first time I find out about a product feature is reading about it on our blog. It shocks most founders to hear this,\nbut I know I’ve done my job well because I’ve yet to see a feature that was built poorly. You should aspire to build a\nteam that’s so good that you don’t have to be involved in the product details.”\nIn practice, Phase 2 usually begins when a startup has around 20-25 employees and ends when it reaches 400-500\nemployees. At the end of Phase 2, you’ll have a leadership team that you’ve “road tested” to the point that you can\nconfidently delegate everything you did in Phase 1. Your direct reports should be experienced leaders who can perform at\na high level with minimal involvement from you, provided that you have set direction well. You can then shift the burden\nof company building to your leadership team so that you can start working on Phase 3: taking profits from the core\nbusiness and investing them in new, transformative products. As an example, Facebook built its senior management team in\nPhase 2 while running the business at roughly breakeven. In Phase 3, it began to generate huge profits in its core\nbusiness thanks to more lucrative in-stream ads, so it could allocate significant resources towards Messenger as a\nseparate product and buy Instagram, WhatsApp, and Oculus.\nThree Tasks That CEOs Can’t Delegate\nStated simply, your job as a Phase 2 startup CEO is to delegate everything you did in Phase 1 in order to create time to\nfocus on three critical operational tasks that only the CEO can do\n2\n:\n1. Hiring a Leadership Team and Making Sure They Work Well Together\nOnly the CEO can hire the company’s senior leadership team and make sure that they work well together. You can get help\nand feedback from others as you hire, but when you bring leaders like a VP of Engineering, VP of Sales, and CFO on\nboard, the ultimate hiring decisions must be yours. You can’t hire by compromise, looking for someone who everyone\naround you likes. The choice has to be yours because the consequences are yours as well.\nRecruiting senior executives takes an extraordinary amount of time. If you are doing it for the first time, meet lots of\npeople so that you can develop good judgment about the skills, experiences, and personality traits that you need.\nPatrick Collison, co-founder and CEO of Stripe, made it a point to meet with the “best-in-the-world” in each field so he\ncould get a sense of what a great candidate looks like. Because executive hiring takes so much time, you should stage\nthese hires rather than trying to hire everyone at once. Our recommendation is to hire a good executive search firm to\nhelp you run your first couple of searches. It will cost you an arm and a leg, but if it helps you hire the right\nperson, it’s worth every penny.\nYC teaches founders to manage their startups using weekly milestones to ensure rapid iteration and progress. That’s\ngreat for a small company trying to find product-market fit, but it’s not the way to manage senior executives. You\nmanage senior people to longer term outputs rather than week-to-week tasks. To do this well, you first have to set the\nright quarterly and annual milestones for the company and for each executive. It’s also your job to acclimate new\nexecutives to the culture of the company. As you build your senior team, expect to spend extra time with new executives\nindividually and as a team on culture and teamwork. You should insist that new executives take the time to build\nrelationships across the organization rather than pressuring them to come in and start changing things immediately.\nLearning how to evaluate the performance of senior executives is also a challenge, partly because your face-to-face\ninteractions do not provide much of the information you need. You have to evaluate how well they are building their\norganizations, how productive and happy their employees are, and how well they are working with other teams and\nexecutives. You should expect that at least 25% of your leadership hires don’t work out. For most startup CEOs, it’s\nvery difficult to fire their first executive, and most CEOs take too long to do it. But it’s better to act quickly and\nleave a void in the organization than to leave an ineffective senior executive in place for too long. The longer you\nleave an under-performing executive in place, the more credibility you lose with everyone else on your team.\nYour job is done when your entire leadership team has been hired, you’ve coached them to work well together, and they\ncan operate at a high level with minimal involvement from you. Don’t be surprised if 50% of your time goes to hiring and\nmanaging your senior team; it’s time well spent.\n2. Creating Purpose and Alignment\nThe second task that CEOs cannot delegate is creating purpose and alignment at the company. When your startup has less\nthan 10 people who all sit together, you don’t need to work very hard to keep people aligned. Everyone can easily hear\nwhat’s going on, understand how their work fits into the broader goals, and have a say in every decision. Communication\nis simple and creating alignment is easy.\nBut when you start hiring more people, soon in different offices and from broader backgrounds and functions (e.g.,\nsales, finance, etc.), creating alignment becomes a lot harder. Your team no longer sits within earshot. You aren’t able\nto interview or even meet everyone who joins the company. And you may not even able to attend employee onboarding\nsessions. As an example, there was an 18-month period at Twitter where the company was hiring 50 people per month in\noffices all around the world. There was no way the CEO or any one executive could meet everyone who was joining the\ncompany.\nAs a Phase 1 CEO, you are the lead rower on the boat. But in a Phase 2 startup, your job is no longer to row. Instead,\nit’s to define the purpose of the voyage, set the direction of the boat, and measure the pace and performance of a much\nlarger number of rowers. In business speak, the CEO’s job is to define the Mission (purpose), Strategy (direction), and\nMetrics (pace and performance). These three elements provide the essential context that a growing company needs to be\nable to perform.\nOne of the best examples of “Mission-to-Metrics” alignment comes from a friend who visited the manufacturing floor at\nSpaceX. Seeing a SpaceX employee assembling a large part, he stopped to ask him, “What is your job at SpaceX?” He\nanswered, “The mission of SpaceX is to colonize Mars. In order to colonize Mars, we need to build reusable rockets\nbecause it will otherwise be unaffordable for humans to travel to Mars and back. My job is to help design the steering\nsystem that enables our rockets to land back on earth. You’ll know if I’ve succeeded if our rockets land on our platform\nin the Atlantic after launch.” The employee could have simply said he was building a steering system for landing\nrockets. Instead, he recited the company’s entire “Mission-to-Metrics” framework. That is alignment.\nCan you define the Mission, Strategy, and Metrics for your startup in a way that’s clear, simple, and inspiring? Most\nPhase 2 CEOs can’t readily do this. And, when they sit down to define it, they find it harder than they thought. The\ndiagram below captures the task at hand:\nYour mission should feel ambitious and permanent. It should find its roots in the reasons you started your company and\nshould not be something that you change very often. Conversely, you should revisit your product strategy and\ngo-to-market strategy at least twice per year to make sure they remain relevant and right. There is an enormous amount\nof literature about developing business and product strategy. Whatever approach you choose, a simple practice always\nseems to help: write it down. In our experience, the CEOs who are most effective in developing and communicating\nstrategy take the time to write their strategy out, in long form. You don’t have to go as far as Jeff Bezos and his team\nat Amazon do, requiring 6 page memos for every strategic meeting. But writing your “Mission-to-Metrics” framework in\nlong form will help you be more thorough and catch flaws in your thinking.\nEffective metric-setting is also a critical part of a CEO’s job. A common mistake is to equate key internal metrics with\nthe business’ most important top line results, like revenue or user growth. This is the wrong approach because top line\nresults like “increase user growth” usually aren’t directly actionable. Instead, you’ve got to dig deeper to understand\nwhat drives top line results and set these drivers as the key internal metrics. Great companies work tirelessly to\nunderstand what drives their growth. Facebook famously discovered that connecting a new user to 10 friends within 14\ndays correlated with retained usage, so they set “number of new users with 10 friend connections” as the key product\nmetric. You’ve got to be tenacious about learning what drives your top line business results and set those drivers are\nyour internal metrics. If you don’t know what drives revenue, customer acquisition, or user growth, you aren’t likely to\nbe successful anyway.\nOnce you’ve written “Mission-to-Metrics” for your startup, and gotten feedback from your leadership and other key\nemployees, you have to start communicating it to everyone regularly. You have to reiterate the Mission-to-Metrics much\nmore than what feels reasonable, which may run counter to your instinct to be efficient. Your employees will not\ninternalize the message unless you communicate it constantly. The real test is not simply whether employees can repeat\nit, but whether they can make good decisions in your absence based on the context you have provided.\n3. Nurturing Company Culture\nThere are few concepts in company building that are as slippery as culture. Fundamentally, culture is defined by the way\npeople treat one another in a company -- both the way management treats employees and the way people treat one another.\nCulture begins to form on the day the second person joins your startup. How founders and early employees act toward one\nanother in a startup’s earliest days sets a cultural tone that can last for many years.\nBut unlike the other tasks listed above, creating a good culture is not uniquely the CEO’s job. It is everyone’s\nresponsibility. So unlike Mission-to-Metrics, a CEO’s job is not to go to a quiet room and write up a set of cultural\ntenets for everyone to follow. This single-author approach usually fails because the resulting words are often\ndisconnected from the reality of how the employees as a whole experience the company. Rather than assuming the burden of\nsole authorship, CEOs should encourage co-founders and early employees to work together to codify a set of values and\nbehavioral norms that feel authentic and aspirational to everyone. For culture to be self-enforcing, the values must\nresonate with the ways the company has acted in the past. That's how they feel authentic rather than contrived. If you\nreally want the company to embody a value that does not reflect past behavior, then set an example and get everyone in\nleadership to act in that way before you consider calling it a company value.\nPixar provides a helpful example. Like most movie studios, Pixar says that one of its key values is that “story comes\nfirst.” And like most companies, it says that its employees are its most important asset. Pixar’s employees embrace\nthese values because they authentically represent the way the company has behaved. The most powerful example dates back\nto the making of Toy Story 2 in 1999. With only seven months to go before its scheduled release date, Pixar’s creative\nleadership felt that Toy Story 2 was not working creatively. Disney, Pixar’s distribution partner, knew that it took 3-4\nyears to make an animated film. They argued that it was too late to start over and that Pixar should release the film as\nis. But Pixar refused, deciding instead to tear up the story and re-write it from scratch. The studio pushed itself to\nthe brink of collapse to complete the new version of Toy Story 2 on time, and the film was a huge commercial and\ncritical success. And, when it was completed, the executive team took the extraordinary step of closing the studio for\ntwo entire months to let everyone recuperate.\nEd Catmull calls it the most intense and important period in the studio’s history: “Toy Story 2 defined us. It said that\nwe couldn’t be a studio that produced both great work and average work. Everything we made had to be great. We proved to\nourselves that we would never release a film when we were not proud of the story. And we also realized that we had to\ntake care of our people if we were going to ask such sacrifices from them.” Nothing expresses the core cultural tenets\nof Pixar better: Do not compromise creatively and take care of people.\nWhat defines you as a company? You should look to the past to find the answer, often to your earliest days when success\nwas far from certain. Perhaps it’s a commitment to quality, like “story comes first.” Perhaps it’s a mode of working,\nlike “go fast and break things.” Once these values have been expressed, the CEO must make sure that the behavior of\nevery new leader at the company reflects those values. But here too, adherence is not solely the CEO’s job. Everyone at\nthe company also has a role to play in holding their leaders, peers, and themselves accountable to the same norms.\nA Simple Measure of Success\nDuring a management meeting at Pixar, I once heard Steve Jobs say, “When I’m at my best, 50% of my time is unscheduled.\nThat’s the time I use to think, drop in on the people I want to speak with, and let my curiosity roam. It's my time to\nbe creative. Without this free time, I would never be able to stay ahead of the company. To lead a company, you’ve\nalways got to be two steps ahead. There’s no way to lead a company from behind.” Reaching the point of having a lot of\nunscheduled think time is perhaps the clearest sign of success for a Phase 2 CEO. It suggests that you have hired a\nleadership team, delegated the day-to-day activities to them, and codified Mission, Strategy, and Metrics well enough\nfor them to operate effectively without your daily involvement. Your reward is the bounty of time to think and plan the\nfuture of your startup.\nNOTES:\n1\nNo one has written more eloquently about this topic than YC co-founder Paul Graham in essays\nlike\nHow To Start A Startup\nand\nDo Things That Don’t\nScale\n.\n↩\n2\nThe focus of this essay is on a CEO’s operational responsibilities. There are certain\nnon-operational responsibilities such as building/managing a Board, raising money, interacting with the press, etc.,\nthat are also part of a CEO’s job, especially when a startup is small. Generally speaking, the less time a Phase 2 CEO\nspends on these types of non-operational tasks, the better, because they come at the cost of running the\ncompany.\n↩\nThanks to Daniel Yanisse, Patrick Collison, David Rusenko, Ben Holzman, Michael Seibel, Ed Catmull, Sam Altman, Leore\nAvidar, Tyler Bosmeny, and the YC Continuity team for reading drafts of this essay."
    }
  },
  {
    "name_blog": "How to measure leadership",
    "description_blog": "Measuring leadership through bottom-line company performance also fails to provide any clues as to how someone can improve as a leader. So is there a better way?",
    "authors": [
      "Ali Rowghani"
    ],
    "related_categories": [
      "Management",
      "CEO",
      "Leadership",
      "People"
    ],
    "page_url": "https://www.ycombinator.com/library/3j-how-to-measure-leadership",
    "content": {
      "table_of_contents": [],
      "whole_content": "Are you a good leader? How do you know?\nIn a startup culture that is obsessed with management by metrics, many founders struggle to answer this critical\nquestion about themselves. It’s tempting to measure leaders simply by the success of their businesses. But even the most\nsuccessful founders know how much timing and luck can be confounding factors in this approach. Measuring leadership\nthrough bottom-line company performance also fails to provide any clues as to how someone can improve as a leader. So is\nthere a better way?\nThis essay describes a way to measure leadership that I hope will be helpful to those who seek to improve as leaders. It\nis based on observations I made when working closely with four leaders that I consider extraordinary: Ed Catmull\n(Pixar’s founder), Steve Jobs (Pixar’s CEO), John Lasseter (Pixar’s Chief Creative Officer), and Bob Iger (Disney’s\nCEO). To my surprise, these men could not have been more different in style, temperament, and approach. They did not\nconform to a single model of leadership. One was an introverted scientist while another was an extroverted artist. One\nwas a college dropout who had founded a company and was infamous for brash behavior while another was a career executive\nwho was exceptionally genteel and diplomatic.\nDespite their differences, these men were able to create an extraordinary amount of trust in the people around them.\nThey built trust by doing the same three things exceptionally well, though each in his own way. I believe that these\nthree traits are the foundational traits of great leaders You cannot be a great leader without them because you cannot\nbuild trust without them. And the trick to measuring leadership is to measure a leader’s effectiveness along these three\ndimensions, as detailed in the notes section\nat the end of this\npost\n.\nThree Foundational Characteristics of Great Leaders\nI believe that people of all temperaments, personality types, and personal/professional backgrounds can be great\nleaders, and that they can lead quite differently and still be successful. But to be trusted and followed as a leader,\nyou must excel in three key areas:\n1. Clarity of Thought and Communication\nGreat leaders think and communicate clearly. They describe a vision of the future that people find compelling to work\nhard to achieve. If your employees are confused about your mission and strategy, or do not find it motivating or\ncredible, they will not follow you with the focus and determination necessary to\nsucceed.\n1\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nClarity of thought always precedes clarity of language. To improve your communication, the best thing you can do is to\nspend more time thinking about what you believe is truly important for your business. Once you’ve crystallized what’s\nimportant for everyone to understand, practice expressing it in simple terms. Simplicity is vital. A great example is\nthe retail strategy that Amazon’s Jeff Bezos\ncommunicated\nto his\nteam years ago. He based it on three simple but enduring customer preferences: lower prices, bigger selection, and\nfaster delivery. To this day, anything Amazon employees do to lower prices, expand selection, and accelerate delivery\ncreates value for the customer and advances the company’s strategy. As Bezos said, “You can build a business strategy\naround the things that are stable in time....when you have something that you know is true, even over the long-term, you\ncan afford to put a lot of energy into it.”\nTaking time to prepare internal communications becomes increasingly important as your company grows. As you scale, your\nemployee base grows more diverse, and fewer of your employees have a personal relationship with you. Hence, they are\nmuch less likely to just “know what you mean” and more likely to be confused and critical if you don’t communicate well.\nGreat leaders spend hours preparing their internal communications. They don’t just wing it, no matter how naturally\ntalented they are as communicators. As an example, Shopify CEO Tobi Lütke and his senior team spend hundreds of hours\npreparing for their annual employee Summit. As Tobi says, “We want to be a loosely coupled, highly aligned company. The\nSummit is the main enabler of this because it is a grand sync. We spend countless hours preparing because if we\ncommunicate well at the Summit, we achieve great alignment by the end. We can then use our weekly townhalls to keep us\nfrom drifting too far apart until the next Summit.”\n2. Judgment about People\nGreat leaders have great intuition about people, particularly when it comes to selecting people to whom they give power\nand responsibility. They are able to see hidden potential in people and detect cases where ambition exceeds ability. And\nwhen they make hiring or promotion mistakes, which are inevitable, they have the courage to rectify the situation if the\nemployee cannot be coached to improve. Nothing does more damage to an organization or to the standing of a leader than\npicking the wrong leaders or failing to correct these mistakes when they happen. The judgment around the initial hiring\nor promotion decision is the most important, as leaders who fire too many of their own also lose a lot of credibility\nand trust.\nNot everyone is naturally gifted when it comes to intuition about people, but everyone can improve. Gathering more data\nwill help you make better people decisions. When looking to hire leaders, try to meet as many of the best people in the\nfield as possible as a way to sharpen your recognition skills. Spend as much time as you can getting to know executives\nthat you are considering hiring. In a\n2016 interview\n, Uber CTO Thuan Pham\ndescribes being interviewed by CEO Travis Kalanick for “30 hours straight, one-on-one, over two weeks,” including over\nSkype when Travis was traveling. “Throughout those 30 hours,” Pham continued, “I actually forgot it was an interview. It\nwas just like a discussion between two colleagues.”\nIt also helps to do extensive reference checks on hires and ask for examples of behavior that shows good judgment and\nhigh integrity because these traits are hard to test in an interview. And try to learn from cases when you hire or\npromote the wrong person and are not able to coach them to improve.\n3. Personal Integrity and Commitment\nGreat leaders have exceptional personal integrity and commitment to their mission. Integrity means standing for\nsomething meaningful beyond oneself rather than being motivated by narrow personal interests. It means being able to\nadmit when you have made a mistake rather than acting like you are always right and having the humility to receive\ncritical feedback openly and work to improve. It means avoiding behavior like favoritism, conflicts of interest,\ninappropriate language, inappropriate work relationships, etc., that erode trust. A useful test is to ask yourself: if\nyour team had full transparency into your private communications and behavior towards employees, would you be\nembarrassed by anything you have done or said? This is a high bar, but one that great leaders strive to meet.\nBeyond putting in the time, great leaders make their work into their core life mission in ways that inspire others. They\nderive deep personal meaning and fulfillment from leading people to achieve a mission. Their personal commitment\ntranslates into high levels of personal productivity and execution, which in turn becomes the foundation for pushing\ntheir organizations to do the same.\nIt All Adds Up To Trust\nSo how do you know you are good leader? You are a good leader if you excel in the three areas described above and\nthereby earn the trust of the people around you.\nBuilding trust in this way is both a science and an art; it requires both competence and character. Trust is built when\nleaders think clearly about the future and move their organizations to the right place, in terms of product, sales, and\npeople. Do the predictions you make about the future – about the products you should build, the investments you should\nmake, and the changes in competitive or technological landscape – prove to be accurate? And do the people you have\nchosen to lead in your organization prove to be the right ones? Over time, the answers to these questions become known,\nand if you answer a lot of these questions correctly, you earn trust. I consider this the “science” of building trust.\nIt’s built on clarity of thought, good communication, and good judgment about people.\nThe art of building trust is more complicated. It is closely tied with a leader’s ability to communicate with integrity.\nIt is built when you say the right thing at the right time, and show empathy and good judgment. It grows when you stand\nfor ideals bigger than yourself rather than caring primarily about your personal success, wealth, fame, or position. It\nalso grows when you are honest with others, admitting what you don’t know, and not trying to be someone else. This is\nwhy you can’t try to copy Steve Jobs or Ed Catmull in your quest to be a great leader. You can only be yourself.\nMost leaders understand the science of building trust. They understand that they need to think and communicate clearly\nabout product and strategy and make good choices when they are hiring and promoting people into leadership positions.\nThey understand that they have to show deep commitment and get things done. But in my experience, the truly great\nleaders also understand the art of building trust. Leaders have to make many hard decisions – firing people, taking\nresponsibility for mistakes, disappointing people by saying no, etc. Great leaders treat these challenges as\nopportunities to build trust. They ask themselves which course of action and which style of communication will increase\nthe trust that employees have in them. When faced with a difficult challenge, they optimize for trust.\nThis, perhaps, is the lesson that great leaders teach everyone else. In difficult times, as you evaluate one course of\naction versus another, ask yourself which path will generate more trust in you as a person and as a leader. Always try\nto choose that path.\nThanks to Tobi Lütke, Tyler Bosmeny, Daniel Yanisse, David Rusenko, Sam Altman, Michael Seibel, and the YC Continuity\nteam for reading drafts of this essay.\nNOTES:\nSurvey Questions for Evaluating Leaders\nThe best approach to measuring leadership is to evaluate a leader’s performance in the\nthree areas in which all great leaders must excel: clarity of thought / communication, judgment about people, and\npersonal integrity / commitment. Measuring leadership in this way requires gathering data from employees, but most\nstartups have never done this in a systematic way.\nEventually, all companies need to develop methods to gather employee sentiment and turn it\ninto structured data. In fact one of the core responsibilities of a good HR team is to gather and document employee\nsentiment and use it to assess leadership.\n2\nI suggest that startups\nbegin to gather this data systematically once they reach about 50 people in size.\nWhatever set of data gathering techniques is used, it’s critical to ask the right\nquestions to assess leadership performance. These sample questions are meant to serve as a starting point for a more\nthorough employee survey. These questions are written to evaluate a CEO, but can easily be adapted to any leader in the\ncompany. Part of the goal is to see the level of alignment between a CEO’s responses and that of the employees.\n1. Clarity of Thought and Communication\nQuestions for the CEO\nWrite down your company’s mission, strategy, and key metrics (“mission-to-metrics”) in\nless than 2 minutes.\nWrite down 2-3 themes that you have consistently emphasized in your communications to\nemployees.\nQuestions for Employees (current and departing)\nWhat is the company’s mission and strategy?\nWhat are the most important operating metrics that measure the company’s\nsuccess?\nHow does your work contribute to these key success metrics?\nHow often has the company’s definition of mission, strategy and metrics changed in the\npast 24 months?  Or has it been the same over this time?\nWhat do you think is really important to the CEO?  What does he or she consistently\nemphasize in communications?\nHow effective and clear is the CEO in the following communication methods: written,\nspeaking to a large group, speaking with a small group?\n2. Judgment About People\nQuestions for the CEO\nRate the effectiveness of each leader you have promoted or hired at the\ncompany.\nWrite down the name of any leader that you have promoted or hired that you don’t think\nis actually the right person to lead his/her area.\nHave you exited the right employees?  Or have you made mistakes?\nQuestions for Employees (current and departing)\nHas the CEO chosen good leaders at the company?\nWhich leaders do you respect and why?\nAre there leaders that you think are weak and why?\nHas the CEO replaced any leaders in the past year?  Were these good decisions, from\nyour perspective?\nWhat are the strengths and weaknesses of the senior leader (i.e., CEO direct report)\nwho oversees your area?\nHave any high performing members of your team chosen to leave the company in the past\nyear?  Why did they choose to leave?\nAsk departing employees: are they leaving because of concerns about senior\nleadership?\n3. Personal Integrity and Commitment\nQuestions for the CEO\nAre there actions you have taken which you feel have diminished the confidence that\nemployees have in your integrity?  What are they?\nDo you ask for feedback about your performance?  Are there examples when you have\nresponded to employee feedback and changed your behavior?\nHow do you rate your level of commitment to your job?\nHow do you rate the level of commitment of your direct reports?\nQuestions for Employees (current and departing)\nHow would you rate your CEO’s integrity / moral compass?\nDo you think the CEO listens well and is open to feedback?  Are there examples where\nfeedback has changed the CEO’s behavior in a positive way?\nHave you seen examples of favoritism, inappropriate relationships, inappropriate\nlanguage, conflicts of interest, or any other unethical behavior in the CEO?\nWhen asked anonymously, what do employees / direct reports feel motivates the\nCEO?\nHow would you describe the level of personal commitment that the CEO shows to the\nmission of the company?\nHave you seen examples of lack of commitment from the CEO?\nHave you seen examples of lack of commitment from other leaders or from\nemployees?\n1\nPlease see “\nWhat’s the Second Job of a Startup\nCEO\n” for a more thorough\ndiscussion of creating purpose & alignment.\n↩\n2\nData gathering methods include employee roundtables mediated by the CEO or HR, structured\nquestions asked as part of employee exit interviews, all-hands or team meetings to gather employee feedback, hiring of\nexternal consultants to survey or interview employees, and on-line or email surveys of employees.\n↩"
    }
  },
  {
    "name_blog": "Series A diligence checklist",
    "description_blog": "This checklist includes all the information you'll need to have ready once you sign a term sheet. Having all of this together in one place before you sign a term sheet will cut as much as a week off of your closing process.",
    "authors": [
      "Aaron Harris",
      "Jason Kwon"
    ],
    "related_categories": [
      "Fundraising",
      "Series A"
    ],
    "page_url": "https://www.ycombinator.com/library/3h-series-a-diligence-checklist",
    "content": {
      "table_of_contents": [],
      "whole_content": "When we launched our\nSeries A program\na few months ago, we decided\nthat what we learn along the way shouldn’t just be kept inside of YC. We're going to publish tools and learnings from\nthe program that should help every company create better outcomes.\nThis is the first tool. It’s simple, but effective.\nBelow, you’ll find a Series A diligence checklist. This runs through all the pieces of information you’ll need to have\nready once you sign a term sheet. Having all of this together in one place - a Data Room - before you sign a term sheet\nwill cut as much as a week off of your closing process. Founders don’t generally realize that closing an A can take more\nthan a month, much of which is often spent tracking down documents for lawyers.\nJason Kwon, the GC of YC Continuity put this checklist together after being involved in hundreds of financings with\nnearly every law firm and VC fund in the valley.\nCorporate Records and Charter Documents\nAll minutes of directors’ and stockholders’ meetings, and all written consents of directors and stockholders.\nCertificate of Incorporation, Certificates of Designation, Rights, etc., and Bylaws.\nSimilar information for the Company and subsidiaries, if any.\nA corporate entity organizational chart, if there are any parents or subsidiaries.\nBusiness Plan and Financials\nCurrent business plan and any financial projections.\nMost recent financial statements.\nIntellectual Property\nA list of the Company’s trademarks, patents, copyrights and domain names (or any applications therefore) including\ndocumentation of filing or registration with the appropriate governmental entities.\nIf any of the foregoing were assigned to the Company, please so state and provide documentation of the assignment\nand recordation with the appropriate governmental entities.\nSecurity Issuances and Agreements Concerning Securities\nA list of the Company’s stockholders, including issuance dates and original issuance price.\nA list of the Company’s option holders, including grant dates and exercise prices.\nCopies of agreements relating to outstanding options, warrants, rights (including conversion or preemptive rights)\nor agreements for the purchase or acquisition of any of the Company’s securities, and agreements relating to the\nCompany’s past stock issuances.\nAny documents evidencing registration rights for the Company’s securities, or evidencing any agreements among the\nCompany’s shareholders or between the Company and its shareholders.\nA summary of the vesting schedules of any stock or options subject to vesting, including any vesting acceleration.\nAgreements relating to voting of securities and restrictive share transfers.\nEvidence of qualification or exemption under applicable federal (including Rule 701) and state blue sky laws for\nissuance or transfer of the Company’s securities.\nMaterial Agreements\nThe Company’s standard terms of service / terms of use for its customers.\nAny agreements, understanding, instruments, contracts or proposed transactions to which the Company is a party or by\nwhich it is bound which involve obligations of, or payments to, the Company in excess of $25,000.\nAny personal property leases.\nAny agreements concerning the purchase, lease, or sublease of real property.\nAny documents evidencing indebtedness for money borrowed or any other liabilities incurred by the Company.\nAny documents evidencing any mortgages, liens, loans and encumbrances with respect to the Company’s property or\nassets.\nAny documents evidencing any loans or advances made by the Company.\nAny licenses or agreements of any kind with respect to the Company’s or others’ patent, copyright, trade secret or\nother proprietary rights, proprietary information or technology, including employee confidentiality and proprietary\ninformation agreements.\nAny insurance policies held by the Company or of which the Company is a beneficiary and a summary of such policies,\nif available.\nAny judgment, order, writ or decree by which the Company is bound or to which it is a party.\nAny standard forms of agreements used by the Company.\nAny joint venture and partnership agreements.\nAny management, service and marketing agreements.\nAny confidentiality and nondisclosure agreements.\nAny agreements requiring consents or approvals in connection with the financing.\nAny consulting contracts.\nAny other agreements material to the business of the Company, or outside the ordinary course of business.\nA list of officers and directors. If any officers are not currently devoting 100 percent of their business time to\nthe Company, please note them on this list.\nInformation Regarding Disputes and Potential Litigation\nAny correspondence or documents relating to any pending or threatened action, suit or proceeding or investigation,\nincluding, without limitation, (i) those involving the Company’s employees in connection with their prior or present\nemployment or use of technology and (ii) those being conducted by or before any governmental entity or regulatory\nagency.\nAny correspondence or documents relating to allegations of the Company’s infringement of the proprietary rights of\nothers.\nAny correspondence or documents relating to any labor agreements or actions, union representation, or strike or\nother labor dispute.\nInformation Regarding Employees and Employee Benefits\nA list of the Company’s employees and consultants, including title, base salary, target bonus (if applicable),\ncommission plan (if applicable), classification (including, if an employee, whether the employee is exempt or\nnon-exempt) and state of residence.\nThe Company’s standard form of offer letter.\nAny agreements, understandings or proposed transactions between the Company and any of its officers, directors,\naffiliates, or any affiliate thereof, including without limitation, employment agreements and offer letters with\nseverance benefits or vesting acceleration provisions.\nAny plans, agreements or arrangements that provide benefits contingent upon a change in control.\nAny severance or deferred compensation plans (including any salary deferral agreements, whether written or oral,\nwith employees or consultants).\nAny employee benefit plans, including, without limitation, stock option plans, 401(k) plans, pension plans and\ninsurance plans.\nAny forms of agreements used in connection with any stock option plans (such as a form of option agreement, notice\nof exercise and restricted stock purchase agreement).\nIf the Company sponsors a 401(k) plan, any determination or opinion letter and Form 5500 filings for the last 3\nyears.\nAll documents or other information relating to any loans made by the Company to its employees, directors or\nconsultants.\nThe Company’s employee handbook.\nIf the Company has any foreign employees, separately list (by country) all benefits provided to foreign employees.\nEquity Grants\nIf you have any pending or promised equity grants you haven't already taken care of before you start your Series A\nprocess, do that ASAP. More people than not believe that once you have a term sheet, you can no longer use your\ncurrent 409A valuation for option/stock grants because a material event has occurred that implies a newer (and hopefully\nhigher) valuation for the company's common stock. Team members that were hired earlier who haven't been granted their\nequity yet will then have to receive their equity at a higher strike price, which reduces their upside. Some hires will\nrealize this and you may then have to increase their compensation (in equity, cash or both) to make up the difference to\navoid a morale issue. Since you cannot control the exact timing of when you receive a term sheet, the prudent thing to\ndo is to make sure there isn't a significant backlog of equity grants while you are in the middle of your fundraise\nprocess.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply"
    }
  },
  {
    "name_blog": "Advice for companies with less than 1 year of runway",
    "description_blog": "Having low runaway is a tricky spot to be in. Many founders delude themselves into thinking they can raise more money to get out of it. Here we discuss why this is bad and other counter-productive ideas founders have.",
    "authors": [
      "Dalton Caldwell"
    ],
    "related_categories": [
      "Finance",
      "Cash Burn",
      "Founder Psychology",
      "Decision Making",
      "Staying Alive"
    ],
    "page_url": "https://www.ycombinator.com/library/3Z-advice-for-companies-with-less-than-1-year-of-runway",
    "content": {
      "table_of_contents": [],
      "whole_content": "Let's imagine that you are the founder of a company that has successfully raised an angel or institutional round and are\ncurrently in a situation where you have 12 months or less of runway.\nThe hardest part of dealing with a low runway situation is managing your own psychology. You have to simultaneously\nmanage your own anxiety to not be overly negative about your prospects, but also not be irrationally positive. It's a\ndelicate balance.\nThe first step is to understand exactly how much cash and runway you have.\nBefore reading further, make sure you have\nread both\nThe Fatal Pinch\nand\nDefault Alive or Default\nDead\n.\nIf you are Default Dead then it is your responsibility as a founder to immediately take actions to become Default Alive.\nThe mechanisms by which you can move from Default Dead to Default Alive are straightforward: Either you need to grow\nrevenue more quickly, cut costs, or both.\nCounter-productive ideas\nFounders can get caught in a thought cycle which causes inaction and an inability to fix the situation they are in.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nHere are some common counter-productive ideas:\nThe Fatal Pinch\ndoes not apply to me\nInvestors will continue to fund my company if I run out of money\nIf I fail at fundraising I can just sell the company\nMy conversations with potential acquirers or investors are very far along and likely to happen\nAcquirers won’t buy us if I cut costs\nMy employee morale will plummet if I cut costs\nNew investors won’t fund us if I cut costs\nDon't let these ideas be the justification(s) for why you choose to remain Default Dead.\nUnderstand your leverage in a negotiation\nWhat can we learn from the above graph?\nDelaying taking action to reduce burn is a bad strategy. Make changes to become Default Alive\nnow\n.\nFrom a game theory perspective, an investor or acquirer is best served to stall and drag you along until you have no\nleverage at all. An opportunistic acquirer or investor is unlikely to say \"no\" outright, and will keep their options\nopen as you become increasingly desperate.\nIf things looks bleak now and you take no corrective action, it is overwhelmingly likely the situation will get\nworse, not better.\nSome tips on reducing burn\nIf you want to reduce burn, the least painful thing to do is make a lot more money immediately. Hopefully you have been\ntrying to do this anyway.\nBut what if immediately dramatically increasing revenue to become Default Alive is not possible? You must cut costs.\nReal estate/lease costs are binding agreements and very difficult to get out of. Real estate obligations are a common\ncause of death for later stage companies.\nPayroll costs are the most likely source of high burn scenario. As mentioned in\nThe Fatal\nPinch\n, over-hiring is usually the root cause of high burn. If you do choose to reduce\nstaff it is imperative to treat your former employees well. You should also be transparent with your remaining\nemployees. Remember: You should always treat your staff as you would want to be treated.\nThe easiest things to cut are things like PR and marketing expenses, as well as random incidental spending on\nperks/parties. Don't blow your money on this stuff.\nThe point of no return\nSo what happens if you have less than three months of cash? It's important to face the issue head on and account for\nyour liabilities and the scenario of shutting down your company.\nIn many cases,\n<2 months is the point of no return\n. If you are in this state it is immediately necessary to lay off\nyour employees and give them severance, pay down your obligations, and use your remaining cash for shutdown costs. If\nyou don't do this and instead end up with zero cash and outstanding payroll, tax or other obligations, things will get\nVery Bad.\nSome things to consider at this stage:\nWhen you hit the point of no return, you should shut down your company.\nDo not become insolvent. Pay your debts. You must pay your tax and payroll obligations.\nIn especially messy scenarios you can end up with personal liability. Consult with your lawyers regarding how to do\nan orderly shutdown.\nDon’t drag things out and end up in a no upside situation: no upside for you, for your employees, for your\ninvestors, or for your customers.\nEven if things go poorly, behave in a way you would be proud of.\nIt's tough to be a founder in a low runway situation. Get support and advice where you can get it. Mentors and\nadvisors can help you navigate through these times. Often the toughest thing for a founder that has made it this far\nis to \"admit defeat.\" If you are worried about your reputation, keep reminding yourself that it's just as important\nto handle situations well when things go poorly as it is when they are going great.\nIn closing, if you remember nothing else, remember these two things: 1) don't lie to yourself and 2) act quickly and\ndecisively."
    }
  },
  {
    "name_blog": "Pinduoduo and the rise of social e-commerce",
    "description_blog": "The success of Pinduoduo in China suggests there is a huge opportunity for social commerce platforms to emerge in other regions. Learn how Pinduoduo grew so quickly by creating a new category in social shopping.",
    "authors": [
      "Anu Hariharan",
      "Nic Dardenne"
    ],
    "related_categories": [
      "Founder Stories"
    ],
    "page_url": "https://www.ycombinator.com/library/2z-pinduoduo-and-the-rise-of-social-e-commerce",
    "content": {
      "table_of_contents": [],
      "whole_content": "Across the globe, as the novel coronavirus moves us from communal spaces into the confinement of our homes, our social\nexperiences are forced to adapt. Beyond the social networks we already know and use, we are finding new ways to\nintegrate social into our online lives. At Y Combinator, we are considering what this might mean for the future of\ne-commerce. For several years, we have had our eye on Pinduoduo as an interesting case study. But now, as China is\nrecovering from the impact of COVID-19, Pinduoduo and their social-shopping approach is even better poised to fully\ncapture the offline-to-online transition in commerce. The success of Pinduoduo in China suggests there is a huge\nopportunity for social commerce platforms to emerge in other regions.\nBut first, a bit of background\nWhen Pinduoduo launched in 2015, there was little room for a new commerce platform in China. Two major e-commerce\nplatforms, JD and Taobao/TMall (sub brands of Alibaba), dominated online commerce in China, much like Amazon dominates\nin the US. During that same year, JD and Taobao generated a combined $433B of gross merchandise\nvalue.\n1\nAnd yet, five years later, Pinduoduo is defying\nexpectations, skyrocketing from a start-up to\na 57\n2\n-billion-dollar-company with an active buyer base of 585\nmillion that generated over $144B of Gross Merchandise Value in the last twelve\nmonths.\n3\nIn 2020, it is China’s second largest e-commerce platform\non an active user basis only lagging behind Alibaba.\nPinduoduo found room in e-commerce, not as a competitor to search-based websites like JD, but as a new e-commerce\nplatform focused on interactive and social shopping experiences online. Social shopping may seem like a new concept, but\nthe reality is that in the physical world, shopping is meant to be “interactive and fun” and purchases are regularly\ninformed by friends and family. Consider how much harder it feels to purchase a new clothing item without immediate\nfeedback from friends. E-commerce platforms like JD, Alibaba, and Amazon don’t account for this. Instead, they optimize\nfor efficiency, funnel conversion, and purchase rates. Pinduoduo, on the other hand, has tried to mimic the offline\nshopping experience online by building community via their team purchase model, driving engagement via fun and\ninteractive games and rewards, and offering personalized experiences and value via recommendations.\nConsumers’ desire for social engagement while shopping is highlighted by sales within categories. Only 29% of\napparel, 11% of health & personal care, and 3% of food & beverage purchases were expected to happen online in 2020 in\nthe US (compared to 55% and 43% of books/music and computers/electronics purchases,\nrespectively\n4\n). These numbers reveal a missing element in\ne-commerce. Social shopping is particularly important for categories where consumers seek feedback or recommendations\nfrom friends. Pinduoduo is one of the first companies to successfully create a social shopping experience online, and\nhas accelerated the transition of commerce from offline to online in China.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nIn our view, Pinduoduo’s rapid success in social commerce will be replicated by others globally, which will continue to\ndrive commerce in social-driven categories online. And so, to understand the success of Pinduoduo is to understand the\nfuture of global e-commerce.\nCreating Community via Team Purchase\nThe core of the Pinduoduo experience is team purchase, where buyers form a group in order to receive discounts from\nsuppliers. The user experience, as laid out in the graphic below, is as follows: (1) for each item, merchants decide two\nprices – one for individual purchase and one for team purchase. If the user opts for a team purchase, he or she may\neither (2.1) initiate a team purchase, or (2.2) join an existing team purchase. If the user has initiated a team\npurchase, he or she may use social platforms such as WeChat to proactively encourage friends to join their team (3.1) or\nmore passively wait for other buyers to join the purchase on the Pinduoduo (Pinduoduo) platform (3.2). A team needs to\nbe formed within 24 hours to have the order confirmed. Once a team is formed, the purchase is confirmed and the product\nis shipped within 48 hours.\nNearly all Pinduoduo transactions are completed using team purchase. In the early days, the size of many groups was\nlarge (e.g., 10+), but as Pinduoduo has scaled the group size requirements have declined. Team purchase is beneficial to\nboth buyers and manufacturers; buyers benefit from better prices for goods they want and sellers benefit from increased\ndemand and better visibility of future demand. In addition to driving down prices, team purchase helps solve the “trust\ndeficit” of retail in China’s developing cities, where more\nthan 80%\n5\n) of retail is unorganized and consumers rely heavily on\nsocial recommendations to initiate transactions.\nPinduoduo’s team purchase is often compared to Groupon in the US because they both enable a form of group buying. But\nthe models are actually very different. First, Pinduoduo deals are designed by sellers, but initiated by consumers\n(i.e., users must create or join a group of a certain size to access a deal) whereas Groupon deals are designed and\nmanaged by sellers. Second, Pinduoduo’s team purchase is used for everyday goods (e.g., fruits/vegetables, apparel) that\nare valuable to consumers vs. one-off products/experiences that haven’t sold well elsewhere. Third, products on\nPinduoduo are offered by geographically diverse merchants from across China and increasingly from all over the world.\nThis is in contrast to the mostly local sellers that leverage Groupon to drive customers to their stores/locations. This\nresults in a much stronger consumer value proposition as users are getting discounts on goods they might need to\npurchase anyway vs. letting sellers dictate discounts by aggregating demand on low-value goods or excess inventory.\nTo maximize this effect, Pinduoduo launched in the fruits and vegetables category. This was strategic for two\nreasons: 1) incumbents were focused on non-perishable items, so competition was limited and 2) fruits and vegetables are\nlower order value, high frequency goods, which means users had a reason to use Pinduoduo regularly. When potential\nbuyers saw a great deal they would forward it to their neighbors and friends via WeChat to create a team of 10+ buyers\nto be able to purchase the product. In return, the group initiator would get produce for free as they helped Pinduoduo\nacquire 10 incremental users. Because team purchase drove organic sharing of the product, Pinduoduo was able to grow its\nuser base very quickly. Only one month after launching their first party application in January 2016 (transactions prior\nto this happened via WeChat), Pinduoduo already had over 10 million customers. Only four years later, Pinduoduo has\ngrown to 585M active buyers. To compare, Alibaba crossed the 500M active buyer threshold 14-15 years after launching its\nconsumer facing marketplace vs. just 4 years for Pinduoduo. The take away for startups is that the team purchase model\nis significant because it enables behaviors associated with offline commerce (e.g., sharing products or ideas with\nfriends, browsing a shopping mall with friends) in an online setting. Team Purchase helped Pinduoduo grow quickly and\ncreate a unique recommendation engine based on users’ social interactions. While Team Purchase may be unique to China\ntoday, we expect social e-commerce to be global. New commerce platforms that can leverage social relationships will\naccelerate the offline to online transition and if you are able to tap into groups of social relationships vs.\none-to-one relationship the faster your platforms will scale. PDD has one of the most powerful network effects in the\nworld (\nReed’s law\n: The value of a group-forming network is proportional to\nnumber and the ease with which groups form within it. Think Slack, WhatsApp Groups -- they all grew exponentially as\nthey could tap into groups of social relationships)\nWhile Team Purchase was the main reason for Pinduoduo’s rapid growth, a significant enabler of Pinduoduo’s virality was\nthe widespread use of WeChat as a platform in China. Tencent (WeChat’s owner) is a large investor in Pinduoduo, and as a\nresult was happy to let Pinduoduo grow on top of their ecosystem. We think it is highly unlikely that Facebook would\nallow a social commerce application like Pinduoduo to be built on top of Messenger or Instagram in the US. That said,\nmessaging is fragmented in the US, so this is not an issue for US-based social e-commerce companies.\nUsers visit Pinduoduo without any specific intent, much like visiting a real-world shopping mall. In a shopping mall,\nthe time that a consumer spends at the mall directly correlates with the amount he or she buys. As such, Pinduoduo has\ngamified the experience to maximize the amount of time a user spends on the app irrespective of whether they make a\npurchase or not. The primary features/experiences that have incentivized sharing and usage are Daily Check-Ins, Price\nCuts, Card Programs, and Mini Games. Social commerce does not just mean connecting user accounts to Facebook. It means\ninvesting in creating physical world experiences online -- specifically bringing the fun of shopping offline to online\nplatforms. We will walk through how Pinduoduo has implemented this below.\nDaily check-ins\nThe daily check-in is a feature, prominently featured in the center of the home page. It encourages daily usage by\nrewarding users with redeemable points each time he or she checks into Pinduoduo. The user experience is laid out in the\nimage below. First, the user clicks the yellow icon to administer a check-in. Each time the user checks-in they are\ngranted a small amount of money and/or credit. Over many months (and many check-ins), these rewards accumulate. In the\nexample below, the user has accumulated 26.6 RMB of rewards. To cash out in the form of a no minimum spend voucher, the\nuser has to reach a certain minimum value (i.e., 30 RMB).\nThe daily check-in is a simple yet brilliant feature that encourages users to engage with Pinduoduo on a daily basis.\nWhile each check-in does not generate revenue for Pinduoduo, the product experience eventually ties back to commerce\nif/when users redeem their vouchers. This theoretically should yield a higher customer lifetime value for Pinduoduo.\nPrice Chop\nPrice Chop is a feature that allows users to get products for free by sharing a custom link with their friends. The\nfeature is outlined in detail below. Once in the Price Chop section of Pinduoduo, the user selects the goods that they\nwant for free. Upon selection, a 24 hour timer begins. To get the item for free, the user must share their link with as\nmany friends as possible. Every friend that clicks on the link and engages with Pinduoduo (no purchase required) drives\nan incremental discount for the initiator. If you don't reduce the price to 0 within 24 hours you don't get the item for\nfree and you have to start all over again!\nThe product mimics the experience of “leveling” in a massive online multiplayer game like World of Warcraft whereby it\nbecomes harder to level up as you graduate to higher levels. In the case of Pinduoduo, the difficulty is customized\nbased on the user (i.e., easier for low-engagement users) and the item (i.e., expensive items are more difficult to\nchop). Additionally, similar to leveling, as you get closer to 0 (i.e., a higher level) each incremental friend that\nengages with your link grants smaller and smaller discounts.\nSimilar to Daily Check-In, Price Chop encourages users to engage with Pinduoduo, and eventually ties the engagement to\nan order on the commerce platform. But unlike Daily Check-In, Price Chop incentivizes users to share Pinduoduo with\ntheir social network. So in addition to increasing customer lifetime value, Price Chop also helps Pinduoduo efficiently\nacquire customers via user-user sharing of the product.\nCard Program\nPinduoduo’s card program is designed to encourage users to share the product amongst friends and to save money via\nvouchers/special discounts. Pinduoduo has created several different cards that either (1) encourage certain user\nbehaviors or (2) provide utility to a Pinduoduo user. The three most popular cards are the Free Pass Card, the Black\nBrand Card, and the Brand Card.\nThe Free Pass Card is similar to a loyalty program where users can enjoy a “team purchase discount” without having to\njoin a team. Users usually get one Free Pass Card after making two purchases on Pinduoduo.\nThe Brand Black Card encourages users to leave reviews on the platform by offering them a discount on branded products\nin return. Pinduoduo gives users a Brand Black Card after they have posted 2 - 4 reviews on the website. This is\nimportant as consumers rely on reviews and recommendations from previous buyers when making purchase decisions. The\nBrand Black Card incentivizes a good user behavior that makes the platform better for the entire user base.\nThe Brand Card aims to promote Pinduoduo’s branded products. Consumers get a Brand Card after they have made a purchase\non Pinduoduo. They can share their brand cards with friends via WeChat, to attract their friends to browse and buy\nbranded products from Pinduoduo. It is an effective way to encourage users to buy branded products they would not\nnormally buy because the recommendation/card was sent to them by a trusted friend.\nThis is also important because Pinduoduo has historically been used to primarily buy non-branded products. The Brand\nCard is an effective incentive mechanism to increase Pinduoduo’s branded product market share in China.\nMini Games\nPinduoduo wants users to engage with the platform as often as possible, and they want the experience to mimic real-world\nshopping. As such, they want users to engage with the app to have fun, even if it does not immediately translate into a\npurchase. Pinduoduo now hosts in-app games to help drive up daily time spent on the platform. The first popular game on\nPinduoduo was Duo Duo Orchard. Think of Farmville except now the rewards are real physical goods. The game is simple – a\nuser creates and nurtures a virtual fruit tree to eventually yield a real box of fruit shipped to his or her address. It\nalready has more than 11M DAUs!\nThough not multiplayer, Orchard has social cooperation aspects that drive up network engagement as well. Once users\nchoose a tree to create (e.g., mango, lemon, macadamia nut), they need to nurture the tree with water and fertilizer.\nThe more you shop on Pinduoduo the more water droplets you receive to nurture your tree. To encourage more interactions\nwith friends, you can also share the water droplets. Team purchases and sharing product links enables users to obtain\nspecial tools like a water can, decorations for your orchard, or bags of fertilizer, which accelerate the growth of your\ntree. Pinduoduo is expanding its in app game selection. It recently launched DD Bank, a piggy bank game where users\naccumulate exchangeable coins over time.\nGames like Duo Duo Orchard and DD Bank are ingenious because progress or “leveling” is tied to behaviors that drive\nfinancial goals for the company. By encouraging users to play games on Pinduoduo, they are able to create a win-win-win\nsituation for merchants, consumers, and themselves. More specifically, merchants see more volume, consumers have fun and\nreceive unique discounts, and Pinduoduo generates revenue.\nCreating Value by Offering Personalized Recommendations\nLastly, unlike search-based platforms, Pinduoduo is highly personalized and recommendation based. This means that users\nvisit Pinduoduo without any specific intent, much like visiting a shopping mall in the physical world. Based on\ninformation such as who a user’s friends are, what their favorite categories are, and which of their friend’s they\ntrust, Pinduoduo can make recommendations that are personalized to each user. Pinduoduo is uniquely positioned to do\nthis due to user-user sharing of the product caused by Team Purchase. The data aggregated by the platform allows the\ncompany to optimize what items a user encounters on the app by highlighting (1) products that trusted friends have\nalready purchased or recommended and (2) products in a users’ favorite categories. For new customers, the standard\npractice is to show new users different categories (based on what they know about that user and their friends) and see\nhow they interact with those categories. This is then used to create your buying persona and helps inform future product\nrecommendations.\nBeyond offering personalized product recommendations, Pinduoduo also thinks about value-for-money as a personalizable\nconcept. Based on a user’s purchase/browsing history, Pinduoduo knows whether a user values high-cost branded clothing\nor low-cost non-branded clothing. Based on a user’s specific buying persona, Pinduoduo will only show you clothing items\nthat match your willingness to pay.\nThe Future of Global E-Commerce\nThere is a huge opportunity for companies to build social into their commerce platforms to take share from transactional\nplatforms and expand e-commerce’s overall share of spend. The success of team purchase may be specific to the commercial\nlandscape of China, but the insights Pinduoduo has surfaced about social integration in commerce is likely entirely\nuniversal. Going forward, when building their products, founders should consider the insight that shopping is a social\nactivity. Web 1.0 platforms - including Amazon - optimize for efficiency and don’t serve trust-based categories very\nwell. We firmly believe that by building sharing use cases and fun experiences that mimic the fun of real-world shopping\ninto products, commerce’s offline to online transition will accelerate.\nThere are large indicators that there is major demand for more sophisticated social commerce in the US marketplace\nalready. An obvious example of this is Instagram, which has over one billion users and is now, arguably, one of the\nworld’s largest social shopping platforms. Similarly to Pinduoduo, Instagram has fostered a browsing-based feed from\nfriends and influencers of things that might interest consumers, often accompanied with links to purchase. The rise of\nthe social media influencer economy alone shows that US consumers are ready to fully engage in social online shopping.\nIn fact, we have already seen a few companies come through Y Combinator who are trying to fill this void.\nSnackpass\n, a food app for college campuses, has built social experiences into their\nproduct. Students can send gifts to each other or hatch virtual pets together by ordering food via the app. These\ninteractive experiences encourage increased usage of the company’s product.\nMeesho\n, a reseller\nmarketplace in India, lets its customers create microbusinesses by selling products/goods to their friends and family\nvia Whatsapp and other messaging channels.\nCompanies like Amazon will continue to grow in market share, for specific shopping needs. But it is inevitable that\nsomething will rise to fill the e-commerce-social browsing void in the US market. And the half-hearted attempts some\nretail platforms are making to bridge that gap are not yet cutting it. Social commerce does not just mean connecting\nuser accounts to Facebook, it means creating new shopping experiences for buyers and sellers online.\nMeanwhile Pinduoduo’s social commerce is only gaining sophistication and market influence. Pinduoduo has already\naggregated enough consumer insights that they are able to collaborate with and influence manufacturers in China to cater\nto their user base. If there is a gap in the US e-commerce market, it is not just an opportunity to grow domestic online\nretail. As the pandemic drives the worlds' social lives to the Internet, there is an undeniable opportunity for\ncompanies to build social into their commerce platforms to accelerate the offline to online transition globally.\nSpecial thanks to the Pinduoduo team and Chloe Gordon for reading and editing multiple drafts of this essay.\n1.\n20-F filings, 1USD:7CNY conversion rate\n↩\n2.\nAs of April 30, 2020\n↩\n3.\nAs of December 31, 2019\n↩\n4.\neMarketer\n↩\n5.\nYC company data\n↩"
    }
  },
  {
    "name_blog": "Advice for new managers",
    "description_blog": "One of the most difficult things about starting a company is that you have to create both a product that people love and a company where people want to work at the same time. Here's advice for those just beginning to grow and manage a team.",
    "authors": [
      "Aaron Epstein"
    ],
    "related_categories": [
      "Management",
      "Leadership"
    ],
    "page_url": "https://www.ycombinator.com/library/2s-advice-for-new-managers",
    "content": {
      "table_of_contents": [],
      "whole_content": "One of the most difficult things about starting a company is that you have to create both a product that people love and\na company where people want to work\nat the same time\n. It’s usually not enough to\njust\nhave a great product, or\njust\nbe a great place to work, because great people build great products, and great people won’t tolerate a bad\nenvironment for very long.\nPeople leave managers, not companies, yet while most founders are obsessive about trying to build a product that people\nlove, many first-time founders raise a bunch of money and start building a team without any management experience at\nall.\nI was one of those first-time founders who had to quickly learn on the job, so here’s some advice I wish someone had\ngiven me when I was just beginning to grow and manage a team at\nCreative Market\n.\nDelegate!\nAs a founder you’re used to doing it all, and it can be scary to shed responsibilities you’ve always\nowned, but you can’t scale yourself and focus on the highest leverage opportunities until you get things off your plate.\nIf you think you’re going to have to work especially late or can’t get to the things you need to in a given day, take\nthat as a signal to delegate to your team.\nCreate growth opportunities.\nGreat people often care about personal growth way more than money or any other tangible\nbenefit you could offer them, so the flip-side of delegating your responsibilities is that you create opportunities for\npeople on your team to do new things, learn, and grow. Don’t hoard them all for yourself.\nInvest in your stars.\nSimilar to how it’s much easier to retain an existing customer than to acquire a new one, it’s\nmuch easier to keep an existing star employee happy than find a new star. Go above and beyond to make sure your stars\nfeel valued, appreciated, and rewarded.\nSet a high bar. Great people want to do big, meaningful things. Push your team with aggressive goals, and you might be\nsurprised what they will accomplish.\nLead by example.\nTeams embody the characteristics of their leaders, and the things you care about will be the things\nyour team cares about. If you sweat the details, your team will learn to sweat the details too.\nYour team’s success is your success.\nGet satisfaction and the feeling of accomplishment from the success of your\nteam. As an individual contributor, it’s easy to look back at the end of a week and feel good about all that you’ve\ndirectly produced. As a manager, you’re responsible for the accomplishments of your team, which can be a difficult\ntransition for a lot of people. The advantage is that you can scale yourself and your vision.\nDeflect all credit and absorb all blame.\nUse “I” when talking about a screw-up, and use “we” (or better yet,\nspecific contributors’ names) when talking about successes. A little recognition goes a long way to make people feel\nvalued.\nShare the big picture.\nIt’s important for people on your team to understand how their work and role fits into the\nbig picture of the business, and why they’re doing what they’re doing. It’ll give them a sense of purpose and motivation\nto understand how they’re contributing to the success of the business. It’s easy to take it for granted that your team\nis clear on this, but this is one of those things where you want to constantly make that connection.\nRepeat yourself often.\nYou should feel like you sound like a broken record about the things that are important to\nyour company — your mission, your vision, your KPIs, etc. You think about it all the time, but the people on your team\ndon’t, and most people need to hear something many times before it truly gets ingrained in their memory. You’ll know\nyou’re repeating key messages enough when every single person on your team will be able to explain them to a complete\nstranger exactly how you would’ve said it.\nYou’re in charge.\nIt can be uncomfortable telling people what to do if you’ve never done it before. But you are the\nleader, and everyone on your team will be looking to you for direction and guidance, so own it. People want structure\nand direction, so don’t be afraid to use phrases like “I need…” and “I want…” to shape your team in your image.\nFocus on the What, not the How.\nCommunicate your vision for what success looks like, to give your team a framework\nand goals to guide their decisions and work. It’s a way for you to “be in the room” when the work gets done without\nmicromanaging the work.\nSet deadlines and hold people accountable.\nWhen you give someone a task, ask “by when?”, then add a note to your\ncalendar to follow up to make sure it’s complete. If standards or deadlines are not being met, give direct feedback to\nchange future behavior.\nVerbalize your thoughts.\nSimply saying things like “I’m disappointed in this work” is extremely powerful in helping\npeople directly understand where you stand. People aren’t mind-readers, so rather than just jumping into solutions when\ngiving feedback, state your feelings out loud to be clear and direct.\nManage for the employee.\nMy favorite interview question for manager candidates is “How would you describe your\nmanagement style?”, where the best possible answer is “it depends on the employee”. Each person has a unique combination\nof experience, motivations, personality, etc, and it’s up to you to take the right management approach that helps them\nsucceed and maximizes their contribution.\nUnderstand that everyone’s different.\nJust because you may be an achiever that’s self-motivated to get things done\ndoesn’t mean that everyone else on your team is. Get curious to figure out what drives and motivates each individual on\nyour team, rather than assuming everyone’s like you.\nHire slow, fire fast.\nIt’s the thing everyone says and few have the discipline to do, but hiring well is the most\nimportant thing you can possibly do to positively impact your business and your team. Great people want to work with\nother great people, so resist the temptation to fill open positions with mediocre candidates, and don’t settle. You\nshould be thrilled about each new hire.\nHire for hunger. It’s great when a potential candidate walks in the door with all the skills needed to succeed in the\nrole, but passion for your mission, business, and team will do more to drive an employee to make a big, long-term impact\nthan any specific skills they may have. Passionate employees will be quicker to teach themselves new skills too,\nespecially as your business changes and grows.\nSet your team up for success.\nIt’s unfair to expect even the best people to hit the ground running on day one\nwithout being properly onboarded. As their manager, it’s your responsibility to invest the time early on to set\nexpectations, show them the ropes, teach them about your business, train them, and provide clear direction and a\nwell-defined role. Anything less will diminish their ability to succeed.\nYour trust should be earned.\nDon’t just assume that new and more inexperienced team members will hit the ground\nrunning and understand your expectations from day one. Make them prove themselves first by working more closely with\nthem and frequently reviewing their work until they’ve earned your full trust.\nShield your team from distractions.\nProvide structure, focus, and clear goals for your team to maximize their\nability to execute on the strategy. They should come in to work each day knowing exactly what they’re working on and\nexactly what they need to do, and any other distractions should be deflected to keep from derailing productivity,\nwasting time, and knocking the team off course.\nInclude your team in decision-making.\nIf you’ve hired great people, you’d be crazy not to include them in important\ndecisions. Define the decision-making process upfront to set expectations for your team — will it be a decision by\ncommittee, will someone else on your team own the decision, or will you gather feedback to make the final call yourself?\nListen to their thoughts and opinions with an open mind, make sure everyone feels heard, then decide the best course of\naction. It may even go against the consensus of the team, and that’s ok so long as you’ve defined the process and\nexpectations up front. Even if your team disagrees with the final call, by including them in the process they will\nbetter understand the decision, feel like their opinion was valued, and be able to get on board to help support the\ndecision going forward.\nA little professional tension is healthy.\nDiffering perspectives help make teams and products better, so a little\nprofessional tension can be really valuable to help push your team to think about things in new ways. It should be\nnet-positive though, so if it’s forcing too many decisions to get stuck in the mud, or if the tension moves from\nprofessional to personal, then you need to take action to eliminate it quickly before it drags down the team or blows\nup.\nShow your work.\nExplain your decision-making process. Whenever you take a controversial action or make a difficult\ndecision, it’s especially powerful to fully explain how you arrived at that decision so your team can understand your\nthought process and rationale, and ultimate help support the decision.\nIt’s ok to not always know the answer.\nAsk questions, probe, and admit when you don’t know the answer to something.\nThere’s nothing wrong with saying you’ll need some time to think or learn more before making an important decision.\nHave consistent 1-on-1s every week.\nThese are for the benefit of your employees, so you should let them drive the\nagenda each week. From your side, it’s an opportunity to set aside some focused time each week to talk privately, get on\nthe same page, and ask open-ended questions like “how are things going?”, “how are you feeling?”, “what are your\nthoughts on the big news that was announced earlier this week?”, “what’s your opinion on X?”, etc. Prioritize these\nmeetings in your schedule, go out of your way to keep from canceling or rescheduling them whenever possible, and your\nconsistent time and attention will send a signal to your team that you care about their happiness.\nEase the maker to manager transition.\nAs you scale from a team of individual contributors to a more structured org,\nthe maker to manager transition will challenge your best people. Just because someone is an outstanding individual\ncontributor doesn’t mean they’ll be an outstanding manager right off the bat, because it requires a completely different\nset of skills and experience. And during the transition, their instinct will be to take on both their prior maker and\ntheir new manager duties – spending 75% effort on making and 75% effort on managing – a 150% workload resulting in less\nthan 100% output in each area. Put structure in place to allow them to focus on being a manager first and foremost, and\ntake maker duties off of their plate.\nCreate a career path.\nEvery 6 months, ask your employees where they want to be in their career in the next 2–3\nyears. Work with them to put together a plan, help them get the skills and experience they need, and guide them on a\ncourse to get there.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply"
    }
  },
  {
    "name_blog": "Yuri Sagalov, Co-Founder of AeroFS",
    "description_blog": "The Social Radars talk with Yuri Sagalov. His company AeroFS, which did enterprise file syncing and sharing, was funded by Y Combinator in summer 2010. Yuri went on to work at Y Combinator before starting his own fund, Wayfinder Ventures.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/L1-yuri-sagalov-co-founder-of-aerofs",
    "content": {
      "table_of_contents": [],
      "whole_content": "The Social Radars talk with Yuri Sagalov. His company AeroFS, which did enterprise file syncing and sharing, was funded\nby Y Combinator in summer 2010. Yuri went on to work at Y Combinator before starting his own fund, Wayfinder Ventures."
    }
  },
  {
    "name_blog": "Adora Cheung, Co-founder of Homejoy & Instalab",
    "description_blog": "The Social Radars (Jessica Livingston and Carolynn Levy) chat with Adora Cheung, Co-founder of Homejoy (YC S10) and now Instalab, an at-home blood testing service that helps you optimize your health by measuring over 60 biomarkers. ",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/L0-adora-cheung-co-founder-of-homejoy-instalab",
    "content": {
      "table_of_contents": [],
      "whole_content": "The Social Radars (Jessica Livingston and Carolynn Levy) chat with Adora Cheung, Co-founder of Homejoy (YC S10) and now\nInstalab, an at-home blood testing service that helps you optimize your health by measuring over 60 biomarkers. The\nconversation is wide-ranging: from how to clean homes efficiently to how she helped defeat Trump in 2020 by getting\nhundreds of thousands of votes in swing states."
    }
  },
  {
    "name_blog": "Trevor Blackwell, Co-founder Y Combinator; Founder, Anybots",
    "description_blog": "",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/Kz-trevor-blackwell-co-founder-y-combinator-founder-anybots",
    "content": {
      "table_of_contents": [],
      "whole_content": "The Social Radars (Jessica Livingston and Carolynn Levy) talk with Trevor Blackwell, one of Jessica’s fellow co-founders\nat Y Combinator. He was also the founder of Anybots, where he created the first dynamically balancing biped robot, and\nalso worked on Viaweb with Paul Graham and Robert Morris."
    }
  },
  {
    "name_blog": "Parker Conrad, Founder of Zenefits & Rippling",
    "description_blog": "The Social Radars (Jessica Livingston and Carolynn Levy) talk with Parker Conrad, who founded two startups that went on to become unicorns: Zenefits in 2013, and Rippling in 2016. Parker’s story is one the more dramatic ones you’ll hear on this podcast.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/Ky-parker-conrad-founder-of-zenefits-rippling",
    "content": {
      "table_of_contents": [],
      "whole_content": "The Social Radars (Jessica Livingston and Carolynn Levy) talk with Parker Conrad, who founded two startups that went on\nto become unicorns: Zenefits in 2013, and Rippling in 2016. Parker’s story is one the more dramatic ones you’ll hear on\nthis podcast."
    }
  },
  {
    "name_blog": "Patrick & John Collison, Co-Founders of Stripe",
    "description_blog": "The Social Radars",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/Kx-patrick-john-collison-co-founders-of-stripe",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode The Social Radars (Jessica Livingston and Carolynn Levy) catch up with Patrick and John Collison, two\nbrothers from Ireland who founded Stripe in 2009."
    }
  },
  {
    "name_blog": "Emmett Shear, Co-Founder of Twitch",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Twitch co-founder Emmett Shear about “how Twitch grew from Justin Kan walking around with a camera on his head to one of the biggest communities on the internet.”",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/KM-emmett-shear-co-founder-of-twitch",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Twitch co-founder Emmett Shear about\n“how Twitch grew from Justin Kan walking around with a camera on his head to one of the biggest communities on the\ninternet.”"
    }
  },
  {
    "name_blog": "Bill Clerico, Co-Founder & CEO of WePay",
    "description_blog": "The Social Radars (Jessica Livingston and Carolynn Levy) talk with Bill Clerico, co-founder of WePay, about starting one of first examples of what we now call “FinTech” startup and selling it to J.P. Morgan for $400M. ",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/KH-bill-clerico-co-founder-ceo-of-wepay",
    "content": {
      "table_of_contents": [],
      "whole_content": "The Social Radars (Jessica Livingston and Carolynn Levy) talk with Bill Clerico, co-founder and CEO of\nWePay\n, about starting one of first examples of what we now call a\n“FinTech” startup and selling it to J.P. Morgan for $400M."
    }
  },
  {
    "name_blog": "Dimitri Dadiomov, Co-Founder & CEO of Modern Treasury",
    "description_blog": "The Social Radars (Jessica Livingston and Carolynn Levy) talk to the co-founder of Modern Treasury about a crucial world most people never think about: how money actually gets moved around.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/KC-dimitri-dadiomov-co-founder-ceo-of-modern-treasury",
    "content": {
      "table_of_contents": [],
      "whole_content": "Jessica Livingston and Carolynn Levy are The Social Radars. In this episode, they’ll talk to\nModern\nTreasury\n(S18) co-founder and CEO Dimitri Dadiomov about a\ncrucial world most people never think about: the movement of money into and out of companies."
    }
  },
  {
    "name_blog": "Brian Armstrong, Co-Founder and CEO of Coinbase",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Coinbase co-founder and CEO Brian Armstrong about the company’s earliest days",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/K3-brian-armstrong-co-founder-and-ceo-of-coinbase",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Coinbase co-founder and CEO Brian\nArmstrong about the company’s earliest days, why he applied to YC (multiple times), and his experiences in the\never-evolving world of cryptocurrency."
    }
  },
  {
    "name_blog": "Brian Chesky, Co-Founder & CEO of Airbnb (Part II)",
    "description_blog": "In this episode of The Social Radars, Brian Chesky returns to tell Jessica and Carolynn more of Airbnb’s story .",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/Jx-brian-chesky-co-founder-ceo-of-airbnb-part-ii",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Brian Chesky returns to tell Jessica and Carolynn more of Airbnb’s story so far.\nThis episodes continues the story from where it left off in\nPart\nI\n."
    }
  },
  {
    "name_blog": "Paul Buchheit, Creator of Gmail",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Paul Buchheit, a Group Partner at YC and the creator of Gmail.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/Jc-paul-buchheit-creator-of-gmail",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Paul Buchheit, a Group Partner at YC\nand the creator of Gmail. Listen in on this “deep dive into the history of Gmail, including the fact that it might never\nhave launched if it weren’t for a leak to the New York Times.”"
    }
  },
  {
    "name_blog": "David Lieb, Creator of Google Photos",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to David Lieb, YC Visiting Partner and founder of Bump, the app that evolved into Google Photos.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/Jb-david-lieb-creator-of-google-photos",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to David Lieb, YC Visiting Partner and\nfounder of Bump, the app that evolved into Google Photos. Listen in as he talks about getting acquired by Google and\nultimately transforming his app into one of the biggest photo services in the world."
    }
  },
  {
    "name_blog": "Tony Xu, Co-Founder & CEO of Doordash",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Tony Xu, co-founder & CEO of Doordash.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/Ja-tony-xu-co-founder-ceo-of-doordash",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Tony Xu, co-founder & CEO of\nDoordash. Listen in as Tony takes them “through version 1 of their idea to what is now a public company operating in 27\ncountries across the globe.”"
    }
  },
  {
    "name_blog": "Garry Tan, President and CEO of Y Combinator",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Garry Tan, President and CEO of Y Combinator.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/JZ-garry-tan-president-and-ceo-of-y-combinator",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Garry Tan, President and CEO of Y\nCombinator, about his path from turning down a job with Peter Thiel, to founding a YC-backed company in 2008, then\nstarting his own multi-billion dollar fund in 2011, and finally returning to run Y Combinator in 2023."
    }
  },
  {
    "name_blog": "Tracy Young, Co-Founder & CEO of PlanGrid",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Tracy Young, Co-Founder of PlanGrid",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/JY-tracy-young-co-founder-ceo-of-plangrid",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Tracy Young, Co-Founder of PlanGrid.\nPlanGrid revolutionized the construction industry by getting blueprints off paper and onto tablets. You’ll hear about\nhow they found their idea, how they lost a cofounder to cancer in the first few weeks of YC, how they sold the company\nfor almost a billion dollars in 2018, and how she’s now gone on to start a new startup called TigerEye."
    }
  },
  {
    "name_blog": "Steve Huffman, Co-Founder & CEO of Reddit",
    "description_blog": "Jessica Livingston and Carolynn Levy talk to Steve Huffman, co-founder and CEO of Reddit.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/JX-steve-huffman-co-founder-ceo-of-reddit",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Steve Huffman, co-founder and CEO of\nReddit. Hear about Reddit's eventful early years and how they affected what it eventually became."
    }
  },
  {
    "name_blog": "Brian Chesky, Co-Founder & CEO of Airbnb",
    "description_blog": "Jessica Livingston and Carolynn Levy, talk to Brian Chesky, Co-Founder and CEO of Airbnb.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/JW-brian-chesky-co-founder-ceo-of-airbnb",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy, talk to Brian Chesky, Co-Founder and CEO of\nAirbnb. Learn what it takes to come up with an idea so weird that it seems like it will never work, and then make it\nwork.\nFind Part II of this episode\nhere\n."
    }
  },
  {
    "name_blog": "Paul Graham, Co-Founder of Y Combinator and Viaweb",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Paul Graham, Co-Founder of Y Combinator and Viaweb.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/JV-paul-graham-co-founder-of-y-combinator-and-viaweb",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Paul Graham, Co-Founder of Y\nCombinator and Viaweb. Before he invented the accelerator with Y Combinator, he invented the web app — in this episode,\nyou’ll hear how it all happened."
    }
  },
  {
    "name_blog": "Edith Elliott, Co-Founder & CEO of Noora Health",
    "description_blog": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Edith Elliot, cofounder of the non-profit startup Noora Health.",
    "authors": [
      "The Social Radars"
    ],
    "related_categories": [],
    "page_url": "https://www.ycombinator.com/library/JU-edith-elliott-co-founder-ceo-of-noora-health",
    "content": {
      "table_of_contents": [],
      "whole_content": "In this episode of The Social Radars, Jessica Livingston and Carolynn Levy talk to Edith Elliot, cofounder of the\nnon-profit startup\nNoora Health\n. Tune in to find out how “what\nstarted as a graduate school project turned into an organization that has changed the world.”"
    }
  },
  {
    "name_blog": "10 questions to discuss with a potential co-founder",
    "description_blog": "The 10 questions that we think are most important to answer when considering a potential co-founder.",
    "authors": [
      "Y Combinator"
    ],
    "related_categories": [
      "Co-Founders",
      "Becoming a Founder"
    ],
    "page_url": "https://www.ycombinator.com/library/Hj-10-questions-to-discuss-with-a-potential-co-founder",
    "content": {
      "table_of_contents": [],
      "whole_content": "Y Combinator runs a\nwebsite\nwhere we help people find potential\nco-founders.\nWhile running that, we’ve had a lot of people ask for a set of questions to help figure out whether they’re a good match\nwith a potential co-founder.\nWe’ve compiled a list of the 10 questions that we think are the most important ones to answer.  The best time to go\nthrough these is after you’ve gotten to know someone, have found an idea you’re both interested in working on, and are\ndeciding if you’re ready to commit to working together.\nWe’ve split this document into two sections: the 10 most important questions to discuss before deciding to work\ntogether, and other questions that will help you get to know each other.  We also included a checklist of things to do\nwhen bringing on a co-founder.\nNote that no questionnaire can be a substitute for actually spending a lot of time together in person to determine if\nyou like working together and get along well in practice. That’s the only way to know if you’re actually compatible with\nsomeone, and it usually takes several months to know for sure. This questionnaire is designed to supplement that, not\nreplace it.\nHere's the\nGoogle Doc\nversion of this questionnaire if you'd like\nto use it as a template.\n10 key questions to discuss before deciding to work together\nWe derived these 10 questions by talking to many teams who met on YC’s co-founder matching, and by looking at the most\ncommon reasons founding teams break up.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nFor a lot of these, you may not know the answer yet or may not have a strong opinion. That’s fine! Most things in\nstartups you figure out as you go.\nThe goal here is to detect situations where you might have strong differences, so you can discuss them early, rather\nthan being caught unawares later on.\nThe best way to go through this is for each founder to copy this document, write answers independently, then share your\nanswers and discuss.\nWhy do you want to do this startup?  What are your personal goals here, both financial and non-financial?\n**What will our roles and titles be? How will we divide responsibilities? Who will be CEO?**\nRoles inevitably change a lot over time, but you should have a plan for what you’ll each work on for the first 6-12\nmonths, and decide on who will be the CEO (and what the CEO’s responsibilities are).\n**How will we split up equity?**\nIt’s important to resolve this one early. This\nsection\nof the co-founder\nmatching manual may help.\nWhere will the company be based? Where will we each live? Will we work together in-person or remotely?\nWhat idea will we work on? If that idea doesn’t work out, are you willing to change the idea? Are you only\ninterested in working on ideas in certain areas?\n**What needs to happen for each of us to go full-time (quit other jobs or school commitments)?**\nI.e., We’d have to raise at least $xx from investors, we’d need to validate the idea with a paying customer, we’ll\ndo it if we’re enjoying working together in two months. Obviously, this is N/A if you are both full-time already.\nWhat is your personal financial situation? Are you willing to work for free and live on your savings? For how\nlong? If you'll need a salary to work on this full-time (either now or at some point), how much do you need to feel\ncomfortable?  Will either of us put money into the company?\nWhat will our typical working schedule be (what days we work, what hours / day, etc)?  How long do we want to keep\nthat up?  Are there any things outside of work that are important to you to make time for?\n**If we are successful enough to get to build a team of employees, are there things that are important to you\nabout how we do that?  I.e., building an in-person vs remote company, having certain cultural values, having a\nparticular approach to hiring or managing people?**\nIt’s fine if you don’t have strong opinions on this yet.\nWhat will we do if we’re having trouble agreeing on an important decision?  What will happen if we decide we don’t\nwant to work together anymore?\nQuestions to get to know each other better\nThese are questions that are designed to teach you things about each other that are important for having a good\nrelationship.  These are good ones to go through once you’ve decided that working together makes sense.\nHow would your friends or colleagues describe your strengths and weaknesses?\nWhat are you proud of having accomplished (can be work-related or not)?\nWhat do you do with your free time?  What are your hobbies and interests?\nOne of the surprising things about successful co-founders is how consistently they have overlapping outside-of-work\ninterests.\nWhat are companies, founders, or products you really admire - especially ones that you want to model this company\nafter?\nWhat were your experiences like at your past jobs or past startups? What did you like and not like about how the\ncompanies were run? What lessons did you take away?\nWhat is your life story and how have your experiences shaped your values?\nHave you worked with a co-founder previously?  What was that experience like?\nWhat kind of work is so fun for you it doesn’t feel like work? What kind of work do you avoid doing?\nWhat are your long-term goals in life?  What is your overall life plan and how does this startup fit into it?\nWhat makes you most excited about working with me?\nWhat makes you concerned about working with me?\nWhat environment do you work best in?  What can we do to help you create it?\nWhat’s the best way for me to give you feedback?\nWhen you feel stressed, do you tend to want to talk about what’s going on or avoid talking about it?\nPsychologist and founder coach\nAmy\nBuechler\nwrote an\nexcellent\narticle\non\nthis and how these two styles affect co-founder relationships.\n**Are there pressures in your life that you’re dealing with now?**\nOften pressures or challenges in your life create pressure on your startup.  If you’re dealing with a family issue,\na visa / immigration issue, a health issue, etc., you should really tell your co-founder because it’s important for\nthem to know what’s going on.\nChecklist of things to do when bringing on a co-founder\nOk, you’ve gone through the questionnaire and everything seems promising. Great!  Here are some related things you’ll\nwant to do.\nBefore deciding to work together:\n☐\nMeet in person\nand\ndo a trial\nproject\n.\n☐ Do reference calls on each other. Ask people who have worked with your potential co-founder what it was like working\nwith them, and for advice on how to work with them effectively. It’s best if you do this transparently – agree on when\nyou are ready to take this step and then swap suggested references.\n☐ Given how important this person is going to be in your life, if you have a spouse or a serious relationship, you\nshould have your significant other meet your co-founder.\nAfter deciding to work together:\n**☐ Create a system to prioritize tasks and decide what to work on.**\nThis is a great post on\none such\nsystem\n. You don’t have to adopt this\none, but it’s important to have\nsome\nsystem.\n**☐ Set up a recurring 1-1 with each other (typically once a week) to talk specifically about how things are going\nwith working together.**\nThis concept was created by Amy Buechler, who named them “Founder syncs”. She wrote a\ndetailed\nguide\nto how to run them.  Done correctly,\nthese can really help avoid co-founder breakups."
    }
  },
  {
    "name_blog": "Snapdocs' Aaron King on navigating market cycles",
    "description_blog": "Founder & CEO Aaron King expertly built Snapdocs (YC W14) through volatile market conditions and with minimal outside funding into the mortgage industry's leading digital closing platform, valued at $1.5B. This is what he learned about navigating market cycles.",
    "authors": [
      "Lindsay Amos"
    ],
    "related_categories": [
      "Real Estate",
      "Staying Alive",
      "Finance",
      "Cash Burn",
      "Management",
      "Leadership",
      "People",
      "Hiring",
      "Product",
      "Building Product"
    ],
    "page_url": "https://www.ycombinator.com/library/Gu-snapdocs-aaron-king-on-navigating-market-cycles",
    "content": {
      "table_of_contents": [],
      "whole_content": "Snapdocs\nis the leading digital closing platform for the mortgage industry. Today, the\ncompany touches 25% of all US real estate transactions and is valued at $1.5B. Founder and CEO\nAaron\nKing\nand his team have expertly navigated fundraising and market cycles. We sat down with\nAaron to hear his insight into getting a business up and running with minimal outside funding and building through\nvolatile market conditions.\nWhy did you decide to raise minimal funding early in the company’s history?\nI never considered funding to be a requirement for building — but I also didn't know much about fundraising early on in\nthe company’s history. Snapdocs was started as a side project a couple of years before ever thinking about applying to\nYC. By the time I applied, we had a live product, customers, and revenue. Even after YC, we didn’t raise much\nimmediately. We stayed focused on building and then raised a seed round later in the year.\nIt wasn’t until three years later that we raised our Series A. By then, we had spent about $1MM of our seed round and\nwere at a $5MM revenue run rate. Around that time we started working with much larger customers, and it was clear we\nwould need more capital to be successful in this bigger market. So, we raised our Series A. After we closed the round,\nour lead investor revealed how capital efficient we had been compared to our peers.\nDo you feel you had to ruthlessly prioritize when building the product because you didn't have the capital?\nYes, and I’ve learned that you should take the same approach even when you do have the capital to be less disciplined.\nBack then, ruthless prioritization was our only option. We couldn’t afford to build features that weren’t essential.\nThere were always a hundred distractions that would result in a broader, less focused product. But our capital\nconstraints kept us focused on going deep with our paying customers. That helped us avoid the common trap of building\nproducts no one wanted.\nWhat is Y Combinator?\nWe're an accelerator that funds startups — like Coinbase, Instacart, Reddit, Doordash — at their earliest stages. Starting a company? Even if it feels early, 40% of our companies joined with just an idea.\nApply\nIt also meant that when we decided to build a product, we had to think about the smallest version of that product in\norder to quickly ship. That helped ensure we had a short feedback loop from our users and ensure our resources were\ncontinuously being invested in building the right features. Looking back, I’m amazed at how much we were able to\naccomplish without spending much capital.\nBeing capital constrained forced good behaviors that served us well even after we raised more funding. We continue to be\nthoughtful about every dollar we spend. But, there is a cost to this approach, and we’re paying for it today. We built\nmany things that weren't engineered for scale or flexibility. However, now we can afford to reengineer those unscalable\nsolutions because we built something people want.\nWhat did your product cycles look like before you raised your Series A?\nWe were always heavy on customer involvement when building product. We spent a lot of time in our customers’ offices\nwatching them use what we were building and understanding their work. We also kept a lot of our prospects in the loop as\nwe built new features. Some of the best feedback came from people who had chosen to not yet work with us. Responding to\nthat feedback with a killer feature was a great way to ultimately get them on board.\nWe built a lot of trust and rapport with these early customers, and the in-person interactions helped immensely. As a\nresult, they would call one of us the moment they thought there was a problem or if they thought a competitor was doing\nsomething compelling. Customer churn for Snapdocs has always been incredibly low as a result.\nWe created a disciplined product release process, even in those early days, but we were still able to move quickly. We\nshipped code every day, sometimes multiple times a day. Customers were impressed by how quickly we could respond to\nissues and feedback.\nInterestingly, not having too much pressure from investors early on allowed us to experiment more in an underappreciated\npart of our market. The Serviceable Available Market (SAM) of our initial product was roughly only $20MM, but we\nbelieved it would allow us to expand into more critical parts of the mortgage ecosystem. It was the type of opportunity\nthat would be hard to discover through market analysis or spreadsheet exercises. You had to get deep into the problem\nset to see the opportunity and develop the right strategy — and that ultimately worked to our advantage.\nFounders need capital to hire employees. As a bootstrapped company, what was your strategy around hiring?\nHiring was hard, but we did a few things that worked well. Even before the company could afford full-time employees, I\nworked with talented contractors. I also leaned on friends to help me work through both technical and business\nchallenges. Someone would come over and whiteboard with me or we’d get into the code and work through a problem.\nWhen I could afford to hire full-time employees, I treated them like founding team members. I was generous with equity\nand shared everything about the potential and challenges of the business. We built a lot of trust as a small team.\nGetting a few really good people into the company early on was foundational to the company’s success.\nThe first person to join full time was an engineer I had worked with in a previous role (and one of the friends that\nwould help in those early days). The second and third hires were applicants from job postings on Hacker News. All three\nturned out to be excellent. None of us initially had large networks in the startup world, so most of our early hiring\ninvolved lots of interviews and hiring a few of the wrong people. We couldn’t attract well-known talent and took risks;\ninvested in people we thought had a lot of potential.\nOne mistake I made in the early years was being too timid to approach more of the people I respected. I should have\ntried to convince them to quit their successful jobs and join our small (yet risky at the time) startup. I’m fearless on\nthis approach now, but back then I was intimidated to try to convince a friend to join a company that might fail. In\nhindsight I did them a disservice by not trying to recruit them. The truth is that these people are smart and you’re not\nharming anyone by sharing your vision and the potential of the company with them. As long as you’re honest and\ntransparent about the inherent challenges, you should give them the opportunity to take a risk on you.\nAs Snapdocs grew, it became easier to pull from the team’s networks. We continued to build a lot of trust within the\nteam, and they started referring their friends to apply. Eventually we attracted well-known investors, and that, along\nwith our culture and growth, made hiring easier.\nBecause we were capital constrained, we also didn’t hire anyone until there was a clear and painful need. It made\nrunning the company harder because we were all spread thin, but ultimately made us incredibly productive, as it meant we\nwere always working on the most important things.\nHow have you navigated different market conditions? When do you decide to react?\nA big part of our success has come from selectively ignoring some market changes, while reacting quickly to others. It\nhas always been a question of how the change aligns with our resources, vision, and north star metric of market share\ngrowth.\nFor example, the biggest and most dynamic change we regularly experience are fluctuations in the number of mortgages\nthat happen in a given month or year.This can change quickly based on a host of economic factors. When we are\nwell-resourced and growing fast, we can ignore some of those market downturns and stay focused on market share growth —\nknowing we have the momentum and capital to power through it. Other times we’ve had to scale up or scale back based on\nthe size of the fluctuation.\nBut other market dynamics can change quickly too, like the industry’s appetite for new technologies and the competitive\nlandscape. There have been times when the market was demanding a technology but we believed there were underlying\nfactors in the industry that would prevent that tech from scaling. If we built the technology, it would pull resources\naway from our priorities that drove us towards our long-term goals. And so, sometimes to the protests of our sales team,\nwe ignored it or invested minimally in these trendy areas. By doing so, we were able to stay focused on the things that\nwere truly going to transform the industry.\nIt’s also worth noting that navigating change was relatively easy in the first few years of building the company. It was\na lot easier to adjust course on company direction or strategy when the team was smaller and could all fit in the same\nroom. The product cycles were relatively short and malleable. The cost of making a change was low.\nAs the company has grown, we’ve had to be a lot more thoughtful and methodical about changing the speed or direction of\nthe business as we react to market changes. The cost of making a change has increased a lot. Investments take longer to\nplay out. Changes to headcount take longer to scale up or down. There are more people on the team and more layers in the\norganization to communicate the change through.\nIn March 2020, Snapdocs made a huge shift because of changes you were seeing in the housing market. How did you\ncommunicate this shift to your team and ensure their goals were aligned with the new priorities?\nCOVID accelerated demand for our product, but with that came a shift in what our customers wanted from a platform like\nours. We had to expand quickly to serve their needs, and we had to pivot our roadmap on a dime. It’s a testament to the\nteam that we were able to pull that off.\nTo make decisions quickly and then communicate them, we worked in concentric circles. We started by discussing the\nchange in a smaller group of 3-4 people. This is where the hardest and messiest conversations took place. We moved\nquickly to define the problems and opportunities and set a direction for the company. We then looped in the senior\nleadership team for further discussion and to arm them with everything they needed to share the directional changes with\ntheir teams. Finally, we held a company-wide meeting to share the new direction and answer questions. All of this\nhappened over the course of about 2 weeks.\nNow, our business required more speed and flexibility as information was coming in and changing week on week. We dealt\nwith this by  temporary pods of 4-5 team members focused on solving specific challenges that would spin up for a few\nweeks and then dissolve once the challenge was addressed. We also increased the frequency of our company wide all-hand\nmeetings from monthly to weekly so we could keep the whole company up to speed.\nLuckily we had a deep culture of transparency that goes back to the beginning of the company. We’ve always tried to\nshare everything with our entire team — our cash balance, monthly growth rate, burn, our biggest challenges. This got\nharder as the team grew, but we’ve largely continued this transparency to today. It’s much easier to be transparent in\ntimes of great change if you've laid a foundation of trust and transparency in the past.\nWe also worked hard to be intellectually honest about the growth we were experiencing. It’s easy to take credit when the\nbusiness accelerates, but our message to the team wasn't, “Look at how great we're doing.” The message was closer to,\n“This industry works in cycles. We're in an up cycle now and that's great. There's going to be a down cycle. We don't\nknow when or how strong it's going to be. But we should not overly congratulate ourselves for the current situation,\njust as we shouldn’t be too hard on ourselves when we’re fighting through an inevitable downturn in the future.”\nIn 2021, Snapdocs\nannounced\na Series D\nround. How did this change your mentality around resources?\nIt was clear that the pandemic would be an accelerator for our business, and we needed to move fast to stay ahead of the\nmarket. We went from being frugal to raising larger rounds of capital and hiring seasoned executives who could help us\nscale. It’s important for companies to evolve at the right points in time and ask themselves, “Is what I did yesterday\nthe thing that's going to get me to where I need to be tomorrow?”. We asked that question and decided we needed to\nchange parts of our culture and capital investment strategy if we wanted to win.\nWhen we raised capital in 2021, transactions on Snapdocs had steadily increased to millions of closings a year and\nthousands of lenders and title companies were using our technology every month. Demand for mortgages throughout the\npandemic was strong, and we deployed an intentional strategy of prioritizing effectiveness over efficiency. We needed to\nget aggressive and expand our market position, which required capital.\nThe market turned again later in the year, with demand for mortgages cooling. It was clear that it was time to go back\nto some of our old ways of doing things. We ditched the motto of being effective over being efficient. This meant a\nreturn to ruthless prioritization of our focus. We shifted away from investing so heavily in future scale as we wouldn’t\nneed to tap into these systems for a few years.\nI find it helpful to remember that market fluctuations are normal and unavoidable. Startups should scale up at times and\nscale back at others. It’s hard and painful. There’s nothing easy or enjoyable about being understaffed to meet customer\ndemand on one side, or needing to let team members go on the other. But these ups and downs are natural and a necessary\npart of building an enduring company. In a startup, you’re always making hard decisions based on insufficient\ninformation. You’re never going to be able to perfectly predict the future. You need to keep making the best decisions\nyou can — knowing all the while that you may be wrong and need to change course again once the future becomes clearer."
    }
  }
]